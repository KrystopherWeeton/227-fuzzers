; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmspack.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmspack.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsFormattersPluginChunkType = type { %struct._cms_formatters_factory_list* }
%struct._cms_formatters_factory_list = type { i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* (i32, i32, i32)*, %struct._cms_formatters_factory_list* }
%struct._cmstransform_struct = type { i32, i32, void (%struct._cmstransform_struct*, i8*, i8*, i32, i32, %struct.cmsStride*)*, {}*, {}*, i8* (%struct._cmstransform_struct*, float*, i8*, i32)*, i8* (%struct._cmstransform_struct*, float*, i8*, i32)*, %struct._cmsCACHE, %struct._cmsPipeline_struct*, %struct._cmsPipeline_struct*, %struct._cms_NAMEDCOLORLIST_struct*, %struct._cms_NAMEDCOLORLIST_struct*, i32, i32, %struct.cmsCIEXYZ, %struct.cmsCIEXYZ, %struct.cmsSEQ*, i32, double, i32, %struct._cmsContext_struct*, i8*, void (%struct._cmsContext_struct*, i8*)*, void (%struct._cmstransform_struct*, i8*, i8*, i32, i32)* }
%struct.cmsStride = type { i32, i32, i32, i32 }
%struct._cmsCACHE = type { [16 x i16], [16 x i16] }
%struct._cmsPipeline_struct = type { %struct._cmsStage_struct*, i32, i32, i8*, void (i16*, i16*, i8*)*, void (float*, float*, i8*)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*)*, %struct._cmsContext_struct*, i32 }
%struct._cmsStage_struct = type { %struct._cmsContext_struct*, i32, i32, i32, i32, void (float*, float*, %struct._cmsStage_struct*)*, i8* (%struct._cmsStage_struct*)*, void (%struct._cmsStage_struct*)*, i8*, %struct._cmsStage_struct* }
%struct._cms_NAMEDCOLORLIST_struct = type { i32, i32, i32, [33 x i8], [33 x i8], %struct._cmsNAMEDCOLOR*, %struct._cmsContext_struct* }
%struct._cmsNAMEDCOLOR = type { [256 x i8], [3 x i16], [16 x i16] }
%struct.cmsCIEXYZ = type { double, double, double }
%struct.cmsSEQ = type { i32, %struct._cmsContext_struct*, %struct.cmsPSEQDESC* }
%struct.cmsPSEQDESC = type { i32, i32, i64, i32, %union.cmsProfileID, %struct._cms_MLU_struct*, %struct._cms_MLU_struct*, %struct._cms_MLU_struct* }
%union.cmsProfileID = type { [4 x i32] }
%struct._cms_MLU_struct = type { %struct._cmsContext_struct*, i32, i32, %struct._cmsMLUentry*, i32, i32, i8* }
%struct._cmsMLUentry = type { i16, i16, i32, i32 }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsFormatters16 = type { i32, i32, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* }
%struct.cmsFormattersFloat = type { i32, i32, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* }
%struct._cmsPluginBaseStruct = type { i32, i32, i32, %struct._cmsPluginBaseStruct* }
%struct.cmsCIELab = type { double, double, double }

@_cmsFormattersPluginChunk = hidden local_unnamed_addr global %struct._cmsFormattersPluginChunkType zeroinitializer, align 8
@_cmsAllocFormattersPluginChunk.FormattersPluginChunk = internal global %struct._cmsFormattersPluginChunkType zeroinitializer, align 8
@InputFormatters16 = internal unnamed_addr constant [43 x %struct.cmsFormatters16] [%struct.cmsFormatters16 { i32 4849688, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollLabDoubleTo16 }, %struct.cmsFormatters16 { i32 4784152, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollXYZDoubleTo16 }, %struct.cmsFormatters16 { i32 4849692, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollLabFloatTo16 }, %struct.cmsFormatters16 { i32 4784156, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollXYZFloatTo16 }, %struct.cmsFormatters16 { i32 4390920, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollDouble1Chan }, %struct.cmsFormatters16 { i32 4194304, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollDoubleTo16 }, %struct.cmsFormatters16 { i32 4194308, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollFloatTo16 }, %struct.cmsFormatters16 { i32 4194306, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollHalfTo16 }, %struct.cmsFormatters16 { i32 9, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1Byte }, %struct.cmsFormatters16 { i32 137, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1ByteSkip1 }, %struct.cmsFormatters16 { i32 265, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1ByteSkip2 }, %struct.cmsFormatters16 { i32 8201, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1ByteReversed }, %struct.cmsFormatters16 { i32 1048593, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll2Bytes }, %struct.cmsFormatters16 { i32 1966105, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollLabV2_8 }, %struct.cmsFormatters16 { i32 1982617, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollALabV2_8 }, %struct.cmsFormatters16 { i32 1966106, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollLabV2_16 }, %struct.cmsFormatters16 { i32 25, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3Bytes }, %struct.cmsFormatters16 { i32 1049, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3BytesSwap }, %struct.cmsFormatters16 { i32 1177, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3BytesSkip1Swap }, %struct.cmsFormatters16 { i32 16537, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3BytesSkip1SwapFirst }, %struct.cmsFormatters16 { i32 17561, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3BytesSkip1SwapSwapFirst }, %struct.cmsFormatters16 { i32 33, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4Bytes }, %struct.cmsFormatters16 { i32 8225, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4BytesReverse }, %struct.cmsFormatters16 { i32 16417, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4BytesSwapFirst }, %struct.cmsFormatters16 { i32 1057, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4BytesSwap }, %struct.cmsFormatters16 { i32 17441, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4BytesSwapSwapFirst }, %struct.cmsFormatters16 { i32 4097, i32 2058232, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollPlanarBytes }, %struct.cmsFormatters16 { i32 1, i32 2058232, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollChunkyBytes }, %struct.cmsFormatters16 { i32 10, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1Word }, %struct.cmsFormatters16 { i32 8202, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1WordReversed }, %struct.cmsFormatters16 { i32 394, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll1WordSkip3 }, %struct.cmsFormatters16 { i32 18, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll2Words }, %struct.cmsFormatters16 { i32 26, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3Words }, %struct.cmsFormatters16 { i32 34, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4Words }, %struct.cmsFormatters16 { i32 1050, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3WordsSwap }, %struct.cmsFormatters16 { i32 16538, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3WordsSkip1SwapFirst }, %struct.cmsFormatters16 { i32 1178, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll3WordsSkip1Swap }, %struct.cmsFormatters16 { i32 8226, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4WordsReverse }, %struct.cmsFormatters16 { i32 16418, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4WordsSwapFirst }, %struct.cmsFormatters16 { i32 1058, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4WordsSwap }, %struct.cmsFormatters16 { i32 17442, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Unroll4WordsSwapSwapFirst }, %struct.cmsFormatters16 { i32 4098, i32 2043896, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollPlanarWords }, %struct.cmsFormatters16 { i32 2, i32 2060280, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @UnrollAnyWords }], align 16
@InputFormattersFloat = internal unnamed_addr constant [7 x %struct.cmsFormattersFloat] [%struct.cmsFormattersFloat { i32 4849688, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollLabDoubleToFloat }, %struct.cmsFormattersFloat { i32 4849692, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollLabFloatToFloat }, %struct.cmsFormattersFloat { i32 4784152, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollXYZDoubleToFloat }, %struct.cmsFormattersFloat { i32 4784156, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollXYZFloatToFloat }, %struct.cmsFormattersFloat { i32 4194308, i32 2054136, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollFloatsToFloat }, %struct.cmsFormattersFloat { i32 4194304, i32 2054136, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollDoublesToFloat }, %struct.cmsFormattersFloat { i32 4194306, i32 2054136, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @UnrollHalfToFloat }], align 16
@OutputFormatters16 = internal unnamed_addr constant [55 x %struct.cmsFormatters16] [%struct.cmsFormatters16 { i32 4849688, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackLabDoubleFrom16 }, %struct.cmsFormatters16 { i32 4784152, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackXYZDoubleFrom16 }, %struct.cmsFormatters16 { i32 4849692, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackLabFloatFrom16 }, %struct.cmsFormatters16 { i32 4784156, i32 4992, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackXYZFloatFrom16 }, %struct.cmsFormatters16 { i32 4194304, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackDoubleFrom16 }, %struct.cmsFormatters16 { i32 4194308, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackFloatFrom16 }, %struct.cmsFormatters16 { i32 4194306, i32 2062328, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackHalfFrom16 }, %struct.cmsFormatters16 { i32 9, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1Byte }, %struct.cmsFormatters16 { i32 137, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1ByteSkip1 }, %struct.cmsFormatters16 { i32 16521, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1ByteSkip1SwapFirst }, %struct.cmsFormatters16 { i32 8201, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1ByteReversed }, %struct.cmsFormatters16 { i32 1966105, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackLabV2_8 }, %struct.cmsFormatters16 { i32 1982617, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackALabV2_8 }, %struct.cmsFormatters16 { i32 1966106, i32 0, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackLabV2_16 }, %struct.cmsFormatters16 { i32 2097177, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesOptimized }, %struct.cmsFormatters16 { i32 2097305, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1Optimized }, %struct.cmsFormatters16 { i32 2113689, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1SwapFirstOptimized }, %struct.cmsFormatters16 { i32 2114713, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1SwapSwapFirstOptimized }, %struct.cmsFormatters16 { i32 2098329, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1SwapOptimized }, %struct.cmsFormatters16 { i32 2098201, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesSwapOptimized }, %struct.cmsFormatters16 { i32 25, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3Bytes }, %struct.cmsFormatters16 { i32 153, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1 }, %struct.cmsFormatters16 { i32 16537, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1SwapFirst }, %struct.cmsFormatters16 { i32 17561, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1SwapSwapFirst }, %struct.cmsFormatters16 { i32 1177, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesAndSkip1Swap }, %struct.cmsFormatters16 { i32 1049, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3BytesSwap }, %struct.cmsFormatters16 { i32 49, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack6Bytes }, %struct.cmsFormatters16 { i32 1073, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack6BytesSwap }, %struct.cmsFormatters16 { i32 33, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4Bytes }, %struct.cmsFormatters16 { i32 8225, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4BytesReverse }, %struct.cmsFormatters16 { i32 16417, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4BytesSwapFirst }, %struct.cmsFormatters16 { i32 1057, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4BytesSwap }, %struct.cmsFormatters16 { i32 17441, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4BytesSwapSwapFirst }, %struct.cmsFormatters16 { i32 1, i32 2058232, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackAnyBytes }, %struct.cmsFormatters16 { i32 4097, i32 2058232, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackPlanarBytes }, %struct.cmsFormatters16 { i32 10, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1Word }, %struct.cmsFormatters16 { i32 138, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1WordSkip1 }, %struct.cmsFormatters16 { i32 16522, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1WordSkip1SwapFirst }, %struct.cmsFormatters16 { i32 8202, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1WordReversed }, %struct.cmsFormatters16 { i32 2058, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack1WordBigEndian }, %struct.cmsFormatters16 { i32 26, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3Words }, %struct.cmsFormatters16 { i32 1050, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsSwap }, %struct.cmsFormatters16 { i32 2074, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsBigEndian }, %struct.cmsFormatters16 { i32 154, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsAndSkip1 }, %struct.cmsFormatters16 { i32 1178, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsAndSkip1Swap }, %struct.cmsFormatters16 { i32 16538, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsAndSkip1SwapFirst }, %struct.cmsFormatters16 { i32 17562, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack3WordsAndSkip1SwapSwapFirst }, %struct.cmsFormatters16 { i32 34, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4Words }, %struct.cmsFormatters16 { i32 8226, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4WordsReverse }, %struct.cmsFormatters16 { i32 1058, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4WordsSwap }, %struct.cmsFormatters16 { i32 2082, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack4WordsBigEndian }, %struct.cmsFormatters16 { i32 50, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack6Words }, %struct.cmsFormatters16 { i32 1074, i32 2031616, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @Pack6WordsSwap }, %struct.cmsFormatters16 { i32 4098, i32 2043896, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackPlanarWords }, %struct.cmsFormatters16 { i32 2, i32 2060280, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @PackAnyWords }], align 16
@OutputFormattersFloat = internal unnamed_addr constant [7 x %struct.cmsFormattersFloat] [%struct.cmsFormattersFloat { i32 4849692, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackLabFloatFromFloat }, %struct.cmsFormattersFloat { i32 4784156, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackXYZFloatFromFloat }, %struct.cmsFormattersFloat { i32 4849688, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackLabDoubleFromFloat }, %struct.cmsFormattersFloat { i32 4784152, i32 4992, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackXYZDoubleFromFloat }, %struct.cmsFormattersFloat { i32 4194308, i32 2062328, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackFloatsFromFloat }, %struct.cmsFormattersFloat { i32 4194304, i32 2062328, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackDoublesFromFloat }, %struct.cmsFormattersFloat { i32 4194306, i32 2058232, i8* (%struct._cmstransform_struct*, float*, i8*, i32)* @PackHalfFromFloat }], align 16
@switch.table.PackFloatFrom16 = private unnamed_addr constant [25 x double] [double 6.553500e+02, double 6.553500e+02, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02, double 6.553500e+02], align 8
@switch.table.PackHalfFrom16 = private unnamed_addr constant [25 x float] [float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000, float 0x40847ACCC0000000], align 4
@switch.table.PackDoublesFromFloat = private unnamed_addr constant [25 x double] [double 1.000000e+02, double 1.000000e+02, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02, double 1.000000e+02], align 8
@switch.table.PackHalfFromFloat = private unnamed_addr constant [25 x float] [float 1.000000e+02, float 1.000000e+02, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_cmsAllocFormattersPluginChunk(%struct._cmsContext_struct* nocapture, %struct._cmsContext_struct* readonly) local_unnamed_addr #0 {
  %3 = alloca %struct._cmsFormattersPluginChunkType, align 8
  %4 = icmp eq %struct._cmsContext_struct* %1, null
  br i1 %4, label %48, label %5

5:                                                ; preds = %2
  %6 = bitcast %struct._cmsFormattersPluginChunkType* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = bitcast %struct._cmsFormattersPluginChunkType* %3 to i64*
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %1, i64 0, i32 2, i64 7
  %9 = bitcast i8** %8 to %struct._cmsFormattersPluginChunkType**
  %10 = load %struct._cmsFormattersPluginChunkType*, %struct._cmsFormattersPluginChunkType** %9, align 8
  %11 = getelementptr inbounds %struct._cmsFormattersPluginChunkType, %struct._cmsFormattersPluginChunkType* %10, i64 0, i32 0
  %12 = load %struct._cms_formatters_factory_list*, %struct._cms_formatters_factory_list** %11, align 8
  %13 = icmp eq %struct._cms_formatters_factory_list* %12, null
  %14 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 1
  %15 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %14, align 8
  br i1 %13, label %43, label %16

16:                                               ; preds = %5
  %17 = bitcast %struct._cmsFormattersPluginChunkType* %3 to i8**
  br label %18

18:                                               ; preds = %37, %16
  %19 = phi %struct._cms_formatters_factory_list* [ null, %16 ], [ %38, %37 ]
  %20 = phi %struct._cmsSubAllocator* [ %15, %16 ], [ %42, %37 ]
  %21 = phi %struct._cms_formatters_factory_list* [ %12, %16 ], [ %40, %37 ]
  %22 = phi %struct._cms_formatters_factory_list* [ null, %16 ], [ %25, %37 ]
  %23 = bitcast %struct._cms_formatters_factory_list* %21 to i8*
  %24 = tail call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %20, i8* nonnull %23, i32 16) #7
  %25 = bitcast i8* %24 to %struct._cms_formatters_factory_list*
  %26 = icmp eq i8* %24, null
  br i1 %26, label %47, label %27

27:                                               ; preds = %18
  %28 = getelementptr inbounds i8, i8* %24, i64 8
  %29 = bitcast i8* %28 to %struct._cms_formatters_factory_list**
  store %struct._cms_formatters_factory_list* null, %struct._cms_formatters_factory_list** %29, align 8
  %30 = icmp eq %struct._cms_formatters_factory_list* %22, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct._cms_formatters_factory_list, %struct._cms_formatters_factory_list* %22, i64 0, i32 1
  %33 = bitcast %struct._cms_formatters_factory_list** %32 to i8**
  store i8* %24, i8** %33, align 8
  br label %34

34:                                               ; preds = %31, %27
  %35 = icmp eq %struct._cms_formatters_factory_list* %19, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  store i8* %24, i8** %17, align 8
  br label %37

37:                                               ; preds = %36, %34
  %38 = phi %struct._cms_formatters_factory_list* [ %25, %36 ], [ %19, %34 ]
  %39 = getelementptr inbounds %struct._cms_formatters_factory_list, %struct._cms_formatters_factory_list* %21, i64 0, i32 1
  %40 = load %struct._cms_formatters_factory_list*, %struct._cms_formatters_factory_list** %39, align 8
  %41 = icmp eq %struct._cms_formatters_factory_list* %40, null
  %42 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %14, align 8
  br i1 %41, label %43, label %18

43:                                               ; preds = %37, %5
  %44 = phi %struct._cmsSubAllocator* [ %15, %5 ], [ %42, %37 ]
  %45 = call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %44, i8* nonnull %6, i32 8) #7
  %46 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 2, i64 7
  store i8* %45, i8** %46, align 8
  br label %47

47:                                               ; preds = %18, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  br label %53

48:                                               ; preds = %2
  %49 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 1
  %50 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %49, align 8
  %51 = tail call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %50, i8* bitcast (%struct._cmsFormattersPluginChunkType* @_cmsAllocFormattersPluginChunk.FormattersPluginChunk to i8*), i32 8) #7
  %52 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 2, i64 7
  store i8* %51, i8** %52, align 8
  br label %53

53:                                               ; preds = %48, %47
  ret void
}

declare i8* @_cmsSubAllocDup(%struct._cmsSubAllocator*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsRegisterFormattersPlugin(%struct._cmsContext_struct*, %struct._cmsPluginBaseStruct* readonly) local_unnamed_addr #0 {
  %3 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 7) #7
  %4 = icmp eq %struct._cmsPluginBaseStruct* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = bitcast i8* %3 to %struct._cms_formatters_factory_list**
  store %struct._cms_formatters_factory_list* null, %struct._cms_formatters_factory_list** %6, align 8
  br label %20

7:                                                ; preds = %2
  %8 = tail call i8* @_cmsPluginMalloc(%struct._cmsContext_struct* %0, i32 16) #7
  %9 = icmp eq i8* %8, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct._cmsPluginBaseStruct, %struct._cmsPluginBaseStruct* %1, i64 1
  %12 = bitcast %struct._cmsPluginBaseStruct* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i8* %8 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast i8* %3 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds i8, i8* %8, i64 8
  %18 = bitcast i8* %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i8* %3 to i8**
  store i8* %8, i8** %19, align 8
  br label %20

20:                                               ; preds = %7, %10, %5
  %21 = phi i32 [ 1, %5 ], [ 1, %10 ], [ 0, %7 ]
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct*, i32) local_unnamed_addr #1

declare i8* @_cmsPluginMalloc(%struct._cmsContext_struct*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* @_cmsGetFormatter(%struct._cmsContext_struct*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 7) #7
  %6 = bitcast i8* %5 to %struct._cms_formatters_factory_list**
  %7 = load %struct._cms_formatters_factory_list*, %struct._cms_formatters_factory_list** %6, align 8
  %8 = icmp eq %struct._cms_formatters_factory_list* %7, null
  br i1 %8, label %19, label %13

9:                                                ; preds = %13
  %10 = getelementptr inbounds %struct._cms_formatters_factory_list, %struct._cms_formatters_factory_list* %14, i64 0, i32 1
  %11 = load %struct._cms_formatters_factory_list*, %struct._cms_formatters_factory_list** %10, align 8
  %12 = icmp eq %struct._cms_formatters_factory_list* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %4, %9
  %14 = phi %struct._cms_formatters_factory_list* [ %11, %9 ], [ %7, %4 ]
  %15 = getelementptr inbounds %struct._cms_formatters_factory_list, %struct._cms_formatters_factory_list* %14, i64 0, i32 0
  %16 = load i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* (i32, i32, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* (i32, i32, i32)** %15, align 8
  %17 = tail call i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* %16(i32 %1, i32 %2, i32 %3) #7
  %18 = icmp eq i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* %17, null
  br i1 %18, label %9, label %88

19:                                               ; preds = %9, %4
  %20 = icmp eq i32 %2, 0
  br i1 %20, label %21, label %53

21:                                               ; preds = %19
  switch i32 %3, label %88 [
    i32 0, label %26
    i32 1, label %22
  ]

22:                                               ; preds = %21
  %23 = and i32 %1, -4993
  switch i32 %23, label %51 [
    i32 4849688, label %46
    i32 4849692, label %41
    i32 4784152, label %42
    i32 4784156, label %43
  ]

24:                                               ; preds = %26
  %25 = icmp eq i64 %35, 43
  br i1 %25, label %88, label %90

26:                                               ; preds = %21, %98
  %27 = phi i64 [ %99, %98 ], [ 0, %21 ]
  %28 = getelementptr inbounds [43 x %struct.cmsFormatters16], [43 x %struct.cmsFormatters16]* @InputFormatters16, i64 0, i64 %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %1
  %32 = getelementptr inbounds [43 x %struct.cmsFormatters16], [43 x %struct.cmsFormatters16]* @InputFormatters16, i64 0, i64 %27, i32 0
  %33 = load i32, i32* %32, align 16
  %34 = icmp eq i32 %31, %33
  %35 = or i64 %27, 1
  br i1 %34, label %36, label %24

36:                                               ; preds = %90, %26
  %37 = phi i64 [ %27, %26 ], [ %35, %90 ]
  %38 = and i64 %37, 4294967295
  %39 = getelementptr inbounds [43 x %struct.cmsFormatters16], [43 x %struct.cmsFormatters16]* @InputFormatters16, i64 0, i64 %38, i32 2
  %40 = load i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)** %39, align 8
  br label %88

41:                                               ; preds = %22
  br label %46

42:                                               ; preds = %22
  br label %46

43:                                               ; preds = %22
  br label %46

44:                                               ; preds = %51
  br label %46

45:                                               ; preds = %51
  br label %46

46:                                               ; preds = %51, %45, %44, %43, %42, %41, %22
  %47 = phi i64 [ 0, %22 ], [ 4, %51 ], [ 1, %41 ], [ 2, %42 ], [ 3, %43 ], [ 5, %44 ], [ 6, %45 ]
  %48 = getelementptr inbounds [7 x %struct.cmsFormattersFloat], [7 x %struct.cmsFormattersFloat]* @InputFormattersFloat, i64 0, i64 %47, i32 2
  %49 = bitcast i8* (%struct._cmstransform_struct*, float*, i8*, i32)** %48 to i8* (%struct._cmstransform_struct*, i16*, i8*, i32)**
  %50 = load i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)** %49, align 8
  br label %88

51:                                               ; preds = %22
  %52 = and i32 %1, -2054137
  switch i32 %52, label %88 [
    i32 4194308, label %46
    i32 4194304, label %44
    i32 4194306, label %45
  ]

53:                                               ; preds = %19
  %54 = and i32 %1, -2097153
  switch i32 %3, label %88 [
    i32 0, label %59
    i32 1, label %55
  ]

55:                                               ; preds = %53
  %56 = and i32 %1, -2102145
  switch i32 %56, label %83 [
    i32 4849692, label %78
    i32 4784156, label %74
    i32 4849688, label %75
    i32 4784152, label %76
  ]

57:                                               ; preds = %59
  %58 = icmp eq i64 %68, 55
  br i1 %58, label %88, label %100

59:                                               ; preds = %53, %108
  %60 = phi i64 [ %109, %108 ], [ 0, %53 ]
  %61 = getelementptr inbounds [55 x %struct.cmsFormatters16], [55 x %struct.cmsFormatters16]* @OutputFormatters16, i64 0, i64 %60, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = xor i32 %62, -1
  %64 = and i32 %54, %63
  %65 = getelementptr inbounds [55 x %struct.cmsFormatters16], [55 x %struct.cmsFormatters16]* @OutputFormatters16, i64 0, i64 %60, i32 0
  %66 = load i32, i32* %65, align 16
  %67 = icmp eq i32 %64, %66
  %68 = or i64 %60, 1
  br i1 %67, label %69, label %57

69:                                               ; preds = %100, %59
  %70 = phi i64 [ %60, %59 ], [ %68, %100 ]
  %71 = and i64 %70, 4294967295
  %72 = getelementptr inbounds [55 x %struct.cmsFormatters16], [55 x %struct.cmsFormatters16]* @OutputFormatters16, i64 0, i64 %71, i32 2
  %73 = load i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)** %72, align 8
  br label %88

74:                                               ; preds = %55
  br label %78

75:                                               ; preds = %55
  br label %78

76:                                               ; preds = %55
  br label %78

77:                                               ; preds = %83
  br label %78

78:                                               ; preds = %85, %83, %77, %76, %75, %74, %55
  %79 = phi i64 [ 0, %55 ], [ 4, %83 ], [ 6, %85 ], [ 1, %74 ], [ 2, %75 ], [ 3, %76 ], [ 5, %77 ]
  %80 = getelementptr inbounds [7 x %struct.cmsFormattersFloat], [7 x %struct.cmsFormattersFloat]* @OutputFormattersFloat, i64 0, i64 %79, i32 2
  %81 = bitcast i8* (%struct._cmstransform_struct*, float*, i8*, i32)** %80 to i8* (%struct._cmstransform_struct*, i16*, i8*, i32)**
  %82 = load i8* (%struct._cmstransform_struct*, i16*, i8*, i32)*, i8* (%struct._cmstransform_struct*, i16*, i8*, i32)** %81, align 8
  br label %88

83:                                               ; preds = %55
  %84 = and i32 %1, -4159481
  switch i32 %84, label %85 [
    i32 4194308, label %78
    i32 4194304, label %77
  ]

85:                                               ; preds = %83
  %86 = and i32 %1, -4155385
  %87 = icmp eq i32 %86, 4194306
  br i1 %87, label %78, label %88

88:                                               ; preds = %13, %57, %24, %85, %78, %69, %53, %51, %46, %36, %21
  %89 = phi i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* [ %50, %46 ], [ %40, %36 ], [ null, %21 ], [ null, %51 ], [ %82, %78 ], [ %73, %69 ], [ null, %53 ], [ null, %85 ], [ null, %24 ], [ null, %57 ], [ %17, %13 ]
  ret i8* (%struct._cmstransform_struct*, i16*, i8*, i32)* %89

90:                                               ; preds = %24
  %91 = getelementptr inbounds [43 x %struct.cmsFormatters16], [43 x %struct.cmsFormatters16]* @InputFormatters16, i64 0, i64 %35, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = xor i32 %92, -1
  %94 = and i32 %93, %1
  %95 = getelementptr inbounds [43 x %struct.cmsFormatters16], [43 x %struct.cmsFormatters16]* @InputFormatters16, i64 0, i64 %35, i32 0
  %96 = load i32, i32* %95, align 16
  %97 = icmp eq i32 %94, %96
  br i1 %97, label %36, label %98

98:                                               ; preds = %90
  %99 = add nuw nsw i64 %27, 2
  br label %26

100:                                              ; preds = %57
  %101 = getelementptr inbounds [55 x %struct.cmsFormatters16], [55 x %struct.cmsFormatters16]* @OutputFormatters16, i64 0, i64 %68, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = xor i32 %102, -1
  %104 = and i32 %54, %103
  %105 = getelementptr inbounds [55 x %struct.cmsFormatters16], [55 x %struct.cmsFormatters16]* @OutputFormatters16, i64 0, i64 %68, i32 0
  %106 = load i32, i32* %105, align 16
  %107 = icmp eq i32 %104, %106
  br i1 %107, label %69, label %108

108:                                              ; preds = %100
  %109 = add nuw nsw i64 %60, 2
  br label %59
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_cmsFormatterIsFloat(i32) local_unnamed_addr #3 {
  %2 = lshr i32 %0, 22
  %3 = and i32 %2, 1
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_cmsFormatterIs8bit(i32) local_unnamed_addr #3 {
  %2 = and i32 %0, 7
  %3 = icmp eq i32 %2, 1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsFormatterForColorspaceOfProfile(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @cmsGetColorSpace(i8* %0) #7
  %5 = tail call i32 @_cmsLCMScolorSpace(i32 %4) #7
  %6 = tail call i32 @cmsChannelsOf(i32 %4) #7
  %7 = icmp ne i32 %2, 0
  %8 = zext i1 %7 to i32
  %9 = shl nuw nsw i32 %8, 22
  %10 = shl i32 %5, 16
  %11 = shl i32 %6, 3
  %12 = or i32 %9, %1
  %13 = or i32 %12, %10
  %14 = or i32 %13, %11
  ret i32 %14
}

declare i32 @cmsGetColorSpace(i8*) local_unnamed_addr #1

declare i32 @_cmsLCMScolorSpace(i32) local_unnamed_addr #1

declare i32 @cmsChannelsOf(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsFormatterForPCSOfProfile(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @cmsGetPCS(i8* %0) #7
  %5 = tail call i32 @_cmsLCMScolorSpace(i32 %4) #7
  %6 = tail call i32 @cmsChannelsOf(i32 %4) #7
  %7 = icmp ne i32 %2, 0
  %8 = zext i1 %7 to i32
  %9 = shl nuw nsw i32 %8, 22
  %10 = shl i32 %5, 16
  %11 = shl i32 %6, 3
  %12 = or i32 %9, %1
  %13 = or i32 %12, %10
  %14 = or i32 %13, %11
  ret i32 %14
}

declare i32 @cmsGetPCS(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollLabDoubleTo16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIELab, align 8
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %4
  %11 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 1
  %13 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 2
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = shl i32 %3, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = bitcast i8* %2 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %struct.cmsCIELab* %5 to i64*
  store i64 %20, i64* %21, align 8
  %22 = bitcast i8* %15 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast double* %12 to i64*
  store i64 %23, i64* %24, align 8
  %25 = bitcast i8* %18 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast double* %13 to i64*
  store i64 %26, i64* %27, align 8
  call void @cmsFloat2LabEncoded(i16* %1, %struct.cmsCIELab* nonnull %5) #7
  %28 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %37

29:                                               ; preds = %4
  %30 = bitcast i8* %2 to %struct.cmsCIELab*
  tail call void @cmsFloat2LabEncoded(i16* %1, %struct.cmsCIELab* %30) #7
  %31 = load i32, i32* %6, align 8
  %32 = lshr i32 %31, 4
  %33 = and i32 %32, 56
  %34 = add nuw nsw i32 %33, 24
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %2, i64 %35
  br label %37

37:                                               ; preds = %29, %10
  %38 = phi i8* [ %28, %10 ], [ %36, %29 ]
  ret i8* %38
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollXYZDoubleTo16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIEXYZ, align 8
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %4
  %11 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 1
  %13 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 2
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = shl i32 %3, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = bitcast i8* %2 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %struct.cmsCIEXYZ* %5 to i64*
  store i64 %20, i64* %21, align 8
  %22 = bitcast i8* %15 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast double* %12 to i64*
  store i64 %23, i64* %24, align 8
  %25 = bitcast i8* %18 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast double* %13 to i64*
  store i64 %26, i64* %27, align 8
  call void @cmsFloat2XYZEncoded(i16* %1, %struct.cmsCIEXYZ* nonnull %5) #7
  %28 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %37

29:                                               ; preds = %4
  %30 = bitcast i8* %2 to %struct.cmsCIEXYZ*
  tail call void @cmsFloat2XYZEncoded(i16* %1, %struct.cmsCIEXYZ* %30) #7
  %31 = load i32, i32* %6, align 8
  %32 = lshr i32 %31, 4
  %33 = and i32 %32, 56
  %34 = add nuw nsw i32 %33, 24
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %2, i64 %35
  br label %37

37:                                               ; preds = %29, %10
  %38 = phi i8* [ %28, %10 ], [ %36, %29 ]
  ret i8* %38
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollLabFloatTo16(%struct._cmstransform_struct* nocapture readonly, i16*, i8* readonly, i32) #0 {
  %5 = alloca %struct.cmsCIELab, align 16
  %6 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 2
  %8 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %9 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 24, i1 false)
  %10 = load i32, i32* %8, align 8
  %11 = and i32 %10, 4096
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %4
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = shl i32 %3, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = bitcast i8* %2 to float*
  %20 = load float, float* %19, align 4
  %21 = bitcast i8* %15 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <2 x float> undef, float %20, i32 0
  %24 = insertelement <2 x float> %23, float %22, i32 1
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = bitcast %struct.cmsCIELab* %5 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 16
  %27 = bitcast i8* %18 to float*
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  store double %29, double* %7, align 16
  call void @cmsFloat2LabEncoded(i16* %1, %struct.cmsCIELab* nonnull %5) #7
  br label %44

30:                                               ; preds = %4
  %31 = bitcast i8* %2 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = fpext <2 x float> %32 to <2 x double>
  %34 = bitcast %struct.cmsCIELab* %5 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 16
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  store double %38, double* %7, align 16
  call void @cmsFloat2LabEncoded(i16* %1, %struct.cmsCIELab* nonnull %5) #7
  %39 = load i32, i32* %8, align 8
  %40 = lshr i32 %39, 5
  %41 = and i32 %40, 28
  %42 = add nuw nsw i32 %41, 12
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %30, %13
  %45 = phi i64 [ %43, %30 ], [ 4, %13 ]
  %46 = getelementptr inbounds i8, i8* %2, i64 %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  ret i8* %46
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollXYZFloatTo16(%struct._cmstransform_struct* nocapture readonly, i16*, i8* readonly, i32) #0 {
  %5 = alloca %struct.cmsCIEXYZ, align 16
  %6 = alloca %struct.cmsCIEXYZ, align 16
  %7 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 4096
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %4
  %12 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7
  %13 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 2
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = shl i32 %3, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = bitcast i8* %2 to float*
  %20 = load float, float* %19, align 4
  %21 = bitcast i8* %15 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <2 x float> undef, float %20, i32 0
  %24 = insertelement <2 x float> %23, float %22, i32 1
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = bitcast %struct.cmsCIEXYZ* %5 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 16
  %27 = bitcast i8* %18 to float*
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  store double %29, double* %13, align 16
  call void @cmsFloat2XYZEncoded(i16* %1, %struct.cmsCIEXYZ* nonnull %5) #7
  br label %46

30:                                               ; preds = %4
  %31 = bitcast %struct.cmsCIEXYZ* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #7
  %32 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %6, i64 0, i32 2
  %33 = bitcast i8* %2 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = fpext <2 x float> %34 to <2 x double>
  %36 = bitcast %struct.cmsCIEXYZ* %6 to <2 x double>*
  store <2 x double> %35, <2 x double>* %36, align 16
  %37 = getelementptr inbounds i8, i8* %2, i64 8
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  store double %40, double* %32, align 16
  call void @cmsFloat2XYZEncoded(i16* %1, %struct.cmsCIEXYZ* nonnull %6) #7
  %41 = load i32, i32* %7, align 8
  %42 = lshr i32 %41, 5
  %43 = and i32 %42, 28
  %44 = add nuw nsw i32 %43, 12
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %30, %11
  %47 = phi i64 [ %45, %30 ], [ 4, %11 ]
  %48 = phi i8* [ %31, %30 ], [ %12, %11 ]
  %49 = getelementptr inbounds i8, i8* %2, i64 %47
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #7
  ret i8* %49
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @UnrollDouble1Chan(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #4 {
  %5 = bitcast i8* %2 to double*
  %6 = load double, double* %5, align 8
  %7 = fmul double %6, 6.553500e+04
  %8 = fadd double %7, 5.000000e-01
  %9 = fcmp ugt double %8, 0.000000e+00
  br i1 %9, label %10, label %18

10:                                               ; preds = %4
  %11 = fcmp ult double %8, 6.553500e+04
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = fadd double %8, -3.276700e+04
  %14 = tail call double @llvm.floor.f64(double %13) #7
  %15 = fptosi double %14 to i32
  %16 = trunc i32 %15 to i16
  %17 = add i16 %16, 32767
  br label %18

18:                                               ; preds = %4, %10, %12
  %19 = phi i16 [ %17, %12 ], [ 0, %4 ], [ -1, %10 ]
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %19, i16* %21, align 2
  store i16 %19, i16* %1, align 2
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %22
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollDoubleTo16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = and i32 %6, 4096
  %16 = lshr i32 %6, 16
  %17 = and i32 %16, 31
  %18 = add nsw i32 %17, -5
  %19 = icmp ult i32 %18, 25
  br i1 %19, label %20, label %24

20:                                               ; preds = %4
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackFloatFrom16, i64 0, i64 %21
  %23 = load double, double* %22, align 8
  br label %24

24:                                               ; preds = %4, %20
  %25 = phi double [ %23, %20 ], [ 6.553500e+04, %4 ]
  %26 = and i32 %6, 7
  %27 = icmp eq i32 %8, 0
  br i1 %27, label %76, label %28

28:                                               ; preds = %24
  %29 = icmp eq i32 %10, %12
  %30 = select i1 %29, i32 0, i32 %14
  %31 = icmp eq i32 %26, 0
  %32 = select i1 %31, i32 8, i32 %26
  %33 = udiv i32 %3, %32
  %34 = icmp eq i32 %10, 0
  %35 = icmp eq i32 %15, 0
  %36 = bitcast i8* %2 to double*
  %37 = select i1 %35, i32 1, i32 %33
  %38 = shl i32 %6, 18
  %39 = ashr i32 %38, 31
  %40 = trunc i32 %39 to i16
  %41 = zext i32 %8 to i64
  br label %42

42:                                               ; preds = %68, %28
  %43 = phi i64 [ 0, %28 ], [ %73, %68 ]
  %44 = phi i32 [ 0, %28 ], [ %74, %68 ]
  %45 = xor i32 %44, -1
  %46 = add nsw i32 %8, %45
  %47 = trunc i64 %43 to i32
  %48 = select i1 %34, i32 %47, i32 %46
  %49 = trunc i64 %43 to i32
  %50 = add i32 %30, %49
  %51 = mul i32 %50, %37
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %36, i64 %52
  %54 = load double, double* %53, align 8
  %55 = fptrunc double %54 to float
  %56 = fpext float %55 to double
  %57 = fmul double %25, %56
  %58 = fadd double %57, 5.000000e-01
  %59 = fcmp ugt double %58, 0.000000e+00
  br i1 %59, label %60, label %68

60:                                               ; preds = %42
  %61 = fcmp ult double %58, 6.553500e+04
  br i1 %61, label %62, label %68

62:                                               ; preds = %60
  %63 = fadd double %58, -3.276700e+04
  %64 = tail call double @llvm.floor.f64(double %63) #7
  %65 = fptosi double %64 to i32
  %66 = trunc i32 %65 to i16
  %67 = add i16 %66, 32767
  br label %68

68:                                               ; preds = %42, %60, %62
  %69 = phi i16 [ %67, %62 ], [ 0, %42 ], [ -1, %60 ]
  %70 = xor i16 %69, %40
  %71 = zext i32 %48 to i64
  %72 = getelementptr inbounds i16, i16* %1, i64 %71
  store i16 %70, i16* %72, align 2
  %73 = add nuw nsw i64 %43, 1
  %74 = add nuw nsw i32 %44, 1
  %75 = icmp eq i64 %73, %41
  br i1 %75, label %76, label %42

76:                                               ; preds = %68, %24
  %77 = icmp eq i32 %14, 0
  %78 = icmp ne i32 %12, 0
  %79 = and i1 %77, %78
  br i1 %79, label %80, label %89

80:                                               ; preds = %76
  %81 = load i16, i16* %1, align 2
  %82 = bitcast i16* %1 to i8*
  %83 = getelementptr inbounds i16, i16* %1, i64 1
  %84 = bitcast i16* %83 to i8*
  %85 = add nsw i32 %8, -1
  %86 = zext i32 %85 to i64
  %87 = shl nuw nsw i64 %86, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %82, i8* align 2 %84, i64 %87, i1 false)
  %88 = getelementptr inbounds i16, i16* %1, i64 %86
  store i16 %81, i16* %88, align 2
  br label %89

89:                                               ; preds = %80, %76
  %90 = load i32, i32* %5, align 8
  %91 = and i32 %90, 4096
  %92 = icmp eq i32 %91, 0
  %93 = add nuw nsw i32 %8, %14
  %94 = shl nuw nsw i32 %93, 3
  %95 = select i1 %92, i32 %94, i32 8
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %2, i64 %96
  ret i8* %97
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollFloatTo16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = and i32 %6, 4096
  %16 = lshr i32 %6, 16
  %17 = and i32 %16, 31
  %18 = add nsw i32 %17, -5
  %19 = icmp ult i32 %18, 25
  br i1 %19, label %20, label %24

20:                                               ; preds = %4
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackFloatFrom16, i64 0, i64 %21
  %23 = load double, double* %22, align 8
  br label %24

24:                                               ; preds = %4, %20
  %25 = phi double [ %23, %20 ], [ 6.553500e+04, %4 ]
  %26 = and i32 %6, 7
  %27 = icmp eq i32 %8, 0
  br i1 %27, label %75, label %28

28:                                               ; preds = %24
  %29 = icmp eq i32 %10, %12
  %30 = select i1 %29, i32 0, i32 %14
  %31 = icmp eq i32 %26, 0
  %32 = select i1 %31, i32 8, i32 %26
  %33 = udiv i32 %3, %32
  %34 = icmp eq i32 %10, 0
  %35 = icmp eq i32 %15, 0
  %36 = bitcast i8* %2 to float*
  %37 = select i1 %35, i32 1, i32 %33
  %38 = shl i32 %6, 18
  %39 = ashr i32 %38, 31
  %40 = trunc i32 %39 to i16
  %41 = zext i32 %8 to i64
  br label %42

42:                                               ; preds = %67, %28
  %43 = phi i64 [ 0, %28 ], [ %72, %67 ]
  %44 = phi i32 [ 0, %28 ], [ %73, %67 ]
  %45 = xor i32 %44, -1
  %46 = add nsw i32 %8, %45
  %47 = trunc i64 %43 to i32
  %48 = select i1 %34, i32 %47, i32 %46
  %49 = trunc i64 %43 to i32
  %50 = add i32 %30, %49
  %51 = mul i32 %50, %37
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds float, float* %36, i64 %52
  %54 = load float, float* %53, align 4
  %55 = fpext float %54 to double
  %56 = fmul double %25, %55
  %57 = fadd double %56, 5.000000e-01
  %58 = fcmp ugt double %57, 0.000000e+00
  br i1 %58, label %59, label %67

59:                                               ; preds = %42
  %60 = fcmp ult double %57, 6.553500e+04
  br i1 %60, label %61, label %67

61:                                               ; preds = %59
  %62 = fadd double %57, -3.276700e+04
  %63 = tail call double @llvm.floor.f64(double %62) #7
  %64 = fptosi double %63 to i32
  %65 = trunc i32 %64 to i16
  %66 = add i16 %65, 32767
  br label %67

67:                                               ; preds = %42, %59, %61
  %68 = phi i16 [ %66, %61 ], [ 0, %42 ], [ -1, %59 ]
  %69 = xor i16 %68, %40
  %70 = zext i32 %48 to i64
  %71 = getelementptr inbounds i16, i16* %1, i64 %70
  store i16 %69, i16* %71, align 2
  %72 = add nuw nsw i64 %43, 1
  %73 = add nuw nsw i32 %44, 1
  %74 = icmp eq i64 %72, %41
  br i1 %74, label %75, label %42

75:                                               ; preds = %67, %24
  %76 = icmp eq i32 %14, 0
  %77 = icmp ne i32 %12, 0
  %78 = and i1 %76, %77
  br i1 %78, label %79, label %88

79:                                               ; preds = %75
  %80 = load i16, i16* %1, align 2
  %81 = bitcast i16* %1 to i8*
  %82 = getelementptr inbounds i16, i16* %1, i64 1
  %83 = bitcast i16* %82 to i8*
  %84 = add nsw i32 %8, -1
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %81, i8* align 2 %83, i64 %86, i1 false)
  %87 = getelementptr inbounds i16, i16* %1, i64 %85
  store i16 %80, i16* %87, align 2
  br label %88

88:                                               ; preds = %79, %75
  %89 = load i32, i32* %5, align 8
  %90 = and i32 %89, 4096
  %91 = icmp eq i32 %90, 0
  %92 = add nuw nsw i32 %8, %14
  %93 = shl nuw nsw i32 %92, 2
  %94 = select i1 %91, i32 %93, i32 4
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %2, i64 %95
  ret i8* %96
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollHalfTo16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 14
  %13 = and i32 %12, 1
  %14 = lshr i32 %6, 7
  %15 = and i32 %14, 7
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x float], [25 x float]* @switch.table.PackHalfFrom16, i64 0, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi float [ %24, %21 ], [ 6.553500e+04, %4 ]
  %27 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 7
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 8, i32 %29
  %32 = udiv i32 %3, %31
  %33 = icmp eq i32 %8, 0
  br i1 %33, label %79, label %34

34:                                               ; preds = %25
  %35 = icmp eq i32 %10, %13
  %36 = select i1 %35, i32 0, i32 %15
  %37 = icmp eq i32 %10, 0
  %38 = icmp eq i32 %16, 0
  %39 = bitcast i8* %2 to i16*
  %40 = icmp eq i32 %11, 0
  %41 = zext i32 %36 to i64
  %42 = zext i32 %8 to i64
  br label %43

43:                                               ; preds = %72, %34
  %44 = phi i64 [ 0, %34 ], [ %76, %72 ]
  %45 = phi i32 [ 0, %34 ], [ %77, %72 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %8, %46
  %48 = trunc i64 %44 to i32
  %49 = select i1 %37, i32 %48, i32 %47
  %50 = add nuw nsw i64 %44, %41
  %51 = trunc i64 %50 to i32
  %52 = mul i32 %32, %51
  %53 = zext i32 %52 to i64
  %54 = select i1 %38, i64 %50, i64 %53
  %55 = getelementptr inbounds i16, i16* %39, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = tail call float @_cmsHalf2Float(i16 zeroext %56) #7
  %58 = fsub float %26, %57
  %59 = select i1 %40, float %57, float %58
  %60 = fmul float %26, %59
  %61 = fpext float %60 to double
  %62 = fadd double %61, 5.000000e-01
  %63 = fcmp ugt double %62, 0.000000e+00
  br i1 %63, label %64, label %72

64:                                               ; preds = %43
  %65 = fcmp ult double %62, 6.553500e+04
  br i1 %65, label %66, label %72

66:                                               ; preds = %64
  %67 = fadd double %62, -3.276700e+04
  %68 = tail call double @llvm.floor.f64(double %67) #7
  %69 = fptosi double %68 to i32
  %70 = trunc i32 %69 to i16
  %71 = add i16 %70, 32767
  br label %72

72:                                               ; preds = %43, %64, %66
  %73 = phi i16 [ %71, %66 ], [ 0, %43 ], [ -1, %64 ]
  %74 = zext i32 %49 to i64
  %75 = getelementptr inbounds i16, i16* %1, i64 %74
  store i16 %73, i16* %75, align 2
  %76 = add nuw nsw i64 %44, 1
  %77 = add nuw nsw i32 %45, 1
  %78 = icmp eq i64 %76, %42
  br i1 %78, label %79, label %43

79:                                               ; preds = %72, %25
  %80 = icmp eq i32 %15, 0
  %81 = icmp ne i32 %13, 0
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %92

83:                                               ; preds = %79
  %84 = load i16, i16* %1, align 2
  %85 = bitcast i16* %1 to i8*
  %86 = getelementptr inbounds i16, i16* %1, i64 1
  %87 = bitcast i16* %86 to i8*
  %88 = add nsw i32 %8, -1
  %89 = zext i32 %88 to i64
  %90 = shl nuw nsw i64 %89, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %85, i8* align 2 %87, i64 %90, i1 false)
  %91 = getelementptr inbounds i16, i16* %1, i64 %89
  store i16 %84, i16* %91, align 2
  br label %92

92:                                               ; preds = %83, %79
  %93 = load i32, i32* %5, align 8
  %94 = and i32 %93, 4096
  %95 = icmp eq i32 %94, 0
  %96 = add nuw nsw i32 %8, %15
  %97 = shl nuw nsw i32 %96, 1
  %98 = select i1 %95, i32 %97, i32 2
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %2, i64 %99
  ret i8* %100
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1Byte(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %8, i16* %10, align 2
  store i16 %8, i16* %1, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1ByteSkip1(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %8, i16* %10, align 2
  store i16 %8, i16* %1, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1ByteSkip2(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %8, i16* %10, align 2
  store i16 %8, i16* %1, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1ByteReversed(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = xor i16 %8, -1
  %10 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %9, i16* %11, align 2
  store i16 %9, i16* %1, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  ret i8* %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll2Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  store i16 %8, i16* %1, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = or i16 %12, %11
  %14 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollLabV2_8(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = zext i16 %8 to i32
  %10 = shl nuw nsw i32 %9, 8
  %11 = or i32 %10, %9
  %12 = lshr i32 %11, 8
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %1, align 2
  %14 = getelementptr inbounds i8, i8* %2, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = shl nuw i16 %16, 8
  %18 = or i16 %17, %16
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, 8
  %21 = or i32 %20, %19
  %22 = lshr i32 %21, 8
  %23 = trunc i32 %22 to i16
  %24 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %23, i16* %24, align 2
  %25 = getelementptr inbounds i8, i8* %2, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = shl nuw i16 %27, 8
  %29 = or i16 %28, %27
  %30 = zext i16 %29 to i32
  %31 = shl nuw nsw i32 %30, 8
  %32 = or i32 %31, %30
  %33 = lshr i32 %32, 8
  %34 = trunc i32 %33 to i16
  %35 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %34, i16* %35, align 2
  %36 = getelementptr inbounds i8, i8* %2, i64 3
  ret i8* %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollALabV2_8(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = shl nuw i16 %7, 8
  %9 = or i16 %8, %7
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 8
  %12 = or i32 %11, %10
  %13 = lshr i32 %12, 8
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %1, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = or i16 %18, %17
  %20 = zext i16 %19 to i32
  %21 = shl nuw nsw i32 %20, 8
  %22 = or i32 %21, %20
  %23 = lshr i32 %22, 8
  %24 = trunc i32 %23 to i16
  %25 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %24, i16* %25, align 2
  %26 = getelementptr inbounds i8, i8* %2, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  %29 = shl nuw i16 %28, 8
  %30 = or i16 %29, %28
  %31 = zext i16 %30 to i32
  %32 = shl nuw nsw i32 %31, 8
  %33 = or i32 %32, %31
  %34 = lshr i32 %33, 8
  %35 = trunc i32 %34 to i16
  %36 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %35, i16* %36, align 2
  %37 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollLabV2_16(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = shl nuw nsw i32 %7, 8
  %9 = or i32 %8, %7
  %10 = lshr i32 %9, 8
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %1, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %16, %15
  %18 = lshr i32 %17, 8
  %19 = trunc i32 %18 to i16
  %20 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 4
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = shl nuw nsw i32 %24, 8
  %26 = or i32 %25, %24
  %27 = lshr i32 %26, 8
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  store i16 %8, i16* %1, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = or i16 %12, %11
  %14 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = or i16 %18, %17
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  ret i8* %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3BytesSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = or i16 %19, %18
  store i16 %20, i16* %1, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  ret i8* %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3BytesSkip1Swap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = shl nuw i16 %7, 8
  %9 = or i16 %8, %7
  %10 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %13
  %16 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %15, i16* %16, align 2
  %17 = getelementptr inbounds i8, i8* %2, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw i16 %19, 8
  %21 = or i16 %20, %19
  store i16 %21, i16* %1, align 2
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3BytesSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = shl nuw i16 %7, 8
  %9 = or i16 %8, %7
  store i16 %9, i16* %1, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = or i16 %19, %18
  %21 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %20, i16* %21, align 2
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3BytesSkip1SwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = or i16 %19, %18
  store i16 %20, i16* %1, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  store i16 %8, i16* %1, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = or i16 %12, %11
  %14 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = or i16 %18, %17
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = shl nuw i16 %23, 8
  %25 = or i16 %24, %23
  %26 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4BytesReverse(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = xor i8 %5, -1
  %7 = zext i8 %6 to i16
  %8 = shl nuw i16 %7, 8
  %9 = or i16 %8, %7
  store i16 %9, i16* %1, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = xor i8 %11, -1
  %13 = zext i8 %12 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %13
  %16 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %15, i16* %16, align 2
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = xor i8 %18, -1
  %20 = zext i8 %19 to i16
  %21 = shl nuw i16 %20, 8
  %22 = or i16 %21, %20
  %23 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %22, i16* %23, align 2
  %24 = getelementptr inbounds i8, i8* %2, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = xor i8 %25, -1
  %27 = zext i8 %26 to i16
  %28 = shl nuw i16 %27, 8
  %29 = or i16 %28, %27
  %30 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %29, i16* %30, align 2
  %31 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %31
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4BytesSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  store i16 %14, i16* %1, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = or i16 %18, %17
  %20 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = shl nuw i16 %23, 8
  %25 = or i16 %24, %23
  %26 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4BytesSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  %15 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = or i16 %19, %18
  %21 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %20, i16* %21, align 2
  %22 = getelementptr inbounds i8, i8* %2, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  %25 = shl nuw i16 %24, 8
  %26 = or i16 %25, %24
  store i16 %26, i16* %1, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4BytesSwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = shl nuw i16 %6, 8
  %8 = or i16 %7, %6
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %12
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = or i16 %19, %18
  store i16 %20, i16* %1, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = shl nuw i16 %23, 8
  %25 = or i16 %24, %23
  %26 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollPlanarBytes(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = and i32 %6, 8192
  %14 = icmp eq i32 %10, %12
  br i1 %14, label %21, label %15

15:                                               ; preds = %4
  %16 = lshr i32 %6, 7
  %17 = and i32 %16, 7
  %18 = mul i32 %17, %3
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %2, i64 %19
  br label %21

21:                                               ; preds = %4, %15
  %22 = phi i8* [ %20, %15 ], [ %2, %4 ]
  %23 = icmp eq i32 %8, 0
  br i1 %23, label %83, label %24

24:                                               ; preds = %21
  %25 = icmp eq i32 %10, 0
  %26 = icmp eq i32 %13, 0
  %27 = zext i32 %3 to i64
  %28 = and i32 %7, 1
  %29 = icmp eq i32 %8, 1
  br i1 %29, label %66, label %30

30:                                               ; preds = %24
  %31 = sub nsw i32 %8, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i8* [ %22, %30 ], [ %62, %32 ]
  %34 = phi i32 [ 0, %30 ], [ %63, %32 ]
  %35 = phi i32 [ %31, %30 ], [ %64, %32 ]
  %36 = xor i32 %34, -1
  %37 = add nsw i32 %8, %36
  %38 = select i1 %25, i32 %34, i32 %37
  %39 = load i8, i8* %33, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %41, %40
  %43 = xor i32 %42, 65535
  %44 = select i1 %26, i32 %42, i32 %43
  %45 = trunc i32 %44 to i16
  %46 = zext i32 %38 to i64
  %47 = getelementptr inbounds i16, i16* %1, i64 %46
  store i16 %45, i16* %47, align 2
  %48 = getelementptr inbounds i8, i8* %33, i64 %27
  %49 = or i32 %34, 1
  %50 = sub nuw nsw i32 -2, %34
  %51 = add nsw i32 %8, %50
  %52 = select i1 %25, i32 %49, i32 %51
  %53 = load i8, i8* %48, align 1
  %54 = zext i8 %53 to i32
  %55 = shl nuw nsw i32 %54, 8
  %56 = or i32 %55, %54
  %57 = xor i32 %56, 65535
  %58 = select i1 %26, i32 %56, i32 %57
  %59 = trunc i32 %58 to i16
  %60 = zext i32 %52 to i64
  %61 = getelementptr inbounds i16, i16* %1, i64 %60
  store i16 %59, i16* %61, align 2
  %62 = getelementptr inbounds i8, i8* %48, i64 %27
  %63 = add nuw nsw i32 %34, 2
  %64 = add i32 %35, -2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %32

66:                                               ; preds = %32, %24
  %67 = phi i8* [ %22, %24 ], [ %62, %32 ]
  %68 = phi i32 [ 0, %24 ], [ %63, %32 ]
  %69 = icmp eq i32 %28, 0
  br i1 %69, label %83, label %70

70:                                               ; preds = %66
  %71 = xor i32 %68, -1
  %72 = add nsw i32 %8, %71
  %73 = select i1 %25, i32 %68, i32 %72
  %74 = load i8, i8* %67, align 1
  %75 = zext i8 %74 to i32
  %76 = shl nuw nsw i32 %75, 8
  %77 = or i32 %76, %75
  %78 = xor i32 %77, 65535
  %79 = select i1 %26, i32 %77, i32 %78
  %80 = trunc i32 %79 to i16
  %81 = zext i32 %73 to i64
  %82 = getelementptr inbounds i16, i16* %1, i64 %81
  store i16 %80, i16* %82, align 2
  br label %83

83:                                               ; preds = %70, %66, %21
  %84 = getelementptr inbounds i8, i8* %2, i64 1
  ret i8* %84
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollChunkyBytes(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = icmp ne i32 %10, %12
  %16 = zext i32 %14 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  %18 = select i1 %15, i8* %17, i8* %2
  %19 = icmp eq i32 %8, 0
  br i1 %19, label %81, label %20

20:                                               ; preds = %4
  %21 = and i32 %6, 8192
  %22 = icmp eq i32 %10, 0
  %23 = icmp eq i32 %21, 0
  %24 = and i32 %7, 1
  %25 = icmp eq i32 %8, 1
  br i1 %25, label %62, label %26

26:                                               ; preds = %20
  %27 = sub nsw i32 %8, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i8* [ %18, %26 ], [ %58, %28 ]
  %30 = phi i32 [ 0, %26 ], [ %59, %28 ]
  %31 = phi i32 [ %27, %26 ], [ %60, %28 ]
  %32 = xor i32 %30, -1
  %33 = add nsw i32 %8, %32
  %34 = select i1 %22, i32 %30, i32 %33
  %35 = load i8, i8* %29, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 8
  %38 = or i32 %37, %36
  %39 = xor i32 %38, 65535
  %40 = select i1 %23, i32 %38, i32 %39
  %41 = trunc i32 %40 to i16
  %42 = zext i32 %34 to i64
  %43 = getelementptr inbounds i16, i16* %1, i64 %42
  store i16 %41, i16* %43, align 2
  %44 = getelementptr inbounds i8, i8* %29, i64 1
  %45 = or i32 %30, 1
  %46 = sub nuw nsw i32 -2, %30
  %47 = add nsw i32 %8, %46
  %48 = select i1 %22, i32 %45, i32 %47
  %49 = load i8, i8* %44, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = or i32 %51, %50
  %53 = xor i32 %52, 65535
  %54 = select i1 %23, i32 %52, i32 %53
  %55 = trunc i32 %54 to i16
  %56 = zext i32 %48 to i64
  %57 = getelementptr inbounds i16, i16* %1, i64 %56
  store i16 %55, i16* %57, align 2
  %58 = getelementptr inbounds i8, i8* %29, i64 2
  %59 = add nuw nsw i32 %30, 2
  %60 = add i32 %31, -2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %28

62:                                               ; preds = %28, %20
  %63 = phi i8* [ undef, %20 ], [ %58, %28 ]
  %64 = phi i8* [ %18, %20 ], [ %58, %28 ]
  %65 = phi i32 [ 0, %20 ], [ %59, %28 ]
  %66 = icmp eq i32 %24, 0
  br i1 %66, label %81, label %67

67:                                               ; preds = %62
  %68 = xor i32 %65, -1
  %69 = add nsw i32 %8, %68
  %70 = select i1 %22, i32 %65, i32 %69
  %71 = load i8, i8* %64, align 1
  %72 = zext i8 %71 to i32
  %73 = shl nuw nsw i32 %72, 8
  %74 = or i32 %73, %72
  %75 = xor i32 %74, 65535
  %76 = select i1 %23, i32 %74, i32 %75
  %77 = trunc i32 %76 to i16
  %78 = zext i32 %70 to i64
  %79 = getelementptr inbounds i16, i16* %1, i64 %78
  store i16 %77, i16* %79, align 2
  %80 = getelementptr inbounds i8, i8* %64, i64 1
  br label %81

81:                                               ; preds = %67, %62, %4
  %82 = phi i8* [ %18, %4 ], [ %63, %62 ], [ %80, %67 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 %16
  %84 = select i1 %15, i8* %82, i8* %83
  %85 = icmp eq i32 %14, 0
  %86 = icmp ne i32 %12, 0
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %97

88:                                               ; preds = %81
  %89 = load i16, i16* %1, align 2
  %90 = bitcast i16* %1 to i8*
  %91 = getelementptr inbounds i16, i16* %1, i64 1
  %92 = bitcast i16* %91 to i8*
  %93 = add nsw i32 %8, -1
  %94 = zext i32 %93 to i64
  %95 = shl nuw nsw i64 %94, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %90, i8* align 2 %92, i64 %95, i1 false)
  %96 = getelementptr inbounds i16, i16* %1, i64 %94
  store i16 %89, i16* %96, align 2
  br label %97

97:                                               ; preds = %88, %81
  ret i8* %84
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1Word(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %6, i16* %8, align 2
  store i16 %6, i16* %1, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1WordReversed(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = xor i16 %6, -1
  %8 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %7, i16* %9, align 2
  store i16 %7, i16* %1, align 2
  %10 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll1WordSkip3(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %6, i16* %8, align 2
  store i16 %6, i16* %1, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll2Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %1, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %1, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = bitcast i8* %11 to i16*
  %13 = load i16, i16* %12, align 2
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %1, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = bitcast i8* %11 to i16*
  %13 = load i16, i16* %12, align 2
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3WordsSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  store i16 %14, i16* %1, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3WordsSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 2
  %6 = bitcast i8* %5 to i16*
  %7 = load i16, i16* %6, align 2
  store i16 %7, i16* %1, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 6
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll3WordsSkip1Swap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 2
  %6 = bitcast i8* %5 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  store i16 %15, i16* %1, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4WordsReverse(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = xor i16 %6, -1
  store i16 %7, i16* %1, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = xor i16 %10, -1
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = xor i16 %15, -1
  %17 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %16, i16* %17, align 2
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %19, align 2
  %21 = xor i16 %20, -1
  %22 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4WordsSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  store i16 %10, i16* %1, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = bitcast i8* %11 to i16*
  %13 = load i16, i16* %12, align 2
  %14 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4WordsSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  store i16 %18, i16* %1, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Unroll4WordsSwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = bitcast i8* %8 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = bitcast i8* %12 to i16*
  %14 = load i16, i16* %13, align 2
  store i16 %14, i16* %1, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @UnrollPlanarWords(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #4 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = and i32 %6, 1024
  %10 = and i32 %6, 2048
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %4
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = mul i32 %14, %3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  br label %18

18:                                               ; preds = %12, %4
  %19 = phi i8* [ %17, %12 ], [ %2, %4 ]
  %20 = icmp eq i32 %8, 0
  br i1 %20, label %76, label %21

21:                                               ; preds = %18
  %22 = icmp eq i32 %10, 0
  %23 = shl i32 %6, 18
  %24 = ashr i32 %23, 31
  %25 = trunc i32 %24 to i16
  %26 = zext i32 %3 to i64
  %27 = and i32 %7, 1
  %28 = icmp eq i32 %8, 1
  br i1 %28, label %61, label %29

29:                                               ; preds = %21
  %30 = sub nsw i32 %8, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i32 [ 0, %29 ], [ %58, %31 ]
  %33 = phi i8* [ %19, %29 ], [ %57, %31 ]
  %34 = phi i32 [ %30, %29 ], [ %59, %31 ]
  %35 = xor i32 %32, -1
  %36 = add nsw i32 %8, %35
  %37 = select i1 %11, i32 %36, i32 %32
  %38 = bitcast i8* %33 to i16*
  %39 = load i16, i16* %38, align 2
  %40 = tail call i16 @llvm.bswap.i16(i16 %39)
  %41 = select i1 %22, i16 %39, i16 %40
  %42 = xor i16 %41, %25
  %43 = zext i32 %37 to i64
  %44 = getelementptr inbounds i16, i16* %1, i64 %43
  store i16 %42, i16* %44, align 2
  %45 = getelementptr inbounds i8, i8* %33, i64 %26
  %46 = or i32 %32, 1
  %47 = sub nuw nsw i32 -2, %32
  %48 = add nsw i32 %8, %47
  %49 = select i1 %11, i32 %48, i32 %46
  %50 = bitcast i8* %45 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = tail call i16 @llvm.bswap.i16(i16 %51)
  %53 = select i1 %22, i16 %51, i16 %52
  %54 = xor i16 %53, %25
  %55 = zext i32 %49 to i64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  store i16 %54, i16* %56, align 2
  %57 = getelementptr inbounds i8, i8* %45, i64 %26
  %58 = add nuw nsw i32 %32, 2
  %59 = add i32 %34, -2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %31

61:                                               ; preds = %31, %21
  %62 = phi i32 [ 0, %21 ], [ %58, %31 ]
  %63 = phi i8* [ %19, %21 ], [ %57, %31 ]
  %64 = icmp eq i32 %27, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %61
  %66 = xor i32 %62, -1
  %67 = add nsw i32 %8, %66
  %68 = select i1 %11, i32 %67, i32 %62
  %69 = bitcast i8* %63 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = tail call i16 @llvm.bswap.i16(i16 %70)
  %72 = select i1 %22, i16 %70, i16 %71
  %73 = xor i16 %72, %25
  %74 = zext i32 %68 to i64
  %75 = getelementptr inbounds i16, i16* %1, i64 %74
  store i16 %73, i16* %75, align 2
  br label %76

76:                                               ; preds = %65, %61, %18
  %77 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %77
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollAnyWords(%struct._cmstransform_struct* nocapture readonly, i16* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = icmp ne i32 %10, %12
  %16 = shl nuw nsw i32 %14, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = select i1 %15, i8* %18, i8* %2
  %20 = icmp eq i32 %8, 0
  br i1 %20, label %79, label %21

21:                                               ; preds = %4
  %22 = and i32 %6, 2048
  %23 = icmp eq i32 %10, 0
  %24 = icmp eq i32 %22, 0
  %25 = shl i32 %6, 18
  %26 = ashr i32 %25, 31
  %27 = trunc i32 %26 to i16
  %28 = and i32 %7, 1
  %29 = icmp eq i32 %8, 1
  br i1 %29, label %62, label %30

30:                                               ; preds = %21
  %31 = sub nsw i32 %8, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i8* [ %19, %30 ], [ %58, %32 ]
  %34 = phi i32 [ 0, %30 ], [ %59, %32 ]
  %35 = phi i32 [ %31, %30 ], [ %60, %32 ]
  %36 = xor i32 %34, -1
  %37 = add nsw i32 %8, %36
  %38 = select i1 %23, i32 %34, i32 %37
  %39 = bitcast i8* %33 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = tail call i16 @llvm.bswap.i16(i16 %40)
  %42 = select i1 %24, i16 %40, i16 %41
  %43 = xor i16 %42, %27
  %44 = zext i32 %38 to i64
  %45 = getelementptr inbounds i16, i16* %1, i64 %44
  store i16 %43, i16* %45, align 2
  %46 = getelementptr inbounds i8, i8* %33, i64 2
  %47 = or i32 %34, 1
  %48 = sub nuw nsw i32 -2, %34
  %49 = add nsw i32 %8, %48
  %50 = select i1 %23, i32 %47, i32 %49
  %51 = bitcast i8* %46 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = tail call i16 @llvm.bswap.i16(i16 %52)
  %54 = select i1 %24, i16 %52, i16 %53
  %55 = xor i16 %54, %27
  %56 = zext i32 %50 to i64
  %57 = getelementptr inbounds i16, i16* %1, i64 %56
  store i16 %55, i16* %57, align 2
  %58 = getelementptr inbounds i8, i8* %33, i64 4
  %59 = add nuw nsw i32 %34, 2
  %60 = add i32 %35, -2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %32

62:                                               ; preds = %32, %21
  %63 = phi i8* [ undef, %21 ], [ %58, %32 ]
  %64 = phi i8* [ %19, %21 ], [ %58, %32 ]
  %65 = phi i32 [ 0, %21 ], [ %59, %32 ]
  %66 = icmp eq i32 %28, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %62
  %68 = xor i32 %65, -1
  %69 = add nsw i32 %8, %68
  %70 = select i1 %23, i32 %65, i32 %69
  %71 = bitcast i8* %64 to i16*
  %72 = load i16, i16* %71, align 2
  %73 = tail call i16 @llvm.bswap.i16(i16 %72)
  %74 = select i1 %24, i16 %72, i16 %73
  %75 = xor i16 %74, %27
  %76 = zext i32 %70 to i64
  %77 = getelementptr inbounds i16, i16* %1, i64 %76
  store i16 %75, i16* %77, align 2
  %78 = getelementptr inbounds i8, i8* %64, i64 2
  br label %79

79:                                               ; preds = %67, %62, %4
  %80 = phi i8* [ %19, %4 ], [ %63, %62 ], [ %78, %67 ]
  %81 = getelementptr inbounds i8, i8* %80, i64 %17
  %82 = select i1 %15, i8* %80, i8* %81
  %83 = icmp eq i32 %14, 0
  %84 = icmp ne i32 %12, 0
  %85 = and i1 %83, %84
  br i1 %85, label %86, label %95

86:                                               ; preds = %79
  %87 = load i16, i16* %1, align 2
  %88 = bitcast i16* %1 to i8*
  %89 = getelementptr inbounds i16, i16* %1, i64 1
  %90 = bitcast i16* %89 to i8*
  %91 = add nsw i32 %8, -1
  %92 = zext i32 %91 to i64
  %93 = shl nuw nsw i64 %92, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %88, i8* align 2 %90, i64 %93, i1 false)
  %94 = getelementptr inbounds i16, i16* %1, i64 %92
  store i16 %87, i16* %94, align 2
  br label %95

95:                                               ; preds = %86, %79
  ret i8* %82
}

declare void @cmsFloat2LabEncoded(i16*, %struct.cmsCIELab*) local_unnamed_addr #1

declare void @cmsFloat2XYZEncoded(i16*, %struct.cmsCIEXYZ*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare float @_cmsHalf2Float(i16 zeroext) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollLabDoubleToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to double*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %33, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load double, double* %5, align 8
  %16 = fdiv double %15, 1.000000e+02
  %17 = fptrunc double %16 to float
  store float %17, float* %1, align 4
  %18 = zext i32 %14 to i64
  %19 = getelementptr inbounds double, double* %5, i64 %18
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, 1.280000e+02
  %22 = fdiv double %21, 2.550000e+02
  %23 = fptrunc double %22 to float
  %24 = getelementptr inbounds float, float* %1, i64 1
  store float %23, float* %24, align 4
  %25 = shl i32 %14, 1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %5, i64 %26
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, 1.280000e+02
  %30 = fdiv double %29, 2.550000e+02
  %31 = fptrunc double %30 to float
  %32 = getelementptr inbounds float, float* %1, i64 2
  store float %31, float* %32, align 4
  br label %56

33:                                               ; preds = %4
  %34 = load double, double* %5, align 8
  %35 = fdiv double %34, 1.000000e+02
  %36 = fptrunc double %35 to float
  store float %36, float* %1, align 4
  %37 = getelementptr inbounds i8, i8* %2, i64 8
  %38 = bitcast i8* %37 to double*
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, 1.280000e+02
  %41 = fdiv double %40, 2.550000e+02
  %42 = fptrunc double %41 to float
  %43 = getelementptr inbounds float, float* %1, i64 1
  store float %42, float* %43, align 4
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to double*
  %46 = load double, double* %45, align 8
  %47 = fadd double %46, 1.280000e+02
  %48 = fdiv double %47, 2.550000e+02
  %49 = fptrunc double %48 to float
  %50 = getelementptr inbounds float, float* %1, i64 2
  store float %49, float* %50, align 4
  %51 = load i32, i32* %6, align 8
  %52 = lshr i32 %51, 4
  %53 = and i32 %52, 56
  %54 = add nuw nsw i32 %53, 24
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %33, %10
  %57 = phi i64 [ %55, %33 ], [ 8, %10 ]
  %58 = getelementptr inbounds i8, i8* %2, i64 %57
  ret i8* %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollLabFloatToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to float*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %30, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %5, align 4
  %16 = fdiv float %15, 1.000000e+02
  store float %16, float* %1, align 4
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds float, float* %5, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fadd float %19, 1.280000e+02
  %21 = fdiv float %20, 2.550000e+02
  %22 = getelementptr inbounds float, float* %1, i64 1
  store float %21, float* %22, align 4
  %23 = shl i32 %14, 1
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds float, float* %5, i64 %24
  %26 = load float, float* %25, align 4
  %27 = fadd float %26, 1.280000e+02
  %28 = fdiv float %27, 2.550000e+02
  %29 = getelementptr inbounds float, float* %1, i64 2
  store float %28, float* %29, align 4
  br label %50

30:                                               ; preds = %4
  %31 = load float, float* %5, align 4
  %32 = fdiv float %31, 1.000000e+02
  store float %32, float* %1, align 4
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to float*
  %35 = load float, float* %34, align 4
  %36 = fadd float %35, 1.280000e+02
  %37 = fdiv float %36, 2.550000e+02
  %38 = getelementptr inbounds float, float* %1, i64 1
  store float %37, float* %38, align 4
  %39 = getelementptr inbounds i8, i8* %2, i64 8
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = fadd float %41, 1.280000e+02
  %43 = fdiv float %42, 2.550000e+02
  %44 = getelementptr inbounds float, float* %1, i64 2
  store float %43, float* %44, align 4
  %45 = load i32, i32* %6, align 8
  %46 = lshr i32 %45, 5
  %47 = and i32 %46, 28
  %48 = add nuw nsw i32 %47, 12
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %30, %10
  %51 = phi i64 [ %49, %30 ], [ 4, %10 ]
  %52 = getelementptr inbounds i8, i8* %2, i64 %51
  ret i8* %52
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollXYZDoubleToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to double*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load double, double* %5, align 8
  %16 = fdiv double %15, 0x3FFFFFE000000000
  %17 = fptrunc double %16 to float
  store float %17, float* %1, align 4
  %18 = zext i32 %14 to i64
  %19 = getelementptr inbounds double, double* %5, i64 %18
  %20 = load double, double* %19, align 8
  %21 = fdiv double %20, 0x3FFFFFE000000000
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds float, float* %1, i64 1
  store float %22, float* %23, align 4
  %24 = shl i32 %14, 1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %5, i64 %25
  %27 = load double, double* %26, align 8
  %28 = fdiv double %27, 0x3FFFFFE000000000
  %29 = fptrunc double %28 to float
  %30 = getelementptr inbounds float, float* %1, i64 2
  store float %29, float* %30, align 4
  br label %52

31:                                               ; preds = %4
  %32 = load double, double* %5, align 8
  %33 = fdiv double %32, 0x3FFFFFE000000000
  %34 = fptrunc double %33 to float
  store float %34, float* %1, align 4
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to double*
  %37 = load double, double* %36, align 8
  %38 = fdiv double %37, 0x3FFFFFE000000000
  %39 = fptrunc double %38 to float
  %40 = getelementptr inbounds float, float* %1, i64 1
  store float %39, float* %40, align 4
  %41 = getelementptr inbounds i8, i8* %2, i64 16
  %42 = bitcast i8* %41 to double*
  %43 = load double, double* %42, align 8
  %44 = fdiv double %43, 0x3FFFFFE000000000
  %45 = fptrunc double %44 to float
  %46 = getelementptr inbounds float, float* %1, i64 2
  store float %45, float* %46, align 4
  %47 = load i32, i32* %6, align 8
  %48 = lshr i32 %47, 4
  %49 = and i32 %48, 56
  %50 = add nuw nsw i32 %49, 24
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %31, %10
  %53 = phi i64 [ %51, %31 ], [ 8, %10 ]
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  ret i8* %54
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @UnrollXYZFloatToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #5 {
  %5 = bitcast i8* %2 to float*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %28, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %5, align 4
  %16 = fdiv float %15, 0x3FFFFFE000000000
  store float %16, float* %1, align 4
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds float, float* %5, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fdiv float %19, 0x3FFFFFE000000000
  %21 = getelementptr inbounds float, float* %1, i64 1
  store float %20, float* %21, align 4
  %22 = shl i32 %14, 1
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds float, float* %5, i64 %23
  %25 = load float, float* %24, align 4
  %26 = fdiv float %25, 0x3FFFFFE000000000
  %27 = getelementptr inbounds float, float* %1, i64 2
  store float %26, float* %27, align 4
  br label %46

28:                                               ; preds = %4
  %29 = load float, float* %5, align 4
  %30 = fdiv float %29, 0x3FFFFFE000000000
  store float %30, float* %1, align 4
  %31 = getelementptr inbounds i8, i8* %2, i64 4
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = fdiv float %33, 0x3FFFFFE000000000
  %35 = getelementptr inbounds float, float* %1, i64 1
  store float %34, float* %35, align 4
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4
  %39 = fdiv float %38, 0x3FFFFFE000000000
  %40 = getelementptr inbounds float, float* %1, i64 2
  store float %39, float* %40, align 4
  %41 = load i32, i32* %6, align 8
  %42 = lshr i32 %41, 5
  %43 = and i32 %42, 28
  %44 = add nuw nsw i32 %43, 12
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %28, %10
  %47 = phi i64 [ %45, %28 ], [ 4, %10 ]
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  ret i8* %48
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollFloatsToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 14
  %13 = and i32 %12, 1
  %14 = lshr i32 %6, 7
  %15 = and i32 %14, 7
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x float], [25 x float]* @switch.table.PackHalfFromFloat, i64 0, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi float [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = and i32 %6, 7
  %28 = icmp eq i32 %8, 0
  br i1 %28, label %62, label %29

29:                                               ; preds = %25
  %30 = icmp eq i32 %10, %13
  %31 = select i1 %30, i32 0, i32 %15
  %32 = icmp eq i32 %27, 0
  %33 = select i1 %32, i32 8, i32 %27
  %34 = udiv i32 %3, %33
  %35 = icmp eq i32 %10, 0
  %36 = icmp eq i32 %16, 0
  %37 = bitcast i8* %2 to float*
  %38 = select i1 %36, i32 1, i32 %34
  %39 = icmp eq i32 %11, 0
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %29
  %42 = phi i64 [ 0, %29 ], [ %59, %41 ]
  %43 = phi i32 [ 0, %29 ], [ %60, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %35, i32 %46, i32 %45
  %48 = trunc i64 %42 to i32
  %49 = add i32 %31, %48
  %50 = mul i32 %49, %38
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %37, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fdiv float %53, %26
  %55 = fsub float 1.000000e+00, %54
  %56 = select i1 %39, float %54, float %55
  %57 = zext i32 %47 to i64
  %58 = getelementptr inbounds float, float* %1, i64 %57
  store float %56, float* %58, align 4
  %59 = add nuw nsw i64 %42, 1
  %60 = add nuw nsw i32 %43, 1
  %61 = icmp eq i64 %59, %40
  br i1 %61, label %62, label %41

62:                                               ; preds = %41, %25
  %63 = icmp eq i32 %15, 0
  %64 = icmp ne i32 %13, 0
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %77

66:                                               ; preds = %62
  %67 = bitcast float* %1 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = bitcast float* %1 to i8*
  %70 = getelementptr inbounds float, float* %1, i64 1
  %71 = bitcast float* %70 to i8*
  %72 = add nsw i32 %8, -1
  %73 = zext i32 %72 to i64
  %74 = shl nuw nsw i64 %73, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %71, i64 %74, i1 false)
  %75 = getelementptr inbounds float, float* %1, i64 %73
  %76 = bitcast float* %75 to i32*
  store i32 %68, i32* %76, align 4
  br label %77

77:                                               ; preds = %66, %62
  %78 = load i32, i32* %5, align 8
  %79 = and i32 %78, 4096
  %80 = icmp eq i32 %79, 0
  %81 = add nuw nsw i32 %8, %15
  %82 = shl nuw nsw i32 %81, 2
  %83 = select i1 %80, i32 %82, i32 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  ret i8* %85
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollDoublesToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 14
  %13 = and i32 %12, 1
  %14 = lshr i32 %6, 7
  %15 = and i32 %14, 7
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackDoublesFromFloat, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi double [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = and i32 %6, 7
  %28 = icmp eq i32 %8, 0
  br i1 %28, label %63, label %29

29:                                               ; preds = %25
  %30 = icmp eq i32 %10, %13
  %31 = select i1 %30, i32 0, i32 %15
  %32 = icmp eq i32 %27, 0
  %33 = select i1 %32, i32 8, i32 %27
  %34 = udiv i32 %3, %33
  %35 = icmp eq i32 %10, 0
  %36 = icmp eq i32 %16, 0
  %37 = bitcast i8* %2 to double*
  %38 = select i1 %36, i32 1, i32 %34
  %39 = icmp eq i32 %11, 0
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %29
  %42 = phi i64 [ 0, %29 ], [ %60, %41 ]
  %43 = phi i32 [ 0, %29 ], [ %61, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %35, i32 %46, i32 %45
  %48 = trunc i64 %42 to i32
  %49 = add i32 %31, %48
  %50 = mul i32 %49, %38
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %37, i64 %51
  %53 = load double, double* %52, align 8
  %54 = fdiv double %53, %26
  %55 = fsub double 1.000000e+00, %54
  %56 = select i1 %39, double %54, double %55
  %57 = fptrunc double %56 to float
  %58 = zext i32 %47 to i64
  %59 = getelementptr inbounds float, float* %1, i64 %58
  store float %57, float* %59, align 4
  %60 = add nuw nsw i64 %42, 1
  %61 = add nuw nsw i32 %43, 1
  %62 = icmp eq i64 %60, %40
  br i1 %62, label %63, label %41

63:                                               ; preds = %41, %25
  %64 = icmp eq i32 %15, 0
  %65 = icmp ne i32 %13, 0
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %78

67:                                               ; preds = %63
  %68 = bitcast float* %1 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = bitcast float* %1 to i8*
  %71 = getelementptr inbounds float, float* %1, i64 1
  %72 = bitcast float* %71 to i8*
  %73 = add nsw i32 %8, -1
  %74 = zext i32 %73 to i64
  %75 = shl nuw nsw i64 %74, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %72, i64 %75, i1 false)
  %76 = getelementptr inbounds float, float* %1, i64 %74
  %77 = bitcast float* %76 to i32*
  store i32 %69, i32* %77, align 4
  br label %78

78:                                               ; preds = %67, %63
  %79 = load i32, i32* %5, align 8
  %80 = and i32 %79, 4096
  %81 = icmp eq i32 %80, 0
  %82 = add nuw nsw i32 %8, %15
  %83 = shl nuw nsw i32 %82, 3
  %84 = select i1 %81, i32 %83, i32 8
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %2, i64 %85
  ret i8* %86
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @UnrollHalfToFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture, i8* readonly, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 14
  %13 = and i32 %12, 1
  %14 = lshr i32 %6, 7
  %15 = and i32 %14, 7
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x float], [25 x float]* @switch.table.PackHalfFromFloat, i64 0, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi float [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 7
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 8, i32 %29
  %32 = udiv i32 %3, %31
  %33 = icmp eq i32 %8, 0
  br i1 %33, label %66, label %34

34:                                               ; preds = %25
  %35 = icmp eq i32 %10, %13
  %36 = select i1 %35, i32 0, i32 %15
  %37 = icmp eq i32 %10, 0
  %38 = icmp eq i32 %16, 0
  %39 = bitcast i8* %2 to i16*
  %40 = icmp eq i32 %11, 0
  %41 = zext i32 %36 to i64
  %42 = zext i32 %8 to i64
  br label %43

43:                                               ; preds = %43, %34
  %44 = phi i64 [ 0, %34 ], [ %63, %43 ]
  %45 = phi i32 [ 0, %34 ], [ %64, %43 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %8, %46
  %48 = trunc i64 %44 to i32
  %49 = select i1 %37, i32 %48, i32 %47
  %50 = add nuw nsw i64 %44, %41
  %51 = trunc i64 %50 to i32
  %52 = mul i32 %32, %51
  %53 = zext i32 %52 to i64
  %54 = select i1 %38, i64 %50, i64 %53
  %55 = getelementptr inbounds i16, i16* %39, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = tail call float @_cmsHalf2Float(i16 zeroext %56) #7
  %58 = fdiv float %57, %26
  %59 = fsub float 1.000000e+00, %58
  %60 = select i1 %40, float %58, float %59
  %61 = zext i32 %49 to i64
  %62 = getelementptr inbounds float, float* %1, i64 %61
  store float %60, float* %62, align 4
  %63 = add nuw nsw i64 %44, 1
  %64 = add nuw nsw i32 %45, 1
  %65 = icmp eq i64 %63, %42
  br i1 %65, label %66, label %43

66:                                               ; preds = %43, %25
  %67 = icmp eq i32 %15, 0
  %68 = icmp ne i32 %13, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %81

70:                                               ; preds = %66
  %71 = bitcast float* %1 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = bitcast float* %1 to i8*
  %74 = getelementptr inbounds float, float* %1, i64 1
  %75 = bitcast float* %74 to i8*
  %76 = add nsw i32 %8, -1
  %77 = zext i32 %76 to i64
  %78 = shl nuw nsw i64 %77, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %75, i64 %78, i1 false)
  %79 = getelementptr inbounds float, float* %1, i64 %77
  %80 = bitcast float* %79 to i32*
  store i32 %72, i32* %80, align 4
  br label %81

81:                                               ; preds = %70, %66
  %82 = load i32, i32* %5, align 8
  %83 = and i32 %82, 4096
  %84 = icmp eq i32 %83, 0
  %85 = add nuw nsw i32 %8, %15
  %86 = shl nuw nsw i32 %85, 1
  %87 = select i1 %84, i32 %86, i32 2
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %2, i64 %88
  ret i8* %89
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackLabDoubleFrom16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIELab, align 8
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 1
  %13 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 2
  %14 = bitcast i8* %2 to double*
  %15 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -1, i64 24, i1 false)
  call void @cmsLabEncoded2Float(%struct.cmsCIELab* nonnull %5, i16* %1) #7
  %16 = bitcast %struct.cmsCIELab* %5 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8* %2 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast double* %12 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = zext i32 %3 to i64
  %22 = getelementptr inbounds double, double* %14, i64 %21
  %23 = bitcast double* %22 to i64*
  store i64 %20, i64* %23, align 8
  %24 = bitcast double* %13 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = shl i32 %3, 1
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds double, double* %14, i64 %27
  %29 = bitcast double* %28 to i64*
  store i64 %25, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %39

31:                                               ; preds = %4
  %32 = bitcast i8* %2 to %struct.cmsCIELab*
  tail call void @cmsLabEncoded2Float(%struct.cmsCIELab* %32, i16* %1) #7
  %33 = load i32, i32* %6, align 4
  %34 = lshr i32 %33, 4
  %35 = and i32 %34, 56
  %36 = add nuw nsw i32 %35, 24
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %2, i64 %37
  br label %39

39:                                               ; preds = %31, %10
  %40 = phi i8* [ %30, %10 ], [ %38, %31 ]
  ret i8* %40
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackXYZDoubleFrom16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIEXYZ, align 8
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %4
  %11 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 1
  %13 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 2
  %14 = bitcast i8* %2 to double*
  %15 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -1, i64 24, i1 false)
  call void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ* nonnull %5, i16* %1) #7
  %16 = load i32, i32* %6, align 4
  %17 = and i32 %16, 7
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 8, i32 %17
  %20 = udiv i32 %3, %19
  %21 = bitcast %struct.cmsCIEXYZ* %5 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast i8* %2 to i64*
  store i64 %22, i64* %23, align 8
  %24 = bitcast double* %12 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = zext i32 %20 to i64
  %27 = getelementptr inbounds double, double* %14, i64 %26
  %28 = bitcast double* %27 to i64*
  store i64 %25, i64* %28, align 8
  %29 = bitcast double* %13 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = shl i32 %20, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %14, i64 %32
  %34 = bitcast double* %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %44

36:                                               ; preds = %4
  %37 = bitcast i8* %2 to %struct.cmsCIEXYZ*
  tail call void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ* %37, i16* %1) #7
  %38 = load i32, i32* %6, align 4
  %39 = lshr i32 %38, 4
  %40 = and i32 %39, 56
  %41 = add nuw nsw i32 %40, 24
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %2, i64 %42
  br label %44

44:                                               ; preds = %36, %10
  %45 = phi i8* [ %35, %10 ], [ %43, %36 ]
  ret i8* %45
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackLabFloatFrom16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIELab, align 8
  %6 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 0
  %8 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 1
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %5, i64 0, i32 2
  %10 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -1, i64 24, i1 false)
  call void @cmsLabEncoded2Float(%struct.cmsCIELab* nonnull %5, i16* %1) #7
  %11 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 4096
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %4
  %16 = bitcast i8* %2 to float*
  %17 = and i32 %12, 7
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 8, i32 %17
  %20 = udiv i32 %3, %19
  %21 = load double, double* %7, align 8
  %22 = fptrunc double %21 to float
  store float %22, float* %16, align 4
  %23 = load double, double* %8, align 8
  %24 = fptrunc double %23 to float
  %25 = zext i32 %20 to i64
  %26 = getelementptr inbounds float, float* %16, i64 %25
  store float %24, float* %26, align 4
  %27 = load double, double* %9, align 8
  %28 = fptrunc double %27 to float
  %29 = shl i32 %20, 1
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds float, float* %16, i64 %30
  store float %28, float* %31, align 4
  br label %49

32:                                               ; preds = %4
  %33 = load double, double* %7, align 8
  %34 = fptrunc double %33 to float
  %35 = bitcast i8* %2 to float*
  store float %34, float* %35, align 4
  %36 = load double, double* %8, align 8
  %37 = fptrunc double %36 to float
  %38 = getelementptr inbounds i8, i8* %2, i64 4
  %39 = bitcast i8* %38 to float*
  store float %37, float* %39, align 4
  %40 = load double, double* %9, align 8
  %41 = fptrunc double %40 to float
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to float*
  store float %41, float* %43, align 4
  %44 = load i32, i32* %11, align 4
  %45 = lshr i32 %44, 5
  %46 = and i32 %45, 28
  %47 = add nuw nsw i32 %46, 12
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %32, %15
  %50 = phi i64 [ %48, %32 ], [ 4, %15 ]
  %51 = getelementptr inbounds i8, i8* %2, i64 %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  ret i8* %51
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackXYZFloatFrom16(%struct._cmstransform_struct* nocapture readonly, i16*, i8*, i32) #0 {
  %5 = alloca %struct.cmsCIEXYZ, align 8
  %6 = alloca %struct.cmsCIEXYZ, align 8
  %7 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 4096
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %34, label %11

11:                                               ; preds = %4
  %12 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7
  %13 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 0
  %14 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 1
  %15 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %5, i64 0, i32 2
  %16 = bitcast i8* %2 to float*
  %17 = bitcast %struct.cmsCIEXYZ* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 24, i1 false)
  call void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ* nonnull %5, i16* %1) #7
  %18 = load i32, i32* %7, align 4
  %19 = and i32 %18, 7
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 8, i32 %19
  %22 = udiv i32 %3, %21
  %23 = load double, double* %13, align 8
  %24 = fptrunc double %23 to float
  store float %24, float* %16, align 4
  %25 = load double, double* %14, align 8
  %26 = fptrunc double %25 to float
  %27 = zext i32 %22 to i64
  %28 = getelementptr inbounds float, float* %16, i64 %27
  store float %26, float* %28, align 4
  %29 = load double, double* %15, align 8
  %30 = fptrunc double %29 to float
  %31 = shl i32 %22, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds float, float* %16, i64 %32
  store float %30, float* %33, align 4
  br label %56

34:                                               ; preds = %4
  %35 = bitcast %struct.cmsCIEXYZ* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #7
  %36 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %6, i64 0, i32 0
  %37 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %6, i64 0, i32 1
  %38 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %6, i64 0, i32 2
  %39 = bitcast i8* %2 to float*
  %40 = bitcast %struct.cmsCIEXYZ* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -1, i64 24, i1 false)
  call void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ* nonnull %6, i16* %1) #7
  %41 = load double, double* %36, align 8
  %42 = fptrunc double %41 to float
  store float %42, float* %39, align 4
  %43 = load double, double* %37, align 8
  %44 = fptrunc double %43 to float
  %45 = getelementptr inbounds i8, i8* %2, i64 4
  %46 = bitcast i8* %45 to float*
  store float %44, float* %46, align 4
  %47 = load double, double* %38, align 8
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds i8, i8* %2, i64 8
  %50 = bitcast i8* %49 to float*
  store float %48, float* %50, align 4
  %51 = load i32, i32* %7, align 4
  %52 = lshr i32 %51, 5
  %53 = and i32 %52, 28
  %54 = add nuw nsw i32 %53, 12
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %34, %11
  %57 = phi i64 [ %55, %34 ], [ 4, %11 ]
  %58 = phi i8* [ %35, %34 ], [ %12, %11 ]
  %59 = getelementptr inbounds i8, i8* %2, i64 %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #7
  ret i8* %59
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackDoubleFrom16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackFloatFrom16, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi double [ %24, %21 ], [ 6.553500e+04, %4 ]
  %27 = bitcast i8* %2 to double*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %64, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %61, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %62, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %1, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = uitofp i16 %50 to double
  %52 = fdiv double %51, %26
  %53 = fsub double %26, %52
  %54 = select i1 %37, double %52, double %53
  %55 = add nuw nsw i64 %42, %39
  %56 = trunc i64 %55 to i32
  %57 = mul i32 %31, %56
  %58 = zext i32 %57 to i64
  %59 = select i1 %38, i64 %55, i64 %58
  %60 = getelementptr inbounds double, double* %27, i64 %59
  store double %54, double* %60, align 8
  %61 = add nuw nsw i64 %42, 1
  %62 = add nuw nsw i32 %43, 1
  %63 = icmp eq i64 %61, %40
  br i1 %63, label %64, label %41

64:                                               ; preds = %41, %25
  %65 = phi double [ 0.000000e+00, %25 ], [ %54, %41 ]
  %66 = icmp eq i32 %13, 0
  %67 = icmp ne i32 %15, 0
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  %71 = add nsw i32 %8, -1
  %72 = zext i32 %71 to i64
  %73 = shl nuw nsw i64 %72, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %2, i64 %73, i1 false)
  store double %65, double* %27, align 8
  br label %74

74:                                               ; preds = %69, %64
  %75 = load i32, i32* %5, align 4
  %76 = and i32 %75, 4096
  %77 = icmp eq i32 %76, 0
  %78 = add nuw nsw i32 %8, %13
  %79 = shl nuw nsw i32 %78, 3
  %80 = select i1 %77, i32 %79, i32 8
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  ret i8* %82
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackFloatFrom16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackFloatFrom16, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi double [ %24, %21 ], [ 6.553500e+04, %4 ]
  %27 = bitcast i8* %2 to float*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %65, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %62, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %63, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %1, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = uitofp i16 %50 to double
  %52 = fdiv double %51, %26
  %53 = fsub double %26, %52
  %54 = select i1 %37, double %52, double %53
  %55 = fptrunc double %54 to float
  %56 = add nuw nsw i64 %42, %39
  %57 = trunc i64 %56 to i32
  %58 = mul i32 %31, %57
  %59 = zext i32 %58 to i64
  %60 = select i1 %38, i64 %56, i64 %59
  %61 = getelementptr inbounds float, float* %27, i64 %60
  store float %55, float* %61, align 4
  %62 = add nuw nsw i64 %42, 1
  %63 = add nuw nsw i32 %43, 1
  %64 = icmp eq i64 %62, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %41, %25
  %66 = phi float [ 0.000000e+00, %25 ], [ %55, %41 ]
  %67 = icmp eq i32 %13, 0
  %68 = icmp ne i32 %15, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %2, i64 4
  %72 = add nsw i32 %8, -1
  %73 = zext i32 %72 to i64
  %74 = shl nuw nsw i64 %73, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %2, i64 %74, i1 false)
  store float %66, float* %27, align 4
  br label %75

75:                                               ; preds = %70, %65
  %76 = load i32, i32* %5, align 4
  %77 = and i32 %76, 4096
  %78 = icmp eq i32 %77, 0
  %79 = add nuw nsw i32 %8, %13
  %80 = shl nuw nsw i32 %79, 2
  %81 = select i1 %78, i32 %80, i32 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %2, i64 %82
  ret i8* %83
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackHalfFrom16(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x float], [25 x float]* @switch.table.PackHalfFrom16, i64 0, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi float [ %24, %21 ], [ 6.553500e+04, %4 ]
  %27 = bitcast i8* %2 to i16*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %65, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %62, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %63, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %1, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = uitofp i16 %50 to float
  %52 = fdiv float %51, %26
  %53 = fsub float %26, %52
  %54 = select i1 %37, float %52, float %53
  %55 = tail call zeroext i16 @_cmsFloat2Half(float %54) #7
  %56 = add nuw nsw i64 %42, %39
  %57 = trunc i64 %56 to i32
  %58 = mul i32 %31, %57
  %59 = zext i32 %58 to i64
  %60 = select i1 %38, i64 %56, i64 %59
  %61 = getelementptr inbounds i16, i16* %27, i64 %60
  store i16 %55, i16* %61, align 2
  %62 = add nuw nsw i64 %42, 1
  %63 = add nuw nsw i32 %43, 1
  %64 = icmp eq i64 %62, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %41, %25
  %66 = phi float [ 0.000000e+00, %25 ], [ %54, %41 ]
  %67 = icmp eq i32 %13, 0
  %68 = icmp ne i32 %15, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %76

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %2, i64 2
  %72 = add nsw i32 %8, -1
  %73 = zext i32 %72 to i64
  %74 = shl nuw nsw i64 %73, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %71, i8* align 2 %2, i64 %74, i1 false)
  %75 = tail call zeroext i16 @_cmsFloat2Half(float %66) #7
  store i16 %75, i16* %27, align 2
  br label %76

76:                                               ; preds = %70, %65
  %77 = load i32, i32* %5, align 4
  %78 = and i32 %77, 4096
  %79 = icmp eq i32 %78, 0
  %80 = add nuw nsw i32 %8, %13
  %81 = shl nuw nsw i32 %80, 1
  %82 = select i1 %79, i32 %81, i32 2
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %2, i64 %83
  ret i8* %84
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1Byte(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %10, i8* %2, align 1
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1ByteSkip1(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %2, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1ByteSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i16, i16* %1, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %11, i8* %5, align 1
  ret i8* %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1ByteReversed(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = xor i16 %5, -1
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  ret i8* %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackLabV2_8(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = shl nuw nsw i32 %6, 8
  %8 = or i32 %7, 128
  %9 = udiv i32 %8, 257
  %10 = mul nuw i32 %9, 65281
  %11 = add nuw i32 %10, 8388608
  %12 = lshr i32 %11, 24
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %13, i8* %2, align 1
  %15 = getelementptr inbounds i16, i16* %1, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %18, 128
  %20 = udiv i32 %19, 257
  %21 = mul nuw i32 %20, 65281
  %22 = add nuw i32 %21, 8388608
  %23 = lshr i32 %22, 24
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %24, i8* %14, align 1
  %26 = getelementptr inbounds i16, i16* %1, i64 2
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = shl nuw nsw i32 %28, 8
  %30 = or i32 %29, 128
  %31 = udiv i32 %30, 257
  %32 = mul nuw i32 %31, 65281
  %33 = add nuw i32 %32, 8388608
  %34 = lshr i32 %33, 24
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %35, i8* %25, align 1
  ret i8* %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackALabV2_8(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i16, i16* %1, align 2
  %7 = zext i16 %6 to i32
  %8 = shl nuw nsw i32 %7, 8
  %9 = or i32 %8, 128
  %10 = udiv i32 %9, 257
  %11 = mul nuw i32 %10, 65281
  %12 = add nuw i32 %11, 8388608
  %13 = lshr i32 %12, 24
  %14 = trunc i32 %13 to i8
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %14, i8* %5, align 1
  %16 = getelementptr inbounds i16, i16* %1, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = shl nuw nsw i32 %18, 8
  %20 = or i32 %19, 128
  %21 = udiv i32 %20, 257
  %22 = mul nuw i32 %21, 65281
  %23 = add nuw i32 %22, 8388608
  %24 = lshr i32 %23, 24
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %25, i8* %15, align 1
  %27 = getelementptr inbounds i16, i16* %1, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = or i32 %30, 128
  %32 = udiv i32 %31, 257
  %33 = mul nuw i32 %32, 65281
  %34 = add nuw i32 %33, 8388608
  %35 = lshr i32 %34, 24
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %36, i8* %26, align 1
  ret i8* %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackLabV2_16(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = shl nuw nsw i32 %6, 8
  %8 = or i32 %7, 128
  %9 = udiv i32 %8, 257
  %10 = trunc i32 %9 to i16
  %11 = bitcast i8* %2 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %16, 128
  %18 = udiv i32 %17, 257
  %19 = trunc i32 %18 to i16
  %20 = bitcast i8* %12 to i16*
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds i8, i8* %2, i64 4
  %22 = getelementptr inbounds i16, i16* %1, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = shl nuw nsw i32 %24, 8
  %26 = or i32 %25, 128
  %27 = udiv i32 %26, 257
  %28 = trunc i32 %27 to i16
  %29 = bitcast i8* %21 to i16*
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesOptimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = trunc i16 %5 to i8
  %7 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %6, i8* %2, align 1
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = trunc i16 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %10, i8* %7, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = trunc i16 %13 to i8
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %14, i8* %11, align 1
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1Optimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = trunc i16 %5 to i8
  %7 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %6, i8* %2, align 1
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = trunc i16 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %10, i8* %7, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = trunc i16 %13 to i8
  store i8 %14, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1SwapFirstOptimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i16, i16* %1, align 2
  %7 = trunc i16 %6 to i8
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %7, i8* %5, align 1
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = trunc i16 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %11, i8* %8, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = trunc i16 %14 to i8
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %15, i8* %12, align 1
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1SwapSwapFirstOptimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = trunc i16 %6 to i8
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %7, i8* %2, align 1
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = trunc i16 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %11, i8* %8, align 1
  %13 = load i16, i16* %1, align 2
  %14 = trunc i16 %13 to i8
  store i8 %14, i8* %12, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1SwapOptimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = getelementptr inbounds i16, i16* %1, i64 2
  %7 = load i16, i16* %6, align 2
  %8 = trunc i16 %7 to i8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %8, i8* %5, align 1
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = trunc i16 %11 to i8
  %13 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %12, i8* %9, align 1
  %14 = load i16, i16* %1, align 2
  %15 = trunc i16 %14 to i8
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %15, i8* %13, align 1
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesSwapOptimized(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = trunc i16 %6 to i8
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %7, i8* %2, align 1
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = trunc i16 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %11, i8* %8, align 1
  %13 = load i16, i16* %1, align 2
  %14 = trunc i16 %13 to i8
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %14, i8* %12, align 1
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %10, i8* %2, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw i32 %14, 65281
  %16 = add nuw i32 %15, 8388608
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %18, i8* %11, align 1
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %19, align 1
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %10, i8* %2, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw i32 %14, 65281
  %16 = add nuw i32 %15, 8388608
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %18, i8* %11, align 1
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %19, align 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = load i16, i16* %1, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %11, i8* %5, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %19, i8* %12, align 1
  %21 = getelementptr inbounds i16, i16* %1, i64 2
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = mul nuw i32 %23, 65281
  %25 = add nuw i32 %24, 8388608
  %26 = lshr i32 %25, 24
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %27, i8* %20, align 1
  ret i8* %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1SwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %19, i8* %12, align 1
  %21 = load i16, i16* %1, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %20, align 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesAndSkip1Swap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = getelementptr inbounds i16, i16* %1, i64 2
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = mul nuw i32 %8, 65281
  %10 = add nuw i32 %9, 8388608
  %11 = lshr i32 %10, 24
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %12, i8* %5, align 1
  %14 = getelementptr inbounds i16, i16* %1, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = mul nuw i32 %16, 65281
  %18 = add nuw i32 %17, 8388608
  %19 = lshr i32 %18, 24
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %20, i8* %13, align 1
  %22 = load i16, i16* %1, align 2
  %23 = zext i16 %22 to i32
  %24 = mul nuw i32 %23, 65281
  %25 = add nuw i32 %24, 8388608
  %26 = lshr i32 %25, 24
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %27, i8* %21, align 1
  ret i8* %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3BytesSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %19, i8* %12, align 1
  %21 = load i16, i16* %1, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %20, align 1
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack6Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %10, i8* %2, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw i32 %14, 65281
  %16 = add nuw i32 %15, 8388608
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %18, i8* %11, align 1
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %19, align 1
  %28 = getelementptr inbounds i16, i16* %1, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw i32 %30, 65281
  %32 = add nuw i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %34, i8* %27, align 1
  %36 = getelementptr inbounds i16, i16* %1, i64 4
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw i32 %38, 65281
  %40 = add nuw i32 %39, 8388608
  %41 = lshr i32 %40, 24
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %42, i8* %35, align 1
  %44 = getelementptr inbounds i16, i16* %1, i64 5
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nuw i32 %46, 65281
  %48 = add nuw i32 %47, 8388608
  %49 = lshr i32 %48, 24
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %50, i8* %43, align 1
  ret i8* %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack6BytesSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 5
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 4
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %19, i8* %12, align 1
  %21 = getelementptr inbounds i16, i16* %1, i64 3
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = mul nuw i32 %23, 65281
  %25 = add nuw i32 %24, 8388608
  %26 = lshr i32 %25, 24
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %27, i8* %20, align 1
  %29 = getelementptr inbounds i16, i16* %1, i64 2
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw i32 %31, 65281
  %33 = add nuw i32 %32, 8388608
  %34 = lshr i32 %33, 24
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %35, i8* %28, align 1
  %37 = getelementptr inbounds i16, i16* %1, i64 1
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = mul nuw i32 %39, 65281
  %41 = add nuw i32 %40, 8388608
  %42 = lshr i32 %41, 24
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %43, i8* %36, align 1
  %45 = load i16, i16* %1, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nuw i32 %46, 65281
  %48 = add nuw i32 %47, 8388608
  %49 = lshr i32 %48, 24
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %50, i8* %44, align 1
  ret i8* %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4Bytes(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %10, i8* %2, align 1
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw i32 %14, 65281
  %16 = add nuw i32 %15, 8388608
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %18, i8* %11, align 1
  %20 = getelementptr inbounds i16, i16* %1, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %19, align 1
  %28 = getelementptr inbounds i16, i16* %1, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw i32 %30, 65281
  %32 = add nuw i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %34, i8* %27, align 1
  ret i8* %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4BytesReverse(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = zext i16 %5 to i32
  %7 = mul nuw i32 %6, 65281
  %8 = add nuw i32 %7, 8388608
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, -1
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = xor i8 %19, -1
  %21 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %20, i8* %12, align 1
  %22 = getelementptr inbounds i16, i16* %1, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = mul nuw i32 %24, 65281
  %26 = add nuw i32 %25, 8388608
  %27 = lshr i32 %26, 24
  %28 = trunc i32 %27 to i8
  %29 = xor i8 %28, -1
  %30 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %29, i8* %21, align 1
  %31 = getelementptr inbounds i16, i16* %1, i64 3
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw i32 %33, 65281
  %35 = add nuw i32 %34, 8388608
  %36 = lshr i32 %35, 24
  %37 = trunc i32 %36 to i8
  %38 = xor i8 %37, -1
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %38, i8* %30, align 1
  ret i8* %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4BytesSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 3
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = load i16, i16* %1, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw i32 %14, 65281
  %16 = add nuw i32 %15, 8388608
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %18, i8* %12, align 1
  %20 = getelementptr inbounds i16, i16* %1, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %19, align 1
  %28 = getelementptr inbounds i16, i16* %1, i64 2
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw i32 %30, 65281
  %32 = add nuw i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %34, i8* %27, align 1
  ret i8* %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4BytesSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 3
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %19, i8* %12, align 1
  %21 = getelementptr inbounds i16, i16* %1, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = mul nuw i32 %23, 65281
  %25 = add nuw i32 %24, 8388608
  %26 = lshr i32 %25, 24
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %27, i8* %20, align 1
  %29 = load i16, i16* %1, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw i32 %30, 65281
  %32 = add nuw i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %34, i8* %28, align 1
  ret i8* %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4BytesSwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = mul nuw i32 %7, 65281
  %9 = add nuw i32 %8, 8388608
  %10 = lshr i32 %9, 24
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %11, i8* %2, align 1
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = mul nuw i32 %15, 65281
  %17 = add nuw i32 %16, 8388608
  %18 = lshr i32 %17, 24
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %19, i8* %12, align 1
  %21 = load i16, i16* %1, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw i32 %22, 65281
  %24 = add nuw i32 %23, 8388608
  %25 = lshr i32 %24, 24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %26, i8* %20, align 1
  %28 = getelementptr inbounds i16, i16* %1, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw i32 %30, 65281
  %32 = add nuw i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %34, i8* %27, align 1
  ret i8* %35
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackAnyBytes(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 7
  %12 = and i32 %11, 7
  %13 = lshr i32 %6, 14
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %10, %14
  %16 = zext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  %18 = select i1 %15, i8* %17, i8* %2
  %19 = icmp eq i32 %8, 0
  br i1 %19, label %86, label %20

20:                                               ; preds = %4
  %21 = icmp eq i32 %10, 0
  %22 = shl i32 %6, 18
  %23 = ashr i32 %22, 31
  %24 = and i32 %7, 1
  %25 = icmp eq i32 %8, 1
  br i1 %25, label %62, label %26

26:                                               ; preds = %20
  %27 = sub nsw i32 %8, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i32 [ 0, %26 ], [ %59, %28 ]
  %30 = phi i8* [ %18, %26 ], [ %58, %28 ]
  %31 = phi i32 [ %27, %26 ], [ %60, %28 ]
  %32 = xor i32 %29, -1
  %33 = add nsw i32 %8, %32
  %34 = select i1 %21, i32 %29, i32 %33
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw i32 %38, 65281
  %40 = add nuw i32 %39, 8388608
  %41 = lshr i32 %40, 24
  %42 = xor i32 %41, %23
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 %43, i8* %30, align 1
  %45 = or i32 %29, 1
  %46 = sub nuw nsw i32 -2, %29
  %47 = add nsw i32 %8, %46
  %48 = select i1 %21, i32 %45, i32 %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %1, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw i32 %52, 65281
  %54 = add nuw i32 %53, 8388608
  %55 = lshr i32 %54, 24
  %56 = xor i32 %55, %23
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %30, i64 2
  store i8 %57, i8* %44, align 1
  %59 = add nuw nsw i32 %29, 2
  %60 = add i32 %31, -2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %28

62:                                               ; preds = %28, %20
  %63 = phi i32 [ undef, %20 ], [ %56, %28 ]
  %64 = phi i8* [ undef, %20 ], [ %58, %28 ]
  %65 = phi i32 [ 0, %20 ], [ %59, %28 ]
  %66 = phi i8* [ %18, %20 ], [ %58, %28 ]
  %67 = icmp eq i32 %24, 0
  br i1 %67, label %82, label %68

68:                                               ; preds = %62
  %69 = xor i32 %65, -1
  %70 = add nsw i32 %8, %69
  %71 = select i1 %21, i32 %65, i32 %70
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i16, i16* %1, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = mul nuw i32 %75, 65281
  %77 = add nuw i32 %76, 8388608
  %78 = lshr i32 %77, 24
  %79 = xor i32 %78, %23
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %66, align 1
  %81 = getelementptr inbounds i8, i8* %66, i64 1
  br label %82

82:                                               ; preds = %62, %68
  %83 = phi i32 [ %63, %62 ], [ %79, %68 ]
  %84 = phi i8* [ %64, %62 ], [ %81, %68 ]
  %85 = trunc i32 %83 to i8
  br label %86

86:                                               ; preds = %82, %4
  %87 = phi i8* [ %18, %4 ], [ %84, %82 ]
  %88 = phi i8 [ 0, %4 ], [ %85, %82 ]
  %89 = getelementptr inbounds i8, i8* %87, i64 %16
  %90 = select i1 %15, i8* %87, i8* %89
  %91 = icmp eq i32 %12, 0
  %92 = icmp ne i32 %14, 0
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %86
  %95 = getelementptr inbounds i8, i8* %2, i64 1
  %96 = add nsw i32 %8, -1
  %97 = zext i32 %96 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %95, i8* align 1 %2, i64 %97, i1 false)
  store i8 %88, i8* %2, align 1
  br label %98

98:                                               ; preds = %94, %86
  ret i8* %90
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackPlanarBytes(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 14
  %12 = and i32 %11, 1
  %13 = and i32 %6, 8192
  %14 = icmp eq i32 %10, %12
  br i1 %14, label %21, label %15

15:                                               ; preds = %4
  %16 = lshr i32 %6, 7
  %17 = and i32 %16, 7
  %18 = mul i32 %17, %3
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %2, i64 %19
  br label %21

21:                                               ; preds = %4, %15
  %22 = phi i8* [ %20, %15 ], [ %2, %4 ]
  %23 = icmp eq i32 %8, 0
  br i1 %23, label %86, label %24

24:                                               ; preds = %21
  %25 = icmp eq i32 %10, 0
  %26 = icmp eq i32 %13, 0
  %27 = zext i32 %3 to i64
  %28 = and i32 %7, 1
  %29 = icmp eq i32 %8, 1
  br i1 %29, label %68, label %30

30:                                               ; preds = %24
  %31 = sub nsw i32 %8, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i8* [ %22, %30 ], [ %64, %32 ]
  %34 = phi i32 [ 0, %30 ], [ %65, %32 ]
  %35 = phi i32 [ %31, %30 ], [ %66, %32 ]
  %36 = xor i32 %34, -1
  %37 = add nsw i32 %8, %36
  %38 = select i1 %25, i32 %34, i32 %37
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw i32 %42, 65281
  %44 = add nuw i32 %43, 8388608
  %45 = lshr i32 %44, 24
  %46 = xor i32 %45, 255
  %47 = select i1 %26, i32 %45, i32 %46
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %33, align 1
  %49 = getelementptr inbounds i8, i8* %33, i64 %27
  %50 = or i32 %34, 1
  %51 = sub nuw nsw i32 -2, %34
  %52 = add nsw i32 %8, %51
  %53 = select i1 %25, i32 %50, i32 %52
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %1, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw i32 %57, 65281
  %59 = add nuw i32 %58, 8388608
  %60 = lshr i32 %59, 24
  %61 = xor i32 %60, 255
  %62 = select i1 %26, i32 %60, i32 %61
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %49, align 1
  %64 = getelementptr inbounds i8, i8* %49, i64 %27
  %65 = add nuw nsw i32 %34, 2
  %66 = add i32 %35, -2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %32

68:                                               ; preds = %32, %24
  %69 = phi i8* [ %22, %24 ], [ %64, %32 ]
  %70 = phi i32 [ 0, %24 ], [ %65, %32 ]
  %71 = icmp eq i32 %28, 0
  br i1 %71, label %86, label %72

72:                                               ; preds = %68
  %73 = xor i32 %70, -1
  %74 = add nsw i32 %8, %73
  %75 = select i1 %25, i32 %70, i32 %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %1, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = mul nuw i32 %79, 65281
  %81 = add nuw i32 %80, 8388608
  %82 = lshr i32 %81, 24
  %83 = xor i32 %82, 255
  %84 = select i1 %26, i32 %82, i32 %83
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %69, align 1
  br label %86

86:                                               ; preds = %72, %68, %21
  %87 = getelementptr inbounds i8, i8* %2, i64 1
  ret i8* %87
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1Word(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1WordSkip1(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1WordSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 2
  %6 = load i16, i16* %1, align 2
  %7 = bitcast i8* %5 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  ret i8* %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack1WordReversed(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = xor i16 %5, -1
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %8
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @Pack1WordBigEndian(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #4 {
  %5 = load i16, i16* %1, align 2
  %6 = tail call i16 @llvm.bswap.i16(i16 %5)
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = bitcast i8* %7 to i16*
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = bitcast i8* %11 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3WordsSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = bitcast i8* %8 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = load i16, i16* %1, align 2
  %14 = bitcast i8* %12 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %15
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @Pack3WordsBigEndian(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #4 {
  %5 = load i16, i16* %1, align 2
  %6 = tail call i16 @llvm.bswap.i16(i16 %5)
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = tail call i16 @llvm.bswap.i16(i16 %10)
  %12 = bitcast i8* %8 to i16*
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = tail call i16 @llvm.bswap.i16(i16 %15)
  %17 = bitcast i8* %13 to i16*
  store i16 %16, i16* %17, align 2
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  ret i8* %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3WordsAndSkip1(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = bitcast i8* %7 to i16*
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = bitcast i8* %11 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3WordsAndSkip1Swap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 2
  %6 = getelementptr inbounds i16, i16* %1, i64 2
  %7 = load i16, i16* %6, align 2
  %8 = bitcast i8* %5 to i16*
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = bitcast i8* %9 to i16*
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = load i16, i16* %1, align 2
  %15 = bitcast i8* %13 to i16*
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3WordsAndSkip1SwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i8, i8* %2, i64 2
  %6 = load i16, i16* %1, align 2
  %7 = bitcast i8* %5 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = bitcast i8* %8 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 6
  %13 = getelementptr inbounds i16, i16* %1, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = bitcast i8* %12 to i16*
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack3WordsAndSkip1SwapSwapFirst(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 2
  %6 = load i16, i16* %5, align 2
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = bitcast i8* %8 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = load i16, i16* %1, align 2
  %14 = bitcast i8* %12 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = bitcast i8* %7 to i16*
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = bitcast i8* %11 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  %16 = getelementptr inbounds i16, i16* %1, i64 3
  %17 = load i16, i16* %16, align 2
  %18 = bitcast i8* %15 to i16*
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4WordsReverse(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = xor i16 %5, -1
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = xor i16 %10, -1
  %12 = bitcast i8* %8 to i16*
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = xor i16 %15, -1
  %17 = bitcast i8* %13 to i16*
  store i16 %16, i16* %17, align 2
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = getelementptr inbounds i16, i16* %1, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = xor i16 %20, -1
  %22 = bitcast i8* %18 to i16*
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack4WordsSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 3
  %6 = load i16, i16* %5, align 2
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 2
  %10 = load i16, i16* %9, align 2
  %11 = bitcast i8* %8 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = getelementptr inbounds i16, i16* %1, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = bitcast i8* %12 to i16*
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = load i16, i16* %1, align 2
  %18 = bitcast i8* %16 to i16*
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %19
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @Pack4WordsBigEndian(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #4 {
  %5 = load i16, i16* %1, align 2
  %6 = tail call i16 @llvm.bswap.i16(i16 %5)
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = tail call i16 @llvm.bswap.i16(i16 %10)
  %12 = bitcast i8* %8 to i16*
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = tail call i16 @llvm.bswap.i16(i16 %15)
  %17 = bitcast i8* %13 to i16*
  store i16 %16, i16* %17, align 2
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = getelementptr inbounds i16, i16* %1, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = tail call i16 @llvm.bswap.i16(i16 %20)
  %22 = bitcast i8* %18 to i16*
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  ret i8* %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack6Words(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = load i16, i16* %1, align 2
  %6 = bitcast i8* %2 to i16*
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %2, i64 2
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = bitcast i8* %7 to i16*
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i16, i16* %1, i64 2
  %13 = load i16, i16* %12, align 2
  %14 = bitcast i8* %11 to i16*
  store i16 %13, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %2, i64 6
  %16 = getelementptr inbounds i16, i16* %1, i64 3
  %17 = load i16, i16* %16, align 2
  %18 = bitcast i8* %15 to i16*
  store i16 %17, i16* %18, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  %20 = getelementptr inbounds i16, i16* %1, i64 4
  %21 = load i16, i16* %20, align 2
  %22 = bitcast i8* %19 to i16*
  store i16 %21, i16* %22, align 2
  %23 = getelementptr inbounds i8, i8* %2, i64 10
  %24 = getelementptr inbounds i16, i16* %1, i64 5
  %25 = load i16, i16* %24, align 2
  %26 = bitcast i8* %23 to i16*
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 12
  ret i8* %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @Pack6WordsSwap(%struct._cmstransform_struct* nocapture readnone, i16* nocapture readonly, i8*, i32) #5 {
  %5 = getelementptr inbounds i16, i16* %1, i64 5
  %6 = load i16, i16* %5, align 2
  %7 = bitcast i8* %2 to i16*
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i16, i16* %1, i64 4
  %10 = load i16, i16* %9, align 2
  %11 = bitcast i8* %8 to i16*
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = getelementptr inbounds i16, i16* %1, i64 3
  %14 = load i16, i16* %13, align 2
  %15 = bitcast i8* %12 to i16*
  store i16 %14, i16* %15, align 2
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = getelementptr inbounds i16, i16* %1, i64 2
  %18 = load i16, i16* %17, align 2
  %19 = bitcast i8* %16 to i16*
  store i16 %18, i16* %19, align 2
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = getelementptr inbounds i16, i16* %1, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = bitcast i8* %20 to i16*
  store i16 %22, i16* %23, align 2
  %24 = getelementptr inbounds i8, i8* %2, i64 10
  %25 = load i16, i16* %1, align 2
  %26 = bitcast i8* %24 to i16*
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %2, i64 12
  ret i8* %27
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @PackPlanarWords(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #4 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = and i32 %6, 1024
  %10 = and i32 %6, 2048
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %4
  %13 = lshr i32 %6, 7
  %14 = and i32 %13, 7
  %15 = mul i32 %14, %3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  br label %18

18:                                               ; preds = %12, %4
  %19 = phi i8* [ %17, %12 ], [ %2, %4 ]
  %20 = icmp eq i32 %8, 0
  br i1 %20, label %76, label %21

21:                                               ; preds = %18
  %22 = icmp eq i32 %10, 0
  %23 = shl i32 %6, 18
  %24 = ashr i32 %23, 31
  %25 = trunc i32 %24 to i16
  %26 = zext i32 %3 to i64
  %27 = and i32 %7, 1
  %28 = icmp eq i32 %8, 1
  br i1 %28, label %61, label %29

29:                                               ; preds = %21
  %30 = sub nsw i32 %8, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i32 [ 0, %29 ], [ %58, %31 ]
  %33 = phi i8* [ %19, %29 ], [ %57, %31 ]
  %34 = phi i32 [ %30, %29 ], [ %59, %31 ]
  %35 = xor i32 %32, -1
  %36 = add nsw i32 %8, %35
  %37 = select i1 %11, i32 %36, i32 %32
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %1, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = tail call i16 @llvm.bswap.i16(i16 %40)
  %42 = select i1 %22, i16 %40, i16 %41
  %43 = xor i16 %42, %25
  %44 = bitcast i8* %33 to i16*
  store i16 %43, i16* %44, align 2
  %45 = getelementptr inbounds i8, i8* %33, i64 %26
  %46 = or i32 %32, 1
  %47 = sub nuw nsw i32 -2, %32
  %48 = add nsw i32 %8, %47
  %49 = select i1 %11, i32 %48, i32 %46
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %1, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = tail call i16 @llvm.bswap.i16(i16 %52)
  %54 = select i1 %22, i16 %52, i16 %53
  %55 = xor i16 %54, %25
  %56 = bitcast i8* %45 to i16*
  store i16 %55, i16* %56, align 2
  %57 = getelementptr inbounds i8, i8* %45, i64 %26
  %58 = add nuw nsw i32 %32, 2
  %59 = add i32 %34, -2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %31

61:                                               ; preds = %31, %21
  %62 = phi i32 [ 0, %21 ], [ %58, %31 ]
  %63 = phi i8* [ %19, %21 ], [ %57, %31 ]
  %64 = icmp eq i32 %27, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %61
  %66 = xor i32 %62, -1
  %67 = add nsw i32 %8, %66
  %68 = select i1 %11, i32 %67, i32 %62
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i16, i16* %1, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = tail call i16 @llvm.bswap.i16(i16 %71)
  %73 = select i1 %22, i16 %71, i16 %72
  %74 = xor i16 %73, %25
  %75 = bitcast i8* %63 to i16*
  store i16 %74, i16* %75, align 2
  br label %76

76:                                               ; preds = %65, %61, %18
  %77 = getelementptr inbounds i8, i8* %2, i64 2
  ret i8* %77
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackAnyWords(%struct._cmstransform_struct* nocapture readonly, i16* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = lshr i32 %6, 7
  %12 = and i32 %11, 7
  %13 = lshr i32 %6, 14
  %14 = and i32 %13, 1
  %15 = bitcast i8* %2 to i16*
  %16 = icmp ne i32 %10, %14
  %17 = shl nuw nsw i32 %12, 1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %2, i64 %18
  %20 = select i1 %16, i8* %19, i8* %2
  %21 = icmp eq i32 %8, 0
  br i1 %21, label %81, label %22

22:                                               ; preds = %4
  %23 = and i32 %6, 2048
  %24 = icmp eq i32 %10, 0
  %25 = icmp eq i32 %23, 0
  %26 = shl i32 %6, 18
  %27 = ashr i32 %26, 31
  %28 = trunc i32 %27 to i16
  %29 = and i32 %7, 1
  %30 = icmp eq i32 %8, 1
  br i1 %30, label %63, label %31

31:                                               ; preds = %22
  %32 = sub nsw i32 %8, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i32 [ 0, %31 ], [ %60, %33 ]
  %35 = phi i8* [ %20, %31 ], [ %59, %33 ]
  %36 = phi i32 [ %32, %31 ], [ %61, %33 ]
  %37 = xor i32 %34, -1
  %38 = add nsw i32 %8, %37
  %39 = select i1 %24, i32 %34, i32 %38
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %1, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = tail call i16 @llvm.bswap.i16(i16 %42)
  %44 = select i1 %25, i16 %42, i16 %43
  %45 = xor i16 %44, %28
  %46 = bitcast i8* %35 to i16*
  store i16 %45, i16* %46, align 2
  %47 = getelementptr inbounds i8, i8* %35, i64 2
  %48 = or i32 %34, 1
  %49 = sub nuw nsw i32 -2, %34
  %50 = add nsw i32 %8, %49
  %51 = select i1 %24, i32 %48, i32 %50
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %1, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = tail call i16 @llvm.bswap.i16(i16 %54)
  %56 = select i1 %25, i16 %54, i16 %55
  %57 = xor i16 %56, %28
  %58 = bitcast i8* %47 to i16*
  store i16 %57, i16* %58, align 2
  %59 = getelementptr inbounds i8, i8* %35, i64 4
  %60 = add nuw nsw i32 %34, 2
  %61 = add i32 %36, -2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %33

63:                                               ; preds = %33, %22
  %64 = phi i16 [ undef, %22 ], [ %57, %33 ]
  %65 = phi i8* [ undef, %22 ], [ %59, %33 ]
  %66 = phi i32 [ 0, %22 ], [ %60, %33 ]
  %67 = phi i8* [ %20, %22 ], [ %59, %33 ]
  %68 = icmp eq i32 %29, 0
  br i1 %68, label %81, label %69

69:                                               ; preds = %63
  %70 = xor i32 %66, -1
  %71 = add nsw i32 %8, %70
  %72 = select i1 %24, i32 %66, i32 %71
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %1, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = tail call i16 @llvm.bswap.i16(i16 %75)
  %77 = select i1 %25, i16 %75, i16 %76
  %78 = xor i16 %77, %28
  %79 = bitcast i8* %67 to i16*
  store i16 %78, i16* %79, align 2
  %80 = getelementptr inbounds i8, i8* %67, i64 2
  br label %81

81:                                               ; preds = %69, %63, %4
  %82 = phi i8* [ %20, %4 ], [ %65, %63 ], [ %80, %69 ]
  %83 = phi i16 [ 0, %4 ], [ %64, %63 ], [ %78, %69 ]
  %84 = getelementptr inbounds i8, i8* %82, i64 %18
  %85 = select i1 %16, i8* %82, i8* %84
  %86 = icmp eq i32 %12, 0
  %87 = icmp ne i32 %14, 0
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %94

89:                                               ; preds = %81
  %90 = getelementptr inbounds i8, i8* %2, i64 2
  %91 = add nsw i32 %8, -1
  %92 = zext i32 %91 to i64
  %93 = shl nuw nsw i64 %92, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %90, i8* align 2 %2, i64 %93, i1 false)
  store i16 %83, i16* %15, align 2
  br label %94

94:                                               ; preds = %89, %81
  ret i8* %85
}

declare void @cmsLabEncoded2Float(%struct.cmsCIELab*, i16*) local_unnamed_addr #1

declare void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ*, i16*) local_unnamed_addr #1

declare zeroext i16 @_cmsFloat2Half(float) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackLabFloatFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #5 {
  %5 = bitcast i8* %2 to float*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %1, align 4
  %16 = fmul float %15, 1.000000e+02
  store float %16, float* %5, align 4
  %17 = getelementptr inbounds float, float* %1, i64 1
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = fmul double %19, 2.550000e+02
  %21 = fadd double %20, -1.280000e+02
  %22 = fptrunc double %21 to float
  %23 = zext i32 %14 to i64
  %24 = getelementptr inbounds float, float* %5, i64 %23
  store float %22, float* %24, align 4
  %25 = getelementptr inbounds float, float* %1, i64 2
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = fmul double %27, 2.550000e+02
  %29 = fadd double %28, -1.280000e+02
  %30 = fptrunc double %29 to float
  %31 = shl i32 %14, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds float, float* %5, i64 %32
  store float %30, float* %33, align 4
  br label %58

34:                                               ; preds = %4
  %35 = load float, float* %1, align 4
  %36 = fmul float %35, 1.000000e+02
  store float %36, float* %5, align 4
  %37 = getelementptr inbounds float, float* %1, i64 1
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  %40 = fmul double %39, 2.550000e+02
  %41 = fadd double %40, -1.280000e+02
  %42 = fptrunc double %41 to float
  %43 = getelementptr inbounds i8, i8* %2, i64 4
  %44 = bitcast i8* %43 to float*
  store float %42, float* %44, align 4
  %45 = getelementptr inbounds float, float* %1, i64 2
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = fmul double %47, 2.550000e+02
  %49 = fadd double %48, -1.280000e+02
  %50 = fptrunc double %49 to float
  %51 = getelementptr inbounds i8, i8* %2, i64 8
  %52 = bitcast i8* %51 to float*
  store float %50, float* %52, align 4
  %53 = load i32, i32* %6, align 4
  %54 = lshr i32 %53, 5
  %55 = and i32 %54, 28
  %56 = add nuw nsw i32 %55, 12
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %34, %10
  %59 = phi i64 [ %57, %34 ], [ 4, %10 ]
  %60 = getelementptr inbounds i8, i8* %2, i64 %59
  ret i8* %60
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackXYZFloatFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #5 {
  %5 = bitcast i8* %2 to float*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %28, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %1, align 4
  %16 = fmul float %15, 0x3FFFFFE000000000
  store float %16, float* %5, align 4
  %17 = getelementptr inbounds float, float* %1, i64 1
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, 0x3FFFFFE000000000
  %20 = zext i32 %14 to i64
  %21 = getelementptr inbounds float, float* %5, i64 %20
  store float %19, float* %21, align 4
  %22 = getelementptr inbounds float, float* %1, i64 2
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, 0x3FFFFFE000000000
  %25 = shl i32 %14, 1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %5, i64 %26
  store float %24, float* %27, align 4
  br label %46

28:                                               ; preds = %4
  %29 = load float, float* %1, align 4
  %30 = fmul float %29, 0x3FFFFFE000000000
  store float %30, float* %5, align 4
  %31 = getelementptr inbounds float, float* %1, i64 1
  %32 = load float, float* %31, align 4
  %33 = fmul float %32, 0x3FFFFFE000000000
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to float*
  store float %33, float* %35, align 4
  %36 = getelementptr inbounds float, float* %1, i64 2
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, 0x3FFFFFE000000000
  %39 = getelementptr inbounds i8, i8* %2, i64 8
  %40 = bitcast i8* %39 to float*
  store float %38, float* %40, align 4
  %41 = load i32, i32* %6, align 4
  %42 = lshr i32 %41, 5
  %43 = and i32 %42, 28
  %44 = add nuw nsw i32 %43, 12
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %28, %10
  %47 = phi i64 [ %45, %28 ], [ 4, %10 ]
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  ret i8* %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackLabDoubleFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #5 {
  %5 = bitcast i8* %2 to double*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %33, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %1, align 4
  %16 = fpext float %15 to double
  %17 = fmul double %16, 1.000000e+02
  store double %17, double* %5, align 8
  %18 = getelementptr inbounds float, float* %1, i64 1
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = fmul double %20, 2.550000e+02
  %22 = fadd double %21, -1.280000e+02
  %23 = zext i32 %14 to i64
  %24 = getelementptr inbounds double, double* %5, i64 %23
  store double %22, double* %24, align 8
  %25 = getelementptr inbounds float, float* %1, i64 2
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = fmul double %27, 2.550000e+02
  %29 = fadd double %28, -1.280000e+02
  %30 = shl i32 %14, 1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %5, i64 %31
  store double %29, double* %32, align 8
  br label %56

33:                                               ; preds = %4
  %34 = load float, float* %1, align 4
  %35 = fpext float %34 to double
  %36 = fmul double %35, 1.000000e+02
  store double %36, double* %5, align 8
  %37 = getelementptr inbounds float, float* %1, i64 1
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  %40 = fmul double %39, 2.550000e+02
  %41 = fadd double %40, -1.280000e+02
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to double*
  store double %41, double* %43, align 8
  %44 = getelementptr inbounds float, float* %1, i64 2
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = fmul double %46, 2.550000e+02
  %48 = fadd double %47, -1.280000e+02
  %49 = getelementptr inbounds i8, i8* %2, i64 16
  %50 = bitcast i8* %49 to double*
  store double %48, double* %50, align 8
  %51 = load i32, i32* %6, align 4
  %52 = lshr i32 %51, 4
  %53 = and i32 %52, 56
  %54 = add nuw nsw i32 %53, 24
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %33, %10
  %57 = phi i64 [ %55, %33 ], [ 8, %10 ]
  %58 = getelementptr inbounds i8, i8* %2, i64 %57
  ret i8* %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i8* @PackXYZDoubleFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #5 {
  %5 = bitcast i8* %2 to double*
  %6 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 4096
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = and i32 %7, 7
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 8, i32 %11
  %14 = udiv i32 %3, %13
  %15 = load float, float* %1, align 4
  %16 = fpext float %15 to double
  %17 = fmul double %16, 0x3FFFFFE000000000
  store double %17, double* %5, align 8
  %18 = getelementptr inbounds float, float* %1, i64 1
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = fmul double %20, 0x3FFFFFE000000000
  %22 = zext i32 %14 to i64
  %23 = getelementptr inbounds double, double* %5, i64 %22
  store double %21, double* %23, align 8
  %24 = getelementptr inbounds float, float* %1, i64 2
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = fmul double %26, 0x3FFFFFE000000000
  %28 = shl i32 %14, 1
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %5, i64 %29
  store double %27, double* %30, align 8
  br label %52

31:                                               ; preds = %4
  %32 = load float, float* %1, align 4
  %33 = fpext float %32 to double
  %34 = fmul double %33, 0x3FFFFFE000000000
  store double %34, double* %5, align 8
  %35 = getelementptr inbounds float, float* %1, i64 1
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = fmul double %37, 0x3FFFFFE000000000
  %39 = getelementptr inbounds i8, i8* %2, i64 8
  %40 = bitcast i8* %39 to double*
  store double %38, double* %40, align 8
  %41 = getelementptr inbounds float, float* %1, i64 2
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = fmul double %43, 0x3FFFFFE000000000
  %45 = getelementptr inbounds i8, i8* %2, i64 16
  %46 = bitcast i8* %45 to double*
  store double %44, double* %46, align 8
  %47 = load i32, i32* %6, align 4
  %48 = lshr i32 %47, 4
  %49 = and i32 %48, 56
  %50 = add nuw nsw i32 %49, 24
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %31, %10
  %53 = phi i64 [ %51, %31 ], [ 8, %10 ]
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  ret i8* %54
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackFloatsFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackDoublesFromFloat, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi double [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = bitcast i8* %2 to float*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %65, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %62, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %63, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %1, i64 %48
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = fmul double %26, %51
  %53 = fsub double %26, %52
  %54 = select i1 %37, double %52, double %53
  %55 = fptrunc double %54 to float
  %56 = add nuw nsw i64 %42, %39
  %57 = trunc i64 %56 to i32
  %58 = mul i32 %31, %57
  %59 = zext i32 %58 to i64
  %60 = select i1 %38, i64 %56, i64 %59
  %61 = getelementptr inbounds float, float* %27, i64 %60
  store float %55, float* %61, align 4
  %62 = add nuw nsw i64 %42, 1
  %63 = add nuw nsw i32 %43, 1
  %64 = icmp eq i64 %62, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %41, %25
  %66 = phi float [ 0.000000e+00, %25 ], [ %55, %41 ]
  %67 = icmp eq i32 %13, 0
  %68 = icmp ne i32 %15, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %2, i64 4
  %72 = add nsw i32 %8, -1
  %73 = zext i32 %72 to i64
  %74 = shl nuw nsw i64 %73, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %2, i64 %74, i1 false)
  store float %66, float* %27, align 4
  br label %75

75:                                               ; preds = %70, %65
  %76 = load i32, i32* %5, align 4
  %77 = and i32 %76, 4096
  %78 = icmp eq i32 %77, 0
  %79 = add nuw nsw i32 %8, %13
  %80 = shl nuw nsw i32 %79, 2
  %81 = select i1 %78, i32 %80, i32 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %2, i64 %82
  ret i8* %83
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackDoublesFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x double], [25 x double]* @switch.table.PackDoublesFromFloat, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi double [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = bitcast i8* %2 to double*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %64, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %61, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %62, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %1, i64 %48
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = fmul double %26, %51
  %53 = fsub double %26, %52
  %54 = select i1 %37, double %52, double %53
  %55 = add nuw nsw i64 %42, %39
  %56 = trunc i64 %55 to i32
  %57 = mul i32 %31, %56
  %58 = zext i32 %57 to i64
  %59 = select i1 %38, i64 %55, i64 %58
  %60 = getelementptr inbounds double, double* %27, i64 %59
  store double %54, double* %60, align 8
  %61 = add nuw nsw i64 %42, 1
  %62 = add nuw nsw i32 %43, 1
  %63 = icmp eq i64 %61, %40
  br i1 %63, label %64, label %41

64:                                               ; preds = %41, %25
  %65 = phi double [ 0.000000e+00, %25 ], [ %54, %41 ]
  %66 = icmp eq i32 %13, 0
  %67 = icmp ne i32 %15, 0
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  %71 = add nsw i32 %8, -1
  %72 = zext i32 %71 to i64
  %73 = shl nuw nsw i64 %72, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %2, i64 %73, i1 false)
  store double %65, double* %27, align 8
  br label %74

74:                                               ; preds = %69, %64
  %75 = load i32, i32* %5, align 4
  %76 = and i32 %75, 4096
  %77 = icmp eq i32 %76, 0
  %78 = add nuw nsw i32 %8, %13
  %79 = shl nuw nsw i32 %78, 3
  %80 = select i1 %77, i32 %79, i32 8
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  ret i8* %82
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @PackHalfFromFloat(%struct._cmstransform_struct* nocapture readonly, float* nocapture readonly, i8*, i32) #0 {
  %5 = getelementptr inbounds %struct._cmstransform_struct, %struct._cmstransform_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 3
  %8 = and i32 %7, 15
  %9 = lshr i32 %6, 10
  %10 = and i32 %9, 1
  %11 = and i32 %6, 8192
  %12 = lshr i32 %6, 7
  %13 = and i32 %12, 7
  %14 = lshr i32 %6, 14
  %15 = and i32 %14, 1
  %16 = and i32 %6, 4096
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 31
  %19 = add nsw i32 %18, -5
  %20 = icmp ult i32 %19, 25
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds [25 x float], [25 x float]* @switch.table.PackHalfFromFloat, i64 0, i64 %22
  %24 = load float, float* %23, align 4
  br label %25

25:                                               ; preds = %4, %21
  %26 = phi float [ %24, %21 ], [ 1.000000e+00, %4 ]
  %27 = bitcast i8* %2 to i16*
  %28 = and i32 %6, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 8, i32 %28
  %31 = udiv i32 %3, %30
  %32 = icmp eq i32 %8, 0
  br i1 %32, label %64, label %33

33:                                               ; preds = %25
  %34 = icmp eq i32 %10, %15
  %35 = select i1 %34, i32 0, i32 %13
  %36 = icmp eq i32 %10, 0
  %37 = icmp eq i32 %11, 0
  %38 = icmp eq i32 %16, 0
  %39 = zext i32 %35 to i64
  %40 = zext i32 %8 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %61, %41 ]
  %43 = phi i32 [ 0, %33 ], [ %62, %41 ]
  %44 = xor i32 %43, -1
  %45 = add nsw i32 %8, %44
  %46 = trunc i64 %42 to i32
  %47 = select i1 %36, i32 %46, i32 %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %1, i64 %48
  %50 = load float, float* %49, align 4
  %51 = fmul float %26, %50
  %52 = fsub float %26, %51
  %53 = select i1 %37, float %51, float %52
  %54 = tail call zeroext i16 @_cmsFloat2Half(float %53) #7
  %55 = add nuw nsw i64 %42, %39
  %56 = trunc i64 %55 to i32
  %57 = mul i32 %31, %56
  %58 = zext i32 %57 to i64
  %59 = select i1 %38, i64 %55, i64 %58
  %60 = getelementptr inbounds i16, i16* %27, i64 %59
  store i16 %54, i16* %60, align 2
  %61 = add nuw nsw i64 %42, 1
  %62 = add nuw nsw i32 %43, 1
  %63 = icmp eq i64 %61, %40
  br i1 %63, label %64, label %41

64:                                               ; preds = %41, %25
  %65 = phi float [ 0.000000e+00, %25 ], [ %53, %41 ]
  %66 = icmp eq i32 %13, 0
  %67 = icmp ne i32 %15, 0
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = getelementptr inbounds i8, i8* %2, i64 2
  %71 = add nsw i32 %8, -1
  %72 = zext i32 %71 to i64
  %73 = shl nuw nsw i64 %72, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %70, i8* align 2 %2, i64 %73, i1 false)
  %74 = tail call zeroext i16 @_cmsFloat2Half(float %65) #7
  store i16 %74, i16* %27, align 2
  br label %75

75:                                               ; preds = %69, %64
  %76 = load i32, i32* %5, align 4
  %77 = and i32 %76, 4096
  %78 = icmp eq i32 %77, 0
  %79 = add nuw nsw i32 %8, %13
  %80 = shl nuw nsw i32 %79, 1
  %81 = select i1 %78, i32 %80, i32 2
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %2, i64 %82
  ret i8* %83
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
