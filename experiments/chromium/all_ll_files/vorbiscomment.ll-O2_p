; ModuleID = '../../third_party/ffmpeg/libavformat/vorbiscomment.c'
source_filename = "../../third_party/ffmpeg/libavformat/vorbiscomment.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVMetadataConv = type { i8*, i8* }
%struct.AVDictionary = type opaque
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVRational = type { i32, i32 }
%struct.AVDictionaryEntry = type { i8*, i8* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque

@.str = private unnamed_addr constant [12 x i8] c"ALBUMARTIST\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"album_artist\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"TRACKNUMBER\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"track\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"DISCNUMBER\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"disc\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"DESCRIPTION\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"comment\00", align 1
@ff_vorbiscomment_metadata_conv = hidden local_unnamed_addr constant [5 x %struct.AVMetadataConv] [%struct.AVMetadataConv { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0) }, %struct.AVMetadataConv { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0) }, %struct.AVMetadataConv { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }, %struct.AVMetadataConv { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0) }, %struct.AVMetadataConv zeroinitializer], align 16
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"%03d\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"%02d:%02d:%02d.%03d\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"CHAPTER\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"NAME\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @ff_vorbiscomment_length(%struct.AVDictionary*, i8* nocapture readonly, %struct.AVChapter** readonly, i32) local_unnamed_addr #0 {
  %5 = tail call i64 @strlen(i8* %1) #7
  %6 = add i64 %5, 8
  %7 = icmp ne %struct.AVChapter** %2, null
  %8 = icmp ne i32 %3, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %48

10:                                               ; preds = %4
  %11 = zext i32 %3 to i64
  br label %12

12:                                               ; preds = %44, %10
  %13 = phi i64 [ 0, %10 ], [ %46, %44 ]
  %14 = phi i64 [ %6, %10 ], [ %45, %44 ]
  %15 = add nsw i64 %14, 27
  %16 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %2, i64 %13
  %17 = load %struct.AVChapter*, %struct.AVChapter** %16, align 8
  %18 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %17, i64 0, i32 4
  %19 = load %struct.AVDictionary*, %struct.AVDictionary** %18, align 8
  %20 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* %19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* null, i32 2) #8
  %21 = icmp eq %struct.AVDictionaryEntry* %20, null
  br i1 %21, label %44, label %22

22:                                               ; preds = %12, %31
  %23 = phi %struct.AVDictionaryEntry* [ %42, %31 ], [ %20, %12 ]
  %24 = phi i64 [ %38, %31 ], [ %15, %12 ]
  %25 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %23, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %22
  %30 = tail call i64 @strlen(i8* %26) #7
  br label %31

31:                                               ; preds = %22, %29
  %32 = phi i64 [ %30, %29 ], [ 4, %22 ]
  %33 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %23, i64 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i64 @strlen(i8* %34) #7
  %36 = add i64 %24, 15
  %37 = add i64 %36, %32
  %38 = add i64 %37, %35
  %39 = load %struct.AVChapter*, %struct.AVChapter** %16, align 8
  %40 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %39, i64 0, i32 4
  %41 = load %struct.AVDictionary*, %struct.AVDictionary** %40, align 8
  %42 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* %41, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* nonnull %23, i32 2) #8
  %43 = icmp eq %struct.AVDictionaryEntry* %42, null
  br i1 %43, label %44, label %22

44:                                               ; preds = %31, %12
  %45 = phi i64 [ %15, %12 ], [ %38, %31 ]
  %46 = add nuw nsw i64 %13, 1
  %47 = icmp eq i64 %46, %11
  br i1 %47, label %48, label %12

48:                                               ; preds = %44, %4
  %49 = phi i64 [ %6, %4 ], [ %45, %44 ]
  %50 = icmp eq %struct.AVDictionary* %0, null
  br i1 %50, label %68, label %51

51:                                               ; preds = %48
  %52 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* nonnull %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* null, i32 2) #8
  %53 = icmp eq %struct.AVDictionaryEntry* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %51, %54
  %55 = phi %struct.AVDictionaryEntry* [ %66, %54 ], [ %52, %51 ]
  %56 = phi i64 [ %65, %54 ], [ %49, %51 ]
  %57 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %55, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = tail call i64 @strlen(i8* %58) #7
  %60 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %55, i64 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = tail call i64 @strlen(i8* %61) #7
  %63 = add i64 %56, 5
  %64 = add i64 %63, %59
  %65 = add i64 %64, %62
  %66 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* nonnull %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* nonnull %55, i32 2) #8
  %67 = icmp eq %struct.AVDictionaryEntry* %66, null
  br i1 %67, label %68, label %54

68:                                               ; preds = %54, %51, %48
  %69 = phi i64 [ %49, %48 ], [ %49, %51 ], [ %65, %54 ]
  ret i64 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

declare %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary*, i8*, %struct.AVDictionaryEntry*, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_vorbiscomment_write(%struct.AVIOContext*, %struct.AVDictionary*, i8*, %struct.AVChapter** readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [13 x i8], align 1
  %7 = alloca i32, align 4
  %8 = tail call i64 @strlen(i8* %2) #7
  %9 = trunc i64 %8 to i32
  tail call void @avio_wl32(%struct.AVIOContext* %0, i32 %9) #8
  %10 = tail call i64 @strlen(i8* %2) #7
  %11 = trunc i64 %10 to i32
  tail call void @avio_write(%struct.AVIOContext* %0, i8* %2, i32 %11) #8
  %12 = icmp ne %struct.AVChapter** %3, null
  %13 = icmp ne i32 %4, 0
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %29

15:                                               ; preds = %5
  %16 = zext i32 %4 to i64
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %27, %17 ]
  %19 = phi i32 [ 0, %15 ], [ %26, %17 ]
  %20 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %3, i64 %18
  %21 = load %struct.AVChapter*, %struct.AVChapter** %20, align 8
  %22 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %21, i64 0, i32 4
  %23 = load %struct.AVDictionary*, %struct.AVDictionary** %22, align 8
  %24 = tail call i32 @av_dict_count(%struct.AVDictionary* %23) #8
  %25 = add i32 %19, 1
  %26 = add i32 %25, %24
  %27 = add nuw nsw i64 %18, 1
  %28 = icmp eq i64 %27, %16
  br i1 %28, label %29, label %17

29:                                               ; preds = %17, %5
  %30 = phi i32 [ 0, %5 ], [ %26, %17 ]
  %31 = icmp eq %struct.AVDictionary* %1, null
  br i1 %31, label %131, label %32

32:                                               ; preds = %29
  %33 = tail call i32 @av_dict_count(%struct.AVDictionary* nonnull %1) #8
  %34 = add nsw i32 %33, %30
  tail call void @avio_wl32(%struct.AVIOContext* %0, i32 %34) #8
  %35 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* nonnull %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* null, i32 2) #8
  %36 = icmp eq %struct.AVDictionaryEntry* %35, null
  br i1 %36, label %37, label %43

37:                                               ; preds = %54, %32
  %38 = icmp eq i32 %4, 0
  br i1 %38, label %132, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds [13 x i8], [13 x i8]* %6, i64 0, i64 0
  %41 = bitcast i32* %7 to i8*
  %42 = zext i32 %4 to i64
  br label %62

43:                                               ; preds = %32, %54
  %44 = phi %struct.AVDictionaryEntry* [ %60, %54 ], [ %35, %32 ]
  %45 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %44, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = tail call i64 @strlen(i8* %46) #7
  %48 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %44, i64 0, i32 1
  %49 = load i8*, i8** %48, align 8
  %50 = tail call i64 @strlen(i8* %49) #7
  %51 = add nsw i64 %47, 1
  %52 = add nsw i64 %51, %50
  %53 = icmp sgt i64 %52, 4294967295
  br i1 %53, label %132, label %54

54:                                               ; preds = %43
  %55 = trunc i64 %52 to i32
  tail call void @avio_wl32(%struct.AVIOContext* %0, i32 %55) #8
  %56 = load i8*, i8** %45, align 8
  %57 = trunc i64 %47 to i32
  tail call void @avio_write(%struct.AVIOContext* %0, i8* %56, i32 %57) #8
  tail call void @avio_w8(%struct.AVIOContext* %0, i32 61) #8
  %58 = load i8*, i8** %48, align 8
  %59 = trunc i64 %50 to i32
  tail call void @avio_write(%struct.AVIOContext* %0, i8* %58, i32 %59) #8
  %60 = tail call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* nonnull %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* nonnull %44, i32 2) #8
  %61 = icmp eq %struct.AVDictionaryEntry* %60, null
  br i1 %61, label %37, label %43

62:                                               ; preds = %127, %39
  %63 = phi i64 [ 0, %39 ], [ %128, %127 ]
  %64 = getelementptr inbounds %struct.AVChapter*, %struct.AVChapter** %3, i64 %63
  %65 = load %struct.AVChapter*, %struct.AVChapter** %64, align 8
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %40) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %40, i8 -86, i64 13, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #8
  %66 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %65, i64 0, i32 2
  store i32 -1431655766, i32* %7, align 4
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %65, i64 0, i32 1
  %69 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %68, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %65, i64 0, i32 1, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = call i64 @av_rescale(i64 %67, i64 %71, i64 %74) #9
  %76 = trunc i64 %75 to i32
  %77 = sdiv i32 %76, 3600
  %78 = sdiv i32 %76, 60
  %79 = srem i32 %78, 60
  %80 = bitcast %struct.AVRational* %68 to i64*
  %81 = load i64, i64* %80, align 4
  %82 = call i64 @av_rescale_q(i64 %67, i64 %81, i64 4294967296001) #9
  %83 = srem i64 %82, 1000
  %84 = trunc i64 %83 to i32
  %85 = srem i32 %76, 60
  %86 = trunc i64 %63 to i32
  %87 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %41, i64 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i32 %86) #8
  %88 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %40, i64 13, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0), i32 %77, i32 %79, i32 %85, i32 %84) #8
  call void @avio_wl32(%struct.AVIOContext* %0, i32 23) #8
  call void @avio_write(%struct.AVIOContext* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i32 7) #8
  call void @avio_write(%struct.AVIOContext* %0, i8* nonnull %41, i32 3) #8
  call void @avio_w8(%struct.AVIOContext* %0, i32 61) #8
  call void @avio_write(%struct.AVIOContext* %0, i8* nonnull %40, i32 12) #8
  %89 = load %struct.AVChapter*, %struct.AVChapter** %64, align 8
  %90 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %89, i64 0, i32 4
  %91 = load %struct.AVDictionary*, %struct.AVDictionary** %90, align 8
  %92 = call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* %91, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* null, i32 2) #8
  %93 = icmp eq %struct.AVDictionaryEntry* %92, null
  br i1 %93, label %127, label %94

94:                                               ; preds = %62, %119
  %95 = phi %struct.AVDictionaryEntry* [ %125, %119 ], [ %92, %62 ]
  %96 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %95, i64 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = call i32 @strcmp(i8* %97, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #7
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %102, label %100

100:                                              ; preds = %94
  %101 = call i64 @strlen(i8* %97) #7
  br label %102

102:                                              ; preds = %94, %100
  %103 = phi i64 [ %101, %100 ], [ 4, %94 ]
  %104 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %95, i64 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i64 @strlen(i8* %105) #7
  %107 = add i64 %106, %103
  %108 = add i64 %107, 1
  %109 = icmp sgt i64 %108, 4294967285
  br i1 %109, label %130, label %110

110:                                              ; preds = %102
  %111 = trunc i64 %107 to i32
  %112 = add i32 %111, 11
  call void @avio_wl32(%struct.AVIOContext* %0, i32 %112) #8
  call void @avio_write(%struct.AVIOContext* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i32 7) #8
  call void @avio_write(%struct.AVIOContext* %0, i8* nonnull %41, i32 3) #8
  %113 = load i8*, i8** %96, align 8
  %114 = call i32 @strcmp(i8* %113, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #7
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %110
  call void @avio_write(%struct.AVIOContext* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i32 4) #8
  br label %119

117:                                              ; preds = %110
  %118 = trunc i64 %103 to i32
  call void @avio_write(%struct.AVIOContext* %0, i8* %113, i32 %118) #8
  br label %119

119:                                              ; preds = %116, %117
  call void @avio_w8(%struct.AVIOContext* %0, i32 61) #8
  %120 = load i8*, i8** %104, align 8
  %121 = trunc i64 %106 to i32
  call void @avio_write(%struct.AVIOContext* %0, i8* %120, i32 %121) #8
  %122 = load %struct.AVChapter*, %struct.AVChapter** %64, align 8
  %123 = getelementptr inbounds %struct.AVChapter, %struct.AVChapter* %122, i64 0, i32 4
  %124 = load %struct.AVDictionary*, %struct.AVDictionary** %123, align 8
  %125 = call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* %124, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %struct.AVDictionaryEntry* nonnull %95, i32 2) #8
  %126 = icmp eq %struct.AVDictionaryEntry* %125, null
  br i1 %126, label %127, label %94

127:                                              ; preds = %119, %62
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #8
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %40) #8
  %128 = add nuw nsw i64 %63, 1
  %129 = icmp eq i64 %128, %42
  br i1 %129, label %132, label %62

130:                                              ; preds = %102
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #8
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %40) #8
  br label %132

131:                                              ; preds = %29
  tail call void @avio_wl32(%struct.AVIOContext* %0, i32 0) #8
  br label %132

132:                                              ; preds = %43, %127, %37, %130, %131
  %133 = phi i32 [ 0, %131 ], [ -22, %130 ], [ 0, %37 ], [ 0, %127 ], [ -22, %43 ]
  ret i32 %133
}

declare void @avio_wl32(%struct.AVIOContext*, i32) local_unnamed_addr #3

declare void @avio_write(%struct.AVIOContext*, i8*, i32) local_unnamed_addr #3

declare i32 @av_dict_count(%struct.AVDictionary*) local_unnamed_addr #3

declare void @avio_w8(%struct.AVIOContext*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i64 @av_rescale(i64, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i64 @av_rescale_q(i64, i64, i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
