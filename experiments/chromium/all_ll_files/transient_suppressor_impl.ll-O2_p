; ModuleID = '../../third_party/webrtc/modules/audio_processing/transient/transient_suppressor_impl.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/transient/transient_suppressor_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.webrtc::TransientSuppressorImpl" = type <{ %"class.webrtc::TransientSuppressor", %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", float*, %"class.std::__1::unique_ptr.25", float, i32, i32, i8, i8, i8, i8, i32, i32, i8, [7 x i8] }>
%"class.webrtc::TransientSuppressor" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.webrtc::TransientDetector"* }
%"class.webrtc::TransientDetector" = type <{ i64, %"class.std::__1::unique_ptr.0", i64, [8 x %"class.std::__1::unique_ptr.11"], %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.25", [8 x float], [8 x float], %"class.std::__1::deque", i32, float, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.webrtc::WPDTree"* }
%"class.webrtc::WPDTree" = type { i64, i32, i32, %"class.std::__1::unique_ptr.3" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.6"* }
%"class.std::__1::unique_ptr.6" = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.webrtc::MovingMoments"* }
%"class.webrtc::MovingMoments" = type { i64, %"class.std::__1::queue", float, float }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.17" }
%"struct.std::__1::__split_buffer" = type { float**, float**, float**, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { float** }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i64 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i64* }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { float* }
%"class.rtc::DiagnosticLogMessage" = type { i8*, i32, i32, i32, i32, i8*, i8, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@_ZTVN6webrtc23TransientSuppressorImplE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::TransientSuppressorImpl"*)* @_ZN6webrtc23TransientSuppressorImplD2Ev to i8*), i8* bitcast (void (%"class.webrtc::TransientSuppressorImpl"*)* @_ZN6webrtc23TransientSuppressorImplD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::TransientSuppressorImpl"*, i32, i32, i32)* @_ZN6webrtc23TransientSuppressorImpl10InitializeEiii to i8*), i8* bitcast (i32 (%"class.webrtc::TransientSuppressorImpl"*, float*, i64, i32, float*, i64, float*, i64, float, i1)* @_ZN6webrtc23TransientSuppressorImpl8SuppressEPfmiPKfmS3_mfb to i8*)] }, align 8
@_ZN6webrtcL13kBlocks80w128E = internal constant [128 x float] [float 0.000000e+00, float 0x3FA0C08E20000000, float 0x3FB0BE4280000000, float 0x3FB917A6C0000000, float 0x3FC0B51500000000, float 0x3FC4D9C240000000, float 0x3FC8F8B840000000, float 0x3FCD10D5C0000000, float 0x3FD0907DC0000000, float 0x3FD2940640000000, float 0x3FD49276E0000000, float 0x3FD68B43C0000000, float 0x3FD87DE2A0000000, float 0x3FDA69CAC0000000, float 0x3FDC4E7540000000, float 0x3FDE2B5D40000000, float 5.000000e-01, float 0x3FE0E5EE80000000, float 0x3FE1C73B40000000, float 0x3FE2A3A840000000, float 0x3FE37AF940000000, float 0x3FE44CF320000000, float 0x3FE5195C60000000, float 0x3FE5DFFD00000000, float 0x3FE6A09E60000000, float 0x3FE75B0BE0000000, float 0x3FE80F1260000000, float 0x3FE8BC8060000000, float 0x3FE9632680000000, float 0x3FEA02D700000000, float 0x3FEA9B6620000000, float 0x3FEB2CAA00000000, float 0x3FEBB67AE0000000, float 0x3FEC38B2E0000000, float 0x3FECB32E80000000, float 0x3FED25CBE0000000, float 0x3FED906BC0000000, float 0x3FEDF2F100000000, float 0x3FEE4D4060000000, float 0x3FEE9F4160000000, float 0x3FEEE8DD40000000, float 0x3FEF2A0000000000, float 0x3FEF6297C0000000, float 0x3FEF929500000000, float 0x3FEFB9EAA0000000, float 0x3FEFD88DA0000000, float 0x3FEFEE75E0000000, float 0x3FEFFB9D20000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0x3FEFFB9D20000000, float 0x3FEFEE75E0000000, float 0x3FEFD88DA0000000, float 0x3FEFB9EAA0000000, float 0x3FEF929500000000, float 0x3FEF6297C0000000, float 0x3FEF2A0000000000, float 0x3FEEE8DD40000000, float 0x3FEE9F4160000000, float 0x3FEE4D4060000000, float 0x3FEDF2F100000000, float 0x3FED906BC0000000, float 0x3FED25CBE0000000, float 0x3FECB32E80000000, float 0x3FEC38B2E0000000, float 0x3FEBB67AE0000000, float 0x3FEB2CAA00000000, float 0x3FEA9B6620000000, float 0x3FEA02D700000000, float 0x3FE9632680000000, float 0x3FE8BC8060000000, float 0x3FE80F1260000000, float 0x3FE75B0BE0000000, float 0x3FE6A09E60000000, float 0x3FE5DFFD00000000, float 0x3FE5195C60000000, float 0x3FE44CF320000000, float 0x3FE37AF940000000, float 0x3FE2A3A840000000, float 0x3FE1C73B40000000, float 0x3FE0E5EE80000000, float 5.000000e-01, float 0x3FDE2B5D40000000, float 0x3FDC4E7540000000, float 0x3FDA69CAC0000000, float 0x3FD87DE2A0000000, float 0x3FD68B43C0000000, float 0x3FD49276E0000000, float 0x3FD2940640000000, float 0x3FD0907DC0000000, float 0x3FCD10D5C0000000, float 0x3FC8F8B840000000, float 0x3FC4D9C240000000, float 0x3FC0B51500000000, float 0x3FB917A6C0000000, float 0x3FB0BE4280000000, float 0x3FA0C08E20000000], align 16
@_ZN6webrtcL14kBlocks160w256E = internal constant [256 x float] [float 0.000000e+00, float 0x3F90C12120000000, float 0x3FA0C08E20000000, float 0x3FA91F65C0000000, float 0x3FB0BE4280000000, float 0x3FB4EBAC00000000, float 0x3FB917A6C0000000, float 0x3FBD41E900000000, float 0x3FC0B51500000000, float 0x3FC2C81060000000, float 0x3FC4D9C240000000, float 0x3FC6EA0640000000, float 0x3FC8F8B840000000, float 0x3FCB05B400000000, float 0x3FCD10D5C0000000, float 0x3FCF19F980000000, float 0x3FD0907DC0000000, float 0x3FD192DC20000000, float 0x3FD2940640000000, float 0x3FD393EA40000000, float 0x3FD49276E0000000, float 0x3FD58F9A80000000, float 0x3FD68B43C0000000, float 0x3FD78561A0000000, float 0x3FD87DE2A0000000, float 0x3FD974B600000000, float 0x3FDA69CAC0000000, float 0x3FDB5D1000000000, float 0x3FDC4E7540000000, float 0x3FDD3DE9C0000000, float 0x3FDE2B5D40000000, float 0x3FDF16BF60000000, float 5.000000e-01, float 0x3FE07387A0000000, float 0x3FE0E5EE80000000, float 0x3FE1572D00000000, float 0x3FE1C73B40000000, float 0x3FE2361180000000, float 0x3FE2A3A840000000, float 0x3FE30FF800000000, float 0x3FE37AF940000000, float 0x3FE3E4A4C0000000, float 0x3FE44CF320000000, float 0x3FE4B3DD60000000, float 0x3FE5195C60000000, float 0x3FE57D6940000000, float 0x3FE5DFFD00000000, float 0x3FE64110E0000000, float 0x3FE6A09E60000000, float 0x3FE6FE9EE0000000, float 0x3FE75B0BE0000000, float 0x3FE7B5DF20000000, float 0x3FE80F1260000000, float 0x3FE8669F80000000, float 0x3FE8BC8060000000, float 0x3FE910AF60000000, float 0x3FE9632680000000, float 0x3FE9B3E040000000, float 0x3FEA02D700000000, float 0x3FEA500580000000, float 0x3FEA9B6620000000, float 0x3FEAE4F400000000, float 0x3FEB2CAA00000000, float 0x3FEB728340000000, float 0x3FEBB67AE0000000, float 0x3FEBF88C40000000, float 0x3FEC38B2E0000000, float 0x3FEC76EA60000000, float 0x3FECB32E80000000, float 0x3FECED7B00000000, float 0x3FED25CBE0000000, float 0x3FED5C1D60000000, float 0x3FED906BC0000000, float 0x3FEDC2B380000000, float 0x3FEDF2F100000000, float 0x3FEE212100000000, float 0x3FEE4D4060000000, float 0x3FEE774C20000000, float 0x3FEE9F4160000000, float 0x3FEEC51D40000000, float 0x3FEEE8DD40000000, float 0x3FEF0A7F00000000, float 0x3FEF2A0000000000, float 0x3FEF475E60000000, float 0x3FEF6297C0000000, float 0x3FEF7BAAA0000000, float 0x3FEF929500000000, float 0x3FEFA75580000000, float 0x3FEFB9EAA0000000, float 0x3FEFCA5300000000, float 0x3FEFD88DA0000000, float 0x3FEFE49980000000, float 0x3FEFEE75E0000000, float 0x3FEFF621E0000000, float 0x3FEFFB9D20000000, float 0x3FEFFEE740000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0x3FEFFEE740000000, float 0x3FEFFB9D20000000, float 0x3FEFF621E0000000, float 0x3FEFEE75E0000000, float 0x3FEFE49980000000, float 0x3FEFD88DA0000000, float 0x3FEFCA5300000000, float 0x3FEFB9EAA0000000, float 0x3FEFA75580000000, float 0x3FEF929500000000, float 0x3FEF7BAAA0000000, float 0x3FEF6297C0000000, float 0x3FEF475E60000000, float 0x3FEF2A0000000000, float 0x3FEF0A7F00000000, float 0x3FEEE8DD40000000, float 0x3FEEC51D40000000, float 0x3FEE9F4160000000, float 0x3FEE774C20000000, float 0x3FEE4D4060000000, float 0x3FEE212100000000, float 0x3FEDF2F100000000, float 0x3FEDC2B380000000, float 0x3FED906BC0000000, float 0x3FED5C1D60000000, float 0x3FED25CBE0000000, float 0x3FECED7B00000000, float 0x3FECB32E80000000, float 0x3FEC76EA60000000, float 0x3FEC38B2E0000000, float 0x3FEBF88C40000000, float 0x3FEBB67AE0000000, float 0x3FEB728340000000, float 0x3FEB2CAA00000000, float 0x3FEAE4F400000000, float 0x3FEA9B6620000000, float 0x3FEA500580000000, float 0x3FEA02D700000000, float 0x3FE9B3E040000000, float 0x3FE9632680000000, float 0x3FE910AF60000000, float 0x3FE8BC8060000000, float 0x3FE8669F80000000, float 0x3FE80F1260000000, float 0x3FE7B5DF20000000, float 0x3FE75B0BE0000000, float 0x3FE6FE9EE0000000, float 0x3FE6A09E60000000, float 0x3FE64110E0000000, float 0x3FE5DFFD00000000, float 0x3FE57D6940000000, float 0x3FE5195C60000000, float 0x3FE4B3DD60000000, float 0x3FE44CF320000000, float 0x3FE3E4A4C0000000, float 0x3FE37AF940000000, float 0x3FE30FF800000000, float 0x3FE2A3A840000000, float 0x3FE2361180000000, float 0x3FE1C73B40000000, float 0x3FE1572D00000000, float 0x3FE0E5EE80000000, float 0x3FE07387A0000000, float 5.000000e-01, float 0x3FDF16BF60000000, float 0x3FDE2B5D40000000, float 0x3FDD3DE9C0000000, float 0x3FDC4E7540000000, float 0x3FDB5D1000000000, float 0x3FDA69CAC0000000, float 0x3FD974B600000000, float 0x3FD87DE2A0000000, float 0x3FD78561A0000000, float 0x3FD68B43C0000000, float 0x3FD58F9A80000000, float 0x3FD49276E0000000, float 0x3FD393EA40000000, float 0x3FD2940640000000, float 0x3FD192DC20000000, float 0x3FD0907DC0000000, float 0x3FCF19F980000000, float 0x3FCD10D5C0000000, float 0x3FCB05B400000000, float 0x3FC8F8B840000000, float 0x3FC6EA0640000000, float 0x3FC4D9C240000000, float 0x3FC2C81060000000, float 0x3FC0B51500000000, float 0x3FBD41E900000000, float 0x3FB917A6C0000000, float 0x3FB4EBAC00000000, float 0x3FB0BE4280000000, float 0x3FA91F65C0000000, float 0x3FA0C08E20000000, float 0x3F90C12120000000], align 16
@_ZN6webrtcL14kBlocks320w512E = internal constant [512 x float] [float 0.000000e+00, float 0x3F80C14600000000, float 0x3F90C12120000000, float 0x3F99215620000000, float 0x3FA0C08E20000000, float 0x3FA4F02820000000, float 0x3FA91F65C0000000, float 0x3FAD4E35C0000000, float 0x3FB0BE4280000000, float 0x3FB2D52080000000, float 0x3FB4EBAC00000000, float 0x3FB701DBC0000000, float 0x3FB917A6C0000000, float 0x3FBB2D03A0000000, float 0x3FBD41E900000000, float 0x3FBF564E60000000, float 0x3FC0B51500000000, float 0x3FC1BEB9A0000000, float 0x3FC2C81060000000, float 0x3FC3D114E0000000, float 0x3FC4D9C240000000, float 0x3FC5E21440000000, float 0x3FC6EA0640000000, float 0x3FC7F193C0000000, float 0x3FC8F8B840000000, float 0x3FC9FF6F20000000, float 0x3FCB05B400000000, float 0x3FCC0B8260000000, float 0x3FCD10D5C0000000, float 0x3FCE15A9A0000000, float 0x3FCF19F980000000, float 0x3FD00EE080000000, float 0x3FD0907DC0000000, float 0x3FD111D260000000, float 0x3FD192DC20000000, float 0x3FD21398C0000000, float 0x3FD2940640000000, float 0x3FD3142220000000, float 0x3FD393EA40000000, float 0x3FD4135CA0000000, float 0x3FD49276E0000000, float 0x3FD51136E0000000, float 0x3FD58F9A80000000, float 0x3FD60D9F80000000, float 0x3FD68B43C0000000, float 0x3FD7088540000000, float 0x3FD78561A0000000, float 0x3FD801D6C0000000, float 0x3FD87DE2A0000000, float 0x3FD8F98320000000, float 0x3FD974B600000000, float 0x3FD9EF7940000000, float 0x3FDA69CAC0000000, float 0x3FDAE3A860000000, float 0x3FDB5D1000000000, float 0x3FDBD5FFC0000000, float 0x3FDC4E7540000000, float 0x3FDCC66EA0000000, float 0x3FDD3DE9C0000000, float 0x3FDDB4E4A0000000, float 0x3FDE2B5D40000000, float 0x3FDEA15180000000, float 0x3FDF16BF60000000, float 0x3FDF8BA4E0000000, float 5.000000e-01, float 0x3FE039E760000000, float 0x3FE07387A0000000, float 0x3FE0ACDFA0000000, float 0x3FE0E5EE80000000, float 0x3FE11EB360000000, float 0x3FE1572D00000000, float 0x3FE18F5AA0000000, float 0x3FE1C73B40000000, float 0x3FE1FECDE0000000, float 0x3FE2361180000000, float 0x3FE26D0540000000, float 0x3FE2A3A840000000, float 0x3FE2D9F980000000, float 0x3FE30FF800000000, float 0x3FE345A2E0000000, float 0x3FE37AF940000000, float 0x3FE3AFFA20000000, float 0x3FE3E4A4C0000000, float 0x3FE418F800000000, float 0x3FE44CF320000000, float 0x3FE4809540000000, float 0x3FE4B3DD60000000, float 0x3FE4E6CAC0000000, float 0x3FE5195C60000000, float 0x3FE54B9180000000, float 0x3FE57D6940000000, float 0x3FE5AEE2A0000000, float 0x3FE5DFFD00000000, float 0x3FE610B760000000, float 0x3FE64110E0000000, float 0x3FE67108E0000000, float 0x3FE6A09E60000000, float 0x3FE6CFD0A0000000, float 0x3FE6FE9EE0000000, float 0x3FE72D0840000000, float 0x3FE75B0BE0000000, float 0x3FE788A920000000, float 0x3FE7B5DF20000000, float 0x3FE7E2AD20000000, float 0x3FE80F1260000000, float 0x3FE83B0E00000000, float 0x3FE8669F80000000, float 0x3FE891C5E0000000, float 0x3FE8BC8060000000, float 0x3FE8E6CE80000000, float 0x3FE910AF60000000, float 0x3FE93A2240000000, float 0x3FE9632680000000, float 0x3FE98BBB60000000, float 0x3FE9B3E040000000, float 0x3FE9DB9460000000, float 0x3FEA02D700000000, float 0x3FEA29A7A0000000, float 0x3FEA500580000000, float 0x3FEA75EFE0000000, float 0x3FEA9B6620000000, float 0x3FEAC067C0000000, float 0x3FEAE4F400000000, float 0x3FEB090A60000000, float 0x3FEB2CAA00000000, float 0x3FEB4FD2A0000000, float 0x3FEB728340000000, float 0x3FEB94BBA0000000, float 0x3FEBB67AE0000000, float 0x3FEBD7C0A0000000, float 0x3FEBF88C40000000, float 0x3FEC18DD40000000, float 0x3FEC38B2E0000000, float 0x3FEC580CE0000000, float 0x3FEC76EA60000000, float 0x3FEC954B20000000, float 0x3FECB32E80000000, float 0x3FECD093E0000000, float 0x3FECED7B00000000, float 0x3FED09E320000000, float 0x3FED25CBE0000000, float 0x3FED4134E0000000, float 0x3FED5C1D60000000, float 0x3FED768540000000, float 0x3FED906BC0000000, float 0x3FEDA9D0C0000000, float 0x3FEDC2B380000000, float 0x3FEDDB13C0000000, float 0x3FEDF2F100000000, float 0x3FEE0A4AE0000000, float 0x3FEE212100000000, float 0x3FEE377300000000, float 0x3FEE4D4060000000, float 0x3FEE6288E0000000, float 0x3FEE774C20000000, float 0x3FEE8B89C0000000, float 0x3FEE9F4160000000, float 0x3FEEB272A0000000, float 0x3FEEC51D40000000, float 0x3FEED740E0000000, float 0x3FEEE8DD40000000, float 0x3FEEF9F220000000, float 0x3FEF0A7F00000000, float 0x3FEF1A83C0000000, float 0x3FEF2A0000000000, float 0x3FEF38F3A0000000, float 0x3FEF475E60000000, float 0x3FEF553FC0000000, float 0x3FEF6297C0000000, float 0x3FEF6F6620000000, float 0x3FEF7BAAA0000000, float 0x3FEF876500000000, float 0x3FEF929500000000, float 0x3FEF9D3AA0000000, float 0x3FEFA75580000000, float 0x3FEFB0E580000000, float 0x3FEFB9EAA0000000, float 0x3FEFC26460000000, float 0x3FEFCA5300000000, float 0x3FEFD1B620000000, float 0x3FEFD88DA0000000, float 0x3FEFDED980000000, float 0x3FEFE49980000000, float 0x3FEFE9CDA0000000, float 0x3FEFEE75E0000000, float 0x3FEFF291E0000000, float 0x3FEFF621E0000000, float 0x3FEFF925A0000000, float 0x3FEFFB9D20000000, float 0x3FEFFD8860000000, float 0x3FEFFEE740000000, float 0x3FEFFFB9C0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0x3FEFFFB9C0000000, float 0x3FEFFEE740000000, float 0x3FEFFD8860000000, float 0x3FEFFB9D20000000, float 0x3FEFF925A0000000, float 0x3FEFF621E0000000, float 0x3FEFF291E0000000, float 0x3FEFEE75E0000000, float 0x3FEFE9CDA0000000, float 0x3FEFE49980000000, float 0x3FEFDED980000000, float 0x3FEFD88DA0000000, float 0x3FEFD1B620000000, float 0x3FEFCA5300000000, float 0x3FEFC26460000000, float 0x3FEFB9EAA0000000, float 0x3FEFB0E580000000, float 0x3FEFA75580000000, float 0x3FEF9D3AA0000000, float 0x3FEF929500000000, float 0x3FEF876500000000, float 0x3FEF7BAAA0000000, float 0x3FEF6F6620000000, float 0x3FEF6297C0000000, float 0x3FEF553FC0000000, float 0x3FEF475E60000000, float 0x3FEF38F3A0000000, float 0x3FEF2A0000000000, float 0x3FEF1A83C0000000, float 0x3FEF0A7F00000000, float 0x3FEEF9F220000000, float 0x3FEEE8DD40000000, float 0x3FEED740E0000000, float 0x3FEEC51D40000000, float 0x3FEEB272A0000000, float 0x3FEE9F4160000000, float 0x3FEE8B89C0000000, float 0x3FEE774C20000000, float 0x3FEE6288E0000000, float 0x3FEE4D4060000000, float 0x3FEE377300000000, float 0x3FEE212100000000, float 0x3FEE0A4AE0000000, float 0x3FEDF2F100000000, float 0x3FEDDB13C0000000, float 0x3FEDC2B380000000, float 0x3FEDA9D0C0000000, float 0x3FED906BC0000000, float 0x3FED768540000000, float 0x3FED5C1D60000000, float 0x3FED4134E0000000, float 0x3FED25CBE0000000, float 0x3FED09E320000000, float 0x3FECED7B00000000, float 0x3FECD093E0000000, float 0x3FECB32E80000000, float 0x3FEC954B20000000, float 0x3FEC76EA60000000, float 0x3FEC580CE0000000, float 0x3FEC38B2E0000000, float 0x3FEC18DD40000000, float 0x3FEBF88C40000000, float 0x3FEBD7C0A0000000, float 0x3FEBB67AE0000000, float 0x3FEB94BBA0000000, float 0x3FEB728340000000, float 0x3FEB4FD2A0000000, float 0x3FEB2CAA00000000, float 0x3FEB090A60000000, float 0x3FEAE4F400000000, float 0x3FEAC067C0000000, float 0x3FEA9B6620000000, float 0x3FEA75EFE0000000, float 0x3FEA500580000000, float 0x3FEA29A7A0000000, float 0x3FEA02D700000000, float 0x3FE9DB9460000000, float 0x3FE9B3E040000000, float 0x3FE98BBB60000000, float 0x3FE9632680000000, float 0x3FE93A2240000000, float 0x3FE910AF60000000, float 0x3FE8E6CE80000000, float 0x3FE8BC8060000000, float 0x3FE891C5E0000000, float 0x3FE8669F80000000, float 0x3FE83B0E00000000, float 0x3FE80F1260000000, float 0x3FE7E2AD20000000, float 0x3FE7B5DF20000000, float 0x3FE788A920000000, float 0x3FE75B0BE0000000, float 0x3FE72D0840000000, float 0x3FE6FE9EE0000000, float 0x3FE6CFD0A0000000, float 0x3FE6A09E60000000, float 0x3FE67108E0000000, float 0x3FE64110E0000000, float 0x3FE610B760000000, float 0x3FE5DFFD00000000, float 0x3FE5AEE2A0000000, float 0x3FE57D6940000000, float 0x3FE54B9180000000, float 0x3FE5195C60000000, float 0x3FE4E6CAC0000000, float 0x3FE4B3DD60000000, float 0x3FE4809540000000, float 0x3FE44CF320000000, float 0x3FE418F800000000, float 0x3FE3E4A4C0000000, float 0x3FE3AFFA20000000, float 0x3FE37AF940000000, float 0x3FE345A2E0000000, float 0x3FE30FF800000000, float 0x3FE2D9F980000000, float 0x3FE2A3A840000000, float 0x3FE26D0540000000, float 0x3FE2361180000000, float 0x3FE1FECDE0000000, float 0x3FE1C73B40000000, float 0x3FE18F5AA0000000, float 0x3FE1572D00000000, float 0x3FE11EB360000000, float 0x3FE0E5EE80000000, float 0x3FE0ACDFA0000000, float 0x3FE07387A0000000, float 0x3FE039E760000000, float 5.000000e-01, float 0x3FDF8BA4E0000000, float 0x3FDF16BF60000000, float 0x3FDEA15180000000, float 0x3FDE2B5D40000000, float 0x3FDDB4E4A0000000, float 0x3FDD3DE9C0000000, float 0x3FDCC66EA0000000, float 0x3FDC4E7540000000, float 0x3FDBD5FFC0000000, float 0x3FDB5D1000000000, float 0x3FDAE3A860000000, float 0x3FDA69CAC0000000, float 0x3FD9EF7940000000, float 0x3FD974B600000000, float 0x3FD8F98320000000, float 0x3FD87DE2A0000000, float 0x3FD801D6C0000000, float 0x3FD78561A0000000, float 0x3FD7088540000000, float 0x3FD68B43C0000000, float 0x3FD60D9F80000000, float 0x3FD58F9A80000000, float 0x3FD51136E0000000, float 0x3FD49276E0000000, float 0x3FD4135CA0000000, float 0x3FD393EA40000000, float 0x3FD3142220000000, float 0x3FD2940640000000, float 0x3FD21398C0000000, float 0x3FD192DC20000000, float 0x3FD111D260000000, float 0x3FD0907DC0000000, float 0x3FD00EE080000000, float 0x3FCF19F980000000, float 0x3FCE15A9A0000000, float 0x3FCD10D5C0000000, float 0x3FCC0B8260000000, float 0x3FCB05B400000000, float 0x3FC9FF6F20000000, float 0x3FC8F8B840000000, float 0x3FC7F193C0000000, float 0x3FC6EA0640000000, float 0x3FC5E21440000000, float 0x3FC4D9C240000000, float 0x3FC3D114E0000000, float 0x3FC2C81060000000, float 0x3FC1BEB9A0000000, float 0x3FC0B51500000000, float 0x3FBF564E60000000, float 0x3FBD41E900000000, float 0x3FBB2D03A0000000, float 0x3FB917A6C0000000, float 0x3FB701DBC0000000, float 0x3FB4EBAC00000000, float 0x3FB2D52080000000, float 0x3FB0BE4280000000, float 0x3FAD4E35C0000000, float 0x3FA91F65C0000000, float 0x3FA4F02820000000, float 0x3FA0C08E20000000, float 0x3F99215620000000, float 0x3F90C12120000000, float 0x3F80C14600000000], align 16
@.str = private unnamed_addr constant [89 x i8] c"../../third_party/webrtc/modules/audio_processing/transient/transient_suppressor_impl.cc\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[ts] Transient suppression is now enabled.\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"[ts] Transient suppression is now disabled.\00", align 1
@_ZN6webrtcL15kBlocks480w1024E = internal constant <{ [992 x float], [32 x float] }> <{ [992 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3F6ACEE8C0000000, float 0x3F7ACEDE00000000, float 0x3F841B1A60000000, float 0x3F8ACEB860000000, float 0x3F90C12120000000, float 0x3F941ADAA0000000, float 0x3F97748600000000, float 0x3F9ACE2160000000, float 0x3F9E27A940000000, float 0x3FA0C08E20000000, float 0x3FA26D3BE0000000, float 0x3FA419DD00000000, float 0x3FA5C66FA0000000, float 0x3FA772F320000000, float 0x3FA91F6620000000, float 0x3FAACBC760000000, float 0x3FAC7815E0000000, float 0x3FAE245040000000, float 0x3FAFD075C0000000, float 0x3FB0BE4280000000, float 0x3FB1943E20000000, float 0x3FB26A2DC0000000, float 0x3FB3401040000000, float 0x3FB415E540000000, float 0x3FB4EBAC00000000, float 0x3FB5C16460000000, float 0x3FB6970D40000000, float 0x3FB76CA680000000, float 0x3FB8422F20000000, float 0x3FB917A6C0000000, float 0x3FB9ED0CE0000000, float 0x3FBAC26080000000, float 0x3FBB97A1A0000000, float 0x3FBC6CCF60000000, float 0x3FBD41E920000000, float 0x3FBE16EE60000000, float 0x3FBEEBDE60000000, float 0x3FBFC0B8E0000000, float 0x3FC04ABE80000000, float 0x3FC0B51520000000, float 0x3FC11F6000000000, float 0x3FC1899EC0000000, float 0x3FC1F3D180000000, float 0x3FC25DF760000000, float 0x3FC2C81060000000, float 0x3FC3321C60000000, float 0x3FC39C1AE0000000, float 0x3FC4060B80000000, float 0x3FC46FEE00000000, float 0x3FC4D9C240000000, float 0x3FC5438800000000, float 0x3FC5AD3EA0000000, float 0x3FC616E620000000, float 0x3FC6807E20000000, float 0x3FC6EA0660000000, float 0x3FC7537E60000000, float 0x3FC7BCE620000000, float 0x3FC8263D40000000, float 0x3FC88F8360000000, float 0x3FC8F8B840000000, float 0x3FC961DBA0000000, float 0x3FC9CAED40000000, float 0x3FCA33ECC0000000, float 0x3FCA9CD9C0000000, float 0x3FCB05B420000000, float 0x3FCB6E7B80000000, float 0x3FCBD72FC0000000, float 0x3FCC3FD060000000, float 0x3FCCA85D20000000, float 0x3FCD10D5E0000000, float 0x3FCD793A20000000, float 0x3FCDE189C0000000, float 0x3FCE49C440000000, float 0x3FCEB1E9A0000000, float 0x3FCF19F9A0000000, float 0x3FCF81F380000000, float 0x3FCFE9D760000000, float 0x3FD028D280000000, float 0x3FD05CADE0000000, float 0x3FD0907DC0000000, float 0x3FD0C44220000000, float 0x3FD0F7FAA0000000, float 0x3FD12BA740000000, float 0x3FD15F47C0000000, float 0x3FD192DC20000000, float 0x3FD1C66440000000, float 0x3FD1F9DFC0000000, float 0x3FD22D4EC0000000, float 0x3FD260B100000000, float 0x3FD2940620000000, float 0x3FD2C74E80000000, float 0x3FD2FA89A0000000, float 0x3FD32DB740000000, float 0x3FD360D7A0000000, float 0x3FD393EA40000000, float 0x3FD3C6EF40000000, float 0x3FD3F9E660000000, float 0x3FD42CCF60000000, float 0x3FD45FAA40000000, float 0x3FD49276C0000000, float 0x3FD4C53500000000, float 0x3FD4F7E4A0000000, float 0x3FD52A8560000000, float 0x3FD55D1780000000, float 0x3FD58F9A80000000, float 0x3FD5C20E60000000, float 0x3FD5F47300000000, float 0x3FD626C840000000, float 0x3FD6590DE0000000, float 0x3FD68B43E0000000, float 0x3FD6BD69E0000000, float 0x3FD6EF8020000000, float 0x3FD7218640000000, float 0x3FD7537C20000000, float 0x3FD78561A0000000, float 0x3FD7B73680000000, float 0x3FD7E8FAE0000000, float 0x3FD81AAE80000000, float 0x3FD84C5120000000, float 0x3FD87DE2C0000000, float 0x3FD8AF6320000000, float 0x3FD8E0D220000000, float 0x3FD9122FC0000000, float 0x3FD9437BE0000000, float 0x3FD974B600000000, float 0x3FD9A5DE80000000, float 0x3FD9D6F4E0000000, float 0x3FDA07F920000000, float 0x3FDA38EB40000000, float 0x3FDA69CAC0000000, float 0x3FDA9A97E0000000, float 0x3FDACB5240000000, float 0x3FDAFBF9E0000000, float 0x3FDB2C8E80000000, float 0x3FDB5D1000000000, float 0x3FDB8D7E80000000, float 0x3FDBBDD980000000, float 0x3FDBEE2100000000, float 0x3FDC1E5500000000, float 0x3FDC4E7560000000, float 0x3FDC7E81A0000000, float 0x3FDCAE7A00000000, float 0x3FDCDE5E40000000, float 0x3FDD0E2E40000000, float 0x3FDD3DE9E0000000, float 0x3FDD6D90E0000000, float 0x3FDD9D2340000000, float 0x3FDDCCA0E0000000, float 0x3FDDFC09A0000000, float 0x3FDE2B5D40000000, float 0x3FDE5A9BC0000000, float 0x3FDE89C500000000, float 0x3FDEB8D8C0000000, float 0x3FDEE7D6E0000000, float 0x3FDF16BF40000000, float 0x3FDF459220000000, float 0x3FDF744EC0000000, float 0x3FDFA2F560000000, float 0x3FDFD18600000000, float 5.000000e-01, float 0x3FE01731E0000000, float 0x3FE02E5880000000, float 0x3FE04573A0000000, float 0x3FE05C8360000000, float 0x3FE07387A0000000, float 0x3FE08A8060000000, float 0x3FE0A16D80000000, float 0x3FE0B84EE0000000, float 0x3FE0CF24A0000000, float 0x3FE0E5EEA0000000, float 0x3FE0FCACA0000000, float 0x3FE1135EC0000000, float 0x3FE12A04E0000000, float 0x3FE1409F00000000, float 0x3FE1572D20000000, float 0x3FE16DAEE0000000, float 0x3FE1842460000000, float 0x3FE19A8DC0000000, float 0x3FE1B0EAC0000000, float 0x3FE1C73B40000000, float 0x3FE1DD7F60000000, float 0x3FE1F3B6E0000000, float 0x3FE209E1C0000000, float 0x3FE2200000000000, float 0x3FE2361180000000, float 0x3FE24C1640000000, float 0x3FE2620E20000000, float 0x3FE277F940000000, float 0x3FE28DD740000000, float 0x3FE2A3A840000000, float 0x3FE2B96C40000000, float 0x3FE2CF2300000000, float 0x3FE2E4CCA0000000, float 0x3FE2FA6900000000, float 0x3FE30FF800000000, float 0x3FE32579A0000000, float 0x3FE33AEDE0000000, float 0x3FE35054A0000000, float 0x3FE365ADC0000000, float 0x3FE37AF940000000, float 0x3FE3903720000000, float 0x3FE3A56740000000, float 0x3FE3BA89A0000000, float 0x3FE3CF9E20000000, float 0x3FE3E4A4C0000000, float 0x3FE3F99D60000000, float 0x3FE40E8800000000, float 0x3FE4236480000000, float 0x3FE43832E0000000, float 0x3FE44CF340000000, float 0x3FE461A520000000, float 0x3FE47648C0000000, float 0x3FE48ADE20000000, float 0x3FE49F6500000000, float 0x3FE4B3DD60000000, float 0x3FE4C84760000000, float 0x3FE4DCA2A0000000, float 0x3FE4F0EF40000000, float 0x3FE5052D20000000, float 0x3FE5195C80000000, float 0x3FE52D7CE0000000, float 0x3FE5418E60000000, float 0x3FE5559100000000, float 0x3FE56984A0000000, float 0x3FE57D6940000000, float 0x3FE5913EC0000000, float 0x3FE5A50520000000, float 0x3FE5B8BC60000000, float 0x3FE5CC6460000000, float 0x3FE5DFFD00000000, float 0x3FE5F38640000000, float 0x3FE6070020000000, float 0x3FE61A6AA0000000, float 0x3FE62DC5A0000000, float 0x3FE64110E0000000, float 0x3FE6544CC0000000, float 0x3FE66778C0000000, float 0x3FE67A9520000000, float 0x3FE68DA1C0000000, float 0x3FE6A09E60000000, float 0x3FE6B38B40000000, float 0x3FE6C66840000000, float 0x3FE6D93520000000, float 0x3FE6EBF220000000, float 0x3FE6FE9F00000000, float 0x3FE7113BA0000000, float 0x3FE723C820000000, float 0x3FE7364460000000, float 0x3FE748B060000000, float 0x3FE75B0BE0000000, float 0x3FE76D5720000000, float 0x3FE77F9200000000, float 0x3FE791BC40000000, float 0x3FE7A3D600000000, float 0x3FE7B5DF40000000, float 0x3FE7C7D7C0000000, float 0x3FE7D9BF80000000, float 0x3FE7EB96A0000000, float 0x3FE7FD5CE0000000, float 0x3FE80F1260000000, float 0x3FE820B700000000, float 0x3FE8324AA0000000, float 0x3FE843CD40000000, float 0x3FE8553EE0000000, float 0x3FE8669F80000000, float 0x3FE877EEE0000000, float 0x3FE8892D20000000, float 0x3FE89A5A40000000, float 0x3FE8AB7600000000, float 0x3FE8BC8060000000, float 0x3FE8CD79A0000000, float 0x3FE8DE6140000000, float 0x3FE8EF3780000000, float 0x3FE8FFFC40000000, float 0x3FE910AF60000000, float 0x3FE9215100000000, float 0x3FE931E100000000, float 0x3FE9425F40000000, float 0x3FE952CBC0000000, float 0x3FE96326A0000000, float 0x3FE9736F80000000, float 0x3FE983A6A0000000, float 0x3FE993CBC0000000, float 0x3FE9A3DF20000000, float 0x3FE9B3E040000000, float 0x3FE9C3CF80000000, float 0x3FE9D3ACA0000000, float 0x3FE9E377A0000000, float 0x3FE9F33080000000, float 0x3FEA02D720000000, float 0x3FEA126B80000000, float 0x3FEA21ED80000000, float 0x3FEA315D40000000, float 0x3FEA40BAA0000000, float 0x3FEA500580000000, float 0x3FEA5F3DE0000000, float 0x3FEA6E63E0000000, float 0x3FEA7D7740000000, float 0x3FEA8C7800000000, float 0x3FEA9B6640000000, float 0x3FEAAA41A0000000, float 0x3FEAB90A60000000, float 0x3FEAC7C080000000, float 0x3FEAD663C0000000, float 0x3FEAE4F400000000, float 0x3FEAF371A0000000, float 0x3FEB01DC20000000, float 0x3FEB1033C0000000, float 0x3FEB1E7880000000, float 0x3FEB2CAA00000000, float 0x3FEB3AC8A0000000, float 0x3FEB48D420000000, float 0x3FEB56CC40000000, float 0x3FEB64B160000000, float 0x3FEB728360000000, float 0x3FEB8041E0000000, float 0x3FEB8DED40000000, float 0x3FEB9B8540000000, float 0x3FEBA909C0000000, float 0x3FEBB67B00000000, float 0x3FEBC3D8C0000000, float 0x3FEBD122E0000000, float 0x3FEBDE59A0000000, float 0x3FEBEB7CE0000000, float 0x3FEBF88C40000000, float 0x3FEC058840000000, float 0x3FEC1270A0000000, float 0x3FEC1F4520000000, float 0x3FEC2C05E0000000, float 0x3FEC38B300000000, float 0x3FEC454C40000000, float 0x3FEC51D1A0000000, float 0x3FEC5E4340000000, float 0x3FEC6AA0C0000000, float 0x3FEC76EA80000000, float 0x3FEC832020000000, float 0x3FEC8F41C0000000, float 0x3FEC9B4F80000000, float 0x3FECA74900000000, float 0x3FECB32E80000000, float 0x3FECBEFFE0000000, float 0x3FECCABCE0000000, float 0x3FECD665E0000000, float 0x3FECE1FAA0000000, float 0x3FECED7B00000000, float 0x3FECF8E720000000, float 0x3FED043EE0000000, float 0x3FED0F8240000000, float 0x3FED1AB160000000, float 0x3FED25CC00000000, float 0x3FED30D200000000, float 0x3FED3BC3C0000000, float 0x3FED46A0E0000000, float 0x3FED516960000000, float 0x3FED5C1D80000000, float 0x3FED66BCE0000000, float 0x3FED7147A0000000, float 0x3FED7BBDC0000000, float 0x3FED861F20000000, float 0x3FED906BC0000000, float 0x3FED9AA3C0000000, float 0x3FEDA4C700000000, float 0x3FEDAED540000000, float 0x3FEDB8CEE0000000, float 0x3FEDC2B380000000, float 0x3FEDCC8340000000, float 0x3FEDD63E20000000, float 0x3FEDDFE420000000, float 0x3FEDE97500000000, float 0x3FEDF2F100000000, float 0x3FEDFC57E0000000, float 0x3FEE05A9E0000000, float 0x3FEE0EE6C0000000, float 0x3FEE180E60000000, float 0x3FEE212100000000, float 0x3FEE2A1E80000000, float 0x3FEE3306C0000000, float 0x3FEE3BD9E0000000, float 0x3FEE4497E0000000, float 0x3FEE4D4060000000, float 0x3FEE55D3C0000000, float 0x3FEE5E51E0000000, float 0x3FEE66BAA0000000, float 0x3FEE6F0E20000000, float 0x3FEE774C40000000, float 0x3FEE7F74E0000000, float 0x3FEE878820000000, float 0x3FEE8F8600000000, float 0x3FEE976E60000000, float 0x3FEE9F4160000000, float 0x3FEEA6FEE0000000, float 0x3FEEAEA6C0000000, float 0x3FEEB63920000000, float 0x3FEEBDB600000000, float 0x3FEEC51D40000000, float 0x3FEECC6F00000000, float 0x3FEED3AB00000000, float 0x3FEEDAD160000000, float 0x3FEEE1E240000000, float 0x3FEEE8DD40000000, float 0x3FEEEFC2C0000000, float 0x3FEEF69260000000, float 0x3FEEFD4C60000000, float 0x3FEF03F080000000, float 0x3FEF0A7F00000000, float 0x3FEF10F7A0000000, float 0x3FEF175A80000000, float 0x3FEF1DA780000000, float 0x3FEF23DEC0000000, float 0x3FEF2A0020000000, float 0x3FEF300B80000000, float 0x3FEF360120000000, float 0x3FEF3BE0C0000000, float 0x3FEF41AA80000000, float 0x3FEF475E60000000, float 0x3FEF4CFC40000000, float 0x3FEF528420000000, float 0x3FEF57F600000000, float 0x3FEF5D51E0000000, float 0x3FEF6297E0000000, float 0x3FEF67C7A0000000, float 0x3FEF6CE180000000, float 0x3FEF71E560000000, float 0x3FEF76D300000000, float 0x3FEF7BAAA0000000, float 0x3FEF806C20000000, float 0x3FEF8517A0000000, float 0x3FEF89ACE0000000, float 0x3FEF8E2C00000000, float 0x3FEF929500000000, float 0x3FEF96E7E0000000, float 0x3FEF9B24A0000000, float 0x3FEF9F4B20000000, float 0x3FEFA35B60000000, float 0x3FEFA75580000000, float 0x3FEFAB3960000000, float 0x3FEFAF0720000000, float 0x3FEFB2BE80000000, float 0x3FEFB65FA0000000, float 0x3FEFB9EAA0000000, float 0x3FEFBD5F40000000, float 0x3FEFC0BDA0000000, float 0x3FEFC405C0000000, float 0x3FEFC73780000000, float 0x3FEFCA5300000000, float 0x3FEFCD5840000000, float 0x3FEFD04700000000, float 0x3FEFD31FA0000000, float 0x3FEFD5E1C0000000, float 0x3FEFD88DA0000000, float 0x3FEFDB2320000000, float 0x3FEFDDA240000000, float 0x3FEFE00B20000000, float 0x3FEFE25D80000000, float 0x3FEFE49980000000, float 0x3FEFE6BF20000000, float 0x3FEFE8CE80000000, float 0x3FEFEAC760000000, float 0x3FEFECA9C0000000, float 0x3FEFEE75E0000000, float 0x3FEFF02B80000000, float 0x3FEFF1CAC0000000, float 0x3FEFF35380000000, float 0x3FEFF4C5E0000000, float 0x3FEFF621E0000000, float 0x3FEFF76760000000, float 0x3FEFF89680000000, float 0x3FEFF9AF20000000, float 0x3FEFFAB160000000, float 0x3FEFFB9D20000000, float 0x3FEFFC7280000000, float 0x3FEFFD3160000000, float 0x3FEFFDD9C0000000, float 0x3FEFFE6BC0000000, float 0x3FEFFEE740000000, float 0x3FEFFF4C60000000, float 0x3FEFFF9AE0000000, float 0x3FEFFFD320000000, float 0x3FEFFFF4C0000000, float 1.000000e+00, float 0x3FEFFFF4C0000000, float 0x3FEFFFD320000000, float 0x3FEFFF9AE0000000, float 0x3FEFFF4C60000000, float 0x3FEFFEE740000000, float 0x3FEFFE6BC0000000, float 0x3FEFFDD9C0000000, float 0x3FEFFD3160000000, float 0x3FEFFC7280000000, float 0x3FEFFB9D20000000, float 0x3FEFFAB160000000, float 0x3FEFF9AF20000000, float 0x3FEFF89680000000, float 0x3FEFF76760000000, float 0x3FEFF621E0000000, float 0x3FEFF4C5E0000000, float 0x3FEFF35380000000, float 0x3FEFF1CAC0000000, float 0x3FEFF02B80000000, float 0x3FEFEE75E0000000, float 0x3FEFECA9C0000000, float 0x3FEFEAC740000000, float 0x3FEFE8CE60000000, float 0x3FEFE6BF20000000, float 0x3FEFE49980000000, float 0x3FEFE25D80000000, float 0x3FEFE00B20000000, float 0x3FEFDDA240000000, float 0x3FEFDB2320000000, float 0x3FEFD88DA0000000, float 0x3FEFD5E1C0000000, float 0x3FEFD31FA0000000, float 0x3FEFD04700000000, float 0x3FEFCD5820000000, float 0x3FEFCA5300000000, float 0x3FEFC73780000000, float 0x3FEFC405C0000000, float 0x3FEFC0BDA0000000, float 0x3FEFBD5F40000000, float 0x3FEFB9EAA0000000, float 0x3FEFB65FA0000000, float 0x3FEFB2BE80000000, float 0x3FEFAF0700000000, float 0x3FEFAB3960000000, float 0x3FEFA75580000000, float 0x3FEFA35B60000000, float 0x3FEF9F4B00000000, float 0x3FEF9B24A0000000, float 0x3FEF96E7E0000000, float 0x3FEF929500000000, float 0x3FEF8E2C00000000, float 0x3FEF89ACE0000000, float 0x3FEF851780000000, float 0x3FEF806C20000000, float 0x3FEF7BAAA0000000, float 0x3FEF76D300000000, float 0x3FEF71E540000000, float 0x3FEF6CE180000000, float 0x3FEF67C7A0000000, float 0x3FEF6297C0000000, float 0x3FEF5D51E0000000, float 0x3FEF57F600000000, float 0x3FEF528420000000, float 0x3FEF4CFC20000000, float 0x3FEF475E40000000, float 0x3FEF41AA80000000, float 0x3FEF3BE0C0000000, float 0x3FEF360100000000, float 0x3FEF300B80000000, float 0x3FEF2A0000000000, float 0x3FEF23DEA0000000, float 0x3FEF1DA780000000, float 0x3FEF175A80000000, float 0x3FEF10F7A0000000, float 0x3FEF0A7F00000000, float 0x3FEF03F080000000, float 0x3FEEFD4C40000000, float 0x3FEEF69260000000, float 0x3FEEEFC2A0000000, float 0x3FEEE8DD40000000, float 0x3FEEE1E220000000, float 0x3FEEDAD160000000, float 0x3FEED3AB00000000, float 0x3FEECC6EE0000000, float 0x3FEEC51D40000000, float 0x3FEEBDB600000000, float 0x3FEEB63920000000, float 0x3FEEAEA6A0000000, float 0x3FEEA6FEC0000000, float 0x3FEE9F4140000000, float 0x3FEE976E60000000, float 0x3FEE8F8600000000, float 0x3FEE878820000000, float 0x3FEE7F74C0000000, float 0x3FEE774C20000000, float 0x3FEE6F0E00000000, float 0x3FEE66BAA0000000, float 0x3FEE5E51E0000000, float 0x3FEE55D3C0000000, float 0x3FEE4D4060000000, float 0x3FEE4497C0000000, float 0x3FEE3BD9E0000000, float 0x3FEE3306C0000000, float 0x3FEE2A1E80000000, float 0x3FEE212100000000, float 0x3FEE180E60000000, float 0x3FEE0EE6A0000000, float 0x3FEE05A9C0000000, float 0x3FEDFC57E0000000, float 0x3FEDF2F100000000, float 0x3FEDE97500000000, float 0x3FEDDFE420000000, float 0x3FEDD63E20000000, float 0x3FEDCC8340000000, float 0x3FEDC2B380000000, float 0x3FEDB8CEC0000000, float 0x3FEDAED540000000, float 0x3FEDA4C6E0000000, float 0x3FED9AA3C0000000, float 0x3FED906BC0000000, float 0x3FED861F20000000, float 0x3FED7BBDA0000000, float 0x3FED714780000000, float 0x3FED66BCE0000000, float 0x3FED5C1D60000000, float 0x3FED516960000000, float 0x3FED46A0C0000000, float 0x3FED3BC3A0000000, float 0x3FED30D200000000, float 0x3FED25CBE0000000, float 0x3FED1AB140000000, float 0x3FED0F8220000000, float 0x3FED043EC0000000, float 0x3FECF8E720000000, float 0x3FECED7B00000000, float 0x3FECE1FA80000000, float 0x3FECD665C0000000, float 0x3FECCABCE0000000, float 0x3FECBEFFA0000000, float 0x3FECB32E80000000, float 0x3FECA74900000000, float 0x3FEC9B4F60000000, float 0x3FEC8F41C0000000, float 0x3FEC832000000000, float 0x3FEC76EA40000000, float 0x3FEC6AA0C0000000, float 0x3FEC5E4320000000, float 0x3FEC51D180000000, float 0x3FEC454C20000000, float 0x3FEC38B2E0000000, float 0x3FEC2C05C0000000, float 0x3FEC1F4520000000, float 0x3FEC127080000000, float 0x3FEC058840000000, float 0x3FEBF88C40000000, float 0x3FEBEB7CA0000000, float 0x3FEBDE5960000000, float 0x3FEBD122E0000000, float 0x3FEBC3D8A0000000, float 0x3FEBB67AE0000000, float 0x3FEBA909A0000000, float 0x3FEB9B8500000000, float 0x3FEB8DED40000000, float 0x3FEB8041E0000000, float 0x3FEB728340000000, float 0x3FEB64B160000000, float 0x3FEB56CC40000000, float 0x3FEB48D3E0000000, float 0x3FEB3AC8A0000000, float 0x3FEB2CAA00000000, float 0x3FEB1E7860000000, float 0x3FEB1033C0000000, float 0x3FEB01DC00000000, float 0x3FEAF37160000000, float 0x3FEAE4F420000000, float 0x3FEAD663A0000000, float 0x3FEAC7C060000000, float 0x3FEAB90A60000000, float 0x3FEAAA4180000000, float 0x3FEA9B6600000000, float 0x3FEA8C7800000000, float 0x3FEA7D7740000000, float 0x3FEA6E63C0000000, float 0x3FEA5F3DC0000000, float 0x3FEA500540000000, float 0x3FEA40BA60000000, float 0x3FEA315D40000000, float 0x3FEA21ED80000000, float 0x3FEA126B60000000, float 0x3FEA02D6E0000000, float 0x3FE9F33040000000, float 0x3FE9E377A0000000, float 0x3FE9D3ACA0000000, float 0x3FE9C3CF80000000, float 0x3FE9B3E040000000, float 0x3FE9A3DEE0000000, float 0x3FE993CBA0000000, float 0x3FE983A6A0000000, float 0x3FE9736F80000000, float 0x3FE9632680000000, float 0x3FE952CBA0000000, float 0x3FE9425F20000000, float 0x3FE931E0C0000000, float 0x3FE9215100000000, float 0x3FE910AF60000000, float 0x3FE8FFFC20000000, float 0x3FE8EF3760000000, float 0x3FE8DE6100000000, float 0x3FE8CD7940000000, float 0x3FE8BC8080000000, float 0x3FE8AB7600000000, float 0x3FE89A5A20000000, float 0x3FE8892D00000000, float 0x3FE877EEC0000000, float 0x3FE8669F40000000, float 0x3FE8553EE0000000, float 0x3FE843CD40000000, float 0x3FE8324A80000000, float 0x3FE820B6C0000000, float 0x3FE80F1220000000, float 0x3FE7FD5CA0000000, float 0x3FE7EB96A0000000, float 0x3FE7D9BF80000000, float 0x3FE7C7D7A0000000, float 0x3FE7B5DF00000000, float 0x3FE7A3D5C0000000, float 0x3FE791BC40000000, float 0x3FE77F91E0000000, float 0x3FE76D5720000000, float 0x3FE75B0BC0000000, float 0x3FE748B020000000, float 0x3FE7364420000000, float 0x3FE723C820000000, float 0x3FE7113BA0000000, float 0x3FE6FE9EE0000000, float 0x3FE6EBF1E0000000, float 0x3FE6D93500000000, float 0x3FE6C66800000000, float 0x3FE6B38B60000000, float 0x3FE6A09E60000000, float 0x3FE68DA1A0000000, float 0x3FE67A9500000000, float 0x3FE6677880000000, float 0x3FE6544C60000000, float 0x3FE6411100000000, float 0x3FE62DC580000000, float 0x3FE61A6A80000000, float 0x3FE6070000000000, float 0x3FE5F38620000000, float 0x3FE5DFFCC0000000, float 0x3FE5CC6460000000, float 0x3FE5B8BC40000000, float 0x3FE5A50500000000, float 0x3FE5913EA0000000, float 0x3FE57D6900000000, float 0x3FE5698440000000, float 0x3FE5559100000000, float 0x3FE5418E40000000, float 0x3FE52D7CA0000000, float 0x3FE5195C40000000, float 0x3FE5052D00000000, float 0x3FE4F0EF40000000, float 0x3FE4DCA2A0000000, float 0x3FE4C84740000000, float 0x3FE4B3DD40000000, float 0x3FE49F64C0000000, float 0x3FE48ADDE0000000, float 0x3FE47648E0000000, float 0x3FE461A520000000, float 0x3FE44CF320000000, float 0x3FE43832C0000000, float 0x3FE4236440000000, float 0x3FE40E87C0000000, float 0x3FE3F99D60000000, float 0x3FE3E4A4C0000000, float 0x3FE3CF9E00000000, float 0x3FE3BA8980000000, float 0x3FE3A56700000000, float 0x3FE39036E0000000, float 0x3FE37AF940000000, float 0x3FE365ADA0000000, float 0x3FE3505480000000, float 0x3FE33AEDA0000000, float 0x3FE3257960000000, float 0x3FE30FF7A0000000, float 0x3FE2FA6900000000, float 0x3FE2E4CCA0000000, float 0x3FE2CF22E0000000, float 0x3FE2B96C00000000, float 0x3FE2A3A800000000, float 0x3FE28DD760000000, float 0x3FE277F940000000, float 0x3FE2620E20000000, float 0x3FE24C1620000000, float 0x3FE2361140000000, float 0x3FE21FFFC0000000, float 0x3FE209E1C0000000, float 0x3FE1F3B6C0000000, float 0x3FE1DD7F40000000, float 0x3FE1C73B20000000, float 0x3FE1B0EA80000000, float 0x3FE19A8D80000000, float 0x3FE1842480000000, float 0x3FE16DAEE0000000, float 0x3FE1572CE0000000, float 0x3FE1409EE0000000, float 0x3FE12A04A0000000, float 0x3FE1135E60000000, float 0x3FE0FCACA0000000, float 0x3FE0E5EE80000000, float 0x3FE0CF2480000000, float 0x3FE0B84EC0000000, float 0x3FE0A16D40000000, float 0x3FE08A8000000000, float 0x3FE07387A0000000, float 0x3FE05C8340000000, float 0x3FE0457360000000, float 0x3FE02E5820000000, float 0x3FE0173180000000, float 0x3FE0000020000000, float 0x3FDFD185E0000000, float 0x3FDFA2F540000000, float 0x3FDF744E80000000, float 0x3FDF4591A0000000, float 0x3FDF16BEC0000000, float 0x3FDEE7D700000000, float 0x3FDEB8D8A0000000, float 0x3FDE89C4C0000000, float 0x3FDE5A9B60000000, float 0x3FDE2B5CC0000000, float 0x3FDDFC08E0000000, float 0x3FDDCCA100000000, float 0x3FDD9D2320000000, float 0x3FDD6D90A0000000, float 0x3FDD3DE960000000, float 0x3FDD0E2DA0000000, float 0x3FDCDE5D80000000, float 0x3FDCAE7A00000000, float 0x3FDC7E8180000000, float 0x3FDC4E7500000000, float 0x3FDC1E54A0000000, float 0x3FDBEE2080000000, float 0x3FDBBDD8C0000000, float 0x3FDB8D7E80000000, float 0x3FDB5D0FE0000000, float 0x3FDB2C8E40000000, float 0x3FDAFBF960000000, float 0x3FDACB51A0000000, float 0x3FDA9A9720000000, float 0x3FDA69CAC0000000, float 0x3FDA38EB00000000, float 0x3FDA07F8E0000000, float 0x3FD9D6F460000000, float 0x3FD9A5DDE0000000, float 0x3FD974B620000000, float 0x3FD9437BC0000000, float 0x3FD9122F80000000, float 0x3FD8E0D1C0000000, float 0x3FD8AF6280000000, float 0x3FD87DE200000000, float 0x3FD84C5140000000, float 0x3FD81AAE60000000, float 0x3FD7E8FAA0000000, float 0x3FD7B73620000000, float 0x3FD7856100000000, float 0x3FD7537B60000000, float 0x3FD7218640000000, float 0x3FD6EF8000000000, float 0x3FD6BD69C0000000, float 0x3FD68B4360000000, float 0x3FD6590D40000000, float 0x3FD626C780000000, float 0x3FD5F47300000000, float 0x3FD5C20E40000000, float 0x3FD58F9A40000000, float 0x3FD55D1700000000, float 0x3FD52A84E0000000, float 0x3FD4F7E3E0000000, float 0x3FD4C53500000000, float 0x3FD49276C0000000, float 0x3FD45FAA00000000, float 0x3FD42CCEE0000000, float 0x3FD3F9E5A0000000, float 0x3FD3C6EE60000000, float 0x3FD393EA40000000, float 0x3FD360D760000000, float 0x3FD32DB700000000, float 0x3FD2FA8900000000, float 0x3FD2C74DC0000000, float 0x3FD2940660000000, float 0x3FD260B0E0000000, float 0x3FD22D4E80000000, float 0x3FD1F9DF60000000, float 0x3FD1C663A0000000, float 0x3FD192DB80000000, float 0x3FD15F47E0000000, float 0x3FD12BA720000000, float 0x3FD0F7FA60000000, float 0x3FD0C441A0000000, float 0x3FD0907D40000000, float 0x3FD05CAD20000000, float 0x3FD028D280000000, float 0x3FCFE9D720000000, float 0x3FCF81F300000000, float 0x3FCF19F8A0000000, float 0x3FCEB1E880000000, float 0x3FCE49C2C0000000, float 0x3FCDE189C0000000, float 0x3FCD7939C0000000, float 0x3FCD10D520000000, float 0x3FCCA85C20000000, float 0x3FCC3FCF00000000, float 0x3FCBD72E00000000, float 0x3FCB6E7B80000000, float 0x3FCB05B3C0000000, float 0x3FCA9CD900000000, float 0x3FCA33EBA0000000, float 0x3FC9CAEBE0000000, float 0x3FC961DBE0000000, float 0x3FC8F8B820000000, float 0x3FC88F8300000000, float 0x3FC8263C80000000, float 0x3FC7BCE500000000, float 0x3FC7537D00000000, float 0x3FC6EA0680000000, float 0x3FC6807E00000000, float 0x3FC616E5A0000000, float 0x3FC5AD3DC0000000, float 0x3FC54386C0000000, float 0x3FC4D9C0C0000000, float 0x3FC46FEE20000000, float 0x3FC4060B40000000, float 0x3FC39C1A40000000, float 0x3FC3321B80000000, float 0x3FC2C80F40000000, float 0x3FC25DF5C0000000, float 0x3FC1F3D180000000, float 0x3FC1899EA0000000, float 0x3FC11F5F60000000, float 0x3FC0B51420000000, float 0x3FC04ABD20000000, float 0x3FBFC0B5A0000000, float 0x3FBEEBDE60000000, float 0x3FBE16EDA0000000, float 0x3FBD41E7A0000000, float 0x3FBC6CCD60000000, float 0x3FBB979EE0000000, float 0x3FBAC26100000000, float 0x3FB9ED0CC0000000, float 0x3FB917A600000000, float 0x3FB8422DA0000000, float 0x3FB76CA440000000, float 0x3FB6970A80000000, float 0x3FB5C164C0000000, float 0x3FB4EBABE0000000, float 0x3FB415E440000000, float 0x3FB3400E80000000, float 0x3FB26A2B60000000, float 0x3FB1943B40000000, float 0x3FB0BE42C0000000, float 0x3FAFD07520000000, float 0x3FAE244E40000000, float 0x3FAC781240000000, float 0x3FAACBC260000000, float 0x3FA91F5FC0000000, float 0x3FA772F360000000, float 0x3FA5C66E80000000, float 0x3FA419DA40000000, float 0x3FA26D3840000000, float 0x3FA0C08920000000, float 0x3F9E279C80000000, float 0x3F9ACE2160000000, float 0x3F97748400000000, float 0x3F941AD540000000, float 0x3F90C11900000000, float 0x3F8ACEA180000000, float 0x3F841AFF80000000, float 0x3F7ACEDB40000000, float 0x3F6ACECDE0000000], [32 x float] zeroinitializer }>, align 16
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN6webrtc23TransientSuppressorImplC1Ev = hidden unnamed_addr alias void (%"class.webrtc::TransientSuppressorImpl"*), void (%"class.webrtc::TransientSuppressorImpl"*)* @_ZN6webrtc23TransientSuppressorImplC2Ev
@_ZN6webrtc23TransientSuppressorImplD1Ev = hidden unnamed_addr alias void (%"class.webrtc::TransientSuppressorImpl"*), void (%"class.webrtc::TransientSuppressorImpl"*)* @_ZN6webrtc23TransientSuppressorImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc23TransientSuppressorImplC2Ev(%"class.webrtc::TransientSuppressorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc23TransientSuppressorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9
  %5 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 26
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 27
  %7 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 52, i1 false)
  %8 = bitcast %"class.std::__1::unique_ptr.25"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 95, i1 false)
  store i32 182, i32* %6, align 4
  %9 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  store i8 0, i8* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImplD2Ev(%"class.webrtc::TransientSuppressorImpl"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc23TransientSuppressorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  store float* null, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast float* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %10 = load float*, float** %9, align 8
  store float* null, float** %9, align 8
  %11 = icmp eq float* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = bitcast float* %10 to i8*
  tail call void @_ZdaPv(i8* %13) #10
  br label %14

14:                                               ; preds = %8, %12
  %15 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %16 = load float*, float** %15, align 8
  store float* null, float** %15, align 8
  %17 = icmp eq float* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = bitcast float* %16 to i8*
  tail call void @_ZdaPv(i8* %19) #10
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %22 = load float*, float** %21, align 8
  store float* null, float** %21, align 8
  %23 = icmp eq float* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = bitcast float* %22 to i8*
  tail call void @_ZdaPv(i8* %25) #10
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %28 = load float*, float** %27, align 8
  store float* null, float** %27, align 8
  %29 = icmp eq float* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast float* %28 to i8*
  tail call void @_ZdaPv(i8* %31) #10
  br label %32

32:                                               ; preds = %26, %30
  %33 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %34 = load i64*, i64** %33, align 8
  store i64* null, i64** %33, align 8
  %35 = icmp eq i64* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = bitcast i64* %34 to i8*
  tail call void @_ZdaPv(i8* %37) #10
  br label %38

38:                                               ; preds = %32, %36
  %39 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %40 = load float*, float** %39, align 8
  store float* null, float** %39, align 8
  %41 = icmp eq float* %40, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = bitcast float* %40 to i8*
  tail call void @_ZdaPv(i8* %43) #10
  br label %44

44:                                               ; preds = %38, %42
  %45 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %46 = load float*, float** %45, align 8
  store float* null, float** %45, align 8
  %47 = icmp eq float* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = bitcast float* %46 to i8*
  tail call void @_ZdaPv(i8* %49) #10
  br label %50

50:                                               ; preds = %44, %48
  %51 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %52 = load float*, float** %51, align 8
  store float* null, float** %51, align 8
  %53 = icmp eq float* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = bitcast float* %52 to i8*
  tail call void @_ZdaPv(i8* %55) #10
  br label %56

56:                                               ; preds = %50, %54
  %57 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %58 = load %"class.webrtc::TransientDetector"*, %"class.webrtc::TransientDetector"** %57, align 8
  store %"class.webrtc::TransientDetector"* null, %"class.webrtc::TransientDetector"** %57, align 8
  %59 = icmp eq %"class.webrtc::TransientDetector"* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  tail call void @_ZN6webrtc17TransientDetectorD1Ev(%"class.webrtc::TransientDetector"* nonnull %58) #11
  %61 = bitcast %"class.webrtc::TransientDetector"* %58 to i8*
  tail call void @_ZdlPv(i8* %61) #10
  br label %62

62:                                               ; preds = %56, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImplD0Ev(%"class.webrtc::TransientSuppressorImpl"*) unnamed_addr #1 align 2 {
  tail call void @_ZN6webrtc23TransientSuppressorImplD2Ev(%"class.webrtc::TransientSuppressorImpl"* %0) #11
  %2 = bitcast %"class.webrtc::TransientSuppressorImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc23TransientSuppressorImpl10InitializeEiii(%"class.webrtc::TransientSuppressorImpl"*, i32, i32, i32) unnamed_addr #1 align 2 {
  switch i32 %1, label %251 [
    i32 8000, label %8
    i32 16000, label %5
    i32 32000, label %6
    i32 48000, label %7
  ]

5:                                                ; preds = %4
  br label %8

6:                                                ; preds = %4
  br label %8

7:                                                ; preds = %4
  br label %8

8:                                                ; preds = %4, %7, %6, %5
  %9 = phi i64 [ 1024, %7 ], [ 512, %6 ], [ 256, %5 ], [ 128, %4 ]
  %10 = phi float* [ getelementptr inbounds (<{ [992 x float], [32 x float] }>, <{ [992 x float], [32 x float] }>* @_ZN6webrtcL15kBlocks480w1024E, i64 0, i32 0, i64 0), %7 ], [ getelementptr inbounds ([512 x float], [512 x float]* @_ZN6webrtcL14kBlocks320w512E, i64 0, i64 0), %6 ], [ getelementptr inbounds ([256 x float], [256 x float]* @_ZN6webrtcL14kBlocks160w256E, i64 0, i64 0), %5 ], [ getelementptr inbounds ([128 x float], [128 x float]* @_ZN6webrtcL13kBlocks80w128E, i64 0, i64 0), %4 ]
  %11 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 17
  store float* %10, float** %12, align 8
  switch i32 %2, label %251 [
    i32 48000, label %13
    i32 32000, label %13
    i32 16000, label %13
    i32 8000, label %13
  ]

13:                                               ; preds = %8, %8, %8, %8
  %14 = icmp slt i32 %3, 1
  br i1 %14, label %251, label %15

15:                                               ; preds = %13
  %16 = tail call i8* @_Znwm(i64 232) #10
  %17 = bitcast i8* %16 to %"class.webrtc::TransientDetector"*
  tail call void @_ZN6webrtc17TransientDetectorC1Ei(%"class.webrtc::TransientDetector"* nonnull %17, i32 %2) #11
  %18 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %19 = load %"class.webrtc::TransientDetector"*, %"class.webrtc::TransientDetector"** %18, align 8
  %20 = bitcast %"class.webrtc::TransientDetector"** %18 to i8**
  store i8* %16, i8** %20, align 8
  %21 = icmp eq %"class.webrtc::TransientDetector"* %19, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %15
  tail call void @_ZN6webrtc17TransientDetectorD1Ev(%"class.webrtc::TransientDetector"* nonnull %19) #11
  %23 = bitcast %"class.webrtc::TransientDetector"* %19 to i8*
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %15, %22
  %25 = trunc i32 %1 to i16
  %26 = udiv i16 %25, 100
  %27 = zext i16 %26 to i64
  %28 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 2
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %30, %27
  br i1 %31, label %251, label %32

32:                                               ; preds = %24
  %33 = sub i64 %30, %27
  %34 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 5
  store i64 %33, i64* %34, align 8
  %35 = lshr i64 %30, 1
  %36 = add nuw i64 %35, 1
  %37 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 6
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 7
  store i32 %3, i32* %38, align 8
  %39 = sext i32 %3 to i64
  %40 = mul i64 %30, %39
  %41 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4)
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = tail call i8* @_Znam(i64 %44) #10
  %46 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %47 = load float*, float** %46, align 8
  %48 = bitcast float** %46 to i8**
  store i8* %45, i8** %48, align 8
  %49 = icmp eq float* %47, null
  br i1 %49, label %56, label %50

50:                                               ; preds = %32
  %51 = bitcast float* %47 to i8*
  tail call void @_ZdaPv(i8* %51) #10
  %52 = load i8*, i8** %48, align 8
  %53 = load i64, i64* %29, align 8
  %54 = load i32, i32* %38, align 8
  %55 = sext i32 %54 to i64
  br label %56

56:                                               ; preds = %32, %50
  %57 = phi i64 [ %39, %32 ], [ %55, %50 ]
  %58 = phi i64 [ %30, %32 ], [ %53, %50 ]
  %59 = phi i8* [ %45, %32 ], [ %52, %50 ]
  %60 = shl i64 %58, 2
  %61 = mul i64 %60, %57
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %61, i1 false)
  %62 = trunc i32 %2 to i16
  %63 = udiv i16 %62, 100
  %64 = zext i16 %63 to i64
  %65 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 3
  store i64 %64, i64* %65, align 8
  %66 = shl nuw nsw i16 %63, 2
  %67 = zext i16 %66 to i64
  %68 = tail call i8* @_Znam(i64 %67) #10
  %69 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %70 = load float*, float** %69, align 8
  %71 = bitcast float** %69 to i8**
  store i8* %68, i8** %71, align 8
  %72 = icmp eq float* %70, null
  br i1 %72, label %77, label %73

73:                                               ; preds = %56
  %74 = bitcast float* %70 to i8*
  tail call void @_ZdaPv(i8* %74) #10
  %75 = load i8*, i8** %71, align 8
  %76 = load i64, i64* %65, align 8
  br label %77

77:                                               ; preds = %56, %73
  %78 = phi i64 [ %64, %56 ], [ %76, %73 ]
  %79 = phi i8* [ %68, %56 ], [ %75, %73 ]
  %80 = shl i64 %78, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %79, i8 0, i64 %80, i1 false)
  %81 = load i64, i64* %29, align 8
  %82 = load i32, i32* %38, align 8
  %83 = sext i32 %82 to i64
  %84 = mul i64 %81, %83
  %85 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %84, i64 4)
  %86 = extractvalue { i64, i1 } %85, 1
  %87 = extractvalue { i64, i1 } %85, 0
  %88 = select i1 %86, i64 -1, i64 %87
  %89 = tail call i8* @_Znam(i64 %88) #10
  %90 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %91 = load float*, float** %90, align 8
  %92 = bitcast float** %90 to i8**
  store i8* %89, i8** %92, align 8
  %93 = icmp eq float* %91, null
  br i1 %93, label %100, label %94

94:                                               ; preds = %77
  %95 = bitcast float* %91 to i8*
  tail call void @_ZdaPv(i8* %95) #10
  %96 = load i8*, i8** %92, align 8
  %97 = load i64, i64* %29, align 8
  %98 = load i32, i32* %38, align 8
  %99 = sext i32 %98 to i64
  br label %100

100:                                              ; preds = %77, %94
  %101 = phi i64 [ %83, %77 ], [ %99, %94 ]
  %102 = phi i64 [ %81, %77 ], [ %97, %94 ]
  %103 = phi i8* [ %89, %77 ], [ %96, %94 ]
  %104 = shl i64 %102, 2
  %105 = mul i64 %104, %101
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %103, i8 0, i64 %105, i1 false)
  %106 = load i64, i64* %29, align 8
  %107 = uitofp i64 %106 to float
  %108 = tail call float @sqrtf(float %107) #11
  %109 = fadd float %108, 2.000000e+00
  %110 = fptoui float %109 to i64
  %111 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %110, i64 8)
  %112 = extractvalue { i64, i1 } %111, 1
  %113 = extractvalue { i64, i1 } %111, 0
  %114 = select i1 %112, i64 -1, i64 %113
  %115 = tail call i8* @_Znam(i64 %114) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %115, i8 0, i64 %114, i1 false)
  %116 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %117 = load i64*, i64** %116, align 8
  %118 = bitcast i64** %116 to i8**
  store i8* %115, i8** %118, align 8
  %119 = icmp eq i64* %117, null
  br i1 %119, label %123, label %120

120:                                              ; preds = %100
  %121 = bitcast i64* %117 to i8*
  tail call void @_ZdaPv(i8* %121) #10
  %122 = load i8*, i8** %118, align 8
  br label %123

123:                                              ; preds = %100, %120
  %124 = phi i8* [ %115, %100 ], [ %122, %120 ]
  %125 = shl i64 %110, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 %125, i1 false)
  %126 = load i64, i64* %37, align 8
  %127 = add i64 %126, -1
  %128 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %127, i64 4)
  %129 = extractvalue { i64, i1 } %128, 1
  %130 = extractvalue { i64, i1 } %128, 0
  %131 = select i1 %129, i64 -1, i64 %130
  %132 = tail call i8* @_Znam(i64 %131) #10
  %133 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %134 = load float*, float** %133, align 8
  %135 = bitcast float** %133 to i8**
  store i8* %132, i8** %135, align 8
  %136 = icmp eq float* %134, null
  br i1 %136, label %141, label %137

137:                                              ; preds = %123
  %138 = bitcast float* %134 to i8*
  tail call void @_ZdaPv(i8* %138) #10
  %139 = load i8*, i8** %135, align 8
  %140 = load i64, i64* %37, align 8
  br label %141

141:                                              ; preds = %123, %137
  %142 = phi i64 [ %126, %123 ], [ %140, %137 ]
  %143 = phi i8* [ %132, %123 ], [ %139, %137 ]
  %144 = shl i64 %142, 2
  %145 = add i64 %144, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %143, i8 0, i64 %145, i1 false)
  %146 = load i64, i64* %37, align 8
  %147 = load i32, i32* %38, align 8
  %148 = sext i32 %147 to i64
  %149 = mul i64 %146, %148
  %150 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %149, i64 4)
  %151 = extractvalue { i64, i1 } %150, 1
  %152 = extractvalue { i64, i1 } %150, 0
  %153 = select i1 %151, i64 -1, i64 %152
  %154 = tail call i8* @_Znam(i64 %153) #10
  %155 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %156 = load float*, float** %155, align 8
  %157 = bitcast float** %155 to i8**
  store i8* %154, i8** %157, align 8
  %158 = icmp eq float* %156, null
  br i1 %158, label %165, label %159

159:                                              ; preds = %141
  %160 = bitcast float* %156 to i8*
  tail call void @_ZdaPv(i8* %160) #10
  %161 = load i8*, i8** %157, align 8
  %162 = load i64, i64* %37, align 8
  %163 = load i32, i32* %38, align 8
  %164 = sext i32 %163 to i64
  br label %165

165:                                              ; preds = %141, %159
  %166 = phi i64 [ %148, %141 ], [ %164, %159 ]
  %167 = phi i64 [ %146, %141 ], [ %162, %159 ]
  %168 = phi i8* [ %154, %141 ], [ %161, %159 ]
  %169 = shl i64 %167, 2
  %170 = mul i64 %169, %166
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %168, i8 0, i64 %170, i1 false)
  %171 = load i64, i64* %29, align 8
  %172 = add i64 %171, 2
  %173 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %172, i64 4)
  %174 = extractvalue { i64, i1 } %173, 1
  %175 = extractvalue { i64, i1 } %173, 0
  %176 = select i1 %174, i64 -1, i64 %175
  %177 = tail call i8* @_Znam(i64 %176) #10
  %178 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %179 = load float*, float** %178, align 8
  %180 = bitcast float** %178 to i8**
  store i8* %177, i8** %180, align 8
  %181 = icmp eq float* %179, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %165
  %183 = bitcast float* %179 to i8*
  tail call void @_ZdaPv(i8* %183) #10
  %184 = load i8*, i8** %180, align 8
  %185 = load i64, i64* %29, align 8
  br label %186

186:                                              ; preds = %165, %182
  %187 = phi i64 [ %171, %165 ], [ %185, %182 ]
  %188 = phi i8* [ %177, %165 ], [ %184, %182 ]
  %189 = shl i64 %187, 2
  %190 = add i64 %189, 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %188, i8 0, i64 %190, i1 false)
  %191 = load i64, i64* %37, align 8
  %192 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %191, i64 4)
  %193 = extractvalue { i64, i1 } %192, 1
  %194 = extractvalue { i64, i1 } %192, 0
  %195 = select i1 %193, i64 -1, i64 %194
  %196 = tail call i8* @_Znam(i64 %195) #10
  %197 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %198 = load float*, float** %197, align 8
  %199 = bitcast float** %197 to i8**
  store i8* %196, i8** %199, align 8
  %200 = icmp eq float* %198, null
  br i1 %200, label %205, label %201

201:                                              ; preds = %186
  %202 = bitcast float* %198 to i8*
  tail call void @_ZdaPv(i8* %202) #10
  %203 = load i8*, i8** %199, align 8
  %204 = load i64, i64* %37, align 8
  br label %205

205:                                              ; preds = %186, %201
  %206 = phi i64 [ %191, %186 ], [ %204, %201 ]
  %207 = phi i8* [ %196, %186 ], [ %203, %201 ]
  %208 = shl i64 %206, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %207, i8 0, i64 %208, i1 false)
  %209 = load i64, i64* %37, align 8
  %210 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %209, i64 4)
  %211 = extractvalue { i64, i1 } %210, 1
  %212 = extractvalue { i64, i1 } %210, 0
  %213 = select i1 %211, i64 -1, i64 %212
  %214 = tail call i8* @_Znam(i64 %213) #10
  %215 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %216 = load float*, float** %215, align 8
  %217 = bitcast float** %215 to i8**
  store i8* %214, i8** %217, align 8
  %218 = icmp eq float* %216, null
  br i1 %218, label %222, label %219

219:                                              ; preds = %205
  %220 = bitcast float* %216 to i8*
  tail call void @_ZdaPv(i8* %220) #10
  %221 = load i64, i64* %37, align 8
  br label %222

222:                                              ; preds = %205, %219
  %223 = phi i64 [ %209, %205 ], [ %221, %219 ]
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %231

225:                                              ; preds = %231, %222
  %226 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 19
  %227 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 26
  store i32 0, i32* %227, align 8
  %228 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 27
  %229 = bitcast float* %226 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %229, i8 0, i64 15, i1 false)
  store i32 182, i32* %228, align 4
  %230 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  store i8 0, i8* %230, align 8
  br label %251

231:                                              ; preds = %222, %231
  %232 = phi i64 [ %248, %231 ], [ 0, %222 ]
  %233 = trunc i64 %232 to i32
  %234 = add i32 %233, -3
  %235 = sitofp i32 %234 to float
  %236 = tail call float @expf(float %235) #11
  %237 = fadd float %236, 1.000000e+00
  %238 = fdiv float 1.000000e+01, %237
  %239 = sub i32 60, %233
  %240 = sitofp i32 %239 to float
  %241 = fmul float %240, 0x3FD3333340000000
  %242 = tail call float @expf(float %241) #11
  %243 = fadd float %242, 1.000000e+00
  %244 = fdiv float 1.000000e+01, %243
  %245 = fadd float %238, %244
  %246 = load float*, float** %215, align 8
  %247 = getelementptr inbounds float, float* %246, i64 %232
  store float %245, float* %247, align 4
  %248 = add nuw i64 %232, 1
  %249 = load i64, i64* %37, align 8
  %250 = icmp ult i64 %248, %249
  br i1 %250, label %231, label %225

251:                                              ; preds = %24, %13, %8, %4, %225
  %252 = phi i32 [ 0, %225 ], [ -1, %4 ], [ -1, %8 ], [ -1, %13 ], [ -1, %24 ]
  ret i32 %252
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN6webrtc17TransientDetectorC1Ei(%"class.webrtc::TransientDetector"*, i32) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc23TransientSuppressorImpl8SuppressEPfmiPKfmS3_mfb(%"class.webrtc::TransientSuppressorImpl"*, float*, i64, i32, float*, i64, float*, i64, float, i1 zeroext) unnamed_addr #1 align 2 {
  %11 = icmp eq float* %1, null
  br i1 %11, label %137, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, %2
  br i1 %15, label %16, label %137

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 7
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, %3
  br i1 %19, label %20, label %137

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, %5
  %24 = fcmp olt float %8, 0.000000e+00
  %25 = or i1 %24, %23
  %26 = fcmp ogt float %8, 1.000000e+00
  %27 = or i1 %26, %25
  br i1 %27, label %137, label %28

28:                                               ; preds = %20
  tail call void @_ZN6webrtc23TransientSuppressorImpl14UpdateKeypressEb(%"class.webrtc::TransientSuppressorImpl"* %0, i1 zeroext %9)
  tail call void @_ZN6webrtc23TransientSuppressorImpl13UpdateBuffersEPf(%"class.webrtc::TransientSuppressorImpl"* %0, float* nonnull %1)
  %29 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 22
  %30 = load i8, i8* %29, align 4, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = load i32, i32* %17, align 8
  br label %110

34:                                               ; preds = %28
  %35 = fcmp olt float %8, 0x3F947AE140000000
  %36 = zext i1 %35 to i8
  %37 = zext i1 %35 to i32
  %38 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 24
  %39 = load i8, i8* %38, align 2, !range !2
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %37, %40
  %42 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 26
  br i1 %41, label %54, label %43

43:                                               ; preds = %34
  %44 = load i32, i32* %42, align 8
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %42, align 8
  %46 = icmp ne i8 %39, 0
  %47 = icmp sgt i32 %44, 2
  %48 = and i1 %46, %47
  br i1 %48, label %53, label %49

49:                                               ; preds = %43
  %50 = icmp eq i8 %39, 0
  %51 = icmp sgt i32 %44, 79
  %52 = and i1 %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %49, %43
  store i8 %36, i8* %38, align 2
  br label %54

54:                                               ; preds = %34, %53
  store i32 0, i32* %42, align 8
  br label %55

55:                                               ; preds = %54, %49
  %56 = icmp eq float* %4, null
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 5
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %61 = load float*, float** %60, align 8
  %62 = getelementptr inbounds float, float* %61, i64 %59
  br label %63

63:                                               ; preds = %55, %57
  %64 = phi float* [ %4, %55 ], [ %62, %57 ]
  %65 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %66 = load %"class.webrtc::TransientDetector"*, %"class.webrtc::TransientDetector"** %65, align 8
  %67 = tail call float @_ZN6webrtc17TransientDetector6DetectEPKfmS2_m(%"class.webrtc::TransientDetector"* %66, float* %64, i64 %5, float* %6, i64 %7) #11
  %68 = fcmp olt float %67, 0.000000e+00
  br i1 %68, label %137, label %69

69:                                               ; preds = %63
  %70 = load %"class.webrtc::TransientDetector"*, %"class.webrtc::TransientDetector"** %65, align 8
  %71 = getelementptr inbounds %"class.webrtc::TransientDetector", %"class.webrtc::TransientDetector"* %70, i64 0, i32 11
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  store i8 %72, i8* %74, align 8
  %75 = select i1 %73, float 0x3FB99999A0000000, float 0x3FE3333340000000
  %76 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 19
  %77 = load float, float* %76, align 8
  %78 = fcmp ult float %67, %77
  br i1 %78, label %79, label %84

79:                                               ; preds = %69
  %80 = fmul float %75, %77
  %81 = fsub float 1.000000e+00, %75
  %82 = fmul float %67, %81
  %83 = fadd float %80, %82
  br label %84

84:                                               ; preds = %69, %79
  %85 = phi float [ %83, %79 ], [ %67, %69 ]
  store float %85, float* %76, align 8
  %86 = load i32, i32* %17, align 8
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %137

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  %90 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %91 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 6
  %92 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  br label %94

94:                                               ; preds = %88, %94
  %95 = phi i64 [ 0, %88 ], [ %106, %94 ]
  %96 = load i64, i64* %89, align 8
  %97 = mul i64 %96, %95
  %98 = load float*, float** %90, align 8
  %99 = getelementptr inbounds float, float* %98, i64 %97
  %100 = load i64, i64* %91, align 8
  %101 = mul i64 %100, %95
  %102 = load float*, float** %92, align 8
  %103 = getelementptr inbounds float, float* %102, i64 %101
  %104 = load float*, float** %93, align 8
  %105 = getelementptr inbounds float, float* %104, i64 %97
  tail call void @_ZN6webrtc23TransientSuppressorImpl8SuppressEPfS1_S1_(%"class.webrtc::TransientSuppressorImpl"* %0, float* %99, float* %103, float* %105)
  %106 = add nuw nsw i64 %95, 1
  %107 = load i32, i32* %17, align 8
  %108 = sext i32 %107 to i64
  %109 = icmp slt i64 %106, %108
  br i1 %109, label %94, label %110

110:                                              ; preds = %94, %32
  %111 = phi i32 [ %33, %32 ], [ %107, %94 ]
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %137

113:                                              ; preds = %110
  %114 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 23
  %115 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  %116 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %117 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %118

118:                                              ; preds = %113, %118
  %119 = phi i64 [ 0, %113 ], [ %133, %118 ]
  %120 = load i64, i64* %13, align 8
  %121 = mul i64 %120, %119
  %122 = getelementptr inbounds float, float* %1, i64 %121
  %123 = bitcast float* %122 to i8*
  %124 = load i8, i8* %114, align 1, !range !2
  %125 = icmp eq i8 %124, 0
  %126 = load i64, i64* %115, align 8
  %127 = mul i64 %126, %119
  %128 = select i1 %125, float** %117, float** %116
  %129 = load float*, float** %128, align 8
  %130 = getelementptr inbounds float, float* %129, i64 %127
  %131 = bitcast float* %130 to i8*
  %132 = shl i64 %120, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %131, i64 %132, i1 false)
  %133 = add nuw nsw i64 %119, 1
  %134 = load i32, i32* %17, align 8
  %135 = sext i32 %134 to i64
  %136 = icmp slt i64 %133, %135
  br i1 %136, label %118, label %137

137:                                              ; preds = %118, %84, %110, %63, %20, %10, %12, %16
  %138 = phi i32 [ -1, %16 ], [ -1, %12 ], [ -1, %10 ], [ -1, %20 ], [ -1, %63 ], [ 0, %110 ], [ 0, %84 ], [ 0, %118 ]
  ret i32 %138
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl14UpdateKeypressEb(%"class.webrtc::TransientSuppressorImpl"* nocapture, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %4 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %5 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 20
  %6 = load i32, i32* %5, align 4
  br i1 %1, label %7, label %11

7:                                                ; preds = %2
  %8 = add nsw i32 %6, 100
  store i32 %8, i32* %5, align 4
  %9 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 21
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 22
  store i8 1, i8* %10, align 4
  br label %11

11:                                               ; preds = %2, %7
  %12 = phi i32 [ %8, %7 ], [ %6, %2 ]
  %13 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 20
  %14 = icmp sgt i32 %12, 1
  %15 = select i1 %14, i32 %12, i32 1
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %13, align 4
  %17 = icmp sgt i32 %16, 100
  br i1 %17, label %18, label %28

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 23
  %20 = load i8, i8* %19, align 1, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %18
  %23 = bitcast %"class.rtc::DiagnosticLogMessage"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %23) #11
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %3, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str, i64 0, i64 0), i32 290, i32 3, i32 0, i32 0) #11
  %24 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %3, i64 0, i32 7
  %25 = bitcast %"class.std::__1::basic_ostringstream"* %24 to %"class.std::__1::basic_ostream"*
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %25, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i64 42) #11
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %23) #11
  br label %27

27:                                               ; preds = %18, %22
  store i8 1, i8* %19, align 1
  store i32 0, i32* %13, align 4
  br label %28

28:                                               ; preds = %27, %11
  %29 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 22
  %30 = load i8, i8* %29, align 4, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %47, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 21
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %33, align 8
  %36 = icmp sgt i32 %34, 399
  br i1 %36, label %37, label %47

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 23
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = bitcast %"class.rtc::DiagnosticLogMessage"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %42) #11
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %4, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str, i64 0, i64 0), i32 298, i32 3, i32 0, i32 0) #11
  %43 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %4, i64 0, i32 7
  %44 = bitcast %"class.std::__1::basic_ostringstream"* %43 to %"class.std::__1::basic_ostream"*
  %45 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %44, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i64 43) #11
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %42) #11
  br label %46

46:                                               ; preds = %37, %41
  store i8 0, i8* %29, align 4
  store i8 0, i8* %38, align 1
  store i32 0, i32* %13, align 4
  br label %47

47:                                               ; preds = %28, %46, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl13UpdateBuffersEPf(%"class.webrtc::TransientSuppressorImpl"* nocapture readonly, float* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = bitcast float* %4 to i8*
  %6 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds float, float* %4, i64 %7
  %9 = bitcast float* %8 to i8*
  %10 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, -1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = mul i64 %17, %15
  %19 = add i64 %18, %11
  %20 = shl i64 %19, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %9, i64 %20, i1 false)
  %21 = load i32, i32* %12, align 8
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %28, %2
  %24 = phi i32 [ %21, %2 ], [ %43, %28 ]
  %25 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 22
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %77, label %46

28:                                               ; preds = %2, %28
  %29 = phi i64 [ %42, %28 ], [ 0, %2 ]
  %30 = load i64, i64* %10, align 8
  %31 = load i64, i64* %16, align 8
  %32 = mul i64 %31, %29
  %33 = add i64 %32, %30
  %34 = load float*, float** %3, align 8
  %35 = getelementptr inbounds float, float* %34, i64 %33
  %36 = bitcast float* %35 to i8*
  %37 = load i64, i64* %6, align 8
  %38 = mul i64 %37, %29
  %39 = getelementptr inbounds float, float* %1, i64 %38
  %40 = bitcast float* %39 to i8*
  %41 = shl i64 %37, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %40, i64 %41, i1 false)
  %42 = add nuw nsw i64 %29, 1
  %43 = load i32, i32* %12, align 8
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %28, label %23

46:                                               ; preds = %23
  %47 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %48 = load float*, float** %47, align 8
  %49 = bitcast float* %48 to i8*
  %50 = load i64, i64* %6, align 8
  %51 = getelementptr inbounds float, float* %48, i64 %50
  %52 = bitcast float* %51 to i8*
  %53 = load i64, i64* %10, align 8
  %54 = add nsw i32 %24, -1
  %55 = sext i32 %54 to i64
  %56 = load i64, i64* %16, align 8
  %57 = mul i64 %56, %55
  %58 = add i64 %57, %53
  %59 = shl i64 %58, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %52, i64 %59, i1 false)
  %60 = load i32, i32* %12, align 8
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %77

62:                                               ; preds = %46, %62
  %63 = phi i64 [ %73, %62 ], [ 0, %46 ]
  %64 = load i64, i64* %10, align 8
  %65 = load i64, i64* %16, align 8
  %66 = mul i64 %65, %63
  %67 = add i64 %66, %64
  %68 = load float*, float** %47, align 8
  %69 = getelementptr inbounds float, float* %68, i64 %67
  %70 = bitcast float* %69 to i8*
  %71 = load i64, i64* %6, align 8
  %72 = shl i64 %71, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %70, i8 0, i64 %72, i1 false)
  %73 = add nuw nsw i64 %63, 1
  %74 = load i32, i32* %12, align 8
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %62, label %77

77:                                               ; preds = %62, %46, %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl17UpdateRestorationEf(%"class.webrtc::TransientSuppressorImpl"* nocapture, float) local_unnamed_addr #8 align 2 {
  %3 = fcmp olt float %1, 0x3F947AE140000000
  %4 = zext i1 %3 to i8
  %5 = zext i1 %3 to i32
  %6 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 24
  %7 = load i8, i8* %6, align 2, !range !2
  %8 = zext i8 %7 to i32
  %9 = icmp eq i32 %5, %8
  %10 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 26
  br i1 %9, label %22, label %11

11:                                               ; preds = %2
  %12 = load i32, i32* %10, align 8
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %10, align 8
  %14 = icmp ne i8 %7, 0
  %15 = icmp sgt i32 %12, 2
  %16 = and i1 %14, %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  %18 = icmp eq i8 %7, 0
  %19 = icmp sgt i32 %12, 79
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %17, %11
  store i8 %4, i8* %6, align 2
  br label %22

22:                                               ; preds = %2, %21
  store i32 0, i32* %10, align 8
  br label %23

23:                                               ; preds = %22, %17
  ret void
}

declare float @_ZN6webrtc17TransientDetector6DetectEPKfmS2_m(%"class.webrtc::TransientDetector"*, float*, i64, float*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl8SuppressEPfS1_S1_(%"class.webrtc::TransientSuppressorImpl"*, float* nocapture readonly, float* nocapture, float* nocapture) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 17
  %10 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  br label %37

11:                                               ; preds = %37, %4
  %12 = phi i64 [ 0, %4 ], [ %48, %37 ]
  %13 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 %12, i32 1, float* %14, i64* %16, float* %18) #11
  %19 = load float*, float** %13, align 8
  %20 = getelementptr inbounds float, float* %19, i64 1
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = load i64, i64* %5, align 8
  %24 = getelementptr inbounds float, float* %19, i64 %23
  %25 = bitcast float* %24 to i32*
  store i32 %22, i32* %25, align 4
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, 1
  %28 = load float*, float** %13, align 8
  %29 = getelementptr inbounds float, float* %28, i64 %27
  store float 0.000000e+00, float* %29, align 4
  %30 = load float*, float** %13, align 8
  %31 = getelementptr inbounds float, float* %30, i64 1
  store float 0.000000e+00, float* %31, align 4
  %32 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 6
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %50, label %35

35:                                               ; preds = %11
  %36 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  br label %55

37:                                               ; preds = %8, %37
  %38 = phi i64 [ 0, %8 ], [ %47, %37 ]
  %39 = getelementptr inbounds float, float* %1, i64 %38
  %40 = load float, float* %39, align 4
  %41 = load float*, float** %9, align 8
  %42 = getelementptr inbounds float, float* %41, i64 %38
  %43 = load float, float* %42, align 4
  %44 = fmul float %40, %43
  %45 = load float*, float** %10, align 8
  %46 = getelementptr inbounds float, float* %45, i64 %38
  store float %44, float* %46, align 4
  %47 = add nuw i64 %38, 1
  %48 = load i64, i64* %5, align 8
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %37, label %11

50:                                               ; preds = %55, %11
  %51 = phi i64 [ 0, %11 ], [ %70, %55 ]
  %52 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 23
  %53 = load i8, i8* %52, align 1, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %151, label %72

55:                                               ; preds = %35, %55
  %56 = phi i64 [ 0, %35 ], [ %69, %55 ]
  %57 = shl i64 %56, 1
  %58 = load float*, float** %13, align 8
  %59 = getelementptr inbounds float, float* %58, i64 %57
  %60 = load float, float* %59, align 4
  %61 = or i64 %57, 1
  %62 = getelementptr inbounds float, float* %58, i64 %61
  %63 = load float, float* %62, align 4
  %64 = tail call float @llvm.fabs.f32(float %60) #11
  %65 = tail call float @llvm.fabs.f32(float %63) #11
  %66 = fadd float %64, %65
  %67 = load float*, float** %36, align 8
  %68 = getelementptr inbounds float, float* %67, i64 %56
  store float %66, float* %68, align 4
  %69 = add nuw i64 %56, 1
  %70 = load i64, i64* %32, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %55, label %50

72:                                               ; preds = %50
  %73 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 24
  %74 = load i8, i8* %73, align 2, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %72
  tail call void @_ZN6webrtc23TransientSuppressorImpl15HardRestorationEPf(%"class.webrtc::TransientSuppressorImpl"* %0, float* %2)
  %77 = load i64, i64* %32, align 8
  br label %151

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %80 = load float*, float** %79, align 8
  br label %88

81:                                               ; preds = %88
  %82 = fdiv float %101, 5.700000e+01
  %83 = icmp eq i64 %51, 0
  br i1 %83, label %151, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  %86 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 19
  br label %104

88:                                               ; preds = %88, %78
  %89 = phi float [ 0.000000e+00, %78 ], [ %101, %88 ]
  %90 = phi i64 [ 3, %78 ], [ %102, %88 ]
  %91 = getelementptr inbounds float, float* %80, i64 %90
  %92 = load float, float* %91, align 4
  %93 = fadd float %89, %92
  %94 = add nuw nsw i64 %90, 1
  %95 = getelementptr inbounds float, float* %80, i64 %94
  %96 = load float, float* %95, align 4
  %97 = fadd float %93, %96
  %98 = add nuw nsw i64 %90, 2
  %99 = getelementptr inbounds float, float* %80, i64 %98
  %100 = load float, float* %99, align 4
  %101 = fadd float %97, %100
  %102 = add nuw nsw i64 %90, 3
  %103 = icmp eq i64 %102, 60
  br i1 %103, label %81, label %88

104:                                              ; preds = %149, %84
  %105 = phi i64 [ %51, %84 ], [ %145, %149 ]
  %106 = phi i64 [ %51, %84 ], [ %146, %149 ]
  %107 = phi float* [ %80, %84 ], [ %150, %149 ]
  %108 = phi i64 [ 0, %84 ], [ %147, %149 ]
  %109 = getelementptr inbounds float, float* %107, i64 %108
  %110 = load float, float* %109, align 4
  %111 = getelementptr inbounds float, float* %2, i64 %108
  %112 = load float, float* %111, align 4
  %113 = fcmp ogt float %110, %112
  %114 = fcmp ogt float %110, 0.000000e+00
  %115 = and i1 %114, %113
  br i1 %115, label %116, label %144

116:                                              ; preds = %104
  %117 = load i8, i8* %85, align 8, !range !2
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %125

119:                                              ; preds = %116
  %120 = load float*, float** %86, align 8
  %121 = getelementptr inbounds float, float* %120, i64 %108
  %122 = load float, float* %121, align 4
  %123 = fmul float %82, %122
  %124 = fcmp olt float %110, %123
  br i1 %124, label %125, label %144

125:                                              ; preds = %119, %116
  %126 = load float, float* %87, align 8
  %127 = fsub float %110, %112
  %128 = fmul float %127, %126
  %129 = fsub float %110, %128
  %130 = fdiv float %129, %110
  %131 = shl i64 %108, 1
  %132 = load float*, float** %13, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %131
  %134 = load float, float* %133, align 4
  %135 = fmul float %134, %130
  store float %135, float* %133, align 4
  %136 = or i64 %131, 1
  %137 = load float*, float** %13, align 8
  %138 = getelementptr inbounds float, float* %137, i64 %136
  %139 = load float, float* %138, align 4
  %140 = fmul float %130, %139
  store float %140, float* %138, align 4
  %141 = load float*, float** %79, align 8
  %142 = getelementptr inbounds float, float* %141, i64 %108
  store float %129, float* %142, align 4
  %143 = load i64, i64* %32, align 8
  br label %144

144:                                              ; preds = %125, %119, %104
  %145 = phi i64 [ %105, %104 ], [ %105, %119 ], [ %143, %125 ]
  %146 = phi i64 [ %106, %104 ], [ %106, %119 ], [ %143, %125 ]
  %147 = add nuw i64 %108, 1
  %148 = icmp ult i64 %147, %146
  br i1 %148, label %149, label %151

149:                                              ; preds = %144
  %150 = load float*, float** %79, align 8
  br label %104

151:                                              ; preds = %144, %81, %50, %76
  %152 = phi i64 [ %51, %81 ], [ %51, %50 ], [ %77, %76 ], [ %145, %144 ]
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  br label %174

156:                                              ; preds = %174, %151
  %157 = load i64, i64* %5, align 8
  %158 = load float*, float** %13, align 8
  %159 = getelementptr inbounds float, float* %158, i64 %157
  %160 = bitcast float* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds float, float* %158, i64 1
  %163 = bitcast float* %162 to i32*
  store i32 %161, i32* %163, align 4
  %164 = load i64, i64* %5, align 8
  %165 = load float*, float** %13, align 8
  %166 = load i64*, i64** %15, align 8
  %167 = load float*, float** %17, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 %164, i32 -1, float* %165, i64* %166, float* %167) #11
  %168 = load i64, i64* %5, align 8
  %169 = uitofp i64 %168 to float
  %170 = fdiv float 2.000000e+00, %169
  %171 = icmp eq i64 %168, 0
  br i1 %171, label %187, label %172

172:                                              ; preds = %156
  %173 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 17
  br label %188

174:                                              ; preds = %154, %174
  %175 = phi i64 [ 0, %154 ], [ %184, %174 ]
  %176 = getelementptr inbounds float, float* %2, i64 %175
  %177 = load float, float* %176, align 4
  %178 = fmul float %177, 5.000000e-01
  %179 = load float*, float** %155, align 8
  %180 = getelementptr inbounds float, float* %179, i64 %175
  %181 = load float, float* %180, align 4
  %182 = fmul float %181, 5.000000e-01
  %183 = fadd float %178, %182
  store float %183, float* %176, align 4
  %184 = add nuw i64 %175, 1
  %185 = load i64, i64* %32, align 8
  %186 = icmp ult i64 %184, %185
  br i1 %186, label %174, label %156

187:                                              ; preds = %188, %156
  ret void

188:                                              ; preds = %172, %188
  %189 = phi i64 [ 0, %172 ], [ %201, %188 ]
  %190 = load float*, float** %13, align 8
  %191 = getelementptr inbounds float, float* %190, i64 %189
  %192 = load float, float* %191, align 4
  %193 = load float*, float** %173, align 8
  %194 = getelementptr inbounds float, float* %193, i64 %189
  %195 = load float, float* %194, align 4
  %196 = fmul float %192, %195
  %197 = fmul float %170, %196
  %198 = getelementptr inbounds float, float* %3, i64 %189
  %199 = load float, float* %198, align 4
  %200 = fadd float %199, %197
  store float %200, float* %198, align 4
  %201 = add nuw i64 %189, 1
  %202 = load i64, i64* %5, align 8
  %203 = icmp ult i64 %201, %202
  br i1 %203, label %188, label %187
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

declare void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64, i32, float*, i64*, float*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl15HardRestorationEPf(%"class.webrtc::TransientSuppressorImpl"*, float* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 19
  %4 = load float, float* %3, align 8
  %5 = fsub float 1.000000e+00, %4
  %6 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, float 5.000000e+01, float 2.000000e+02
  %10 = tail call float @powf(float %5, float %9) #11
  %11 = fsub float 1.000000e+00, %10
  %12 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 6
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 27
  %18 = fsub float 1.000000e+00, %11
  %19 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  br label %21

20:                                               ; preds = %67, %2
  ret void

21:                                               ; preds = %15, %67
  %22 = phi i64 [ %13, %15 ], [ %68, %67 ]
  %23 = phi i64 [ 0, %15 ], [ %69, %67 ]
  %24 = load float*, float** %16, align 8
  %25 = getelementptr inbounds float, float* %24, i64 %23
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds float, float* %1, i64 %23
  %28 = load float, float* %27, align 4
  %29 = fcmp ogt float %26, %28
  %30 = fcmp ogt float %26, 0.000000e+00
  %31 = and i1 %30, %29
  br i1 %31, label %32, label %67

32:                                               ; preds = %21
  %33 = tail call signext i16 @WebRtcSpl_RandU(i32* %17) #11
  %34 = sitofp i16 %33 to float
  %35 = fmul float %34, 0x401921FB60000000
  %36 = fdiv float %35, 3.276700e+04
  %37 = load float, float* %27, align 4
  %38 = fmul float %11, %37
  %39 = shl i64 %23, 1
  %40 = load float*, float** %19, align 8
  %41 = getelementptr inbounds float, float* %40, i64 %39
  %42 = load float, float* %41, align 4
  %43 = fmul float %18, %42
  %44 = tail call float @cosf(float %36) #11
  %45 = fmul float %38, %44
  %46 = fadd float %43, %45
  %47 = load float*, float** %19, align 8
  %48 = getelementptr inbounds float, float* %47, i64 %39
  store float %46, float* %48, align 4
  %49 = or i64 %39, 1
  %50 = load float*, float** %19, align 8
  %51 = getelementptr inbounds float, float* %50, i64 %49
  %52 = load float, float* %51, align 4
  %53 = fmul float %18, %52
  %54 = tail call float @sinf(float %36) #11
  %55 = fmul float %38, %54
  %56 = fadd float %53, %55
  %57 = load float*, float** %19, align 8
  %58 = getelementptr inbounds float, float* %57, i64 %49
  store float %56, float* %58, align 4
  %59 = load float*, float** %16, align 8
  %60 = getelementptr inbounds float, float* %59, i64 %23
  %61 = load float, float* %60, align 4
  %62 = load float, float* %27, align 4
  %63 = fsub float %61, %62
  %64 = fmul float %11, %63
  %65 = fsub float %61, %64
  store float %65, float* %60, align 4
  %66 = load i64, i64* %12, align 8
  br label %67

67:                                               ; preds = %21, %32
  %68 = phi i64 [ %22, %21 ], [ %66, %32 ]
  %69 = add nuw i64 %23, 1
  %70 = icmp ult i64 %69, %68
  br i1 %70, label %21, label %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc23TransientSuppressorImpl15SoftRestorationEPf(%"class.webrtc::TransientSuppressorImpl"* nocapture readonly, float* nocapture readonly) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  br label %15

5:                                                ; preds = %15
  %6 = fdiv float %28, 5.700000e+01
  %7 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 6
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 28
  %12 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 19
  %14 = getelementptr inbounds %"class.webrtc::TransientSuppressorImpl", %"class.webrtc::TransientSuppressorImpl"* %0, i64 0, i32 15, i32 0, i32 0, i32 0
  br label %32

15:                                               ; preds = %15, %2
  %16 = phi float [ 0.000000e+00, %2 ], [ %28, %15 ]
  %17 = phi i64 [ 3, %2 ], [ %29, %15 ]
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fadd float %16, %19
  %21 = add nuw nsw i64 %17, 1
  %22 = getelementptr inbounds float, float* %4, i64 %21
  %23 = load float, float* %22, align 4
  %24 = fadd float %20, %23
  %25 = add nuw nsw i64 %17, 2
  %26 = getelementptr inbounds float, float* %4, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fadd float %24, %27
  %29 = add nuw nsw i64 %17, 3
  %30 = icmp eq i64 %29, 60
  br i1 %30, label %5, label %15

31:                                               ; preds = %71, %5
  ret void

32:                                               ; preds = %75, %10
  %33 = phi i64 [ %8, %10 ], [ %72, %75 ]
  %34 = phi float* [ %4, %10 ], [ %76, %75 ]
  %35 = phi i64 [ 0, %10 ], [ %73, %75 ]
  %36 = getelementptr inbounds float, float* %34, i64 %35
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds float, float* %1, i64 %35
  %39 = load float, float* %38, align 4
  %40 = fcmp ogt float %37, %39
  %41 = fcmp ogt float %37, 0.000000e+00
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %71

43:                                               ; preds = %32
  %44 = load i8, i8* %11, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %43
  %47 = load float*, float** %12, align 8
  %48 = getelementptr inbounds float, float* %47, i64 %35
  %49 = load float, float* %48, align 4
  %50 = fmul float %6, %49
  %51 = fcmp olt float %37, %50
  br i1 %51, label %52, label %71

52:                                               ; preds = %43, %46
  %53 = load float, float* %13, align 8
  %54 = fsub float %37, %39
  %55 = fmul float %54, %53
  %56 = fsub float %37, %55
  %57 = fdiv float %56, %37
  %58 = shl i64 %35, 1
  %59 = load float*, float** %14, align 8
  %60 = getelementptr inbounds float, float* %59, i64 %58
  %61 = load float, float* %60, align 4
  %62 = fmul float %61, %57
  store float %62, float* %60, align 4
  %63 = or i64 %58, 1
  %64 = load float*, float** %14, align 8
  %65 = getelementptr inbounds float, float* %64, i64 %63
  %66 = load float, float* %65, align 4
  %67 = fmul float %57, %66
  store float %67, float* %65, align 4
  %68 = load float*, float** %3, align 8
  %69 = getelementptr inbounds float, float* %68, i64 %35
  store float %56, float* %69, align 4
  %70 = load i64, i64* %7, align 8
  br label %71

71:                                               ; preds = %32, %46, %52
  %72 = phi i64 [ %33, %32 ], [ %33, %46 ], [ %70, %52 ]
  %73 = add nuw i64 %35, 1
  %74 = icmp ult i64 %73, %72
  br i1 %74, label %75, label %31

75:                                               ; preds = %71
  %76 = load float*, float** %3, align 8
  br label %32
}

declare void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"*, i8*, i32, i32, i32, i32) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"*) unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

declare signext i16 @WebRtcSpl_RandU(i32*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc17TransientDetectorD1Ev(%"class.webrtc::TransientDetector"*) unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #11
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #11
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #11
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #11
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #11
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #11
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #11
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #11
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #11
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #11
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #9

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #9

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #4

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
