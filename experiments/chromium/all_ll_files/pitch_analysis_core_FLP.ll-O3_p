; ModuleID = '../../third_party/opus/src/silk/float/pitch_analysis_core_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/pitch_analysis_core_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [62 x i8] c"assertion failed: Fs_kHz == 8 || Fs_kHz == 12 || Fs_kHz == 16\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"../../third_party/opus/src/silk/float/pitch_analysis_core_FLP.c\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"assertion failed: complexity >= SILK_PE_MIN_COMPLEX\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"assertion failed: complexity <= SILK_PE_MAX_COMPLEX\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"assertion failed: Fs_kHz == 8\00", align 1
@.str.6 = private unnamed_addr constant [80 x i8] c"assertion failed: target_ptr + sf_length_8kHz <= frame_4kHz + frame_length_4kHz\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"assertion failed: basis_ptr >= frame_4kHz\00", align 1
@.str.8 = private unnamed_addr constant [79 x i8] c"assertion failed: basis_ptr + sf_length_8kHz <= frame_4kHz + frame_length_4kHz\00", align 1
@.str.9 = private unnamed_addr constant [56 x i8] c"assertion failed: 3 * length_d_srch <= PE_D_SRCH_LENGTH\00", align 1
@.str.10 = private unnamed_addr constant [36 x i8] c"assertion failed: length_d_srch > 0\00", align 1
@silk_CB_lags_stage2 = external local_unnamed_addr constant [4 x [11 x i8]], align 16
@silk_CB_lags_stage2_10_ms = external local_unnamed_addr constant [2 x [3 x i8]], align 1
@silk_nb_cbk_searchs_stage3 = external local_unnamed_addr constant [3 x i8], align 1
@silk_CB_lags_stage3 = external local_unnamed_addr constant [4 x [34 x i8]], align 16
@silk_CB_lags_stage3_10_ms = external local_unnamed_addr constant [2 x [12 x i8]], align 16
@.str.11 = private unnamed_addr constant [33 x i8] c"assertion failed: *lagIndex >= 0\00", align 1
@silk_Lag_range_stage3 = external local_unnamed_addr constant [3 x [4 x [2 x i8]]], align 16
@.str.12 = private unnamed_addr constant [51 x i8] c"assertion failed: nb_subfr == PE_MAX_NB_SUBFR >> 1\00", align 1
@silk_Lag_range_stage3_10_ms = external local_unnamed_addr constant [2 x [2 x i8]], align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_pitch_analysis_core_FLP(float*, i32* nocapture, i16* nocapture, i8* nocapture, float* nocapture, i32, float, float, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = bitcast i32* %1 to i8*
  %14 = alloca [22 x float], align 16
  %15 = alloca [22 x float], align 16
  %16 = alloca [320 x float], align 16
  %17 = alloca [160 x float], align 16
  %18 = alloca [320 x i16], align 16
  %19 = alloca [160 x i16], align 16
  %20 = alloca [6 x i32], align 16
  %21 = alloca [4 x [149 x float]], align 16
  %22 = alloca [65 x float], align 16
  %23 = alloca [11 x float], align 16
  %24 = bitcast [11 x float]* %23 to i8*
  %25 = alloca [24 x i32], align 16
  %26 = alloca [149 x i16], align 16
  %27 = alloca [4 x [34 x [5 x float]]], align 16
  %28 = alloca [4 x [34 x [5 x float]]], align 16
  %29 = alloca [640 x i16], align 16
  %30 = alloca [480 x i16], align 16
  %31 = bitcast [320 x float]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %31) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -1, i64 1280, i1 false)
  %32 = bitcast [160 x float]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 640, i8* nonnull %32) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -1, i64 640, i1 false)
  %33 = bitcast [320 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 640, i8* nonnull %33) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 640, i1 false)
  %34 = bitcast [160 x i16]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %34) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 320, i1 false)
  %35 = bitcast [6 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #6
  %36 = getelementptr inbounds [6 x i32], [6 x i32]* %20, i64 0, i64 0
  %37 = bitcast [4 x [149 x float]]* %21 to i8*
  %38 = bitcast [6 x i32]* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2384, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -1, i64 2384, i1 false)
  %39 = bitcast [65 x float]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 260, i8* nonnull %39) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -1, i64 260, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -1, i64 44, i1 false)
  %40 = bitcast [24 x i32]* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %40) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -86, i64 96, i1 false)
  %41 = bitcast [149 x i16]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 298, i8* nonnull %41) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 298, i1 false)
  %42 = bitcast [4 x [34 x [5 x float]]]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2720, i8* nonnull %42) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -1, i64 2720, i1 false)
  %43 = bitcast [4 x [34 x [5 x float]]]* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2720, i8* nonnull %43) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 -1, i64 2720, i1 false)
  %44 = icmp eq i32 %8, 8
  %45 = icmp eq i32 %8, 12
  %46 = icmp eq i32 %8, 16
  switch i32 %8, label %47 [
    i32 16, label %48
    i32 12, label %48
    i32 8, label %48
  ]

47:                                               ; preds = %12
  tail call void @celt_fatal(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 112) #7
  unreachable

48:                                               ; preds = %12, %12, %12
  %49 = icmp sgt i32 %9, -1
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  tail call void @celt_fatal(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 115) #7
  unreachable

51:                                               ; preds = %48
  %52 = icmp slt i32 %9, 3
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  tail call void @celt_fatal(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 116) #7
  unreachable

54:                                               ; preds = %51
  %55 = mul nsw i32 %10, 5
  %56 = add nsw i32 %55, 20
  %57 = mul nsw i32 %56, %8
  %58 = shl nsw i32 %56, 2
  %59 = shl nsw i32 %56, 3
  %60 = mul nsw i32 %8, 5
  %61 = shl nsw i32 %8, 1
  %62 = mul nsw i32 %8, 18
  %63 = add nsw i32 %62, -1
  br i1 %46, label %64, label %216

64:                                               ; preds = %54
  %65 = bitcast [640 x i16]* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %65) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 1280, i1 false)
  %66 = getelementptr inbounds [640 x i16], [640 x i16]* %29, i64 0, i64 0
  %67 = icmp sgt i32 %57, 0
  br i1 %67, label %68, label %112

68:                                               ; preds = %64
  %69 = sext i32 %57 to i64
  %70 = and i64 %69, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %84, label %72

72:                                               ; preds = %68
  %73 = add nsw i64 %69, -1
  %74 = getelementptr inbounds float, float* %0, i64 %73
  %75 = load float, float* %74, align 4
  %76 = insertelement <4 x float> undef, float %75, i32 0
  %77 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %76) #6
  %78 = icmp sgt i32 %77, -32768
  %79 = select i1 %78, i32 %77, i32 -32768
  %80 = icmp slt i32 %79, 32767
  %81 = select i1 %80, i32 %79, i32 32767
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds [640 x i16], [640 x i16]* %29, i64 0, i64 %73
  store i16 %82, i16* %83, align 2
  br label %84

84:                                               ; preds = %68, %72
  %85 = phi i64 [ %69, %68 ], [ %73, %72 ]
  %86 = icmp eq i32 %57, 1
  br i1 %86, label %112, label %87

87:                                               ; preds = %84, %87
  %88 = phi i64 [ %100, %87 ], [ %85, %84 ]
  %89 = add nsw i64 %88, -1
  %90 = getelementptr inbounds float, float* %0, i64 %89
  %91 = load float, float* %90, align 4
  %92 = insertelement <4 x float> undef, float %91, i32 0
  %93 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %92) #6
  %94 = icmp sgt i32 %93, -32768
  %95 = select i1 %94, i32 %93, i32 -32768
  %96 = icmp slt i32 %95, 32767
  %97 = select i1 %96, i32 %95, i32 32767
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds [640 x i16], [640 x i16]* %29, i64 0, i64 %89
  store i16 %98, i16* %99, align 2
  %100 = add nsw i64 %88, -2
  %101 = getelementptr inbounds float, float* %0, i64 %100
  %102 = load float, float* %101, align 4
  %103 = insertelement <4 x float> undef, float %102, i32 0
  %104 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %103) #6
  %105 = icmp sgt i32 %104, -32768
  %106 = select i1 %105, i32 %104, i32 -32768
  %107 = icmp slt i32 %106, 32767
  %108 = select i1 %107, i32 %106, i32 32767
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds [640 x i16], [640 x i16]* %29, i64 0, i64 %100
  store i16 %109, i16* %110, align 2
  %111 = icmp sgt i64 %100, 0
  br i1 %111, label %87, label %112

112:                                              ; preds = %84, %87, %64
  %113 = bitcast [6 x i32]* %20 to i64*
  store i64 0, i64* %113, align 16
  %114 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 0
  call void @silk_resampler_down2(i32* nonnull %36, i16* nonnull %114, i16* nonnull %66, i32 %57) #6
  %115 = icmp sgt i32 %56, 0
  br i1 %115, label %116, label %215

116:                                              ; preds = %112
  %117 = sext i32 %59 to i64
  %118 = icmp slt i64 %117, 1
  %119 = select i1 %118, i64 %117, i64 1
  %120 = add nsw i64 %119, -1
  %121 = sub nsw i64 %117, %120
  %122 = icmp ult i64 %121, 8
  br i1 %122, label %205, label %123

123:                                              ; preds = %116
  %124 = and i64 %121, -8
  %125 = sub nsw i64 %117, %124
  %126 = add nsw i64 %124, -8
  %127 = lshr exact i64 %126, 3
  %128 = add nuw nsw i64 %127, 1
  %129 = and i64 %128, 1
  %130 = icmp eq i64 %126, 0
  br i1 %130, label %179, label %131

131:                                              ; preds = %123
  %132 = sub nuw nsw i64 %128, %129
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i64 [ 0, %131 ], [ %176, %133 ]
  %135 = phi i64 [ %132, %131 ], [ %177, %133 ]
  %136 = xor i64 %134, -1
  %137 = add i64 %136, %117
  %138 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %137
  %139 = getelementptr inbounds i16, i16* %138, i64 -3
  %140 = bitcast i16* %139 to <4 x i16>*
  %141 = load <4 x i16>, <4 x i16>* %140, align 2
  %142 = shufflevector <4 x i16> %141, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %143 = getelementptr inbounds i16, i16* %138, i64 -7
  %144 = bitcast i16* %143 to <4 x i16>*
  %145 = load <4 x i16>, <4 x i16>* %144, align 2
  %146 = shufflevector <4 x i16> %145, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %147 = sitofp <4 x i16> %142 to <4 x float>
  %148 = sitofp <4 x i16> %146 to <4 x float>
  %149 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %137
  %150 = shufflevector <4 x float> %147, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %151 = getelementptr inbounds float, float* %149, i64 -3
  %152 = bitcast float* %151 to <4 x float>*
  store <4 x float> %150, <4 x float>* %152, align 4
  %153 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %154 = getelementptr inbounds float, float* %149, i64 -7
  %155 = bitcast float* %154 to <4 x float>*
  store <4 x float> %153, <4 x float>* %155, align 4
  %156 = sub nuw nsw i64 -9, %134
  %157 = add i64 %156, %117
  %158 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %157
  %159 = getelementptr inbounds i16, i16* %158, i64 -3
  %160 = bitcast i16* %159 to <4 x i16>*
  %161 = load <4 x i16>, <4 x i16>* %160, align 2
  %162 = shufflevector <4 x i16> %161, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %163 = getelementptr inbounds i16, i16* %158, i64 -7
  %164 = bitcast i16* %163 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2
  %166 = shufflevector <4 x i16> %165, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %167 = sitofp <4 x i16> %162 to <4 x float>
  %168 = sitofp <4 x i16> %166 to <4 x float>
  %169 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %157
  %170 = shufflevector <4 x float> %167, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %171 = getelementptr inbounds float, float* %169, i64 -3
  %172 = bitcast float* %171 to <4 x float>*
  store <4 x float> %170, <4 x float>* %172, align 4
  %173 = shufflevector <4 x float> %168, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %174 = getelementptr inbounds float, float* %169, i64 -7
  %175 = bitcast float* %174 to <4 x float>*
  store <4 x float> %173, <4 x float>* %175, align 4
  %176 = add i64 %134, 16
  %177 = add i64 %135, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %133, !llvm.loop !2

179:                                              ; preds = %133, %123
  %180 = phi i64 [ 0, %123 ], [ %176, %133 ]
  %181 = icmp eq i64 %129, 0
  br i1 %181, label %203, label %182

182:                                              ; preds = %179
  %183 = xor i64 %180, -1
  %184 = add i64 %183, %117
  %185 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %184
  %186 = getelementptr inbounds i16, i16* %185, i64 -3
  %187 = bitcast i16* %186 to <4 x i16>*
  %188 = load <4 x i16>, <4 x i16>* %187, align 2
  %189 = shufflevector <4 x i16> %188, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %190 = getelementptr inbounds i16, i16* %185, i64 -7
  %191 = bitcast i16* %190 to <4 x i16>*
  %192 = load <4 x i16>, <4 x i16>* %191, align 2
  %193 = shufflevector <4 x i16> %192, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %194 = sitofp <4 x i16> %189 to <4 x float>
  %195 = sitofp <4 x i16> %193 to <4 x float>
  %196 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %184
  %197 = shufflevector <4 x float> %194, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %198 = getelementptr inbounds float, float* %196, i64 -3
  %199 = bitcast float* %198 to <4 x float>*
  store <4 x float> %197, <4 x float>* %199, align 4
  %200 = shufflevector <4 x float> %195, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %201 = getelementptr inbounds float, float* %196, i64 -7
  %202 = bitcast float* %201 to <4 x float>*
  store <4 x float> %200, <4 x float>* %202, align 4
  br label %203

203:                                              ; preds = %179, %182
  %204 = icmp eq i64 %121, %124
  br i1 %204, label %215, label %205

205:                                              ; preds = %203, %116
  %206 = phi i64 [ %117, %116 ], [ %125, %203 ]
  br label %207

207:                                              ; preds = %205, %207
  %208 = phi i64 [ %209, %207 ], [ %206, %205 ]
  %209 = add nsw i64 %208, -1
  %210 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %209
  %211 = load i16, i16* %210, align 2
  %212 = sitofp i16 %211 to float
  %213 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %209
  store float %212, float* %213, align 4
  %214 = icmp sgt i64 %209, 0
  br i1 %214, label %207, label %215, !llvm.loop !4

215:                                              ; preds = %207, %203, %112
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %65) #6
  br label %388

216:                                              ; preds = %54
  br i1 %45, label %217, label %368

217:                                              ; preds = %216
  %218 = bitcast [480 x i16]* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %218) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %218, i8 -86, i64 960, i1 false)
  %219 = getelementptr inbounds [480 x i16], [480 x i16]* %30, i64 0, i64 0
  %220 = icmp sgt i32 %57, 0
  br i1 %220, label %221, label %265

221:                                              ; preds = %217
  %222 = sext i32 %57 to i64
  %223 = and i64 %222, 1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %237, label %225

225:                                              ; preds = %221
  %226 = add nsw i64 %222, -1
  %227 = getelementptr inbounds float, float* %0, i64 %226
  %228 = load float, float* %227, align 4
  %229 = insertelement <4 x float> undef, float %228, i32 0
  %230 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %229) #6
  %231 = icmp sgt i32 %230, -32768
  %232 = select i1 %231, i32 %230, i32 -32768
  %233 = icmp slt i32 %232, 32767
  %234 = select i1 %233, i32 %232, i32 32767
  %235 = trunc i32 %234 to i16
  %236 = getelementptr inbounds [480 x i16], [480 x i16]* %30, i64 0, i64 %226
  store i16 %235, i16* %236, align 2
  br label %237

237:                                              ; preds = %221, %225
  %238 = phi i64 [ %222, %221 ], [ %226, %225 ]
  %239 = icmp eq i32 %57, 1
  br i1 %239, label %265, label %240

240:                                              ; preds = %237, %240
  %241 = phi i64 [ %253, %240 ], [ %238, %237 ]
  %242 = add nsw i64 %241, -1
  %243 = getelementptr inbounds float, float* %0, i64 %242
  %244 = load float, float* %243, align 4
  %245 = insertelement <4 x float> undef, float %244, i32 0
  %246 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %245) #6
  %247 = icmp sgt i32 %246, -32768
  %248 = select i1 %247, i32 %246, i32 -32768
  %249 = icmp slt i32 %248, 32767
  %250 = select i1 %249, i32 %248, i32 32767
  %251 = trunc i32 %250 to i16
  %252 = getelementptr inbounds [480 x i16], [480 x i16]* %30, i64 0, i64 %242
  store i16 %251, i16* %252, align 2
  %253 = add nsw i64 %241, -2
  %254 = getelementptr inbounds float, float* %0, i64 %253
  %255 = load float, float* %254, align 4
  %256 = insertelement <4 x float> undef, float %255, i32 0
  %257 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %256) #6
  %258 = icmp sgt i32 %257, -32768
  %259 = select i1 %258, i32 %257, i32 -32768
  %260 = icmp slt i32 %259, 32767
  %261 = select i1 %260, i32 %259, i32 32767
  %262 = trunc i32 %261 to i16
  %263 = getelementptr inbounds [480 x i16], [480 x i16]* %30, i64 0, i64 %253
  store i16 %262, i16* %263, align 2
  %264 = icmp sgt i64 %253, 0
  br i1 %264, label %240, label %265

265:                                              ; preds = %237, %240, %217
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 24, i1 false)
  %266 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 0
  call void @silk_resampler_down2_3(i32* nonnull %36, i16* nonnull %266, i16* nonnull %219, i32 %57) #6
  %267 = icmp sgt i32 %56, 0
  br i1 %267, label %268, label %367

268:                                              ; preds = %265
  %269 = sext i32 %59 to i64
  %270 = icmp slt i64 %269, 1
  %271 = select i1 %270, i64 %269, i64 1
  %272 = add nsw i64 %271, -1
  %273 = sub nsw i64 %269, %272
  %274 = icmp ult i64 %273, 8
  br i1 %274, label %357, label %275

275:                                              ; preds = %268
  %276 = and i64 %273, -8
  %277 = sub nsw i64 %269, %276
  %278 = add nsw i64 %276, -8
  %279 = lshr exact i64 %278, 3
  %280 = add nuw nsw i64 %279, 1
  %281 = and i64 %280, 1
  %282 = icmp eq i64 %278, 0
  br i1 %282, label %331, label %283

283:                                              ; preds = %275
  %284 = sub nuw nsw i64 %280, %281
  br label %285

285:                                              ; preds = %285, %283
  %286 = phi i64 [ 0, %283 ], [ %328, %285 ]
  %287 = phi i64 [ %284, %283 ], [ %329, %285 ]
  %288 = xor i64 %286, -1
  %289 = add i64 %288, %269
  %290 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %289
  %291 = getelementptr inbounds i16, i16* %290, i64 -3
  %292 = bitcast i16* %291 to <4 x i16>*
  %293 = load <4 x i16>, <4 x i16>* %292, align 2
  %294 = shufflevector <4 x i16> %293, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %295 = getelementptr inbounds i16, i16* %290, i64 -7
  %296 = bitcast i16* %295 to <4 x i16>*
  %297 = load <4 x i16>, <4 x i16>* %296, align 2
  %298 = shufflevector <4 x i16> %297, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %299 = sitofp <4 x i16> %294 to <4 x float>
  %300 = sitofp <4 x i16> %298 to <4 x float>
  %301 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %289
  %302 = shufflevector <4 x float> %299, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %303 = getelementptr inbounds float, float* %301, i64 -3
  %304 = bitcast float* %303 to <4 x float>*
  store <4 x float> %302, <4 x float>* %304, align 4
  %305 = shufflevector <4 x float> %300, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %306 = getelementptr inbounds float, float* %301, i64 -7
  %307 = bitcast float* %306 to <4 x float>*
  store <4 x float> %305, <4 x float>* %307, align 4
  %308 = sub nuw nsw i64 -9, %286
  %309 = add i64 %308, %269
  %310 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %309
  %311 = getelementptr inbounds i16, i16* %310, i64 -3
  %312 = bitcast i16* %311 to <4 x i16>*
  %313 = load <4 x i16>, <4 x i16>* %312, align 2
  %314 = shufflevector <4 x i16> %313, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %315 = getelementptr inbounds i16, i16* %310, i64 -7
  %316 = bitcast i16* %315 to <4 x i16>*
  %317 = load <4 x i16>, <4 x i16>* %316, align 2
  %318 = shufflevector <4 x i16> %317, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %319 = sitofp <4 x i16> %314 to <4 x float>
  %320 = sitofp <4 x i16> %318 to <4 x float>
  %321 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %309
  %322 = shufflevector <4 x float> %319, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %323 = getelementptr inbounds float, float* %321, i64 -3
  %324 = bitcast float* %323 to <4 x float>*
  store <4 x float> %322, <4 x float>* %324, align 4
  %325 = shufflevector <4 x float> %320, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %326 = getelementptr inbounds float, float* %321, i64 -7
  %327 = bitcast float* %326 to <4 x float>*
  store <4 x float> %325, <4 x float>* %327, align 4
  %328 = add i64 %286, 16
  %329 = add i64 %287, -2
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %285, !llvm.loop !6

331:                                              ; preds = %285, %275
  %332 = phi i64 [ 0, %275 ], [ %328, %285 ]
  %333 = icmp eq i64 %281, 0
  br i1 %333, label %355, label %334

334:                                              ; preds = %331
  %335 = xor i64 %332, -1
  %336 = add i64 %335, %269
  %337 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %336
  %338 = getelementptr inbounds i16, i16* %337, i64 -3
  %339 = bitcast i16* %338 to <4 x i16>*
  %340 = load <4 x i16>, <4 x i16>* %339, align 2
  %341 = shufflevector <4 x i16> %340, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %342 = getelementptr inbounds i16, i16* %337, i64 -7
  %343 = bitcast i16* %342 to <4 x i16>*
  %344 = load <4 x i16>, <4 x i16>* %343, align 2
  %345 = shufflevector <4 x i16> %344, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %346 = sitofp <4 x i16> %341 to <4 x float>
  %347 = sitofp <4 x i16> %345 to <4 x float>
  %348 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %336
  %349 = shufflevector <4 x float> %346, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %350 = getelementptr inbounds float, float* %348, i64 -3
  %351 = bitcast float* %350 to <4 x float>*
  store <4 x float> %349, <4 x float>* %351, align 4
  %352 = shufflevector <4 x float> %347, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %353 = getelementptr inbounds float, float* %348, i64 -7
  %354 = bitcast float* %353 to <4 x float>*
  store <4 x float> %352, <4 x float>* %354, align 4
  br label %355

355:                                              ; preds = %331, %334
  %356 = icmp eq i64 %273, %276
  br i1 %356, label %367, label %357

357:                                              ; preds = %355, %268
  %358 = phi i64 [ %269, %268 ], [ %277, %355 ]
  br label %359

359:                                              ; preds = %357, %359
  %360 = phi i64 [ %361, %359 ], [ %358, %357 ]
  %361 = add nsw i64 %360, -1
  %362 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %361
  %363 = load i16, i16* %362, align 2
  %364 = sitofp i16 %363 to float
  %365 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 %361
  store float %364, float* %365, align 4
  %366 = icmp sgt i64 %361, 0
  br i1 %366, label %359, label %367, !llvm.loop !7

367:                                              ; preds = %359, %355, %265
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %218) #6
  br label %388

368:                                              ; preds = %216
  br i1 %44, label %370, label %369

369:                                              ; preds = %368
  tail call void @celt_fatal(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 151) #7
  unreachable

370:                                              ; preds = %368
  %371 = icmp sgt i32 %56, 0
  br i1 %371, label %372, label %388

372:                                              ; preds = %370
  %373 = sext i32 %59 to i64
  br label %374

374:                                              ; preds = %374, %372
  %375 = phi i64 [ %373, %372 ], [ %376, %374 ]
  %376 = add nsw i64 %375, -1
  %377 = getelementptr inbounds float, float* %0, i64 %376
  %378 = load float, float* %377, align 4
  %379 = insertelement <4 x float> undef, float %378, i32 0
  %380 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %379) #6
  %381 = icmp sgt i32 %380, -32768
  %382 = select i1 %381, i32 %380, i32 -32768
  %383 = icmp slt i32 %382, 32767
  %384 = select i1 %383, i32 %382, i32 32767
  %385 = trunc i32 %384 to i16
  %386 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 %376
  store i16 %385, i16* %386, align 2
  %387 = icmp sgt i64 %376, 0
  br i1 %387, label %374, label %388

388:                                              ; preds = %374, %370, %367, %215
  %389 = bitcast [6 x i32]* %20 to i64*
  store i64 0, i64* %389, align 16
  %390 = getelementptr inbounds [160 x i16], [160 x i16]* %19, i64 0, i64 0
  %391 = getelementptr inbounds [320 x i16], [320 x i16]* %18, i64 0, i64 0
  call void @silk_resampler_down2(i32* nonnull %36, i16* nonnull %390, i16* nonnull %391, i32 %59) #6
  %392 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 0
  %393 = icmp sgt i32 %56, 0
  br i1 %393, label %394, label %523

394:                                              ; preds = %388
  %395 = sext i32 %58 to i64
  %396 = icmp slt i64 %395, 1
  %397 = select i1 %396, i64 %395, i64 1
  %398 = add nsw i64 %397, -1
  %399 = sub nsw i64 %395, %398
  %400 = icmp ult i64 %399, 8
  br i1 %400, label %483, label %401

401:                                              ; preds = %394
  %402 = and i64 %399, -8
  %403 = sub nsw i64 %395, %402
  %404 = add nsw i64 %402, -8
  %405 = lshr exact i64 %404, 3
  %406 = add nuw nsw i64 %405, 1
  %407 = and i64 %406, 1
  %408 = icmp eq i64 %404, 0
  br i1 %408, label %457, label %409

409:                                              ; preds = %401
  %410 = sub nuw nsw i64 %406, %407
  br label %411

411:                                              ; preds = %411, %409
  %412 = phi i64 [ 0, %409 ], [ %454, %411 ]
  %413 = phi i64 [ %410, %409 ], [ %455, %411 ]
  %414 = xor i64 %412, -1
  %415 = add i64 %414, %395
  %416 = getelementptr inbounds [160 x i16], [160 x i16]* %19, i64 0, i64 %415
  %417 = getelementptr inbounds i16, i16* %416, i64 -3
  %418 = bitcast i16* %417 to <4 x i16>*
  %419 = load <4 x i16>, <4 x i16>* %418, align 2
  %420 = shufflevector <4 x i16> %419, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %421 = getelementptr inbounds i16, i16* %416, i64 -7
  %422 = bitcast i16* %421 to <4 x i16>*
  %423 = load <4 x i16>, <4 x i16>* %422, align 2
  %424 = shufflevector <4 x i16> %423, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %425 = sitofp <4 x i16> %420 to <4 x float>
  %426 = sitofp <4 x i16> %424 to <4 x float>
  %427 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %415
  %428 = shufflevector <4 x float> %425, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %429 = getelementptr inbounds float, float* %427, i64 -3
  %430 = bitcast float* %429 to <4 x float>*
  store <4 x float> %428, <4 x float>* %430, align 4
  %431 = shufflevector <4 x float> %426, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %432 = getelementptr inbounds float, float* %427, i64 -7
  %433 = bitcast float* %432 to <4 x float>*
  store <4 x float> %431, <4 x float>* %433, align 4
  %434 = sub nuw nsw i64 -9, %412
  %435 = add i64 %434, %395
  %436 = getelementptr inbounds [160 x i16], [160 x i16]* %19, i64 0, i64 %435
  %437 = getelementptr inbounds i16, i16* %436, i64 -3
  %438 = bitcast i16* %437 to <4 x i16>*
  %439 = load <4 x i16>, <4 x i16>* %438, align 2
  %440 = shufflevector <4 x i16> %439, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %441 = getelementptr inbounds i16, i16* %436, i64 -7
  %442 = bitcast i16* %441 to <4 x i16>*
  %443 = load <4 x i16>, <4 x i16>* %442, align 2
  %444 = shufflevector <4 x i16> %443, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %445 = sitofp <4 x i16> %440 to <4 x float>
  %446 = sitofp <4 x i16> %444 to <4 x float>
  %447 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %435
  %448 = shufflevector <4 x float> %445, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %449 = getelementptr inbounds float, float* %447, i64 -3
  %450 = bitcast float* %449 to <4 x float>*
  store <4 x float> %448, <4 x float>* %450, align 4
  %451 = shufflevector <4 x float> %446, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %452 = getelementptr inbounds float, float* %447, i64 -7
  %453 = bitcast float* %452 to <4 x float>*
  store <4 x float> %451, <4 x float>* %453, align 4
  %454 = add i64 %412, 16
  %455 = add i64 %413, -2
  %456 = icmp eq i64 %455, 0
  br i1 %456, label %457, label %411, !llvm.loop !8

457:                                              ; preds = %411, %401
  %458 = phi i64 [ 0, %401 ], [ %454, %411 ]
  %459 = icmp eq i64 %407, 0
  br i1 %459, label %481, label %460

460:                                              ; preds = %457
  %461 = xor i64 %458, -1
  %462 = add i64 %461, %395
  %463 = getelementptr inbounds [160 x i16], [160 x i16]* %19, i64 0, i64 %462
  %464 = getelementptr inbounds i16, i16* %463, i64 -3
  %465 = bitcast i16* %464 to <4 x i16>*
  %466 = load <4 x i16>, <4 x i16>* %465, align 2
  %467 = shufflevector <4 x i16> %466, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %468 = getelementptr inbounds i16, i16* %463, i64 -7
  %469 = bitcast i16* %468 to <4 x i16>*
  %470 = load <4 x i16>, <4 x i16>* %469, align 2
  %471 = shufflevector <4 x i16> %470, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %472 = sitofp <4 x i16> %467 to <4 x float>
  %473 = sitofp <4 x i16> %471 to <4 x float>
  %474 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %462
  %475 = shufflevector <4 x float> %472, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %476 = getelementptr inbounds float, float* %474, i64 -3
  %477 = bitcast float* %476 to <4 x float>*
  store <4 x float> %475, <4 x float>* %477, align 4
  %478 = shufflevector <4 x float> %473, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %479 = getelementptr inbounds float, float* %474, i64 -7
  %480 = bitcast float* %479 to <4 x float>*
  store <4 x float> %478, <4 x float>* %480, align 4
  br label %481

481:                                              ; preds = %457, %460
  %482 = icmp eq i64 %399, %402
  br i1 %482, label %493, label %483

483:                                              ; preds = %481, %394
  %484 = phi i64 [ %395, %394 ], [ %403, %481 ]
  br label %485

485:                                              ; preds = %483, %485
  %486 = phi i64 [ %487, %485 ], [ %484, %483 ]
  %487 = add nsw i64 %486, -1
  %488 = getelementptr inbounds [160 x i16], [160 x i16]* %19, i64 0, i64 %487
  %489 = load i16, i16* %488, align 2
  %490 = sitofp i16 %489 to float
  %491 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %487
  store float %490, float* %491, align 4
  %492 = icmp sgt i64 %487, 0
  br i1 %492, label %485, label %493, !llvm.loop !9

493:                                              ; preds = %485, %481
  %494 = icmp sgt i32 %56, 0
  br i1 %494, label %495, label %523

495:                                              ; preds = %493
  %496 = mul i32 %10, 20
  %497 = add i32 %496, 76
  %498 = or i32 %497, 3
  %499 = sext i32 %498 to i64
  br label %500

500:                                              ; preds = %495, %516
  %501 = phi i64 [ %499, %495 ], [ %520, %516 ]
  %502 = phi i32 [ %58, %495 ], [ %522, %516 ]
  %503 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %501
  %504 = load float, float* %503, align 4
  %505 = fptosi float %504 to i32
  %506 = sitofp i32 %505 to float
  %507 = add nsw i32 %502, -2
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %508
  %510 = load float, float* %509, align 4
  %511 = fadd float %510, %506
  %512 = fcmp ogt float %511, 3.276700e+04
  br i1 %512, label %516, label %513

513:                                              ; preds = %500
  %514 = fcmp olt float %511, -3.276800e+04
  br i1 %514, label %516, label %515

515:                                              ; preds = %513
  br label %516

516:                                              ; preds = %515, %513, %500
  %517 = phi float [ 3.276700e+04, %500 ], [ %511, %515 ], [ -3.276800e+04, %513 ]
  %518 = fptosi float %517 to i16
  %519 = sitofp i16 %518 to float
  store float %519, float* %503, align 4
  %520 = add nsw i64 %501, -1
  %521 = icmp sgt i64 %520, 0
  %522 = trunc i64 %501 to i32
  br i1 %521, label %500, label %523

523:                                              ; preds = %516, %388, %493
  %524 = sext i32 %10 to i64
  %525 = shl nsw i64 %524, 2
  %526 = mul nsw i64 %524, 596
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 %526, i1 false)
  %527 = ashr i32 %10, 1
  %528 = icmp sgt i32 %10, 1
  br i1 %528, label %529, label %594

529:                                              ; preds = %523
  %530 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 80
  %531 = sext i32 %58 to i64
  %532 = getelementptr inbounds [160 x float], [160 x float]* %17, i64 0, i64 %531
  %533 = getelementptr inbounds [65 x float], [65 x float]* %22, i64 0, i64 0
  %534 = getelementptr inbounds [65 x float], [65 x float]* %22, i64 0, i64 64
  %535 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 8
  br label %536

536:                                              ; preds = %591, %529
  %537 = phi float* [ %530, %529 ], [ %539, %591 ]
  %538 = phi i32 [ 0, %529 ], [ %592, %591 ]
  %539 = getelementptr inbounds float, float* %537, i64 40
  %540 = icmp ugt float* %539, %532
  br i1 %540, label %541, label %542

541:                                              ; preds = %536
  call void @celt_fatal(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 173) #7
  unreachable

542:                                              ; preds = %536
  %543 = getelementptr inbounds float, float* %537, i64 -8
  %544 = icmp ult float* %543, %392
  br i1 %544, label %545, label %546

545:                                              ; preds = %542
  call void @celt_fatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 178) #7
  unreachable

546:                                              ; preds = %542
  %547 = getelementptr inbounds float, float* %537, i64 32
  %548 = icmp ugt float* %547, %532
  br i1 %548, label %549, label %550

549:                                              ; preds = %546
  call void @celt_fatal(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 179) #7
  unreachable

550:                                              ; preds = %546
  %551 = getelementptr inbounds float, float* %537, i64 -72
  call void @celt_pitch_xcorr_c(float* %537, float* %551, float* nonnull %533, i32 40, i32 65, i32 %11) #6
  %552 = load float, float* %534, align 16
  %553 = fpext float %552 to double
  %554 = call double @silk_energy_FLP(float* %537, i32 40) #6
  %555 = call double @silk_energy_FLP(float* %543, i32 40) #6
  %556 = fadd double %554, %555
  %557 = fadd double %556, 1.600000e+05
  %558 = fmul double %553, 2.000000e+00
  %559 = fdiv double %558, %557
  %560 = fptrunc double %559 to float
  %561 = load float, float* %535, align 16
  %562 = fadd float %561, %560
  store float %562, float* %535, align 16
  br label %563

563:                                              ; preds = %563, %550
  %564 = phi i64 [ 9, %550 ], [ %589, %563 ]
  %565 = phi double [ %557, %550 ], [ %582, %563 ]
  %566 = phi float* [ %543, %550 ], [ %567, %563 ]
  %567 = getelementptr inbounds float, float* %566, i64 -1
  %568 = sub nuw nsw i64 72, %564
  %569 = getelementptr inbounds [65 x float], [65 x float]* %22, i64 0, i64 %568
  %570 = load float, float* %569, align 4
  %571 = fpext float %570 to double
  %572 = load float, float* %567, align 4
  %573 = getelementptr inbounds float, float* %566, i64 39
  %574 = load float, float* %573, align 4
  %575 = insertelement <2 x float> undef, float %572, i32 0
  %576 = insertelement <2 x float> %575, float %574, i32 1
  %577 = fpext <2 x float> %576 to <2 x double>
  %578 = fmul <2 x double> %577, %577
  %579 = extractelement <2 x double> %578, i32 0
  %580 = extractelement <2 x double> %578, i32 1
  %581 = fsub double %579, %580
  %582 = fadd double %565, %581
  %583 = fmul double %571, 2.000000e+00
  %584 = fdiv double %583, %582
  %585 = fptrunc double %584 to float
  %586 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 %564
  %587 = load float, float* %586, align 4
  %588 = fadd float %587, %585
  store float %588, float* %586, align 4
  %589 = add nuw nsw i64 %564, 1
  %590 = icmp eq i64 %589, 73
  br i1 %590, label %591, label %563

591:                                              ; preds = %563
  %592 = add nuw nsw i32 %538, 1
  %593 = icmp slt i32 %592, %527
  br i1 %593, label %536, label %594

594:                                              ; preds = %591, %523
  %595 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 69
  %596 = bitcast float* %595 to <4 x float>*
  %597 = load <4 x float>, <4 x float>* %596, align 4
  %598 = shufflevector <4 x float> %597, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %599 = fmul <4 x float> %598, <float 7.200000e+01, float 7.100000e+01, float 7.000000e+01, float 6.900000e+01>
  %600 = fmul <4 x float> %599, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %601 = fsub <4 x float> %598, %600
  %602 = shufflevector <4 x float> %601, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %603 = bitcast float* %595 to <4 x float>*
  store <4 x float> %602, <4 x float>* %603, align 4
  %604 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 65
  %605 = bitcast float* %604 to <4 x float>*
  %606 = load <4 x float>, <4 x float>* %605, align 4
  %607 = shufflevector <4 x float> %606, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %608 = fmul <4 x float> %607, <float 6.800000e+01, float 6.700000e+01, float 6.600000e+01, float 6.500000e+01>
  %609 = fmul <4 x float> %608, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %610 = fsub <4 x float> %607, %609
  %611 = shufflevector <4 x float> %610, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %612 = bitcast float* %604 to <4 x float>*
  store <4 x float> %611, <4 x float>* %612, align 4
  %613 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 61
  %614 = bitcast float* %613 to <4 x float>*
  %615 = load <4 x float>, <4 x float>* %614, align 4
  %616 = shufflevector <4 x float> %615, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %617 = fmul <4 x float> %616, <float 6.400000e+01, float 6.300000e+01, float 6.200000e+01, float 6.100000e+01>
  %618 = fmul <4 x float> %617, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %619 = fsub <4 x float> %616, %618
  %620 = shufflevector <4 x float> %619, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %621 = bitcast float* %613 to <4 x float>*
  store <4 x float> %620, <4 x float>* %621, align 4
  %622 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 57
  %623 = bitcast float* %622 to <4 x float>*
  %624 = load <4 x float>, <4 x float>* %623, align 4
  %625 = shufflevector <4 x float> %624, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %626 = fmul <4 x float> %625, <float 6.000000e+01, float 5.900000e+01, float 5.800000e+01, float 5.700000e+01>
  %627 = fmul <4 x float> %626, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %628 = fsub <4 x float> %625, %627
  %629 = shufflevector <4 x float> %628, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %630 = bitcast float* %622 to <4 x float>*
  store <4 x float> %629, <4 x float>* %630, align 4
  %631 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 53
  %632 = bitcast float* %631 to <4 x float>*
  %633 = load <4 x float>, <4 x float>* %632, align 4
  %634 = shufflevector <4 x float> %633, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %635 = fmul <4 x float> %634, <float 5.600000e+01, float 5.500000e+01, float 5.400000e+01, float 5.300000e+01>
  %636 = fmul <4 x float> %635, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %637 = fsub <4 x float> %634, %636
  %638 = shufflevector <4 x float> %637, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %639 = bitcast float* %631 to <4 x float>*
  store <4 x float> %638, <4 x float>* %639, align 4
  %640 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 49
  %641 = bitcast float* %640 to <4 x float>*
  %642 = load <4 x float>, <4 x float>* %641, align 4
  %643 = shufflevector <4 x float> %642, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %644 = fmul <4 x float> %643, <float 5.200000e+01, float 5.100000e+01, float 5.000000e+01, float 4.900000e+01>
  %645 = fmul <4 x float> %644, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %646 = fsub <4 x float> %643, %645
  %647 = shufflevector <4 x float> %646, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %648 = bitcast float* %640 to <4 x float>*
  store <4 x float> %647, <4 x float>* %648, align 4
  %649 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 45
  %650 = bitcast float* %649 to <4 x float>*
  %651 = load <4 x float>, <4 x float>* %650, align 4
  %652 = shufflevector <4 x float> %651, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %653 = fmul <4 x float> %652, <float 4.800000e+01, float 4.700000e+01, float 4.600000e+01, float 4.500000e+01>
  %654 = fmul <4 x float> %653, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %655 = fsub <4 x float> %652, %654
  %656 = shufflevector <4 x float> %655, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %657 = bitcast float* %649 to <4 x float>*
  store <4 x float> %656, <4 x float>* %657, align 4
  %658 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 41
  %659 = bitcast float* %658 to <4 x float>*
  %660 = load <4 x float>, <4 x float>* %659, align 4
  %661 = shufflevector <4 x float> %660, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %662 = fmul <4 x float> %661, <float 4.400000e+01, float 4.300000e+01, float 4.200000e+01, float 4.100000e+01>
  %663 = fmul <4 x float> %662, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %664 = fsub <4 x float> %661, %663
  %665 = shufflevector <4 x float> %664, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %666 = bitcast float* %658 to <4 x float>*
  store <4 x float> %665, <4 x float>* %666, align 4
  %667 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 37
  %668 = bitcast float* %667 to <4 x float>*
  %669 = load <4 x float>, <4 x float>* %668, align 4
  %670 = shufflevector <4 x float> %669, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %671 = fmul <4 x float> %670, <float 4.000000e+01, float 3.900000e+01, float 3.800000e+01, float 3.700000e+01>
  %672 = fmul <4 x float> %671, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %673 = fsub <4 x float> %670, %672
  %674 = shufflevector <4 x float> %673, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %675 = bitcast float* %667 to <4 x float>*
  store <4 x float> %674, <4 x float>* %675, align 4
  %676 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 33
  %677 = bitcast float* %676 to <4 x float>*
  %678 = load <4 x float>, <4 x float>* %677, align 4
  %679 = shufflevector <4 x float> %678, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %680 = fmul <4 x float> %679, <float 3.600000e+01, float 3.500000e+01, float 3.400000e+01, float 3.300000e+01>
  %681 = fmul <4 x float> %680, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %682 = fsub <4 x float> %679, %681
  %683 = shufflevector <4 x float> %682, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %684 = bitcast float* %676 to <4 x float>*
  store <4 x float> %683, <4 x float>* %684, align 4
  %685 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 29
  %686 = bitcast float* %685 to <4 x float>*
  %687 = load <4 x float>, <4 x float>* %686, align 4
  %688 = shufflevector <4 x float> %687, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %689 = fmul <4 x float> %688, <float 3.200000e+01, float 3.100000e+01, float 3.000000e+01, float 2.900000e+01>
  %690 = fmul <4 x float> %689, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %691 = fsub <4 x float> %688, %690
  %692 = shufflevector <4 x float> %691, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %693 = bitcast float* %685 to <4 x float>*
  store <4 x float> %692, <4 x float>* %693, align 4
  %694 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 25
  %695 = bitcast float* %694 to <4 x float>*
  %696 = load <4 x float>, <4 x float>* %695, align 4
  %697 = shufflevector <4 x float> %696, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %698 = fmul <4 x float> %697, <float 2.800000e+01, float 2.700000e+01, float 2.600000e+01, float 2.500000e+01>
  %699 = fmul <4 x float> %698, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %700 = fsub <4 x float> %697, %699
  %701 = shufflevector <4 x float> %700, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %702 = bitcast float* %694 to <4 x float>*
  store <4 x float> %701, <4 x float>* %702, align 4
  %703 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 21
  %704 = bitcast float* %703 to <4 x float>*
  %705 = load <4 x float>, <4 x float>* %704, align 4
  %706 = shufflevector <4 x float> %705, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %707 = fmul <4 x float> %706, <float 2.400000e+01, float 2.300000e+01, float 2.200000e+01, float 2.100000e+01>
  %708 = fmul <4 x float> %707, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %709 = fsub <4 x float> %706, %708
  %710 = shufflevector <4 x float> %709, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %711 = bitcast float* %703 to <4 x float>*
  store <4 x float> %710, <4 x float>* %711, align 4
  %712 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 17
  %713 = bitcast float* %712 to <4 x float>*
  %714 = load <4 x float>, <4 x float>* %713, align 4
  %715 = shufflevector <4 x float> %714, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %716 = fmul <4 x float> %715, <float 2.000000e+01, float 1.900000e+01, float 1.800000e+01, float 1.700000e+01>
  %717 = fmul <4 x float> %716, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %718 = fsub <4 x float> %715, %717
  %719 = shufflevector <4 x float> %718, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %720 = bitcast float* %712 to <4 x float>*
  store <4 x float> %719, <4 x float>* %720, align 4
  %721 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 13
  %722 = bitcast float* %721 to <4 x float>*
  %723 = load <4 x float>, <4 x float>* %722, align 4
  %724 = shufflevector <4 x float> %723, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %725 = fmul <4 x float> %724, <float 1.600000e+01, float 1.500000e+01, float 1.400000e+01, float 1.300000e+01>
  %726 = fmul <4 x float> %725, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %727 = fsub <4 x float> %724, %726
  %728 = shufflevector <4 x float> %727, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %729 = bitcast float* %721 to <4 x float>*
  store <4 x float> %728, <4 x float>* %729, align 4
  %730 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 9
  %731 = bitcast float* %730 to <4 x float>*
  %732 = load <4 x float>, <4 x float>* %731, align 4
  %733 = shufflevector <4 x float> %732, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %734 = fmul <4 x float> %733, <float 1.200000e+01, float 1.100000e+01, float 1.000000e+01, float 9.000000e+00>
  %735 = fmul <4 x float> %734, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %736 = fsub <4 x float> %733, %735
  %737 = shufflevector <4 x float> %736, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %738 = bitcast float* %730 to <4 x float>*
  store <4 x float> %737, <4 x float>* %738, align 4
  %739 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 8
  %740 = load float, float* %739, align 16
  %741 = fmul float %740, 8.000000e+00
  %742 = fmul float %741, 0x3F30000000000000
  %743 = fsub float %740, %742
  store float %743, float* %739, align 16
  %744 = shl i32 %9, 1
  %745 = add i32 %744, 4
  %746 = mul nsw i32 %745, 3
  %747 = icmp slt i32 %746, 25
  br i1 %747, label %749, label %748

748:                                              ; preds = %594
  call void @celt_fatal(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 218) #7
  unreachable

749:                                              ; preds = %594
  %750 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 8
  %751 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 0
  call void @silk_insertion_sort_decreasing_FLP(float* %750, i32* nonnull %751, i32 65, i32 %745) #6
  %752 = load float, float* %750, align 16
  %753 = fcmp olt float %752, 0x3FC99999A0000000
  br i1 %753, label %754, label %756

754:                                              ; preds = %749
  %755 = bitcast i32* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %755, i8 0, i64 %525, i1 false)
  br label %2178

756:                                              ; preds = %749
  %757 = fmul float %752, %6
  %758 = icmp sgt i32 %745, 0
  br i1 %758, label %759, label %783

759:                                              ; preds = %756
  %760 = zext i32 %745 to i64
  br label %761

761:                                              ; preds = %2231, %759
  %762 = phi i64 [ 0, %759 ], [ %2236, %2231 ]
  %763 = add nuw nsw i64 %762, 8
  %764 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 %763
  %765 = load float, float* %764, align 8
  %766 = fcmp ogt float %765, %757
  br i1 %766, label %767, label %777

767:                                              ; preds = %761
  %768 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %762
  %769 = load i32, i32* %768, align 8
  %770 = shl i32 %769, 1
  %771 = add i32 %770, 16
  store i32 %771, i32* %768, align 8
  %772 = or i64 %762, 1
  %773 = add nuw nsw i64 %762, 9
  %774 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 0, i64 %773
  %775 = load float, float* %774, align 4
  %776 = fcmp ogt float %775, %757
  br i1 %776, label %2231, label %777

777:                                              ; preds = %767, %761
  %778 = phi i64 [ %762, %761 ], [ %772, %767 ]
  %779 = trunc i64 %778 to i32
  br label %780

780:                                              ; preds = %2231, %777
  %781 = phi i32 [ %779, %777 ], [ %745, %2231 ]
  %782 = icmp sgt i32 %781, 0
  br i1 %782, label %784, label %783

783:                                              ; preds = %756, %780
  call void @celt_fatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 241) #7
  unreachable

784:                                              ; preds = %780
  %785 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 11
  %786 = bitcast i16* %785 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %786, i8 0, i64 274, i1 false)
  %787 = zext i32 %781 to i64
  %788 = add nsw i64 %787, -1
  %789 = and i64 %787, 3
  %790 = icmp ult i64 %788, 3
  br i1 %790, label %793, label %791

791:                                              ; preds = %784
  %792 = sub nsw i64 %787, %789
  br label %1038

793:                                              ; preds = %1038, %784
  %794 = phi i64 [ 0, %784 ], [ %1060, %1038 ]
  %795 = icmp eq i64 %789, 0
  br i1 %795, label %806, label %796

796:                                              ; preds = %793, %796
  %797 = phi i64 [ %803, %796 ], [ %794, %793 ]
  %798 = phi i64 [ %804, %796 ], [ %789, %793 ]
  %799 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %797
  %800 = load i32, i32* %799, align 4
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %801
  store i16 1, i16* %802, align 2
  %803 = add nuw nsw i64 %797, 1
  %804 = add i64 %798, -1
  %805 = icmp eq i64 %804, 0
  br i1 %805, label %806, label %796, !llvm.loop !10

806:                                              ; preds = %796, %793
  %807 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 145
  %808 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 145
  %809 = load i16, i16* %808, align 2
  %810 = insertelement <8 x i16> undef, i16 %809, i32 7
  %811 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 137
  %812 = bitcast i16* %811 to <8 x i16>*
  %813 = load <8 x i16>, <8 x i16>* %812, align 2
  %814 = shufflevector <8 x i16> %813, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %815 = shufflevector <8 x i16> %810, <8 x i16> %814, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %816 = add <8 x i16> %814, %815
  %817 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 139
  %818 = bitcast i16* %817 to <8 x i16>*
  %819 = load <8 x i16>, <8 x i16>* %818, align 2
  %820 = shufflevector <8 x i16> %819, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %821 = add <8 x i16> %816, %820
  %822 = shufflevector <8 x i16> %821, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %823 = bitcast i16* %817 to <8 x i16>*
  store <8 x i16> %822, <8 x i16>* %823, align 2
  %824 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 129
  %825 = bitcast i16* %824 to <8 x i16>*
  %826 = load <8 x i16>, <8 x i16>* %825, align 2
  %827 = shufflevector <8 x i16> %826, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %828 = shufflevector <8 x i16> %814, <8 x i16> %827, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %829 = add <8 x i16> %827, %828
  %830 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 131
  %831 = bitcast i16* %830 to <8 x i16>*
  %832 = load <8 x i16>, <8 x i16>* %831, align 2
  %833 = shufflevector <8 x i16> %832, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %834 = add <8 x i16> %829, %833
  %835 = shufflevector <8 x i16> %834, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %836 = bitcast i16* %830 to <8 x i16>*
  store <8 x i16> %835, <8 x i16>* %836, align 2
  %837 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 121
  %838 = bitcast i16* %837 to <8 x i16>*
  %839 = load <8 x i16>, <8 x i16>* %838, align 2
  %840 = shufflevector <8 x i16> %839, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %841 = shufflevector <8 x i16> %827, <8 x i16> %840, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %842 = add <8 x i16> %840, %841
  %843 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 123
  %844 = bitcast i16* %843 to <8 x i16>*
  %845 = load <8 x i16>, <8 x i16>* %844, align 2
  %846 = shufflevector <8 x i16> %845, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %847 = add <8 x i16> %842, %846
  %848 = shufflevector <8 x i16> %847, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %849 = bitcast i16* %843 to <8 x i16>*
  store <8 x i16> %848, <8 x i16>* %849, align 2
  %850 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 113
  %851 = bitcast i16* %850 to <8 x i16>*
  %852 = load <8 x i16>, <8 x i16>* %851, align 2
  %853 = shufflevector <8 x i16> %852, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %854 = shufflevector <8 x i16> %840, <8 x i16> %853, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %855 = add <8 x i16> %853, %854
  %856 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 115
  %857 = bitcast i16* %856 to <8 x i16>*
  %858 = load <8 x i16>, <8 x i16>* %857, align 2
  %859 = shufflevector <8 x i16> %858, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %860 = add <8 x i16> %855, %859
  %861 = shufflevector <8 x i16> %860, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %862 = bitcast i16* %856 to <8 x i16>*
  store <8 x i16> %861, <8 x i16>* %862, align 2
  %863 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 105
  %864 = bitcast i16* %863 to <8 x i16>*
  %865 = load <8 x i16>, <8 x i16>* %864, align 2
  %866 = shufflevector <8 x i16> %865, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %867 = shufflevector <8 x i16> %853, <8 x i16> %866, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %868 = add <8 x i16> %866, %867
  %869 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 107
  %870 = bitcast i16* %869 to <8 x i16>*
  %871 = load <8 x i16>, <8 x i16>* %870, align 2
  %872 = shufflevector <8 x i16> %871, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %873 = add <8 x i16> %868, %872
  %874 = shufflevector <8 x i16> %873, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %875 = bitcast i16* %869 to <8 x i16>*
  store <8 x i16> %874, <8 x i16>* %875, align 2
  %876 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 97
  %877 = bitcast i16* %876 to <8 x i16>*
  %878 = load <8 x i16>, <8 x i16>* %877, align 2
  %879 = shufflevector <8 x i16> %878, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %880 = shufflevector <8 x i16> %866, <8 x i16> %879, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %881 = add <8 x i16> %879, %880
  %882 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 99
  %883 = bitcast i16* %882 to <8 x i16>*
  %884 = load <8 x i16>, <8 x i16>* %883, align 2
  %885 = shufflevector <8 x i16> %884, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %886 = add <8 x i16> %881, %885
  %887 = shufflevector <8 x i16> %886, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %888 = bitcast i16* %882 to <8 x i16>*
  store <8 x i16> %887, <8 x i16>* %888, align 2
  %889 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 89
  %890 = bitcast i16* %889 to <8 x i16>*
  %891 = load <8 x i16>, <8 x i16>* %890, align 2
  %892 = shufflevector <8 x i16> %891, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %893 = shufflevector <8 x i16> %879, <8 x i16> %892, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %894 = add <8 x i16> %892, %893
  %895 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 91
  %896 = bitcast i16* %895 to <8 x i16>*
  %897 = load <8 x i16>, <8 x i16>* %896, align 2
  %898 = shufflevector <8 x i16> %897, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %899 = add <8 x i16> %894, %898
  %900 = shufflevector <8 x i16> %899, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %901 = bitcast i16* %895 to <8 x i16>*
  store <8 x i16> %900, <8 x i16>* %901, align 2
  %902 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 81
  %903 = bitcast i16* %902 to <8 x i16>*
  %904 = load <8 x i16>, <8 x i16>* %903, align 2
  %905 = shufflevector <8 x i16> %904, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %906 = shufflevector <8 x i16> %892, <8 x i16> %905, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %907 = add <8 x i16> %905, %906
  %908 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 83
  %909 = bitcast i16* %908 to <8 x i16>*
  %910 = load <8 x i16>, <8 x i16>* %909, align 2
  %911 = shufflevector <8 x i16> %910, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %912 = add <8 x i16> %907, %911
  %913 = shufflevector <8 x i16> %912, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %914 = bitcast i16* %908 to <8 x i16>*
  store <8 x i16> %913, <8 x i16>* %914, align 2
  %915 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 73
  %916 = bitcast i16* %915 to <8 x i16>*
  %917 = load <8 x i16>, <8 x i16>* %916, align 2
  %918 = shufflevector <8 x i16> %917, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %919 = shufflevector <8 x i16> %905, <8 x i16> %918, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %920 = add <8 x i16> %918, %919
  %921 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 75
  %922 = bitcast i16* %921 to <8 x i16>*
  %923 = load <8 x i16>, <8 x i16>* %922, align 2
  %924 = shufflevector <8 x i16> %923, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %925 = add <8 x i16> %920, %924
  %926 = shufflevector <8 x i16> %925, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %927 = bitcast i16* %921 to <8 x i16>*
  store <8 x i16> %926, <8 x i16>* %927, align 2
  %928 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 65
  %929 = bitcast i16* %928 to <8 x i16>*
  %930 = load <8 x i16>, <8 x i16>* %929, align 2
  %931 = shufflevector <8 x i16> %930, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %932 = shufflevector <8 x i16> %918, <8 x i16> %931, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %933 = add <8 x i16> %931, %932
  %934 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 67
  %935 = bitcast i16* %934 to <8 x i16>*
  %936 = load <8 x i16>, <8 x i16>* %935, align 2
  %937 = shufflevector <8 x i16> %936, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %938 = add <8 x i16> %933, %937
  %939 = shufflevector <8 x i16> %938, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %940 = bitcast i16* %934 to <8 x i16>*
  store <8 x i16> %939, <8 x i16>* %940, align 2
  %941 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 57
  %942 = bitcast i16* %941 to <8 x i16>*
  %943 = load <8 x i16>, <8 x i16>* %942, align 2
  %944 = shufflevector <8 x i16> %943, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %945 = shufflevector <8 x i16> %931, <8 x i16> %944, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %946 = add <8 x i16> %944, %945
  %947 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 59
  %948 = bitcast i16* %947 to <8 x i16>*
  %949 = load <8 x i16>, <8 x i16>* %948, align 2
  %950 = shufflevector <8 x i16> %949, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %951 = add <8 x i16> %946, %950
  %952 = shufflevector <8 x i16> %951, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %953 = bitcast i16* %947 to <8 x i16>*
  store <8 x i16> %952, <8 x i16>* %953, align 2
  %954 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 49
  %955 = bitcast i16* %954 to <8 x i16>*
  %956 = load <8 x i16>, <8 x i16>* %955, align 2
  %957 = shufflevector <8 x i16> %956, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %958 = shufflevector <8 x i16> %944, <8 x i16> %957, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %959 = add <8 x i16> %957, %958
  %960 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 51
  %961 = bitcast i16* %960 to <8 x i16>*
  %962 = load <8 x i16>, <8 x i16>* %961, align 2
  %963 = shufflevector <8 x i16> %962, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %964 = add <8 x i16> %959, %963
  %965 = shufflevector <8 x i16> %964, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %966 = bitcast i16* %960 to <8 x i16>*
  store <8 x i16> %965, <8 x i16>* %966, align 2
  %967 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 41
  %968 = bitcast i16* %967 to <8 x i16>*
  %969 = load <8 x i16>, <8 x i16>* %968, align 2
  %970 = shufflevector <8 x i16> %969, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %971 = shufflevector <8 x i16> %957, <8 x i16> %970, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %972 = add <8 x i16> %970, %971
  %973 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 43
  %974 = bitcast i16* %973 to <8 x i16>*
  %975 = load <8 x i16>, <8 x i16>* %974, align 2
  %976 = shufflevector <8 x i16> %975, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %977 = add <8 x i16> %972, %976
  %978 = shufflevector <8 x i16> %977, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %979 = bitcast i16* %973 to <8 x i16>*
  store <8 x i16> %978, <8 x i16>* %979, align 2
  %980 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 33
  %981 = bitcast i16* %980 to <8 x i16>*
  %982 = load <8 x i16>, <8 x i16>* %981, align 2
  %983 = shufflevector <8 x i16> %982, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %984 = shufflevector <8 x i16> %970, <8 x i16> %983, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %985 = add <8 x i16> %983, %984
  %986 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 35
  %987 = bitcast i16* %986 to <8 x i16>*
  %988 = load <8 x i16>, <8 x i16>* %987, align 2
  %989 = shufflevector <8 x i16> %988, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %990 = add <8 x i16> %985, %989
  %991 = shufflevector <8 x i16> %990, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %992 = bitcast i16* %986 to <8 x i16>*
  store <8 x i16> %991, <8 x i16>* %992, align 2
  %993 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 25
  %994 = bitcast i16* %993 to <8 x i16>*
  %995 = load <8 x i16>, <8 x i16>* %994, align 2
  %996 = shufflevector <8 x i16> %995, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %997 = shufflevector <8 x i16> %983, <8 x i16> %996, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %998 = add <8 x i16> %996, %997
  %999 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 27
  %1000 = bitcast i16* %999 to <8 x i16>*
  %1001 = load <8 x i16>, <8 x i16>* %1000, align 2
  %1002 = shufflevector <8 x i16> %1001, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1003 = add <8 x i16> %998, %1002
  %1004 = shufflevector <8 x i16> %1003, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1005 = bitcast i16* %999 to <8 x i16>*
  store <8 x i16> %1004, <8 x i16>* %1005, align 2
  %1006 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 17
  %1007 = bitcast i16* %1006 to <8 x i16>*
  %1008 = load <8 x i16>, <8 x i16>* %1007, align 2
  %1009 = shufflevector <8 x i16> %1008, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1010 = shufflevector <8 x i16> %996, <8 x i16> %1009, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %1011 = add <8 x i16> %1009, %1010
  %1012 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 19
  %1013 = bitcast i16* %1012 to <8 x i16>*
  %1014 = load <8 x i16>, <8 x i16>* %1013, align 2
  %1015 = shufflevector <8 x i16> %1014, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1016 = add <8 x i16> %1011, %1015
  %1017 = shufflevector <8 x i16> %1016, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1018 = bitcast i16* %1012 to <8 x i16>*
  store <8 x i16> %1017, <8 x i16>* %1018, align 2
  %1019 = extractelement <8 x i16> %1008, i32 0
  %1020 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 16
  %1021 = load i16, i16* %1020, align 16
  %1022 = add i16 %1021, %1019
  %1023 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 18
  %1024 = load i16, i16* %1023, align 4
  %1025 = add i16 %1022, %1024
  store i16 %1025, i16* %1023, align 4
  %1026 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 15
  %1027 = load i16, i16* %1026, align 2
  %1028 = add i16 %1027, %1021
  %1029 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 17
  %1030 = load i16, i16* %1029, align 2
  %1031 = add i16 %1028, %1030
  store i16 %1031, i16* %1029, align 2
  %1032 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 14
  %1033 = load i16, i16* %1032, align 4
  %1034 = add i16 %1033, %1027
  %1035 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 16
  %1036 = load i16, i16* %1035, align 16
  %1037 = add i16 %1034, %1036
  store i16 %1037, i16* %1035, align 16
  br label %1067

1038:                                             ; preds = %1038, %791
  %1039 = phi i64 [ 0, %791 ], [ %1060, %1038 ]
  %1040 = phi i64 [ %792, %791 ], [ %1061, %1038 ]
  %1041 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1039
  %1042 = load i32, i32* %1041, align 16
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1043
  store i16 1, i16* %1044, align 2
  %1045 = or i64 %1039, 1
  %1046 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1045
  %1047 = load i32, i32* %1046, align 4
  %1048 = sext i32 %1047 to i64
  %1049 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1048
  store i16 1, i16* %1049, align 2
  %1050 = or i64 %1039, 2
  %1051 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1050
  %1052 = load i32, i32* %1051, align 8
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1053
  store i16 1, i16* %1054, align 2
  %1055 = or i64 %1039, 3
  %1056 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1055
  %1057 = load i32, i32* %1056, align 4
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1058
  store i16 1, i16* %1059, align 2
  %1060 = add nuw nsw i64 %1039, 4
  %1061 = add i64 %1040, -4
  %1062 = icmp eq i64 %1061, 0
  br i1 %1062, label %793, label %1038

1063:                                             ; preds = %2228
  %1064 = load i16, i16* %807, align 2
  %1065 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 144
  %1066 = load i16, i16* %1065, align 16
  br label %1085

1067:                                             ; preds = %2228, %806
  %1068 = phi i64 [ 16, %806 ], [ %1081, %2228 ]
  %1069 = phi i32 [ 0, %806 ], [ %2229, %2228 ]
  %1070 = or i64 %1068, 1
  %1071 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1070
  %1072 = load i16, i16* %1071, align 2
  %1073 = icmp sgt i16 %1072, 0
  br i1 %1073, label %1074, label %1079

1074:                                             ; preds = %1067
  %1075 = sext i32 %1069 to i64
  %1076 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1075
  %1077 = trunc i64 %1068 to i32
  store i32 %1077, i32* %1076, align 4
  %1078 = add nsw i32 %1069, 1
  br label %1079

1079:                                             ; preds = %1067, %1074
  %1080 = phi i32 [ %1078, %1074 ], [ %1069, %1067 ]
  %1081 = add nuw nsw i64 %1068, 2
  %1082 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1081
  %1083 = load i16, i16* %1082, align 4
  %1084 = icmp sgt i16 %1083, 0
  br i1 %1084, label %2223, label %2228

1085:                                             ; preds = %2213, %1063
  %1086 = phi i16 [ %1066, %1063 ], [ %2218, %2213 ]
  %1087 = phi i16 [ %1064, %1063 ], [ %1093, %2213 ]
  %1088 = phi i64 [ 146, %1063 ], [ %2214, %2213 ]
  %1089 = add nsw i64 %1088, -1
  %1090 = add i16 %1086, %1087
  %1091 = add nsw i64 %1088, -3
  %1092 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1091
  %1093 = load i16, i16* %1092, align 2
  %1094 = add i16 %1090, %1093
  %1095 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1088
  %1096 = load i16, i16* %1095, align 4
  %1097 = add i16 %1094, %1096
  store i16 %1097, i16* %1095, align 4
  %1098 = icmp ugt i64 %1089, 15
  br i1 %1098, label %2213, label %1099

1099:                                             ; preds = %1085, %2209
  %1100 = phi i64 [ %2211, %2209 ], [ 16, %1085 ]
  %1101 = phi i32 [ %2210, %2209 ], [ 0, %1085 ]
  %1102 = phi i32 [ %2212, %2209 ], [ 16, %1085 ]
  %1103 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1100
  %1104 = load i16, i16* %1103, align 4
  %1105 = icmp sgt i16 %1104, 0
  br i1 %1105, label %1106, label %1112

1106:                                             ; preds = %1099
  %1107 = trunc i32 %1102 to i16
  %1108 = add nsw i16 %1107, -2
  %1109 = sext i32 %1101 to i64
  %1110 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1109
  store i16 %1108, i16* %1110, align 2
  %1111 = add nsw i32 %1101, 1
  br label %1112

1112:                                             ; preds = %1099, %1106
  %1113 = phi i32 [ %1111, %1106 ], [ %1101, %1099 ]
  %1114 = or i64 %1100, 1
  %1115 = icmp eq i64 %1114, 147
  br i1 %1115, label %1116, label %2198

1116:                                             ; preds = %1112
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 2384, i1 false)
  %1117 = getelementptr inbounds float, float* %0, i64 160
  %1118 = getelementptr inbounds [320 x float], [320 x float]* %16, i64 0, i64 160
  %1119 = select i1 %44, float* %1117, float* %1118
  %1120 = icmp sgt i32 %10, 0
  br i1 %1120, label %1121, label %1162

1121:                                             ; preds = %1116
  %1122 = icmp sgt i32 %1113, 0
  br i1 %1122, label %1123, label %1155

1123:                                             ; preds = %1121
  %1124 = zext i32 %10 to i64
  %1125 = zext i32 %1113 to i64
  br label %1126

1126:                                             ; preds = %1151, %1123
  %1127 = phi i64 [ 0, %1123 ], [ %1153, %1151 ]
  %1128 = phi float* [ %1119, %1123 ], [ %1152, %1151 ]
  %1129 = call double @silk_energy_FLP(float* %1128, i32 40) #6
  %1130 = fadd double %1129, 1.000000e+00
  br label %1131

1131:                                             ; preds = %1146, %1126
  %1132 = phi i64 [ 0, %1126 ], [ %1149, %1146 ]
  %1133 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1132
  %1134 = load i16, i16* %1133, align 2
  %1135 = sext i16 %1134 to i64
  %1136 = sub nsw i64 0, %1135
  %1137 = getelementptr inbounds float, float* %1128, i64 %1136
  %1138 = call double @silk_inner_product_FLP(float* %1137, float* %1128, i32 40) #6
  %1139 = fcmp ogt double %1138, 0.000000e+00
  br i1 %1139, label %1140, label %1146

1140:                                             ; preds = %1131
  %1141 = call double @silk_energy_FLP(float* %1137, i32 40) #6
  %1142 = fmul double %1138, 2.000000e+00
  %1143 = fadd double %1130, %1141
  %1144 = fdiv double %1142, %1143
  %1145 = fptrunc double %1144 to float
  br label %1146

1146:                                             ; preds = %1131, %1140
  %1147 = phi float [ %1145, %1140 ], [ 0.000000e+00, %1131 ]
  %1148 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 %1127, i64 %1135
  store float %1147, float* %1148, align 4
  %1149 = add nuw nsw i64 %1132, 1
  %1150 = icmp eq i64 %1149, %1125
  br i1 %1150, label %1151, label %1131

1151:                                             ; preds = %1146
  %1152 = getelementptr inbounds float, float* %1128, i64 40
  %1153 = add nuw nsw i64 %1127, 1
  %1154 = icmp eq i64 %1153, %1124
  br i1 %1154, label %1162, label %1126

1155:                                             ; preds = %1121, %1155
  %1156 = phi float* [ %1159, %1155 ], [ %1119, %1121 ]
  %1157 = phi i32 [ %1160, %1155 ], [ 0, %1121 ]
  %1158 = call double @silk_energy_FLP(float* %1156, i32 40) #6
  %1159 = getelementptr inbounds float, float* %1156, i64 40
  %1160 = add nuw nsw i32 %1157, 1
  %1161 = icmp eq i32 %1160, %10
  br i1 %1161, label %1162, label %1155

1162:                                             ; preds = %1155, %1151, %1116
  %1163 = icmp sgt i32 %5, 0
  br i1 %1163, label %1164, label %1178

1164:                                             ; preds = %1162
  br i1 %45, label %1165, label %1168

1165:                                             ; preds = %1164
  %1166 = shl i32 %5, 1
  %1167 = sdiv i32 %1166, 3
  br label %1171

1168:                                             ; preds = %1164
  %1169 = zext i1 %46 to i32
  %1170 = lshr i32 %5, %1169
  br label %1171

1171:                                             ; preds = %1168, %1165
  %1172 = phi i32 [ %1167, %1165 ], [ %1170, %1168 ]
  %1173 = sitofp i32 %1172 to float
  %1174 = fpext float %1173 to double
  %1175 = call double @log10(double %1174) #6
  %1176 = fmul double %1175, 0x400A934F0979A36C
  %1177 = fptrunc double %1176 to float
  br label %1178

1178:                                             ; preds = %1162, %1171
  %1179 = phi i32 [ %1172, %1171 ], [ %5, %1162 ]
  %1180 = phi float [ %1177, %1171 ], [ 0.000000e+00, %1162 ]
  %1181 = icmp eq i32 %10, 4
  br i1 %1181, label %1182, label %1186

1182:                                             ; preds = %1178
  %1183 = icmp sgt i32 %9, 0
  %1184 = and i1 %44, %1183
  %1185 = select i1 %1184, i64 11, i64 3
  br label %1186

1186:                                             ; preds = %1178, %1182
  %1187 = phi i32 [ 11, %1182 ], [ 3, %1178 ]
  %1188 = phi i64 [ %1185, %1182 ], [ 3, %1178 ]
  %1189 = phi i8* [ getelementptr inbounds ([4 x [11 x i8]], [4 x [11 x i8]]* @silk_CB_lags_stage2, i64 0, i64 0, i64 0), %1182 ], [ getelementptr inbounds ([2 x [3 x i8]], [2 x [3 x i8]]* @silk_CB_lags_stage2_10_ms, i64 0, i64 0, i64 0), %1178 ]
  %1190 = icmp sgt i32 %2229, 0
  br i1 %1190, label %1191, label %1357

1191:                                             ; preds = %1186
  %1192 = sitofp i32 %10 to float
  %1193 = fmul float %1192, 0x3FC99999A0000000
  %1194 = icmp sgt i32 %1179, 0
  %1195 = fmul float %1192, %7
  %1196 = shl nuw nsw i64 %1188, 2
  %1197 = zext i32 %2229 to i64
  %1198 = zext i32 %10 to i64
  %1199 = and i64 %1198, 1
  %1200 = icmp eq i32 %10, 1
  %1201 = sub nsw i64 %1198, %1199
  %1202 = icmp eq i64 %1199, 0
  %1203 = icmp eq i64 %1188, 3
  %1204 = add nsw i64 %1188, -3
  br label %1205

1205:                                             ; preds = %1344, %1191
  %1206 = phi i64 [ 0, %1191 ], [ %1353, %1344 ]
  %1207 = phi i32 [ -1, %1191 ], [ %1352, %1344 ]
  %1208 = phi i32 [ 0, %1191 ], [ %1351, %1344 ]
  %1209 = phi float [ -1.000000e+03, %1191 ], [ %1350, %1344 ]
  %1210 = phi float [ 0.000000e+00, %1191 ], [ %1349, %1344 ]
  %1211 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %1206
  %1212 = load i32, i32* %1211, align 4
  br i1 %1120, label %1214, label %1213

1213:                                             ; preds = %1205
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 %1196, i1 false)
  br label %1271

1214:                                             ; preds = %1205, %1267
  %1215 = phi i64 [ %1269, %1267 ], [ 0, %1205 ]
  %1216 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1215
  store float 0.000000e+00, float* %1216, align 4
  %1217 = trunc i64 %1215 to i32
  br i1 %1200, label %1250, label %1218

1218:                                             ; preds = %1214, %1218
  %1219 = phi i64 [ %1247, %1218 ], [ 0, %1214 ]
  %1220 = phi float [ %1246, %1218 ], [ 0.000000e+00, %1214 ]
  %1221 = phi i64 [ %1248, %1218 ], [ %1201, %1214 ]
  %1222 = trunc i64 %1219 to i32
  %1223 = mul nsw i32 %1187, %1222
  %1224 = add nuw nsw i32 %1223, %1217
  %1225 = zext i32 %1224 to i64
  %1226 = getelementptr inbounds i8, i8* %1189, i64 %1225
  %1227 = load i8, i8* %1226, align 1
  %1228 = sext i8 %1227 to i32
  %1229 = add nsw i32 %1212, %1228
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 %1219, i64 %1230
  %1232 = load float, float* %1231, align 4
  %1233 = fadd float %1232, %1220
  %1234 = or i64 %1219, 1
  %1235 = trunc i64 %1234 to i32
  %1236 = mul nsw i32 %1187, %1235
  %1237 = add nuw nsw i32 %1236, %1217
  %1238 = zext i32 %1237 to i64
  %1239 = getelementptr inbounds i8, i8* %1189, i64 %1238
  %1240 = load i8, i8* %1239, align 1
  %1241 = sext i8 %1240 to i32
  %1242 = add nsw i32 %1212, %1241
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 %1234, i64 %1243
  %1245 = load float, float* %1244, align 4
  %1246 = fadd float %1245, %1233
  %1247 = add nuw nsw i64 %1219, 2
  %1248 = add i64 %1221, -2
  %1249 = icmp eq i64 %1248, 0
  br i1 %1249, label %1250, label %1218

1250:                                             ; preds = %1218, %1214
  %1251 = phi float [ undef, %1214 ], [ %1246, %1218 ]
  %1252 = phi i64 [ 0, %1214 ], [ %1247, %1218 ]
  %1253 = phi float [ 0.000000e+00, %1214 ], [ %1246, %1218 ]
  br i1 %1202, label %1267, label %1254

1254:                                             ; preds = %1250
  %1255 = trunc i64 %1252 to i32
  %1256 = mul nsw i32 %1187, %1255
  %1257 = add nuw nsw i32 %1256, %1217
  %1258 = zext i32 %1257 to i64
  %1259 = getelementptr inbounds i8, i8* %1189, i64 %1258
  %1260 = load i8, i8* %1259, align 1
  %1261 = sext i8 %1260 to i32
  %1262 = add nsw i32 %1212, %1261
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds [4 x [149 x float]], [4 x [149 x float]]* %21, i64 0, i64 %1252, i64 %1263
  %1265 = load float, float* %1264, align 4
  %1266 = fadd float %1265, %1253
  br label %1267

1267:                                             ; preds = %1250, %1254
  %1268 = phi float [ %1251, %1250 ], [ %1266, %1254 ]
  store float %1268, float* %1216, align 4
  %1269 = add nuw nsw i64 %1215, 1
  %1270 = icmp eq i64 %1269, %1188
  br i1 %1270, label %1271, label %1214

1271:                                             ; preds = %1267, %1213
  br i1 %1203, label %1307, label %1272

1272:                                             ; preds = %1271, %1272
  %1273 = phi i64 [ %1304, %1272 ], [ 0, %1271 ]
  %1274 = phi i32 [ %1303, %1272 ], [ 0, %1271 ]
  %1275 = phi float [ %1301, %1272 ], [ -1.000000e+03, %1271 ]
  %1276 = phi i64 [ %1305, %1272 ], [ %1204, %1271 ]
  %1277 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1273
  %1278 = load float, float* %1277, align 16
  %1279 = fcmp ogt float %1278, %1275
  %1280 = select i1 %1279, float %1278, float %1275
  %1281 = trunc i64 %1273 to i32
  %1282 = select i1 %1279, i32 %1281, i32 %1274
  %1283 = or i64 %1273, 1
  %1284 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1283
  %1285 = load float, float* %1284, align 4
  %1286 = fcmp ogt float %1285, %1280
  %1287 = select i1 %1286, float %1285, float %1280
  %1288 = trunc i64 %1283 to i32
  %1289 = select i1 %1286, i32 %1288, i32 %1282
  %1290 = or i64 %1273, 2
  %1291 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1290
  %1292 = load float, float* %1291, align 8
  %1293 = fcmp ogt float %1292, %1287
  %1294 = select i1 %1293, float %1292, float %1287
  %1295 = trunc i64 %1290 to i32
  %1296 = select i1 %1293, i32 %1295, i32 %1289
  %1297 = or i64 %1273, 3
  %1298 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1297
  %1299 = load float, float* %1298, align 4
  %1300 = fcmp ogt float %1299, %1294
  %1301 = select i1 %1300, float %1299, float %1294
  %1302 = trunc i64 %1297 to i32
  %1303 = select i1 %1300, i32 %1302, i32 %1296
  %1304 = add nuw nsw i64 %1273, 4
  %1305 = add i64 %1276, -4
  %1306 = icmp eq i64 %1305, 0
  br i1 %1306, label %1307, label %1272

1307:                                             ; preds = %1271, %1272
  %1308 = phi float [ undef, %1271 ], [ %1301, %1272 ]
  %1309 = phi i32 [ undef, %1271 ], [ %1303, %1272 ]
  %1310 = phi i64 [ 0, %1271 ], [ %1304, %1272 ]
  %1311 = phi i32 [ 0, %1271 ], [ %1303, %1272 ]
  %1312 = phi float [ -1.000000e+03, %1271 ], [ %1301, %1272 ]
  br label %1313

1313:                                             ; preds = %1313, %1307
  %1314 = phi i64 [ %1324, %1313 ], [ %1310, %1307 ]
  %1315 = phi i32 [ %1323, %1313 ], [ %1311, %1307 ]
  %1316 = phi float [ %1321, %1313 ], [ %1312, %1307 ]
  %1317 = phi i64 [ %1325, %1313 ], [ 3, %1307 ]
  %1318 = getelementptr inbounds [11 x float], [11 x float]* %23, i64 0, i64 %1314
  %1319 = load float, float* %1318, align 4
  %1320 = fcmp ogt float %1319, %1316
  %1321 = select i1 %1320, float %1319, float %1316
  %1322 = trunc i64 %1314 to i32
  %1323 = select i1 %1320, i32 %1322, i32 %1315
  %1324 = add nuw nsw i64 %1314, 1
  %1325 = add i64 %1317, -1
  %1326 = icmp eq i64 %1325, 0
  br i1 %1326, label %1327, label %1313, !llvm.loop !12

1327:                                             ; preds = %1313
  %1328 = sitofp i32 %1212 to float
  %1329 = fpext float %1328 to double
  %1330 = call double @log10(double %1329) #6
  %1331 = fmul double %1330, 0x400A934F0979A36C
  %1332 = fptrunc double %1331 to float
  %1333 = fmul float %1193, %1332
  %1334 = fsub float %1321, %1333
  br i1 %1194, label %1335, label %1344

1335:                                             ; preds = %1327
  %1336 = fsub float %1332, %1180
  %1337 = fmul float %1336, %1336
  %1338 = load float, float* %4, align 4
  %1339 = fmul float %1193, %1338
  %1340 = fmul float %1337, %1339
  %1341 = fadd float %1337, 5.000000e-01
  %1342 = fdiv float %1340, %1341
  %1343 = fsub float %1334, %1342
  br label %1344

1344:                                             ; preds = %1335, %1327
  %1345 = phi float [ %1343, %1335 ], [ %1334, %1327 ]
  %1346 = fcmp ogt float %1345, %1209
  %1347 = fcmp ogt float %1321, %1195
  %1348 = and i1 %1347, %1346
  %1349 = select i1 %1348, float %1321, float %1210
  %1350 = select i1 %1348, float %1345, float %1209
  %1351 = select i1 %1348, i32 %1323, i32 %1208
  %1352 = select i1 %1348, i32 %1212, i32 %1207
  %1353 = add nuw nsw i64 %1206, 1
  %1354 = icmp eq i64 %1353, %1197
  br i1 %1354, label %1355, label %1205

1355:                                             ; preds = %1344
  %1356 = icmp eq i32 %1352, -1
  br i1 %1356, label %1357, label %1358

1357:                                             ; preds = %1186, %1355
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 16, i1 false)
  br label %2178

1358:                                             ; preds = %1355
  %1359 = sitofp i32 %10 to float
  %1360 = fdiv float %1349, %1359
  store float %1360, float* %4, align 4
  %1361 = icmp sgt i32 %8, 8
  br i1 %1361, label %1371, label %1362

1362:                                             ; preds = %1358
  br i1 %1120, label %1363, label %2168

1363:                                             ; preds = %1362
  %1364 = zext i32 %1187 to i64
  %1365 = sext i32 %1351 to i64
  %1366 = zext i32 %10 to i64
  %1367 = and i64 %1366, 1
  %1368 = icmp eq i32 %10, 1
  br i1 %1368, label %2153, label %1369

1369:                                             ; preds = %1363
  %1370 = sub nsw i64 %1366, %1367
  br label %2124

1371:                                             ; preds = %1358
  br i1 %45, label %1372, label %1379

1372:                                             ; preds = %1371
  %1373 = shl i32 %1352, 16
  %1374 = ashr exact i32 %1373, 16
  %1375 = mul nsw i32 %1374, 3
  %1376 = ashr i32 %1375, 1
  %1377 = and i32 %1375, 1
  %1378 = add nsw i32 %1376, %1377
  br label %1381

1379:                                             ; preds = %1371
  %1380 = shl i32 %1352, 1
  br label %1381

1381:                                             ; preds = %1379, %1372
  %1382 = phi i32 [ %1378, %1372 ], [ %1380, %1379 ]
  %1383 = icmp slt i32 %61, %62
  br i1 %1383, label %1389, label %1384

1384:                                             ; preds = %1381
  %1385 = icmp sgt i32 %1382, %61
  br i1 %1385, label %1394, label %1386

1386:                                             ; preds = %1384
  %1387 = icmp slt i32 %1382, %63
  %1388 = select i1 %1387, i32 %63, i32 %1382
  br label %1394

1389:                                             ; preds = %1381
  %1390 = icmp slt i32 %1382, %62
  br i1 %1390, label %1391, label %1394

1391:                                             ; preds = %1389
  %1392 = icmp slt i32 %1382, %61
  %1393 = select i1 %1392, i32 %61, i32 %1382
  br label %1394

1394:                                             ; preds = %1389, %1384, %1391, %1386
  %1395 = phi i32 [ %1388, %1386 ], [ %1393, %1391 ], [ %61, %1384 ], [ %63, %1389 ]
  %1396 = add nsw i32 %1395, -2
  %1397 = icmp sgt i32 %1396, %61
  %1398 = select i1 %1397, i32 %1396, i32 %61
  %1399 = add nsw i32 %1395, 2
  %1400 = icmp slt i32 %1399, %63
  %1401 = select i1 %1400, i32 %1399, i32 %63
  %1402 = bitcast [22 x float]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %1402) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1402, i8 -1, i64 88, i1 false) #6
  %1403 = bitcast [22 x float]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %1403) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1403, i8 -1, i64 88, i1 false) #6
  switch i32 %10, label %1410 [
    i32 4, label %1404
    i32 2, label %1411
  ]

1404:                                             ; preds = %1394
  %1405 = sext i32 %9 to i64
  %1406 = getelementptr inbounds [3 x [4 x [2 x i8]]], [3 x [4 x [2 x i8]]]* @silk_Lag_range_stage3, i64 0, i64 %1405, i64 0, i64 0
  %1407 = getelementptr inbounds [3 x i8], [3 x i8]* @silk_nb_cbk_searchs_stage3, i64 0, i64 %1405
  %1408 = load i8, i8* %1407, align 1
  %1409 = sext i8 %1408 to i32
  br label %1411

1410:                                             ; preds = %1394
  call void @celt_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 518) #7
  unreachable

1411:                                             ; preds = %1404, %1394
  %1412 = phi i32 [ %1409, %1404 ], [ 12, %1394 ]
  %1413 = phi i64 [ 34, %1404 ], [ 12, %1394 ]
  %1414 = phi i8* [ %1406, %1404 ], [ getelementptr inbounds ([2 x [2 x i8]], [2 x [2 x i8]]* @silk_Lag_range_stage3_10_ms, i64 0, i64 0, i64 0), %1394 ]
  %1415 = phi i8* [ getelementptr inbounds ([4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 0), %1404 ], [ getelementptr inbounds ([2 x [12 x i8]], [2 x [12 x i8]]* @silk_CB_lags_stage3_10_ms, i64 0, i64 0, i64 0), %1394 ]
  %1416 = mul i32 %8, 20
  %1417 = sext i32 %1416 to i64
  %1418 = getelementptr inbounds float, float* %0, i64 %1417
  %1419 = sext i32 %1398 to i64
  %1420 = sub nsw i64 0, %1419
  %1421 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 0
  %1422 = icmp sgt i32 %1412, 0
  %1423 = sext i32 %60 to i64
  %1424 = zext i32 %10 to i64
  br i1 %1422, label %1425, label %1586

1425:                                             ; preds = %1411
  %1426 = zext i32 %1412 to i64
  %1427 = and i64 %1426, 1
  %1428 = icmp eq i32 %1412, 1
  %1429 = sub nsw i64 %1426, %1427
  %1430 = icmp eq i64 %1427, 0
  br label %1431

1431:                                             ; preds = %1582, %1425
  %1432 = phi i64 [ 0, %1425 ], [ %1584, %1582 ]
  %1433 = phi float* [ %1418, %1425 ], [ %1583, %1582 ]
  %1434 = shl nuw nsw i64 %1432, 1
  %1435 = getelementptr inbounds i8, i8* %1414, i64 %1434
  %1436 = load i8, i8* %1435, align 1
  %1437 = sext i8 %1436 to i32
  %1438 = or i64 %1434, 1
  %1439 = getelementptr inbounds i8, i8* %1414, i64 %1438
  %1440 = load i8, i8* %1439, align 1
  %1441 = sext i8 %1440 to i32
  %1442 = getelementptr inbounds float, float* %1433, i64 %1420
  %1443 = sext i8 %1440 to i64
  %1444 = sub nsw i64 0, %1443
  %1445 = getelementptr inbounds float, float* %1442, i64 %1444
  %1446 = sub nsw i32 1, %1437
  %1447 = add nsw i32 %1446, %1441
  call void @celt_pitch_xcorr_c(float* %1433, float* %1445, float* nonnull %1421, i32 %60, i32 %1447, i32 %11) #6
  %1448 = icmp sgt i8 %1436, %1440
  br i1 %1448, label %1566, label %1449

1449:                                             ; preds = %1431
  %1450 = sext i8 %1436 to i64
  %1451 = icmp sgt i64 %1450, %1443
  %1452 = select i1 %1451, i64 %1450, i64 %1443
  %1453 = add nsw i64 %1452, 1
  %1454 = sub nsw i64 %1453, %1450
  %1455 = icmp ult i64 %1454, 8
  br i1 %1455, label %1524, label %1456

1456:                                             ; preds = %1449
  %1457 = and i64 %1454, -8
  %1458 = add nsw i64 %1457, %1450
  %1459 = add nsw i64 %1457, -8
  %1460 = lshr exact i64 %1459, 3
  %1461 = add nuw nsw i64 %1460, 1
  %1462 = and i64 %1461, 1
  %1463 = icmp eq i64 %1459, 0
  br i1 %1463, label %1503, label %1464

1464:                                             ; preds = %1456
  %1465 = sub nuw nsw i64 %1461, %1462
  br label %1466

1466:                                             ; preds = %1466, %1464
  %1467 = phi i64 [ 0, %1464 ], [ %1500, %1466 ]
  %1468 = phi i64 [ %1465, %1464 ], [ %1501, %1466 ]
  %1469 = add i64 %1467, %1450
  %1470 = sub nsw i64 %1443, %1469
  %1471 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1470
  %1472 = getelementptr inbounds float, float* %1471, i64 -3
  %1473 = bitcast float* %1472 to <4 x i32>*
  %1474 = load <4 x i32>, <4 x i32>* %1473, align 4
  %1475 = shufflevector <4 x i32> %1474, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1476 = getelementptr inbounds float, float* %1471, i64 -7
  %1477 = bitcast float* %1476 to <4 x i32>*
  %1478 = load <4 x i32>, <4 x i32>* %1477, align 4
  %1479 = shufflevector <4 x i32> %1478, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1480 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1467
  %1481 = bitcast float* %1480 to <4 x i32>*
  store <4 x i32> %1475, <4 x i32>* %1481, align 16
  %1482 = getelementptr inbounds float, float* %1480, i64 4
  %1483 = bitcast float* %1482 to <4 x i32>*
  store <4 x i32> %1479, <4 x i32>* %1483, align 16
  %1484 = or i64 %1467, 8
  %1485 = add i64 %1484, %1450
  %1486 = sub nsw i64 %1443, %1485
  %1487 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1486
  %1488 = getelementptr inbounds float, float* %1487, i64 -3
  %1489 = bitcast float* %1488 to <4 x i32>*
  %1490 = load <4 x i32>, <4 x i32>* %1489, align 4
  %1491 = shufflevector <4 x i32> %1490, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1492 = getelementptr inbounds float, float* %1487, i64 -7
  %1493 = bitcast float* %1492 to <4 x i32>*
  %1494 = load <4 x i32>, <4 x i32>* %1493, align 4
  %1495 = shufflevector <4 x i32> %1494, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1496 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1484
  %1497 = bitcast float* %1496 to <4 x i32>*
  store <4 x i32> %1491, <4 x i32>* %1497, align 16
  %1498 = getelementptr inbounds float, float* %1496, i64 4
  %1499 = bitcast float* %1498 to <4 x i32>*
  store <4 x i32> %1495, <4 x i32>* %1499, align 16
  %1500 = add i64 %1467, 16
  %1501 = add i64 %1468, -2
  %1502 = icmp eq i64 %1501, 0
  br i1 %1502, label %1503, label %1466, !llvm.loop !13

1503:                                             ; preds = %1466, %1456
  %1504 = phi i64 [ 0, %1456 ], [ %1500, %1466 ]
  %1505 = icmp eq i64 %1462, 0
  br i1 %1505, label %1522, label %1506

1506:                                             ; preds = %1503
  %1507 = add i64 %1504, %1450
  %1508 = sub nsw i64 %1443, %1507
  %1509 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1508
  %1510 = getelementptr inbounds float, float* %1509, i64 -3
  %1511 = bitcast float* %1510 to <4 x i32>*
  %1512 = load <4 x i32>, <4 x i32>* %1511, align 4
  %1513 = shufflevector <4 x i32> %1512, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1514 = getelementptr inbounds float, float* %1509, i64 -7
  %1515 = bitcast float* %1514 to <4 x i32>*
  %1516 = load <4 x i32>, <4 x i32>* %1515, align 4
  %1517 = shufflevector <4 x i32> %1516, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1518 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1504
  %1519 = bitcast float* %1518 to <4 x i32>*
  store <4 x i32> %1513, <4 x i32>* %1519, align 16
  %1520 = getelementptr inbounds float, float* %1518, i64 4
  %1521 = bitcast float* %1520 to <4 x i32>*
  store <4 x i32> %1517, <4 x i32>* %1521, align 16
  br label %1522

1522:                                             ; preds = %1503, %1506
  %1523 = icmp eq i64 %1454, %1457
  br i1 %1523, label %1566, label %1524

1524:                                             ; preds = %1522, %1449
  %1525 = phi i64 [ %1450, %1449 ], [ %1458, %1522 ]
  %1526 = phi i64 [ 0, %1449 ], [ %1457, %1522 ]
  br label %1527

1527:                                             ; preds = %1524, %1527
  %1528 = phi i64 [ %1537, %1527 ], [ %1525, %1524 ]
  %1529 = phi i64 [ %1536, %1527 ], [ %1526, %1524 ]
  %1530 = sub nsw i64 %1443, %1528
  %1531 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1530
  %1532 = bitcast float* %1531 to i32*
  %1533 = load i32, i32* %1532, align 4
  %1534 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1529
  %1535 = bitcast float* %1534 to i32*
  store i32 %1533, i32* %1535, align 4
  %1536 = add nuw nsw i64 %1529, 1
  %1537 = add nsw i64 %1528, 1
  %1538 = icmp slt i64 %1528, %1443
  br i1 %1538, label %1527, label %1566, !llvm.loop !14

1539:                                             ; preds = %1566, %1539
  %1540 = phi i64 [ %1563, %1539 ], [ 0, %1566 ]
  %1541 = phi i64 [ %1564, %1539 ], [ %1429, %1566 ]
  %1542 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1432, i64 %1540, i64 0
  %1543 = bitcast float* %1542 to i8*
  %1544 = add nuw nsw i64 %1540, %1568
  %1545 = getelementptr inbounds i8, i8* %1415, i64 %1544
  %1546 = load i8, i8* %1545, align 1
  %1547 = sext i8 %1546 to i32
  %1548 = sub nsw i32 %1547, %1437
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1549
  %1551 = bitcast float* %1550 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1543, i8* align 4 %1551, i64 20, i1 false) #6
  %1552 = or i64 %1540, 1
  %1553 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1432, i64 %1552, i64 0
  %1554 = bitcast float* %1553 to i8*
  %1555 = add nuw nsw i64 %1552, %1568
  %1556 = getelementptr inbounds i8, i8* %1415, i64 %1555
  %1557 = load i8, i8* %1556, align 1
  %1558 = sext i8 %1557 to i32
  %1559 = sub nsw i32 %1558, %1437
  %1560 = sext i32 %1559 to i64
  %1561 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1560
  %1562 = bitcast float* %1561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1554, i8* align 4 %1562, i64 20, i1 false) #6
  %1563 = add nuw nsw i64 %1540, 2
  %1564 = add i64 %1541, -2
  %1565 = icmp eq i64 %1564, 0
  br i1 %1565, label %1569, label %1539

1566:                                             ; preds = %1527, %1522, %1431
  %1567 = mul i64 %1432, %1413
  %1568 = and i64 %1567, 4294967294
  br i1 %1428, label %1569, label %1539

1569:                                             ; preds = %1539, %1566
  %1570 = phi i64 [ 0, %1566 ], [ %1563, %1539 ]
  br i1 %1430, label %1582, label %1571

1571:                                             ; preds = %1569
  %1572 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1432, i64 %1570, i64 0
  %1573 = bitcast float* %1572 to i8*
  %1574 = add nuw nsw i64 %1570, %1568
  %1575 = getelementptr inbounds i8, i8* %1415, i64 %1574
  %1576 = load i8, i8* %1575, align 1
  %1577 = sext i8 %1576 to i32
  %1578 = sub nsw i32 %1577, %1437
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1579
  %1581 = bitcast float* %1580 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1573, i8* align 4 %1581, i64 20, i1 false) #6
  br label %1582

1582:                                             ; preds = %1569, %1571
  %1583 = getelementptr inbounds float, float* %1433, i64 %1423
  %1584 = add nuw nsw i64 %1432, 1
  %1585 = icmp eq i64 %1584, %1424
  br i1 %1585, label %1698, label %1431

1586:                                             ; preds = %1411, %1694
  %1587 = phi i64 [ %1696, %1694 ], [ 0, %1411 ]
  %1588 = phi float* [ %1695, %1694 ], [ %1418, %1411 ]
  %1589 = shl nuw nsw i64 %1587, 1
  %1590 = getelementptr inbounds i8, i8* %1414, i64 %1589
  %1591 = load i8, i8* %1590, align 1
  %1592 = sext i8 %1591 to i32
  %1593 = or i64 %1589, 1
  %1594 = getelementptr inbounds i8, i8* %1414, i64 %1593
  %1595 = load i8, i8* %1594, align 1
  %1596 = sext i8 %1595 to i32
  %1597 = getelementptr inbounds float, float* %1588, i64 %1420
  %1598 = sext i8 %1595 to i64
  %1599 = sub nsw i64 0, %1598
  %1600 = getelementptr inbounds float, float* %1597, i64 %1599
  %1601 = sub nsw i32 1, %1592
  %1602 = add nsw i32 %1601, %1596
  call void @celt_pitch_xcorr_c(float* %1588, float* %1600, float* nonnull %1421, i32 %60, i32 %1602, i32 %11) #6
  %1603 = icmp sgt i8 %1591, %1595
  br i1 %1603, label %1694, label %1604

1604:                                             ; preds = %1586
  %1605 = sext i8 %1591 to i64
  %1606 = icmp sgt i64 %1605, %1598
  %1607 = select i1 %1606, i64 %1605, i64 %1598
  %1608 = add nsw i64 %1607, 1
  %1609 = sub nsw i64 %1608, %1605
  %1610 = icmp ult i64 %1609, 8
  br i1 %1610, label %1679, label %1611

1611:                                             ; preds = %1604
  %1612 = and i64 %1609, -8
  %1613 = add nsw i64 %1612, %1605
  %1614 = add nsw i64 %1612, -8
  %1615 = lshr exact i64 %1614, 3
  %1616 = add nuw nsw i64 %1615, 1
  %1617 = and i64 %1616, 1
  %1618 = icmp eq i64 %1614, 0
  br i1 %1618, label %1658, label %1619

1619:                                             ; preds = %1611
  %1620 = sub nuw nsw i64 %1616, %1617
  br label %1621

1621:                                             ; preds = %1621, %1619
  %1622 = phi i64 [ 0, %1619 ], [ %1655, %1621 ]
  %1623 = phi i64 [ %1620, %1619 ], [ %1656, %1621 ]
  %1624 = add i64 %1622, %1605
  %1625 = sub nsw i64 %1598, %1624
  %1626 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1625
  %1627 = getelementptr inbounds float, float* %1626, i64 -3
  %1628 = bitcast float* %1627 to <4 x i32>*
  %1629 = load <4 x i32>, <4 x i32>* %1628, align 4
  %1630 = shufflevector <4 x i32> %1629, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1631 = getelementptr inbounds float, float* %1626, i64 -7
  %1632 = bitcast float* %1631 to <4 x i32>*
  %1633 = load <4 x i32>, <4 x i32>* %1632, align 4
  %1634 = shufflevector <4 x i32> %1633, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1635 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1622
  %1636 = bitcast float* %1635 to <4 x i32>*
  store <4 x i32> %1630, <4 x i32>* %1636, align 16
  %1637 = getelementptr inbounds float, float* %1635, i64 4
  %1638 = bitcast float* %1637 to <4 x i32>*
  store <4 x i32> %1634, <4 x i32>* %1638, align 16
  %1639 = or i64 %1622, 8
  %1640 = add i64 %1639, %1605
  %1641 = sub nsw i64 %1598, %1640
  %1642 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1641
  %1643 = getelementptr inbounds float, float* %1642, i64 -3
  %1644 = bitcast float* %1643 to <4 x i32>*
  %1645 = load <4 x i32>, <4 x i32>* %1644, align 4
  %1646 = shufflevector <4 x i32> %1645, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1647 = getelementptr inbounds float, float* %1642, i64 -7
  %1648 = bitcast float* %1647 to <4 x i32>*
  %1649 = load <4 x i32>, <4 x i32>* %1648, align 4
  %1650 = shufflevector <4 x i32> %1649, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1651 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1639
  %1652 = bitcast float* %1651 to <4 x i32>*
  store <4 x i32> %1646, <4 x i32>* %1652, align 16
  %1653 = getelementptr inbounds float, float* %1651, i64 4
  %1654 = bitcast float* %1653 to <4 x i32>*
  store <4 x i32> %1650, <4 x i32>* %1654, align 16
  %1655 = add i64 %1622, 16
  %1656 = add i64 %1623, -2
  %1657 = icmp eq i64 %1656, 0
  br i1 %1657, label %1658, label %1621, !llvm.loop !15

1658:                                             ; preds = %1621, %1611
  %1659 = phi i64 [ 0, %1611 ], [ %1655, %1621 ]
  %1660 = icmp eq i64 %1617, 0
  br i1 %1660, label %1677, label %1661

1661:                                             ; preds = %1658
  %1662 = add i64 %1659, %1605
  %1663 = sub nsw i64 %1598, %1662
  %1664 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1663
  %1665 = getelementptr inbounds float, float* %1664, i64 -3
  %1666 = bitcast float* %1665 to <4 x i32>*
  %1667 = load <4 x i32>, <4 x i32>* %1666, align 4
  %1668 = shufflevector <4 x i32> %1667, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1669 = getelementptr inbounds float, float* %1664, i64 -7
  %1670 = bitcast float* %1669 to <4 x i32>*
  %1671 = load <4 x i32>, <4 x i32>* %1670, align 4
  %1672 = shufflevector <4 x i32> %1671, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1673 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1659
  %1674 = bitcast float* %1673 to <4 x i32>*
  store <4 x i32> %1668, <4 x i32>* %1674, align 16
  %1675 = getelementptr inbounds float, float* %1673, i64 4
  %1676 = bitcast float* %1675 to <4 x i32>*
  store <4 x i32> %1672, <4 x i32>* %1676, align 16
  br label %1677

1677:                                             ; preds = %1658, %1661
  %1678 = icmp eq i64 %1609, %1612
  br i1 %1678, label %1694, label %1679

1679:                                             ; preds = %1677, %1604
  %1680 = phi i64 [ %1605, %1604 ], [ %1613, %1677 ]
  %1681 = phi i64 [ 0, %1604 ], [ %1612, %1677 ]
  br label %1682

1682:                                             ; preds = %1679, %1682
  %1683 = phi i64 [ %1692, %1682 ], [ %1680, %1679 ]
  %1684 = phi i64 [ %1691, %1682 ], [ %1681, %1679 ]
  %1685 = sub nsw i64 %1598, %1683
  %1686 = getelementptr inbounds [22 x float], [22 x float]* %14, i64 0, i64 %1685
  %1687 = bitcast float* %1686 to i32*
  %1688 = load i32, i32* %1687, align 4
  %1689 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1684
  %1690 = bitcast float* %1689 to i32*
  store i32 %1688, i32* %1690, align 4
  %1691 = add nuw nsw i64 %1684, 1
  %1692 = add nsw i64 %1683, 1
  %1693 = icmp slt i64 %1683, %1598
  br i1 %1693, label %1682, label %1694, !llvm.loop !16

1694:                                             ; preds = %1682, %1677, %1586
  %1695 = getelementptr inbounds float, float* %1588, i64 %1423
  %1696 = add nuw nsw i64 %1587, 1
  %1697 = icmp eq i64 %1696, %1424
  br i1 %1697, label %1698, label %1586

1698:                                             ; preds = %1694, %1582
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %1403) #6
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %1402) #6
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %1402) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1402, i8 -1, i64 88, i1 false) #6
  switch i32 %10, label %1701 [
    i32 4, label %1702
    i32 2, label %1699
  ]

1699:                                             ; preds = %1698
  %1700 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 0
  br label %1710

1701:                                             ; preds = %1698
  call void @celt_fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 584) #7
  unreachable

1702:                                             ; preds = %1698
  %1703 = sext i32 %9 to i64
  %1704 = getelementptr inbounds [3 x [4 x [2 x i8]]], [3 x [4 x [2 x i8]]]* @silk_Lag_range_stage3, i64 0, i64 %1703, i64 0, i64 0
  %1705 = getelementptr inbounds [3 x i8], [3 x i8]* @silk_nb_cbk_searchs_stage3, i64 0, i64 %1703
  %1706 = load i8, i8* %1705, align 1
  %1707 = sext i8 %1706 to i64
  %1708 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 0
  %1709 = icmp sgt i8 %1706, 0
  br i1 %1709, label %1710, label %1810

1710:                                             ; preds = %1702, %1699
  %1711 = phi float* [ %1700, %1699 ], [ %1708, %1702 ]
  %1712 = phi i8* [ getelementptr inbounds ([2 x [12 x i8]], [2 x [12 x i8]]* @silk_CB_lags_stage3_10_ms, i64 0, i64 0, i64 0), %1699 ], [ getelementptr inbounds ([4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 0), %1702 ]
  %1713 = phi i8* [ getelementptr inbounds ([2 x [2 x i8]], [2 x [2 x i8]]* @silk_Lag_range_stage3_10_ms, i64 0, i64 0, i64 0), %1699 ], [ %1704, %1702 ]
  %1714 = phi i64 [ 12, %1699 ], [ 34, %1702 ]
  %1715 = phi i64 [ 12, %1699 ], [ %1707, %1702 ]
  %1716 = and i64 %1715, 4294967295
  %1717 = and i64 %1715, 1
  %1718 = icmp eq i64 %1716, 1
  %1719 = sub nsw i64 %1716, %1717
  %1720 = icmp eq i64 %1717, 0
  br label %1721

1721:                                             ; preds = %1806, %1710
  %1722 = phi i64 [ 0, %1710 ], [ %1808, %1806 ]
  %1723 = phi float* [ %1418, %1710 ], [ %1807, %1806 ]
  %1724 = shl nuw nsw i64 %1722, 1
  %1725 = getelementptr inbounds i8, i8* %1713, i64 %1724
  %1726 = load i8, i8* %1725, align 1
  %1727 = sext i8 %1726 to i32
  %1728 = add nsw i32 %1398, %1727
  %1729 = sext i32 %1728 to i64
  %1730 = sub nsw i64 0, %1729
  %1731 = getelementptr inbounds float, float* %1723, i64 %1730
  %1732 = call double @silk_energy_FLP(float* %1731, i32 %60) #6
  %1733 = fadd double %1732, 1.000000e-03
  %1734 = fptrunc double %1733 to float
  store float %1734, float* %1711, align 16
  %1735 = or i64 %1724, 1
  %1736 = getelementptr inbounds i8, i8* %1713, i64 %1735
  %1737 = load i8, i8* %1736, align 1
  %1738 = icmp sgt i8 %1737, %1726
  br i1 %1738, label %1739, label %1790

1739:                                             ; preds = %1721
  %1740 = sext i8 %1737 to i32
  %1741 = sub nsw i32 1, %1727
  %1742 = add nsw i32 %1741, %1740
  %1743 = zext i32 %1742 to i64
  br label %1744

1744:                                             ; preds = %1744, %1739
  %1745 = phi i64 [ 1, %1739 ], [ %1761, %1744 ]
  %1746 = phi double [ %1733, %1739 ], [ %1758, %1744 ]
  %1747 = sub nsw i64 %1423, %1745
  %1748 = getelementptr inbounds float, float* %1731, i64 %1747
  %1749 = load float, float* %1748, align 4
  %1750 = fpext float %1749 to double
  %1751 = fmul double %1750, %1750
  %1752 = fsub double %1746, %1751
  %1753 = sub nsw i64 0, %1745
  %1754 = getelementptr inbounds float, float* %1731, i64 %1753
  %1755 = load float, float* %1754, align 4
  %1756 = fpext float %1755 to double
  %1757 = fmul double %1756, %1756
  %1758 = fadd double %1752, %1757
  %1759 = fptrunc double %1758 to float
  %1760 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1745
  store float %1759, float* %1760, align 4
  %1761 = add nuw nsw i64 %1745, 1
  %1762 = icmp eq i64 %1761, %1743
  br i1 %1762, label %1790, label %1744

1763:                                             ; preds = %1790, %1763
  %1764 = phi i64 [ %1787, %1763 ], [ 0, %1790 ]
  %1765 = phi i64 [ %1788, %1763 ], [ %1719, %1790 ]
  %1766 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1722, i64 %1764, i64 0
  %1767 = bitcast float* %1766 to i8*
  %1768 = add nuw nsw i64 %1764, %1792
  %1769 = getelementptr inbounds i8, i8* %1712, i64 %1768
  %1770 = load i8, i8* %1769, align 1
  %1771 = sext i8 %1770 to i32
  %1772 = sub nsw i32 %1771, %1727
  %1773 = sext i32 %1772 to i64
  %1774 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1773
  %1775 = bitcast float* %1774 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1767, i8* align 4 %1775, i64 20, i1 false) #6
  %1776 = or i64 %1764, 1
  %1777 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1722, i64 %1776, i64 0
  %1778 = bitcast float* %1777 to i8*
  %1779 = add nuw nsw i64 %1776, %1792
  %1780 = getelementptr inbounds i8, i8* %1712, i64 %1779
  %1781 = load i8, i8* %1780, align 1
  %1782 = sext i8 %1781 to i32
  %1783 = sub nsw i32 %1782, %1727
  %1784 = sext i32 %1783 to i64
  %1785 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1784
  %1786 = bitcast float* %1785 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1778, i8* align 4 %1786, i64 20, i1 false) #6
  %1787 = add nuw nsw i64 %1764, 2
  %1788 = add i64 %1765, -2
  %1789 = icmp eq i64 %1788, 0
  br i1 %1789, label %1793, label %1763

1790:                                             ; preds = %1744, %1721
  %1791 = mul i64 %1722, %1714
  %1792 = and i64 %1791, 4294967294
  br i1 %1718, label %1793, label %1763

1793:                                             ; preds = %1763, %1790
  %1794 = phi i64 [ 0, %1790 ], [ %1787, %1763 ]
  br i1 %1720, label %1806, label %1795

1795:                                             ; preds = %1793
  %1796 = getelementptr [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1722, i64 %1794, i64 0
  %1797 = bitcast float* %1796 to i8*
  %1798 = add nuw nsw i64 %1794, %1792
  %1799 = getelementptr inbounds i8, i8* %1712, i64 %1798
  %1800 = load i8, i8* %1799, align 1
  %1801 = sext i8 %1800 to i32
  %1802 = sub nsw i32 %1801, %1727
  %1803 = sext i32 %1802 to i64
  %1804 = getelementptr [22 x float], [22 x float]* %15, i64 0, i64 %1803
  %1805 = bitcast float* %1804 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1797, i8* align 4 %1805, i64 20, i1 false) #6
  br label %1806

1806:                                             ; preds = %1793, %1795
  %1807 = getelementptr inbounds float, float* %1723, i64 %1423
  %1808 = add nuw nsw i64 %1722, 1
  %1809 = icmp eq i64 %1808, %1424
  br i1 %1809, label %1856, label %1721

1810:                                             ; preds = %1702, %1852
  %1811 = phi i64 [ %1854, %1852 ], [ 0, %1702 ]
  %1812 = phi float* [ %1853, %1852 ], [ %1418, %1702 ]
  %1813 = shl nuw nsw i64 %1811, 1
  %1814 = getelementptr inbounds [3 x [4 x [2 x i8]]], [3 x [4 x [2 x i8]]]* @silk_Lag_range_stage3, i64 0, i64 %1703, i64 0, i64 %1813
  %1815 = load i8, i8* %1814, align 2
  %1816 = sext i8 %1815 to i32
  %1817 = add nsw i32 %1398, %1816
  %1818 = sext i32 %1817 to i64
  %1819 = sub nsw i64 0, %1818
  %1820 = getelementptr inbounds float, float* %1812, i64 %1819
  %1821 = call double @silk_energy_FLP(float* %1820, i32 %60) #6
  %1822 = fadd double %1821, 1.000000e-03
  %1823 = fptrunc double %1822 to float
  store float %1823, float* %1708, align 16
  %1824 = or i64 %1813, 1
  %1825 = getelementptr inbounds [3 x [4 x [2 x i8]]], [3 x [4 x [2 x i8]]]* @silk_Lag_range_stage3, i64 0, i64 %1703, i64 0, i64 %1824
  %1826 = load i8, i8* %1825, align 1
  %1827 = icmp sgt i8 %1826, %1815
  br i1 %1827, label %1828, label %1852

1828:                                             ; preds = %1810
  %1829 = sext i8 %1826 to i32
  %1830 = sub nsw i32 1, %1816
  %1831 = add nsw i32 %1830, %1829
  %1832 = zext i32 %1831 to i64
  br label %1833

1833:                                             ; preds = %1833, %1828
  %1834 = phi i64 [ 1, %1828 ], [ %1850, %1833 ]
  %1835 = phi double [ %1822, %1828 ], [ %1847, %1833 ]
  %1836 = sub nsw i64 %1423, %1834
  %1837 = getelementptr inbounds float, float* %1820, i64 %1836
  %1838 = load float, float* %1837, align 4
  %1839 = fpext float %1838 to double
  %1840 = fmul double %1839, %1839
  %1841 = fsub double %1835, %1840
  %1842 = sub nsw i64 0, %1834
  %1843 = getelementptr inbounds float, float* %1820, i64 %1842
  %1844 = load float, float* %1843, align 4
  %1845 = fpext float %1844 to double
  %1846 = fmul double %1845, %1845
  %1847 = fadd double %1841, %1846
  %1848 = fptrunc double %1847 to float
  %1849 = getelementptr inbounds [22 x float], [22 x float]* %15, i64 0, i64 %1834
  store float %1848, float* %1849, align 4
  %1850 = add nuw nsw i64 %1834, 1
  %1851 = icmp eq i64 %1850, %1832
  br i1 %1851, label %1852, label %1833

1852:                                             ; preds = %1833, %1810
  %1853 = getelementptr inbounds float, float* %1812, i64 %1423
  %1854 = add nuw nsw i64 %1811, 1
  %1855 = icmp eq i64 %1854, %1424
  br i1 %1855, label %1856, label %1810

1856:                                             ; preds = %1852, %1806
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %1402) #6
  %1857 = sitofp i32 %1395 to float
  %1858 = fdiv float 0x3FA99999A0000000, %1857
  br i1 %1181, label %1859, label %1864

1859:                                             ; preds = %1856
  %1860 = sext i32 %9 to i64
  %1861 = getelementptr inbounds [3 x i8], [3 x i8]* @silk_nb_cbk_searchs_stage3, i64 0, i64 %1860
  %1862 = load i8, i8* %1861, align 1
  %1863 = sext i8 %1862 to i32
  br label %1864

1864:                                             ; preds = %1856, %1859
  %1865 = phi i64 [ 34, %1859 ], [ 12, %1856 ]
  %1866 = phi i32 [ %1863, %1859 ], [ 12, %1856 ]
  %1867 = phi i8* [ getelementptr inbounds ([4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 0), %1859 ], [ getelementptr inbounds ([2 x [12 x i8]], [2 x [12 x i8]]* @silk_CB_lags_stage3_10_ms, i64 0, i64 0, i64 0), %1856 ]
  %1868 = mul nsw i32 %60, %10
  %1869 = call double @silk_energy_FLP(float* %1418, i32 %1868) #6
  %1870 = fadd double %1869, 1.000000e+00
  %1871 = icmp sgt i32 %1398, %1401
  br i1 %1871, label %1969, label %1872

1872:                                             ; preds = %1864
  %1873 = icmp sgt i32 %1866, 0
  %1874 = zext i32 %1866 to i64
  %1875 = zext i32 %1866 to i64
  %1876 = and i64 %1874, 1
  %1877 = icmp eq i32 %1866, 1
  %1878 = sub nsw i64 %1874, %1876
  %1879 = icmp eq i64 %1876, 0
  %1880 = and i64 %1424, 1
  %1881 = icmp eq i32 %10, 1
  %1882 = sub nsw i64 %1424, %1880
  %1883 = icmp eq i64 %1880, 0
  br label %1884

1884:                                             ; preds = %2055, %1872
  %1885 = phi i64 [ %2059, %2055 ], [ 0, %1872 ]
  %1886 = phi i32 [ %2058, %2055 ], [ %1395, %1872 ]
  %1887 = phi i32 [ %2057, %2055 ], [ 0, %1872 ]
  %1888 = phi float [ %2056, %2055 ], [ -1.000000e+03, %1872 ]
  %1889 = phi i32 [ %2060, %2055 ], [ %1398, %1872 ]
  br i1 %1873, label %1890, label %2055

1890:                                             ; preds = %1884
  br i1 %1120, label %1892, label %1891

1891:                                             ; preds = %1890
  br i1 %1877, label %2035, label %2012

1892:                                             ; preds = %1890, %1919
  %1893 = phi i64 [ %1923, %1919 ], [ 0, %1890 ]
  %1894 = phi i32 [ %1922, %1919 ], [ %1886, %1890 ]
  %1895 = phi i32 [ %1921, %1919 ], [ %1887, %1890 ]
  %1896 = phi float [ %1920, %1919 ], [ %1888, %1890 ]
  br i1 %1881, label %1950, label %1925

1897:                                             ; preds = %1965
  %1898 = fmul double %1966, 2.000000e+00
  %1899 = fdiv double %1898, %1967
  %1900 = fptrunc double %1899 to float
  %1901 = trunc i64 %1893 to i32
  %1902 = sitofp i32 %1901 to float
  %1903 = fmul float %1858, %1902
  %1904 = fsub float 1.000000e+00, %1903
  %1905 = fmul float %1904, %1900
  br label %1906

1906:                                             ; preds = %1897, %1965
  %1907 = phi float [ %1905, %1897 ], [ 0.000000e+00, %1965 ]
  %1908 = fcmp ogt float %1907, %1896
  br i1 %1908, label %1909, label %1919

1909:                                             ; preds = %1906
  %1910 = getelementptr inbounds [4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 %1893
  %1911 = load i8, i8* %1910, align 1
  %1912 = sext i8 %1911 to i32
  %1913 = add nsw i32 %1889, %1912
  %1914 = icmp slt i32 %1913, %62
  %1915 = select i1 %1914, float %1907, float %1896
  %1916 = trunc i64 %1893 to i32
  %1917 = select i1 %1914, i32 %1916, i32 %1895
  %1918 = select i1 %1914, i32 %1889, i32 %1894
  br label %1919

1919:                                             ; preds = %1909, %1906
  %1920 = phi float [ %1896, %1906 ], [ %1915, %1909 ]
  %1921 = phi i32 [ %1895, %1906 ], [ %1917, %1909 ]
  %1922 = phi i32 [ %1894, %1906 ], [ %1918, %1909 ]
  %1923 = add nuw nsw i64 %1893, 1
  %1924 = icmp eq i64 %1923, %1875
  br i1 %1924, label %2055, label %1892

1925:                                             ; preds = %1892, %1925
  %1926 = phi i64 [ %1947, %1925 ], [ 0, %1892 ]
  %1927 = phi double [ %1946, %1925 ], [ %1870, %1892 ]
  %1928 = phi double [ %1942, %1925 ], [ 0.000000e+00, %1892 ]
  %1929 = phi i64 [ %1948, %1925 ], [ %1882, %1892 ]
  %1930 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1926, i64 %1893, i64 %1885
  %1931 = load float, float* %1930, align 4
  %1932 = fpext float %1931 to double
  %1933 = fadd double %1928, %1932
  %1934 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1926, i64 %1893, i64 %1885
  %1935 = load float, float* %1934, align 4
  %1936 = fpext float %1935 to double
  %1937 = fadd double %1927, %1936
  %1938 = or i64 %1926, 1
  %1939 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1938, i64 %1893, i64 %1885
  %1940 = load float, float* %1939, align 4
  %1941 = fpext float %1940 to double
  %1942 = fadd double %1933, %1941
  %1943 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1938, i64 %1893, i64 %1885
  %1944 = load float, float* %1943, align 4
  %1945 = fpext float %1944 to double
  %1946 = fadd double %1937, %1945
  %1947 = add nuw nsw i64 %1926, 2
  %1948 = add i64 %1929, -2
  %1949 = icmp eq i64 %1948, 0
  br i1 %1949, label %1950, label %1925

1950:                                             ; preds = %1925, %1892
  %1951 = phi double [ undef, %1892 ], [ %1942, %1925 ]
  %1952 = phi double [ undef, %1892 ], [ %1946, %1925 ]
  %1953 = phi i64 [ 0, %1892 ], [ %1947, %1925 ]
  %1954 = phi double [ %1870, %1892 ], [ %1946, %1925 ]
  %1955 = phi double [ 0.000000e+00, %1892 ], [ %1942, %1925 ]
  br i1 %1883, label %1965, label %1956

1956:                                             ; preds = %1950
  %1957 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %27, i64 0, i64 %1953, i64 %1893, i64 %1885
  %1958 = load float, float* %1957, align 4
  %1959 = fpext float %1958 to double
  %1960 = fadd double %1954, %1959
  %1961 = getelementptr inbounds [4 x [34 x [5 x float]]], [4 x [34 x [5 x float]]]* %28, i64 0, i64 %1953, i64 %1893, i64 %1885
  %1962 = load float, float* %1961, align 4
  %1963 = fpext float %1962 to double
  %1964 = fadd double %1955, %1963
  br label %1965

1965:                                             ; preds = %1950, %1956
  %1966 = phi double [ %1951, %1950 ], [ %1964, %1956 ]
  %1967 = phi double [ %1952, %1950 ], [ %1960, %1956 ]
  %1968 = fcmp ogt double %1966, 0.000000e+00
  br i1 %1968, label %1897, label %1906

1969:                                             ; preds = %2055, %1864
  %1970 = phi i32 [ 0, %1864 ], [ %2057, %2055 ]
  %1971 = phi i32 [ %1395, %1864 ], [ %2058, %2055 ]
  br i1 %1120, label %1972, label %2121

1972:                                             ; preds = %1969
  %1973 = icmp sgt i32 %61, %62
  %1974 = sext i32 %1970 to i64
  %1975 = and i64 %1424, 1
  %1976 = icmp eq i32 %10, 1
  br i1 %1973, label %1980, label %1977

1977:                                             ; preds = %1972
  br i1 %1976, label %2106, label %1978

1978:                                             ; preds = %1977
  %1979 = sub nsw i64 %1424, %1975
  br label %2062

1980:                                             ; preds = %1972
  br i1 %1976, label %2091, label %1981

1981:                                             ; preds = %1980
  %1982 = sub nsw i64 %1424, %1975
  br label %1983

1983:                                             ; preds = %1983, %1981
  %1984 = phi i64 [ 0, %1981 ], [ %2009, %1983 ]
  %1985 = phi i64 [ %1982, %1981 ], [ %2010, %1983 ]
  %1986 = mul nuw nsw i64 %1984, %1865
  %1987 = add nsw i64 %1986, %1974
  %1988 = getelementptr inbounds i8, i8* %1867, i64 %1987
  %1989 = load i8, i8* %1988, align 1
  %1990 = sext i8 %1989 to i32
  %1991 = add nsw i32 %1971, %1990
  %1992 = getelementptr inbounds i32, i32* %1, i64 %1984
  %1993 = icmp sgt i32 %1991, %61
  %1994 = icmp slt i32 %1991, %62
  %1995 = select i1 %1994, i32 %62, i32 %1991
  %1996 = select i1 %1993, i32 %61, i32 %1995
  store i32 %1996, i32* %1992, align 4
  %1997 = or i64 %1984, 1
  %1998 = mul nuw nsw i64 %1997, %1865
  %1999 = add nsw i64 %1998, %1974
  %2000 = getelementptr inbounds i8, i8* %1867, i64 %1999
  %2001 = load i8, i8* %2000, align 1
  %2002 = sext i8 %2001 to i32
  %2003 = add nsw i32 %1971, %2002
  %2004 = getelementptr inbounds i32, i32* %1, i64 %1997
  %2005 = icmp sgt i32 %2003, %61
  %2006 = icmp slt i32 %2003, %62
  %2007 = select i1 %2006, i32 %62, i32 %2003
  %2008 = select i1 %2005, i32 %61, i32 %2007
  store i32 %2008, i32* %2004, align 4
  %2009 = add nuw nsw i64 %1984, 2
  %2010 = add i64 %1985, -2
  %2011 = icmp eq i64 %2010, 0
  br i1 %2011, label %2091, label %1983, !llvm.loop !17

2012:                                             ; preds = %1891, %2191
  %2013 = phi i64 [ %2195, %2191 ], [ 0, %1891 ]
  %2014 = phi i32 [ %2194, %2191 ], [ %1886, %1891 ]
  %2015 = phi i32 [ %2193, %2191 ], [ %1887, %1891 ]
  %2016 = phi float [ %2192, %2191 ], [ %1888, %1891 ]
  %2017 = phi i64 [ %2196, %2191 ], [ %1878, %1891 ]
  %2018 = fcmp olt float %2016, 0.000000e+00
  br i1 %2018, label %2019, label %2029

2019:                                             ; preds = %2012
  %2020 = getelementptr inbounds [4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 %2013
  %2021 = load i8, i8* %2020, align 2
  %2022 = sext i8 %2021 to i32
  %2023 = add nsw i32 %1889, %2022
  %2024 = icmp slt i32 %2023, %62
  %2025 = select i1 %2024, float 0.000000e+00, float %2016
  %2026 = trunc i64 %2013 to i32
  %2027 = select i1 %2024, i32 %2026, i32 %2015
  %2028 = select i1 %2024, i32 %1889, i32 %2014
  br label %2029

2029:                                             ; preds = %2019, %2012
  %2030 = phi float [ %2016, %2012 ], [ %2025, %2019 ]
  %2031 = phi i32 [ %2015, %2012 ], [ %2027, %2019 ]
  %2032 = phi i32 [ %2014, %2012 ], [ %2028, %2019 ]
  %2033 = or i64 %2013, 1
  %2034 = fcmp olt float %2030, 0.000000e+00
  br i1 %2034, label %2181, label %2191

2035:                                             ; preds = %2191, %1891
  %2036 = phi float [ undef, %1891 ], [ %2192, %2191 ]
  %2037 = phi i32 [ undef, %1891 ], [ %2193, %2191 ]
  %2038 = phi i32 [ undef, %1891 ], [ %2194, %2191 ]
  %2039 = phi i64 [ 0, %1891 ], [ %2195, %2191 ]
  %2040 = phi i32 [ %1886, %1891 ], [ %2194, %2191 ]
  %2041 = phi i32 [ %1887, %1891 ], [ %2193, %2191 ]
  %2042 = phi float [ %1888, %1891 ], [ %2192, %2191 ]
  br i1 %1879, label %2055, label %2043

2043:                                             ; preds = %2035
  %2044 = fcmp olt float %2042, 0.000000e+00
  br i1 %2044, label %2045, label %2055

2045:                                             ; preds = %2043
  %2046 = getelementptr inbounds [4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 %2039
  %2047 = load i8, i8* %2046, align 1
  %2048 = sext i8 %2047 to i32
  %2049 = add nsw i32 %1889, %2048
  %2050 = icmp slt i32 %2049, %62
  %2051 = select i1 %2050, float 0.000000e+00, float %2042
  %2052 = trunc i64 %2039 to i32
  %2053 = select i1 %2050, i32 %2052, i32 %2041
  %2054 = select i1 %2050, i32 %1889, i32 %2040
  br label %2055

2055:                                             ; preds = %2035, %2043, %2045, %1919, %1884
  %2056 = phi float [ %1888, %1884 ], [ %1920, %1919 ], [ %2036, %2035 ], [ %2042, %2043 ], [ %2051, %2045 ]
  %2057 = phi i32 [ %1887, %1884 ], [ %1921, %1919 ], [ %2037, %2035 ], [ %2041, %2043 ], [ %2053, %2045 ]
  %2058 = phi i32 [ %1886, %1884 ], [ %1922, %1919 ], [ %2038, %2035 ], [ %2040, %2043 ], [ %2054, %2045 ]
  %2059 = add nuw nsw i64 %1885, 1
  %2060 = add nsw i32 %1889, 1
  %2061 = icmp slt i32 %1889, %1401
  br i1 %2061, label %1884, label %1969

2062:                                             ; preds = %2062, %1978
  %2063 = phi i64 [ 0, %1978 ], [ %2088, %2062 ]
  %2064 = phi i64 [ %1979, %1978 ], [ %2089, %2062 ]
  %2065 = mul nuw nsw i64 %2063, %1865
  %2066 = add nsw i64 %2065, %1974
  %2067 = getelementptr inbounds i8, i8* %1867, i64 %2066
  %2068 = load i8, i8* %2067, align 1
  %2069 = sext i8 %2068 to i32
  %2070 = add nsw i32 %1971, %2069
  %2071 = getelementptr inbounds i32, i32* %1, i64 %2063
  %2072 = icmp sgt i32 %2070, %62
  %2073 = icmp slt i32 %2070, %61
  %2074 = select i1 %2073, i32 %61, i32 %2070
  %2075 = select i1 %2072, i32 %62, i32 %2074
  store i32 %2075, i32* %2071, align 4
  %2076 = or i64 %2063, 1
  %2077 = mul nuw nsw i64 %2076, %1865
  %2078 = add nsw i64 %2077, %1974
  %2079 = getelementptr inbounds i8, i8* %1867, i64 %2078
  %2080 = load i8, i8* %2079, align 1
  %2081 = sext i8 %2080 to i32
  %2082 = add nsw i32 %1971, %2081
  %2083 = getelementptr inbounds i32, i32* %1, i64 %2076
  %2084 = icmp sgt i32 %2082, %62
  %2085 = icmp slt i32 %2082, %61
  %2086 = select i1 %2085, i32 %61, i32 %2082
  %2087 = select i1 %2084, i32 %62, i32 %2086
  store i32 %2087, i32* %2083, align 4
  %2088 = add nuw nsw i64 %2063, 2
  %2089 = add i64 %2064, -2
  %2090 = icmp eq i64 %2089, 0
  br i1 %2090, label %2106, label %2062, !llvm.loop !18

2091:                                             ; preds = %1983, %1980
  %2092 = phi i64 [ 0, %1980 ], [ %2009, %1983 ]
  %2093 = icmp eq i64 %1975, 0
  br i1 %2093, label %2121, label %2094

2094:                                             ; preds = %2091
  %2095 = mul nuw nsw i64 %2092, %1865
  %2096 = add nsw i64 %2095, %1974
  %2097 = getelementptr inbounds i8, i8* %1867, i64 %2096
  %2098 = load i8, i8* %2097, align 1
  %2099 = sext i8 %2098 to i32
  %2100 = add nsw i32 %1971, %2099
  %2101 = getelementptr inbounds i32, i32* %1, i64 %2092
  %2102 = icmp sgt i32 %2100, %61
  %2103 = icmp slt i32 %2100, %62
  %2104 = select i1 %2103, i32 %62, i32 %2100
  %2105 = select i1 %2102, i32 %61, i32 %2104
  store i32 %2105, i32* %2101, align 4
  br label %2121

2106:                                             ; preds = %2062, %1977
  %2107 = phi i64 [ 0, %1977 ], [ %2088, %2062 ]
  %2108 = icmp eq i64 %1975, 0
  br i1 %2108, label %2121, label %2109

2109:                                             ; preds = %2106
  %2110 = mul nuw nsw i64 %2107, %1865
  %2111 = add nsw i64 %2110, %1974
  %2112 = getelementptr inbounds i8, i8* %1867, i64 %2111
  %2113 = load i8, i8* %2112, align 1
  %2114 = sext i8 %2113 to i32
  %2115 = add nsw i32 %1971, %2114
  %2116 = getelementptr inbounds i32, i32* %1, i64 %2107
  %2117 = icmp sgt i32 %2115, %62
  %2118 = icmp slt i32 %2115, %61
  %2119 = select i1 %2118, i32 %61, i32 %2115
  %2120 = select i1 %2117, i32 %62, i32 %2119
  store i32 %2120, i32* %2116, align 4
  br label %2121

2121:                                             ; preds = %2109, %2106, %2094, %2091, %1969
  %2122 = sub nsw i32 %1971, %61
  %2123 = trunc i32 %2122 to i16
  br label %2171

2124:                                             ; preds = %2124, %1369
  %2125 = phi i64 [ 0, %1369 ], [ %2150, %2124 ]
  %2126 = phi i64 [ %1370, %1369 ], [ %2151, %2124 ]
  %2127 = mul nuw nsw i64 %2125, %1364
  %2128 = add nsw i64 %2127, %1365
  %2129 = getelementptr inbounds i8, i8* %1189, i64 %2128
  %2130 = load i8, i8* %2129, align 1
  %2131 = sext i8 %2130 to i32
  %2132 = add nsw i32 %1352, %2131
  %2133 = getelementptr inbounds i32, i32* %1, i64 %2125
  %2134 = icmp sgt i32 %2132, 16
  %2135 = select i1 %2134, i32 %2132, i32 16
  %2136 = icmp slt i32 %2135, 144
  %2137 = select i1 %2136, i32 %2135, i32 144
  store i32 %2137, i32* %2133, align 4
  %2138 = or i64 %2125, 1
  %2139 = mul nuw nsw i64 %2138, %1364
  %2140 = add nsw i64 %2139, %1365
  %2141 = getelementptr inbounds i8, i8* %1189, i64 %2140
  %2142 = load i8, i8* %2141, align 1
  %2143 = sext i8 %2142 to i32
  %2144 = add nsw i32 %1352, %2143
  %2145 = getelementptr inbounds i32, i32* %1, i64 %2138
  %2146 = icmp sgt i32 %2144, 16
  %2147 = select i1 %2146, i32 %2144, i32 16
  %2148 = icmp slt i32 %2147, 144
  %2149 = select i1 %2148, i32 %2147, i32 144
  store i32 %2149, i32* %2145, align 4
  %2150 = add nuw nsw i64 %2125, 2
  %2151 = add i64 %2126, -2
  %2152 = icmp eq i64 %2151, 0
  br i1 %2152, label %2153, label %2124, !llvm.loop !19

2153:                                             ; preds = %2124, %1363
  %2154 = phi i64 [ 0, %1363 ], [ %2150, %2124 ]
  %2155 = icmp eq i64 %1367, 0
  br i1 %2155, label %2168, label %2156

2156:                                             ; preds = %2153
  %2157 = mul nuw nsw i64 %2154, %1364
  %2158 = add nsw i64 %2157, %1365
  %2159 = getelementptr inbounds i8, i8* %1189, i64 %2158
  %2160 = load i8, i8* %2159, align 1
  %2161 = sext i8 %2160 to i32
  %2162 = add nsw i32 %1352, %2161
  %2163 = getelementptr inbounds i32, i32* %1, i64 %2154
  %2164 = icmp sgt i32 %2162, 16
  %2165 = select i1 %2164, i32 %2162, i32 16
  %2166 = icmp slt i32 %2165, 144
  %2167 = select i1 %2166, i32 %2165, i32 144
  store i32 %2167, i32* %2163, align 4
  br label %2168

2168:                                             ; preds = %2156, %2153, %1362
  %2169 = trunc i32 %1352 to i16
  %2170 = add i16 %2169, -16
  br label %2171

2171:                                             ; preds = %2168, %2121
  %2172 = phi i16 [ %2170, %2168 ], [ %2123, %2121 ]
  %2173 = phi i32 [ %1351, %2168 ], [ %1970, %2121 ]
  store i16 %2172, i16* %2, align 2
  %2174 = trunc i32 %2173 to i8
  store i8 %2174, i8* %3, align 1
  %2175 = load i16, i16* %2, align 2
  %2176 = icmp sgt i16 %2175, -1
  br i1 %2176, label %2179, label %2177

2177:                                             ; preds = %2171
  call void @celt_fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 474) #7
  unreachable

2178:                                             ; preds = %754, %1357
  store float 0.000000e+00, float* %4, align 4
  store i16 0, i16* %2, align 2
  store i8 0, i8* %3, align 1
  br label %2179

2179:                                             ; preds = %2178, %2171
  %2180 = phi i32 [ 0, %2171 ], [ 1, %2178 ]
  call void @llvm.lifetime.end.p0i8(i64 2720, i8* nonnull %43) #6
  call void @llvm.lifetime.end.p0i8(i64 2720, i8* nonnull %42) #6
  call void @llvm.lifetime.end.p0i8(i64 298, i8* nonnull %41) #6
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %40) #6
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 260, i8* nonnull %39) #6
  call void @llvm.lifetime.end.p0i8(i64 2384, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #6
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %34) #6
  call void @llvm.lifetime.end.p0i8(i64 640, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 640, i8* nonnull %32) #6
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %31) #6
  ret i32 %2180

2181:                                             ; preds = %2029
  %2182 = getelementptr inbounds [4 x [34 x i8]], [4 x [34 x i8]]* @silk_CB_lags_stage3, i64 0, i64 0, i64 %2033
  %2183 = load i8, i8* %2182, align 1
  %2184 = sext i8 %2183 to i32
  %2185 = add nsw i32 %1889, %2184
  %2186 = icmp slt i32 %2185, %62
  %2187 = select i1 %2186, float 0.000000e+00, float %2030
  %2188 = trunc i64 %2033 to i32
  %2189 = select i1 %2186, i32 %2188, i32 %2031
  %2190 = select i1 %2186, i32 %1889, i32 %2032
  br label %2191

2191:                                             ; preds = %2181, %2029
  %2192 = phi float [ %2030, %2029 ], [ %2187, %2181 ]
  %2193 = phi i32 [ %2031, %2029 ], [ %2189, %2181 ]
  %2194 = phi i32 [ %2032, %2029 ], [ %2190, %2181 ]
  %2195 = add nuw nsw i64 %2013, 2
  %2196 = add i64 %2017, -2
  %2197 = icmp eq i64 %2196, 0
  br i1 %2197, label %2035, label %2012

2198:                                             ; preds = %1112
  %2199 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1114
  %2200 = load i16, i16* %2199, align 2
  %2201 = icmp sgt i16 %2200, 0
  br i1 %2201, label %2202, label %2209

2202:                                             ; preds = %2198
  %2203 = trunc i32 %1102 to i16
  %2204 = or i16 %2203, 1
  %2205 = add nsw i16 %2204, -2
  %2206 = sext i32 %1113 to i64
  %2207 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %2206
  store i16 %2205, i16* %2207, align 2
  %2208 = add nsw i32 %1113, 1
  br label %2209

2209:                                             ; preds = %2202, %2198
  %2210 = phi i32 [ %2208, %2202 ], [ %1113, %2198 ]
  %2211 = add nuw nsw i64 %1100, 2
  %2212 = add nuw nsw i32 %1102, 2
  br label %1099

2213:                                             ; preds = %1085
  %2214 = add nsw i64 %1088, -2
  %2215 = add i16 %1093, %1086
  %2216 = add nsw i64 %1088, -4
  %2217 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %2216
  %2218 = load i16, i16* %2217, align 4
  %2219 = add i16 %2215, %2218
  %2220 = getelementptr inbounds [149 x i16], [149 x i16]* %26, i64 0, i64 %1089
  %2221 = load i16, i16* %2220, align 2
  %2222 = add i16 %2219, %2221
  store i16 %2222, i16* %2220, align 2
  br label %1085

2223:                                             ; preds = %1079
  %2224 = sext i32 %1080 to i64
  %2225 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %2224
  %2226 = trunc i64 %1070 to i32
  store i32 %2226, i32* %2225, align 4
  %2227 = add nsw i32 %1080, 1
  br label %2228

2228:                                             ; preds = %2223, %1079
  %2229 = phi i32 [ %2227, %2223 ], [ %1080, %1079 ]
  %2230 = icmp eq i64 %1081, 144
  br i1 %2230, label %1063, label %1067

2231:                                             ; preds = %767
  %2232 = getelementptr inbounds [24 x i32], [24 x i32]* %25, i64 0, i64 %772
  %2233 = load i32, i32* %2232, align 4
  %2234 = shl i32 %2233, 1
  %2235 = add i32 %2234, 16
  store i32 %2235, i32* %2232, align 4
  %2236 = add nuw nsw i64 %762, 2
  %2237 = icmp eq i64 %2236, %760
  br i1 %2237, label %780, label %761
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_resampler_down2(i32*, i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @silk_resampler_down2_3(i32*, i16*, i16*, i32) local_unnamed_addr #3

declare void @celt_pitch_xcorr_c(float*, float*, float*, i32, i32, i32) local_unnamed_addr #3

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #3

declare void @silk_insertion_sort_decreasing_FLP(float*, i32*, i32, i32) local_unnamed_addr #3

declare double @silk_inner_product_FLP(float*, float*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse.cvtss2si(<4 x float>) #4

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
