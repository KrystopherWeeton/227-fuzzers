; ModuleID = '../../third_party/nasm/asm/pptok.c'
source_filename = "../../third_party/nasm/asm/pptok.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%if\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%ifctx\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%ifdef\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"%ifdefalias\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%ifempty\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"%ifenv\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"%ifid\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"%ifidn\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"%ifidni\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"%ifmacro\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"%ifnum\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"%ifstr\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"%iftoken\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"%ifusable\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"%ifusing\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"%ifn\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"%ifnctx\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"%ifndef\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"%ifndefalias\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"%ifnempty\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"%ifnenv\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"%ifnid\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"%ifnidn\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"%ifnidni\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"%ifnmacro\00", align 1
@.str.25 = private unnamed_addr constant [8 x i8] c"%ifnnum\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"%ifnstr\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"%ifntoken\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"%ifnusable\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"%ifnusing\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"%elif\00", align 1
@.str.31 = private unnamed_addr constant [9 x i8] c"%elifctx\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"%elifdef\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"%elifdefalias\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"%elifempty\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"%elifenv\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"%elifid\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"%elifidn\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"%elifidni\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"%elifmacro\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"%elifnum\00", align 1
@.str.41 = private unnamed_addr constant [9 x i8] c"%elifstr\00", align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"%eliftoken\00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"%elifusable\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"%elifusing\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"%elifn\00", align 1
@.str.46 = private unnamed_addr constant [10 x i8] c"%elifnctx\00", align 1
@.str.47 = private unnamed_addr constant [10 x i8] c"%elifndef\00", align 1
@.str.48 = private unnamed_addr constant [15 x i8] c"%elifndefalias\00", align 1
@.str.49 = private unnamed_addr constant [12 x i8] c"%elifnempty\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"%elifnenv\00", align 1
@.str.51 = private unnamed_addr constant [9 x i8] c"%elifnid\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"%elifnidn\00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"%elifnidni\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"%elifnmacro\00", align 1
@.str.55 = private unnamed_addr constant [10 x i8] c"%elifnnum\00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c"%elifnstr\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"%elifntoken\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"%elifnusable\00", align 1
@.str.59 = private unnamed_addr constant [12 x i8] c"%elifnusing\00", align 1
@.str.60 = private unnamed_addr constant [9 x i8] c"%aliases\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"%arg\00", align 1
@.str.62 = private unnamed_addr constant [7 x i8] c"%clear\00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"%depend\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"%else\00", align 1
@.str.65 = private unnamed_addr constant [7 x i8] c"%endif\00", align 1
@.str.66 = private unnamed_addr constant [6 x i8] c"%endm\00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"%endmacro\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"%endrep\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"%error\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"%exitmacro\00", align 1
@.str.71 = private unnamed_addr constant [9 x i8] c"%exitrep\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"%fatal\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"%include\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"%line\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"%local\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"%null\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"%pop\00", align 1
@.str.78 = private unnamed_addr constant [8 x i8] c"%pragma\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"%push\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"%rep\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"%repl\00", align 1
@.str.82 = private unnamed_addr constant [8 x i8] c"%rotate\00", align 1
@.str.83 = private unnamed_addr constant [11 x i8] c"%stacksize\00", align 1
@.str.84 = private unnamed_addr constant [7 x i8] c"%undef\00", align 1
@.str.85 = private unnamed_addr constant [12 x i8] c"%undefalias\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"%use\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"%warning\00", align 1
@.str.88 = private unnamed_addr constant [8 x i8] c"%assign\00", align 1
@.str.89 = private unnamed_addr constant [9 x i8] c"%iassign\00", align 1
@.str.90 = private unnamed_addr constant [10 x i8] c"%defalias\00", align 1
@.str.91 = private unnamed_addr constant [11 x i8] c"%idefalias\00", align 1
@.str.92 = private unnamed_addr constant [8 x i8] c"%define\00", align 1
@.str.93 = private unnamed_addr constant [9 x i8] c"%idefine\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c"%defstr\00", align 1
@.str.95 = private unnamed_addr constant [9 x i8] c"%idefstr\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"%deftok\00", align 1
@.str.97 = private unnamed_addr constant [9 x i8] c"%ideftok\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"%macro\00", align 1
@.str.99 = private unnamed_addr constant [8 x i8] c"%imacro\00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"%pathsearch\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"%ipathsearch\00", align 1
@.str.102 = private unnamed_addr constant [8 x i8] c"%rmacro\00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"%irmacro\00", align 1
@.str.104 = private unnamed_addr constant [8 x i8] c"%strcat\00", align 1
@.str.105 = private unnamed_addr constant [9 x i8] c"%istrcat\00", align 1
@.str.106 = private unnamed_addr constant [8 x i8] c"%strlen\00", align 1
@.str.107 = private unnamed_addr constant [9 x i8] c"%istrlen\00", align 1
@.str.108 = private unnamed_addr constant [8 x i8] c"%substr\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"%isubstr\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"%xdefine\00", align 1
@.str.111 = private unnamed_addr constant [10 x i8] c"%ixdefine\00", align 1
@.str.112 = private unnamed_addr constant [9 x i8] c"%unmacro\00", align 1
@.str.113 = private unnamed_addr constant [10 x i8] c"%unimacro\00", align 1
@pp_directives = hidden local_unnamed_addr constant [118 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.59, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.113, i32 0, i32 0)], align 16
@pp_directives_len = hidden local_unnamed_addr constant [118 x i8] c"\03\06\06\0B\08\06\05\06\07\08\06\06\08\09\08\0B\04\07\07\0C\09\07\06\07\08\09\07\07\09\0A\09\0C\05\08\08\0D\0A\08\07\08\09\0A\08\08\0A\0B\0A\0D\06\09\09\0E\0B\09\08\09\0A\0B\09\09\0B\0C\0B\0E\08\04\06\07\05\06\05\09\07\06\0A\08\06\08\05\06\05\04\07\05\04\05\07\0A\06\0B\04\08\07\08\09\0A\07\08\07\08\07\08\06\07\0B\0C\07\08\07\08\07\08\07\08\08\09\08\09", align 16
@pp_token_hash.hash1 = internal unnamed_addr constant [128 x i16] [i16 21845, i16 0, i16 0, i16 0, i16 0, i16 0, i16 21845, i16 21845, i16 0, i16 21845, i16 21845, i16 21845, i16 21845, i16 21845, i16 0, i16 21845, i16 21845, i16 -32, i16 0, i16 21845, i16 0, i16 21845, i16 21845, i16 21845, i16 0, i16 6, i16 21845, i16 -17, i16 21845, i16 -39, i16 0, i16 21845, i16 21845, i16 -21, i16 21845, i16 0, i16 -58, i16 21845, i16 21845, i16 0, i16 21845, i16 13, i16 0, i16 21845, i16 21845, i16 21845, i16 9, i16 21845, i16 21845, i16 -26, i16 -28, i16 21845, i16 -84, i16 124, i16 21845, i16 21845, i16 -45, i16 106, i16 -79, i16 4, i16 21845, i16 -5, i16 0, i16 21845, i16 36, i16 17, i16 21845, i16 0, i16 153, i16 83, i16 21845, i16 80, i16 21845, i16 -68, i16 26, i16 28, i16 57, i16 32, i16 97, i16 -52, i16 99, i16 21845, i16 48, i16 0, i16 0, i16 41, i16 86, i16 -107, i16 -38, i16 0, i16 -53, i16 -48, i16 21845, i16 135, i16 21845, i16 48, i16 21845, i16 0, i16 39, i16 21845, i16 -84, i16 21, i16 61, i16 21845, i16 18, i16 14, i16 -64, i16 77, i16 21845, i16 -17, i16 0, i16 92, i16 21845, i16 21845, i16 74, i16 -18, i16 21845, i16 30, i16 54, i16 104, i16 12, i16 21845, i16 21845, i16 21845, i16 21845, i16 91, i16 7, i16 21845], align 16
@pp_token_hash.hash2 = internal unnamed_addr constant [128 x i16] [i16 21845, i16 0, i16 21845, i16 0, i16 21845, i16 21845, i16 0, i16 21845, i16 21845, i16 0, i16 31, i16 21845, i16 21845, i16 21845, i16 21845, i16 21845, i16 21845, i16 -32, i16 120, i16 0, i16 65, i16 21845, i16 0, i16 0, i16 0, i16 78, i16 21845, i16 21845, i16 21845, i16 52, i16 21845, i16 21845, i16 21845, i16 21845, i16 21845, i16 0, i16 97, i16 51, i16 21845, i16 -55, i16 108, i16 126, i16 0, i16 78, i16 21845, i16 113, i16 21845, i16 21845, i16 21845, i16 0, i16 21845, i16 5, i16 21845, i16 78, i16 21845, i16 21845, i16 21845, i16 21845, i16 115, i16 21845, i16 23, i16 106, i16 58, i16 136, i16 21845, i16 21845, i16 3, i16 94, i16 62, i16 8, i16 90, i16 118, i16 21845, i16 105, i16 27, i16 0, i16 21845, i16 21845, i16 19, i16 86, i16 21845, i16 21845, i16 21845, i16 16, i16 0, i16 0, i16 81, i16 21845, i16 10, i16 101, i16 21845, i16 52, i16 -10, i16 139, i16 21845, i16 21845, i16 141, i16 11, i16 21845, i16 21845, i16 21845, i16 111, i16 21845, i16 21845, i16 87, i16 110, i16 113, i16 21845, i16 64, i16 88, i16 0, i16 51, i16 21845, i16 21845, i16 106, i16 -57, i16 103, i16 159, i16 21845, i16 18, i16 45, i16 -53, i16 43, i16 21845, i16 21845, i16 72, i16 81, i16 21845], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @pp_token_hash(i8*) local_unnamed_addr #0 {
  %2 = tail call i64 @crc64i(i64 -5843512476951516015, i8* %0) #3
  %3 = lshr i64 %2, 32
  %4 = and i64 %2, 127
  %5 = getelementptr inbounds [128 x i16], [128 x i16]* @pp_token_hash.hash1, i64 0, i64 %4
  %6 = load i16, i16* %5, align 2
  %7 = and i64 %3, 127
  %8 = getelementptr inbounds [128 x i16], [128 x i16]* @pp_token_hash.hash2, i64 0, i64 %7
  %9 = load i16, i16* %8, align 2
  %10 = add i16 %9, %6
  %11 = zext i16 %10 to i32
  %12 = icmp ugt i16 %10, 117
  br i1 %12, label %22, label %13

13:                                               ; preds = %1
  %14 = zext i16 %10 to i64
  %15 = getelementptr inbounds [118 x i8*], [118 x i8*]* @pp_directives, i64 0, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %13
  %19 = tail call i32 @strcasecmp(i8* nonnull %16, i8* %0) #4
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 %11, i32 -1
  ret i32 %21

22:                                               ; preds = %13, %1
  ret i32 -1
}

declare i64 @crc64i(i64, i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
