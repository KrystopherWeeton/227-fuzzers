; ModuleID = '../../third_party/blink/renderer/platform/graphics/dark_mode_color_filter.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/dark_mode_color_filter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::DarkModeColorFilter" = type { i32 (...)** }
%"struct.blink::DarkModeSettings" = type <{ i32, i8, [3 x i8], float, float, i32, i32, i32, i8, [3 x i8] }>
%class.SkM44 = type { [16 x float] }
%struct.SkHighContrastConfig = type { i8, i32, float }
%class.sk_sp = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.blink::(anonymous namespace)::SkColorFilterWrapper" = type { %"class.blink::DarkModeColorFilter", %class.sk_sp }
%"class.blink::(anonymous namespace)::LABColorFilter" = type { %"class.blink::DarkModeColorFilter", %"class.blink::lab::DarkModeSRGBLABTransformer", %class.sk_sp }
%"class.blink::lab::DarkModeSRGBLABTransformer" = type <{ %"class.blink::lab::DarkModeSRGBColorSpace", %"class.blink::lab::DarkModeLABColorSpace", [3 x i8] }>
%"class.blink::lab::DarkModeSRGBColorSpace" = type { %class.SkM44, %class.SkM44, %class.SkM44, %class.SkM44 }
%"class.blink::lab::DarkModeLABColorSpace" = type { i8 }
%struct.SkV3 = type { float, float, float }

$_ZNK5blink3lab26DarkModeSRGBLABTransformer9LABToSRGBERK4SkV3 = comdat any

$_ZNK5blink3lab22DarkModeSRGBColorSpace5ToXYZERK4SkV3 = comdat any

@_ZTVN5blink19DarkModeColorFilterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::DarkModeColorFilter"*)* @_ZN5blink19DarkModeColorFilterD2Ev to i8*), i8* bitcast (void (%"class.blink::DarkModeColorFilter"*)* @_ZN5blink19DarkModeColorFilterD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::(anonymous namespace)::SkColorFilterWrapper"*)* @_ZN5blink12_GLOBAL__N_120SkColorFilterWrapperD2Ev to i8*), i8* bitcast (void (%"class.blink::(anonymous namespace)::SkColorFilterWrapper"*)* @_ZN5blink12_GLOBAL__N_120SkColorFilterWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.blink::(anonymous namespace)::SkColorFilterWrapper"*, i32)* @_ZNK5blink12_GLOBAL__N_120SkColorFilterWrapper11InvertColorEj to i8*), i8* bitcast (void (%class.sk_sp*, %"class.blink::(anonymous namespace)::SkColorFilterWrapper"*)* @_ZNK5blink12_GLOBAL__N_120SkColorFilterWrapper15ToSkColorFilterEv to i8*)] }, align 8
@_ZTVN5blink12_GLOBAL__N_114LABColorFilterE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::(anonymous namespace)::LABColorFilter"*)* @_ZN5blink12_GLOBAL__N_114LABColorFilterD2Ev to i8*), i8* bitcast (void (%"class.blink::(anonymous namespace)::LABColorFilter"*)* @_ZN5blink12_GLOBAL__N_114LABColorFilterD0Ev to i8*), i8* bitcast (i32 (%"class.blink::(anonymous namespace)::LABColorFilter"*, i32)* @_ZNK5blink12_GLOBAL__N_114LABColorFilter11InvertColorEj to i8*), i8* bitcast (void (%class.sk_sp*, %"class.blink::(anonymous namespace)::LABColorFilter"*)* @_ZNK5blink12_GLOBAL__N_114LABColorFilter15ToSkColorFilterEv to i8*)] }, align 8
@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

@_ZN5blink19DarkModeColorFilterD1Ev = hidden unnamed_addr alias void (%"class.blink::DarkModeColorFilter"*), void (%"class.blink::DarkModeColorFilter"*)* @_ZN5blink19DarkModeColorFilterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DarkModeColorFilter"* @_ZN5blink19DarkModeColorFilter12FromSettingsERKNS_16DarkModeSettingsE(%"struct.blink::DarkModeSettings"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkM44, align 4
  %3 = alloca %class.SkM44, align 4
  %4 = alloca %class.SkM44, align 4
  %5 = alloca %class.SkM44, align 4
  %6 = alloca %struct.SkHighContrastConfig, align 4
  %7 = alloca %class.sk_sp, align 8
  %8 = alloca %struct.SkHighContrastConfig, align 4
  %9 = alloca %class.sk_sp, align 8
  %10 = alloca %struct.SkHighContrastConfig, align 4
  %11 = alloca %class.sk_sp, align 8
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i8], align 16
  %14 = alloca %class.sk_sp, align 8
  %15 = getelementptr inbounds %"struct.blink::DarkModeSettings", %"struct.blink::DarkModeSettings"* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %287 [
    i32 0, label %17
    i32 1, label %119
    i32 2, label %152
    i32 3, label %185
  ]

17:                                               ; preds = %1
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 256, i1 false)
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 256, i1 false)
  %20 = bitcast [256 x i8]* %12 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %20, align 16
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 16
  %22 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %22, align 16
  %23 = bitcast [256 x i8]* %13 to <16 x i8>*
  store <16 x i8> <i8 -1, i8 -2, i8 -3, i8 -4, i8 -5, i8 -6, i8 -7, i8 -8, i8 -9, i8 -10, i8 -11, i8 -12, i8 -13, i8 -14, i8 -15, i8 -16>, <16 x i8>* %23, align 16
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 16
  %25 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> <i8 -17, i8 -18, i8 -19, i8 -20, i8 -21, i8 -22, i8 -23, i8 -24, i8 -25, i8 -26, i8 -27, i8 -28, i8 -29, i8 -30, i8 -31, i8 -32>, <16 x i8>* %25, align 16
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 32
  %27 = bitcast i8* %26 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %27, align 16
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 48
  %29 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %29, align 16
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 32
  %31 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> <i8 -33, i8 -34, i8 -35, i8 -36, i8 -37, i8 -38, i8 -39, i8 -40, i8 -41, i8 -42, i8 -43, i8 -44, i8 -45, i8 -46, i8 -47, i8 -48>, <16 x i8>* %31, align 16
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 48
  %33 = bitcast i8* %32 to <16 x i8>*
  store <16 x i8> <i8 -49, i8 -50, i8 -51, i8 -52, i8 -53, i8 -54, i8 -55, i8 -56, i8 -57, i8 -58, i8 -59, i8 -60, i8 -61, i8 -62, i8 -63, i8 -64>, <16 x i8>* %33, align 16
  %34 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 64
  %35 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %35, align 16
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 80
  %37 = bitcast i8* %36 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %37, align 16
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 64
  %39 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> <i8 -65, i8 -66, i8 -67, i8 -68, i8 -69, i8 -70, i8 -71, i8 -72, i8 -73, i8 -74, i8 -75, i8 -76, i8 -77, i8 -78, i8 -79, i8 -80>, <16 x i8>* %39, align 16
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 80
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> <i8 -81, i8 -82, i8 -83, i8 -84, i8 -85, i8 -86, i8 -87, i8 -88, i8 -89, i8 -90, i8 -91, i8 -92, i8 -93, i8 -94, i8 -95, i8 -96>, <16 x i8>* %41, align 16
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 96
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %43, align 16
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 112
  %45 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %45, align 16
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 96
  %47 = bitcast i8* %46 to <16 x i8>*
  store <16 x i8> <i8 -97, i8 -98, i8 -99, i8 -100, i8 -101, i8 -102, i8 -103, i8 -104, i8 -105, i8 -106, i8 -107, i8 -108, i8 -109, i8 -110, i8 -111, i8 -112>, <16 x i8>* %47, align 16
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 112
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> <i8 -113, i8 -114, i8 -115, i8 -116, i8 -117, i8 -118, i8 -119, i8 -120, i8 -121, i8 -122, i8 -123, i8 -124, i8 -125, i8 -126, i8 -127, i8 -128>, <16 x i8>* %49, align 16
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 128
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %51, align 16
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 144
  %53 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %53, align 16
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 128
  %55 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> <i8 127, i8 126, i8 125, i8 124, i8 123, i8 122, i8 121, i8 120, i8 119, i8 118, i8 117, i8 116, i8 115, i8 114, i8 113, i8 112>, <16 x i8>* %55, align 16
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 144
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> <i8 111, i8 110, i8 109, i8 108, i8 107, i8 106, i8 105, i8 104, i8 103, i8 102, i8 101, i8 100, i8 99, i8 98, i8 97, i8 96>, <16 x i8>* %57, align 16
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 160
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %59, align 16
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 176
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %61, align 16
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 160
  %63 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> <i8 95, i8 94, i8 93, i8 92, i8 91, i8 90, i8 89, i8 88, i8 87, i8 86, i8 85, i8 84, i8 83, i8 82, i8 81, i8 80>, <16 x i8>* %63, align 16
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 176
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> <i8 79, i8 78, i8 77, i8 76, i8 75, i8 74, i8 73, i8 72, i8 71, i8 70, i8 69, i8 68, i8 67, i8 66, i8 65, i8 64>, <16 x i8>* %65, align 16
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 192
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %67, align 16
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 208
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %69, align 16
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 192
  %71 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> <i8 63, i8 62, i8 61, i8 60, i8 59, i8 58, i8 57, i8 56, i8 55, i8 54, i8 53, i8 52, i8 51, i8 50, i8 49, i8 48>, <16 x i8>* %71, align 16
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 208
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> <i8 47, i8 46, i8 45, i8 44, i8 43, i8 42, i8 41, i8 40, i8 39, i8 38, i8 37, i8 36, i8 35, i8 34, i8 33, i8 32>, <16 x i8>* %73, align 16
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 224
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %75, align 16
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 240
  %77 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %77, align 16
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 224
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> <i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 25, i8 24, i8 23, i8 22, i8 21, i8 20, i8 19, i8 18, i8 17, i8 16>, <16 x i8>* %79, align 16
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 240
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> <i8 15, i8 14, i8 13, i8 12, i8 11, i8 10, i8 9, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 1, i8 0>, <16 x i8>* %81, align 16
  call void @_ZN18SkTableColorFilter8MakeARGBEPKhS1_S1_S1_(%class.sk_sp* nonnull sret %14, i8* nonnull %18, i8* nonnull %19, i8* nonnull %19, i8* nonnull %19) #12
  %82 = call i8* @_Znwm(i64 16) #13
  %83 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %14, i64 0, i32 0
  %84 = load %class.SkColorFilter*, %class.SkColorFilter** %83, align 8
  %85 = icmp eq %class.SkColorFilter* %84, null
  br i1 %85, label %86, label %90

86:                                               ; preds = %17
  %87 = bitcast i8* %82 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %87, align 8
  %88 = getelementptr inbounds i8, i8* %82, i64 8
  %89 = bitcast i8* %88 to %class.SkColorFilter**
  store %class.SkColorFilter* null, %class.SkColorFilter** %89, align 8
  br label %105

90:                                               ; preds = %17
  %91 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %84, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 1 monotonic
  %93 = bitcast i8* %82 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %93, align 8
  %94 = getelementptr inbounds i8, i8* %82, i64 8
  %95 = bitcast i8* %94 to %class.SkColorFilter**
  %96 = atomicrmw add i32* %91, i32 1 monotonic
  store %class.SkColorFilter* %84, %class.SkColorFilter** %95, align 8
  %97 = atomicrmw add i32* %91, i32 -1 acq_rel
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %99, label %105

99:                                               ; preds = %90
  %100 = bitcast %class.SkColorFilter* %84 to %class.SkRefCntBase*
  %101 = bitcast %class.SkColorFilter* %84 to void (%class.SkRefCntBase*)***
  %102 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %101, align 8
  %103 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %102, i64 2
  %104 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %103, align 8
  call void %104(%class.SkRefCntBase* nonnull %100) #12
  br label %105

105:                                              ; preds = %99, %90, %86
  %106 = ptrtoint i8* %82 to i64
  %107 = load %class.SkColorFilter*, %class.SkColorFilter** %83, align 8
  %108 = icmp eq %class.SkColorFilter* %107, null
  br i1 %108, label %288, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %107, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = atomicrmw add i32* %110, i32 -1 acq_rel
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %288

113:                                              ; preds = %109
  %114 = bitcast %class.SkColorFilter* %107 to %class.SkRefCntBase*
  %115 = bitcast %class.SkColorFilter* %107 to void (%class.SkRefCntBase*)***
  %116 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %115, align 8
  %117 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %116, i64 2
  %118 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, align 8
  call void %118(%class.SkRefCntBase* nonnull %114) #12
  br label %288

119:                                              ; preds = %1
  %120 = bitcast %class.sk_sp* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120)
  %121 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %121) #12
  %122 = bitcast %struct.SkHighContrastConfig* %10 to i32*
  store i32 -1431655766, i32* %122, align 4
  %123 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %10, i64 0, i32 1
  %124 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %10, i64 0, i32 2
  store i32 1, i32* %123, align 4
  %125 = getelementptr inbounds %"struct.blink::DarkModeSettings", %"struct.blink::DarkModeSettings"* %0, i64 0, i32 1
  %126 = load i8, i8* %125, align 4, !range !2
  store i8 %126, i8* %121, align 4
  %127 = getelementptr inbounds %"struct.blink::DarkModeSettings", %"struct.blink::DarkModeSettings"* %0, i64 0, i32 4
  %128 = bitcast float* %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = bitcast float* %124 to i32*
  store i32 %129, i32* %130, align 4
  %131 = tail call i8* @_Znwm(i64 16) #13
  call void @_ZN20SkHighContrastFilter4MakeERK20SkHighContrastConfig(%class.sk_sp* nonnull sret %11, %struct.SkHighContrastConfig* nonnull dereferenceable(12) %10) #12
  %132 = bitcast i8* %131 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %132, align 8
  %133 = getelementptr inbounds i8, i8* %131, i64 8
  %134 = bitcast i8* %133 to %class.SkColorFilter**
  %135 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %136 = load %class.SkColorFilter*, %class.SkColorFilter** %135, align 8
  %137 = icmp eq %class.SkColorFilter* %136, null
  br i1 %137, label %138, label %139

138:                                              ; preds = %119
  store %class.SkColorFilter* null, %class.SkColorFilter** %134, align 8
  br label %150

139:                                              ; preds = %119
  %140 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %136, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = atomicrmw add i32* %140, i32 1 monotonic
  store %class.SkColorFilter* %136, %class.SkColorFilter** %134, align 8
  %142 = atomicrmw add i32* %140, i32 -1 acq_rel
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %144, label %150

144:                                              ; preds = %139
  %145 = bitcast %class.SkColorFilter* %136 to %class.SkRefCntBase*
  %146 = bitcast %class.SkColorFilter* %136 to void (%class.SkRefCntBase*)***
  %147 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %146, align 8
  %148 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %147, i64 2
  %149 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %148, align 8
  call void %149(%class.SkRefCntBase* nonnull %145) #12
  br label %150

150:                                              ; preds = %144, %139, %138
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %121) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120)
  %151 = ptrtoint i8* %131 to i64
  br label %288

152:                                              ; preds = %1
  %153 = bitcast %class.sk_sp* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %153)
  %154 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %154) #12
  %155 = bitcast %struct.SkHighContrastConfig* %8 to i32*
  store i32 -1431655766, i32* %155, align 4
  %156 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %8, i64 0, i32 1
  %157 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %8, i64 0, i32 2
  store i32 2, i32* %156, align 4
  %158 = getelementptr inbounds %"struct.blink::DarkModeSettings", %"struct.blink::DarkModeSettings"* %0, i64 0, i32 1
  %159 = load i8, i8* %158, align 4, !range !2
  store i8 %159, i8* %154, align 4
  %160 = getelementptr inbounds %"struct.blink::DarkModeSettings", %"struct.blink::DarkModeSettings"* %0, i64 0, i32 4
  %161 = bitcast float* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = bitcast float* %157 to i32*
  store i32 %162, i32* %163, align 4
  %164 = tail call i8* @_Znwm(i64 16) #13
  call void @_ZN20SkHighContrastFilter4MakeERK20SkHighContrastConfig(%class.sk_sp* nonnull sret %9, %struct.SkHighContrastConfig* nonnull dereferenceable(12) %8) #12
  %165 = bitcast i8* %164 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %165, align 8
  %166 = getelementptr inbounds i8, i8* %164, i64 8
  %167 = bitcast i8* %166 to %class.SkColorFilter**
  %168 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %9, i64 0, i32 0
  %169 = load %class.SkColorFilter*, %class.SkColorFilter** %168, align 8
  %170 = icmp eq %class.SkColorFilter* %169, null
  br i1 %170, label %171, label %172

171:                                              ; preds = %152
  store %class.SkColorFilter* null, %class.SkColorFilter** %167, align 8
  br label %183

172:                                              ; preds = %152
  %173 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %169, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = atomicrmw add i32* %173, i32 1 monotonic
  store %class.SkColorFilter* %169, %class.SkColorFilter** %167, align 8
  %175 = atomicrmw add i32* %173, i32 -1 acq_rel
  %176 = icmp eq i32 %175, 1
  br i1 %176, label %177, label %183

177:                                              ; preds = %172
  %178 = bitcast %class.SkColorFilter* %169 to %class.SkRefCntBase*
  %179 = bitcast %class.SkColorFilter* %169 to void (%class.SkRefCntBase*)***
  %180 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %179, align 8
  %181 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %180, i64 2
  %182 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %181, align 8
  call void %182(%class.SkRefCntBase* nonnull %178) #12
  br label %183

183:                                              ; preds = %177, %172, %171
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %154) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %153)
  %184 = ptrtoint i8* %164 to i64
  br label %288

185:                                              ; preds = %1
  %186 = tail call i8* @_Znwm(i64 280) #13
  %187 = bitcast i8* %186 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_114LABColorFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %187, align 8
  %188 = getelementptr inbounds i8, i8* %186, i64 8
  %189 = getelementptr inbounds i8, i8* %186, i64 136
  %190 = bitcast i8* %189 to %class.SkM44*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %189, i8 0, i64 132, i1 false) #12
  %191 = bitcast i8* %188 to %class.SkM44*
  %192 = bitcast i8* %188 to <4 x float>*
  store <4 x float> <float 0x3FECA4A8C0000000, float 0xBFE801A360000000, float 0x3FA3EAB360000000, float 0.000000e+00>, <4 x float>* %192, align 4
  %193 = getelementptr inbounds i8, i8* %186, i64 24
  %194 = bitcast i8* %193 to <4 x float>*
  store <4 x float> <float 0x3FD10CB2A0000000, float 0x3FFB6A7F00000000, float 0x3FB1893740000000, float 0.000000e+00>, <4 x float>* %194, align 4
  %195 = getelementptr inbounds i8, i8* %186, i64 40
  %196 = bitcast i8* %195 to float*
  store float 0xBFC4A8C160000000, float* %196, align 4
  %197 = getelementptr inbounds i8, i8* %186, i64 44
  %198 = bitcast i8* %197 to float*
  store float 0x3FA2CA57A0000000, float* %198, align 4
  %199 = getelementptr inbounds i8, i8* %186, i64 48
  %200 = bitcast i8* %199 to float*
  store float 0x3FF0793DE0000000, float* %200, align 4
  %201 = getelementptr inbounds i8, i8* %186, i64 52
  %202 = getelementptr inbounds i8, i8* %186, i64 68
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %201, i8 0, i64 16, i1 false) #12
  %203 = getelementptr inbounds i8, i8* %186, i64 72
  %204 = bitcast i8* %203 to %class.SkM44*
  %205 = bitcast i8* %202 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0x3FDA648A00000000, float 0x3FCB37AE80000000, float 0x3F93CB67A0000000>, <4 x float>* %205, align 4
  %206 = getelementptr inbounds i8, i8* %186, i64 84
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0x3FD6E2C780000000, float 0x3FE6E2C780000000, float 0x3FBE83B3E0000000>, <4 x float>* %207, align 4
  %208 = getelementptr inbounds i8, i8* %186, i64 100
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0x3FC7190100000000, float 0x3FB27A6720000000, float 0x3FEE697480000000>, <4 x float>* %209, align 4
  %210 = getelementptr inbounds i8, i8* %186, i64 116
  %211 = getelementptr inbounds i8, i8* %186, i64 132
  %212 = bitcast i8* %211 to float*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %210, i8 0, i64 16, i1 false) #12
  store float 1.000000e+00, float* %212, align 4
  %213 = bitcast %class.SkM44* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %213) #12
  %214 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %191, float 0x3FEE69E920000000, float 1.000000e+00, float 0x3FF16C22E0000000, float 0.000000e+00) #12, !noalias !3
  %215 = extractvalue { <2 x float>, <2 x float> } %214, 0
  %216 = extractvalue { <2 x float>, <2 x float> } %214, 1
  %217 = extractelement <2 x float> %216, i32 0
  %218 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %191, float 0x3FEEDAD320000000, float 1.000000e+00, float 0x3FEA67F0A0000000, float 0.000000e+00) #12, !noalias !3
  %219 = extractvalue { <2 x float>, <2 x float> } %218, 0
  %220 = extractvalue { <2 x float>, <2 x float> } %218, 1
  %221 = extractelement <2 x float> %220, i32 0
  %222 = extractelement <2 x float> %219, i32 0
  %223 = extractelement <2 x float> %215, i32 0
  %224 = fdiv float %222, %223
  %225 = extractelement <2 x float> %219, i32 1
  %226 = extractelement <2 x float> %215, i32 1
  %227 = fdiv float %225, %226
  %228 = fdiv float %221, %217
  %229 = bitcast %class.SkM44* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %229) #12, !noalias !3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %229, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #12, !noalias !3
  %230 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* %191, %class.SkM44* nonnull %2) #12, !noalias !3
  %231 = bitcast %class.SkM44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %231) #12, !noalias !3
  %232 = bitcast %class.SkM44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %232) #12, !noalias !3
  %233 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 0
  store float %224, float* %233, align 4, !alias.scope !6, !noalias !3
  %234 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 1
  %235 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 5
  %236 = bitcast float* %234 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %236, i8 0, i64 16, i1 false) #12, !alias.scope !6, !noalias !3
  store float %227, float* %235, align 4, !alias.scope !6, !noalias !3
  %237 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 6
  %238 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 10
  %239 = bitcast float* %237 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %239, i8 0, i64 16, i1 false) #12, !alias.scope !6, !noalias !3
  store float %228, float* %238, align 4, !alias.scope !6, !noalias !3
  %240 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 11
  %241 = getelementptr inbounds %class.SkM44, %class.SkM44* %4, i64 0, i32 0, i64 15
  %242 = bitcast float* %240 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %242, i8 0, i64 16, i1 false) #12, !alias.scope !6, !noalias !3
  store float 1.000000e+00, float* %241, align 4, !alias.scope !6, !noalias !3
  %243 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* nonnull %3, %class.SkM44* nonnull dereferenceable(64) %4, %class.SkM44* dereferenceable(64) %191) #12, !noalias !3
  %244 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* nonnull %5, %class.SkM44* nonnull dereferenceable(64) %2, %class.SkM44* nonnull dereferenceable(64) %3) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %232) #12, !noalias !3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %231) #12, !noalias !3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %229) #12, !noalias !3
  %245 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* %190, %class.SkM44* nonnull dereferenceable(64) %5, %class.SkM44* dereferenceable(64) %204) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %213) #12
  %246 = getelementptr inbounds i8, i8* %186, i64 200
  %247 = bitcast i8* %246 to %class.SkM44*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %246, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #12
  %248 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* %190, %class.SkM44* %247) #12
  %249 = getelementptr inbounds i8, i8* %186, i64 272
  %250 = bitcast i8* %249 to %class.SkColorFilter**
  store %class.SkColorFilter* null, %class.SkColorFilter** %250, align 8
  %251 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %251) #12
  %252 = bitcast %struct.SkHighContrastConfig* %6 to i32*
  store i32 -1431655936, i32* %252, align 4
  %253 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %6, i64 0, i32 1
  %254 = getelementptr inbounds %struct.SkHighContrastConfig, %struct.SkHighContrastConfig* %6, i64 0, i32 2
  store i32 2, i32* %253, align 4
  store float 0.000000e+00, float* %254, align 4
  %255 = bitcast %class.sk_sp* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %255) #12
  call void @_ZN20SkHighContrastFilter4MakeERK20SkHighContrastConfig(%class.sk_sp* nonnull sret %7, %struct.SkHighContrastConfig* nonnull dereferenceable(12) %6) #12
  %256 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %7, i64 0, i32 0
  %257 = bitcast %class.sk_sp* %7 to i64*
  %258 = load i64, i64* %257, align 8
  store %class.SkColorFilter* null, %class.SkColorFilter** %256, align 8
  %259 = load %class.SkColorFilter*, %class.SkColorFilter** %250, align 8
  %260 = bitcast i8* %249 to i64*
  store i64 %258, i64* %260, align 8
  %261 = icmp eq %class.SkColorFilter* %259, null
  br i1 %261, label %285, label %262

262:                                              ; preds = %185
  %263 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %259, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %264 = atomicrmw add i32* %263, i32 -1 acq_rel
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %266, label %272

266:                                              ; preds = %262
  %267 = bitcast %class.SkColorFilter* %259 to %class.SkRefCntBase*
  %268 = bitcast %class.SkColorFilter* %259 to void (%class.SkRefCntBase*)***
  %269 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %268, align 8
  %270 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %269, i64 2
  %271 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %270, align 8
  call void %271(%class.SkRefCntBase* nonnull %267) #12
  br label %272

272:                                              ; preds = %266, %262
  %273 = load %class.SkColorFilter*, %class.SkColorFilter** %256, align 8
  %274 = icmp eq %class.SkColorFilter* %273, null
  br i1 %274, label %285, label %275

275:                                              ; preds = %272
  %276 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %273, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %277 = atomicrmw add i32* %276, i32 -1 acq_rel
  %278 = icmp eq i32 %277, 1
  br i1 %278, label %279, label %285

279:                                              ; preds = %275
  %280 = bitcast %class.SkColorFilter* %273 to %class.SkRefCntBase*
  %281 = bitcast %class.SkColorFilter* %273 to void (%class.SkRefCntBase*)***
  %282 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %281, align 8
  %283 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %282, i64 2
  %284 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %283, align 8
  call void %284(%class.SkRefCntBase* nonnull %280) #12
  br label %285

285:                                              ; preds = %279, %275, %272, %185
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %255) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %251) #12
  %286 = ptrtoint i8* %186 to i64
  br label %288

287:                                              ; preds = %1
  unreachable

288:                                              ; preds = %113, %109, %105, %285, %183, %150
  %289 = phi i64 [ %286, %285 ], [ %184, %183 ], [ %151, %150 ], [ %106, %105 ], [ %106, %109 ], [ %106, %113 ]
  %290 = inttoptr i64 %289 to %"class.blink::DarkModeColorFilter"*
  ret %"class.blink::DarkModeColorFilter"* %290
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN18SkTableColorFilter8MakeARGBEPKhS1_S1_S1_(%class.sk_sp* sret, i8*, i8*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink19DarkModeColorFilterD2Ev(%"class.blink::DarkModeColorFilter"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink19DarkModeColorFilterD0Ev(%"class.blink::DarkModeColorFilter"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_120SkColorFilterWrapperD2Ev(%"class.blink::(anonymous namespace)::SkColorFilterWrapper"* nocapture) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0, i64 0, i32 1, i32 0
  %4 = load %class.SkColorFilter*, %class.SkColorFilter** %3, align 8
  %5 = icmp eq %class.SkColorFilter* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilter* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilter* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #12
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_120SkColorFilterWrapperD0Ev(%"class.blink::(anonymous namespace)::SkColorFilterWrapper"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_120SkColorFilterWrapperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0, i64 0, i32 1, i32 0
  %4 = load %class.SkColorFilter*, %class.SkColorFilter** %3, align 8
  %5 = icmp eq %class.SkColorFilter* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilter* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilter* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #12
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK5blink12_GLOBAL__N_120SkColorFilterWrapper11InvertColorEj(%"class.blink::(anonymous namespace)::SkColorFilterWrapper"* nocapture readonly, i32) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %0, i64 0, i32 1, i32 0
  %4 = load %class.SkColorFilter*, %class.SkColorFilter** %3, align 8
  %5 = tail call i32 @_ZNK13SkColorFilter11filterColorEj(%class.SkColorFilter* %4, i32 %1) #12
  ret i32 %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK5blink12_GLOBAL__N_120SkColorFilterWrapper15ToSkColorFilterEv(%class.sk_sp* noalias nocapture sret, %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* nocapture readonly) unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::(anonymous namespace)::SkColorFilterWrapper", %"class.blink::(anonymous namespace)::SkColorFilterWrapper"* %1, i64 0, i32 1, i32 0
  %5 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8
  %6 = icmp eq %class.SkColorFilter* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  store %class.SkColorFilter* %5, %class.SkColorFilter** %3, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare i32 @_ZNK13SkColorFilter11filterColorEj(%class.SkColorFilter*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN20SkHighContrastFilter4MakeERK20SkHighContrastConfig(%class.sk_sp* sret, %struct.SkHighContrastConfig* dereferenceable(12)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_114LABColorFilterD2Ev(%"class.blink::(anonymous namespace)::LABColorFilter"* nocapture) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_114LABColorFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %0, i64 0, i32 2, i32 0
  %4 = load %class.SkColorFilter*, %class.SkColorFilter** %3, align 8
  %5 = icmp eq %class.SkColorFilter* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilter* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilter* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #12
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_114LABColorFilterD0Ev(%"class.blink::(anonymous namespace)::LABColorFilter"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink12_GLOBAL__N_114LABColorFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %0, i64 0, i32 2, i32 0
  %4 = load %class.SkColorFilter*, %class.SkColorFilter** %3, align 8
  %5 = icmp eq %class.SkColorFilter* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilter* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilter* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #12
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %"class.blink::(anonymous namespace)::LABColorFilter"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK5blink12_GLOBAL__N_114LABColorFilter11InvertColorEj(%"class.blink::(anonymous namespace)::LABColorFilter"*, i32) unnamed_addr #8 align 2 {
  %3 = alloca %struct.SkV3, align 8
  %4 = alloca %struct.SkV3, align 8
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = bitcast %struct.SkV3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #12
  %8 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %3, i64 0, i32 0
  %9 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %3, i64 0, i32 1
  %10 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %3, i64 0, i32 2
  %11 = lshr i32 %1, 16
  %12 = and i32 %11, 255
  %13 = uitofp i32 %12 to float
  %14 = fdiv float %13, 2.550000e+02
  store float %14, float* %8, align 8
  %15 = lshr i32 %1, 8
  %16 = and i32 %15, 255
  %17 = uitofp i32 %16 to float
  %18 = fdiv float %17, 2.550000e+02
  store float %18, float* %9, align 4
  %19 = and i32 %1, 255
  %20 = uitofp i32 %19 to float
  %21 = fdiv float %20, 2.550000e+02
  store float %21, float* %10, align 8
  %22 = bitcast %struct.SkV3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %22) #12
  %23 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %4, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %23, align 8
  %24 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %4, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %24, align 4
  %25 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %4, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %25, align 8
  %26 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %"class.blink::lab::DarkModeSRGBLABTransformer", %"class.blink::lab::DarkModeSRGBLABTransformer"* %26, i64 0, i32 0
  %28 = call { <2 x float>, float } @_ZNK5blink3lab22DarkModeSRGBColorSpace5ToXYZERK4SkV3(%"class.blink::lab::DarkModeSRGBColorSpace"* %27, %struct.SkV3* nonnull dereferenceable(12) %3) #12
  %29 = extractvalue { <2 x float>, float } %28, 0
  %30 = extractvalue { <2 x float>, float } %28, 1
  %31 = extractelement <2 x float> %29, i32 0
  %32 = fdiv float %31, 0x3FEEDAD320000000
  %33 = fcmp ogt float %32, 0x3F822354E0000000
  br i1 %33, label %34, label %36

34:                                               ; preds = %2
  %35 = call float @powf(float %32, float 0x3FD5555560000000) #12
  br label %39

36:                                               ; preds = %2
  %37 = fdiv float %32, 0x3FC07004E0000000
  %38 = fadd float %37, 0x3FC1A7B960000000
  br label %39

39:                                               ; preds = %36, %34
  %40 = phi float [ %35, %34 ], [ %38, %36 ]
  %41 = extractelement <2 x float> %29, i32 1
  %42 = fcmp ogt float %41, 0x3F822354E0000000
  br i1 %42, label %43, label %45

43:                                               ; preds = %39
  %44 = call float @powf(float %41, float 0x3FD5555560000000) #12
  br label %48

45:                                               ; preds = %39
  %46 = fdiv float %41, 0x3FC07004E0000000
  %47 = fadd float %46, 0x3FC1A7B960000000
  br label %48

48:                                               ; preds = %45, %43
  %49 = phi float [ %44, %43 ], [ %47, %45 ]
  %50 = fdiv float %30, 0x3FEA67F0A0000000
  %51 = fcmp ogt float %50, 0x3F822354E0000000
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = call float @powf(float %50, float 0x3FD5555560000000) #12
  br label %57

54:                                               ; preds = %48
  %55 = fdiv float %50, 0x3FC07004E0000000
  %56 = fadd float %55, 0x3FC1A7B960000000
  br label %57

57:                                               ; preds = %52, %54
  %58 = phi float [ %53, %52 ], [ %56, %54 ]
  %59 = fmul float %49, 1.160000e+02
  %60 = fadd float %59, -1.600000e+01
  %61 = fsub float %40, %49
  %62 = fmul float %61, 5.000000e+02
  %63 = fsub float %49, %58
  %64 = fmul float %63, 2.000000e+02
  %65 = fcmp olt float %60, 0.000000e+00
  %66 = fcmp ogt float %60, 1.000000e+02
  %67 = select i1 %66, float 1.000000e+02, float %60
  %68 = select i1 %65, float 0.000000e+00, float %67
  %69 = insertelement <2 x float> undef, float %68, i32 0
  %70 = fcmp olt float %62, -1.280000e+02
  %71 = fcmp ogt float %62, 1.280000e+02
  %72 = select i1 %71, float 1.280000e+02, float %62
  %73 = select i1 %70, float -1.280000e+02, float %72
  %74 = insertelement <2 x float> %69, float %73, i32 1
  %75 = fcmp olt float %64, -1.280000e+02
  %76 = fcmp ogt float %64, 1.280000e+02
  %77 = select i1 %76, float 1.280000e+02, float %64
  %78 = select i1 %75, float -1.280000e+02, float %77
  %79 = bitcast %struct.SkV3* %4 to <2 x float>*
  store <2 x float> %74, <2 x float>* %79, align 8
  store float %78, float* %25, align 8
  %80 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80)
  %81 = fsub float 1.100000e+02, %68
  store float %81, float* %5, align 4
  %82 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %82)
  store float 1.000000e+02, float* %6, align 4
  %83 = fcmp ogt float %81, 1.000000e+02
  %84 = select i1 %83, float* %6, float* %5
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = bitcast %struct.SkV3* %4 to i32*
  store i32 %86, i32* %87, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80)
  %88 = call { <2 x float>, float } @_ZNK5blink3lab26DarkModeSRGBLABTransformer9LABToSRGBERK4SkV3(%"class.blink::lab::DarkModeSRGBLABTransformer"* %26, %struct.SkV3* nonnull dereferenceable(12) %4)
  %89 = extractvalue { <2 x float>, float } %88, 0
  %90 = extractvalue { <2 x float>, float } %88, 1
  %91 = bitcast %struct.SkV3* %3 to <2 x float>*
  store <2 x float> %89, <2 x float>* %91, align 8
  store float %90, float* %10, align 8
  %92 = and i32 %1, -16777216
  %93 = extractelement <2 x float> %89, i32 0
  %94 = fmul float %93, 2.550000e+02
  %95 = fpext float %94 to double
  %96 = fadd double %95, 5.000000e-01
  %97 = fptoui double %96 to i32
  %98 = extractelement <2 x float> %89, i32 1
  %99 = fmul float %98, 2.550000e+02
  %100 = fpext float %99 to double
  %101 = fadd double %100, 5.000000e-01
  %102 = fptoui double %101 to i32
  %103 = fmul float %90, 2.550000e+02
  %104 = fpext float %103 to double
  %105 = fadd double %104, 5.000000e-01
  %106 = fptoui double %105 to i32
  %107 = shl i32 %97, 16
  %108 = shl i32 %102, 8
  %109 = or i32 %92, %106
  %110 = or i32 %109, %107
  %111 = or i32 %110, %108
  %112 = lshr i32 %111, 16
  %113 = and i32 %112, 255
  %114 = and i32 %106, 255
  %115 = icmp eq i32 %113, %114
  br i1 %115, label %116, label %124

116:                                              ; preds = %57
  %117 = lshr i32 %111, 8
  %118 = and i32 %117, 255
  %119 = icmp eq i32 %113, %118
  %120 = add nsw i32 %113, -19
  %121 = icmp ult i32 %120, 13
  %122 = and i1 %119, %121
  %123 = select i1 %122, i32 -15592942, i32 %111
  br label %124

124:                                              ; preds = %57, %116
  %125 = phi i32 [ %123, %116 ], [ %111, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #12
  ret i32 %125
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK5blink12_GLOBAL__N_114LABColorFilter15ToSkColorFilterEv(%class.sk_sp* noalias nocapture sret, %"class.blink::(anonymous namespace)::LABColorFilter"* nocapture readonly) unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::(anonymous namespace)::LABColorFilter", %"class.blink::(anonymous namespace)::LABColorFilter"* %1, i64 0, i32 2, i32 0
  %5 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8
  %6 = icmp eq %class.SkColorFilter* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  store %class.SkColorFilter* %5, %class.SkColorFilter** %3, align 8
  ret void
}

declare zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44*, %class.SkM44*) local_unnamed_addr #2

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44*, %class.SkM44* dereferenceable(64), %class.SkM44* dereferenceable(64)) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44*, float, float, float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { <2 x float>, float } @_ZNK5blink3lab26DarkModeSRGBLABTransformer9LABToSRGBERK4SkV3(%"class.blink::lab::DarkModeSRGBLABTransformer"*, %struct.SkV3* dereferenceable(12)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp olt float %4, 0.000000e+00
  %6 = fcmp ogt float %4, 1.000000e+02
  %7 = select i1 %6, float 1.000000e+02, float %4
  %8 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fcmp olt float %9, -1.280000e+02
  %11 = fcmp ogt float %9, 1.280000e+02
  %12 = select i1 %11, float 1.280000e+02, float %9
  %13 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fcmp olt float %14, -1.280000e+02
  %16 = fcmp ogt float %14, 1.280000e+02
  %17 = select i1 %16, float 1.280000e+02, float %14
  %18 = fadd float %7, 1.600000e+01
  %19 = fdiv float %18, 1.160000e+02
  %20 = select i1 %5, float 0x3FC1A7B960000000, float %19
  %21 = fmul float %12, 0x3F60624DE0000000
  %22 = select i1 %10, float 0xBFD0624DE0000000, float %21
  %23 = fadd float %20, %22
  %24 = fcmp ogt float %23, 0x3FCA7B9620000000
  br i1 %24, label %25, label %28

25:                                               ; preds = %2
  %26 = fpext float %23 to double
  %27 = tail call double @pow(double %26, double 3.000000e+00) #12
  br label %32

28:                                               ; preds = %2
  %29 = fadd float %23, 0xBFC1A7B960000000
  %30 = fmul float %29, 0x3FC07004E0000000
  %31 = fpext float %30 to double
  br label %32

32:                                               ; preds = %28, %25
  %33 = phi double [ %27, %25 ], [ %31, %28 ]
  %34 = fmul double %33, 0x3FEEDAD320000000
  %35 = fptrunc double %34 to float
  %36 = fcmp ogt float %20, 0x3FCA7B9620000000
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = fpext float %20 to double
  %39 = tail call double @pow(double %38, double 3.000000e+00) #12
  br label %44

40:                                               ; preds = %32
  %41 = fadd float %20, 0xBFC1A7B960000000
  %42 = fmul float %41, 0x3FC07004E0000000
  %43 = fpext float %42 to double
  br label %44

44:                                               ; preds = %40, %37
  %45 = phi double [ %39, %37 ], [ %43, %40 ]
  %46 = fptrunc double %45 to float
  %47 = fmul float %17, 0x3F747AE140000000
  %48 = select i1 %15, float 0xBFE47AE140000000, float %47
  %49 = fsub float %20, %48
  %50 = fcmp ogt float %49, 0x3FCA7B9620000000
  br i1 %50, label %51, label %54

51:                                               ; preds = %44
  %52 = fpext float %49 to double
  %53 = tail call double @pow(double %52, double 3.000000e+00) #12
  br label %58

54:                                               ; preds = %44
  %55 = fadd float %49, 0xBFC1A7B960000000
  %56 = fmul float %55, 0x3FC07004E0000000
  %57 = fpext float %56 to double
  br label %58

58:                                               ; preds = %51, %54
  %59 = phi double [ %53, %51 ], [ %57, %54 ]
  %60 = fmul double %59, 0x3FEA67F0A0000000
  %61 = fptrunc double %60 to float
  %62 = getelementptr inbounds %"class.blink::lab::DarkModeSRGBLABTransformer", %"class.blink::lab::DarkModeSRGBLABTransformer"* %0, i64 0, i32 0, i32 3
  %63 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %62, float %35, float %46, float %61, float 0.000000e+00) #12
  %64 = extractvalue { <2 x float>, <2 x float> } %63, 0
  %65 = extractvalue { <2 x float>, <2 x float> } %63, 1
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %64, i32 0
  %68 = fcmp olt float %67, 0x3F69A5C380000000
  %69 = fpext float %67 to double
  br i1 %68, label %70, label %72

70:                                               ; preds = %58
  %71 = fmul double %69, 1.292000e+01
  br label %76

72:                                               ; preds = %58
  %73 = tail call double @pow(double %69, double 0x3FDAAAAAAAAAAAAB) #12
  %74 = fmul double %73, 1.055000e+00
  %75 = fadd double %74, -5.500000e-02
  br label %76

76:                                               ; preds = %72, %70
  %77 = phi double [ %75, %72 ], [ %71, %70 ]
  %78 = fcmp olt double %77, 0.000000e+00
  %79 = fcmp ogt double %77, 1.000000e+00
  %80 = select i1 %79, double 1.000000e+00, double %77
  %81 = select i1 %78, double 0.000000e+00, double %80
  %82 = fptrunc double %81 to float
  %83 = insertelement <2 x float> undef, float %82, i32 0
  %84 = extractelement <2 x float> %64, i32 1
  %85 = fcmp olt float %84, 0x3F69A5C380000000
  %86 = fpext float %84 to double
  br i1 %85, label %87, label %89

87:                                               ; preds = %76
  %88 = fmul double %86, 1.292000e+01
  br label %93

89:                                               ; preds = %76
  %90 = tail call double @pow(double %86, double 0x3FDAAAAAAAAAAAAB) #12
  %91 = fmul double %90, 1.055000e+00
  %92 = fadd double %91, -5.500000e-02
  br label %93

93:                                               ; preds = %89, %87
  %94 = phi double [ %92, %89 ], [ %88, %87 ]
  %95 = fcmp olt double %94, 0.000000e+00
  %96 = fcmp ogt double %94, 1.000000e+00
  %97 = select i1 %96, double 1.000000e+00, double %94
  %98 = select i1 %95, double 0.000000e+00, double %97
  %99 = fptrunc double %98 to float
  %100 = insertelement <2 x float> %83, float %99, i32 1
  %101 = fcmp olt float %66, 0x3F69A5C380000000
  %102 = fpext float %66 to double
  br i1 %101, label %103, label %105

103:                                              ; preds = %93
  %104 = fmul double %102, 1.292000e+01
  br label %109

105:                                              ; preds = %93
  %106 = tail call double @pow(double %102, double 0x3FDAAAAAAAAAAAAB) #12
  %107 = fmul double %106, 1.055000e+00
  %108 = fadd double %107, -5.500000e-02
  br label %109

109:                                              ; preds = %103, %105
  %110 = phi double [ %104, %103 ], [ %108, %105 ]
  %111 = fcmp olt double %110, 0.000000e+00
  %112 = fcmp ogt double %110, 1.000000e+00
  %113 = select i1 %112, double 1.000000e+00, double %110
  %114 = select i1 %111, double 0.000000e+00, double %113
  %115 = fptrunc double %114 to float
  %116 = insertvalue { <2 x float>, float } undef, <2 x float> %100, 0
  %117 = insertvalue { <2 x float>, float } %116, float %115, 1
  ret { <2 x float>, float } %117
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { <2 x float>, float } @_ZNK5blink3lab22DarkModeSRGBColorSpace5ToXYZERK4SkV3(%"class.blink::lab::DarkModeSRGBColorSpace"*, %struct.SkV3* dereferenceable(12)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::lab::DarkModeSRGBColorSpace", %"class.blink::lab::DarkModeSRGBColorSpace"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fcmp olt float %5, 0x3FA4B5DCC0000000
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = fdiv float %5, 0x4029D70A40000000
  br label %13

9:                                                ; preds = %2
  %10 = fadd float %5, 0x3FAC28F5C0000000
  %11 = fdiv float %10, 0x3FF0E147A0000000
  %12 = tail call float @powf(float %11, float 0x4003333340000000) #12
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi float [ %12, %9 ], [ %8, %7 ]
  %15 = fcmp olt float %14, 0.000000e+00
  %16 = fcmp ogt float %14, 1.000000e+00
  %17 = select i1 %16, float 1.000000e+00, float %14
  %18 = select i1 %15, float 0.000000e+00, float %17
  %19 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = fcmp olt float %20, 0x3FA4B5DCC0000000
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = fdiv float %20, 0x4029D70A40000000
  br label %28

24:                                               ; preds = %13
  %25 = fadd float %20, 0x3FAC28F5C0000000
  %26 = fdiv float %25, 0x3FF0E147A0000000
  %27 = tail call float @powf(float %26, float 0x4003333340000000) #12
  br label %28

28:                                               ; preds = %24, %22
  %29 = phi float [ %27, %24 ], [ %23, %22 ]
  %30 = fcmp olt float %29, 0.000000e+00
  %31 = fcmp ogt float %29, 1.000000e+00
  %32 = select i1 %31, float 1.000000e+00, float %29
  %33 = select i1 %30, float 0.000000e+00, float %32
  %34 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 2
  %35 = load float, float* %34, align 4
  %36 = fcmp olt float %35, 0x3FA4B5DCC0000000
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  %38 = fdiv float %35, 0x4029D70A40000000
  br label %43

39:                                               ; preds = %28
  %40 = fadd float %35, 0x3FAC28F5C0000000
  %41 = fdiv float %40, 0x3FF0E147A0000000
  %42 = tail call float @powf(float %41, float 0x4003333340000000) #12
  br label %43

43:                                               ; preds = %37, %39
  %44 = phi float [ %38, %37 ], [ %42, %39 ]
  %45 = fcmp olt float %44, 0.000000e+00
  %46 = fcmp ogt float %44, 1.000000e+00
  %47 = select i1 %46, float 1.000000e+00, float %44
  %48 = select i1 %45, float 0.000000e+00, float %47
  %49 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %3, float %18, float %33, float %48, float 0.000000e+00) #12
  %50 = extractvalue { <2 x float>, <2 x float> } %49, 0
  %51 = extractvalue { <2 x float>, <2 x float> } %49, 1
  %52 = extractelement <2 x float> %51, i32 0
  %53 = insertvalue { <2 x float>, float } undef, <2 x float> %50, 0
  %54 = insertvalue { <2 x float>, float } %53, float %52, 1
  ret { <2 x float>, float } %54
}

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN5blink3lab19ChromaticAdaptationERK5SkM44RK4SkV3S6_: argument 0"}
!5 = distinct !{!5, !"_ZN5blink3lab19ChromaticAdaptationERK5SkM44RK4SkV3S6_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN5SkM445ScaleEfff: argument 0"}
!8 = distinct !{!8, !"_ZN5SkM445ScaleEfff"}
