; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_mask_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_mask_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_lowbd_blend_a64_d16_mask_avx2(i8* nocapture, i32, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 14, %15
  %17 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = sub i32 %16, %18
  %20 = add nsw i32 %19, 8
  %21 = shl i32 1, %20
  %22 = add nsw i32 %19, 7
  %23 = shl i32 1, %22
  %24 = add nsw i32 %21, %23
  %25 = add nsw i32 %19, -1
  %26 = shl i32 -1, %25
  %27 = add i32 %24, %26
  %28 = shl i32 %27, 6
  %29 = add nsw i32 %19, 6
  %30 = insertelement <4 x i32> undef, i32 %28, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = insertelement <8 x i32> undef, i32 %28, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = icmp eq i32 %11, 0
  %35 = or i32 %11, %10
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %245

37:                                               ; preds = %13
  switch i32 %8, label %169 [
    i32 4, label %38
    i32 8, label %82
    i32 16, label %127
  ]

38:                                               ; preds = %37
  %39 = icmp sgt i32 %9, 0
  br i1 %39, label %40, label %949

40:                                               ; preds = %38
  %41 = zext i32 %7 to i64
  %42 = zext i32 %1 to i64
  %43 = zext i32 %3 to i64
  %44 = zext i32 %5 to i64
  br label %45

45:                                               ; preds = %45, %40
  %46 = phi i8* [ %0, %40 ], [ %77, %45 ]
  %47 = phi i32 [ 0, %40 ], [ %80, %45 ]
  %48 = phi i16* [ %2, %40 ], [ %78, %45 ]
  %49 = phi i16* [ %4, %40 ], [ %79, %45 ]
  %50 = phi i8* [ %6, %40 ], [ %76, %45 ]
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %52, i32 0
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %56 = zext <8 x i8> %55 to <8 x i16>
  %57 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %56
  %58 = bitcast i16* %48 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = bitcast i16* %49 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %60 to <8 x i16>
  %65 = bitcast <2 x i64> %63 to <8 x i16>
  %66 = shufflevector <8 x i16> %64, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %56, <8 x i16> %57, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %67) #4
  %69 = sub <4 x i32> %68, %31
  %70 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %69, i32 %29) #4
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> undef) #4
  %72 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %71, <8 x i16> undef) #4
  %73 = bitcast <16 x i8> %72 to <4 x i32>
  %74 = extractelement <4 x i32> %73, i32 0
  %75 = bitcast i8* %46 to i32*
  store i32 %74, i32* %75, align 1
  %76 = getelementptr inbounds i8, i8* %50, i64 %41
  %77 = getelementptr inbounds i8, i8* %46, i64 %42
  %78 = getelementptr inbounds i16, i16* %48, i64 %43
  %79 = getelementptr inbounds i16, i16* %49, i64 %44
  %80 = add nuw nsw i32 %47, 1
  %81 = icmp eq i32 %80, %9
  br i1 %81, label %949, label %45

82:                                               ; preds = %37
  %83 = icmp sgt i32 %9, 0
  br i1 %83, label %84, label %949

84:                                               ; preds = %82
  %85 = zext i32 %7 to i64
  %86 = zext i32 %1 to i64
  %87 = zext i32 %3 to i64
  %88 = zext i32 %5 to i64
  br label %89

89:                                               ; preds = %89, %84
  %90 = phi i8* [ %0, %84 ], [ %122, %89 ]
  %91 = phi i32 [ 0, %84 ], [ %125, %89 ]
  %92 = phi i16* [ %2, %84 ], [ %123, %89 ]
  %93 = phi i16* [ %4, %84 ], [ %124, %89 ]
  %94 = phi i8* [ %6, %84 ], [ %121, %89 ]
  %95 = bitcast i8* %94 to i64*
  %96 = load i64, i64* %95, align 1
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %100 = zext <8 x i8> %99 to <8 x i16>
  %101 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %100
  %102 = bitcast i16* %92 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 1
  %104 = bitcast i16* %93 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 1
  %106 = shufflevector <8 x i16> %103, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %107 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %106, <8 x i16> %107) #4
  %109 = shufflevector <8 x i16> %103, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = shufflevector <8 x i16> %100, <8 x i16> %101, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %110) #4
  %112 = sub <4 x i32> %108, %31
  %113 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %112, i32 %29) #4
  %114 = sub <4 x i32> %111, %31
  %115 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %114, i32 %29) #4
  %116 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %113, <4 x i32> %115) #4
  %117 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> undef) #4
  %118 = bitcast <16 x i8> %117 to <2 x i64>
  %119 = extractelement <2 x i64> %118, i32 0
  %120 = bitcast i8* %90 to i64*
  store i64 %119, i64* %120, align 1
  %121 = getelementptr inbounds i8, i8* %94, i64 %85
  %122 = getelementptr inbounds i8, i8* %90, i64 %86
  %123 = getelementptr inbounds i16, i16* %92, i64 %87
  %124 = getelementptr inbounds i16, i16* %93, i64 %88
  %125 = add nuw nsw i32 %91, 1
  %126 = icmp eq i32 %125, %9
  br i1 %126, label %949, label %89

127:                                              ; preds = %37
  %128 = icmp sgt i32 %9, 0
  br i1 %128, label %129, label %949

129:                                              ; preds = %127
  %130 = zext i32 %7 to i64
  %131 = zext i32 %1 to i64
  %132 = zext i32 %3 to i64
  %133 = zext i32 %5 to i64
  br label %134

134:                                              ; preds = %134, %129
  %135 = phi i8* [ %0, %129 ], [ %164, %134 ]
  %136 = phi i32 [ 0, %129 ], [ %167, %134 ]
  %137 = phi i16* [ %2, %129 ], [ %165, %134 ]
  %138 = phi i16* [ %4, %129 ], [ %166, %134 ]
  %139 = phi i8* [ %6, %129 ], [ %163, %134 ]
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = zext <16 x i8> %141 to <16 x i16>
  %143 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %142
  %144 = bitcast i16* %137 to <16 x i16>*
  %145 = load <16 x i16>, <16 x i16>* %144, align 1
  %146 = bitcast i16* %138 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 1
  %148 = shufflevector <16 x i16> %145, <16 x i16> %147, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %149 = shufflevector <16 x i16> %142, <16 x i16> %143, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %150 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %148, <16 x i16> %149) #4
  %151 = shufflevector <16 x i16> %145, <16 x i16> %147, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %152 = shufflevector <16 x i16> %142, <16 x i16> %143, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %151, <16 x i16> %152) #4
  %154 = sub <8 x i32> %150, %33
  %155 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %154, i32 %29) #4
  %156 = sub <8 x i32> %153, %33
  %157 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %156, i32 %29) #4
  %158 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %155, <8 x i32> %157) #4
  %159 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %158, <16 x i16> undef) #4
  %160 = bitcast <32 x i8> %159 to <4 x i64>
  %161 = bitcast i8* %135 to <2 x i64>*
  %162 = shufflevector <4 x i64> %160, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %162, <2 x i64>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %139, i64 %130
  %164 = getelementptr inbounds i8, i8* %135, i64 %131
  %165 = getelementptr inbounds i16, i16* %137, i64 %132
  %166 = getelementptr inbounds i16, i16* %138, i64 %133
  %167 = add nuw nsw i32 %136, 1
  %168 = icmp eq i32 %167, %9
  br i1 %168, label %949, label %134

169:                                              ; preds = %37
  %170 = icmp sgt i32 %9, 0
  br i1 %170, label %171, label %949

171:                                              ; preds = %169
  %172 = icmp sgt i32 %8, 0
  %173 = zext i32 %7 to i64
  %174 = zext i32 %1 to i64
  %175 = zext i32 %3 to i64
  %176 = zext i32 %5 to i64
  %177 = sext i32 %8 to i64
  br label %178

178:                                              ; preds = %184, %171
  %179 = phi i8* [ %0, %171 ], [ %186, %184 ]
  %180 = phi i32 [ 0, %171 ], [ %189, %184 ]
  %181 = phi i16* [ %2, %171 ], [ %187, %184 ]
  %182 = phi i16* [ %4, %171 ], [ %188, %184 ]
  %183 = phi i8* [ %6, %171 ], [ %185, %184 ]
  br i1 %172, label %191, label %184

184:                                              ; preds = %191, %178
  %185 = getelementptr inbounds i8, i8* %183, i64 %173
  %186 = getelementptr inbounds i8, i8* %179, i64 %174
  %187 = getelementptr inbounds i16, i16* %181, i64 %175
  %188 = getelementptr inbounds i16, i16* %182, i64 %176
  %189 = add nuw nsw i32 %180, 1
  %190 = icmp eq i32 %189, %9
  br i1 %190, label %949, label %178

191:                                              ; preds = %178, %191
  %192 = phi i64 [ %243, %191 ], [ 0, %178 ]
  %193 = getelementptr inbounds i8, i8* %183, i64 %192
  %194 = bitcast i8* %193 to <4 x i64>*
  %195 = load <4 x i64>, <4 x i64>* %194, align 1
  %196 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = bitcast <2 x i64> %196 to <16 x i8>
  %198 = zext <16 x i8> %197 to <16 x i16>
  %199 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = zext <16 x i8> %200 to <16 x i16>
  %202 = getelementptr inbounds i8, i8* %179, i64 %192
  %203 = getelementptr inbounds i16, i16* %181, i64 %192
  %204 = getelementptr inbounds i16, i16* %182, i64 %192
  %205 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %198
  %206 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %201
  %207 = bitcast i16* %203 to <16 x i16>*
  %208 = load <16 x i16>, <16 x i16>* %207, align 1
  %209 = getelementptr inbounds i16, i16* %203, i64 16
  %210 = bitcast i16* %209 to <16 x i16>*
  %211 = load <16 x i16>, <16 x i16>* %210, align 1
  %212 = bitcast i16* %204 to <16 x i16>*
  %213 = load <16 x i16>, <16 x i16>* %212, align 1
  %214 = getelementptr inbounds i16, i16* %204, i64 16
  %215 = bitcast i16* %214 to <16 x i16>*
  %216 = load <16 x i16>, <16 x i16>* %215, align 1
  %217 = shufflevector <16 x i16> %208, <16 x i16> %213, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %218 = shufflevector <16 x i16> %198, <16 x i16> %205, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %219 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %217, <16 x i16> %218) #4
  %220 = shufflevector <16 x i16> %208, <16 x i16> %213, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %221 = shufflevector <16 x i16> %198, <16 x i16> %205, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %222 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %220, <16 x i16> %221) #4
  %223 = shufflevector <16 x i16> %211, <16 x i16> %216, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %224 = shufflevector <16 x i16> %201, <16 x i16> %206, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %225 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %223, <16 x i16> %224) #4
  %226 = shufflevector <16 x i16> %211, <16 x i16> %216, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %227 = shufflevector <16 x i16> %201, <16 x i16> %206, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %228 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %226, <16 x i16> %227) #4
  %229 = sub <8 x i32> %219, %33
  %230 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %229, i32 %29) #4
  %231 = sub <8 x i32> %222, %33
  %232 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %231, i32 %29) #4
  %233 = sub <8 x i32> %225, %33
  %234 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %233, i32 %29) #4
  %235 = sub <8 x i32> %228, %33
  %236 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %235, i32 %29) #4
  %237 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %230, <8 x i32> %232) #4
  %238 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %234, <8 x i32> %236) #4
  %239 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %237, <16 x i16> %238) #4
  %240 = bitcast <32 x i8> %239 to <4 x i64>
  %241 = shufflevector <4 x i64> %240, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %242 = bitcast i8* %202 to <4 x i64>*
  store <4 x i64> %241, <4 x i64>* %242, align 1
  %243 = add nuw nsw i64 %192, 32
  %244 = icmp slt i64 %243, %177
  br i1 %244, label %191, label %184

245:                                              ; preds = %13
  %246 = icmp eq i32 %10, 1
  %247 = icmp eq i32 %11, 1
  %248 = and i1 %246, %247
  br i1 %248, label %249, label %495

249:                                              ; preds = %245
  switch i32 %8, label %403 [
    i32 4, label %250
    i32 8, label %303
    i32 16, label %353
  ]

250:                                              ; preds = %249
  %251 = icmp sgt i32 %9, 0
  br i1 %251, label %252, label %949

252:                                              ; preds = %250
  %253 = zext i32 %7 to i64
  %254 = shl i32 %7, 1
  %255 = zext i32 %254 to i64
  %256 = zext i32 %1 to i64
  %257 = zext i32 %3 to i64
  %258 = zext i32 %5 to i64
  br label %259

259:                                              ; preds = %259, %252
  %260 = phi i8* [ %0, %252 ], [ %298, %259 ]
  %261 = phi i16* [ %2, %252 ], [ %299, %259 ]
  %262 = phi i16* [ %4, %252 ], [ %300, %259 ]
  %263 = phi i8* [ %6, %252 ], [ %297, %259 ]
  %264 = phi i32 [ 0, %252 ], [ %301, %259 ]
  %265 = bitcast i8* %263 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = getelementptr inbounds i8, i8* %263, i64 %253
  %269 = bitcast i8* %268 to i64*
  %270 = load i64, i64* %269, align 1
  %271 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %270, i32 0
  %272 = bitcast <2 x i64> %267 to <16 x i8>
  %273 = bitcast <2 x i64> %271 to <16 x i8>
  %274 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %272, <16 x i8> %273) #4
  %275 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %274, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %276 = add <8 x i16> %275, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %277 = lshr <8 x i16> %276, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %278 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %277
  %279 = bitcast i16* %261 to i64*
  %280 = load i64, i64* %279, align 1
  %281 = insertelement <2 x i64> undef, i64 %280, i32 0
  %282 = bitcast i16* %262 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> undef, i64 %283, i32 0
  %285 = bitcast <2 x i64> %281 to <8 x i16>
  %286 = bitcast <2 x i64> %284 to <8 x i16>
  %287 = shufflevector <8 x i16> %285, <8 x i16> %286, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %288 = shufflevector <8 x i16> %277, <8 x i16> %278, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %289 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %287, <8 x i16> %288) #4
  %290 = sub <4 x i32> %289, %31
  %291 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %290, i32 %29) #4
  %292 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %291, <4 x i32> undef) #4
  %293 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %292, <8 x i16> undef) #4
  %294 = bitcast <16 x i8> %293 to <4 x i32>
  %295 = extractelement <4 x i32> %294, i32 0
  %296 = bitcast i8* %260 to i32*
  store i32 %295, i32* %296, align 1
  %297 = getelementptr inbounds i8, i8* %263, i64 %255
  %298 = getelementptr inbounds i8, i8* %260, i64 %256
  %299 = getelementptr inbounds i16, i16* %261, i64 %257
  %300 = getelementptr inbounds i16, i16* %262, i64 %258
  %301 = add nuw nsw i32 %264, 1
  %302 = icmp eq i32 %301, %9
  br i1 %302, label %949, label %259

303:                                              ; preds = %249
  %304 = icmp sgt i32 %9, 0
  br i1 %304, label %305, label %949

305:                                              ; preds = %303
  %306 = zext i32 %7 to i64
  %307 = shl i32 %7, 1
  %308 = zext i32 %307 to i64
  %309 = zext i32 %1 to i64
  %310 = zext i32 %3 to i64
  %311 = zext i32 %5 to i64
  br label %312

312:                                              ; preds = %312, %305
  %313 = phi i8* [ %0, %305 ], [ %348, %312 ]
  %314 = phi i16* [ %2, %305 ], [ %349, %312 ]
  %315 = phi i16* [ %4, %305 ], [ %350, %312 ]
  %316 = phi i8* [ %6, %305 ], [ %347, %312 ]
  %317 = phi i32 [ 0, %305 ], [ %351, %312 ]
  %318 = bitcast i8* %316 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1
  %320 = getelementptr inbounds i8, i8* %316, i64 %306
  %321 = bitcast i8* %320 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1
  %323 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %319, <16 x i8> %322) #4
  %324 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %323, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %325 = add <8 x i16> %324, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %326 = lshr <8 x i16> %325, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %327 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %326
  %328 = bitcast i16* %314 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = bitcast i16* %315 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 1
  %332 = shufflevector <8 x i16> %329, <8 x i16> %331, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %333 = shufflevector <8 x i16> %326, <8 x i16> %327, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %334 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %332, <8 x i16> %333) #4
  %335 = shufflevector <8 x i16> %329, <8 x i16> %331, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %336 = shufflevector <8 x i16> %326, <8 x i16> %327, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %337 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %335, <8 x i16> %336) #4
  %338 = sub <4 x i32> %334, %31
  %339 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %338, i32 %29) #4
  %340 = sub <4 x i32> %337, %31
  %341 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %340, i32 %29) #4
  %342 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %339, <4 x i32> %341) #4
  %343 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %342, <8 x i16> undef) #4
  %344 = bitcast <16 x i8> %343 to <2 x i64>
  %345 = extractelement <2 x i64> %344, i32 0
  %346 = bitcast i8* %313 to i64*
  store i64 %345, i64* %346, align 1
  %347 = getelementptr inbounds i8, i8* %316, i64 %308
  %348 = getelementptr inbounds i8, i8* %313, i64 %309
  %349 = getelementptr inbounds i16, i16* %314, i64 %310
  %350 = getelementptr inbounds i16, i16* %315, i64 %311
  %351 = add nuw nsw i32 %317, 1
  %352 = icmp eq i32 %351, %9
  br i1 %352, label %949, label %312

353:                                              ; preds = %249
  %354 = icmp sgt i32 %9, 0
  br i1 %354, label %355, label %949

355:                                              ; preds = %353
  %356 = zext i32 %7 to i64
  %357 = shl i32 %7, 1
  %358 = zext i32 %357 to i64
  %359 = zext i32 %1 to i64
  %360 = zext i32 %3 to i64
  %361 = zext i32 %5 to i64
  br label %362

362:                                              ; preds = %362, %355
  %363 = phi i8* [ %0, %355 ], [ %398, %362 ]
  %364 = phi i16* [ %2, %355 ], [ %399, %362 ]
  %365 = phi i16* [ %4, %355 ], [ %400, %362 ]
  %366 = phi i8* [ %6, %355 ], [ %397, %362 ]
  %367 = phi i32 [ 0, %355 ], [ %401, %362 ]
  %368 = bitcast i8* %366 to <32 x i8>*
  %369 = load <32 x i8>, <32 x i8>* %368, align 1
  %370 = getelementptr inbounds i8, i8* %366, i64 %356
  %371 = bitcast i8* %370 to <32 x i8>*
  %372 = load <32 x i8>, <32 x i8>* %371, align 1
  %373 = tail call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %369, <32 x i8> %372) #4
  %374 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %373, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %375 = add <16 x i16> %374, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %376 = lshr <16 x i16> %375, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %377 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %376
  %378 = bitcast i16* %364 to <16 x i16>*
  %379 = load <16 x i16>, <16 x i16>* %378, align 1
  %380 = bitcast i16* %365 to <16 x i16>*
  %381 = load <16 x i16>, <16 x i16>* %380, align 1
  %382 = shufflevector <16 x i16> %379, <16 x i16> %381, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %383 = shufflevector <16 x i16> %376, <16 x i16> %377, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %384 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %382, <16 x i16> %383) #4
  %385 = shufflevector <16 x i16> %379, <16 x i16> %381, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %386 = shufflevector <16 x i16> %376, <16 x i16> %377, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %387 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %385, <16 x i16> %386) #4
  %388 = sub <8 x i32> %384, %33
  %389 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %388, i32 %29) #4
  %390 = sub <8 x i32> %387, %33
  %391 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %390, i32 %29) #4
  %392 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %389, <8 x i32> %391) #4
  %393 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %392, <16 x i16> undef) #4
  %394 = bitcast <32 x i8> %393 to <4 x i64>
  %395 = bitcast i8* %363 to <2 x i64>*
  %396 = shufflevector <4 x i64> %394, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %396, <2 x i64>* %395, align 1
  %397 = getelementptr inbounds i8, i8* %366, i64 %358
  %398 = getelementptr inbounds i8, i8* %363, i64 %359
  %399 = getelementptr inbounds i16, i16* %364, i64 %360
  %400 = getelementptr inbounds i16, i16* %365, i64 %361
  %401 = add nuw nsw i32 %367, 1
  %402 = icmp eq i32 %401, %9
  br i1 %402, label %949, label %362

403:                                              ; preds = %249
  %404 = icmp sgt i32 %9, 0
  br i1 %404, label %405, label %949

405:                                              ; preds = %403
  %406 = icmp sgt i32 %8, 0
  %407 = zext i32 %7 to i64
  %408 = shl i32 %7, 1
  %409 = zext i32 %408 to i64
  %410 = zext i32 %1 to i64
  %411 = zext i32 %3 to i64
  %412 = zext i32 %5 to i64
  %413 = sext i32 %8 to i64
  br label %414

414:                                              ; preds = %422, %405
  %415 = phi i8* [ %0, %405 ], [ %424, %422 ]
  %416 = phi i16* [ %2, %405 ], [ %425, %422 ]
  %417 = phi i16* [ %4, %405 ], [ %426, %422 ]
  %418 = phi i8* [ %6, %405 ], [ %423, %422 ]
  %419 = phi i32 [ 0, %405 ], [ %427, %422 ]
  br i1 %406, label %420, label %422

420:                                              ; preds = %414
  %421 = getelementptr inbounds i8, i8* %418, i64 %407
  br label %429

422:                                              ; preds = %429, %414
  %423 = getelementptr inbounds i8, i8* %418, i64 %409
  %424 = getelementptr inbounds i8, i8* %415, i64 %410
  %425 = getelementptr inbounds i16, i16* %416, i64 %411
  %426 = getelementptr inbounds i16, i16* %417, i64 %412
  %427 = add nuw nsw i32 %419, 1
  %428 = icmp eq i32 %427, %9
  br i1 %428, label %949, label %414

429:                                              ; preds = %429, %420
  %430 = phi i64 [ 0, %420 ], [ %493, %429 ]
  %431 = shl nuw nsw i64 %430, 1
  %432 = getelementptr inbounds i8, i8* %418, i64 %431
  %433 = bitcast i8* %432 to <32 x i8>*
  %434 = load <32 x i8>, <32 x i8>* %433, align 1
  %435 = getelementptr inbounds i8, i8* %432, i64 32
  %436 = bitcast i8* %435 to <32 x i8>*
  %437 = load <32 x i8>, <32 x i8>* %436, align 1
  %438 = getelementptr inbounds i8, i8* %421, i64 %431
  %439 = bitcast i8* %438 to <32 x i8>*
  %440 = load <32 x i8>, <32 x i8>* %439, align 1
  %441 = getelementptr inbounds i8, i8* %438, i64 32
  %442 = bitcast i8* %441 to <32 x i8>*
  %443 = load <32 x i8>, <32 x i8>* %442, align 1
  %444 = tail call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %434, <32 x i8> %440) #4
  %445 = tail call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %437, <32 x i8> %443) #4
  %446 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %444, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %447 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %445, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %448 = add <16 x i16> %446, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %449 = lshr <16 x i16> %448, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %450 = add <16 x i16> %447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %451 = lshr <16 x i16> %450, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %452 = getelementptr inbounds i8, i8* %415, i64 %430
  %453 = getelementptr inbounds i16, i16* %416, i64 %430
  %454 = getelementptr inbounds i16, i16* %417, i64 %430
  %455 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %449
  %456 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %451
  %457 = bitcast i16* %453 to <16 x i16>*
  %458 = load <16 x i16>, <16 x i16>* %457, align 1
  %459 = getelementptr inbounds i16, i16* %453, i64 16
  %460 = bitcast i16* %459 to <16 x i16>*
  %461 = load <16 x i16>, <16 x i16>* %460, align 1
  %462 = bitcast i16* %454 to <16 x i16>*
  %463 = load <16 x i16>, <16 x i16>* %462, align 1
  %464 = getelementptr inbounds i16, i16* %454, i64 16
  %465 = bitcast i16* %464 to <16 x i16>*
  %466 = load <16 x i16>, <16 x i16>* %465, align 1
  %467 = shufflevector <16 x i16> %458, <16 x i16> %463, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %468 = shufflevector <16 x i16> %449, <16 x i16> %455, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %469 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %467, <16 x i16> %468) #4
  %470 = shufflevector <16 x i16> %458, <16 x i16> %463, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %471 = shufflevector <16 x i16> %449, <16 x i16> %455, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %472 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %470, <16 x i16> %471) #4
  %473 = shufflevector <16 x i16> %461, <16 x i16> %466, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %474 = shufflevector <16 x i16> %451, <16 x i16> %456, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %475 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %473, <16 x i16> %474) #4
  %476 = shufflevector <16 x i16> %461, <16 x i16> %466, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %477 = shufflevector <16 x i16> %451, <16 x i16> %456, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %478 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %476, <16 x i16> %477) #4
  %479 = sub <8 x i32> %469, %33
  %480 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %479, i32 %29) #4
  %481 = sub <8 x i32> %472, %33
  %482 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %481, i32 %29) #4
  %483 = sub <8 x i32> %475, %33
  %484 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %483, i32 %29) #4
  %485 = sub <8 x i32> %478, %33
  %486 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %485, i32 %29) #4
  %487 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %480, <8 x i32> %482) #4
  %488 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %484, <8 x i32> %486) #4
  %489 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %487, <16 x i16> %488) #4
  %490 = bitcast <32 x i8> %489 to <4 x i64>
  %491 = shufflevector <4 x i64> %490, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %492 = bitcast i8* %452 to <4 x i64>*
  store <4 x i64> %491, <4 x i64>* %492, align 1
  %493 = add nuw nsw i64 %430, 32
  %494 = icmp slt i64 %493, %413
  br i1 %494, label %429, label %422

495:                                              ; preds = %245
  %496 = and i1 %246, %34
  br i1 %496, label %497, label %706

497:                                              ; preds = %495
  switch i32 %8, label %628 [
    i32 4, label %498
    i32 8, label %542
    i32 16, label %585
  ]

498:                                              ; preds = %497
  %499 = icmp sgt i32 %9, 0
  br i1 %499, label %500, label %949

500:                                              ; preds = %498
  %501 = zext i32 %7 to i64
  %502 = zext i32 %1 to i64
  %503 = zext i32 %3 to i64
  %504 = zext i32 %5 to i64
  br label %505

505:                                              ; preds = %505, %500
  %506 = phi i8* [ %0, %500 ], [ %537, %505 ]
  %507 = phi i16* [ %2, %500 ], [ %538, %505 ]
  %508 = phi i32 [ 0, %500 ], [ %540, %505 ]
  %509 = phi i16* [ %4, %500 ], [ %539, %505 ]
  %510 = phi i8* [ %6, %500 ], [ %536, %505 ]
  %511 = bitcast i8* %510 to i64*
  %512 = load i64, i64* %511, align 1
  %513 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %512, i32 0
  %514 = bitcast <2 x i64> %513 to <16 x i8>
  %515 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %514, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %516 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %515, <8 x i16> zeroinitializer) #4
  %517 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %516
  %518 = bitcast i16* %507 to i64*
  %519 = load i64, i64* %518, align 1
  %520 = insertelement <2 x i64> undef, i64 %519, i32 0
  %521 = bitcast i16* %509 to i64*
  %522 = load i64, i64* %521, align 1
  %523 = insertelement <2 x i64> undef, i64 %522, i32 0
  %524 = bitcast <2 x i64> %520 to <8 x i16>
  %525 = bitcast <2 x i64> %523 to <8 x i16>
  %526 = shufflevector <8 x i16> %524, <8 x i16> %525, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %527 = shufflevector <8 x i16> %516, <8 x i16> %517, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %528 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %526, <8 x i16> %527) #4
  %529 = sub <4 x i32> %528, %31
  %530 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %529, i32 %29) #4
  %531 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %530, <4 x i32> undef) #4
  %532 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %531, <8 x i16> undef) #4
  %533 = bitcast <16 x i8> %532 to <4 x i32>
  %534 = extractelement <4 x i32> %533, i32 0
  %535 = bitcast i8* %506 to i32*
  store i32 %534, i32* %535, align 1
  %536 = getelementptr inbounds i8, i8* %510, i64 %501
  %537 = getelementptr inbounds i8, i8* %506, i64 %502
  %538 = getelementptr inbounds i16, i16* %507, i64 %503
  %539 = getelementptr inbounds i16, i16* %509, i64 %504
  %540 = add nuw nsw i32 %508, 1
  %541 = icmp eq i32 %540, %9
  br i1 %541, label %949, label %505

542:                                              ; preds = %497
  %543 = icmp sgt i32 %9, 0
  br i1 %543, label %544, label %949

544:                                              ; preds = %542
  %545 = zext i32 %7 to i64
  %546 = zext i32 %1 to i64
  %547 = zext i32 %3 to i64
  %548 = zext i32 %5 to i64
  br label %549

549:                                              ; preds = %549, %544
  %550 = phi i8* [ %0, %544 ], [ %580, %549 ]
  %551 = phi i16* [ %2, %544 ], [ %581, %549 ]
  %552 = phi i32 [ 0, %544 ], [ %583, %549 ]
  %553 = phi i16* [ %4, %544 ], [ %582, %549 ]
  %554 = phi i8* [ %6, %544 ], [ %579, %549 ]
  %555 = bitcast i8* %554 to <16 x i8>*
  %556 = load <16 x i8>, <16 x i8>* %555, align 1
  %557 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %556, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %558 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %557, <8 x i16> zeroinitializer) #4
  %559 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %558
  %560 = bitcast i16* %551 to <8 x i16>*
  %561 = load <8 x i16>, <8 x i16>* %560, align 1
  %562 = bitcast i16* %553 to <8 x i16>*
  %563 = load <8 x i16>, <8 x i16>* %562, align 1
  %564 = shufflevector <8 x i16> %561, <8 x i16> %563, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %565 = shufflevector <8 x i16> %558, <8 x i16> %559, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %566 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %564, <8 x i16> %565) #4
  %567 = shufflevector <8 x i16> %561, <8 x i16> %563, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %568 = shufflevector <8 x i16> %558, <8 x i16> %559, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %569 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %567, <8 x i16> %568) #4
  %570 = sub <4 x i32> %566, %31
  %571 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %570, i32 %29) #4
  %572 = sub <4 x i32> %569, %31
  %573 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %572, i32 %29) #4
  %574 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %571, <4 x i32> %573) #4
  %575 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %574, <8 x i16> undef) #4
  %576 = bitcast <16 x i8> %575 to <2 x i64>
  %577 = extractelement <2 x i64> %576, i32 0
  %578 = bitcast i8* %550 to i64*
  store i64 %577, i64* %578, align 1
  %579 = getelementptr inbounds i8, i8* %554, i64 %545
  %580 = getelementptr inbounds i8, i8* %550, i64 %546
  %581 = getelementptr inbounds i16, i16* %551, i64 %547
  %582 = getelementptr inbounds i16, i16* %553, i64 %548
  %583 = add nuw nsw i32 %552, 1
  %584 = icmp eq i32 %583, %9
  br i1 %584, label %949, label %549

585:                                              ; preds = %497
  %586 = icmp sgt i32 %9, 0
  br i1 %586, label %587, label %949

587:                                              ; preds = %585
  %588 = zext i32 %7 to i64
  %589 = zext i32 %1 to i64
  %590 = zext i32 %3 to i64
  %591 = zext i32 %5 to i64
  br label %592

592:                                              ; preds = %587, %592
  %593 = phi i8* [ %0, %587 ], [ %623, %592 ]
  %594 = phi i16* [ %2, %587 ], [ %624, %592 ]
  %595 = phi i32 [ 0, %587 ], [ %626, %592 ]
  %596 = phi i16* [ %4, %587 ], [ %625, %592 ]
  %597 = phi i8* [ %6, %587 ], [ %622, %592 ]
  %598 = bitcast i8* %597 to <32 x i8>*
  %599 = load <32 x i8>, <32 x i8>* %598, align 1
  %600 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %599, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %601 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %600, <16 x i16> zeroinitializer) #4
  %602 = sub <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %601
  %603 = bitcast i16* %594 to <16 x i16>*
  %604 = load <16 x i16>, <16 x i16>* %603, align 1
  %605 = bitcast i16* %596 to <16 x i16>*
  %606 = load <16 x i16>, <16 x i16>* %605, align 1
  %607 = shufflevector <16 x i16> %604, <16 x i16> %606, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %608 = shufflevector <16 x i16> %601, <16 x i16> %602, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %609 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %607, <16 x i16> %608) #4
  %610 = shufflevector <16 x i16> %604, <16 x i16> %606, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %611 = shufflevector <16 x i16> %601, <16 x i16> %602, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %612 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %610, <16 x i16> %611) #4
  %613 = sub <8 x i32> %609, %33
  %614 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %613, i32 %29) #4
  %615 = sub <8 x i32> %612, %33
  %616 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %615, i32 %29) #4
  %617 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %614, <8 x i32> %616) #4
  %618 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %617, <16 x i16> undef) #4
  %619 = bitcast <32 x i8> %618 to <4 x i64>
  %620 = bitcast i8* %593 to <2 x i64>*
  %621 = shufflevector <4 x i64> %619, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %621, <2 x i64>* %620, align 1
  %622 = getelementptr inbounds i8, i8* %597, i64 %588
  %623 = getelementptr inbounds i8, i8* %593, i64 %589
  %624 = getelementptr inbounds i16, i16* %594, i64 %590
  %625 = getelementptr inbounds i16, i16* %596, i64 %591
  %626 = add nuw nsw i32 %595, 1
  %627 = icmp eq i32 %626, %9
  br i1 %627, label %949, label %592

628:                                              ; preds = %497
  %629 = icmp sgt i32 %9, 0
  br i1 %629, label %630, label %949

630:                                              ; preds = %628
  %631 = icmp sgt i32 %8, 0
  %632 = zext i32 %7 to i64
  %633 = zext i32 %1 to i64
  %634 = zext i32 %3 to i64
  %635 = zext i32 %5 to i64
  %636 = sext i32 %8 to i64
  br label %637

637:                                              ; preds = %643, %630
  %638 = phi i8* [ %0, %630 ], [ %645, %643 ]
  %639 = phi i16* [ %2, %630 ], [ %646, %643 ]
  %640 = phi i16* [ %4, %630 ], [ %647, %643 ]
  %641 = phi i8* [ %6, %630 ], [ %644, %643 ]
  %642 = phi i32 [ 0, %630 ], [ %648, %643 ]
  br i1 %631, label %650, label %643

643:                                              ; preds = %650, %637
  %644 = getelementptr inbounds i8, i8* %641, i64 %632
  %645 = getelementptr inbounds i8, i8* %638, i64 %633
  %646 = getelementptr inbounds i16, i16* %639, i64 %634
  %647 = getelementptr inbounds i16, i16* %640, i64 %635
  %648 = add nuw nsw i32 %642, 1
  %649 = icmp eq i32 %648, %9
  br i1 %649, label %949, label %637

650:                                              ; preds = %637, %650
  %651 = phi i64 [ %704, %650 ], [ 0, %637 ]
  %652 = shl nuw nsw i64 %651, 1
  %653 = getelementptr inbounds i8, i8* %641, i64 %652
  %654 = bitcast i8* %653 to <32 x i8>*
  %655 = load <32 x i8>, <32 x i8>* %654, align 1
  %656 = getelementptr inbounds i8, i8* %653, i64 32
  %657 = bitcast i8* %656 to <32 x i8>*
  %658 = load <32 x i8>, <32 x i8>* %657, align 1
  %659 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %655, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %660 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %658, <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #4
  %661 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %659, <16 x i16> zeroinitializer) #4
  %662 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %660, <16 x i16> zeroinitializer) #4
  %663 = getelementptr inbounds i8, i8* %638, i64 %651
  %664 = getelementptr inbounds i16, i16* %639, i64 %651
  %665 = getelementptr inbounds i16, i16* %640, i64 %651
  %666 = sub <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %661
  %667 = sub <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %662
  %668 = bitcast i16* %664 to <16 x i16>*
  %669 = load <16 x i16>, <16 x i16>* %668, align 1
  %670 = getelementptr inbounds i16, i16* %664, i64 16
  %671 = bitcast i16* %670 to <16 x i16>*
  %672 = load <16 x i16>, <16 x i16>* %671, align 1
  %673 = bitcast i16* %665 to <16 x i16>*
  %674 = load <16 x i16>, <16 x i16>* %673, align 1
  %675 = getelementptr inbounds i16, i16* %665, i64 16
  %676 = bitcast i16* %675 to <16 x i16>*
  %677 = load <16 x i16>, <16 x i16>* %676, align 1
  %678 = shufflevector <16 x i16> %669, <16 x i16> %674, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %679 = shufflevector <16 x i16> %661, <16 x i16> %666, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %680 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %678, <16 x i16> %679) #4
  %681 = shufflevector <16 x i16> %669, <16 x i16> %674, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %682 = shufflevector <16 x i16> %661, <16 x i16> %666, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %683 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %681, <16 x i16> %682) #4
  %684 = shufflevector <16 x i16> %672, <16 x i16> %677, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %685 = shufflevector <16 x i16> %662, <16 x i16> %667, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %686 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %684, <16 x i16> %685) #4
  %687 = shufflevector <16 x i16> %672, <16 x i16> %677, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %688 = shufflevector <16 x i16> %662, <16 x i16> %667, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %689 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %687, <16 x i16> %688) #4
  %690 = sub <8 x i32> %680, %33
  %691 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %690, i32 %29) #4
  %692 = sub <8 x i32> %683, %33
  %693 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %692, i32 %29) #4
  %694 = sub <8 x i32> %686, %33
  %695 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %694, i32 %29) #4
  %696 = sub <8 x i32> %689, %33
  %697 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %696, i32 %29) #4
  %698 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %691, <8 x i32> %693) #4
  %699 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %695, <8 x i32> %697) #4
  %700 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %698, <16 x i16> %699) #4
  %701 = bitcast <32 x i8> %700 to <4 x i64>
  %702 = shufflevector <4 x i64> %701, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %703 = bitcast i8* %663 to <4 x i64>*
  store <4 x i64> %702, <4 x i64>* %703, align 1
  %704 = add nuw nsw i64 %651, 32
  %705 = icmp slt i64 %704, %636
  br i1 %705, label %650, label %643

706:                                              ; preds = %495
  switch i32 %8, label %863 [
    i32 4, label %707
    i32 8, label %760
    i32 16, label %814
  ]

707:                                              ; preds = %706
  %708 = icmp sgt i32 %9, 0
  br i1 %708, label %709, label %949

709:                                              ; preds = %707
  %710 = zext i32 %7 to i64
  %711 = shl i32 %7, 1
  %712 = zext i32 %711 to i64
  %713 = zext i32 %1 to i64
  %714 = zext i32 %3 to i64
  %715 = zext i32 %5 to i64
  br label %716

716:                                              ; preds = %716, %709
  %717 = phi i8* [ %0, %709 ], [ %755, %716 ]
  %718 = phi i16* [ %2, %709 ], [ %756, %716 ]
  %719 = phi i16* [ %4, %709 ], [ %757, %716 ]
  %720 = phi i32 [ 0, %709 ], [ %758, %716 ]
  %721 = phi i8* [ %6, %709 ], [ %754, %716 ]
  %722 = bitcast i8* %721 to i64*
  %723 = load i64, i64* %722, align 1
  %724 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %723, i32 0
  %725 = getelementptr inbounds i8, i8* %721, i64 %710
  %726 = bitcast i8* %725 to i64*
  %727 = load i64, i64* %726, align 1
  %728 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %727, i32 0
  %729 = bitcast <2 x i64> %724 to <16 x i8>
  %730 = bitcast <2 x i64> %728 to <16 x i8>
  %731 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %729, <16 x i8> %730) #4
  %732 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %731, <16 x i8> zeroinitializer) #4
  %733 = shufflevector <16 x i8> %732, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %734 = zext <8 x i8> %733 to <8 x i16>
  %735 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %734
  %736 = bitcast i16* %718 to i64*
  %737 = load i64, i64* %736, align 1
  %738 = insertelement <2 x i64> undef, i64 %737, i32 0
  %739 = bitcast i16* %719 to i64*
  %740 = load i64, i64* %739, align 1
  %741 = insertelement <2 x i64> undef, i64 %740, i32 0
  %742 = bitcast <2 x i64> %738 to <8 x i16>
  %743 = bitcast <2 x i64> %741 to <8 x i16>
  %744 = shufflevector <8 x i16> %742, <8 x i16> %743, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %745 = shufflevector <8 x i16> %734, <8 x i16> %735, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %746 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %744, <8 x i16> %745) #4
  %747 = sub <4 x i32> %746, %31
  %748 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %747, i32 %29) #4
  %749 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %748, <4 x i32> undef) #4
  %750 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %749, <8 x i16> undef) #4
  %751 = bitcast <16 x i8> %750 to <4 x i32>
  %752 = extractelement <4 x i32> %751, i32 0
  %753 = bitcast i8* %717 to i32*
  store i32 %752, i32* %753, align 1
  %754 = getelementptr inbounds i8, i8* %721, i64 %712
  %755 = getelementptr inbounds i8, i8* %717, i64 %713
  %756 = getelementptr inbounds i16, i16* %718, i64 %714
  %757 = getelementptr inbounds i16, i16* %719, i64 %715
  %758 = add nuw nsw i32 %720, 1
  %759 = icmp eq i32 %758, %9
  br i1 %759, label %949, label %716

760:                                              ; preds = %706
  %761 = icmp sgt i32 %9, 0
  br i1 %761, label %762, label %949

762:                                              ; preds = %760
  %763 = zext i32 %7 to i64
  %764 = shl i32 %7, 1
  %765 = zext i32 %764 to i64
  %766 = zext i32 %1 to i64
  %767 = zext i32 %3 to i64
  %768 = zext i32 %5 to i64
  br label %769

769:                                              ; preds = %769, %762
  %770 = phi i8* [ %0, %762 ], [ %809, %769 ]
  %771 = phi i16* [ %2, %762 ], [ %810, %769 ]
  %772 = phi i16* [ %4, %762 ], [ %811, %769 ]
  %773 = phi i32 [ 0, %762 ], [ %812, %769 ]
  %774 = phi i8* [ %6, %762 ], [ %808, %769 ]
  %775 = bitcast i8* %774 to i64*
  %776 = load i64, i64* %775, align 1
  %777 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %776, i32 0
  %778 = getelementptr inbounds i8, i8* %774, i64 %763
  %779 = bitcast i8* %778 to i64*
  %780 = load i64, i64* %779, align 1
  %781 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %780, i32 0
  %782 = bitcast <2 x i64> %777 to <16 x i8>
  %783 = bitcast <2 x i64> %781 to <16 x i8>
  %784 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %782, <16 x i8> %783) #4
  %785 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %784, <16 x i8> zeroinitializer) #4
  %786 = shufflevector <16 x i8> %785, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %787 = zext <8 x i8> %786 to <8 x i16>
  %788 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %787
  %789 = bitcast i16* %771 to <8 x i16>*
  %790 = load <8 x i16>, <8 x i16>* %789, align 1
  %791 = bitcast i16* %772 to <8 x i16>*
  %792 = load <8 x i16>, <8 x i16>* %791, align 1
  %793 = shufflevector <8 x i16> %790, <8 x i16> %792, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %794 = shufflevector <8 x i16> %787, <8 x i16> %788, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %795 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %793, <8 x i16> %794) #4
  %796 = shufflevector <8 x i16> %790, <8 x i16> %792, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %797 = shufflevector <8 x i16> %787, <8 x i16> %788, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %798 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %796, <8 x i16> %797) #4
  %799 = sub <4 x i32> %795, %31
  %800 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %799, i32 %29) #4
  %801 = sub <4 x i32> %798, %31
  %802 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %801, i32 %29) #4
  %803 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %800, <4 x i32> %802) #4
  %804 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %803, <8 x i16> undef) #4
  %805 = bitcast <16 x i8> %804 to <2 x i64>
  %806 = extractelement <2 x i64> %805, i32 0
  %807 = bitcast i8* %770 to i64*
  store i64 %806, i64* %807, align 1
  %808 = getelementptr inbounds i8, i8* %774, i64 %765
  %809 = getelementptr inbounds i8, i8* %770, i64 %766
  %810 = getelementptr inbounds i16, i16* %771, i64 %767
  %811 = getelementptr inbounds i16, i16* %772, i64 %768
  %812 = add nuw nsw i32 %773, 1
  %813 = icmp eq i32 %812, %9
  br i1 %813, label %949, label %769

814:                                              ; preds = %706
  %815 = icmp sgt i32 %9, 0
  br i1 %815, label %816, label %949

816:                                              ; preds = %814
  %817 = zext i32 %7 to i64
  %818 = shl i32 %7, 1
  %819 = zext i32 %818 to i64
  %820 = zext i32 %1 to i64
  %821 = zext i32 %3 to i64
  %822 = zext i32 %5 to i64
  br label %823

823:                                              ; preds = %816, %823
  %824 = phi i8* [ %0, %816 ], [ %858, %823 ]
  %825 = phi i16* [ %2, %816 ], [ %859, %823 ]
  %826 = phi i16* [ %4, %816 ], [ %860, %823 ]
  %827 = phi i32 [ 0, %816 ], [ %861, %823 ]
  %828 = phi i8* [ %6, %816 ], [ %857, %823 ]
  %829 = getelementptr inbounds i8, i8* %828, i64 %817
  %830 = bitcast i8* %828 to <16 x i8>*
  %831 = load <16 x i8>, <16 x i8>* %830, align 1
  %832 = bitcast i8* %829 to <16 x i8>*
  %833 = load <16 x i8>, <16 x i8>* %832, align 1
  %834 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %831, <16 x i8> %833) #4
  %835 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %834, <16 x i8> zeroinitializer) #4
  %836 = zext <16 x i8> %835 to <16 x i16>
  %837 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %836
  %838 = bitcast i16* %825 to <16 x i16>*
  %839 = load <16 x i16>, <16 x i16>* %838, align 1
  %840 = bitcast i16* %826 to <16 x i16>*
  %841 = load <16 x i16>, <16 x i16>* %840, align 1
  %842 = shufflevector <16 x i16> %839, <16 x i16> %841, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %843 = shufflevector <16 x i16> %836, <16 x i16> %837, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %844 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %842, <16 x i16> %843) #4
  %845 = shufflevector <16 x i16> %839, <16 x i16> %841, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %846 = shufflevector <16 x i16> %836, <16 x i16> %837, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %847 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %845, <16 x i16> %846) #4
  %848 = sub <8 x i32> %844, %33
  %849 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %848, i32 %29) #4
  %850 = sub <8 x i32> %847, %33
  %851 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %850, i32 %29) #4
  %852 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %849, <8 x i32> %851) #4
  %853 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %852, <16 x i16> undef) #4
  %854 = bitcast <32 x i8> %853 to <4 x i64>
  %855 = bitcast i8* %824 to <2 x i64>*
  %856 = shufflevector <4 x i64> %854, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %856, <2 x i64>* %855, align 1
  %857 = getelementptr inbounds i8, i8* %828, i64 %819
  %858 = getelementptr inbounds i8, i8* %824, i64 %820
  %859 = getelementptr inbounds i16, i16* %825, i64 %821
  %860 = getelementptr inbounds i16, i16* %826, i64 %822
  %861 = add nuw nsw i32 %827, 1
  %862 = icmp eq i32 %861, %9
  br i1 %862, label %949, label %823

863:                                              ; preds = %706
  %864 = icmp sgt i32 %9, 0
  br i1 %864, label %865, label %949

865:                                              ; preds = %863
  %866 = icmp sgt i32 %8, 0
  %867 = zext i32 %7 to i64
  %868 = shl i32 %7, 1
  %869 = zext i32 %868 to i64
  %870 = zext i32 %1 to i64
  %871 = zext i32 %3 to i64
  %872 = zext i32 %5 to i64
  %873 = sext i32 %8 to i64
  br label %874

874:                                              ; preds = %882, %865
  %875 = phi i8* [ %0, %865 ], [ %884, %882 ]
  %876 = phi i16* [ %2, %865 ], [ %885, %882 ]
  %877 = phi i16* [ %4, %865 ], [ %886, %882 ]
  %878 = phi i32 [ 0, %865 ], [ %887, %882 ]
  %879 = phi i8* [ %6, %865 ], [ %883, %882 ]
  br i1 %866, label %880, label %882

880:                                              ; preds = %874
  %881 = getelementptr inbounds i8, i8* %879, i64 %867
  br label %889

882:                                              ; preds = %889, %874
  %883 = getelementptr inbounds i8, i8* %879, i64 %869
  %884 = getelementptr inbounds i8, i8* %875, i64 %870
  %885 = getelementptr inbounds i16, i16* %876, i64 %871
  %886 = getelementptr inbounds i16, i16* %877, i64 %872
  %887 = add nuw nsw i32 %878, 1
  %888 = icmp eq i32 %887, %9
  br i1 %888, label %949, label %874

889:                                              ; preds = %889, %880
  %890 = phi i64 [ 0, %880 ], [ %947, %889 ]
  %891 = getelementptr inbounds i8, i8* %879, i64 %890
  %892 = bitcast i8* %891 to <32 x i8>*
  %893 = load <32 x i8>, <32 x i8>* %892, align 1
  %894 = getelementptr inbounds i8, i8* %881, i64 %890
  %895 = bitcast i8* %894 to <32 x i8>*
  %896 = load <32 x i8>, <32 x i8>* %895, align 1
  %897 = tail call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %893, <32 x i8> %896) #4
  %898 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %897, <32 x i8> zeroinitializer) #4
  %899 = bitcast <32 x i8> %898 to <4 x i64>
  %900 = shufflevector <4 x i64> %899, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %901 = bitcast <2 x i64> %900 to <16 x i8>
  %902 = zext <16 x i8> %901 to <16 x i16>
  %903 = shufflevector <4 x i64> %899, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %904 = bitcast <2 x i64> %903 to <16 x i8>
  %905 = zext <16 x i8> %904 to <16 x i16>
  %906 = getelementptr inbounds i8, i8* %875, i64 %890
  %907 = getelementptr inbounds i16, i16* %876, i64 %890
  %908 = getelementptr inbounds i16, i16* %877, i64 %890
  %909 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %902
  %910 = sub nsw <16 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %905
  %911 = bitcast i16* %907 to <16 x i16>*
  %912 = load <16 x i16>, <16 x i16>* %911, align 1
  %913 = getelementptr inbounds i16, i16* %907, i64 16
  %914 = bitcast i16* %913 to <16 x i16>*
  %915 = load <16 x i16>, <16 x i16>* %914, align 1
  %916 = bitcast i16* %908 to <16 x i16>*
  %917 = load <16 x i16>, <16 x i16>* %916, align 1
  %918 = getelementptr inbounds i16, i16* %908, i64 16
  %919 = bitcast i16* %918 to <16 x i16>*
  %920 = load <16 x i16>, <16 x i16>* %919, align 1
  %921 = shufflevector <16 x i16> %912, <16 x i16> %917, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %922 = shufflevector <16 x i16> %902, <16 x i16> %909, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %923 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %921, <16 x i16> %922) #4
  %924 = shufflevector <16 x i16> %912, <16 x i16> %917, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %925 = shufflevector <16 x i16> %902, <16 x i16> %909, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %926 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %924, <16 x i16> %925) #4
  %927 = shufflevector <16 x i16> %915, <16 x i16> %920, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %928 = shufflevector <16 x i16> %905, <16 x i16> %910, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %929 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %927, <16 x i16> %928) #4
  %930 = shufflevector <16 x i16> %915, <16 x i16> %920, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %931 = shufflevector <16 x i16> %905, <16 x i16> %910, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %932 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %930, <16 x i16> %931) #4
  %933 = sub <8 x i32> %923, %33
  %934 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %933, i32 %29) #4
  %935 = sub <8 x i32> %926, %33
  %936 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %935, i32 %29) #4
  %937 = sub <8 x i32> %929, %33
  %938 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %937, i32 %29) #4
  %939 = sub <8 x i32> %932, %33
  %940 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %939, i32 %29) #4
  %941 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %934, <8 x i32> %936) #4
  %942 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %938, <8 x i32> %940) #4
  %943 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %941, <16 x i16> %942) #4
  %944 = bitcast <32 x i8> %943 to <4 x i64>
  %945 = shufflevector <4 x i64> %944, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %946 = bitcast i8* %906 to <4 x i64>*
  store <4 x i64> %945, <4 x i64>* %946, align 1
  %947 = add nuw nsw i64 %890, 32
  %948 = icmp slt i64 %947, %873
  br i1 %948, label %889, label %882

949:                                              ; preds = %823, %769, %716, %882, %592, %549, %505, %643, %362, %312, %259, %422, %134, %89, %45, %184, %863, %814, %760, %707, %628, %585, %542, %498, %403, %353, %303, %250, %169, %127, %82, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_blend_a64_mask_avx2(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = or i32 %9, %8
  %14 = and i32 %13, 3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16, !prof !2

16:                                               ; preds = %12
  tail call void @aom_blend_a64_mask_c(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #4
  br label %805

17:                                               ; preds = %12
  %18 = and i32 %11, %10
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %262, label %20

20:                                               ; preds = %17
  switch i32 %8, label %179 [
    i32 4, label %28
    i32 8, label %21
    i32 16, label %127
  ]

21:                                               ; preds = %20
  %22 = zext i32 %7 to i64
  %23 = zext i32 %1 to i64
  %24 = zext i32 %3 to i64
  %25 = zext i32 %5 to i64
  %26 = shl i32 %7, 1
  %27 = zext i32 %26 to i64
  br label %83

28:                                               ; preds = %20
  %29 = zext i32 %7 to i64
  %30 = zext i32 %1 to i64
  %31 = zext i32 %3 to i64
  %32 = zext i32 %5 to i64
  %33 = shl i32 %7, 1
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %28
  %36 = phi i32 [ %81, %35 ], [ %9, %28 ]
  %37 = phi i8* [ %80, %35 ], [ %6, %28 ]
  %38 = phi i8* [ %79, %35 ], [ %4, %28 ]
  %39 = phi i8* [ %78, %35 ], [ %2, %28 ]
  %40 = phi i8* [ %77, %35 ], [ %0, %28 ]
  %41 = bitcast i8* %37 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %37, i64 %29
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %46, i32 0
  %48 = bitcast <2 x i64> %43 to <16 x i8>
  %49 = bitcast <2 x i64> %47 to <16 x i8>
  %50 = add <16 x i8> %49, %48
  %51 = shufflevector <16 x i8> %50, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %53 = zext <8 x i8> %52 to <8 x i16>
  %54 = shufflevector <16 x i8> %51, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %55 = zext <8 x i8> %54 to <8 x i16>
  %56 = add nuw nsw <8 x i16> %55, %53
  %57 = lshr <8 x i16> %56, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #4
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %58) #4
  %60 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %59
  %61 = bitcast i8* %39 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %62, i32 0
  %64 = bitcast i8* %38 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %65, i32 0
  %67 = bitcast <4 x i32> %63 to <16 x i8>
  %68 = bitcast <4 x i32> %66 to <16 x i8>
  %69 = shufflevector <16 x i8> %67, <16 x i8> %68, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %69, <16 x i8> %70) #4
  %72 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %71, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %73 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %72, <8 x i16> undef) #4
  %74 = bitcast <16 x i8> %73 to <4 x i32>
  %75 = extractelement <4 x i32> %74, i32 0
  %76 = bitcast i8* %40 to i32*
  store i32 %75, i32* %76, align 1
  %77 = getelementptr inbounds i8, i8* %40, i64 %30
  %78 = getelementptr inbounds i8, i8* %39, i64 %31
  %79 = getelementptr inbounds i8, i8* %38, i64 %32
  %80 = getelementptr inbounds i8, i8* %37, i64 %34
  %81 = add nsw i32 %36, -1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %805, label %35

83:                                               ; preds = %83, %21
  %84 = phi i32 [ %125, %83 ], [ %9, %21 ]
  %85 = phi i8* [ %124, %83 ], [ %6, %21 ]
  %86 = phi i8* [ %123, %83 ], [ %4, %21 ]
  %87 = phi i8* [ %122, %83 ], [ %2, %21 ]
  %88 = phi i8* [ %121, %83 ], [ %0, %21 ]
  %89 = bitcast i8* %85 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 %22
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = add <16 x i8> %93, %90
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = shufflevector <16 x i8> %95, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %97 = zext <8 x i8> %96 to <8 x i16>
  %98 = shufflevector <16 x i8> %95, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %99 = zext <8 x i8> %98 to <8 x i16>
  %100 = add nuw nsw <8 x i16> %99, %97
  %101 = lshr <8 x i16> %100, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %102 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %101, <8 x i16> zeroinitializer) #4
  %103 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %102) #4
  %104 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %103
  %105 = bitcast i8* %87 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = bitcast i8* %86 to i64*
  %109 = load i64, i64* %108, align 1
  %110 = insertelement <2 x i64> undef, i64 %109, i32 0
  %111 = bitcast <2 x i64> %107 to <16 x i8>
  %112 = bitcast <2 x i64> %110 to <16 x i8>
  %113 = shufflevector <16 x i8> %111, <16 x i8> %112, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = shufflevector <16 x i8> %103, <16 x i8> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %113, <16 x i8> %114) #4
  %116 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %115, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %117 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> undef) #4
  %118 = bitcast <16 x i8> %117 to <2 x i64>
  %119 = extractelement <2 x i64> %118, i32 0
  %120 = bitcast i8* %88 to i64*
  store i64 %119, i64* %120, align 1
  %121 = getelementptr inbounds i8, i8* %88, i64 %23
  %122 = getelementptr inbounds i8, i8* %87, i64 %24
  %123 = getelementptr inbounds i8, i8* %86, i64 %25
  %124 = getelementptr inbounds i8, i8* %85, i64 %27
  %125 = add nsw i32 %84, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %805, label %83

127:                                              ; preds = %20
  %128 = zext i32 %7 to i64
  %129 = zext i32 %1 to i64
  %130 = zext i32 %3 to i64
  %131 = zext i32 %5 to i64
  %132 = shl i32 %7, 1
  %133 = zext i32 %132 to i64
  br label %134

134:                                              ; preds = %134, %127
  %135 = phi i32 [ %9, %127 ], [ %177, %134 ]
  %136 = phi i8* [ %6, %127 ], [ %176, %134 ]
  %137 = phi i8* [ %4, %127 ], [ %175, %134 ]
  %138 = phi i8* [ %2, %127 ], [ %174, %134 ]
  %139 = phi i8* [ %0, %127 ], [ %173, %134 ]
  %140 = bitcast i8* %136 to <32 x i8>*
  %141 = load <32 x i8>, <32 x i8>* %140, align 1
  %142 = getelementptr inbounds i8, i8* %136, i64 %128
  %143 = bitcast i8* %142 to <32 x i8>*
  %144 = load <32 x i8>, <32 x i8>* %143, align 1
  %145 = add <32 x i8> %144, %141
  %146 = shufflevector <32 x i8> %145, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48>
  %147 = bitcast <32 x i8> %145 to <16 x i16>
  %148 = and <16 x i16> %147, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %149 = bitcast <32 x i8> %146 to <16 x i16>
  %150 = and <16 x i16> %149, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %151 = add nuw nsw <16 x i16> %150, %148
  %152 = lshr <16 x i16> %151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %153 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %152, <16 x i16> zeroinitializer) #4
  %154 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %153, <16 x i16> %153) #4
  %155 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %154
  %156 = bitcast i8* %138 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 1
  %158 = bitcast i8* %137 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 1
  %160 = shufflevector <2 x i64> %157, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 1, i32 undef>
  %161 = shufflevector <2 x i64> %159, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 1, i32 undef>
  %162 = bitcast <4 x i64> %160 to <32 x i8>
  %163 = bitcast <4 x i64> %161 to <32 x i8>
  %164 = shufflevector <32 x i8> %162, <32 x i8> %163, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %165 = shufflevector <32 x i8> %154, <32 x i8> %155, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %166 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %164, <32 x i8> %165) #4
  %167 = lshr <16 x i16> %166, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %168 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %167, <16 x i16> zeroinitializer) #4
  %169 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %168, <16 x i16> undef) #4
  %170 = bitcast <32 x i8> %169 to <4 x i64>
  %171 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  %172 = bitcast i8* %139 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %172, align 1
  %173 = getelementptr inbounds i8, i8* %139, i64 %129
  %174 = getelementptr inbounds i8, i8* %138, i64 %130
  %175 = getelementptr inbounds i8, i8* %137, i64 %131
  %176 = getelementptr inbounds i8, i8* %136, i64 %133
  %177 = add nsw i32 %135, -1
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %805, label %134

179:                                              ; preds = %20
  %180 = zext i32 %1 to i64
  %181 = icmp sgt i32 %8, 0
  %182 = zext i32 %7 to i64
  %183 = zext i32 %3 to i64
  %184 = zext i32 %5 to i64
  %185 = shl i32 %7, 1
  %186 = zext i32 %185 to i64
  %187 = sext i32 %8 to i64
  br label %188

188:                                              ; preds = %255, %179
  %189 = phi i32 [ %9, %179 ], [ %260, %255 ]
  %190 = phi i8* [ %6, %179 ], [ %259, %255 ]
  %191 = phi i8* [ %4, %179 ], [ %258, %255 ]
  %192 = phi i8* [ %2, %179 ], [ %257, %255 ]
  %193 = phi i8* [ %0, %179 ], [ %256, %255 ]
  br i1 %181, label %194, label %255

194:                                              ; preds = %188
  %195 = getelementptr inbounds i8, i8* %190, i64 %182
  br label %196

196:                                              ; preds = %196, %194
  %197 = phi i64 [ 0, %194 ], [ %253, %196 ]
  %198 = shl nuw nsw i64 %197, 1
  %199 = getelementptr inbounds i8, i8* %190, i64 %198
  %200 = bitcast i8* %199 to <32 x i8>*
  %201 = load <32 x i8>, <32 x i8>* %200, align 1
  %202 = getelementptr inbounds i8, i8* %199, i64 32
  %203 = bitcast i8* %202 to <32 x i8>*
  %204 = load <32 x i8>, <32 x i8>* %203, align 1
  %205 = getelementptr inbounds i8, i8* %195, i64 %198
  %206 = bitcast i8* %205 to <32 x i8>*
  %207 = load <32 x i8>, <32 x i8>* %206, align 1
  %208 = getelementptr inbounds i8, i8* %205, i64 32
  %209 = bitcast i8* %208 to <32 x i8>*
  %210 = load <32 x i8>, <32 x i8>* %209, align 1
  %211 = add <32 x i8> %207, %201
  %212 = add <32 x i8> %210, %204
  %213 = shufflevector <32 x i8> %211, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48>
  %214 = shufflevector <32 x i8> %212, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48>
  %215 = bitcast <32 x i8> %211 to <16 x i16>
  %216 = and <16 x i16> %215, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %217 = bitcast <32 x i8> %213 to <16 x i16>
  %218 = and <16 x i16> %217, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %219 = add nuw nsw <16 x i16> %218, %216
  %220 = bitcast <32 x i8> %212 to <16 x i16>
  %221 = and <16 x i16> %220, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %222 = bitcast <32 x i8> %214 to <16 x i16>
  %223 = and <16 x i16> %222, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %224 = add nuw nsw <16 x i16> %223, %221
  %225 = lshr <16 x i16> %219, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %226 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %225, <16 x i16> zeroinitializer) #4
  %227 = lshr <16 x i16> %224, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %228 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %227, <16 x i16> zeroinitializer) #4
  %229 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %226, <16 x i16> %228) #4
  %230 = bitcast <32 x i8> %229 to <4 x i64>
  %231 = shufflevector <4 x i64> %230, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %232 = bitcast <4 x i64> %231 to <32 x i8>
  %233 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %232
  %234 = getelementptr inbounds i8, i8* %192, i64 %197
  %235 = getelementptr inbounds i8, i8* %191, i64 %197
  %236 = bitcast i8* %234 to <32 x i8>*
  %237 = load <32 x i8>, <32 x i8>* %236, align 1
  %238 = bitcast i8* %235 to <32 x i8>*
  %239 = load <32 x i8>, <32 x i8>* %238, align 1
  %240 = shufflevector <32 x i8> %237, <32 x i8> %239, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %241 = shufflevector <32 x i8> %232, <32 x i8> %233, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %242 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %240, <32 x i8> %241) #4
  %243 = shufflevector <32 x i8> %237, <32 x i8> %239, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %244 = shufflevector <32 x i8> %232, <32 x i8> %233, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %245 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %243, <32 x i8> %244) #4
  %246 = lshr <16 x i16> %242, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %247 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %246, <16 x i16> zeroinitializer) #4
  %248 = lshr <16 x i16> %245, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %249 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %248, <16 x i16> zeroinitializer) #4
  %250 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %247, <16 x i16> %249) #4
  %251 = getelementptr inbounds i8, i8* %193, i64 %197
  %252 = bitcast i8* %251 to <32 x i8>*
  store <32 x i8> %250, <32 x i8>* %252, align 1
  %253 = add nuw nsw i64 %197, 32
  %254 = icmp slt i64 %253, %187
  br i1 %254, label %196, label %255

255:                                              ; preds = %196, %188
  %256 = getelementptr inbounds i8, i8* %193, i64 %180
  %257 = getelementptr inbounds i8, i8* %192, i64 %183
  %258 = getelementptr inbounds i8, i8* %191, i64 %184
  %259 = getelementptr inbounds i8, i8* %190, i64 %186
  %260 = add nsw i32 %189, -1
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %805, label %188

262:                                              ; preds = %17
  %263 = icmp eq i32 %10, 0
  br i1 %263, label %457, label %264

264:                                              ; preds = %262
  switch i32 %8, label %395 [
    i32 4, label %270
    i32 8, label %265
    i32 16, label %353
  ]

265:                                              ; preds = %264
  %266 = zext i32 %1 to i64
  %267 = zext i32 %3 to i64
  %268 = zext i32 %5 to i64
  %269 = zext i32 %7 to i64
  br label %315

270:                                              ; preds = %264
  %271 = zext i32 %1 to i64
  %272 = zext i32 %3 to i64
  %273 = zext i32 %5 to i64
  %274 = zext i32 %7 to i64
  br label %275

275:                                              ; preds = %275, %270
  %276 = phi i32 [ %313, %275 ], [ %9, %270 ]
  %277 = phi i8* [ %312, %275 ], [ %6, %270 ]
  %278 = phi i8* [ %311, %275 ], [ %4, %270 ]
  %279 = phi i8* [ %310, %275 ], [ %2, %270 ]
  %280 = phi i8* [ %309, %275 ], [ %0, %270 ]
  %281 = bitcast i8* %277 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %282, i32 0
  %284 = bitcast <2 x i64> %283 to <16 x i8>
  %285 = shufflevector <16 x i8> %284, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %286 = bitcast <16 x i8> %285 to <2 x i64>
  %287 = shufflevector <2 x i64> %286, <2 x i64> undef, <2 x i32> zeroinitializer
  %288 = shufflevector <2 x i64> %286, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %289 = bitcast <2 x i64> %287 to <16 x i8>
  %290 = bitcast <2 x i64> %288 to <16 x i8>
  %291 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %289, <16 x i8> %290) #4
  %292 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %291
  %293 = bitcast i8* %279 to i32*
  %294 = load i32, i32* %293, align 1
  %295 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %294, i32 0
  %296 = bitcast i8* %278 to i32*
  %297 = load i32, i32* %296, align 1
  %298 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %297, i32 0
  %299 = bitcast <4 x i32> %295 to <16 x i8>
  %300 = bitcast <4 x i32> %298 to <16 x i8>
  %301 = shufflevector <16 x i8> %299, <16 x i8> %300, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %302 = shufflevector <16 x i8> %291, <16 x i8> %292, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %303 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %301, <16 x i8> %302) #4
  %304 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %303, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %305 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %304, <8 x i16> undef) #4
  %306 = bitcast <16 x i8> %305 to <4 x i32>
  %307 = extractelement <4 x i32> %306, i32 0
  %308 = bitcast i8* %280 to i32*
  store i32 %307, i32* %308, align 1
  %309 = getelementptr inbounds i8, i8* %280, i64 %271
  %310 = getelementptr inbounds i8, i8* %279, i64 %272
  %311 = getelementptr inbounds i8, i8* %278, i64 %273
  %312 = getelementptr inbounds i8, i8* %277, i64 %274
  %313 = add nsw i32 %276, -1
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %805, label %275

315:                                              ; preds = %315, %265
  %316 = phi i32 [ %351, %315 ], [ %9, %265 ]
  %317 = phi i8* [ %350, %315 ], [ %6, %265 ]
  %318 = phi i8* [ %349, %315 ], [ %4, %265 ]
  %319 = phi i8* [ %348, %315 ], [ %2, %265 ]
  %320 = phi i8* [ %347, %315 ], [ %0, %265 ]
  %321 = bitcast i8* %317 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1
  %323 = shufflevector <16 x i8> %322, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %324 = bitcast <16 x i8> %323 to <2 x i64>
  %325 = shufflevector <2 x i64> %324, <2 x i64> undef, <2 x i32> zeroinitializer
  %326 = shufflevector <2 x i64> %324, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %327 = bitcast <2 x i64> %325 to <16 x i8>
  %328 = bitcast <2 x i64> %326 to <16 x i8>
  %329 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %327, <16 x i8> %328) #4
  %330 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %329
  %331 = bitcast i8* %319 to i64*
  %332 = load i64, i64* %331, align 1
  %333 = insertelement <2 x i64> undef, i64 %332, i32 0
  %334 = bitcast i8* %318 to i64*
  %335 = load i64, i64* %334, align 1
  %336 = insertelement <2 x i64> undef, i64 %335, i32 0
  %337 = bitcast <2 x i64> %333 to <16 x i8>
  %338 = bitcast <2 x i64> %336 to <16 x i8>
  %339 = shufflevector <16 x i8> %337, <16 x i8> %338, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %340 = shufflevector <16 x i8> %329, <16 x i8> %330, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %341 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %339, <16 x i8> %340) #4
  %342 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %341, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %343 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %342, <8 x i16> undef) #4
  %344 = bitcast <16 x i8> %343 to <2 x i64>
  %345 = extractelement <2 x i64> %344, i32 0
  %346 = bitcast i8* %320 to i64*
  store i64 %345, i64* %346, align 1
  %347 = getelementptr inbounds i8, i8* %320, i64 %266
  %348 = getelementptr inbounds i8, i8* %319, i64 %267
  %349 = getelementptr inbounds i8, i8* %318, i64 %268
  %350 = getelementptr inbounds i8, i8* %317, i64 %269
  %351 = add nsw i32 %316, -1
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %805, label %315

353:                                              ; preds = %264
  %354 = zext i32 %1 to i64
  %355 = zext i32 %3 to i64
  %356 = zext i32 %5 to i64
  %357 = zext i32 %7 to i64
  br label %358

358:                                              ; preds = %358, %353
  %359 = phi i32 [ %9, %353 ], [ %393, %358 ]
  %360 = phi i8* [ %6, %353 ], [ %392, %358 ]
  %361 = phi i8* [ %4, %353 ], [ %391, %358 ]
  %362 = phi i8* [ %2, %353 ], [ %390, %358 ]
  %363 = phi i8* [ %0, %353 ], [ %389, %358 ]
  %364 = bitcast i8* %360 to <32 x i8>*
  %365 = load <32 x i8>, <32 x i8>* %364, align 1
  %366 = shufflevector <32 x i8> %365, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48>
  %367 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %365, <32 x i8> %366) #4
  %368 = bitcast <32 x i8> %367 to <16 x i16>
  %369 = and <16 x i16> %368, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %370 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %369, <16 x i16> zeroinitializer) #4
  %371 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %370
  %372 = bitcast i8* %362 to <2 x i64>*
  %373 = load <2 x i64>, <2 x i64>* %372, align 1
  %374 = bitcast i8* %361 to <2 x i64>*
  %375 = load <2 x i64>, <2 x i64>* %374, align 1
  %376 = shufflevector <2 x i64> %373, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 1, i32 undef>
  %377 = shufflevector <2 x i64> %375, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 1, i32 undef>
  %378 = bitcast <4 x i64> %376 to <32 x i8>
  %379 = bitcast <4 x i64> %377 to <32 x i8>
  %380 = shufflevector <32 x i8> %378, <32 x i8> %379, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %381 = shufflevector <32 x i8> %370, <32 x i8> %371, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %382 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %380, <32 x i8> %381) #4
  %383 = lshr <16 x i16> %382, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %384 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %383, <16 x i16> zeroinitializer) #4
  %385 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %384, <16 x i16> undef) #4
  %386 = bitcast <32 x i8> %385 to <4 x i64>
  %387 = shufflevector <4 x i64> %386, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  %388 = bitcast i8* %363 to <2 x i64>*
  store <2 x i64> %387, <2 x i64>* %388, align 1
  %389 = getelementptr inbounds i8, i8* %363, i64 %354
  %390 = getelementptr inbounds i8, i8* %362, i64 %355
  %391 = getelementptr inbounds i8, i8* %361, i64 %356
  %392 = getelementptr inbounds i8, i8* %360, i64 %357
  %393 = add nsw i32 %359, -1
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %805, label %358

395:                                              ; preds = %264
  %396 = zext i32 %1 to i64
  %397 = icmp sgt i32 %8, 0
  %398 = zext i32 %3 to i64
  %399 = zext i32 %5 to i64
  %400 = zext i32 %7 to i64
  %401 = sext i32 %8 to i64
  br label %402

402:                                              ; preds = %450, %395
  %403 = phi i32 [ %9, %395 ], [ %455, %450 ]
  %404 = phi i8* [ %6, %395 ], [ %454, %450 ]
  %405 = phi i8* [ %4, %395 ], [ %453, %450 ]
  %406 = phi i8* [ %2, %395 ], [ %452, %450 ]
  %407 = phi i8* [ %0, %395 ], [ %451, %450 ]
  br i1 %397, label %408, label %450

408:                                              ; preds = %402, %408
  %409 = phi i64 [ %448, %408 ], [ 0, %402 ]
  %410 = shl nuw nsw i64 %409, 1
  %411 = getelementptr inbounds i8, i8* %404, i64 %410
  %412 = bitcast i8* %411 to <32 x i8>*
  %413 = load <32 x i8>, <32 x i8>* %412, align 1
  %414 = getelementptr inbounds i8, i8* %411, i64 32
  %415 = bitcast i8* %414 to <32 x i8>*
  %416 = load <32 x i8>, <32 x i8>* %415, align 1
  %417 = shufflevector <32 x i8> %413, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %418 = shufflevector <32 x i8> %416, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %419 = shufflevector <32 x i8> %417, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %420 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %417, <32 x i8> %419) #4
  %421 = bitcast <32 x i8> %420 to <4 x i64>
  %422 = shufflevector <32 x i8> %418, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %423 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %418, <32 x i8> %422) #4
  %424 = bitcast <32 x i8> %423 to <4 x i64>
  %425 = shufflevector <4 x i64> %421, <4 x i64> %424, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %426 = shufflevector <4 x i64> %425, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %427 = bitcast <4 x i64> %426 to <32 x i8>
  %428 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %427
  %429 = getelementptr inbounds i8, i8* %406, i64 %409
  %430 = getelementptr inbounds i8, i8* %405, i64 %409
  %431 = bitcast i8* %429 to <32 x i8>*
  %432 = load <32 x i8>, <32 x i8>* %431, align 1
  %433 = bitcast i8* %430 to <32 x i8>*
  %434 = load <32 x i8>, <32 x i8>* %433, align 1
  %435 = shufflevector <32 x i8> %432, <32 x i8> %434, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %436 = shufflevector <32 x i8> %427, <32 x i8> %428, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %437 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %435, <32 x i8> %436) #4
  %438 = shufflevector <32 x i8> %432, <32 x i8> %434, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %439 = shufflevector <32 x i8> %427, <32 x i8> %428, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %440 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %438, <32 x i8> %439) #4
  %441 = lshr <16 x i16> %437, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %442 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %441, <16 x i16> zeroinitializer) #4
  %443 = lshr <16 x i16> %440, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %444 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %443, <16 x i16> zeroinitializer) #4
  %445 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %442, <16 x i16> %444) #4
  %446 = getelementptr inbounds i8, i8* %407, i64 %409
  %447 = bitcast i8* %446 to <32 x i8>*
  store <32 x i8> %445, <32 x i8>* %447, align 1
  %448 = add nuw nsw i64 %409, 32
  %449 = icmp slt i64 %448, %401
  br i1 %449, label %408, label %450

450:                                              ; preds = %408, %402
  %451 = getelementptr inbounds i8, i8* %407, i64 %396
  %452 = getelementptr inbounds i8, i8* %406, i64 %398
  %453 = getelementptr inbounds i8, i8* %405, i64 %399
  %454 = getelementptr inbounds i8, i8* %404, i64 %400
  %455 = add nsw i32 %403, -1
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %805, label %402

457:                                              ; preds = %262
  %458 = icmp eq i32 %11, 0
  br i1 %458, label %647, label %459

459:                                              ; preds = %457
  switch i32 %8, label %594 [
    i32 4, label %467
    i32 8, label %460
    i32 16, label %552
  ]

460:                                              ; preds = %459
  %461 = zext i32 %7 to i64
  %462 = zext i32 %1 to i64
  %463 = zext i32 %3 to i64
  %464 = zext i32 %5 to i64
  %465 = shl i32 %7, 1
  %466 = zext i32 %465 to i64
  br label %513

467:                                              ; preds = %459
  %468 = zext i32 %7 to i64
  %469 = zext i32 %1 to i64
  %470 = zext i32 %3 to i64
  %471 = zext i32 %5 to i64
  %472 = shl i32 %7, 1
  %473 = zext i32 %472 to i64
  br label %474

474:                                              ; preds = %474, %467
  %475 = phi i32 [ %511, %474 ], [ %9, %467 ]
  %476 = phi i8* [ %510, %474 ], [ %6, %467 ]
  %477 = phi i8* [ %509, %474 ], [ %4, %467 ]
  %478 = phi i8* [ %508, %474 ], [ %2, %467 ]
  %479 = phi i8* [ %507, %474 ], [ %0, %467 ]
  %480 = bitcast i8* %476 to i32*
  %481 = load i32, i32* %480, align 1
  %482 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %481, i32 0
  %483 = getelementptr inbounds i8, i8* %476, i64 %468
  %484 = bitcast i8* %483 to i32*
  %485 = load i32, i32* %484, align 1
  %486 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %485, i32 0
  %487 = bitcast <4 x i32> %482 to <16 x i8>
  %488 = bitcast <4 x i32> %486 to <16 x i8>
  %489 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %487, <16 x i8> %488) #4
  %490 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %489
  %491 = bitcast i8* %478 to i32*
  %492 = load i32, i32* %491, align 1
  %493 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %492, i32 0
  %494 = bitcast i8* %477 to i32*
  %495 = load i32, i32* %494, align 1
  %496 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %495, i32 0
  %497 = bitcast <4 x i32> %493 to <16 x i8>
  %498 = bitcast <4 x i32> %496 to <16 x i8>
  %499 = shufflevector <16 x i8> %497, <16 x i8> %498, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %500 = shufflevector <16 x i8> %489, <16 x i8> %490, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %501 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %499, <16 x i8> %500) #4
  %502 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %501, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %503 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %502, <8 x i16> undef) #4
  %504 = bitcast <16 x i8> %503 to <4 x i32>
  %505 = extractelement <4 x i32> %504, i32 0
  %506 = bitcast i8* %479 to i32*
  store i32 %505, i32* %506, align 1
  %507 = getelementptr inbounds i8, i8* %479, i64 %469
  %508 = getelementptr inbounds i8, i8* %478, i64 %470
  %509 = getelementptr inbounds i8, i8* %477, i64 %471
  %510 = getelementptr inbounds i8, i8* %476, i64 %473
  %511 = add nsw i32 %475, -1
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %805, label %474

513:                                              ; preds = %513, %460
  %514 = phi i32 [ %550, %513 ], [ %9, %460 ]
  %515 = phi i8* [ %549, %513 ], [ %6, %460 ]
  %516 = phi i8* [ %548, %513 ], [ %4, %460 ]
  %517 = phi i8* [ %547, %513 ], [ %2, %460 ]
  %518 = phi i8* [ %546, %513 ], [ %0, %460 ]
  %519 = bitcast i8* %515 to i64*
  %520 = load i64, i64* %519, align 1
  %521 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %520, i32 0
  %522 = getelementptr inbounds i8, i8* %515, i64 %461
  %523 = bitcast i8* %522 to i64*
  %524 = load i64, i64* %523, align 1
  %525 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %524, i32 0
  %526 = bitcast <2 x i64> %521 to <16 x i8>
  %527 = bitcast <2 x i64> %525 to <16 x i8>
  %528 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %526, <16 x i8> %527) #4
  %529 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %528
  %530 = bitcast i8* %517 to i64*
  %531 = load i64, i64* %530, align 1
  %532 = insertelement <2 x i64> undef, i64 %531, i32 0
  %533 = bitcast i8* %516 to i64*
  %534 = load i64, i64* %533, align 1
  %535 = insertelement <2 x i64> undef, i64 %534, i32 0
  %536 = bitcast <2 x i64> %532 to <16 x i8>
  %537 = bitcast <2 x i64> %535 to <16 x i8>
  %538 = shufflevector <16 x i8> %536, <16 x i8> %537, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %539 = shufflevector <16 x i8> %528, <16 x i8> %529, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %540 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %538, <16 x i8> %539) #4
  %541 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %540, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %542 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %541, <8 x i16> undef) #4
  %543 = bitcast <16 x i8> %542 to <2 x i64>
  %544 = extractelement <2 x i64> %543, i32 0
  %545 = bitcast i8* %518 to i64*
  store i64 %544, i64* %545, align 1
  %546 = getelementptr inbounds i8, i8* %518, i64 %462
  %547 = getelementptr inbounds i8, i8* %517, i64 %463
  %548 = getelementptr inbounds i8, i8* %516, i64 %464
  %549 = getelementptr inbounds i8, i8* %515, i64 %466
  %550 = add nsw i32 %514, -1
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %805, label %513

552:                                              ; preds = %459
  %553 = zext i32 %7 to i64
  %554 = zext i32 %1 to i64
  %555 = zext i32 %3 to i64
  %556 = zext i32 %5 to i64
  %557 = shl i32 %7, 1
  %558 = zext i32 %557 to i64
  br label %559

559:                                              ; preds = %559, %552
  %560 = phi i8* [ %6, %552 ], [ %591, %559 ]
  %561 = phi i32 [ %9, %552 ], [ %592, %559 ]
  %562 = phi i8* [ %4, %552 ], [ %590, %559 ]
  %563 = phi i8* [ %2, %552 ], [ %589, %559 ]
  %564 = phi i8* [ %0, %552 ], [ %588, %559 ]
  %565 = bitcast i8* %560 to <16 x i8>*
  %566 = load <16 x i8>, <16 x i8>* %565, align 1
  %567 = getelementptr inbounds i8, i8* %560, i64 %553
  %568 = bitcast i8* %567 to <16 x i8>*
  %569 = load <16 x i8>, <16 x i8>* %568, align 1
  %570 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %566, <16 x i8> %569) #4
  %571 = bitcast <16 x i8> %570 to <8 x i16>
  %572 = sub <8 x i16> <i16 16448, i16 16448, i16 16448, i16 16448, i16 16448, i16 16448, i16 16448, i16 16448>, %571
  %573 = bitcast i8* %563 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1
  %575 = bitcast i8* %562 to <16 x i8>*
  %576 = load <16 x i8>, <16 x i8>* %575, align 1
  %577 = shufflevector <16 x i8> %574, <16 x i8> %576, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %578 = bitcast <8 x i16> %572 to <16 x i8>
  %579 = shufflevector <16 x i8> %570, <16 x i8> %578, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %580 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %577, <16 x i8> %579) #4
  %581 = shufflevector <16 x i8> %574, <16 x i8> %576, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %582 = shufflevector <16 x i8> %570, <16 x i8> %578, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %583 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %581, <16 x i8> %582) #4
  %584 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %580, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %585 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %583, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %586 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %584, <8 x i16> %585) #4
  %587 = bitcast i8* %564 to <16 x i8>*
  store <16 x i8> %586, <16 x i8>* %587, align 1
  %588 = getelementptr inbounds i8, i8* %564, i64 %554
  %589 = getelementptr inbounds i8, i8* %563, i64 %555
  %590 = getelementptr inbounds i8, i8* %562, i64 %556
  %591 = getelementptr inbounds i8, i8* %560, i64 %558
  %592 = add nsw i32 %561, -1
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %805, label %559

594:                                              ; preds = %459
  %595 = zext i32 %1 to i64
  %596 = icmp sgt i32 %8, 0
  %597 = zext i32 %7 to i64
  %598 = zext i32 %3 to i64
  %599 = zext i32 %5 to i64
  %600 = shl i32 %7, 1
  %601 = zext i32 %600 to i64
  %602 = sext i32 %8 to i64
  br label %603

603:                                              ; preds = %640, %594
  %604 = phi i8* [ %6, %594 ], [ %644, %640 ]
  %605 = phi i32 [ %9, %594 ], [ %645, %640 ]
  %606 = phi i8* [ %4, %594 ], [ %643, %640 ]
  %607 = phi i8* [ %2, %594 ], [ %642, %640 ]
  %608 = phi i8* [ %0, %594 ], [ %641, %640 ]
  br i1 %596, label %609, label %640

609:                                              ; preds = %603, %609
  %610 = phi i64 [ %638, %609 ], [ 0, %603 ]
  %611 = getelementptr inbounds i8, i8* %604, i64 %610
  %612 = bitcast i8* %611 to <32 x i8>*
  %613 = load <32 x i8>, <32 x i8>* %612, align 1
  %614 = getelementptr inbounds i8, i8* %611, i64 %597
  %615 = bitcast i8* %614 to <32 x i8>*
  %616 = load <32 x i8>, <32 x i8>* %615, align 1
  %617 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %613, <32 x i8> %616) #4
  %618 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %617
  %619 = getelementptr inbounds i8, i8* %607, i64 %610
  %620 = getelementptr inbounds i8, i8* %606, i64 %610
  %621 = bitcast i8* %619 to <32 x i8>*
  %622 = load <32 x i8>, <32 x i8>* %621, align 1
  %623 = bitcast i8* %620 to <32 x i8>*
  %624 = load <32 x i8>, <32 x i8>* %623, align 1
  %625 = shufflevector <32 x i8> %622, <32 x i8> %624, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %626 = shufflevector <32 x i8> %617, <32 x i8> %618, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %627 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %625, <32 x i8> %626) #4
  %628 = shufflevector <32 x i8> %622, <32 x i8> %624, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %629 = shufflevector <32 x i8> %617, <32 x i8> %618, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %630 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %628, <32 x i8> %629) #4
  %631 = lshr <16 x i16> %627, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %632 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %631, <16 x i16> zeroinitializer) #4
  %633 = lshr <16 x i16> %630, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %634 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %633, <16 x i16> zeroinitializer) #4
  %635 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %632, <16 x i16> %634) #4
  %636 = getelementptr inbounds i8, i8* %608, i64 %610
  %637 = bitcast i8* %636 to <32 x i8>*
  store <32 x i8> %635, <32 x i8>* %637, align 1
  %638 = add nuw nsw i64 %610, 32
  %639 = icmp slt i64 %638, %602
  br i1 %639, label %609, label %640

640:                                              ; preds = %609, %603
  %641 = getelementptr inbounds i8, i8* %608, i64 %595
  %642 = getelementptr inbounds i8, i8* %607, i64 %598
  %643 = getelementptr inbounds i8, i8* %606, i64 %599
  %644 = getelementptr inbounds i8, i8* %604, i64 %601
  %645 = add nsw i32 %605, -1
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %805, label %603

647:                                              ; preds = %457
  switch i32 %8, label %758 [
    i32 4, label %658
    i32 8, label %653
    i32 16, label %648
  ]

648:                                              ; preds = %647
  %649 = zext i32 %1 to i64
  %650 = zext i32 %3 to i64
  %651 = zext i32 %5 to i64
  %652 = zext i32 %7 to i64
  br label %729

653:                                              ; preds = %647
  %654 = zext i32 %1 to i64
  %655 = zext i32 %3 to i64
  %656 = zext i32 %5 to i64
  %657 = zext i32 %7 to i64
  br label %696

658:                                              ; preds = %647
  %659 = zext i32 %1 to i64
  %660 = zext i32 %3 to i64
  %661 = zext i32 %5 to i64
  %662 = zext i32 %7 to i64
  br label %663

663:                                              ; preds = %663, %658
  %664 = phi i8* [ %693, %663 ], [ %6, %658 ]
  %665 = phi i32 [ %694, %663 ], [ %9, %658 ]
  %666 = phi i8* [ %692, %663 ], [ %4, %658 ]
  %667 = phi i8* [ %691, %663 ], [ %2, %658 ]
  %668 = phi i8* [ %690, %663 ], [ %0, %658 ]
  %669 = bitcast i8* %664 to i32*
  %670 = load i32, i32* %669, align 1
  %671 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %670, i32 0
  %672 = bitcast <4 x i32> %671 to <16 x i8>
  %673 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %672
  %674 = bitcast i8* %667 to i32*
  %675 = load i32, i32* %674, align 1
  %676 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %675, i32 0
  %677 = bitcast i8* %666 to i32*
  %678 = load i32, i32* %677, align 1
  %679 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %678, i32 0
  %680 = bitcast <4 x i32> %676 to <16 x i8>
  %681 = bitcast <4 x i32> %679 to <16 x i8>
  %682 = shufflevector <16 x i8> %680, <16 x i8> %681, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %683 = shufflevector <16 x i8> %672, <16 x i8> %673, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %684 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %682, <16 x i8> %683) #4
  %685 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %684, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %686 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %685, <8 x i16> undef) #4
  %687 = bitcast <16 x i8> %686 to <4 x i32>
  %688 = extractelement <4 x i32> %687, i32 0
  %689 = bitcast i8* %668 to i32*
  store i32 %688, i32* %689, align 1
  %690 = getelementptr inbounds i8, i8* %668, i64 %659
  %691 = getelementptr inbounds i8, i8* %667, i64 %660
  %692 = getelementptr inbounds i8, i8* %666, i64 %661
  %693 = getelementptr inbounds i8, i8* %664, i64 %662
  %694 = add nsw i32 %665, -1
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %805, label %663

696:                                              ; preds = %696, %653
  %697 = phi i8* [ %726, %696 ], [ %6, %653 ]
  %698 = phi i32 [ %727, %696 ], [ %9, %653 ]
  %699 = phi i8* [ %725, %696 ], [ %4, %653 ]
  %700 = phi i8* [ %724, %696 ], [ %2, %653 ]
  %701 = phi i8* [ %723, %696 ], [ %0, %653 ]
  %702 = bitcast i8* %697 to i64*
  %703 = load i64, i64* %702, align 1
  %704 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %703, i32 0
  %705 = bitcast <2 x i64> %704 to <16 x i8>
  %706 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %705
  %707 = bitcast i8* %700 to i64*
  %708 = load i64, i64* %707, align 1
  %709 = insertelement <2 x i64> undef, i64 %708, i32 0
  %710 = bitcast i8* %699 to i64*
  %711 = load i64, i64* %710, align 1
  %712 = insertelement <2 x i64> undef, i64 %711, i32 0
  %713 = bitcast <2 x i64> %709 to <16 x i8>
  %714 = bitcast <2 x i64> %712 to <16 x i8>
  %715 = shufflevector <16 x i8> %713, <16 x i8> %714, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %716 = shufflevector <16 x i8> %705, <16 x i8> %706, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %717 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %715, <16 x i8> %716) #4
  %718 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %717, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %719 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %718, <8 x i16> undef) #4
  %720 = bitcast <16 x i8> %719 to <2 x i64>
  %721 = extractelement <2 x i64> %720, i32 0
  %722 = bitcast i8* %701 to i64*
  store i64 %721, i64* %722, align 1
  %723 = getelementptr inbounds i8, i8* %701, i64 %654
  %724 = getelementptr inbounds i8, i8* %700, i64 %655
  %725 = getelementptr inbounds i8, i8* %699, i64 %656
  %726 = getelementptr inbounds i8, i8* %697, i64 %657
  %727 = add nsw i32 %698, -1
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %805, label %696

729:                                              ; preds = %729, %648
  %730 = phi i8* [ %755, %729 ], [ %6, %648 ]
  %731 = phi i32 [ %756, %729 ], [ %9, %648 ]
  %732 = phi i8* [ %754, %729 ], [ %4, %648 ]
  %733 = phi i8* [ %753, %729 ], [ %2, %648 ]
  %734 = phi i8* [ %752, %729 ], [ %0, %648 ]
  %735 = bitcast i8* %730 to <16 x i8>*
  %736 = load <16 x i8>, <16 x i8>* %735, align 1
  %737 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %736
  %738 = bitcast i8* %733 to <16 x i8>*
  %739 = load <16 x i8>, <16 x i8>* %738, align 1
  %740 = bitcast i8* %732 to <16 x i8>*
  %741 = load <16 x i8>, <16 x i8>* %740, align 1
  %742 = shufflevector <16 x i8> %739, <16 x i8> %741, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %743 = shufflevector <16 x i8> %736, <16 x i8> %737, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %744 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %742, <16 x i8> %743) #4
  %745 = shufflevector <16 x i8> %739, <16 x i8> %741, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %746 = shufflevector <16 x i8> %736, <16 x i8> %737, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %747 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %745, <16 x i8> %746) #4
  %748 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %744, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %749 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %747, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #4
  %750 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %748, <8 x i16> %749) #4
  %751 = bitcast i8* %734 to <16 x i8>*
  store <16 x i8> %750, <16 x i8>* %751, align 1
  %752 = getelementptr inbounds i8, i8* %734, i64 %649
  %753 = getelementptr inbounds i8, i8* %733, i64 %650
  %754 = getelementptr inbounds i8, i8* %732, i64 %651
  %755 = getelementptr inbounds i8, i8* %730, i64 %652
  %756 = add nsw i32 %731, -1
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %805, label %729

758:                                              ; preds = %647
  %759 = zext i32 %1 to i64
  %760 = icmp sgt i32 %8, 0
  %761 = zext i32 %3 to i64
  %762 = zext i32 %5 to i64
  %763 = zext i32 %7 to i64
  %764 = sext i32 %8 to i64
  br label %765

765:                                              ; preds = %798, %758
  %766 = phi i8* [ %6, %758 ], [ %802, %798 ]
  %767 = phi i8* [ %4, %758 ], [ %801, %798 ]
  %768 = phi i8* [ %2, %758 ], [ %800, %798 ]
  %769 = phi i32 [ %9, %758 ], [ %803, %798 ]
  %770 = phi i8* [ %0, %758 ], [ %799, %798 ]
  br i1 %760, label %771, label %798

771:                                              ; preds = %765, %771
  %772 = phi i64 [ %796, %771 ], [ 0, %765 ]
  %773 = getelementptr inbounds i8, i8* %766, i64 %772
  %774 = bitcast i8* %773 to <32 x i8>*
  %775 = load <32 x i8>, <32 x i8>* %774, align 1
  %776 = sub <32 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %775
  %777 = getelementptr inbounds i8, i8* %768, i64 %772
  %778 = getelementptr inbounds i8, i8* %767, i64 %772
  %779 = bitcast i8* %777 to <32 x i8>*
  %780 = load <32 x i8>, <32 x i8>* %779, align 1
  %781 = bitcast i8* %778 to <32 x i8>*
  %782 = load <32 x i8>, <32 x i8>* %781, align 1
  %783 = shufflevector <32 x i8> %780, <32 x i8> %782, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %784 = shufflevector <32 x i8> %775, <32 x i8> %776, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %785 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %783, <32 x i8> %784) #4
  %786 = shufflevector <32 x i8> %780, <32 x i8> %782, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %787 = shufflevector <32 x i8> %775, <32 x i8> %776, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %788 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %786, <32 x i8> %787) #4
  %789 = lshr <16 x i16> %785, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %790 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %789, <16 x i16> zeroinitializer) #4
  %791 = lshr <16 x i16> %788, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %792 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %791, <16 x i16> zeroinitializer) #4
  %793 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %790, <16 x i16> %792) #4
  %794 = getelementptr inbounds i8, i8* %770, i64 %772
  %795 = bitcast i8* %794 to <32 x i8>*
  store <32 x i8> %793, <32 x i8>* %795, align 1
  %796 = add nuw nsw i64 %772, 32
  %797 = icmp slt i64 %796, %764
  br i1 %797, label %771, label %798

798:                                              ; preds = %771, %765
  %799 = getelementptr inbounds i8, i8* %770, i64 %759
  %800 = getelementptr inbounds i8, i8* %768, i64 %761
  %801 = getelementptr inbounds i8, i8* %767, i64 %762
  %802 = getelementptr inbounds i8, i8* %766, i64 %763
  %803 = add nsw i32 %769, -1
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %805, label %765

805:                                              ; preds = %134, %83, %35, %255, %358, %315, %275, %450, %559, %513, %474, %640, %729, %696, %663, %798, %16
  ret void
}

declare void @aom_blend_a64_mask_c(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8>, <32 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
