; ModuleID = '../../third_party/webrtc/modules/audio_processing/vad/gmm.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/vad/gmm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.webrtc::GmmParameters" = type { double*, double*, double*, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6webrtc11EvaluateGmmEPKdRKNS_13GmmParametersE(double* nocapture readonly, %"struct.webrtc::GmmParameters"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %3 = alloca [10 x double], align 16
  %4 = bitcast [10 x double]* %3 to i8*
  %5 = getelementptr inbounds %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters"* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 10
  br i1 %7, label %267, label %8

8:                                                ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -1, i64 80, i1 false)
  %9 = getelementptr inbounds %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters"* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters"* %1, i64 0, i32 2
  %14 = load double*, double** %13, align 8
  %15 = getelementptr inbounds %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters"* %1, i64 0, i32 1
  %16 = load double*, double** %15, align 8
  %17 = getelementptr inbounds %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters"* %1, i64 0, i32 0
  br label %20

18:                                               ; preds = %249, %8
  %19 = phi double [ 0.000000e+00, %8 ], [ %256, %249 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #3
  br label %267

20:                                               ; preds = %12, %249
  %21 = phi i32 [ %6, %12 ], [ %257, %249 ]
  %22 = phi i64 [ 0, %12 ], [ %263, %249 ]
  %23 = phi double* [ %14, %12 ], [ %262, %249 ]
  %24 = phi double* [ %16, %12 ], [ %259, %249 ]
  %25 = phi double [ 0.000000e+00, %12 ], [ %256, %249 ]
  %26 = icmp sgt i32 %21, 0
  br i1 %26, label %27, label %249

27:                                               ; preds = %20
  %28 = zext i32 %21 to i64
  %29 = icmp ult i32 %21, 4
  br i1 %29, label %119, label %30

30:                                               ; preds = %27
  %31 = getelementptr [10 x double], [10 x double]* %3, i64 0, i64 %28
  %32 = getelementptr double, double* %0, i64 %28
  %33 = getelementptr double, double* %24, i64 %28
  %34 = bitcast double* %32 to [10 x double]*
  %35 = icmp ult [10 x double]* %3, %34
  %36 = icmp ugt double* %31, %0
  %37 = and i1 %35, %36
  %38 = bitcast double* %33 to [10 x double]*
  %39 = icmp ult [10 x double]* %3, %38
  %40 = icmp ult double* %24, %31
  %41 = and i1 %39, %40
  %42 = or i1 %37, %41
  br i1 %42, label %119, label %43

43:                                               ; preds = %30
  %44 = and i64 %28, 4294967292
  %45 = add nsw i64 %44, -4
  %46 = lshr exact i64 %45, 2
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %95, label %50

50:                                               ; preds = %43
  %51 = sub nuw nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %92, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %93, %52 ]
  %55 = getelementptr inbounds double, double* %0, i64 %53
  %56 = bitcast double* %55 to <2 x double>*
  %57 = load <2 x double>, <2 x double>* %56, align 8, !alias.scope !2
  %58 = getelementptr inbounds double, double* %55, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8, !alias.scope !2
  %61 = getelementptr inbounds double, double* %24, i64 %53
  %62 = bitcast double* %61 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 8, !alias.scope !5
  %64 = getelementptr inbounds double, double* %61, i64 2
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !alias.scope !5
  %67 = fsub <2 x double> %57, %63
  %68 = fsub <2 x double> %60, %66
  %69 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %53
  %70 = bitcast double* %69 to <2 x double>*
  store <2 x double> %67, <2 x double>* %70, align 16, !alias.scope !7, !noalias !9
  %71 = getelementptr inbounds double, double* %69, i64 2
  %72 = bitcast double* %71 to <2 x double>*
  store <2 x double> %68, <2 x double>* %72, align 16, !alias.scope !7, !noalias !9
  %73 = or i64 %53, 4
  %74 = getelementptr inbounds double, double* %0, i64 %73
  %75 = bitcast double* %74 to <2 x double>*
  %76 = load <2 x double>, <2 x double>* %75, align 8, !alias.scope !2
  %77 = getelementptr inbounds double, double* %74, i64 2
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8, !alias.scope !2
  %80 = getelementptr inbounds double, double* %24, i64 %73
  %81 = bitcast double* %80 to <2 x double>*
  %82 = load <2 x double>, <2 x double>* %81, align 8, !alias.scope !5
  %83 = getelementptr inbounds double, double* %80, i64 2
  %84 = bitcast double* %83 to <2 x double>*
  %85 = load <2 x double>, <2 x double>* %84, align 8, !alias.scope !5
  %86 = fsub <2 x double> %76, %82
  %87 = fsub <2 x double> %79, %85
  %88 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %73
  %89 = bitcast double* %88 to <2 x double>*
  store <2 x double> %86, <2 x double>* %89, align 16, !alias.scope !7, !noalias !9
  %90 = getelementptr inbounds double, double* %88, i64 2
  %91 = bitcast double* %90 to <2 x double>*
  store <2 x double> %87, <2 x double>* %91, align 16, !alias.scope !7, !noalias !9
  %92 = add i64 %53, 8
  %93 = add i64 %54, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %52, !llvm.loop !10

95:                                               ; preds = %52, %43
  %96 = phi i64 [ 0, %43 ], [ %92, %52 ]
  %97 = icmp eq i64 %48, 0
  br i1 %97, label %117, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds double, double* %0, i64 %96
  %100 = bitcast double* %99 to <2 x double>*
  %101 = load <2 x double>, <2 x double>* %100, align 8, !alias.scope !2
  %102 = getelementptr inbounds double, double* %99, i64 2
  %103 = bitcast double* %102 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 8, !alias.scope !2
  %105 = getelementptr inbounds double, double* %24, i64 %96
  %106 = bitcast double* %105 to <2 x double>*
  %107 = load <2 x double>, <2 x double>* %106, align 8, !alias.scope !5
  %108 = getelementptr inbounds double, double* %105, i64 2
  %109 = bitcast double* %108 to <2 x double>*
  %110 = load <2 x double>, <2 x double>* %109, align 8, !alias.scope !5
  %111 = fsub <2 x double> %101, %107
  %112 = fsub <2 x double> %104, %110
  %113 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %96
  %114 = bitcast double* %113 to <2 x double>*
  store <2 x double> %111, <2 x double>* %114, align 16, !alias.scope !7, !noalias !9
  %115 = getelementptr inbounds double, double* %113, i64 2
  %116 = bitcast double* %115 to <2 x double>*
  store <2 x double> %112, <2 x double>* %116, align 16, !alias.scope !7, !noalias !9
  br label %117

117:                                              ; preds = %95, %98
  %118 = icmp eq i64 %44, %28
  br i1 %118, label %171, label %119

119:                                              ; preds = %117, %30, %27
  %120 = phi i64 [ 0, %30 ], [ 0, %27 ], [ %44, %117 ]
  %121 = xor i64 %120, -1
  %122 = add nsw i64 %121, %28
  %123 = and i64 %28, 3
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %137, label %125

125:                                              ; preds = %119, %125
  %126 = phi i64 [ %134, %125 ], [ %120, %119 ]
  %127 = phi i64 [ %135, %125 ], [ %123, %119 ]
  %128 = getelementptr inbounds double, double* %0, i64 %126
  %129 = load double, double* %128, align 8
  %130 = getelementptr inbounds double, double* %24, i64 %126
  %131 = load double, double* %130, align 8
  %132 = fsub double %129, %131
  %133 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %126
  store double %132, double* %133, align 8
  %134 = add nuw nsw i64 %126, 1
  %135 = add i64 %127, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %125, !llvm.loop !12

137:                                              ; preds = %125, %119
  %138 = phi i64 [ %120, %119 ], [ %134, %125 ]
  %139 = icmp ult i64 %122, 3
  br i1 %139, label %171, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %169, %140 ], [ %138, %137 ]
  %142 = getelementptr inbounds double, double* %0, i64 %141
  %143 = load double, double* %142, align 8
  %144 = getelementptr inbounds double, double* %24, i64 %141
  %145 = load double, double* %144, align 8
  %146 = fsub double %143, %145
  %147 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %141
  store double %146, double* %147, align 8
  %148 = add nuw nsw i64 %141, 1
  %149 = getelementptr inbounds double, double* %0, i64 %148
  %150 = load double, double* %149, align 8
  %151 = getelementptr inbounds double, double* %24, i64 %148
  %152 = load double, double* %151, align 8
  %153 = fsub double %150, %152
  %154 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %148
  store double %153, double* %154, align 8
  %155 = add nuw nsw i64 %141, 2
  %156 = getelementptr inbounds double, double* %0, i64 %155
  %157 = load double, double* %156, align 8
  %158 = getelementptr inbounds double, double* %24, i64 %155
  %159 = load double, double* %158, align 8
  %160 = fsub double %157, %159
  %161 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %155
  store double %160, double* %161, align 8
  %162 = add nuw nsw i64 %141, 3
  %163 = getelementptr inbounds double, double* %0, i64 %162
  %164 = load double, double* %163, align 8
  %165 = getelementptr inbounds double, double* %24, i64 %162
  %166 = load double, double* %165, align 8
  %167 = fsub double %164, %166
  %168 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %162
  store double %167, double* %168, align 8
  %169 = add nuw nsw i64 %141, 4
  %170 = icmp eq i64 %169, %28
  br i1 %170, label %171, label %140, !llvm.loop !14

171:                                              ; preds = %137, %140, %117
  %172 = add nsw i32 %21, -1
  %173 = zext i32 %172 to i64
  %174 = add nuw nsw i64 %173, 1
  %175 = add nsw i64 %28, -1
  %176 = and i64 %28, 3
  %177 = icmp ult i64 %175, 3
  %178 = sub nsw i64 %28, %176
  %179 = icmp eq i64 %176, 0
  br label %180

180:                                              ; preds = %205, %171
  %181 = phi i64 [ 0, %171 ], [ %212, %205 ]
  %182 = phi double [ 0.000000e+00, %171 ], [ %211, %205 ]
  %183 = phi double* [ %23, %171 ], [ %207, %205 ]
  br i1 %177, label %186, label %214

184:                                              ; preds = %205
  %185 = fmul double %211, -5.000000e-01
  br label %249

186:                                              ; preds = %214, %180
  %187 = phi double [ undef, %180 ], [ %245, %214 ]
  %188 = phi i64 [ 0, %180 ], [ %246, %214 ]
  %189 = phi double [ 0.000000e+00, %180 ], [ %245, %214 ]
  %190 = phi double* [ %183, %180 ], [ %240, %214 ]
  br i1 %179, label %205, label %191

191:                                              ; preds = %186, %191
  %192 = phi i64 [ %202, %191 ], [ %188, %186 ]
  %193 = phi double [ %201, %191 ], [ %189, %186 ]
  %194 = phi double* [ %196, %191 ], [ %190, %186 ]
  %195 = phi i64 [ %203, %191 ], [ %176, %186 ]
  %196 = getelementptr inbounds double, double* %194, i64 1
  %197 = load double, double* %194, align 8
  %198 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %192
  %199 = load double, double* %198, align 8
  %200 = fmul double %197, %199
  %201 = fadd double %193, %200
  %202 = add nuw nsw i64 %192, 1
  %203 = add i64 %195, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %191, !llvm.loop !15

205:                                              ; preds = %191, %186
  %206 = phi double [ %187, %186 ], [ %201, %191 ]
  %207 = getelementptr double, double* %183, i64 %174
  %208 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %181
  %209 = load double, double* %208, align 8
  %210 = fmul double %206, %209
  %211 = fadd double %182, %210
  %212 = add nuw nsw i64 %181, 1
  %213 = icmp eq i64 %212, %28
  br i1 %213, label %184, label %180

214:                                              ; preds = %180, %214
  %215 = phi i64 [ %246, %214 ], [ 0, %180 ]
  %216 = phi double [ %245, %214 ], [ 0.000000e+00, %180 ]
  %217 = phi double* [ %240, %214 ], [ %183, %180 ]
  %218 = phi i64 [ %247, %214 ], [ %178, %180 ]
  %219 = getelementptr inbounds double, double* %217, i64 1
  %220 = load double, double* %217, align 8
  %221 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %215
  %222 = load double, double* %221, align 16
  %223 = fmul double %220, %222
  %224 = fadd double %216, %223
  %225 = or i64 %215, 1
  %226 = getelementptr inbounds double, double* %217, i64 2
  %227 = load double, double* %219, align 8
  %228 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %225
  %229 = load double, double* %228, align 8
  %230 = fmul double %227, %229
  %231 = fadd double %224, %230
  %232 = or i64 %215, 2
  %233 = getelementptr inbounds double, double* %217, i64 3
  %234 = load double, double* %226, align 8
  %235 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %232
  %236 = load double, double* %235, align 16
  %237 = fmul double %234, %236
  %238 = fadd double %231, %237
  %239 = or i64 %215, 3
  %240 = getelementptr inbounds double, double* %217, i64 4
  %241 = load double, double* %233, align 8
  %242 = getelementptr inbounds [10 x double], [10 x double]* %3, i64 0, i64 %239
  %243 = load double, double* %242, align 8
  %244 = fmul double %241, %243
  %245 = fadd double %238, %244
  %246 = add nuw nsw i64 %215, 4
  %247 = add i64 %218, -4
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %186, label %214

249:                                              ; preds = %20, %184
  %250 = phi double [ %185, %184 ], [ -0.000000e+00, %20 ]
  %251 = load double*, double** %17, align 8
  %252 = getelementptr inbounds double, double* %251, i64 %22
  %253 = load double, double* %252, align 8
  %254 = fadd double %250, %253
  %255 = tail call double @exp(double %254) #3
  %256 = fadd double %25, %255
  %257 = load i32, i32* %5, align 8
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %24, i64 %258
  %260 = mul nsw i32 %257, %257
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds double, double* %23, i64 %261
  %263 = add nuw nsw i64 %22, 1
  %264 = load i32, i32* %9, align 4
  %265 = sext i32 %264 to i64
  %266 = icmp slt i64 %263, %265
  br i1 %266, label %20, label %18

267:                                              ; preds = %2, %18
  %268 = phi double [ %19, %18 ], [ -1.000000e+00, %2 ]
  ret double %268
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !13}
