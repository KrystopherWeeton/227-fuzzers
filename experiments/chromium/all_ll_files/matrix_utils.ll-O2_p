; ModuleID = '../../third_party/angle/src/common/matrix_utils.cpp'
source_filename = "../../third_party/angle/src/common/matrix_utils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector", i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"class.angle::Vector.1" = type { %"class.angle::VectorBase.2" }
%"class.angle::VectorBase.2" = type { [4 x float] }

@.str = private unnamed_addr constant [17 x i8] c"[ %f %f %f %f ]\0A\00", align 1

@_ZN5angle4Mat4C1Ev = hidden unnamed_addr alias void (%"class.angle::Mat4"*), void (%"class.angle::Mat4"*)* @_ZN5angle4Mat4C2Ev
@_ZN5angle4Mat4C1ENS_6MatrixIfEE = hidden unnamed_addr alias void (%"class.angle::Mat4"*, %"class.angle::Matrix"*), void (%"class.angle::Mat4"*, %"class.angle::Matrix"*)* @_ZN5angle4Mat4C2ENS_6MatrixIfEE
@_ZN5angle4Mat4C1ERKNSt3__16vectorIfNS1_9allocatorIfEEEE = hidden unnamed_addr alias void (%"class.angle::Mat4"*, %"class.std::__1::vector"*), void (%"class.angle::Mat4"*, %"class.std::__1::vector"*)* @_ZN5angle4Mat4C2ERKNSt3__16vectorIfNS1_9allocatorIfEEEE
@_ZN5angle4Mat4C1EPKf = hidden unnamed_addr alias void (%"class.angle::Mat4"*, float*), void (%"class.angle::Mat4"*, float*)* @_ZN5angle4Mat4C2EPKf
@_ZN5angle4Mat4C1Effffffffffffffff = hidden unnamed_addr alias void (%"class.angle::Mat4"*, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float), void (%"class.angle::Mat4"*, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)* @_ZN5angle4Mat4C2Effffffffffffffff

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat4C2Ev(%"class.angle::Mat4"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 64) #9
  %3 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %2, i8** %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 64
  %6 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast float** %6 to i8**
  store i8* %5, i8** %7, align 8
  %8 = bitcast float** %3 to i64*
  %9 = ptrtoint i8* %5 to i64
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %10, align 8
  %11 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %11, align 4
  %12 = bitcast i8* %2 to float*
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = getelementptr inbounds i8, i8* %2, i64 20
  %15 = bitcast i8* %14 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds i8, i8* %2, i64 24
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds i8, i8* %2, i64 44
  %20 = getelementptr inbounds i8, i8* %2, i64 60
  %21 = bitcast i8* %20 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat4C2Effffffffffffffff(%"class.angle::Mat4"*, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) unnamed_addr #0 align 2 {
  %18 = tail call i8* @_Znwm(i64 64) #9
  %19 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %18, i8** %20, align 8
  %21 = getelementptr inbounds i8, i8* %18, i64 64
  %22 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast float** %22 to i8**
  store i8* %21, i8** %23, align 8
  %24 = bitcast float** %19 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %18, i8 0, i64 64, i1 false)
  %25 = ptrtoint i8* %21 to i64
  store i64 %25, i64* %24, align 8
  %26 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %26, align 8
  %27 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %27, align 4
  %28 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load float*, float** %28, align 8
  store float %1, float* %29, align 4
  %30 = load float*, float** %28, align 8
  %31 = getelementptr inbounds float, float* %30, i64 1
  store float %2, float* %31, align 4
  %32 = load float*, float** %28, align 8
  %33 = getelementptr inbounds float, float* %32, i64 2
  store float %3, float* %33, align 4
  %34 = load float*, float** %28, align 8
  %35 = getelementptr inbounds float, float* %34, i64 3
  store float %4, float* %35, align 4
  %36 = load float*, float** %28, align 8
  %37 = getelementptr inbounds float, float* %36, i64 4
  store float %5, float* %37, align 4
  %38 = load float*, float** %28, align 8
  %39 = getelementptr inbounds float, float* %38, i64 5
  store float %6, float* %39, align 4
  %40 = load float*, float** %28, align 8
  %41 = getelementptr inbounds float, float* %40, i64 6
  store float %7, float* %41, align 4
  %42 = load float*, float** %28, align 8
  %43 = getelementptr inbounds float, float* %42, i64 7
  store float %8, float* %43, align 4
  %44 = load float*, float** %28, align 8
  %45 = getelementptr inbounds float, float* %44, i64 8
  store float %9, float* %45, align 4
  %46 = load float*, float** %28, align 8
  %47 = getelementptr inbounds float, float* %46, i64 9
  store float %10, float* %47, align 4
  %48 = load float*, float** %28, align 8
  %49 = getelementptr inbounds float, float* %48, i64 10
  store float %11, float* %49, align 4
  %50 = load float*, float** %28, align 8
  %51 = getelementptr inbounds float, float* %50, i64 11
  store float %12, float* %51, align 4
  %52 = load float*, float** %28, align 8
  %53 = getelementptr inbounds float, float* %52, i64 12
  store float %13, float* %53, align 4
  %54 = load float*, float** %28, align 8
  %55 = getelementptr inbounds float, float* %54, i64 13
  store float %14, float* %55, align 4
  %56 = load float*, float** %28, align 8
  %57 = getelementptr inbounds float, float* %56, i64 14
  store float %15, float* %57, align 4
  %58 = load float*, float** %28, align 8
  %59 = getelementptr inbounds float, float* %58, i64 15
  store float %16, float* %59, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat4C2ENS_6MatrixIfEE(%"class.angle::Mat4"*, %"class.angle::Matrix"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 64) #9
  %4 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %3, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 64
  %7 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast float** %7 to i8**
  store i8* %6, i8** %8, align 8
  %9 = bitcast float** %4 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  %10 = ptrtoint i8* %6 to i64
  store i64 %10, i64* %9, align 8
  %11 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %11, align 8
  %12 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %12, align 4
  %13 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %14, 4
  %16 = select i1 %15, i32 %14, i32 4
  %17 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp ult i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp eq i32 %16, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = zext i32 %20 to i64
  %26 = and i64 %25, 1
  %27 = icmp eq i32 %20, 1
  %28 = sub nsw i64 %25, %26
  %29 = icmp eq i64 %26, 0
  br label %30

30:                                               ; preds = %22, %51
  %31 = phi i32 [ 0, %22 ], [ %52, %51 ]
  switch i32 %20, label %54 [
    i32 0, label %51
    i32 1, label %33
  ]

32:                                               ; preds = %51, %2
  ret void

33:                                               ; preds = %54, %30
  %34 = phi i64 [ 0, %30 ], [ %88, %54 ]
  br i1 %29, label %51, label %35

35:                                               ; preds = %33
  %36 = load i32, i32* %13, align 4
  %37 = trunc i64 %34 to i32
  %38 = mul i32 %36, %37
  %39 = add i32 %38, %31
  %40 = zext i32 %39 to i64
  %41 = load float*, float** %23, align 8
  %42 = getelementptr inbounds float, float* %41, i64 %40
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 %16, %37
  %46 = add i32 %45, %31
  %47 = zext i32 %46 to i64
  %48 = load float*, float** %24, align 8
  %49 = getelementptr inbounds float, float* %48, i64 %47
  %50 = bitcast float* %49 to i32*
  store i32 %44, i32* %50, align 4
  br label %51

51:                                               ; preds = %35, %33, %30
  %52 = add nuw i32 %31, 1
  %53 = icmp ult i32 %52, %16
  br i1 %53, label %30, label %32

54:                                               ; preds = %30, %54
  %55 = phi i64 [ %88, %54 ], [ 0, %30 ]
  %56 = phi i64 [ %89, %54 ], [ %28, %30 ]
  %57 = load i32, i32* %13, align 4
  %58 = trunc i64 %55 to i32
  %59 = mul i32 %57, %58
  %60 = add i32 %59, %31
  %61 = zext i32 %60 to i64
  %62 = load float*, float** %23, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %61
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = mul i32 %16, %58
  %67 = add i32 %66, %31
  %68 = zext i32 %67 to i64
  %69 = load float*, float** %24, align 8
  %70 = getelementptr inbounds float, float* %69, i64 %68
  %71 = bitcast float* %70 to i32*
  store i32 %65, i32* %71, align 4
  %72 = load i32, i32* %13, align 4
  %73 = trunc i64 %55 to i32
  %74 = or i32 %73, 1
  %75 = mul i32 %72, %74
  %76 = add i32 %75, %31
  %77 = zext i32 %76 to i64
  %78 = load float*, float** %23, align 8
  %79 = getelementptr inbounds float, float* %78, i64 %77
  %80 = bitcast float* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = mul i32 %16, %74
  %83 = add i32 %82, %31
  %84 = zext i32 %83 to i64
  %85 = load float*, float** %24, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %84
  %87 = bitcast float* %86 to i32*
  store i32 %81, i32* %87, align 4
  %88 = add nuw nsw i64 %55, 2
  %89 = add i64 %56, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %33, label %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat4C2ERKNSt3__16vectorIfNS1_9allocatorIfEEEE(%"class.angle::Mat4"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.angle::Mat4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #10
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %5 = bitcast float** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %39, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 4611686018427387903
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.angle::Mat4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #11
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #9
  %18 = bitcast i8* %17 to float*
  %19 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast float** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds float, float* %18, i64 %10
  %23 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %22, float** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = load i64, i64* %5, align 8
  %27 = bitcast float** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = ptrtoint float* %25 to i64
  %30 = sub i64 %26, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %16
  %33 = lshr exact i64 %30, 2
  %34 = bitcast float* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 %34, i64 %30, i1 false) #10
  %35 = getelementptr inbounds float, float* %18, i64 %33
  %36 = ptrtoint float* %35 to i64
  br label %37

37:                                               ; preds = %32, %16
  %38 = phi i64 [ %36, %32 ], [ %28, %16 ]
  store i64 %38, i64* %27, align 8
  br label %39

39:                                               ; preds = %2, %37
  %40 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %40, align 8
  %41 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %41, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat4C2EPKf(%"class.angle::Mat4"*, float* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.angle::Mat4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #10
  %4 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %4, align 8
  %5 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %5, align 4
  %6 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast float** %6 to i64*
  %9 = bitcast %"class.angle::Mat4"* %0 to i64*
  %10 = bitcast float** %7 to i64*
  %11 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %80, %2
  %13 = phi float* [ %82, %80 ], [ null, %2 ]
  %14 = phi float* [ %81, %80 ], [ null, %2 ]
  %15 = phi i64 [ %78, %80 ], [ 0, %2 ]
  %16 = getelementptr inbounds float, float* %1, i64 %15
  %17 = icmp eq float* %14, %13
  br i1 %17, label %24, label %18

18:                                               ; preds = %12
  %19 = bitcast float* %16 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = bitcast float* %14 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds float, float* %14, i64 1
  %23 = ptrtoint float* %22 to i64
  store i64 %23, i64* %8, align 8
  br label %77

24:                                               ; preds = %12
  %25 = ptrtoint float* %13 to i64
  %26 = load i64, i64* %9, align 8
  %27 = sub i64 %25, %26
  %28 = ashr exact i64 %27, 2
  %29 = add nsw i64 %28, 1
  %30 = icmp ugt i64 %29, 4611686018427387903
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.angle::Mat4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #11
  unreachable

33:                                               ; preds = %24
  %34 = icmp ult i64 %28, 2305843009213693951
  br i1 %34, label %35, label %43

35:                                               ; preds = %33
  %36 = ashr exact i64 %27, 1
  %37 = icmp ult i64 %36, %29
  %38 = select i1 %37, i64 %29, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = icmp ugt i64 %38, 4611686018427387903
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  tail call void @abort() #11
  unreachable

43:                                               ; preds = %40, %33
  %44 = phi i64 [ %38, %40 ], [ 4611686018427387903, %33 ]
  %45 = shl i64 %44, 2
  %46 = tail call i8* @_Znwm(i64 %45) #9
  %47 = bitcast i8* %46 to float*
  br label %48

48:                                               ; preds = %43, %35
  %49 = phi i64 [ %44, %43 ], [ 0, %35 ]
  %50 = phi float* [ %47, %43 ], [ null, %35 ]
  %51 = getelementptr inbounds float, float* %50, i64 %28
  %52 = getelementptr inbounds float, float* %50, i64 %49
  %53 = ptrtoint float* %52 to i64
  %54 = bitcast float* %16 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = bitcast float* %51 to i32*
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds float, float* %51, i64 1
  %58 = ptrtoint float* %57 to i64
  %59 = load float*, float** %11, align 8
  %60 = load i64, i64* %8, align 8
  %61 = ptrtoint float* %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 2
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds float, float* %51, i64 %64
  %66 = ptrtoint float* %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %48
  %69 = bitcast float* %65 to i8*
  %70 = bitcast float* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %62, i1 false) #10
  %71 = load float*, float** %11, align 8
  br label %72

72:                                               ; preds = %68, %48
  %73 = phi float* [ %59, %48 ], [ %71, %68 ]
  store i64 %66, i64* %9, align 8
  store i64 %58, i64* %8, align 8
  store i64 %53, i64* %10, align 8
  %74 = icmp eq float* %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = bitcast float* %73 to i8*
  tail call void @_ZdlPv(i8* %76) #9
  br label %77

77:                                               ; preds = %18, %72, %75
  %78 = add nuw nsw i64 %15, 1
  %79 = icmp eq i64 %78, 16
  br i1 %79, label %83, label %80

80:                                               ; preds = %77
  %81 = load float*, float** %6, align 8
  %82 = load float*, float** %7, align 8
  br label %12

83:                                               ; preds = %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat46RotateEfRKNS_6VectorILm3EfEE(%"class.angle::Mat4"* noalias nocapture sret, float, %"class.angle::Vector"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %2, i64 0, i32 0, i32 0, i64 0
  %5 = load float, float* %4, align 4
  %6 = fmul float %5, %5
  %7 = fadd float %6, 0.000000e+00
  %8 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %2, i64 0, i32 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %9
  %11 = fadd float %7, %10
  %12 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %2, i64 0, i32 0, i32 0, i64 2
  %13 = load float, float* %12, align 4
  %14 = fmul float %13, %13
  %15 = fadd float %11, %14
  %16 = tail call float @sqrtf(float %15) #10
  %17 = load float, float* %4, align 4
  %18 = fdiv float %17, %16
  %19 = load float, float* %8, align 4
  %20 = fdiv float %19, %16
  %21 = load float, float* %12, align 4
  %22 = fdiv float %21, %16
  %23 = fmul float %1, 0x3F91DF46A0000000
  %24 = tail call float @cosf(float %23) #10
  %25 = fsub float 1.000000e+00, %24
  %26 = tail call float @sinf(float %23) #10
  %27 = fmul float %18, %18
  %28 = fmul float %20, %20
  %29 = fmul float %22, %22
  %30 = fmul float %18, %20
  %31 = fmul float %20, %22
  %32 = fmul float %18, %22
  %33 = fmul float %27, %25
  %34 = fadd float %24, %33
  %35 = fmul float %30, %25
  %36 = fmul float %22, %26
  %37 = fadd float %35, %36
  %38 = fmul float %25, %32
  %39 = fmul float %20, %26
  %40 = fsub float %38, %39
  %41 = fsub float %35, %36
  %42 = fmul float %28, %25
  %43 = fadd float %24, %42
  %44 = fmul float %25, %31
  %45 = fmul float %18, %26
  %46 = fadd float %44, %45
  %47 = fadd float %38, %39
  %48 = fsub float %44, %45
  %49 = fmul float %25, %29
  %50 = fadd float %24, %49
  %51 = tail call i8* @_Znwm(i64 64) #9
  %52 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %53 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %51, i8** %53, align 8
  %54 = getelementptr inbounds i8, i8* %51, i64 64
  %55 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %56 = bitcast float** %55 to i8**
  store i8* %54, i8** %56, align 8
  %57 = bitcast float** %52 to i64*
  %58 = ptrtoint i8* %54 to i64
  store i64 %58, i64* %57, align 8
  %59 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %59, align 8
  %60 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %60, align 4
  %61 = bitcast i8* %51 to float*
  store float %34, float* %61, align 4
  %62 = getelementptr inbounds i8, i8* %51, i64 4
  %63 = bitcast i8* %62 to float*
  store float %37, float* %63, align 4
  %64 = getelementptr inbounds i8, i8* %51, i64 8
  %65 = bitcast i8* %64 to float*
  store float %40, float* %65, align 4
  %66 = getelementptr inbounds i8, i8* %51, i64 12
  %67 = bitcast i8* %66 to float*
  store float 0.000000e+00, float* %67, align 4
  %68 = getelementptr inbounds i8, i8* %51, i64 16
  %69 = bitcast i8* %68 to float*
  store float %41, float* %69, align 4
  %70 = getelementptr inbounds i8, i8* %51, i64 20
  %71 = bitcast i8* %70 to float*
  store float %43, float* %71, align 4
  %72 = getelementptr inbounds i8, i8* %51, i64 24
  %73 = bitcast i8* %72 to float*
  store float %46, float* %73, align 4
  %74 = getelementptr inbounds i8, i8* %51, i64 28
  %75 = bitcast i8* %74 to float*
  store float 0.000000e+00, float* %75, align 4
  %76 = getelementptr inbounds i8, i8* %51, i64 32
  %77 = bitcast i8* %76 to float*
  store float %47, float* %77, align 4
  %78 = getelementptr inbounds i8, i8* %51, i64 36
  %79 = bitcast i8* %78 to float*
  store float %48, float* %79, align 4
  %80 = getelementptr inbounds i8, i8* %51, i64 40
  %81 = bitcast i8* %80 to float*
  store float %50, float* %81, align 4
  %82 = getelementptr inbounds i8, i8* %51, i64 44
  %83 = getelementptr inbounds i8, i8* %51, i64 60
  %84 = bitcast i8* %83 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %84, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat49TranslateERKNS_6VectorILm3EfEE(%"class.angle::Mat4"* noalias nocapture sret, %"class.angle::Vector"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.angle::Vector"* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %1, i64 0, i32 0, i32 0, i64 1
  %6 = bitcast float* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %1, i64 0, i32 0, i32 0, i64 2
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = tail call i8* @_Znwm(i64 64) #9
  %12 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %11, i8** %13, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 64
  %15 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i8**
  store i8* %14, i8** %16, align 8
  %17 = bitcast float** %12 to i64*
  %18 = ptrtoint i8* %14 to i64
  store i64 %18, i64* %17, align 8
  %19 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %19, align 8
  %20 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %20, align 4
  %21 = bitcast i8* %11 to float*
  store float 1.000000e+00, float* %21, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 4
  %23 = getelementptr inbounds i8, i8* %11, i64 20
  %24 = bitcast i8* %23 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %24, align 4
  %25 = getelementptr inbounds i8, i8* %11, i64 24
  %26 = getelementptr inbounds i8, i8* %11, i64 40
  %27 = bitcast i8* %26 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %27, align 4
  %28 = getelementptr inbounds i8, i8* %11, i64 44
  %29 = bitcast i8* %28 to float*
  store float 0.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds i8, i8* %11, i64 48
  %31 = bitcast i8* %30 to i32*
  store i32 %4, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 52
  %33 = bitcast i8* %32 to i32*
  store i32 %7, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %11, i64 56
  %35 = bitcast i8* %34 to i32*
  store i32 %10, i32* %35, align 4
  %36 = getelementptr inbounds i8, i8* %11, i64 60
  %37 = bitcast i8* %36 to float*
  store float 1.000000e+00, float* %37, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat45ScaleERKNS_6VectorILm3EfEE(%"class.angle::Mat4"* noalias nocapture sret, %"class.angle::Vector"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.angle::Vector"* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %1, i64 0, i32 0, i32 0, i64 1
  %6 = bitcast float* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::Vector", %"class.angle::Vector"* %1, i64 0, i32 0, i32 0, i64 2
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = tail call i8* @_Znwm(i64 64) #9
  %12 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %11, i8** %13, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 64
  %15 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i8**
  store i8* %14, i8** %16, align 8
  %17 = bitcast float** %12 to i64*
  %18 = ptrtoint i8* %14 to i64
  store i64 %18, i64* %17, align 8
  %19 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %19, align 8
  %20 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %20, align 4
  %21 = bitcast i8* %11 to i32*
  store i32 %4, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 4
  %23 = getelementptr inbounds i8, i8* %11, i64 20
  %24 = bitcast i8* %23 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 16, i1 false)
  store i32 %7, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %11, i64 24
  %26 = getelementptr inbounds i8, i8* %11, i64 40
  %27 = bitcast i8* %26 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 16, i1 false)
  store i32 %10, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %11, i64 44
  %29 = getelementptr inbounds i8, i8* %11, i64 60
  %30 = bitcast i8* %29 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %28, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %30, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat47FrustumEffffff(%"class.angle::Mat4"* noalias nocapture sret, float, float, float, float, float, float) local_unnamed_addr #0 align 2 {
  %8 = fmul float %5, 2.000000e+00
  %9 = fadd float %5, %6
  %10 = fsub float %6, %5
  %11 = fadd float %3, %4
  %12 = fsub float %4, %3
  %13 = fadd float %1, %2
  %14 = fsub float %2, %1
  %15 = fdiv float %8, %14
  %16 = fdiv float %8, %12
  %17 = fdiv float %13, %14
  %18 = fdiv float %11, %12
  %19 = fsub float -0.000000e+00, %9
  %20 = fdiv float %19, %10
  %21 = fmul float %8, %6
  %22 = fsub float -0.000000e+00, %21
  %23 = fdiv float %22, %10
  %24 = tail call i8* @_Znwm(i64 64) #9
  %25 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds i8, i8* %24, i64 64
  %28 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast float** %28 to i8**
  store i8* %27, i8** %29, align 8
  %30 = bitcast float** %25 to i64*
  %31 = ptrtoint i8* %27 to i64
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %32, align 8
  %33 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %33, align 4
  %34 = bitcast i8* %24 to float*
  store float %15, float* %34, align 4
  %35 = getelementptr inbounds i8, i8* %24, i64 4
  %36 = getelementptr inbounds i8, i8* %24, i64 20
  %37 = bitcast i8* %36 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 16, i1 false)
  store float %16, float* %37, align 4
  %38 = getelementptr inbounds i8, i8* %24, i64 24
  %39 = bitcast i8* %38 to float*
  store float 0.000000e+00, float* %39, align 4
  %40 = getelementptr inbounds i8, i8* %24, i64 28
  %41 = bitcast i8* %40 to float*
  store float 0.000000e+00, float* %41, align 4
  %42 = getelementptr inbounds i8, i8* %24, i64 32
  %43 = bitcast i8* %42 to float*
  store float %17, float* %43, align 4
  %44 = getelementptr inbounds i8, i8* %24, i64 36
  %45 = bitcast i8* %44 to float*
  store float %18, float* %45, align 4
  %46 = getelementptr inbounds i8, i8* %24, i64 40
  %47 = bitcast i8* %46 to float*
  store float %20, float* %47, align 4
  %48 = getelementptr inbounds i8, i8* %24, i64 44
  %49 = bitcast i8* %48 to float*
  store float -1.000000e+00, float* %49, align 4
  %50 = getelementptr inbounds i8, i8* %24, i64 48
  %51 = bitcast i8* %50 to float*
  store float 0.000000e+00, float* %51, align 4
  %52 = getelementptr inbounds i8, i8* %24, i64 52
  %53 = bitcast i8* %52 to float*
  store float 0.000000e+00, float* %53, align 4
  %54 = getelementptr inbounds i8, i8* %24, i64 56
  %55 = bitcast i8* %54 to float*
  store float %23, float* %55, align 4
  %56 = getelementptr inbounds i8, i8* %24, i64 60
  %57 = bitcast i8* %56 to float*
  store float 0.000000e+00, float* %57, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat411PerspectiveEffff(%"class.angle::Mat4"* noalias nocapture sret, float, float, float, float) local_unnamed_addr #0 align 2 {
  %6 = fdiv float %1, 3.600000e+02
  %7 = fpext float %6 to double
  %8 = fmul double %7, 0x400921FB54442D18
  %9 = fptrunc double %8 to float
  %10 = tail call float @tanf(float %9) #10
  %11 = fmul float %10, %3
  %12 = fmul float %11, %2
  %13 = fmul float %3, 2.000000e+00
  %14 = fadd float %3, %4
  %15 = fsub float %4, %3
  %16 = fsub float %11, %11
  %17 = fadd float %11, %11
  %18 = fsub float %12, %12
  %19 = fadd float %12, %12
  %20 = fdiv float %13, %19
  %21 = fdiv float %13, %17
  %22 = fdiv float %18, %19
  %23 = fdiv float %16, %17
  %24 = fsub float -0.000000e+00, %14
  %25 = fdiv float %24, %15
  %26 = fmul float %13, %4
  %27 = fsub float -0.000000e+00, %26
  %28 = fdiv float %27, %15
  %29 = tail call i8* @_Znwm(i64 64) #9, !noalias !2
  %30 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %31 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %29, i8** %31, align 8, !alias.scope !2
  %32 = getelementptr inbounds i8, i8* %29, i64 64
  %33 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast float** %33 to i8**
  store i8* %32, i8** %34, align 8, !alias.scope !2
  %35 = bitcast float** %30 to i64*
  %36 = ptrtoint i8* %32 to i64
  store i64 %36, i64* %35, align 8, !alias.scope !2
  %37 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %37, align 8, !alias.scope !2
  %38 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %38, align 4, !alias.scope !2
  %39 = bitcast i8* %29 to float*
  store float %20, float* %39, align 4, !noalias !2
  %40 = getelementptr inbounds i8, i8* %29, i64 4
  %41 = getelementptr inbounds i8, i8* %29, i64 20
  %42 = bitcast i8* %41 to float*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 16, i1 false) #10, !noalias !2
  store float %21, float* %42, align 4, !noalias !2
  %43 = getelementptr inbounds i8, i8* %29, i64 24
  %44 = bitcast i8* %43 to float*
  store float 0.000000e+00, float* %44, align 4, !noalias !2
  %45 = getelementptr inbounds i8, i8* %29, i64 28
  %46 = bitcast i8* %45 to float*
  store float 0.000000e+00, float* %46, align 4, !noalias !2
  %47 = getelementptr inbounds i8, i8* %29, i64 32
  %48 = bitcast i8* %47 to float*
  store float %22, float* %48, align 4, !noalias !2
  %49 = getelementptr inbounds i8, i8* %29, i64 36
  %50 = bitcast i8* %49 to float*
  store float %23, float* %50, align 4, !noalias !2
  %51 = getelementptr inbounds i8, i8* %29, i64 40
  %52 = bitcast i8* %51 to float*
  store float %25, float* %52, align 4, !noalias !2
  %53 = getelementptr inbounds i8, i8* %29, i64 44
  %54 = bitcast i8* %53 to float*
  store float -1.000000e+00, float* %54, align 4, !noalias !2
  %55 = getelementptr inbounds i8, i8* %29, i64 48
  %56 = bitcast i8* %55 to float*
  store float 0.000000e+00, float* %56, align 4, !noalias !2
  %57 = getelementptr inbounds i8, i8* %29, i64 52
  %58 = bitcast i8* %57 to float*
  store float 0.000000e+00, float* %58, align 4, !noalias !2
  %59 = getelementptr inbounds i8, i8* %29, i64 56
  %60 = bitcast i8* %59 to float*
  store float %28, float* %60, align 4, !noalias !2
  %61 = getelementptr inbounds i8, i8* %29, i64 60
  %62 = bitcast i8* %61 to float*
  store float 0.000000e+00, float* %62, align 4, !noalias !2
  ret void
}

; Function Attrs: nofree nounwind
declare float @tanf(float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat45OrthoEffffff(%"class.angle::Mat4"* noalias nocapture sret, float, float, float, float, float, float) local_unnamed_addr #0 align 2 {
  %8 = fadd float %5, %6
  %9 = fsub float %6, %5
  %10 = fadd float %3, %4
  %11 = fsub float %4, %3
  %12 = fadd float %1, %2
  %13 = fsub float %2, %1
  %14 = fdiv float 2.000000e+00, %13
  %15 = fdiv float 2.000000e+00, %11
  %16 = fdiv float -2.000000e+00, %9
  %17 = fsub float -0.000000e+00, %12
  %18 = fdiv float %17, %13
  %19 = fsub float -0.000000e+00, %10
  %20 = fdiv float %19, %11
  %21 = fsub float -0.000000e+00, %8
  %22 = fdiv float %21, %9
  %23 = tail call i8* @_Znwm(i64 64) #9
  %24 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %25 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %23, i64 64
  %27 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast float** %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = bitcast float** %24 to i64*
  %30 = ptrtoint i8* %26 to i64
  store i64 %30, i64* %29, align 8
  %31 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %31, align 8
  %32 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %32, align 4
  %33 = bitcast i8* %23 to float*
  store float %14, float* %33, align 4
  %34 = getelementptr inbounds i8, i8* %23, i64 4
  %35 = getelementptr inbounds i8, i8* %23, i64 20
  %36 = bitcast i8* %35 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 16, i1 false)
  store float %15, float* %36, align 4
  %37 = getelementptr inbounds i8, i8* %23, i64 24
  %38 = getelementptr inbounds i8, i8* %23, i64 40
  %39 = bitcast i8* %38 to float*
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 16, i1 false)
  store float %16, float* %39, align 4
  %40 = getelementptr inbounds i8, i8* %23, i64 44
  %41 = bitcast i8* %40 to float*
  store float 0.000000e+00, float* %41, align 4
  %42 = getelementptr inbounds i8, i8* %23, i64 48
  %43 = bitcast i8* %42 to float*
  store float %18, float* %43, align 4
  %44 = getelementptr inbounds i8, i8* %23, i64 52
  %45 = bitcast i8* %44 to float*
  store float %20, float* %45, align 4
  %46 = getelementptr inbounds i8, i8* %23, i64 56
  %47 = bitcast i8* %46 to float*
  store float %22, float* %47, align 4
  %48 = getelementptr inbounds i8, i8* %23, i64 60
  %49 = bitcast i8* %48 to float*
  store float 1.000000e+00, float* %49, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle4Mat47productERKS0_(%"class.angle::Mat4"* noalias nocapture sret, %"class.angle::Mat4"* nocapture readonly, %"class.angle::Mat4"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds float, float* %5, i64 4
  %10 = getelementptr inbounds float, float* %7, i64 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds float, float* %5, i64 8
  %13 = getelementptr inbounds float, float* %7, i64 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds float, float* %5, i64 12
  %16 = getelementptr inbounds float, float* %7, i64 3
  %17 = load float, float* %16, align 4
  %18 = bitcast float* %5 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 4
  %20 = insertelement <4 x float> undef, float %8, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fmul <4 x float> %19, %21
  %23 = bitcast float* %9 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 4
  %25 = insertelement <4 x float> undef, float %11, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = fmul <4 x float> %24, %26
  %28 = fadd <4 x float> %22, %27
  %29 = bitcast float* %12 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 4
  %31 = insertelement <4 x float> undef, float %14, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = fmul <4 x float> %30, %32
  %34 = fadd <4 x float> %28, %33
  %35 = bitcast float* %15 to <4 x float>*
  %36 = load <4 x float>, <4 x float>* %35, align 4
  %37 = insertelement <4 x float> undef, float %17, i32 0
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <4 x i32> zeroinitializer
  %39 = fmul <4 x float> %36, %38
  %40 = fadd <4 x float> %34, %39
  %41 = getelementptr inbounds float, float* %7, i64 4
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds float, float* %7, i64 5
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds float, float* %7, i64 6
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds float, float* %7, i64 7
  %48 = load float, float* %47, align 4
  %49 = insertelement <4 x float> undef, float %42, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <4 x i32> zeroinitializer
  %51 = fmul <4 x float> %19, %50
  %52 = insertelement <4 x float> undef, float %44, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = fmul <4 x float> %24, %53
  %55 = fadd <4 x float> %51, %54
  %56 = insertelement <4 x float> undef, float %46, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = fmul <4 x float> %30, %57
  %59 = fadd <4 x float> %55, %58
  %60 = insertelement <4 x float> undef, float %48, i32 0
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <4 x i32> zeroinitializer
  %62 = fmul <4 x float> %36, %61
  %63 = fadd <4 x float> %59, %62
  %64 = getelementptr inbounds float, float* %7, i64 8
  %65 = load float, float* %64, align 4
  %66 = getelementptr inbounds float, float* %7, i64 9
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds float, float* %7, i64 10
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds float, float* %7, i64 11
  %71 = load float, float* %70, align 4
  %72 = insertelement <4 x float> undef, float %65, i32 0
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> zeroinitializer
  %74 = fmul <4 x float> %19, %73
  %75 = insertelement <4 x float> undef, float %67, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = fmul <4 x float> %24, %76
  %78 = fadd <4 x float> %74, %77
  %79 = insertelement <4 x float> undef, float %69, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = fmul <4 x float> %30, %80
  %82 = fadd <4 x float> %78, %81
  %83 = insertelement <4 x float> undef, float %71, i32 0
  %84 = shufflevector <4 x float> %83, <4 x float> undef, <4 x i32> zeroinitializer
  %85 = fmul <4 x float> %36, %84
  %86 = fadd <4 x float> %82, %85
  %87 = getelementptr inbounds float, float* %7, i64 12
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds float, float* %7, i64 13
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds float, float* %7, i64 14
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds float, float* %7, i64 15
  %94 = load float, float* %93, align 4
  %95 = insertelement <4 x float> undef, float %88, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = fmul <4 x float> %19, %96
  %98 = insertelement <4 x float> undef, float %90, i32 0
  %99 = shufflevector <4 x float> %98, <4 x float> undef, <4 x i32> zeroinitializer
  %100 = fmul <4 x float> %24, %99
  %101 = fadd <4 x float> %97, %100
  %102 = insertelement <4 x float> undef, float %92, i32 0
  %103 = shufflevector <4 x float> %102, <4 x float> undef, <4 x i32> zeroinitializer
  %104 = fmul <4 x float> %30, %103
  %105 = fadd <4 x float> %101, %104
  %106 = insertelement <4 x float> undef, float %94, i32 0
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> zeroinitializer
  %108 = fmul <4 x float> %36, %107
  %109 = fadd <4 x float> %105, %108
  %110 = tail call i8* @_Znwm(i64 64) #9
  %111 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %112 = bitcast %"class.angle::Mat4"* %0 to i8**
  store i8* %110, i8** %112, align 8
  %113 = getelementptr inbounds i8, i8* %110, i64 64
  %114 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %115 = bitcast float** %114 to i8**
  store i8* %113, i8** %115, align 8
  %116 = bitcast float** %111 to i64*
  %117 = ptrtoint i8* %113 to i64
  store i64 %117, i64* %116, align 8
  %118 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 1
  store i32 4, i32* %118, align 8
  %119 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 2
  store i32 4, i32* %119, align 4
  %120 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %40, <4 x float>* %120, align 4
  %121 = getelementptr inbounds i8, i8* %110, i64 16
  %122 = bitcast i8* %121 to <4 x float>*
  store <4 x float> %63, <4 x float>* %122, align 4
  %123 = getelementptr inbounds i8, i8* %110, i64 32
  %124 = bitcast i8* %123 to <4 x float>*
  store <4 x float> %86, <4 x float>* %124, align 4
  %125 = getelementptr inbounds i8, i8* %110, i64 48
  %126 = bitcast i8* %125 to <4 x float>*
  store <4 x float> %109, <4 x float>* %126, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN5angle4Mat47productERKNS_6VectorILm4EfEE(%"class.angle::Mat4"* nocapture readonly, %"class.angle::Vector.1"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds %"class.angle::Vector.1", %"class.angle::Vector.1"* %1, i64 0, i32 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %4, i64 4
  %8 = getelementptr inbounds %"class.angle::Vector.1", %"class.angle::Vector.1"* %1, i64 0, i32 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds float, float* %4, i64 8
  %11 = getelementptr inbounds %"class.angle::Vector.1", %"class.angle::Vector.1"* %1, i64 0, i32 0, i32 0, i64 2
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds float, float* %4, i64 12
  %14 = getelementptr inbounds %"class.angle::Vector.1", %"class.angle::Vector.1"* %1, i64 0, i32 0, i32 0, i64 3
  %15 = load float, float* %14, align 4
  %16 = bitcast float* %4 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = insertelement <2 x float> undef, float %6, i32 0
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x float> %17, %19
  %21 = bitcast float* %7 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = insertelement <2 x float> undef, float %9, i32 0
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x float> %22, %24
  %26 = fadd <2 x float> %20, %25
  %27 = bitcast float* %10 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = insertelement <2 x float> undef, float %12, i32 0
  %30 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x float> %28, %30
  %32 = fadd <2 x float> %26, %31
  %33 = bitcast float* %13 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = insertelement <2 x float> undef, float %15, i32 0
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> zeroinitializer
  %37 = fmul <2 x float> %34, %36
  %38 = fadd <2 x float> %32, %37
  %39 = getelementptr inbounds float, float* %4, i64 2
  %40 = getelementptr inbounds float, float* %4, i64 6
  %41 = getelementptr inbounds float, float* %4, i64 10
  %42 = getelementptr inbounds float, float* %4, i64 14
  %43 = bitcast float* %39 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 4
  %45 = fmul <2 x float> %19, %44
  %46 = bitcast float* %40 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 4
  %48 = fmul <2 x float> %24, %47
  %49 = fadd <2 x float> %45, %48
  %50 = bitcast float* %41 to <2 x float>*
  %51 = load <2 x float>, <2 x float>* %50, align 4
  %52 = fmul <2 x float> %30, %51
  %53 = fadd <2 x float> %49, %52
  %54 = bitcast float* %42 to <2 x float>*
  %55 = load <2 x float>, <2 x float>* %54, align 4
  %56 = fmul <2 x float> %36, %55
  %57 = fadd <2 x float> %53, %56
  %58 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %38, 0
  %59 = insertvalue { <2 x float>, <2 x float> } %58, <2 x float> %57, 1
  ret { <2 x float>, <2 x float> } %59
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5angle4Mat44dumpEv(%"class.angle::Mat4"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds float, float* %3, i64 4
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds float, float* %3, i64 8
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds float, float* %3, i64 12
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %15 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), double %5, double %8, double %11, double %14)
  %16 = load float*, float** %2, align 8
  %17 = getelementptr inbounds float, float* %16, i64 1
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds float, float* %16, i64 5
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds float, float* %16, i64 9
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds float, float* %16, i64 13
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), double %19, double %22, double %25, double %28)
  %30 = load float*, float** %2, align 8
  %31 = getelementptr inbounds float, float* %30, i64 2
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = getelementptr inbounds float, float* %30, i64 6
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = getelementptr inbounds float, float* %30, i64 10
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  %40 = getelementptr inbounds float, float* %30, i64 14
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), double %33, double %36, double %39, double %42)
  %44 = load float*, float** %2, align 8
  %45 = getelementptr inbounds float, float* %44, i64 3
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = getelementptr inbounds float, float* %44, i64 7
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = getelementptr inbounds float, float* %44, i64 11
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  %54 = getelementptr inbounds float, float* %44, i64 15
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), double %47, double %50, double %53, double %56)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5angle4Mat47FrustumEffffff: argument 0"}
!4 = distinct !{!4, !"_ZN5angle4Mat47FrustumEffffff"}
