; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGDraw.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGDraw.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp.14, %class.sk_sp.13, %class.sk_sp.15, %class.sk_sp.12, %class.sk_sp.16, %struct.SkRGBA4f, float, float, %union.anon.17, [4 x i8] }>
%class.sk_sp.14 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.13 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.15 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.12 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.16 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.17 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.sksg::Draw" = type { %"class.sksg::RenderNode.base", %class.sk_sp, %class.sk_sp.1 }
%"class.sksg::RenderNode.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.sk_sp = type { %"class.sksg::GeometryNode"* }
%"class.sksg::GeometryNode" = type { %"class.sksg::Node.base", [6 x i8] }
%class.sk_sp.1 = type { %"class.sksg::PaintNode"* }
%"class.sksg::PaintNode" = type { %"class.sksg::Node.base", float, float, float, i8, i32, i8, i8, i32 }
%class.sk_sp.2 = type { %"class.sksg::Node"* }
%"class.sksg::RenderNode" = type { %"class.sksg::Node.base", [6 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.3, [384 x i64], %class.sk_sp.4, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.6" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.3 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.4 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"struct.sksg::RenderNode::RenderContext" = type { %class.sk_sp.12, %class.sk_sp.13, %class.sk_sp.13, %class.SkMatrix, %class.SkMatrix, float, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkPath = type <{ %class.sk_sp.18, i32, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", i8, i8 }>
%class.sk_sp.18 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.19, %class.SkTDArray.20, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.19 = type { i8*, i32, i32 }
%class.SkTDArray.20 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.26 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.21" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.26 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.27", [3 x i8] }
%"struct.std::__1::atomic.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl.29" }
%"struct.std::__1::__cxx_atomic_impl.29" = type { %"struct.std::__1::__cxx_atomic_base_impl.30" }
%"struct.std::__1::__cxx_atomic_base_impl.30" = type { i8 }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i8 }
%"class.sksg::InvalidationController" = type { %"class.std::__1::vector.31", %struct.SkRect }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.SkRect*, %struct.SkRect*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %struct.SkRect* }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZTVN4sksg4DrawE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Draw"*)* @_ZN4sksg4DrawD2Ev to i8*), i8* bitcast (void (%"class.sksg::Draw"*)* @_ZN4sksg4DrawD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::Draw"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::Draw"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*)* @_ZNK4sksg4Draw8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE to i8*), i8* bitcast (%"class.sksg::RenderNode"* (%"class.sksg::Draw"*, %struct.SkPoint*)* @_ZNK4sksg4Draw8onNodeAtERK7SkPoint to i8*)] }, align 8
@__const._ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.14 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.13 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.15 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.12 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.16 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon.17 { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

@_ZN4sksg4DrawC1E5sk_spINS_12GeometryNodeEES1_INS_9PaintNodeEE = hidden unnamed_addr alias void (%"class.sksg::Draw"*, %class.sk_sp*, %class.sk_sp.1*), void (%"class.sksg::Draw"*, %class.sk_sp*, %class.sk_sp.1*)* @_ZN4sksg4DrawC2E5sk_spINS_12GeometryNodeEES1_INS_9PaintNodeEE
@_ZN4sksg4DrawD1Ev = hidden unnamed_addr alias void (%"class.sksg::Draw"*), void (%"class.sksg::Draw"*)* @_ZN4sksg4DrawD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4DrawC2E5sk_spINS_12GeometryNodeEES1_INS_9PaintNodeEE(%"class.sksg::Draw"*, %class.sk_sp* nocapture, %class.sk_sp.1* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp.2, align 8
  %5 = alloca %class.sk_sp.2, align 8
  %6 = bitcast %"class.sksg::Draw"* %0 to %"class.sksg::RenderNode"*
  tail call void @_ZN4sksg10RenderNodeC2Ej(%"class.sksg::RenderNode"* %6, i32 0) #6
  %7 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg4DrawE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %10 = bitcast %class.sk_sp* %1 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.sksg::GeometryNode"* null, %"class.sksg::GeometryNode"** %9, align 8
  %12 = bitcast %class.sk_sp* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %2, i64 0, i32 0
  %15 = bitcast %class.sk_sp.1* %2 to i64*
  %16 = load i64, i64* %15, align 8
  store %"class.sksg::PaintNode"* null, %"class.sksg::PaintNode"** %14, align 8
  %17 = bitcast %class.sk_sp.1* %13 to i64*
  store i64 %16, i64* %17, align 8
  %18 = bitcast %"class.sksg::Draw"* %0 to %"class.sksg::Node"*
  %19 = bitcast %class.sk_sp.2* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  %20 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %8, i64 0, i32 0
  %21 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %20, align 8
  %22 = icmp eq %"class.sksg::GeometryNode"* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %21, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  br label %26

26:                                               ; preds = %3, %23
  %27 = bitcast %class.sk_sp.2* %4 to %"class.sksg::GeometryNode"**
  store %"class.sksg::GeometryNode"* %21, %"class.sksg::GeometryNode"** %27, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* %18, %class.sk_sp.2* nonnull dereferenceable(8) %4) #6
  %28 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %4, i64 0, i32 0
  %29 = load %"class.sksg::Node"*, %"class.sksg::Node"** %28, align 8
  %30 = icmp eq %"class.sksg::Node"* %29, null
  br i1 %30, label %41, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %29, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 -1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %41

35:                                               ; preds = %31
  %36 = bitcast %"class.sksg::Node"* %29 to %class.SkRefCntBase*
  %37 = bitcast %"class.sksg::Node"* %29 to void (%class.SkRefCntBase*)***
  %38 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %37, align 8
  %39 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, i64 2
  %40 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %39, align 8
  call void %40(%class.SkRefCntBase* nonnull %36) #6
  br label %41

41:                                               ; preds = %26, %31, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  %42 = bitcast %class.sk_sp.2* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #6
  %43 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %13, i64 0, i32 0
  %44 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %43, align 8
  %45 = icmp eq %"class.sksg::PaintNode"* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %44, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i32* %47, i32 1 monotonic
  br label %49

49:                                               ; preds = %41, %46
  %50 = bitcast %class.sk_sp.2* %5 to %"class.sksg::PaintNode"**
  store %"class.sksg::PaintNode"* %44, %"class.sksg::PaintNode"** %50, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* %18, %class.sk_sp.2* nonnull dereferenceable(8) %5) #6
  %51 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %5, i64 0, i32 0
  %52 = load %"class.sksg::Node"*, %"class.sksg::Node"** %51, align 8
  %53 = icmp eq %"class.sksg::Node"* %52, null
  br i1 %53, label %64, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %52, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 -1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = bitcast %"class.sksg::Node"* %52 to %class.SkRefCntBase*
  %60 = bitcast %"class.sksg::Node"* %52 to void (%class.SkRefCntBase*)***
  %61 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %61, i64 2
  %63 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %62, align 8
  call void %63(%class.SkRefCntBase* nonnull %59) #6
  br label %64

64:                                               ; preds = %49, %54, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #6
  ret void
}

declare void @_ZN4sksg10RenderNodeC2Ej(%"class.sksg::RenderNode"*, i32) unnamed_addr #1

declare void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.2* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4DrawD2Ev(%"class.sksg::Draw"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.2, align 8
  %3 = alloca %class.sk_sp.2, align 8
  %4 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg4DrawE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast %"class.sksg::Draw"* %0 to %"class.sksg::Node"*
  %6 = bitcast %class.sk_sp.2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %7, align 8
  %9 = icmp eq %"class.sksg::GeometryNode"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %1, %10
  %14 = bitcast %class.sk_sp.2* %2 to %"class.sksg::GeometryNode"**
  store %"class.sksg::GeometryNode"* %8, %"class.sksg::GeometryNode"** %14, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.2* nonnull dereferenceable(8) %2) #6
  %15 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %2, i64 0, i32 0
  %16 = load %"class.sksg::Node"*, %"class.sksg::Node"** %15, align 8
  %17 = icmp eq %"class.sksg::Node"* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = bitcast %"class.sksg::Node"* %16 to %class.SkRefCntBase*
  %24 = bitcast %"class.sksg::Node"* %16 to void (%class.SkRefCntBase*)***
  %25 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %24, align 8
  %26 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, i64 2
  %27 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, align 8
  call void %27(%class.SkRefCntBase* nonnull %23) #6
  br label %28

28:                                               ; preds = %13, %18, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %29 = bitcast %class.sk_sp.2* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #6
  %30 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 2, i32 0
  %31 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %30, align 8
  %32 = icmp eq %"class.sksg::PaintNode"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %31, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %28, %33
  %37 = bitcast %class.sk_sp.2* %3 to %"class.sksg::PaintNode"**
  store %"class.sksg::PaintNode"* %31, %"class.sksg::PaintNode"** %37, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.2* nonnull dereferenceable(8) %3) #6
  %38 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %3, i64 0, i32 0
  %39 = load %"class.sksg::Node"*, %"class.sksg::Node"** %38, align 8
  %40 = icmp eq %"class.sksg::Node"* %39, null
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %39, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 -1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = bitcast %"class.sksg::Node"* %39 to %class.SkRefCntBase*
  %47 = bitcast %"class.sksg::Node"* %39 to void (%class.SkRefCntBase*)***
  %48 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %47, align 8
  %49 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, i64 2
  %50 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, align 8
  call void %50(%class.SkRefCntBase* nonnull %46) #6
  br label %51

51:                                               ; preds = %36, %41, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #6
  %52 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %30, align 8
  %53 = icmp eq %"class.sksg::PaintNode"* %52, null
  br i1 %53, label %64, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %52, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 -1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = bitcast %"class.sksg::PaintNode"* %52 to %class.SkRefCntBase*
  %60 = bitcast %"class.sksg::PaintNode"* %52 to void (%class.SkRefCntBase*)***
  %61 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %61, i64 2
  %63 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %62, align 8
  call void %63(%class.SkRefCntBase* nonnull %59) #6
  br label %64

64:                                               ; preds = %51, %54, %58
  %65 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %7, align 8
  %66 = icmp eq %"class.sksg::GeometryNode"* %65, null
  br i1 %66, label %77, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %65, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 -1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = bitcast %"class.sksg::GeometryNode"* %65 to %class.SkRefCntBase*
  %73 = bitcast %"class.sksg::GeometryNode"* %65 to void (%class.SkRefCntBase*)***
  %74 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %73, align 8
  %75 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, i64 2
  %76 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %75, align 8
  call void %76(%class.SkRefCntBase* nonnull %72) #6
  br label %77

77:                                               ; preds = %64, %67, %71
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %5) #6
  ret void
}

declare void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.2* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4DrawD0Ev(%"class.sksg::Draw"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4sksg4DrawD2Ev(%"class.sksg::Draw"* %0) #6
  %2 = bitcast %"class.sksg::Draw"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Draw8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE(%"class.sksg::Draw"* nocapture readonly, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPaint, align 8
  %5 = alloca %class.SkMatrix, align 4
  %6 = bitcast %class.SkPaint* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %6) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast (%class.SkPaint* @__const._ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix.paint to i8*), i64 72, i1 false)
  %7 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %7, align 8
  call void @_ZNK4sksg9PaintNode9makePaintEv(%class.SkPaint* nonnull sret %4, %"class.sksg::PaintNode"* %8) #6
  %9 = icmp eq %"struct.sksg::RenderNode::RenderContext"* %2, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #6
  call void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* nonnull sret %5, %class.SkCanvas* %1) #6
  call void @_ZNK4sksg10RenderNode13RenderContext13modulatePaintERK8SkMatrixP7SkPaintb(%"struct.sksg::RenderNode::RenderContext"* nonnull %2, %class.SkMatrix* nonnull dereferenceable(40) %5, %class.SkPaint* nonnull %4, i1 zeroext false) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #6
  br label %12

12:                                               ; preds = %3, %10
  %13 = call zeroext i1 @_ZNK7SkPaint13nothingToDrawEv(%class.SkPaint* nonnull %4) #6
  br i1 %13, label %26, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %4, i64 0, i32 8, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 192
  %18 = icmp eq i32 %17, 64
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %4, i64 0, i32 6
  %21 = load float, float* %20, align 8
  %22 = fcmp ugt float %21, 0.000000e+00
  br i1 %22, label %23, label %26

23:                                               ; preds = %19, %14
  %24 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1, i32 0
  %25 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %24, align 8
  call void @_ZNK4sksg12GeometryNode4drawEP8SkCanvasRK7SkPaint(%"class.sksg::GeometryNode"* %25, %class.SkCanvas* %1, %class.SkPaint* nonnull dereferenceable(72) %4) #6
  br label %26

26:                                               ; preds = %19, %12, %23
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %6) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNK4sksg9PaintNode9makePaintEv(%class.SkPaint* sret, %"class.sksg::PaintNode"*) local_unnamed_addr #1

declare void @_ZNK4sksg10RenderNode13RenderContext13modulatePaintERK8SkMatrixP7SkPaintb(%"struct.sksg::RenderNode::RenderContext"*, %class.SkMatrix* dereferenceable(40), %class.SkPaint*, i1 zeroext) local_unnamed_addr #1

declare void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* sret, %class.SkCanvas*) local_unnamed_addr #1

declare zeroext i1 @_ZNK7SkPaint13nothingToDrawEv(%class.SkPaint*) local_unnamed_addr #1

declare void @_ZNK4sksg12GeometryNode4drawEP8SkCanvasRK7SkPaint(%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sksg::RenderNode"* @_ZNK4sksg4Draw8onNodeAtERK7SkPoint(%"class.sksg::Draw"* readonly, %struct.SkPoint* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %class.SkPaint, align 8
  %4 = alloca %class.SkPath, align 8
  %5 = alloca %class.SkPath, align 8
  %6 = bitcast %class.SkPaint* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %6) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast (%class.SkPaint* @__const._ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix.paint to i8*), i64 72, i1 false)
  %7 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %7, align 8
  call void @_ZNK4sksg9PaintNode9makePaintEv(%class.SkPaint* nonnull sret %3, %"class.sksg::PaintNode"* %8) #6
  %9 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %3, i64 0, i32 5, i32 3
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 2.550000e+02
  %12 = fadd float %11, 5.000000e-01
  %13 = call float @llvm.floor.f32(float %12) #6
  %14 = fcmp olt float %13, 0x41DFFFFFE0000000
  %15 = select i1 %14, float %13, float 0x41DFFFFFE0000000
  %16 = fcmp ogt float %15, 0xC1DFFFFFE0000000
  %17 = select i1 %16, float %15, float 0xC1DFFFFFE0000000
  %18 = fptosi float %17 to i32
  %19 = trunc i32 %18 to i8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %49, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %3, i64 0, i32 8, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 192
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1, i32 0
  %28 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %27, align 8
  %29 = call zeroext i1 @_ZNK4sksg12GeometryNode8containsERK7SkPoint(%"class.sksg::GeometryNode"* %28, %struct.SkPoint* dereferenceable(8) %1) #6
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = bitcast %"class.sksg::Draw"* %0 to %"class.sksg::RenderNode"*
  br label %49

32:                                               ; preds = %26, %21
  %33 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #6
  %34 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #6
  %35 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #6
  %36 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1, i32 0
  %37 = load %"class.sksg::GeometryNode"*, %"class.sksg::GeometryNode"** %36, align 8
  call void @_ZNK4sksg12GeometryNode6asPathEv(%class.SkPath* nonnull sret %5, %"class.sksg::GeometryNode"* %37) #6
  %38 = call zeroext i1 @_ZNK7SkPaint11getFillPathERK6SkPathPS0_PK6SkRectf(%class.SkPaint* nonnull %3, %class.SkPath* nonnull dereferenceable(16) %5, %class.SkPath* nonnull %4, %struct.SkRect* null, float 1.000000e+00) #6
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #6
  br i1 %38, label %39, label %47

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = call zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath* nonnull %4, float %41, float %43) #6
  %45 = bitcast %"class.sksg::Draw"* %0 to %"class.sksg::RenderNode"*
  %46 = select i1 %44, %"class.sksg::RenderNode"* %45, %"class.sksg::RenderNode"* null
  br label %47

47:                                               ; preds = %32, %39
  %48 = phi %"class.sksg::RenderNode"* [ %46, %39 ], [ null, %32 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #6
  br label %49

49:                                               ; preds = %2, %47, %30
  %50 = phi %"class.sksg::RenderNode"* [ %31, %30 ], [ %48, %47 ], [ null, %2 ]
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %6) #6
  ret %"class.sksg::RenderNode"* %50
}

declare zeroext i1 @_ZNK4sksg12GeometryNode8containsERK7SkPoint(%"class.sksg::GeometryNode"*, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

declare void @_ZNK4sksg12GeometryNode6asPathEv(%class.SkPath* sret, %"class.sksg::GeometryNode"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

declare zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath*, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Draw"* nocapture readonly, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkRect, align 4
  %5 = alloca %class.SkPaint, align 8
  %6 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 1, i32 0
  %8 = bitcast %"class.sksg::GeometryNode"** %7 to %"class.sksg::Node"**
  %9 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 -1, i64 16, i1 false)
  %10 = load %"class.sksg::Node"*, %"class.sksg::Node"** %8, align 8
  %11 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %10, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #6
  %12 = bitcast %struct.SkRect* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %6, i8* align 4 %12, i64 16, i1 false)
  %13 = getelementptr inbounds %"class.sksg::Draw", %"class.sksg::Draw"* %0, i64 0, i32 2, i32 0
  %14 = bitcast %"class.sksg::PaintNode"** %13 to %"class.sksg::Node"**
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %15, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #6
  %17 = bitcast %class.SkPaint* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %17) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast (%class.SkPaint* @__const._ZN4sksg4Draw12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix.paint to i8*), i64 72, i1 false)
  %18 = load %"class.sksg::PaintNode"*, %"class.sksg::PaintNode"** %13, align 8
  call void @_ZNK4sksg9PaintNode9makePaintEv(%class.SkPaint* nonnull sret %5, %"class.sksg::PaintNode"* %18) #6
  %19 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %5, i64 0, i32 8, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = lshr i32 %20, 6
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 3
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %37

25:                                               ; preds = %3
  %26 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %5, i64 0, i32 2, i32 0
  %27 = bitcast %class.SkMaskFilter** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %class.SkPaint* %5 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = or i64 %30, %28
  %32 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %5, i64 0, i32 4, i32 0
  %33 = bitcast %class.SkImageFilter** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = or i64 %31, %34
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %25, %3
  %38 = call dereferenceable(16) %struct.SkRect* @_ZNK7SkPaint19doComputeFastBoundsERK6SkRectPS0_NS_5StyleE(%class.SkPaint* nonnull %5, %struct.SkRect* nonnull dereferenceable(16) %4, %struct.SkRect* nonnull %4, i8 zeroext %23) #6
  br label %39

39:                                               ; preds = %25, %37
  %40 = phi %struct.SkRect* [ %38, %37 ], [ %4, %25 ]
  %41 = bitcast %struct.SkRect* %40 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 4
  %43 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %40, i64 0, i32 2
  %44 = bitcast float* %43 to <2 x float>*
  %45 = load <2 x float>, <2 x float>* %44, align 4
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %46 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %42, 0
  %47 = insertvalue { <2 x float>, <2 x float> } %46, <2 x float> %45, 1
  ret { <2 x float>, <2 x float> } %47
}

declare dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #6
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

declare zeroext i1 @_ZNK7SkPaint11getFillPathERK6SkPathPS0_PK6SkRectf(%class.SkPaint*, %class.SkPath* dereferenceable(16), %class.SkPath*, %struct.SkRect*, float) local_unnamed_addr #1

declare dereferenceable(16) %struct.SkRect* @_ZNK7SkPaint19doComputeFastBoundsERK6SkRectPS0_NS_5StyleE(%class.SkPaint*, %struct.SkRect* dereferenceable(16), %struct.SkRect*, i8 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
