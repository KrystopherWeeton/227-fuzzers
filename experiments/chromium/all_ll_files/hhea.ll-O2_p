; ModuleID = '../../third_party/ots/src/src/hhea.cc'
source_filename = "../../third_party/ots/src/src/hhea.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeHHEA" = type { %"class.ots::OpenTypeMetricsHeader.base", [2 x i8] }
%"class.ots::OpenTypeMetricsHeader.base" = type <{ %"class.ots::Table.base", [3 x i8], i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16 }>
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.ots::OpenTypeMetricsHeader" = type <{ %"class.ots::Table.base", [3 x i8], i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, [2 x i8] }>
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN3ots5TableD2Ev = comdat any

$_ZN3ots12OpenTypeHHEAD0Ev = comdat any

@.str = private unnamed_addr constant [29 x i8] c"Failed to read table version\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Unsupported majorVersion: %d\00", align 1
@_ZTVN3ots12OpenTypeHHEAE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::Table"*)* @_ZN3ots5TableD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeHHEA"*)* @_ZN3ots12OpenTypeHHEAD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeHHEA"*, i8*, i64)* @_ZN3ots12OpenTypeHHEA5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeMetricsHeader"*, %"class.ots::OTSStream"*)* @_ZN3ots21OpenTypeMetricsHeader9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::Table"*)* @_ZN3ots5Table15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeHHEA5ParseEPKhm(%"class.ots::OpenTypeHHEA"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.ots::OpenTypeHHEA"* %0 to %"class.ots::OpenTypeMetricsHeader"*
  %5 = icmp ult i64 %2, 4
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = bitcast %"class.ots::OpenTypeHHEA"* %0 to %"class.ots::Table"*
  %8 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #5
  br label %21

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.ots::OpenTypeHHEA", %"class.ots::OpenTypeHHEA"* %0, i64 0, i32 0, i32 2
  %11 = bitcast i8* %1 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = tail call i32 @llvm.bswap.i32(i32 %12) #5
  store i32 %13, i32* %10, align 4
  %14 = lshr i32 %13, 16
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %19, label %16

16:                                               ; preds = %9
  %17 = bitcast %"class.ots::OpenTypeHHEA"* %0 to %"class.ots::Table"*
  %18 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %17, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 %14) #5
  br label %21

19:                                               ; preds = %9
  %20 = tail call zeroext i1 @_ZN3ots21OpenTypeMetricsHeader5ParseEPKhm(%"class.ots::OpenTypeMetricsHeader"* %4, i8* %1, i64 %2) #5
  br label %21

21:                                               ; preds = %19, %16, %6
  %22 = phi i1 [ %18, %16 ], [ %20, %19 ], [ %8, %6 ]
  ret i1 %22
}

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #1

declare zeroext i1 @_ZN3ots21OpenTypeMetricsHeader5ParseEPKhm(%"class.ots::OpenTypeMetricsHeader"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots5TableD2Ev(%"class.ots::Table"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeHHEAD0Ev(%"class.ots::OpenTypeHHEA"*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %"class.ots::OpenTypeHHEA"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

declare zeroext i1 @_ZN3ots21OpenTypeMetricsHeader9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeMetricsHeader"*, %"class.ots::OTSStream"*) unnamed_addr #1

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
