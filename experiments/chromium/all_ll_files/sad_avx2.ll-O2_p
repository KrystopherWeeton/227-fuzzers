; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sad_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sad_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad64x64_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = sext i32 %3 to i64
  %6 = sext i32 %1 to i64
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi <8 x i32> [ zeroinitializer, %4 ], [ %45, %7 ]
  %9 = phi i32 [ 0, %4 ], [ %48, %7 ]
  %10 = phi i8* [ %0, %4 ], [ %47, %7 ]
  %11 = phi i8* [ %2, %4 ], [ %46, %7 ]
  %12 = bitcast i8* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 32
  %15 = bitcast i8* %14 to <32 x i8>*
  %16 = load <32 x i8>, <32 x i8>* %15, align 1
  %17 = bitcast i8* %10 to <32 x i8>*
  %18 = load <32 x i8>, <32 x i8>* %17, align 1
  %19 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %13, <32 x i8> %18) #2
  %20 = getelementptr inbounds i8, i8* %10, i64 32
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %16, <32 x i8> %22) #2
  %24 = bitcast <4 x i64> %19 to <8 x i32>
  %25 = bitcast <4 x i64> %23 to <8 x i32>
  %26 = add <8 x i32> %8, %24
  %27 = add <8 x i32> %26, %25
  %28 = getelementptr inbounds i8, i8* %11, i64 %5
  %29 = getelementptr inbounds i8, i8* %10, i64 %6
  %30 = bitcast i8* %28 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %28, i64 32
  %33 = bitcast i8* %32 to <32 x i8>*
  %34 = load <32 x i8>, <32 x i8>* %33, align 1
  %35 = bitcast i8* %29 to <32 x i8>*
  %36 = load <32 x i8>, <32 x i8>* %35, align 1
  %37 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %31, <32 x i8> %36) #2
  %38 = getelementptr inbounds i8, i8* %29, i64 32
  %39 = bitcast i8* %38 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %34, <32 x i8> %40) #2
  %42 = bitcast <4 x i64> %37 to <8 x i32>
  %43 = bitcast <4 x i64> %41 to <8 x i32>
  %44 = add <8 x i32> %27, %42
  %45 = add <8 x i32> %44, %43
  %46 = getelementptr inbounds i8, i8* %28, i64 %5
  %47 = getelementptr inbounds i8, i8* %29, i64 %6
  %48 = add nuw nsw i32 %9, 2
  %49 = icmp eq i32 %48, 64
  br i1 %49, label %50, label %7

50:                                               ; preds = %7
  %51 = bitcast <8 x i32> %45 to <32 x i8>
  %52 = shufflevector <32 x i8> %51, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %53 = bitcast <32 x i8> %52 to <8 x i32>
  %54 = add <8 x i32> %45, %53
  %55 = bitcast <8 x i32> %54 to <4 x i64>
  %56 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %58 = bitcast <2 x i64> %57 to <4 x i32>
  %59 = bitcast <2 x i64> %56 to <4 x i32>
  %60 = add <4 x i32> %59, %58
  %61 = extractelement <4 x i32> %60, i32 0
  ret i32 %61
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad64x32_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = sext i32 %3 to i64
  %6 = sext i32 %1 to i64
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi <8 x i32> [ zeroinitializer, %4 ], [ %45, %7 ]
  %9 = phi i32 [ 0, %4 ], [ %48, %7 ]
  %10 = phi i8* [ %0, %4 ], [ %47, %7 ]
  %11 = phi i8* [ %2, %4 ], [ %46, %7 ]
  %12 = bitcast i8* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 32
  %15 = bitcast i8* %14 to <32 x i8>*
  %16 = load <32 x i8>, <32 x i8>* %15, align 1
  %17 = bitcast i8* %10 to <32 x i8>*
  %18 = load <32 x i8>, <32 x i8>* %17, align 1
  %19 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %13, <32 x i8> %18) #2
  %20 = getelementptr inbounds i8, i8* %10, i64 32
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %16, <32 x i8> %22) #2
  %24 = bitcast <4 x i64> %19 to <8 x i32>
  %25 = bitcast <4 x i64> %23 to <8 x i32>
  %26 = add <8 x i32> %8, %24
  %27 = add <8 x i32> %26, %25
  %28 = getelementptr inbounds i8, i8* %11, i64 %5
  %29 = getelementptr inbounds i8, i8* %10, i64 %6
  %30 = bitcast i8* %28 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %28, i64 32
  %33 = bitcast i8* %32 to <32 x i8>*
  %34 = load <32 x i8>, <32 x i8>* %33, align 1
  %35 = bitcast i8* %29 to <32 x i8>*
  %36 = load <32 x i8>, <32 x i8>* %35, align 1
  %37 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %31, <32 x i8> %36) #2
  %38 = getelementptr inbounds i8, i8* %29, i64 32
  %39 = bitcast i8* %38 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %34, <32 x i8> %40) #2
  %42 = bitcast <4 x i64> %37 to <8 x i32>
  %43 = bitcast <4 x i64> %41 to <8 x i32>
  %44 = add <8 x i32> %27, %42
  %45 = add <8 x i32> %44, %43
  %46 = getelementptr inbounds i8, i8* %28, i64 %5
  %47 = getelementptr inbounds i8, i8* %29, i64 %6
  %48 = add nuw nsw i32 %9, 2
  %49 = icmp eq i32 %48, 32
  br i1 %49, label %50, label %7

50:                                               ; preds = %7
  %51 = bitcast <8 x i32> %45 to <32 x i8>
  %52 = shufflevector <32 x i8> %51, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %53 = bitcast <32 x i8> %52 to <8 x i32>
  %54 = add <8 x i32> %45, %53
  %55 = bitcast <8 x i32> %54 to <4 x i64>
  %56 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %58 = bitcast <2 x i64> %57 to <4 x i32>
  %59 = bitcast <2 x i64> %56 to <4 x i32>
  %60 = add <4 x i32> %59, %58
  %61 = extractelement <4 x i32> %60, i32 0
  ret i32 %61
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x64_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = shl i32 %3, 1
  %6 = shl i32 %1, 1
  %7 = sext i32 %3 to i64
  %8 = sext i32 %1 to i64
  %9 = sext i32 %5 to i64
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %11, %4
  %12 = phi <8 x i32> [ zeroinitializer, %4 ], [ %49, %11 ]
  %13 = phi i32 [ 0, %4 ], [ %52, %11 ]
  %14 = phi i8* [ %0, %4 ], [ %51, %11 ]
  %15 = phi i8* [ %2, %4 ], [ %50, %11 ]
  %16 = bitcast i8* %15 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  %18 = getelementptr inbounds i8, i8* %15, i64 %7
  %19 = bitcast i8* %18 to <32 x i8>*
  %20 = load <32 x i8>, <32 x i8>* %19, align 1
  %21 = bitcast i8* %14 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %17, <32 x i8> %22) #2
  %24 = getelementptr inbounds i8, i8* %14, i64 %8
  %25 = bitcast i8* %24 to <32 x i8>*
  %26 = load <32 x i8>, <32 x i8>* %25, align 1
  %27 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %20, <32 x i8> %26) #2
  %28 = bitcast <4 x i64> %23 to <8 x i32>
  %29 = bitcast <4 x i64> %27 to <8 x i32>
  %30 = add <8 x i32> %12, %28
  %31 = add <8 x i32> %30, %29
  %32 = getelementptr inbounds i8, i8* %15, i64 %9
  %33 = getelementptr inbounds i8, i8* %14, i64 %10
  %34 = bitcast i8* %32 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %32, i64 %7
  %37 = bitcast i8* %36 to <32 x i8>*
  %38 = load <32 x i8>, <32 x i8>* %37, align 1
  %39 = bitcast i8* %33 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %35, <32 x i8> %40) #2
  %42 = getelementptr inbounds i8, i8* %33, i64 %8
  %43 = bitcast i8* %42 to <32 x i8>*
  %44 = load <32 x i8>, <32 x i8>* %43, align 1
  %45 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %38, <32 x i8> %44) #2
  %46 = bitcast <4 x i64> %41 to <8 x i32>
  %47 = bitcast <4 x i64> %45 to <8 x i32>
  %48 = add <8 x i32> %31, %46
  %49 = add <8 x i32> %48, %47
  %50 = getelementptr inbounds i8, i8* %32, i64 %9
  %51 = getelementptr inbounds i8, i8* %33, i64 %10
  %52 = add nuw nsw i32 %13, 2
  %53 = icmp eq i32 %52, 32
  br i1 %53, label %54, label %11

54:                                               ; preds = %11
  %55 = bitcast <8 x i32> %49 to <32 x i8>
  %56 = shufflevector <32 x i8> %55, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %57 = bitcast <32 x i8> %56 to <8 x i32>
  %58 = add <8 x i32> %49, %57
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %62 = bitcast <2 x i64> %61 to <4 x i32>
  %63 = bitcast <2 x i64> %60 to <4 x i32>
  %64 = add <4 x i32> %63, %62
  %65 = extractelement <4 x i32> %64, i32 0
  ret i32 %65
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x32_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = shl i32 %3, 1
  %6 = shl i32 %1, 1
  %7 = sext i32 %3 to i64
  %8 = sext i32 %1 to i64
  %9 = sext i32 %5 to i64
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %11, %4
  %12 = phi <8 x i32> [ zeroinitializer, %4 ], [ %49, %11 ]
  %13 = phi i32 [ 0, %4 ], [ %52, %11 ]
  %14 = phi i8* [ %0, %4 ], [ %51, %11 ]
  %15 = phi i8* [ %2, %4 ], [ %50, %11 ]
  %16 = bitcast i8* %15 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  %18 = getelementptr inbounds i8, i8* %15, i64 %7
  %19 = bitcast i8* %18 to <32 x i8>*
  %20 = load <32 x i8>, <32 x i8>* %19, align 1
  %21 = bitcast i8* %14 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %17, <32 x i8> %22) #2
  %24 = getelementptr inbounds i8, i8* %14, i64 %8
  %25 = bitcast i8* %24 to <32 x i8>*
  %26 = load <32 x i8>, <32 x i8>* %25, align 1
  %27 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %20, <32 x i8> %26) #2
  %28 = bitcast <4 x i64> %23 to <8 x i32>
  %29 = bitcast <4 x i64> %27 to <8 x i32>
  %30 = add <8 x i32> %12, %28
  %31 = add <8 x i32> %30, %29
  %32 = getelementptr inbounds i8, i8* %15, i64 %9
  %33 = getelementptr inbounds i8, i8* %14, i64 %10
  %34 = bitcast i8* %32 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %32, i64 %7
  %37 = bitcast i8* %36 to <32 x i8>*
  %38 = load <32 x i8>, <32 x i8>* %37, align 1
  %39 = bitcast i8* %33 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %35, <32 x i8> %40) #2
  %42 = getelementptr inbounds i8, i8* %33, i64 %8
  %43 = bitcast i8* %42 to <32 x i8>*
  %44 = load <32 x i8>, <32 x i8>* %43, align 1
  %45 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %38, <32 x i8> %44) #2
  %46 = bitcast <4 x i64> %41 to <8 x i32>
  %47 = bitcast <4 x i64> %45 to <8 x i32>
  %48 = add <8 x i32> %31, %46
  %49 = add <8 x i32> %48, %47
  %50 = getelementptr inbounds i8, i8* %32, i64 %9
  %51 = getelementptr inbounds i8, i8* %33, i64 %10
  %52 = add nuw nsw i32 %13, 2
  %53 = icmp eq i32 %52, 16
  br i1 %53, label %54, label %11

54:                                               ; preds = %11
  %55 = bitcast <8 x i32> %49 to <32 x i8>
  %56 = shufflevector <32 x i8> %55, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %57 = bitcast <32 x i8> %56 to <8 x i32>
  %58 = add <8 x i32> %49, %57
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %62 = bitcast <2 x i64> %61 to <4 x i32>
  %63 = bitcast <2 x i64> %60 to <4 x i32>
  %64 = add <4 x i32> %63, %62
  %65 = extractelement <4 x i32> %64, i32 0
  ret i32 %65
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x16_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = shl i32 %3, 1
  %6 = shl i32 %1, 1
  %7 = sext i32 %3 to i64
  %8 = sext i32 %1 to i64
  %9 = sext i32 %5 to i64
  %10 = sext i32 %6 to i64
  %11 = bitcast i8* %2 to <32 x i8>*
  %12 = load <32 x i8>, <32 x i8>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 %7
  %14 = bitcast i8* %13 to <32 x i8>*
  %15 = load <32 x i8>, <32 x i8>* %14, align 1
  %16 = bitcast i8* %0 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  %18 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %12, <32 x i8> %17) #2
  %19 = getelementptr inbounds i8, i8* %0, i64 %8
  %20 = bitcast i8* %19 to <32 x i8>*
  %21 = load <32 x i8>, <32 x i8>* %20, align 1
  %22 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %15, <32 x i8> %21) #2
  %23 = bitcast <4 x i64> %18 to <8 x i32>
  %24 = bitcast <4 x i64> %22 to <8 x i32>
  %25 = add <8 x i32> %23, %24
  %26 = getelementptr inbounds i8, i8* %2, i64 %9
  %27 = getelementptr inbounds i8, i8* %0, i64 %10
  %28 = bitcast i8* %26 to <32 x i8>*
  %29 = load <32 x i8>, <32 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %26, i64 %7
  %31 = bitcast i8* %30 to <32 x i8>*
  %32 = load <32 x i8>, <32 x i8>* %31, align 1
  %33 = bitcast i8* %27 to <32 x i8>*
  %34 = load <32 x i8>, <32 x i8>* %33, align 1
  %35 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %29, <32 x i8> %34) #2
  %36 = getelementptr inbounds i8, i8* %27, i64 %8
  %37 = bitcast i8* %36 to <32 x i8>*
  %38 = load <32 x i8>, <32 x i8>* %37, align 1
  %39 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %32, <32 x i8> %38) #2
  %40 = bitcast <4 x i64> %35 to <8 x i32>
  %41 = bitcast <4 x i64> %39 to <8 x i32>
  %42 = add <8 x i32> %25, %40
  %43 = add <8 x i32> %42, %41
  %44 = getelementptr inbounds i8, i8* %26, i64 %9
  %45 = getelementptr inbounds i8, i8* %27, i64 %10
  %46 = bitcast i8* %44 to <32 x i8>*
  %47 = load <32 x i8>, <32 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %44, i64 %7
  %49 = bitcast i8* %48 to <32 x i8>*
  %50 = load <32 x i8>, <32 x i8>* %49, align 1
  %51 = bitcast i8* %45 to <32 x i8>*
  %52 = load <32 x i8>, <32 x i8>* %51, align 1
  %53 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %47, <32 x i8> %52) #2
  %54 = getelementptr inbounds i8, i8* %45, i64 %8
  %55 = bitcast i8* %54 to <32 x i8>*
  %56 = load <32 x i8>, <32 x i8>* %55, align 1
  %57 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %50, <32 x i8> %56) #2
  %58 = bitcast <4 x i64> %53 to <8 x i32>
  %59 = bitcast <4 x i64> %57 to <8 x i32>
  %60 = add <8 x i32> %43, %58
  %61 = add <8 x i32> %60, %59
  %62 = getelementptr inbounds i8, i8* %44, i64 %9
  %63 = getelementptr inbounds i8, i8* %45, i64 %10
  %64 = bitcast i8* %62 to <32 x i8>*
  %65 = load <32 x i8>, <32 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %7
  %67 = bitcast i8* %66 to <32 x i8>*
  %68 = load <32 x i8>, <32 x i8>* %67, align 1
  %69 = bitcast i8* %63 to <32 x i8>*
  %70 = load <32 x i8>, <32 x i8>* %69, align 1
  %71 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %65, <32 x i8> %70) #2
  %72 = getelementptr inbounds i8, i8* %63, i64 %8
  %73 = bitcast i8* %72 to <32 x i8>*
  %74 = load <32 x i8>, <32 x i8>* %73, align 1
  %75 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %68, <32 x i8> %74) #2
  %76 = bitcast <4 x i64> %71 to <8 x i32>
  %77 = bitcast <4 x i64> %75 to <8 x i32>
  %78 = add <8 x i32> %61, %76
  %79 = add <8 x i32> %78, %77
  %80 = getelementptr inbounds i8, i8* %62, i64 %9
  %81 = getelementptr inbounds i8, i8* %63, i64 %10
  %82 = bitcast i8* %80 to <32 x i8>*
  %83 = load <32 x i8>, <32 x i8>* %82, align 1
  %84 = getelementptr inbounds i8, i8* %80, i64 %7
  %85 = bitcast i8* %84 to <32 x i8>*
  %86 = load <32 x i8>, <32 x i8>* %85, align 1
  %87 = bitcast i8* %81 to <32 x i8>*
  %88 = load <32 x i8>, <32 x i8>* %87, align 1
  %89 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %83, <32 x i8> %88) #2
  %90 = getelementptr inbounds i8, i8* %81, i64 %8
  %91 = bitcast i8* %90 to <32 x i8>*
  %92 = load <32 x i8>, <32 x i8>* %91, align 1
  %93 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %86, <32 x i8> %92) #2
  %94 = bitcast <4 x i64> %89 to <8 x i32>
  %95 = bitcast <4 x i64> %93 to <8 x i32>
  %96 = add <8 x i32> %79, %94
  %97 = add <8 x i32> %96, %95
  %98 = getelementptr inbounds i8, i8* %80, i64 %9
  %99 = getelementptr inbounds i8, i8* %81, i64 %10
  %100 = bitcast i8* %98 to <32 x i8>*
  %101 = load <32 x i8>, <32 x i8>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %98, i64 %7
  %103 = bitcast i8* %102 to <32 x i8>*
  %104 = load <32 x i8>, <32 x i8>* %103, align 1
  %105 = bitcast i8* %99 to <32 x i8>*
  %106 = load <32 x i8>, <32 x i8>* %105, align 1
  %107 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %101, <32 x i8> %106) #2
  %108 = getelementptr inbounds i8, i8* %99, i64 %8
  %109 = bitcast i8* %108 to <32 x i8>*
  %110 = load <32 x i8>, <32 x i8>* %109, align 1
  %111 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %104, <32 x i8> %110) #2
  %112 = bitcast <4 x i64> %107 to <8 x i32>
  %113 = bitcast <4 x i64> %111 to <8 x i32>
  %114 = add <8 x i32> %97, %112
  %115 = add <8 x i32> %114, %113
  %116 = getelementptr inbounds i8, i8* %98, i64 %9
  %117 = getelementptr inbounds i8, i8* %99, i64 %10
  %118 = bitcast i8* %116 to <32 x i8>*
  %119 = load <32 x i8>, <32 x i8>* %118, align 1
  %120 = getelementptr inbounds i8, i8* %116, i64 %7
  %121 = bitcast i8* %120 to <32 x i8>*
  %122 = load <32 x i8>, <32 x i8>* %121, align 1
  %123 = bitcast i8* %117 to <32 x i8>*
  %124 = load <32 x i8>, <32 x i8>* %123, align 1
  %125 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %119, <32 x i8> %124) #2
  %126 = getelementptr inbounds i8, i8* %117, i64 %8
  %127 = bitcast i8* %126 to <32 x i8>*
  %128 = load <32 x i8>, <32 x i8>* %127, align 1
  %129 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %122, <32 x i8> %128) #2
  %130 = bitcast <4 x i64> %125 to <8 x i32>
  %131 = bitcast <4 x i64> %129 to <8 x i32>
  %132 = add <8 x i32> %115, %130
  %133 = add <8 x i32> %132, %131
  %134 = getelementptr inbounds i8, i8* %116, i64 %9
  %135 = getelementptr inbounds i8, i8* %117, i64 %10
  %136 = bitcast i8* %134 to <32 x i8>*
  %137 = load <32 x i8>, <32 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %134, i64 %7
  %139 = bitcast i8* %138 to <32 x i8>*
  %140 = load <32 x i8>, <32 x i8>* %139, align 1
  %141 = bitcast i8* %135 to <32 x i8>*
  %142 = load <32 x i8>, <32 x i8>* %141, align 1
  %143 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %137, <32 x i8> %142) #2
  %144 = getelementptr inbounds i8, i8* %135, i64 %8
  %145 = bitcast i8* %144 to <32 x i8>*
  %146 = load <32 x i8>, <32 x i8>* %145, align 1
  %147 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %140, <32 x i8> %146) #2
  %148 = bitcast <4 x i64> %143 to <8 x i32>
  %149 = bitcast <4 x i64> %147 to <8 x i32>
  %150 = add <8 x i32> %133, %148
  %151 = add <8 x i32> %150, %149
  %152 = bitcast <8 x i32> %151 to <32 x i8>
  %153 = shufflevector <32 x i8> %152, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %154 = bitcast <32 x i8> %153 to <8 x i32>
  %155 = add <8 x i32> %151, %154
  %156 = bitcast <8 x i32> %155 to <4 x i64>
  %157 = shufflevector <4 x i64> %156, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %159 = bitcast <2 x i64> %158 to <4 x i32>
  %160 = bitcast <2 x i64> %157 to <4 x i32>
  %161 = add <4 x i32> %160, %159
  %162 = extractelement <4 x i32> %161, i32 0
  ret i32 %162
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad64x64_avg_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = sext i32 %3 to i64
  %7 = sext i32 %1 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <8 x i32> [ zeroinitializer, %5 ], [ %36, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %40, %8 ]
  %11 = phi i8* [ %4, %5 ], [ %39, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %38, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %37, %8 ]
  %14 = bitcast i8* %13 to <32 x i8>*
  %15 = load <32 x i8>, <32 x i8>* %14, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 32
  %17 = bitcast i8* %16 to <32 x i8>*
  %18 = load <32 x i8>, <32 x i8>* %17, align 1
  %19 = bitcast i8* %11 to <32 x i8>*
  %20 = load <32 x i8>, <32 x i8>* %19, align 1
  %21 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %15, <32 x i8> %20) #2
  %22 = getelementptr inbounds i8, i8* %11, i64 32
  %23 = bitcast i8* %22 to <32 x i8>*
  %24 = load <32 x i8>, <32 x i8>* %23, align 1
  %25 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %18, <32 x i8> %24) #2
  %26 = bitcast i8* %12 to <32 x i8>*
  %27 = load <32 x i8>, <32 x i8>* %26, align 1
  %28 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %21, <32 x i8> %27) #2
  %29 = getelementptr inbounds i8, i8* %12, i64 32
  %30 = bitcast i8* %29 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %25, <32 x i8> %31) #2
  %33 = bitcast <4 x i64> %28 to <8 x i32>
  %34 = bitcast <4 x i64> %32 to <8 x i32>
  %35 = add <8 x i32> %9, %33
  %36 = add <8 x i32> %35, %34
  %37 = getelementptr inbounds i8, i8* %13, i64 %6
  %38 = getelementptr inbounds i8, i8* %12, i64 %7
  %39 = getelementptr inbounds i8, i8* %11, i64 64
  %40 = add nuw nsw i32 %10, 1
  %41 = icmp eq i32 %40, 64
  br i1 %41, label %42, label %8

42:                                               ; preds = %8
  %43 = bitcast <8 x i32> %36 to <32 x i8>
  %44 = shufflevector <32 x i8> %43, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %45 = bitcast <32 x i8> %44 to <8 x i32>
  %46 = add <8 x i32> %36, %45
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %50 = bitcast <2 x i64> %49 to <4 x i32>
  %51 = bitcast <2 x i64> %48 to <4 x i32>
  %52 = add <4 x i32> %51, %50
  %53 = extractelement <4 x i32> %52, i32 0
  ret i32 %53
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad64x32_avg_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = sext i32 %3 to i64
  %7 = sext i32 %1 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <8 x i32> [ zeroinitializer, %5 ], [ %36, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %40, %8 ]
  %11 = phi i8* [ %4, %5 ], [ %39, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %38, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %37, %8 ]
  %14 = bitcast i8* %13 to <32 x i8>*
  %15 = load <32 x i8>, <32 x i8>* %14, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 32
  %17 = bitcast i8* %16 to <32 x i8>*
  %18 = load <32 x i8>, <32 x i8>* %17, align 1
  %19 = bitcast i8* %11 to <32 x i8>*
  %20 = load <32 x i8>, <32 x i8>* %19, align 1
  %21 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %15, <32 x i8> %20) #2
  %22 = getelementptr inbounds i8, i8* %11, i64 32
  %23 = bitcast i8* %22 to <32 x i8>*
  %24 = load <32 x i8>, <32 x i8>* %23, align 1
  %25 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %18, <32 x i8> %24) #2
  %26 = bitcast i8* %12 to <32 x i8>*
  %27 = load <32 x i8>, <32 x i8>* %26, align 1
  %28 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %21, <32 x i8> %27) #2
  %29 = getelementptr inbounds i8, i8* %12, i64 32
  %30 = bitcast i8* %29 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %25, <32 x i8> %31) #2
  %33 = bitcast <4 x i64> %28 to <8 x i32>
  %34 = bitcast <4 x i64> %32 to <8 x i32>
  %35 = add <8 x i32> %9, %33
  %36 = add <8 x i32> %35, %34
  %37 = getelementptr inbounds i8, i8* %13, i64 %6
  %38 = getelementptr inbounds i8, i8* %12, i64 %7
  %39 = getelementptr inbounds i8, i8* %11, i64 64
  %40 = add nuw nsw i32 %10, 1
  %41 = icmp eq i32 %40, 32
  br i1 %41, label %42, label %8

42:                                               ; preds = %8
  %43 = bitcast <8 x i32> %36 to <32 x i8>
  %44 = shufflevector <32 x i8> %43, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %45 = bitcast <32 x i8> %44 to <8 x i32>
  %46 = add <8 x i32> %36, %45
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %50 = bitcast <2 x i64> %49 to <4 x i32>
  %51 = bitcast <2 x i64> %48 to <4 x i32>
  %52 = add <4 x i32> %51, %50
  %53 = extractelement <4 x i32> %52, i32 0
  ret i32 %53
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x64_avg_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = shl i32 %1, 1
  %8 = sext i32 %3 to i64
  %9 = sext i32 %1 to i64
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  br label %12

12:                                               ; preds = %12, %5
  %13 = phi <8 x i32> [ zeroinitializer, %5 ], [ %40, %12 ]
  %14 = phi i32 [ 0, %5 ], [ %44, %12 ]
  %15 = phi i8* [ %4, %5 ], [ %43, %12 ]
  %16 = phi i8* [ %0, %5 ], [ %42, %12 ]
  %17 = phi i8* [ %2, %5 ], [ %41, %12 ]
  %18 = bitcast i8* %17 to <32 x i8>*
  %19 = load <32 x i8>, <32 x i8>* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %8
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = bitcast i8* %15 to <32 x i8>*
  %24 = load <32 x i8>, <32 x i8>* %23, align 1
  %25 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %19, <32 x i8> %24) #2
  %26 = getelementptr inbounds i8, i8* %15, i64 32
  %27 = bitcast i8* %26 to <32 x i8>*
  %28 = load <32 x i8>, <32 x i8>* %27, align 1
  %29 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %22, <32 x i8> %28) #2
  %30 = bitcast i8* %16 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %25, <32 x i8> %31) #2
  %33 = getelementptr inbounds i8, i8* %16, i64 %9
  %34 = bitcast i8* %33 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %29, <32 x i8> %35) #2
  %37 = bitcast <4 x i64> %32 to <8 x i32>
  %38 = bitcast <4 x i64> %36 to <8 x i32>
  %39 = add <8 x i32> %13, %37
  %40 = add <8 x i32> %39, %38
  %41 = getelementptr inbounds i8, i8* %17, i64 %10
  %42 = getelementptr inbounds i8, i8* %16, i64 %11
  %43 = getelementptr inbounds i8, i8* %15, i64 64
  %44 = add nuw nsw i32 %14, 1
  %45 = icmp eq i32 %44, 32
  br i1 %45, label %46, label %12

46:                                               ; preds = %12
  %47 = bitcast <8 x i32> %40 to <32 x i8>
  %48 = shufflevector <32 x i8> %47, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %49 = bitcast <32 x i8> %48 to <8 x i32>
  %50 = add <8 x i32> %40, %49
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %54 = bitcast <2 x i64> %53 to <4 x i32>
  %55 = bitcast <2 x i64> %52 to <4 x i32>
  %56 = add <4 x i32> %55, %54
  %57 = extractelement <4 x i32> %56, i32 0
  ret i32 %57
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x32_avg_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = shl i32 %1, 1
  %8 = sext i32 %3 to i64
  %9 = sext i32 %1 to i64
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  br label %12

12:                                               ; preds = %12, %5
  %13 = phi <8 x i32> [ zeroinitializer, %5 ], [ %40, %12 ]
  %14 = phi i32 [ 0, %5 ], [ %44, %12 ]
  %15 = phi i8* [ %4, %5 ], [ %43, %12 ]
  %16 = phi i8* [ %0, %5 ], [ %42, %12 ]
  %17 = phi i8* [ %2, %5 ], [ %41, %12 ]
  %18 = bitcast i8* %17 to <32 x i8>*
  %19 = load <32 x i8>, <32 x i8>* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %8
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = bitcast i8* %15 to <32 x i8>*
  %24 = load <32 x i8>, <32 x i8>* %23, align 1
  %25 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %19, <32 x i8> %24) #2
  %26 = getelementptr inbounds i8, i8* %15, i64 32
  %27 = bitcast i8* %26 to <32 x i8>*
  %28 = load <32 x i8>, <32 x i8>* %27, align 1
  %29 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %22, <32 x i8> %28) #2
  %30 = bitcast i8* %16 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %25, <32 x i8> %31) #2
  %33 = getelementptr inbounds i8, i8* %16, i64 %9
  %34 = bitcast i8* %33 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %29, <32 x i8> %35) #2
  %37 = bitcast <4 x i64> %32 to <8 x i32>
  %38 = bitcast <4 x i64> %36 to <8 x i32>
  %39 = add <8 x i32> %13, %37
  %40 = add <8 x i32> %39, %38
  %41 = getelementptr inbounds i8, i8* %17, i64 %10
  %42 = getelementptr inbounds i8, i8* %16, i64 %11
  %43 = getelementptr inbounds i8, i8* %15, i64 64
  %44 = add nuw nsw i32 %14, 1
  %45 = icmp eq i32 %44, 16
  br i1 %45, label %46, label %12

46:                                               ; preds = %12
  %47 = bitcast <8 x i32> %40 to <32 x i8>
  %48 = shufflevector <32 x i8> %47, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %49 = bitcast <32 x i8> %48 to <8 x i32>
  %50 = add <8 x i32> %40, %49
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %54 = bitcast <2 x i64> %53 to <4 x i32>
  %55 = bitcast <2 x i64> %52 to <4 x i32>
  %56 = add <4 x i32> %55, %54
  %57 = extractelement <4 x i32> %56, i32 0
  ret i32 %57
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_sad32x16_avg_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = shl i32 %1, 1
  %8 = sext i32 %3 to i64
  %9 = sext i32 %1 to i64
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  %12 = bitcast i8* %2 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 %8
  %15 = bitcast i8* %14 to <32 x i8>*
  %16 = load <32 x i8>, <32 x i8>* %15, align 1
  %17 = bitcast i8* %4 to <32 x i8>*
  %18 = load <32 x i8>, <32 x i8>* %17, align 1
  %19 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %13, <32 x i8> %18) #2
  %20 = getelementptr inbounds i8, i8* %4, i64 32
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %16, <32 x i8> %22) #2
  %24 = bitcast i8* %0 to <32 x i8>*
  %25 = load <32 x i8>, <32 x i8>* %24, align 1
  %26 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %19, <32 x i8> %25) #2
  %27 = getelementptr inbounds i8, i8* %0, i64 %9
  %28 = bitcast i8* %27 to <32 x i8>*
  %29 = load <32 x i8>, <32 x i8>* %28, align 1
  %30 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %23, <32 x i8> %29) #2
  %31 = bitcast <4 x i64> %26 to <8 x i32>
  %32 = bitcast <4 x i64> %30 to <8 x i32>
  %33 = add <8 x i32> %31, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 %10
  %35 = getelementptr inbounds i8, i8* %0, i64 %11
  %36 = getelementptr inbounds i8, i8* %4, i64 64
  %37 = bitcast i8* %34 to <32 x i8>*
  %38 = load <32 x i8>, <32 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %34, i64 %8
  %40 = bitcast i8* %39 to <32 x i8>*
  %41 = load <32 x i8>, <32 x i8>* %40, align 1
  %42 = bitcast i8* %36 to <32 x i8>*
  %43 = load <32 x i8>, <32 x i8>* %42, align 1
  %44 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %38, <32 x i8> %43) #2
  %45 = getelementptr inbounds i8, i8* %4, i64 96
  %46 = bitcast i8* %45 to <32 x i8>*
  %47 = load <32 x i8>, <32 x i8>* %46, align 1
  %48 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %41, <32 x i8> %47) #2
  %49 = bitcast i8* %35 to <32 x i8>*
  %50 = load <32 x i8>, <32 x i8>* %49, align 1
  %51 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %44, <32 x i8> %50) #2
  %52 = getelementptr inbounds i8, i8* %35, i64 %9
  %53 = bitcast i8* %52 to <32 x i8>*
  %54 = load <32 x i8>, <32 x i8>* %53, align 1
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %48, <32 x i8> %54) #2
  %56 = bitcast <4 x i64> %51 to <8 x i32>
  %57 = bitcast <4 x i64> %55 to <8 x i32>
  %58 = add <8 x i32> %33, %56
  %59 = add <8 x i32> %58, %57
  %60 = getelementptr inbounds i8, i8* %34, i64 %10
  %61 = getelementptr inbounds i8, i8* %35, i64 %11
  %62 = getelementptr inbounds i8, i8* %4, i64 128
  %63 = bitcast i8* %60 to <32 x i8>*
  %64 = load <32 x i8>, <32 x i8>* %63, align 1
  %65 = getelementptr inbounds i8, i8* %60, i64 %8
  %66 = bitcast i8* %65 to <32 x i8>*
  %67 = load <32 x i8>, <32 x i8>* %66, align 1
  %68 = bitcast i8* %62 to <32 x i8>*
  %69 = load <32 x i8>, <32 x i8>* %68, align 1
  %70 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %64, <32 x i8> %69) #2
  %71 = getelementptr inbounds i8, i8* %4, i64 160
  %72 = bitcast i8* %71 to <32 x i8>*
  %73 = load <32 x i8>, <32 x i8>* %72, align 1
  %74 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %67, <32 x i8> %73) #2
  %75 = bitcast i8* %61 to <32 x i8>*
  %76 = load <32 x i8>, <32 x i8>* %75, align 1
  %77 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %70, <32 x i8> %76) #2
  %78 = getelementptr inbounds i8, i8* %61, i64 %9
  %79 = bitcast i8* %78 to <32 x i8>*
  %80 = load <32 x i8>, <32 x i8>* %79, align 1
  %81 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %74, <32 x i8> %80) #2
  %82 = bitcast <4 x i64> %77 to <8 x i32>
  %83 = bitcast <4 x i64> %81 to <8 x i32>
  %84 = add <8 x i32> %59, %82
  %85 = add <8 x i32> %84, %83
  %86 = getelementptr inbounds i8, i8* %60, i64 %10
  %87 = getelementptr inbounds i8, i8* %61, i64 %11
  %88 = getelementptr inbounds i8, i8* %4, i64 192
  %89 = bitcast i8* %86 to <32 x i8>*
  %90 = load <32 x i8>, <32 x i8>* %89, align 1
  %91 = getelementptr inbounds i8, i8* %86, i64 %8
  %92 = bitcast i8* %91 to <32 x i8>*
  %93 = load <32 x i8>, <32 x i8>* %92, align 1
  %94 = bitcast i8* %88 to <32 x i8>*
  %95 = load <32 x i8>, <32 x i8>* %94, align 1
  %96 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %90, <32 x i8> %95) #2
  %97 = getelementptr inbounds i8, i8* %4, i64 224
  %98 = bitcast i8* %97 to <32 x i8>*
  %99 = load <32 x i8>, <32 x i8>* %98, align 1
  %100 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %93, <32 x i8> %99) #2
  %101 = bitcast i8* %87 to <32 x i8>*
  %102 = load <32 x i8>, <32 x i8>* %101, align 1
  %103 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %96, <32 x i8> %102) #2
  %104 = getelementptr inbounds i8, i8* %87, i64 %9
  %105 = bitcast i8* %104 to <32 x i8>*
  %106 = load <32 x i8>, <32 x i8>* %105, align 1
  %107 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %100, <32 x i8> %106) #2
  %108 = bitcast <4 x i64> %103 to <8 x i32>
  %109 = bitcast <4 x i64> %107 to <8 x i32>
  %110 = add <8 x i32> %85, %108
  %111 = add <8 x i32> %110, %109
  %112 = getelementptr inbounds i8, i8* %86, i64 %10
  %113 = getelementptr inbounds i8, i8* %87, i64 %11
  %114 = getelementptr inbounds i8, i8* %4, i64 256
  %115 = bitcast i8* %112 to <32 x i8>*
  %116 = load <32 x i8>, <32 x i8>* %115, align 1
  %117 = getelementptr inbounds i8, i8* %112, i64 %8
  %118 = bitcast i8* %117 to <32 x i8>*
  %119 = load <32 x i8>, <32 x i8>* %118, align 1
  %120 = bitcast i8* %114 to <32 x i8>*
  %121 = load <32 x i8>, <32 x i8>* %120, align 1
  %122 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %116, <32 x i8> %121) #2
  %123 = getelementptr inbounds i8, i8* %4, i64 288
  %124 = bitcast i8* %123 to <32 x i8>*
  %125 = load <32 x i8>, <32 x i8>* %124, align 1
  %126 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %119, <32 x i8> %125) #2
  %127 = bitcast i8* %113 to <32 x i8>*
  %128 = load <32 x i8>, <32 x i8>* %127, align 1
  %129 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %122, <32 x i8> %128) #2
  %130 = getelementptr inbounds i8, i8* %113, i64 %9
  %131 = bitcast i8* %130 to <32 x i8>*
  %132 = load <32 x i8>, <32 x i8>* %131, align 1
  %133 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %126, <32 x i8> %132) #2
  %134 = bitcast <4 x i64> %129 to <8 x i32>
  %135 = bitcast <4 x i64> %133 to <8 x i32>
  %136 = add <8 x i32> %111, %134
  %137 = add <8 x i32> %136, %135
  %138 = getelementptr inbounds i8, i8* %112, i64 %10
  %139 = getelementptr inbounds i8, i8* %113, i64 %11
  %140 = getelementptr inbounds i8, i8* %4, i64 320
  %141 = bitcast i8* %138 to <32 x i8>*
  %142 = load <32 x i8>, <32 x i8>* %141, align 1
  %143 = getelementptr inbounds i8, i8* %138, i64 %8
  %144 = bitcast i8* %143 to <32 x i8>*
  %145 = load <32 x i8>, <32 x i8>* %144, align 1
  %146 = bitcast i8* %140 to <32 x i8>*
  %147 = load <32 x i8>, <32 x i8>* %146, align 1
  %148 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %142, <32 x i8> %147) #2
  %149 = getelementptr inbounds i8, i8* %4, i64 352
  %150 = bitcast i8* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 1
  %152 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %145, <32 x i8> %151) #2
  %153 = bitcast i8* %139 to <32 x i8>*
  %154 = load <32 x i8>, <32 x i8>* %153, align 1
  %155 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %148, <32 x i8> %154) #2
  %156 = getelementptr inbounds i8, i8* %139, i64 %9
  %157 = bitcast i8* %156 to <32 x i8>*
  %158 = load <32 x i8>, <32 x i8>* %157, align 1
  %159 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %152, <32 x i8> %158) #2
  %160 = bitcast <4 x i64> %155 to <8 x i32>
  %161 = bitcast <4 x i64> %159 to <8 x i32>
  %162 = add <8 x i32> %137, %160
  %163 = add <8 x i32> %162, %161
  %164 = getelementptr inbounds i8, i8* %138, i64 %10
  %165 = getelementptr inbounds i8, i8* %139, i64 %11
  %166 = getelementptr inbounds i8, i8* %4, i64 384
  %167 = bitcast i8* %164 to <32 x i8>*
  %168 = load <32 x i8>, <32 x i8>* %167, align 1
  %169 = getelementptr inbounds i8, i8* %164, i64 %8
  %170 = bitcast i8* %169 to <32 x i8>*
  %171 = load <32 x i8>, <32 x i8>* %170, align 1
  %172 = bitcast i8* %166 to <32 x i8>*
  %173 = load <32 x i8>, <32 x i8>* %172, align 1
  %174 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %168, <32 x i8> %173) #2
  %175 = getelementptr inbounds i8, i8* %4, i64 416
  %176 = bitcast i8* %175 to <32 x i8>*
  %177 = load <32 x i8>, <32 x i8>* %176, align 1
  %178 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %171, <32 x i8> %177) #2
  %179 = bitcast i8* %165 to <32 x i8>*
  %180 = load <32 x i8>, <32 x i8>* %179, align 1
  %181 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %174, <32 x i8> %180) #2
  %182 = getelementptr inbounds i8, i8* %165, i64 %9
  %183 = bitcast i8* %182 to <32 x i8>*
  %184 = load <32 x i8>, <32 x i8>* %183, align 1
  %185 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %178, <32 x i8> %184) #2
  %186 = bitcast <4 x i64> %181 to <8 x i32>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = add <8 x i32> %163, %186
  %189 = add <8 x i32> %188, %187
  %190 = getelementptr inbounds i8, i8* %164, i64 %10
  %191 = getelementptr inbounds i8, i8* %165, i64 %11
  %192 = getelementptr inbounds i8, i8* %4, i64 448
  %193 = bitcast i8* %190 to <32 x i8>*
  %194 = load <32 x i8>, <32 x i8>* %193, align 1
  %195 = getelementptr inbounds i8, i8* %190, i64 %8
  %196 = bitcast i8* %195 to <32 x i8>*
  %197 = load <32 x i8>, <32 x i8>* %196, align 1
  %198 = bitcast i8* %192 to <32 x i8>*
  %199 = load <32 x i8>, <32 x i8>* %198, align 1
  %200 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %194, <32 x i8> %199) #2
  %201 = getelementptr inbounds i8, i8* %4, i64 480
  %202 = bitcast i8* %201 to <32 x i8>*
  %203 = load <32 x i8>, <32 x i8>* %202, align 1
  %204 = tail call <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8> %197, <32 x i8> %203) #2
  %205 = bitcast i8* %191 to <32 x i8>*
  %206 = load <32 x i8>, <32 x i8>* %205, align 1
  %207 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %200, <32 x i8> %206) #2
  %208 = getelementptr inbounds i8, i8* %191, i64 %9
  %209 = bitcast i8* %208 to <32 x i8>*
  %210 = load <32 x i8>, <32 x i8>* %209, align 1
  %211 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %204, <32 x i8> %210) #2
  %212 = bitcast <4 x i64> %207 to <8 x i32>
  %213 = bitcast <4 x i64> %211 to <8 x i32>
  %214 = add <8 x i32> %189, %212
  %215 = add <8 x i32> %214, %213
  %216 = bitcast <8 x i32> %215 to <32 x i8>
  %217 = shufflevector <32 x i8> %216, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %218 = bitcast <32 x i8> %217 to <8 x i32>
  %219 = add <8 x i32> %215, %218
  %220 = bitcast <8 x i32> %219 to <4 x i64>
  %221 = shufflevector <4 x i64> %220, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %222 = shufflevector <4 x i64> %220, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %223 = bitcast <2 x i64> %222 to <4 x i32>
  %224 = bitcast <2 x i64> %221 to <4 x i32>
  %225 = add <4 x i32> %224, %223
  %226 = extractelement <4 x i32> %225, i32 0
  ret i32 %226
}

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8>, <32 x i8>) #1

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pavg.b(<32 x i8>, <32 x i8>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
