; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/highbd_jnt_convolve_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/highbd_jnt_convolve_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.InterpFilterParams = type { i16*, i16, i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_2d_copy_avx2(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 1
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = sub i32 14, %14
  %16 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %15, %17
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 7
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 8
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 9
  %27 = load i32, i32* %26, align 4
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  %32 = add nsw i32 %7, 14
  %33 = sub i32 %32, %14
  %34 = sub i32 %33, %17
  %35 = shl i32 1, %34
  %36 = add nsw i32 %34, -1
  %37 = shl i32 1, %36
  %38 = add nsw i32 %37, %35
  %39 = insertelement <8 x i32> undef, i32 %38, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = trunc i32 %38 to i16
  %42 = insertelement <16 x i16> undef, i16 %41, i32 0
  %43 = shufflevector <16 x i16> %42, <16 x i16> undef, <16 x i32> zeroinitializer
  %44 = sub nsw i32 14, %17
  %45 = sub i32 %44, %14
  %46 = shl i32 1, %45
  %47 = ashr i32 %46, 1
  %48 = insertelement <8 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = icmp eq i32 %7, 10
  %51 = icmp eq i32 %7, 12
  %52 = select i1 %51, i16 4095, i16 255
  %53 = select i1 %50, i16 1023, i16 %52
  %54 = insertelement <16 x i16> undef, i16 %53, i32 0
  %55 = shufflevector <16 x i16> %54, <16 x i16> undef, <16 x i32> zeroinitializer
  %56 = and i32 %4, 15
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %141

58:                                               ; preds = %8
  %59 = icmp sgt i32 %5, 0
  br i1 %59, label %60, label %310

60:                                               ; preds = %58
  %61 = icmp sgt i32 %4, 0
  %62 = bitcast <4 x i32> %19 to <8 x i16>
  %63 = icmp eq i32 %21, 0
  %64 = icmp eq i32 %23, 0
  %65 = sub <8 x i32> %49, %40
  %66 = sext i32 %4 to i64
  %67 = sext i32 %12 to i64
  %68 = sext i32 %3 to i64
  %69 = sext i32 %1 to i64
  %70 = zext i32 %5 to i64
  br label %71

71:                                               ; preds = %138, %60
  %72 = phi i64 [ 0, %60 ], [ %139, %138 ]
  br i1 %61, label %73, label %138

73:                                               ; preds = %71
  %74 = mul nsw i64 %72, %69
  %75 = mul nsw i64 %72, %67
  %76 = mul nsw i64 %72, %68
  br label %77

77:                                               ; preds = %73, %129
  %78 = phi i64 [ 0, %73 ], [ %136, %129 ]
  %79 = add nsw i64 %78, %74
  %80 = getelementptr inbounds i16, i16* %0, i64 %79
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = tail call <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16> %82, <8 x i16> %62) #4
  br i1 %63, label %127, label %84

84:                                               ; preds = %77
  %85 = add nsw i64 %78, %75
  %86 = getelementptr inbounds i16, i16* %10, i64 %85
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = shufflevector <16 x i16> %88, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %90 = shufflevector <16 x i16> %88, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %91 = shufflevector <16 x i16> %83, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %92 = bitcast <16 x i16> %91 to <8 x i32>
  %93 = add <8 x i32> %40, %92
  %94 = bitcast <16 x i16> %89 to <8 x i32>
  br i1 %64, label %107, label %95

95:                                               ; preds = %84
  %96 = mul <8 x i32> %29, %94
  %97 = mul <8 x i32> %93, %31
  %98 = add <8 x i32> %96, %97
  %99 = ashr <8 x i32> %98, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %100 = shufflevector <16 x i16> %83, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i16> %100 to <8 x i32>
  %102 = add <8 x i32> %40, %101
  %103 = bitcast <16 x i16> %90 to <8 x i32>
  %104 = mul <8 x i32> %29, %103
  %105 = mul <8 x i32> %102, %31
  %106 = add <8 x i32> %104, %105
  br label %115

107:                                              ; preds = %84
  %108 = add <8 x i32> %93, %94
  %109 = ashr <8 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %110 = shufflevector <16 x i16> %83, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i16> %110 to <8 x i32>
  %112 = add <8 x i32> %40, %111
  %113 = bitcast <16 x i16> %90 to <8 x i32>
  %114 = add <8 x i32> %112, %113
  br label %115

115:                                              ; preds = %95, %107
  %116 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %95 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %107 ]
  %117 = phi <8 x i32> [ %106, %95 ], [ %114, %107 ]
  %118 = phi <8 x i32> [ %99, %95 ], [ %109, %107 ]
  %119 = ashr <8 x i32> %117, %116
  %120 = add <8 x i32> %65, %118
  %121 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %120, i32 %45) #4
  %122 = add <8 x i32> %65, %119
  %123 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %122, i32 %45) #4
  %124 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %121, <8 x i32> %123) #4
  %125 = icmp slt <16 x i16> %124, %55
  %126 = select <16 x i1> %125, <16 x i16> %124, <16 x i16> %55
  br label %129

127:                                              ; preds = %77
  %128 = tail call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %83, <16 x i16> %43) #4
  br label %129

129:                                              ; preds = %127, %115
  %130 = phi i64 [ %75, %127 ], [ %76, %115 ]
  %131 = phi i16* [ %10, %127 ], [ %2, %115 ]
  %132 = phi <16 x i16> [ %128, %127 ], [ %126, %115 ]
  %133 = add nsw i64 %78, %130
  %134 = getelementptr inbounds i16, i16* %131, i64 %133
  %135 = bitcast i16* %134 to <16 x i16>*
  store <16 x i16> %132, <16 x i16>* %135, align 32
  %136 = add nuw nsw i64 %78, 16
  %137 = icmp slt i64 %136, %66
  br i1 %137, label %77, label %138

138:                                              ; preds = %129, %71
  %139 = add nuw nsw i64 %72, 1
  %140 = icmp eq i64 %139, %70
  br i1 %140, label %310, label %71

141:                                              ; preds = %8
  %142 = and i32 %4, 3
  %143 = icmp eq i32 %142, 0
  %144 = icmp sgt i32 %5, 0
  %145 = and i1 %143, %144
  br i1 %145, label %146, label %310

146:                                              ; preds = %141
  %147 = icmp sgt i32 %4, 0
  %148 = bitcast <4 x i32> %19 to <8 x i16>
  %149 = icmp ne i32 %21, 0
  %150 = icmp eq i32 %23, 0
  %151 = sub <8 x i32> %49, %40
  %152 = sext i32 %3 to i64
  %153 = sext i32 %12 to i64
  %154 = sext i32 %1 to i64
  %155 = sext i32 %4 to i64
  %156 = sext i32 %5 to i64
  br label %157

157:                                              ; preds = %146, %307
  %158 = phi i64 [ 0, %146 ], [ %308, %307 ]
  br i1 %147, label %159, label %307

159:                                              ; preds = %157
  %160 = mul nsw i64 %158, %154
  %161 = mul nsw i64 %158, %153
  %162 = mul nsw i64 %158, %152
  br label %163

163:                                              ; preds = %159, %304
  %164 = phi i64 [ 0, %159 ], [ %305, %304 ]
  %165 = add nsw i64 %164, %160
  %166 = getelementptr inbounds i16, i16* %0, i64 %165
  %167 = bitcast i16* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 1
  %169 = add nsw i64 %165, %154
  %170 = getelementptr inbounds i16, i16* %0, i64 %169
  %171 = bitcast i16* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 1
  %173 = shufflevector <2 x i64> %168, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = bitcast <4 x i64> %173 to <8 x i32>
  %175 = shufflevector <4 x i32> %172, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = shufflevector <8 x i32> %174, <8 x i32> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %177 = bitcast <8 x i32> %176 to <16 x i16>
  %178 = tail call <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16> %177, <8 x i16> %148) #4
  %179 = sub nsw i64 %155, %164
  %180 = icmp slt i64 %179, 8
  br i1 %180, label %181, label %234

181:                                              ; preds = %163
  br i1 %149, label %182, label %223

182:                                              ; preds = %181
  %183 = add nsw i64 %164, %161
  %184 = getelementptr inbounds i16, i16* %10, i64 %183
  %185 = bitcast i16* %184 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <4 x i64> undef, i64 %186, i32 0
  %188 = add nsw i64 %183, %153
  %189 = getelementptr inbounds i16, i16* %10, i64 %188
  %190 = bitcast i16* %189 to i64*
  %191 = load i64, i64* %190, align 1
  %192 = insertelement <4 x i64> %187, i64 %191, i32 2
  %193 = bitcast <4 x i64> %192 to <16 x i16>
  %194 = shufflevector <16 x i16> %193, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %195 = shufflevector <16 x i16> %178, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %196 = bitcast <16 x i16> %195 to <8 x i32>
  %197 = add <8 x i32> %40, %196
  %198 = bitcast <16 x i16> %194 to <8 x i32>
  br i1 %150, label %203, label %199

199:                                              ; preds = %182
  %200 = mul <8 x i32> %29, %198
  %201 = mul <8 x i32> %197, %31
  %202 = add <8 x i32> %200, %201
  br label %205

203:                                              ; preds = %182
  %204 = add <8 x i32> %197, %198
  br label %205

205:                                              ; preds = %199, %203
  %206 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %199 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %203 ]
  %207 = phi <8 x i32> [ %202, %199 ], [ %204, %203 ]
  %208 = ashr <8 x i32> %207, %206
  %209 = add <8 x i32> %151, %208
  %210 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %209, i32 %45) #4
  %211 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %210, <8 x i32> %210) #4
  %212 = icmp slt <16 x i16> %211, %55
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %55
  %214 = bitcast <16 x i16> %213 to <4 x i64>
  %215 = add nsw i64 %164, %162
  %216 = getelementptr inbounds i16, i16* %2, i64 %215
  %217 = extractelement <4 x i64> %214, i32 0
  %218 = bitcast i16* %216 to i64*
  store i64 %217, i64* %218, align 1
  %219 = add nsw i64 %215, %152
  %220 = getelementptr inbounds i16, i16* %2, i64 %219
  %221 = extractelement <4 x i64> %214, i32 2
  %222 = bitcast i16* %220 to i64*
  store i64 %221, i64* %222, align 1
  br label %304

223:                                              ; preds = %181
  %224 = tail call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %178, <16 x i16> %43) #4
  %225 = bitcast <16 x i16> %224 to <4 x i64>
  %226 = add nsw i64 %164, %161
  %227 = getelementptr inbounds i16, i16* %10, i64 %226
  %228 = extractelement <4 x i64> %225, i32 0
  %229 = bitcast i16* %227 to i64*
  store i64 %228, i64* %229, align 1
  %230 = add nsw i64 %226, %153
  %231 = getelementptr inbounds i16, i16* %10, i64 %230
  %232 = extractelement <4 x i64> %225, i32 2
  %233 = bitcast i16* %231 to i64*
  store i64 %232, i64* %233, align 1
  br label %304

234:                                              ; preds = %163
  br i1 %149, label %235, label %293

235:                                              ; preds = %234
  %236 = add nsw i64 %164, %161
  %237 = getelementptr inbounds i16, i16* %10, i64 %236
  %238 = bitcast i16* %237 to <2 x i64>*
  %239 = load <2 x i64>, <2 x i64>* %238, align 1
  %240 = add nsw i64 %236, %153
  %241 = getelementptr inbounds i16, i16* %10, i64 %240
  %242 = bitcast i16* %241 to <2 x i64>*
  %243 = load <2 x i64>, <2 x i64>* %242, align 1
  %244 = shufflevector <2 x i64> %239, <2 x i64> %243, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %245 = bitcast <4 x i64> %244 to <16 x i16>
  %246 = shufflevector <16 x i16> %245, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %247 = shufflevector <16 x i16> %245, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %248 = shufflevector <16 x i16> %178, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %249 = bitcast <16 x i16> %248 to <8 x i32>
  %250 = add <8 x i32> %40, %249
  %251 = bitcast <16 x i16> %246 to <8 x i32>
  br i1 %150, label %264, label %252

252:                                              ; preds = %235
  %253 = mul <8 x i32> %29, %251
  %254 = mul <8 x i32> %250, %31
  %255 = add <8 x i32> %253, %254
  %256 = ashr <8 x i32> %255, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %257 = shufflevector <16 x i16> %178, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %258 = bitcast <16 x i16> %257 to <8 x i32>
  %259 = add <8 x i32> %40, %258
  %260 = bitcast <16 x i16> %247 to <8 x i32>
  %261 = mul <8 x i32> %29, %260
  %262 = mul <8 x i32> %259, %31
  %263 = add <8 x i32> %261, %262
  br label %272

264:                                              ; preds = %235
  %265 = add <8 x i32> %250, %251
  %266 = ashr <8 x i32> %265, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %267 = shufflevector <16 x i16> %178, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %268 = bitcast <16 x i16> %267 to <8 x i32>
  %269 = add <8 x i32> %40, %268
  %270 = bitcast <16 x i16> %247 to <8 x i32>
  %271 = add <8 x i32> %269, %270
  br label %272

272:                                              ; preds = %252, %264
  %273 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %252 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %264 ]
  %274 = phi <8 x i32> [ %263, %252 ], [ %271, %264 ]
  %275 = phi <8 x i32> [ %256, %252 ], [ %266, %264 ]
  %276 = ashr <8 x i32> %274, %273
  %277 = add <8 x i32> %151, %275
  %278 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %277, i32 %45) #4
  %279 = add <8 x i32> %151, %276
  %280 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %279, i32 %45) #4
  %281 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %278, <8 x i32> %280) #4
  %282 = icmp slt <16 x i16> %281, %55
  %283 = select <16 x i1> %282, <16 x i16> %281, <16 x i16> %55
  %284 = bitcast <16 x i16> %283 to <4 x i64>
  %285 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = add nsw i64 %164, %162
  %288 = getelementptr inbounds i16, i16* %2, i64 %287
  %289 = bitcast i16* %288 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %289, align 16
  %290 = add nsw i64 %287, %152
  %291 = getelementptr inbounds i16, i16* %2, i64 %290
  %292 = bitcast i16* %291 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %292, align 16
  br label %304

293:                                              ; preds = %234
  %294 = tail call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %178, <16 x i16> %43) #4
  %295 = bitcast <16 x i16> %294 to <4 x i64>
  %296 = shufflevector <4 x i64> %295, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %297 = shufflevector <4 x i64> %295, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %298 = add nsw i64 %164, %161
  %299 = getelementptr inbounds i16, i16* %10, i64 %298
  %300 = bitcast i16* %299 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %300, align 16
  %301 = add nsw i64 %298, %153
  %302 = getelementptr inbounds i16, i16* %10, i64 %301
  %303 = bitcast i16* %302 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %303, align 16
  br label %304

304:                                              ; preds = %272, %293, %205, %223
  %305 = add nuw nsw i64 %164, 8
  %306 = icmp slt i64 %305, %155
  br i1 %306, label %163, label %307

307:                                              ; preds = %304, %157
  %308 = add nuw nsw i64 %158, 2
  %309 = icmp slt i64 %308, %156
  br i1 %309, label %157, label %310

310:                                              ; preds = %307, %138, %58, %141
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_2d_avx2(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %13 = alloca [1120 x i16], align 32
  %14 = bitcast [1120 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2240, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %14, i8 -86, i64 2240, i1 false)
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 1
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = add i32 %5, -1
  %21 = add i32 %20, %19
  %22 = lshr i32 %19, 1
  %23 = add nsw i32 %22, -1
  %24 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = lshr i16 %25, 1
  %27 = zext i16 %26 to i64
  %28 = mul nsw i32 %23, %1
  %29 = sext i32 %28 to i64
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds i16, i16* %0, i64 %30
  %32 = sub nsw i64 1, %27
  %33 = getelementptr inbounds i16, i16* %31, i64 %32
  %34 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 8
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 9
  %37 = load i32, i32* %36, align 4
  %38 = insertelement <8 x i32> undef, i32 %35, i32 0
  %39 = shufflevector <8 x i32> %38, <8 x i32> undef, <8 x i32> zeroinitializer
  %40 = insertelement <8 x i32> undef, i32 %37, i32 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = shl i32 1, %43
  %45 = ashr i32 %44, 1
  %46 = add nsw i32 %11, 6
  %47 = shl i32 1, %46
  %48 = add nsw i32 %45, %47
  %49 = insertelement <8 x i32> undef, i32 %48, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %43, i32 0
  %52 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = shl i32 1, %53
  %55 = ashr i32 %54, 1
  %56 = add nsw i32 %11, 14
  %57 = xor i32 %43, -1
  %58 = add i32 %56, %57
  %59 = shl i32 1, %58
  %60 = sub nsw i32 %55, %59
  %61 = insertelement <8 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %53, i32 0
  %64 = sub nsw i32 %56, %43
  %65 = sub i32 %64, %53
  %66 = shl i32 1, %65
  %67 = add nsw i32 %65, -1
  %68 = shl i32 1, %67
  %69 = add nsw i32 %68, %66
  %70 = insertelement <8 x i32> undef, i32 %69, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = sub nsw i32 14, %43
  %73 = sub i32 %72, %53
  %74 = icmp eq i32 %11, 10
  %75 = icmp eq i32 %11, 12
  %76 = select i1 %75, i16 4095, i16 255
  %77 = select i1 %74, i16 1023, i16 %76
  %78 = insertelement <16 x i16> undef, i16 %77, i32 0
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <16 x i32> zeroinitializer
  %80 = and i32 %8, 15
  %81 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %82 = load i16*, i16** %81, align 8
  %83 = zext i16 %25 to i32
  %84 = mul nuw nsw i32 %80, %83
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %82, i64 %85
  %87 = bitcast i16* %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 1
  %89 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %90 = bitcast <4 x i64> %89 to <8 x i32>
  %91 = and i32 %9, 15
  %92 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %93 = load i16*, i16** %92, align 8
  %94 = mul nuw nsw i32 %91, %19
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %93, i64 %95
  %97 = bitcast i16* %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 1
  %99 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %100 = bitcast <4 x i64> %99 to <8 x i32>
  %101 = icmp sgt i32 %4, 0
  br i1 %101, label %102, label %407

102:                                              ; preds = %12
  %103 = shl i32 1, %73
  %104 = ashr i32 %103, 1
  %105 = insertelement <8 x i32> undef, i32 %104, i32 0
  %106 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 7
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 2
  %111 = load i32, i32* %110, align 8
  %112 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %113 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %114 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %115 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %116 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %117 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %118 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %119 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %120 = icmp sgt i32 %21, 0
  %121 = bitcast <8 x i32> %119 to <16 x i16>
  %122 = bitcast <8 x i32> %118 to <16 x i16>
  %123 = bitcast <8 x i32> %117 to <16 x i16>
  %124 = bitcast <8 x i32> %116 to <16 x i16>
  %125 = bitcast [1120 x i16]* %13 to <16 x i16>*
  %126 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 8
  %127 = bitcast i16* %126 to <16 x i16>*
  %128 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 16
  %129 = bitcast i16* %128 to <16 x i16>*
  %130 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 24
  %131 = bitcast i16* %130 to <16 x i16>*
  %132 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 32
  %133 = bitcast i16* %132 to <16 x i16>*
  %134 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 40
  %135 = bitcast i16* %134 to <16 x i16>*
  %136 = icmp sgt i32 %5, 0
  %137 = bitcast <8 x i32> %115 to <16 x i16>
  %138 = bitcast <8 x i32> %114 to <16 x i16>
  %139 = bitcast <8 x i32> %113 to <16 x i16>
  %140 = bitcast <8 x i32> %112 to <16 x i16>
  %141 = icmp eq i32 %109, 0
  %142 = icmp eq i32 %107, 0
  %143 = sub <8 x i32> %105, %70
  %144 = shufflevector <8 x i32> %143, <8 x i32> undef, <8 x i32> zeroinitializer
  %145 = sext i32 %1 to i64
  %146 = sext i32 %21 to i64
  %147 = sext i32 %111 to i64
  %148 = sext i32 %3 to i64
  %149 = sext i32 %5 to i64
  %150 = sext i32 %4 to i64
  br label %151

151:                                              ; preds = %102, %404
  %152 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %230, %404 ]
  %153 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %231, %404 ]
  %154 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %232, %404 ]
  %155 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %233, %404 ]
  %156 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %234, %404 ]
  %157 = phi <16 x i16> [ <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, %102 ], [ %235, %404 ]
  %158 = phi i64 [ 0, %102 ], [ %405, %404 ]
  br i1 %120, label %159, label %229

159:                                              ; preds = %151, %174
  %160 = phi i64 [ %220, %174 ], [ 0, %151 ]
  %161 = mul nsw i64 %160, %145
  %162 = add nsw i64 %161, %158
  %163 = getelementptr inbounds i16, i16* %33, i64 %162
  %164 = bitcast i16* %163 to <4 x i64>*
  %165 = load <4 x i64>, <4 x i64>* %164, align 1
  %166 = or i64 %160, 1
  %167 = icmp slt i64 %166, %146
  br i1 %167, label %168, label %174

168:                                              ; preds = %159
  %169 = mul nsw i64 %166, %145
  %170 = add nsw i64 %169, %158
  %171 = getelementptr inbounds i16, i16* %33, i64 %170
  %172 = bitcast i16* %171 to <4 x i64>*
  %173 = load <4 x i64>, <4 x i64>* %172, align 1
  br label %174

174:                                              ; preds = %168, %159
  %175 = phi <4 x i64> [ %173, %168 ], [ zeroinitializer, %159 ]
  %176 = shufflevector <4 x i64> %165, <4 x i64> %175, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %177 = shufflevector <4 x i64> %165, <4 x i64> %175, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %178 = bitcast <4 x i64> %177 to <32 x i8>
  %179 = bitcast <4 x i64> %176 to <32 x i8>
  %180 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %181 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %182 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %183 = bitcast <4 x i64> %176 to <16 x i16>
  %184 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %183, <16 x i16> %121) #4
  %185 = bitcast <32 x i8> %180 to <16 x i16>
  %186 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %122) #4
  %187 = bitcast <32 x i8> %181 to <16 x i16>
  %188 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %123) #4
  %189 = bitcast <32 x i8> %182 to <16 x i16>
  %190 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %124) #4
  %191 = add <8 x i32> %184, %50
  %192 = add <8 x i32> %191, %186
  %193 = add <8 x i32> %192, %188
  %194 = add <8 x i32> %193, %190
  %195 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %194, <4 x i32> %51) #4
  %196 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %197 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53>
  %198 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %199 = shufflevector <32 x i8> %179, <32 x i8> %178, <32 x i32> <i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %200 = bitcast <32 x i8> %196 to <16 x i16>
  %201 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %200, <16 x i16> %121) #4
  %202 = bitcast <32 x i8> %197 to <16 x i16>
  %203 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %202, <16 x i16> %122) #4
  %204 = bitcast <32 x i8> %198 to <16 x i16>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %204, <16 x i16> %123) #4
  %206 = bitcast <32 x i8> %199 to <16 x i16>
  %207 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %206, <16 x i16> %124) #4
  %208 = add <8 x i32> %201, %50
  %209 = add <8 x i32> %208, %203
  %210 = add <8 x i32> %209, %205
  %211 = add <8 x i32> %210, %207
  %212 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %211, <4 x i32> %51) #4
  %213 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %195, <8 x i32> undef) #4
  %214 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %212, <8 x i32> undef) #4
  %215 = shufflevector <16 x i16> %213, <16 x i16> %214, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %216 = shl i64 %160, 3
  %217 = and i64 %216, 4294967280
  %218 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %217
  %219 = bitcast i16* %218 to <16 x i16>*
  store <16 x i16> %215, <16 x i16>* %219, align 32
  %220 = add nuw nsw i64 %160, 2
  %221 = icmp slt i64 %220, %146
  br i1 %221, label %159, label %222

222:                                              ; preds = %174
  %223 = load <16 x i16>, <16 x i16>* %125, align 32
  %224 = load <16 x i16>, <16 x i16>* %127, align 16
  %225 = load <16 x i16>, <16 x i16>* %129, align 32
  %226 = load <16 x i16>, <16 x i16>* %131, align 16
  %227 = load <16 x i16>, <16 x i16>* %133, align 32
  %228 = load <16 x i16>, <16 x i16>* %135, align 16
  br label %229

229:                                              ; preds = %222, %151
  %230 = phi <16 x i16> [ %228, %222 ], [ %152, %151 ]
  %231 = phi <16 x i16> [ %227, %222 ], [ %153, %151 ]
  %232 = phi <16 x i16> [ %226, %222 ], [ %154, %151 ]
  %233 = phi <16 x i16> [ %225, %222 ], [ %155, %151 ]
  %234 = phi <16 x i16> [ %224, %222 ], [ %156, %151 ]
  %235 = phi <16 x i16> [ %223, %222 ], [ %157, %151 ]
  br i1 %136, label %236, label %404

236:                                              ; preds = %229
  %237 = shufflevector <16 x i16> %231, <16 x i16> %230, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %238 = shufflevector <16 x i16> %233, <16 x i16> %232, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %239 = shufflevector <16 x i16> %235, <16 x i16> %234, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %240 = shufflevector <16 x i16> %231, <16 x i16> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %241 = shufflevector <16 x i16> %233, <16 x i16> %232, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %242 = shufflevector <16 x i16> %235, <16 x i16> %234, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %243 = sub nsw i64 %150, %158
  %244 = icmp slt i64 %243, 8
  br label %245

245:                                              ; preds = %236, %401
  %246 = phi i64 [ 0, %236 ], [ %402, %401 ]
  %247 = phi <16 x i16> [ %237, %236 ], [ %263, %401 ]
  %248 = phi <16 x i16> [ %242, %236 ], [ %249, %401 ]
  %249 = phi <16 x i16> [ %241, %236 ], [ %250, %401 ]
  %250 = phi <16 x i16> [ %240, %236 ], [ %262, %401 ]
  %251 = phi <16 x i16> [ %239, %236 ], [ %252, %401 ]
  %252 = phi <16 x i16> [ %238, %236 ], [ %247, %401 ]
  %253 = shl i64 %246, 3
  %254 = and i64 %253, 4294967280
  %255 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %254
  %256 = getelementptr inbounds i16, i16* %255, i64 48
  %257 = bitcast i16* %256 to <16 x i16>*
  %258 = load <16 x i16>, <16 x i16>* %257, align 32
  %259 = getelementptr inbounds i16, i16* %255, i64 56
  %260 = bitcast i16* %259 to <16 x i16>*
  %261 = load <16 x i16>, <16 x i16>* %260, align 16
  %262 = shufflevector <16 x i16> %258, <16 x i16> %261, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %263 = shufflevector <16 x i16> %258, <16 x i16> %261, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %264 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %248, <16 x i16> %137) #4
  %265 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %249, <16 x i16> %138) #4
  %266 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %250, <16 x i16> %139) #4
  %267 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %262, <16 x i16> %140) #4
  %268 = add <8 x i32> %264, %62
  %269 = add <8 x i32> %268, %265
  %270 = add <8 x i32> %269, %266
  %271 = add <8 x i32> %270, %267
  %272 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %271, <4 x i32> %63) #4
  %273 = add <8 x i32> %272, %71
  br i1 %244, label %274, label %327

274:                                              ; preds = %245
  br i1 %141, label %315, label %275

275:                                              ; preds = %274
  %276 = mul nsw i64 %246, %147
  %277 = add nsw i64 %276, %158
  %278 = getelementptr inbounds i16, i16* %16, i64 %277
  %279 = bitcast i16* %278 to i64*
  %280 = load i64, i64* %279, align 1
  %281 = insertelement <4 x i64> undef, i64 %280, i32 0
  %282 = add nsw i64 %277, %147
  %283 = getelementptr inbounds i16, i16* %16, i64 %282
  %284 = bitcast i16* %283 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = insertelement <4 x i64> %281, i64 %285, i32 2
  %287 = bitcast <4 x i64> %286 to <16 x i16>
  %288 = shufflevector <16 x i16> %287, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %289 = bitcast <16 x i16> %288 to <8 x i32>
  br i1 %142, label %294, label %290

290:                                              ; preds = %275
  %291 = mul <8 x i32> %39, %289
  %292 = mul <8 x i32> %273, %41
  %293 = add <8 x i32> %291, %292
  br label %296

294:                                              ; preds = %275
  %295 = add <8 x i32> %273, %289
  br label %296

296:                                              ; preds = %290, %294
  %297 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %290 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %294 ]
  %298 = phi <8 x i32> [ %293, %290 ], [ %295, %294 ]
  %299 = ashr <8 x i32> %298, %297
  %300 = add <8 x i32> %144, %299
  %301 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %300, i32 %73) #4
  %302 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %301, <8 x i32> %301) #4
  %303 = icmp slt <16 x i16> %302, %79
  %304 = select <16 x i1> %303, <16 x i16> %302, <16 x i16> %79
  %305 = bitcast <16 x i16> %304 to <4 x i64>
  %306 = mul nsw i64 %246, %148
  %307 = add nsw i64 %306, %158
  %308 = getelementptr inbounds i16, i16* %2, i64 %307
  %309 = extractelement <4 x i64> %305, i32 0
  %310 = bitcast i16* %308 to i64*
  store i64 %309, i64* %310, align 1
  %311 = add nsw i64 %307, %148
  %312 = getelementptr inbounds i16, i16* %2, i64 %311
  %313 = extractelement <4 x i64> %305, i32 2
  %314 = bitcast i16* %312 to i64*
  store i64 %313, i64* %314, align 1
  br label %401

315:                                              ; preds = %274
  %316 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %273, <8 x i32> %273) #4
  %317 = bitcast <16 x i16> %316 to <4 x i64>
  %318 = mul nsw i64 %246, %147
  %319 = add nsw i64 %318, %158
  %320 = getelementptr inbounds i16, i16* %16, i64 %319
  %321 = extractelement <4 x i64> %317, i32 0
  %322 = bitcast i16* %320 to i64*
  store i64 %321, i64* %322, align 1
  %323 = add nsw i64 %319, %147
  %324 = getelementptr inbounds i16, i16* %16, i64 %323
  %325 = extractelement <4 x i64> %317, i32 2
  %326 = bitcast i16* %324 to i64*
  store i64 %325, i64* %326, align 1
  br label %401

327:                                              ; preds = %245
  %328 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %251, <16 x i16> %137) #4
  %329 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %252, <16 x i16> %138) #4
  %330 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %247, <16 x i16> %139) #4
  %331 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %263, <16 x i16> %140) #4
  %332 = add <8 x i32> %328, %62
  %333 = add <8 x i32> %332, %329
  %334 = add <8 x i32> %333, %330
  %335 = add <8 x i32> %334, %331
  %336 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %335, <4 x i32> %63) #4
  %337 = add <8 x i32> %336, %71
  br i1 %141, label %389, label %338

338:                                              ; preds = %327
  %339 = mul nsw i64 %246, %147
  %340 = add nsw i64 %339, %158
  %341 = getelementptr inbounds i16, i16* %16, i64 %340
  %342 = bitcast i16* %341 to <2 x i64>*
  %343 = load <2 x i64>, <2 x i64>* %342, align 1
  %344 = add nsw i64 %340, %147
  %345 = getelementptr inbounds i16, i16* %16, i64 %344
  %346 = bitcast i16* %345 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %346, align 1
  %348 = shufflevector <2 x i64> %343, <2 x i64> %347, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %349 = bitcast <4 x i64> %348 to <16 x i16>
  %350 = shufflevector <16 x i16> %349, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %351 = shufflevector <16 x i16> %349, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %352 = bitcast <16 x i16> %350 to <8 x i32>
  br i1 %142, label %362, label %353

353:                                              ; preds = %338
  %354 = mul <8 x i32> %39, %352
  %355 = mul <8 x i32> %273, %41
  %356 = add <8 x i32> %354, %355
  %357 = ashr <8 x i32> %356, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %358 = bitcast <16 x i16> %351 to <8 x i32>
  %359 = mul <8 x i32> %39, %358
  %360 = mul <8 x i32> %337, %41
  %361 = add <8 x i32> %359, %360
  br label %367

362:                                              ; preds = %338
  %363 = add <8 x i32> %273, %352
  %364 = ashr <8 x i32> %363, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %365 = bitcast <16 x i16> %351 to <8 x i32>
  %366 = add <8 x i32> %337, %365
  br label %367

367:                                              ; preds = %353, %362
  %368 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %353 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %362 ]
  %369 = phi <8 x i32> [ %361, %353 ], [ %366, %362 ]
  %370 = phi <8 x i32> [ %357, %353 ], [ %364, %362 ]
  %371 = ashr <8 x i32> %369, %368
  %372 = add <8 x i32> %144, %370
  %373 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %372, i32 %73) #4
  %374 = add <8 x i32> %144, %371
  %375 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %374, i32 %73) #4
  %376 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %373, <8 x i32> %375) #4
  %377 = icmp slt <16 x i16> %376, %79
  %378 = select <16 x i1> %377, <16 x i16> %376, <16 x i16> %79
  %379 = bitcast <16 x i16> %378 to <4 x i64>
  %380 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %381 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %382 = mul nsw i64 %246, %148
  %383 = add nsw i64 %382, %158
  %384 = getelementptr inbounds i16, i16* %2, i64 %383
  %385 = bitcast i16* %384 to <2 x i64>*
  store <2 x i64> %380, <2 x i64>* %385, align 16
  %386 = add nsw i64 %383, %148
  %387 = getelementptr inbounds i16, i16* %2, i64 %386
  %388 = bitcast i16* %387 to <2 x i64>*
  store <2 x i64> %381, <2 x i64>* %388, align 16
  br label %401

389:                                              ; preds = %327
  %390 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %273, <8 x i32> %337) #4
  %391 = bitcast <16 x i16> %390 to <4 x i64>
  %392 = shufflevector <4 x i64> %391, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %393 = shufflevector <4 x i64> %391, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %394 = mul nsw i64 %246, %147
  %395 = add nsw i64 %394, %158
  %396 = getelementptr inbounds i16, i16* %16, i64 %395
  %397 = bitcast i16* %396 to <2 x i64>*
  store <2 x i64> %392, <2 x i64>* %397, align 16
  %398 = add nsw i64 %395, %147
  %399 = getelementptr inbounds i16, i16* %16, i64 %398
  %400 = bitcast i16* %399 to <2 x i64>*
  store <2 x i64> %393, <2 x i64>* %400, align 16
  br label %401

401:                                              ; preds = %367, %389, %296, %315
  %402 = add nuw nsw i64 %246, 2
  %403 = icmp slt i64 %402, %149
  br i1 %403, label %245, label %404

404:                                              ; preds = %401, %229
  %405 = add nuw nsw i64 %158, 8
  %406 = icmp slt i64 %405, %150
  br i1 %406, label %151, label %407

407:                                              ; preds = %404, %12
  call void @llvm.lifetime.end.p0i8(i64 2240, i8* nonnull %14) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_x_avx2(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 1
  %16 = zext i16 %15 to i64
  %17 = sub nsw i64 1, %16
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = sub nsw i32 7, %20
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %25 = load i32, i32* %24, align 4
  %26 = insertelement <8 x i32> undef, i32 %23, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 1, %31
  %33 = ashr i32 %32, 1
  %34 = insertelement <8 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %31, i32 0
  %37 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %21, i32 0
  %38 = add nsw i32 %9, 14
  %39 = sub i32 %38, %20
  %40 = sub i32 %39, %31
  %41 = shl i32 1, %40
  %42 = add nsw i32 %40, -1
  %43 = shl i32 1, %42
  %44 = add nsw i32 %43, %41
  %45 = insertelement <8 x i32> undef, i32 %44, i32 0
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> zeroinitializer
  %47 = sub nsw i32 14, %31
  %48 = sub i32 %47, %20
  %49 = icmp eq i32 %9, 10
  %50 = icmp eq i32 %9, 12
  %51 = select i1 %50, i16 4095, i16 255
  %52 = select i1 %49, i16 1023, i16 %51
  %53 = insertelement <16 x i16> undef, i16 %52, i32 0
  %54 = shufflevector <16 x i16> %53, <16 x i16> undef, <16 x i32> zeroinitializer
  %55 = and i32 %7, 15
  %56 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %57 = load i16*, i16** %56, align 8
  %58 = zext i16 %14 to i32
  %59 = mul nuw nsw i32 %55, %58
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %57, i64 %60
  %62 = bitcast i16* %61 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 1
  %64 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = icmp sgt i32 %4, 0
  br i1 %66, label %67, label %279

67:                                               ; preds = %10
  %68 = shl i32 1, %48
  %69 = ashr i32 %68, 1
  %70 = insertelement <8 x i32> undef, i32 %69, i32 0
  %71 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %76 = load i32, i32* %75, align 8
  %77 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %78 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %79 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %80 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %81 = icmp sgt i32 %5, 0
  %82 = bitcast <8 x i32> %80 to <16 x i16>
  %83 = bitcast <8 x i32> %79 to <16 x i16>
  %84 = bitcast <8 x i32> %78 to <16 x i16>
  %85 = bitcast <8 x i32> %77 to <16 x i16>
  %86 = icmp eq i32 %74, 0
  %87 = icmp eq i32 %72, 0
  %88 = sub <8 x i32> %70, %45
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> zeroinitializer
  %90 = sext i32 %76 to i64
  %91 = sext i32 %3 to i64
  %92 = sext i32 %1 to i64
  %93 = sext i32 %5 to i64
  %94 = sext i32 %4 to i64
  br label %95

95:                                               ; preds = %67, %276
  %96 = phi i64 [ 0, %67 ], [ %277, %276 ]
  br i1 %81, label %97, label %276

97:                                               ; preds = %95
  %98 = sub nsw i64 %94, %96
  %99 = icmp slt i64 %98, 8
  br label %100

100:                                              ; preds = %97, %273
  %101 = phi i64 [ 0, %97 ], [ %274, %273 ]
  %102 = mul nsw i64 %101, %92
  %103 = add nsw i64 %102, %96
  %104 = getelementptr inbounds i16, i16* %18, i64 %103
  %105 = bitcast i16* %104 to <4 x i64>*
  %106 = load <4 x i64>, <4 x i64>* %105, align 1
  %107 = or i64 %101, 1
  %108 = mul nsw i64 %107, %92
  %109 = add nsw i64 %108, %96
  %110 = getelementptr inbounds i16, i16* %18, i64 %109
  %111 = bitcast i16* %110 to <4 x i64>*
  %112 = load <4 x i64>, <4 x i64>* %111, align 1
  %113 = shufflevector <4 x i64> %106, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = shufflevector <4 x i64> %106, <4 x i64> %112, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %115 = bitcast <4 x i64> %114 to <32 x i8>
  %116 = bitcast <4 x i64> %113 to <32 x i8>
  %117 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %118 = bitcast <32 x i8> %117 to <16 x i16>
  %119 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %120 = bitcast <32 x i8> %119 to <16 x i16>
  %121 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %122 = bitcast <32 x i8> %121 to <16 x i16>
  %123 = bitcast <4 x i64> %113 to <16 x i16>
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %123, <16 x i16> %82) #4
  %125 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %118, <16 x i16> %83) #4
  %126 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %120, <16 x i16> %84) #4
  %127 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> %85) #4
  %128 = add <8 x i32> %124, %35
  %129 = add <8 x i32> %128, %125
  %130 = add <8 x i32> %129, %126
  %131 = add <8 x i32> %130, %127
  %132 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %131, <4 x i32> %36) #4
  %133 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %134 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53>
  %135 = bitcast <32 x i8> %134 to <16 x i16>
  %136 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %137 = bitcast <32 x i8> %136 to <16 x i16>
  %138 = shufflevector <32 x i8> %116, <32 x i8> %115, <32 x i32> <i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61>
  %139 = bitcast <32 x i8> %138 to <16 x i16>
  %140 = bitcast <32 x i8> %133 to <16 x i16>
  %141 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %140, <16 x i16> %82) #4
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %135, <16 x i16> %83) #4
  %143 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %137, <16 x i16> %84) #4
  %144 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %139, <16 x i16> %85) #4
  %145 = add <8 x i32> %141, %35
  %146 = add <8 x i32> %145, %142
  %147 = add <8 x i32> %146, %143
  %148 = add <8 x i32> %147, %144
  %149 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %148, <4 x i32> %36) #4
  %150 = tail call <8 x i32> @llvm.x86.avx2.psll.d(<8 x i32> %132, <4 x i32> %37) #4
  %151 = tail call <8 x i32> @llvm.x86.avx2.psll.d(<8 x i32> %149, <4 x i32> %37) #4
  %152 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %153 = add <8 x i32> %152, %46
  br i1 %99, label %154, label %207

154:                                              ; preds = %100
  br i1 %86, label %195, label %155

155:                                              ; preds = %154
  %156 = mul nsw i64 %101, %90
  %157 = add nsw i64 %156, %96
  %158 = getelementptr inbounds i16, i16* %12, i64 %157
  %159 = bitcast i16* %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = insertelement <4 x i64> undef, i64 %160, i32 0
  %162 = add nsw i64 %157, %90
  %163 = getelementptr inbounds i16, i16* %12, i64 %162
  %164 = bitcast i16* %163 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <4 x i64> %161, i64 %165, i32 2
  %167 = bitcast <4 x i64> %166 to <16 x i16>
  %168 = shufflevector <16 x i16> %167, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %169 = bitcast <16 x i16> %168 to <8 x i32>
  br i1 %87, label %174, label %170

170:                                              ; preds = %155
  %171 = mul <8 x i32> %27, %169
  %172 = mul <8 x i32> %153, %29
  %173 = add <8 x i32> %171, %172
  br label %176

174:                                              ; preds = %155
  %175 = add <8 x i32> %153, %169
  br label %176

176:                                              ; preds = %170, %174
  %177 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %170 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %174 ]
  %178 = phi <8 x i32> [ %173, %170 ], [ %175, %174 ]
  %179 = ashr <8 x i32> %178, %177
  %180 = add <8 x i32> %89, %179
  %181 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %180, i32 %48) #4
  %182 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %181, <8 x i32> %181) #4
  %183 = icmp slt <16 x i16> %182, %54
  %184 = select <16 x i1> %183, <16 x i16> %182, <16 x i16> %54
  %185 = bitcast <16 x i16> %184 to <4 x i64>
  %186 = mul nsw i64 %101, %91
  %187 = add nsw i64 %186, %96
  %188 = getelementptr inbounds i16, i16* %2, i64 %187
  %189 = extractelement <4 x i64> %185, i32 0
  %190 = bitcast i16* %188 to i64*
  store i64 %189, i64* %190, align 1
  %191 = add nsw i64 %187, %91
  %192 = getelementptr inbounds i16, i16* %2, i64 %191
  %193 = extractelement <4 x i64> %185, i32 2
  %194 = bitcast i16* %192 to i64*
  store i64 %193, i64* %194, align 1
  br label %273

195:                                              ; preds = %154
  %196 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %153, <8 x i32> %153) #4
  %197 = bitcast <16 x i16> %196 to <4 x i64>
  %198 = mul nsw i64 %101, %90
  %199 = add nsw i64 %198, %96
  %200 = getelementptr inbounds i16, i16* %12, i64 %199
  %201 = extractelement <4 x i64> %197, i32 0
  %202 = bitcast i16* %200 to i64*
  store i64 %201, i64* %202, align 1
  %203 = add nsw i64 %199, %90
  %204 = getelementptr inbounds i16, i16* %12, i64 %203
  %205 = extractelement <4 x i64> %197, i32 2
  %206 = bitcast i16* %204 to i64*
  store i64 %205, i64* %206, align 1
  br label %273

207:                                              ; preds = %100
  %208 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %209 = add <8 x i32> %208, %46
  br i1 %86, label %261, label %210

210:                                              ; preds = %207
  %211 = mul nsw i64 %101, %90
  %212 = add nsw i64 %211, %96
  %213 = getelementptr inbounds i16, i16* %12, i64 %212
  %214 = bitcast i16* %213 to <2 x i64>*
  %215 = load <2 x i64>, <2 x i64>* %214, align 1
  %216 = add nsw i64 %212, %90
  %217 = getelementptr inbounds i16, i16* %12, i64 %216
  %218 = bitcast i16* %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 1
  %220 = shufflevector <2 x i64> %215, <2 x i64> %219, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %221 = bitcast <4 x i64> %220 to <16 x i16>
  %222 = shufflevector <16 x i16> %221, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %223 = shufflevector <16 x i16> %221, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = bitcast <16 x i16> %222 to <8 x i32>
  br i1 %87, label %234, label %225

225:                                              ; preds = %210
  %226 = mul <8 x i32> %27, %224
  %227 = mul <8 x i32> %153, %29
  %228 = add <8 x i32> %226, %227
  %229 = ashr <8 x i32> %228, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %230 = bitcast <16 x i16> %223 to <8 x i32>
  %231 = mul <8 x i32> %27, %230
  %232 = mul <8 x i32> %209, %29
  %233 = add <8 x i32> %231, %232
  br label %239

234:                                              ; preds = %210
  %235 = add <8 x i32> %153, %224
  %236 = ashr <8 x i32> %235, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %237 = bitcast <16 x i16> %223 to <8 x i32>
  %238 = add <8 x i32> %209, %237
  br label %239

239:                                              ; preds = %225, %234
  %240 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %225 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %234 ]
  %241 = phi <8 x i32> [ %233, %225 ], [ %238, %234 ]
  %242 = phi <8 x i32> [ %229, %225 ], [ %236, %234 ]
  %243 = ashr <8 x i32> %241, %240
  %244 = add <8 x i32> %89, %242
  %245 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %244, i32 %48) #4
  %246 = add <8 x i32> %89, %243
  %247 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %246, i32 %48) #4
  %248 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %245, <8 x i32> %247) #4
  %249 = icmp slt <16 x i16> %248, %54
  %250 = select <16 x i1> %249, <16 x i16> %248, <16 x i16> %54
  %251 = bitcast <16 x i16> %250 to <4 x i64>
  %252 = shufflevector <4 x i64> %251, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %253 = shufflevector <4 x i64> %251, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %254 = mul nsw i64 %101, %91
  %255 = add nsw i64 %254, %96
  %256 = getelementptr inbounds i16, i16* %2, i64 %255
  %257 = bitcast i16* %256 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %257, align 16
  %258 = add nsw i64 %255, %91
  %259 = getelementptr inbounds i16, i16* %2, i64 %258
  %260 = bitcast i16* %259 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %260, align 16
  br label %273

261:                                              ; preds = %207
  %262 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %153, <8 x i32> %209) #4
  %263 = bitcast <16 x i16> %262 to <4 x i64>
  %264 = shufflevector <4 x i64> %263, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %265 = shufflevector <4 x i64> %263, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %266 = mul nsw i64 %101, %90
  %267 = add nsw i64 %266, %96
  %268 = getelementptr inbounds i16, i16* %12, i64 %267
  %269 = bitcast i16* %268 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %269, align 16
  %270 = add nsw i64 %267, %90
  %271 = getelementptr inbounds i16, i16* %12, i64 %270
  %272 = bitcast i16* %271 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %272, align 16
  br label %273

273:                                              ; preds = %239, %261, %176, %195
  %274 = add nuw nsw i64 %101, 2
  %275 = icmp slt i64 %274, %93
  br i1 %275, label %100, label %276

276:                                              ; preds = %273, %95
  %277 = add nuw nsw i64 %96, 8
  %278 = icmp slt i64 %277, %94
  br i1 %278, label %95, label %279

279:                                              ; preds = %276, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_y_avx2(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = add nsw i32 %16, -1
  %18 = mul nsw i32 %17, %1
  %19 = sext i32 %18 to i64
  %20 = sub nsw i64 0, %19
  %21 = getelementptr inbounds i16, i16* %0, i64 %20
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = sub nsw i32 7, %23
  %25 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> undef, i32 %26, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = insertelement <8 x i32> undef, i32 %28, i32 0
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %34 = load i32, i32* %33, align 8
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = insertelement <8 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  %39 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %34, i32 0
  %40 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %41 = add nsw i32 %9, 14
  %42 = sub i32 %41, %23
  %43 = sub i32 %42, %34
  %44 = shl i32 1, %43
  %45 = add nsw i32 %43, -1
  %46 = shl i32 1, %45
  %47 = add nsw i32 %46, %44
  %48 = insertelement <8 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = sub nsw i32 14, %23
  %51 = sub i32 %50, %34
  %52 = icmp eq i32 %9, 10
  %53 = icmp eq i32 %9, 12
  %54 = select i1 %53, i16 4095, i16 255
  %55 = select i1 %52, i16 1023, i16 %54
  %56 = insertelement <16 x i16> undef, i16 %55, i32 0
  %57 = shufflevector <16 x i16> %56, <16 x i16> undef, <16 x i32> zeroinitializer
  %58 = and i32 %7, 15
  %59 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %60 = load i16*, i16** %59, align 8
  %61 = zext i16 %14 to i32
  %62 = mul nuw nsw i32 %58, %61
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %60, i64 %63
  %65 = bitcast i16* %64 to <2 x i64>*
  %66 = load <2 x i64>, <2 x i64>* %65, align 1
  %67 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = icmp sgt i32 %4, 0
  br i1 %69, label %70, label %329

70:                                               ; preds = %10
  %71 = shl i32 1, %51
  %72 = ashr i32 %71, 1
  %73 = insertelement <8 x i32> undef, i32 %72, i32 0
  %74 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %81 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %82 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %83 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %84 = sext i32 %1 to i64
  %85 = shl nsw i32 %1, 1
  %86 = sext i32 %85 to i64
  %87 = mul nsw i32 %1, 3
  %88 = sext i32 %87 to i64
  %89 = shl nsw i32 %1, 2
  %90 = sext i32 %89 to i64
  %91 = mul nsw i32 %1, 5
  %92 = sext i32 %91 to i64
  %93 = mul nsw i32 %1, 6
  %94 = sext i32 %93 to i64
  %95 = icmp sgt i32 %5, 0
  %96 = mul nsw i32 %1, 7
  %97 = sext i32 %96 to i64
  %98 = shl nsw i32 %1, 3
  %99 = sext i32 %98 to i64
  %100 = bitcast <8 x i32> %83 to <16 x i16>
  %101 = bitcast <8 x i32> %82 to <16 x i16>
  %102 = bitcast <8 x i32> %81 to <16 x i16>
  %103 = bitcast <8 x i32> %80 to <16 x i16>
  %104 = icmp eq i32 %77, 0
  %105 = icmp eq i32 %75, 0
  %106 = sub <8 x i32> %73, %48
  %107 = shufflevector <8 x i32> %106, <8 x i32> undef, <8 x i32> zeroinitializer
  %108 = sext i32 %79 to i64
  %109 = sext i32 %3 to i64
  %110 = sext i32 %5 to i64
  %111 = sext i32 %4 to i64
  br label %112

112:                                              ; preds = %70, %326
  %113 = phi i64 [ 0, %70 ], [ %327, %326 ]
  %114 = getelementptr inbounds i16, i16* %21, i64 %113
  %115 = bitcast i16* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %114, i64 %84
  %118 = bitcast i16* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 1
  %120 = shufflevector <2 x i64> %116, <2 x i64> %119, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %121 = getelementptr inbounds i16, i16* %114, i64 %86
  %122 = bitcast i16* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 1
  %124 = shufflevector <2 x i64> %119, <2 x i64> %123, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %125 = getelementptr inbounds i16, i16* %114, i64 %88
  %126 = bitcast i16* %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 1
  %128 = shufflevector <2 x i64> %123, <2 x i64> %127, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %129 = getelementptr inbounds i16, i16* %114, i64 %90
  %130 = bitcast i16* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1
  %132 = shufflevector <2 x i64> %127, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = getelementptr inbounds i16, i16* %114, i64 %92
  %134 = bitcast i16* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1
  %136 = shufflevector <2 x i64> %131, <2 x i64> %135, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %137 = getelementptr inbounds i16, i16* %114, i64 %94
  %138 = bitcast i16* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 1
  %140 = shufflevector <2 x i64> %135, <2 x i64> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %141 = bitcast <4 x i64> %120 to <16 x i16>
  %142 = bitcast <4 x i64> %124 to <16 x i16>
  %143 = bitcast <4 x i64> %128 to <16 x i16>
  %144 = bitcast <4 x i64> %132 to <16 x i16>
  %145 = bitcast <4 x i64> %136 to <16 x i16>
  %146 = bitcast <4 x i64> %140 to <16 x i16>
  br i1 %95, label %147, label %326

147:                                              ; preds = %112
  %148 = shufflevector <16 x i16> %145, <16 x i16> %146, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = shufflevector <16 x i16> %143, <16 x i16> %144, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %150 = shufflevector <16 x i16> %141, <16 x i16> %142, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %151 = shufflevector <16 x i16> %145, <16 x i16> %146, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %152 = shufflevector <16 x i16> %143, <16 x i16> %144, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %153 = shufflevector <16 x i16> %141, <16 x i16> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %154 = shufflevector <2 x i64> %139, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %155 = trunc i64 %113 to i32
  %156 = sub nsw i32 %4, %155
  %157 = icmp slt i32 %156, 8
  br label %158

158:                                              ; preds = %147, %323
  %159 = phi i64 [ 0, %147 ], [ %324, %323 ]
  %160 = phi <4 x i64> [ %154, %147 ], [ %178, %323 ]
  %161 = phi <16 x i16> [ %148, %147 ], [ %183, %323 ]
  %162 = phi <16 x i16> [ %153, %147 ], [ %163, %323 ]
  %163 = phi <16 x i16> [ %152, %147 ], [ %164, %323 ]
  %164 = phi <16 x i16> [ %151, %147 ], [ %182, %323 ]
  %165 = phi <16 x i16> [ %150, %147 ], [ %166, %323 ]
  %166 = phi <16 x i16> [ %149, %147 ], [ %161, %323 ]
  %167 = mul nsw i64 %159, %84
  %168 = add nsw i64 %167, %113
  %169 = getelementptr inbounds i16, i16* %21, i64 %168
  %170 = getelementptr inbounds i16, i16* %169, i64 %97
  %171 = bitcast i16* %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 1
  %173 = shufflevector <2 x i64> %172, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = shufflevector <4 x i64> %160, <4 x i64> %173, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %175 = getelementptr inbounds i16, i16* %169, i64 %99
  %176 = bitcast i16* %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 1
  %178 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %179 = shufflevector <2 x i64> %172, <2 x i64> %177, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %180 = bitcast <4 x i64> %174 to <16 x i16>
  %181 = bitcast <4 x i64> %179 to <16 x i16>
  %182 = shufflevector <16 x i16> %180, <16 x i16> %181, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %183 = shufflevector <16 x i16> %180, <16 x i16> %181, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %184 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %162, <16 x i16> %100) #4
  %185 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %163, <16 x i16> %101) #4
  %186 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %164, <16 x i16> %102) #4
  %187 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %182, <16 x i16> %103) #4
  %188 = add <8 x i32> %185, %184
  %189 = add <8 x i32> %188, %186
  %190 = add <8 x i32> %189, %187
  %191 = tail call <8 x i32> @llvm.x86.avx2.psll.d(<8 x i32> %190, <4 x i32> %40) #4
  %192 = add <8 x i32> %191, %38
  %193 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %192, <4 x i32> %39) #4
  %194 = add <8 x i32> %193, %49
  br i1 %157, label %195, label %248

195:                                              ; preds = %158
  br i1 %104, label %236, label %196

196:                                              ; preds = %195
  %197 = mul nsw i64 %159, %108
  %198 = add nsw i64 %197, %113
  %199 = getelementptr inbounds i16, i16* %12, i64 %198
  %200 = bitcast i16* %199 to i64*
  %201 = load i64, i64* %200, align 1
  %202 = insertelement <4 x i64> undef, i64 %201, i32 0
  %203 = add nsw i64 %198, %108
  %204 = getelementptr inbounds i16, i16* %12, i64 %203
  %205 = bitcast i16* %204 to i64*
  %206 = load i64, i64* %205, align 1
  %207 = insertelement <4 x i64> %202, i64 %206, i32 2
  %208 = bitcast <4 x i64> %207 to <16 x i16>
  %209 = shufflevector <16 x i16> %208, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %210 = bitcast <16 x i16> %209 to <8 x i32>
  br i1 %105, label %215, label %211

211:                                              ; preds = %196
  %212 = mul <8 x i32> %30, %210
  %213 = mul <8 x i32> %194, %32
  %214 = add <8 x i32> %212, %213
  br label %217

215:                                              ; preds = %196
  %216 = add <8 x i32> %194, %210
  br label %217

217:                                              ; preds = %211, %215
  %218 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %211 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %215 ]
  %219 = phi <8 x i32> [ %214, %211 ], [ %216, %215 ]
  %220 = ashr <8 x i32> %219, %218
  %221 = add <8 x i32> %107, %220
  %222 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %221, i32 %51) #4
  %223 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %222, <8 x i32> %222) #4
  %224 = icmp slt <16 x i16> %223, %57
  %225 = select <16 x i1> %224, <16 x i16> %223, <16 x i16> %57
  %226 = bitcast <16 x i16> %225 to <4 x i64>
  %227 = mul nsw i64 %159, %109
  %228 = add nsw i64 %227, %113
  %229 = getelementptr inbounds i16, i16* %2, i64 %228
  %230 = extractelement <4 x i64> %226, i32 0
  %231 = bitcast i16* %229 to i64*
  store i64 %230, i64* %231, align 1
  %232 = add nsw i64 %228, %109
  %233 = getelementptr inbounds i16, i16* %2, i64 %232
  %234 = extractelement <4 x i64> %226, i32 2
  %235 = bitcast i16* %233 to i64*
  store i64 %234, i64* %235, align 1
  br label %323

236:                                              ; preds = %195
  %237 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %194, <8 x i32> %194) #4
  %238 = bitcast <16 x i16> %237 to <4 x i64>
  %239 = mul nsw i64 %159, %108
  %240 = add nsw i64 %239, %113
  %241 = getelementptr inbounds i16, i16* %12, i64 %240
  %242 = extractelement <4 x i64> %238, i32 0
  %243 = bitcast i16* %241 to i64*
  store i64 %242, i64* %243, align 1
  %244 = add nsw i64 %240, %108
  %245 = getelementptr inbounds i16, i16* %12, i64 %244
  %246 = extractelement <4 x i64> %238, i32 2
  %247 = bitcast i16* %245 to i64*
  store i64 %246, i64* %247, align 1
  br label %323

248:                                              ; preds = %158
  %249 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %100) #4
  %250 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %166, <16 x i16> %101) #4
  %251 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %161, <16 x i16> %102) #4
  %252 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %183, <16 x i16> %103) #4
  %253 = add <8 x i32> %250, %249
  %254 = add <8 x i32> %253, %251
  %255 = add <8 x i32> %254, %252
  %256 = tail call <8 x i32> @llvm.x86.avx2.psll.d(<8 x i32> %255, <4 x i32> %40) #4
  %257 = add <8 x i32> %256, %38
  %258 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %257, <4 x i32> %39) #4
  %259 = add <8 x i32> %258, %49
  br i1 %104, label %311, label %260

260:                                              ; preds = %248
  %261 = mul nsw i64 %159, %108
  %262 = add nsw i64 %261, %113
  %263 = getelementptr inbounds i16, i16* %12, i64 %262
  %264 = bitcast i16* %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 1
  %266 = add nsw i64 %262, %108
  %267 = getelementptr inbounds i16, i16* %12, i64 %266
  %268 = bitcast i16* %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 1
  %270 = shufflevector <2 x i64> %265, <2 x i64> %269, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %271 = bitcast <4 x i64> %270 to <16 x i16>
  %272 = shufflevector <16 x i16> %271, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %273 = shufflevector <16 x i16> %271, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %274 = bitcast <16 x i16> %272 to <8 x i32>
  br i1 %105, label %284, label %275

275:                                              ; preds = %260
  %276 = mul <8 x i32> %30, %274
  %277 = mul <8 x i32> %194, %32
  %278 = add <8 x i32> %276, %277
  %279 = ashr <8 x i32> %278, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %280 = bitcast <16 x i16> %273 to <8 x i32>
  %281 = mul <8 x i32> %30, %280
  %282 = mul <8 x i32> %259, %32
  %283 = add <8 x i32> %281, %282
  br label %289

284:                                              ; preds = %260
  %285 = add <8 x i32> %194, %274
  %286 = ashr <8 x i32> %285, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %287 = bitcast <16 x i16> %273 to <8 x i32>
  %288 = add <8 x i32> %259, %287
  br label %289

289:                                              ; preds = %275, %284
  %290 = phi <8 x i32> [ <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>, %275 ], [ <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %284 ]
  %291 = phi <8 x i32> [ %283, %275 ], [ %288, %284 ]
  %292 = phi <8 x i32> [ %279, %275 ], [ %286, %284 ]
  %293 = ashr <8 x i32> %291, %290
  %294 = add <8 x i32> %107, %292
  %295 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %294, i32 %51) #4
  %296 = add <8 x i32> %107, %293
  %297 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %296, i32 %51) #4
  %298 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %295, <8 x i32> %297) #4
  %299 = icmp slt <16 x i16> %298, %57
  %300 = select <16 x i1> %299, <16 x i16> %298, <16 x i16> %57
  %301 = bitcast <16 x i16> %300 to <4 x i64>
  %302 = shufflevector <4 x i64> %301, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %303 = shufflevector <4 x i64> %301, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %304 = mul nsw i64 %159, %109
  %305 = add nsw i64 %304, %113
  %306 = getelementptr inbounds i16, i16* %2, i64 %305
  %307 = bitcast i16* %306 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %307, align 16
  %308 = add nsw i64 %305, %109
  %309 = getelementptr inbounds i16, i16* %2, i64 %308
  %310 = bitcast i16* %309 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %310, align 16
  br label %323

311:                                              ; preds = %248
  %312 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %194, <8 x i32> %259) #4
  %313 = bitcast <16 x i16> %312 to <4 x i64>
  %314 = shufflevector <4 x i64> %313, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %315 = shufflevector <4 x i64> %313, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %316 = mul nsw i64 %159, %108
  %317 = add nsw i64 %316, %113
  %318 = getelementptr inbounds i16, i16* %12, i64 %317
  %319 = bitcast i16* %318 to <2 x i64>*
  store <2 x i64> %314, <2 x i64>* %319, align 16
  %320 = add nsw i64 %317, %108
  %321 = getelementptr inbounds i16, i16* %12, i64 %320
  %322 = bitcast i16* %321 to <2 x i64>*
  store <2 x i64> %315, <2 x i64>* %322, align 16
  br label %323

323:                                              ; preds = %289, %311, %217, %236
  %324 = add nuw nsw i64 %159, 2
  %325 = icmp slt i64 %324, %110
  br i1 %325, label %158, label %326

326:                                              ; preds = %323, %112
  %327 = add nuw nsw i64 %113, 8
  %328 = icmp slt i64 %327, %111
  br i1 %328, label %112, label %329

329:                                              ; preds = %326, %10
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16>, <16 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psll.d(<8 x i32>, <4 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
