; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_address_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_address_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.82", i32, [4 x i8], %"class.std::__1::unique_ptr.218", %"class.std::__1::unique_ptr.218", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.228", %"class.std::__1::unique_ptr.234", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.246", %"class.std::__1::unique_ptr.252", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.259", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.126", %"class.std::__1::unique_ptr.133", %"class.std::__1::unique_ptr.133", %"class.std::__1::unique_ptr.140", %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.168", %"class.std::__1::unique_ptr.175", %"class.std::__1::unique_ptr.198", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.118" = type { %"struct.std::__1::__atomic_base.119" }
%"struct.std::__1::__atomic_base.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__cxx_atomic_impl.121" }
%"struct.std::__1::__cxx_atomic_impl.121" = type { %"struct.std::__1::__cxx_atomic_base_impl.122" }
%"struct.std::__1::__cxx_atomic_base_impl.122" = type { i64 }
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.blink::Worklist.129"* }
%"class.blink::Worklist.129" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.blink::Worklist.136"* }
%"class.blink::Worklist.136" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.blink::Worklist.143"* }
%"class.blink::Worklist.143" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.blink::Worklist.150"* }
%"class.blink::Worklist.150" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.blink::Worklist.157"* }
%"class.blink::Worklist.157" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::Worklist.164"* }
%"class.blink::Worklist.164" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.blink::Worklist.171"* }
%"class.blink::Worklist.171" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.118" }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.178", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.192", [4 x i8] }>
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180", %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { i64 }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { float }
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.201", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.210" }
%"class.WTF::Vector.210" = type { %"class.WTF::VectorBuffer.211" }
%"class.WTF::VectorBuffer.211" = type { %"class.WTF::VectorBufferBase.212" }
%"class.WTF::VectorBufferBase.212" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.226" }
%"class.WTF::VectorBuffer.226" = type { %"class.WTF::VectorBufferBase.227" }
%"class.WTF::VectorBufferBase.227" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.240" }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.129"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.136"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.143"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.150"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.157"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.290" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.258 }
%class.scoped_refptr.258 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.259" = type { %"struct.std::__1::__atomic_base.260" }
%"struct.std::__1::__atomic_base.260" = type { %"struct.std::__1::__cxx_atomic_impl.261" }
%"struct.std::__1::__cxx_atomic_impl.261" = type { %"struct.std::__1::__cxx_atomic_base_impl.262" }
%"struct.std::__1::__cxx_atomic_base_impl.262" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::AddressInit" = type { %"class.blink::IDLDictionaryBase", i8, %"class.WTF::Vector", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.26", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.76", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.263", %"class.std::__1::unique_ptr.268", %"class.blink::Persistent.274", %"class.blink::Persistent.278", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.8", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.26" = type { %"class.WTF::HashTable.27" }
%"class.WTF::HashTable.27" = type <{ %"struct.WTF::KeyValuePair.30"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.30" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.39", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.34", i8* }
%"class.WTF::HashMap.34" = type { %"class.WTF::HashTable.35" }
%"class.WTF::HashTable.35" = type <{ %"struct.WTF::KeyValuePair.38"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.38" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.39" = type { %"class.v8::PersistentValueMapBase.40" }
%"class.v8::PersistentValueMapBase.40" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.41", i8* }
%"class.WTF::HashMap.41" = type { %"class.WTF::HashTable.42" }
%"class.WTF::HashTable.42" = type <{ %"struct.WTF::KeyValuePair.45"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.45" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.46" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.60", %"class.WTF::Vector.66", i8, i32 }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.WTF::Vector.52"* }
%"class.WTF::Vector.52" = type { %"class.WTF::VectorBuffer.53" }
%"class.WTF::VectorBuffer.53" = type { %"class.WTF::VectorBufferBase.54" }
%"class.WTF::VectorBufferBase.54" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.66" = type { %"class.WTF::VectorBuffer.67" }
%"class.WTF::VectorBuffer.67" = type { %"class.WTF::VectorBufferBase.54", [32 x i8] }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.297, %"class.blink::Member.316", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.297 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.298", i32, i32, %"class.blink::Persistent.300" }
%"class.WTF::RefCounted.298" = type { %"class.base::RefCounted.299" }
%"class.base::RefCounted.299" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.300" = type { %"class.blink::PersistentBase.301" }
%"class.blink::PersistentBase.301" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.306" }
%"class.WTF::HashMap.306" = type { %"class.WTF::HashTable.307" }
%"class.WTF::HashTable.307" = type <{ %"struct.WTF::KeyValuePair.309"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.309" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.313" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.310" }
%"class.blink::MemberBase.310" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.313" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.313" = type { %"class.v8::TracedReference.314" }
%"class.v8::TracedReference.314" = type { %"class.v8::BasicTracedReference.315" }
%"class.v8::BasicTracedReference.315" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.316" = type { %"class.blink::MemberBase.317" }
%"class.blink::MemberBase.317" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.263" = type { %"class.WTF::VectorBuffer.264" }
%"class.WTF::VectorBuffer.264" = type { %"class.WTF::VectorBufferBase.265" }
%"class.WTF::VectorBufferBase.265" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.274" = type { %"class.blink::PersistentBase.275" }
%"class.blink::PersistentBase.275" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.278" = type { %"class.blink::PersistentBase.279" }
%"class.blink::PersistentBase.279" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.284" }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { %"struct.std::__1::pair.287"*, i32, i32 }
%"struct.std::__1::pair.287" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.288" }
%"class.blink::MemberBase.288" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.318" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.blink::ScriptIterator" = type { %"class.v8::Isolate"*, %"class.v8::Local.1", %"class.v8::Local", %"class.v8::Local.7", %"class.v8::Local.7", i8, %"class.v8::MaybeLocal" }
%"class.v8::Local.1" = type { %"class.v8::Object"* }
%"class.v8::Local.7" = type { %"class.v8::String"* }
%"class.v8::MaybeLocal" = type { %"class.v8::Value"* }
%"class.v8::Array" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::ExecutionContext" = type opaque
%"class.v8::Int32" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.350 }
%union.anon.350 = type { %"class.blink::RuntimeCallTimerScope" }
%"class.blink::RuntimeCallTimerScope" = type { %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallTimer" }

$_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE = comdat any

$_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE = comdat any

$_ZN5blink17NativeValueTraitsINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_ = comdat any

$_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blinkL24eternalV8AddressInitKeysEPN2v87IsolateEE5kKeys = internal constant [10 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0)], align 16
@.str.1 = private unnamed_addr constant [12 x i8] c"addressLine\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"city\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"country\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"dependentLocality\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"organization\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"phone\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"postalCode\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"recipient\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"region\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"sortingCode\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 10, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZZN5blinkL24eternalV8AddressInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.12 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.13 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.14 = private unnamed_addr constant [54 x i8] c"The provided value cannot be converted to a sequence.\00", align 1
@.str.15 = private unnamed_addr constant [53 x i8] c"The object must have a callable @@iterator property.\00", align 1
@.str.16 = private unnamed_addr constant [38 x i8] c"Array length exceeds supported limit.\00", align 1
@.str.17 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.18 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E = external local_unnamed_addr global i8, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13V8AddressInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_11AddressInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::AddressInit"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.WTF::Vector", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = alloca %"class.blink::V8StringResource", align 8
  %14 = alloca %"class.blink::V8StringResource", align 8
  %15 = alloca %"class.blink::V8StringResource", align 8
  %16 = icmp eq %"class.v8::Value"* %1, null
  br i1 %16, label %1732, label %17

17:                                               ; preds = %4
  %18 = bitcast %"class.v8::Value"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 1
  br i1 %21, label %22, label %38

22:                                               ; preds = %17
  %23 = add i64 %19, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = and i64 %19, -4294967296
  %27 = zext i32 %25 to i64
  %28 = or i64 %26, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = icmp eq i16 %31, 67
  br i1 %32, label %33, label %38

33:                                               ; preds = %22
  %34 = add i64 %19, 23
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = ashr i32 %36, 1
  switch i32 %37, label %38 [
    i32 5, label %1732
    i32 3, label %1732
  ]

38:                                               ; preds = %33, %22, %17
  %39 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #8
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #8
  br label %1732

41:                                               ; preds = %38
  %42 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %43 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %44 = add i64 %43, 8
  %45 = inttoptr i64 %44 to %"class.blink::V8PerIsolateData"**
  %46 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %45, align 8
  %47 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %46, i8* bitcast ([10 x i8*]* @_ZZN5blinkL24eternalV8AddressInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.318"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.318"*)) #8
  %48 = extractvalue { i64, %"class.v8::Eternal"* } %47, 1
  %49 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %49) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #8
  %50 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #8
  %51 = bitcast %"class.v8::Eternal"* %48 to %"class.v8::Value"**
  %52 = load %"class.v8::Value"*, %"class.v8::Value"** %51, align 8
  %53 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %52) #8
  %54 = icmp eq %"class.v8::Value"* %53, null
  br i1 %54, label %55, label %61

55:                                               ; preds = %41
  %56 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %57 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %58 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %58, i64 5
  %60 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %59, align 8
  call void %60(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %56) #8
  br label %1731

61:                                               ; preds = %41
  %62 = bitcast %"class.v8::Value"* %53 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, 3
  %65 = icmp eq i64 %64, 1
  br i1 %65, label %66, label %83

66:                                               ; preds = %61
  %67 = add i64 %63, -1
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = and i64 %63, -4294967296
  %71 = zext i32 %69 to i64
  %72 = or i64 %70, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = icmp eq i16 %75, 67
  br i1 %76, label %77, label %83

77:                                               ; preds = %66
  %78 = add i64 %63, 23
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, -2
  %82 = icmp eq i32 %81, 10
  br i1 %82, label %165, label %83

83:                                               ; preds = %66, %61, %77
  %84 = bitcast %"class.WTF::Vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %84) #8
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 2
  %87 = bitcast %"class.WTF::Vector"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -86, i64 16, i1 false)
  call void @_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE(%"class.WTF::Vector"* nonnull sret %6, %"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %53, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %88 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %89 = load i32, i32* %88, align 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %128

91:                                               ; preds = %83
  call void @_ZN5blink11AddressInit14setAddressLineERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::AddressInit"* %2, %"class.WTF::Vector"* nonnull dereferenceable(16) %6) #8
  %92 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %93 = icmp eq %"class.WTF::String"* %92, null
  br i1 %93, label %127, label %94, !prof !2

94:                                               ; preds = %91
  %95 = bitcast %"class.WTF::String"* %92 to i8*
  %96 = load i32, i32* %86, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %125, label %98, !prof !3

98:                                               ; preds = %94
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %92, i64 %99
  br label %101

101:                                              ; preds = %119, %98
  %102 = phi %"class.WTF::String"* [ %120, %119 ], [ %92, %98 ]
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %102, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #8
  br label %119

119:                                              ; preds = %118, %115, %101
  %120 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %102, i64 1
  %121 = icmp eq %"class.WTF::String"* %120, %100
  br i1 %121, label %122, label %101

122:                                              ; preds = %119
  store i32 0, i32* %86, align 4
  %123 = bitcast %"class.WTF::Vector"* %6 to i8**
  %124 = load i8*, i8** %123, align 8
  br label %125

125:                                              ; preds = %122, %94
  %126 = phi i8* [ %124, %122 ], [ %95, %94 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %126) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %85, align 8
  br label %127

127:                                              ; preds = %91, %125
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84) #8
  br label %165

128:                                              ; preds = %83
  %129 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %130 = icmp eq %"class.WTF::String"* %129, null
  br i1 %130, label %164, label %131, !prof !2

131:                                              ; preds = %128
  %132 = bitcast %"class.WTF::String"* %129 to i8*
  %133 = load i32, i32* %86, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %162, label %135, !prof !3

135:                                              ; preds = %131
  %136 = zext i32 %133 to i64
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %129, i64 %136
  br label %138

138:                                              ; preds = %156, %135
  %139 = phi %"class.WTF::String"* [ %157, %156 ], [ %129, %135 ]
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %139, i64 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %156, label %143

143:                                              ; preds = %138
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %143
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %143
  %153 = phi i32 [ %151, %150 ], [ %149, %143 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %141) #8
  br label %156

156:                                              ; preds = %155, %152, %138
  %157 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %139, i64 1
  %158 = icmp eq %"class.WTF::String"* %157, %137
  br i1 %158, label %159, label %138

159:                                              ; preds = %156
  store i32 0, i32* %86, align 4
  %160 = bitcast %"class.WTF::Vector"* %6 to i8**
  %161 = load i8*, i8** %160, align 8
  br label %162

162:                                              ; preds = %159, %131
  %163 = phi i8* [ %161, %159 ], [ %132, %131 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %163) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %85, align 8
  br label %164

164:                                              ; preds = %128, %162
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84) #8
  br label %1731

165:                                              ; preds = %127, %77
  %166 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 1, i32 0
  %167 = bitcast %"class.v8::Name"** %166 to %"class.v8::Value"**
  %168 = load %"class.v8::Value"*, %"class.v8::Value"** %167, align 8
  %169 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %168) #8
  %170 = icmp eq %"class.v8::Value"* %169, null
  br i1 %170, label %171, label %177

171:                                              ; preds = %165
  %172 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %173 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %174 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %173, align 8
  %175 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %174, i64 5
  %176 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %175, align 8
  call void %176(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %172) #8
  br label %1731

177:                                              ; preds = %165
  %178 = bitcast %"class.v8::Value"* %169 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = and i64 %179, 3
  %181 = icmp eq i64 %180, 1
  br i1 %181, label %182, label %199

182:                                              ; preds = %177
  %183 = add i64 %179, -1
  %184 = inttoptr i64 %183 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = and i64 %179, -4294967296
  %187 = zext i32 %185 to i64
  %188 = or i64 %186, %187
  %189 = add i64 %188, 7
  %190 = inttoptr i64 %189 to i16*
  %191 = load i16, i16* %190, align 2
  %192 = icmp eq i16 %191, 67
  br i1 %192, label %193, label %199

193:                                              ; preds = %182
  %194 = add i64 %179, 23
  %195 = inttoptr i64 %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = and i32 %196, -2
  %198 = icmp eq i32 %197, 10
  br i1 %198, label %339, label %199

199:                                              ; preds = %182, %177, %193
  %200 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %200) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %200, i8 -86, i64 152, i1 false)
  %201 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %169, %"class.v8::Value"** %201, align 8
  %202 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %202, align 8
  %203 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %203, align 8
  %204 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %205 = bitcast %"class.std::__1::unique_ptr"* %204 to i64*
  store i64 0, i64* %205, align 8
  %206 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %206, label %207, label %317

207:                                              ; preds = %199
  %208 = load %"class.v8::Value"*, %"class.v8::Value"** %201, align 8
  %209 = icmp eq %"class.v8::Value"* %208, null
  br i1 %209, label %210, label %234, !prof !3

210:                                              ; preds = %207
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %203, align 8
  %212 = icmp eq %"class.WTF::StringImpl"* %211, null
  br i1 %212, label %213, label %215

213:                                              ; preds = %210
  %214 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 3
  br label %259

215:                                              ; preds = %210
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = and i32 %217, 2
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %232

220:                                              ; preds = %215
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 0
  %222 = load i32, i32* %221, align 4
  %223 = zext i32 %222 to i33
  %224 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %223, i33 1) #8
  %225 = extractvalue { i33, i1 } %224, 1
  %226 = extractvalue { i33, i1 } %224, 0
  %227 = icmp slt i33 %226, 0
  %228 = or i1 %225, %227
  br i1 %228, label %229, label %230, !prof !3

229:                                              ; preds = %220
  call void @llvm.trap() #8
  unreachable

230:                                              ; preds = %220
  %231 = trunc i33 %226 to i32
  store i32 %231, i32* %221, align 4
  br label %232

232:                                              ; preds = %215, %230
  %233 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 3
  br label %240

234:                                              ; preds = %207
  %235 = bitcast %"class.v8::Value"* %208 to %"class.v8::String"*
  %236 = load i32, i32* %202, align 8
  %237 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %235, i32 %236) #8
  %238 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 3
  %239 = icmp eq %"class.WTF::StringImpl"* %237, null
  br i1 %239, label %259, label %240

240:                                              ; preds = %232, %234
  %241 = phi %"class.WTF::String"* [ %233, %232 ], [ %238, %234 ]
  %242 = phi %"class.WTF::StringImpl"* [ %211, %232 ], [ %237, %234 ]
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %244 = load atomic i32, i32* %243 monotonic, align 4
  %245 = and i32 %244, 2
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %259

247:                                              ; preds = %240
  %248 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 0
  %249 = load i32, i32* %248, align 4
  %250 = zext i32 %249 to i33
  %251 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %250, i33 1) #8
  %252 = extractvalue { i33, i1 } %251, 1
  %253 = extractvalue { i33, i1 } %251, 0
  %254 = icmp slt i33 %253, 0
  %255 = or i1 %252, %254
  br i1 %255, label %256, label %257, !prof !3

256:                                              ; preds = %247
  call void @llvm.trap() #8
  unreachable

257:                                              ; preds = %247
  %258 = trunc i33 %253 to i32
  store i32 %258, i32* %248, align 4
  br label %259

259:                                              ; preds = %213, %257, %240, %234
  %260 = phi i1 [ false, %257 ], [ false, %240 ], [ true, %234 ], [ true, %213 ]
  %261 = phi %"class.WTF::String"* [ %241, %257 ], [ %241, %240 ], [ %238, %234 ], [ %214, %213 ]
  %262 = phi %"class.WTF::StringImpl"* [ %242, %257 ], [ %242, %240 ], [ null, %234 ], [ null, %213 ]
  %263 = ptrtoint %"class.WTF::StringImpl"* %262 to i64
  %264 = bitcast %"class.WTF::String"* %261 to i64*
  %265 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %261, i64 0, i32 0, i32 0
  %266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %265, align 8
  store i64 %263, i64* %264, align 8
  %267 = icmp eq %"class.WTF::StringImpl"* %266, null
  br i1 %267, label %281, label %268

268:                                              ; preds = %259
  %269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %270 = load atomic i32, i32* %269 monotonic, align 4
  %271 = and i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 0
  %274 = load i32, i32* %273, align 4
  br i1 %272, label %275, label %277

275:                                              ; preds = %268
  %276 = add i32 %274, -1
  store i32 %276, i32* %273, align 4
  br label %277

277:                                              ; preds = %275, %268
  %278 = phi i32 [ %276, %275 ], [ %274, %268 ]
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %281

280:                                              ; preds = %277
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %266) #8
  br label %281

281:                                              ; preds = %259, %277, %280
  br i1 %260, label %295, label %282

282:                                              ; preds = %281
  %283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %284 = load atomic i32, i32* %283 monotonic, align 4
  %285 = and i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 0
  %288 = load i32, i32* %287, align 4
  br i1 %286, label %289, label %291

289:                                              ; preds = %282
  %290 = add i32 %288, -1
  store i32 %290, i32* %287, align 4
  br label %291

291:                                              ; preds = %289, %282
  %292 = phi i32 [ %290, %289 ], [ %288, %282 ]
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %295

294:                                              ; preds = %291
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %262) #8
  br label %295

295:                                              ; preds = %281, %291, %294
  %296 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %297 = load i8*, i8** %296, align 8
  store i8* null, i8** %296, align 8
  %298 = icmp eq i8* %297, null
  br i1 %298, label %300, label %299

299:                                              ; preds = %295
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %297) #8
  br label %300

300:                                              ; preds = %299, %295
  %301 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %203, align 8
  %302 = icmp eq %"class.WTF::StringImpl"* %301, null
  br i1 %302, label %316, label %303

303:                                              ; preds = %300
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %305 = load atomic i32, i32* %304 monotonic, align 4
  %306 = and i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 0
  %309 = load i32, i32* %308, align 4
  br i1 %307, label %310, label %312

310:                                              ; preds = %303
  %311 = add i32 %309, -1
  store i32 %311, i32* %308, align 4
  br label %312

312:                                              ; preds = %310, %303
  %313 = phi i32 [ %311, %310 ], [ %309, %303 ]
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %316

315:                                              ; preds = %312
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %301) #8
  br label %316

316:                                              ; preds = %300, %312, %315
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %200) #8
  br label %339

317:                                              ; preds = %199
  %318 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %319 = load i8*, i8** %318, align 8
  store i8* null, i8** %318, align 8
  %320 = icmp eq i8* %319, null
  br i1 %320, label %322, label %321

321:                                              ; preds = %317
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %319) #8
  br label %322

322:                                              ; preds = %321, %317
  %323 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %203, align 8
  %324 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %324, label %338, label %325

325:                                              ; preds = %322
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %327 = load atomic i32, i32* %326 monotonic, align 4
  %328 = and i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 0
  %331 = load i32, i32* %330, align 4
  br i1 %329, label %332, label %334

332:                                              ; preds = %325
  %333 = add i32 %331, -1
  store i32 %333, i32* %330, align 4
  br label %334

334:                                              ; preds = %332, %325
  %335 = phi i32 [ %333, %332 ], [ %331, %325 ]
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %338

337:                                              ; preds = %334
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %323) #8
  br label %338

338:                                              ; preds = %322, %334, %337
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %200) #8
  br label %1731

339:                                              ; preds = %316, %193
  %340 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 2, i32 0
  %341 = bitcast %"class.v8::Name"** %340 to %"class.v8::Value"**
  %342 = load %"class.v8::Value"*, %"class.v8::Value"** %341, align 8
  %343 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %342) #8
  %344 = icmp eq %"class.v8::Value"* %343, null
  br i1 %344, label %345, label %351

345:                                              ; preds = %339
  %346 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %347 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %348 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %347, align 8
  %349 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %348, i64 5
  %350 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %349, align 8
  call void %350(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %346) #8
  br label %1731

351:                                              ; preds = %339
  %352 = bitcast %"class.v8::Value"* %343 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = and i64 %353, 3
  %355 = icmp eq i64 %354, 1
  br i1 %355, label %356, label %373

356:                                              ; preds = %351
  %357 = add i64 %353, -1
  %358 = inttoptr i64 %357 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = and i64 %353, -4294967296
  %361 = zext i32 %359 to i64
  %362 = or i64 %360, %361
  %363 = add i64 %362, 7
  %364 = inttoptr i64 %363 to i16*
  %365 = load i16, i16* %364, align 2
  %366 = icmp eq i16 %365, 67
  br i1 %366, label %367, label %373

367:                                              ; preds = %356
  %368 = add i64 %353, 23
  %369 = inttoptr i64 %368 to i32*
  %370 = load i32, i32* %369, align 4
  %371 = and i32 %370, -2
  %372 = icmp eq i32 %371, 10
  br i1 %372, label %513, label %373

373:                                              ; preds = %356, %351, %367
  %374 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %374) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %374, i8 -86, i64 152, i1 false)
  %375 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %343, %"class.v8::Value"** %375, align 8
  %376 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %376, align 8
  %377 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %377, align 8
  %378 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %379 = bitcast %"class.std::__1::unique_ptr"* %378 to i64*
  store i64 0, i64* %379, align 8
  %380 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %380, label %381, label %491

381:                                              ; preds = %373
  %382 = load %"class.v8::Value"*, %"class.v8::Value"** %375, align 8
  %383 = icmp eq %"class.v8::Value"* %382, null
  br i1 %383, label %384, label %408, !prof !3

384:                                              ; preds = %381
  %385 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %377, align 8
  %386 = icmp eq %"class.WTF::StringImpl"* %385, null
  br i1 %386, label %387, label %389

387:                                              ; preds = %384
  %388 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 4
  br label %433

389:                                              ; preds = %384
  %390 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %385, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %391 = load atomic i32, i32* %390 monotonic, align 4
  %392 = and i32 %391, 2
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %406

394:                                              ; preds = %389
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %385, i64 0, i32 0
  %396 = load i32, i32* %395, align 4
  %397 = zext i32 %396 to i33
  %398 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %397, i33 1) #8
  %399 = extractvalue { i33, i1 } %398, 1
  %400 = extractvalue { i33, i1 } %398, 0
  %401 = icmp slt i33 %400, 0
  %402 = or i1 %399, %401
  br i1 %402, label %403, label %404, !prof !3

403:                                              ; preds = %394
  call void @llvm.trap() #8
  unreachable

404:                                              ; preds = %394
  %405 = trunc i33 %400 to i32
  store i32 %405, i32* %395, align 4
  br label %406

406:                                              ; preds = %389, %404
  %407 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 4
  br label %414

408:                                              ; preds = %381
  %409 = bitcast %"class.v8::Value"* %382 to %"class.v8::String"*
  %410 = load i32, i32* %376, align 8
  %411 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %409, i32 %410) #8
  %412 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 4
  %413 = icmp eq %"class.WTF::StringImpl"* %411, null
  br i1 %413, label %433, label %414

414:                                              ; preds = %406, %408
  %415 = phi %"class.WTF::String"* [ %407, %406 ], [ %412, %408 ]
  %416 = phi %"class.WTF::StringImpl"* [ %385, %406 ], [ %411, %408 ]
  %417 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %416, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %418 = load atomic i32, i32* %417 monotonic, align 4
  %419 = and i32 %418, 2
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %433

421:                                              ; preds = %414
  %422 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %416, i64 0, i32 0
  %423 = load i32, i32* %422, align 4
  %424 = zext i32 %423 to i33
  %425 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %424, i33 1) #8
  %426 = extractvalue { i33, i1 } %425, 1
  %427 = extractvalue { i33, i1 } %425, 0
  %428 = icmp slt i33 %427, 0
  %429 = or i1 %426, %428
  br i1 %429, label %430, label %431, !prof !3

430:                                              ; preds = %421
  call void @llvm.trap() #8
  unreachable

431:                                              ; preds = %421
  %432 = trunc i33 %427 to i32
  store i32 %432, i32* %422, align 4
  br label %433

433:                                              ; preds = %387, %431, %414, %408
  %434 = phi i1 [ false, %431 ], [ false, %414 ], [ true, %408 ], [ true, %387 ]
  %435 = phi %"class.WTF::String"* [ %415, %431 ], [ %415, %414 ], [ %412, %408 ], [ %388, %387 ]
  %436 = phi %"class.WTF::StringImpl"* [ %416, %431 ], [ %416, %414 ], [ null, %408 ], [ null, %387 ]
  %437 = ptrtoint %"class.WTF::StringImpl"* %436 to i64
  %438 = bitcast %"class.WTF::String"* %435 to i64*
  %439 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %435, i64 0, i32 0, i32 0
  %440 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %439, align 8
  store i64 %437, i64* %438, align 8
  %441 = icmp eq %"class.WTF::StringImpl"* %440, null
  br i1 %441, label %455, label %442

442:                                              ; preds = %433
  %443 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %444 = load atomic i32, i32* %443 monotonic, align 4
  %445 = and i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %440, i64 0, i32 0
  %448 = load i32, i32* %447, align 4
  br i1 %446, label %449, label %451

449:                                              ; preds = %442
  %450 = add i32 %448, -1
  store i32 %450, i32* %447, align 4
  br label %451

451:                                              ; preds = %449, %442
  %452 = phi i32 [ %450, %449 ], [ %448, %442 ]
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %455

454:                                              ; preds = %451
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %440) #8
  br label %455

455:                                              ; preds = %433, %451, %454
  br i1 %434, label %469, label %456

456:                                              ; preds = %455
  %457 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %436, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %458 = load atomic i32, i32* %457 monotonic, align 4
  %459 = and i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %436, i64 0, i32 0
  %462 = load i32, i32* %461, align 4
  br i1 %460, label %463, label %465

463:                                              ; preds = %456
  %464 = add i32 %462, -1
  store i32 %464, i32* %461, align 4
  br label %465

465:                                              ; preds = %463, %456
  %466 = phi i32 [ %464, %463 ], [ %462, %456 ]
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %469

468:                                              ; preds = %465
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %436) #8
  br label %469

469:                                              ; preds = %455, %465, %468
  %470 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %471 = load i8*, i8** %470, align 8
  store i8* null, i8** %470, align 8
  %472 = icmp eq i8* %471, null
  br i1 %472, label %474, label %473

473:                                              ; preds = %469
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %471) #8
  br label %474

474:                                              ; preds = %473, %469
  %475 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %377, align 8
  %476 = icmp eq %"class.WTF::StringImpl"* %475, null
  br i1 %476, label %490, label %477

477:                                              ; preds = %474
  %478 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %475, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %479 = load atomic i32, i32* %478 monotonic, align 4
  %480 = and i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %475, i64 0, i32 0
  %483 = load i32, i32* %482, align 4
  br i1 %481, label %484, label %486

484:                                              ; preds = %477
  %485 = add i32 %483, -1
  store i32 %485, i32* %482, align 4
  br label %486

486:                                              ; preds = %484, %477
  %487 = phi i32 [ %485, %484 ], [ %483, %477 ]
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %490

489:                                              ; preds = %486
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %475) #8
  br label %490

490:                                              ; preds = %474, %486, %489
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %374) #8
  br label %513

491:                                              ; preds = %373
  %492 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %493 = load i8*, i8** %492, align 8
  store i8* null, i8** %492, align 8
  %494 = icmp eq i8* %493, null
  br i1 %494, label %496, label %495

495:                                              ; preds = %491
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %493) #8
  br label %496

496:                                              ; preds = %495, %491
  %497 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %377, align 8
  %498 = icmp eq %"class.WTF::StringImpl"* %497, null
  br i1 %498, label %512, label %499

499:                                              ; preds = %496
  %500 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %497, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %501 = load atomic i32, i32* %500 monotonic, align 4
  %502 = and i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %497, i64 0, i32 0
  %505 = load i32, i32* %504, align 4
  br i1 %503, label %506, label %508

506:                                              ; preds = %499
  %507 = add i32 %505, -1
  store i32 %507, i32* %504, align 4
  br label %508

508:                                              ; preds = %506, %499
  %509 = phi i32 [ %507, %506 ], [ %505, %499 ]
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %512

511:                                              ; preds = %508
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %497) #8
  br label %512

512:                                              ; preds = %496, %508, %511
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %374) #8
  br label %1731

513:                                              ; preds = %490, %367
  %514 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 3, i32 0
  %515 = bitcast %"class.v8::Name"** %514 to %"class.v8::Value"**
  %516 = load %"class.v8::Value"*, %"class.v8::Value"** %515, align 8
  %517 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %516) #8
  %518 = icmp eq %"class.v8::Value"* %517, null
  br i1 %518, label %519, label %525

519:                                              ; preds = %513
  %520 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %521 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %522 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %521, align 8
  %523 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %522, i64 5
  %524 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %523, align 8
  call void %524(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %520) #8
  br label %1731

525:                                              ; preds = %513
  %526 = bitcast %"class.v8::Value"* %517 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = and i64 %527, 3
  %529 = icmp eq i64 %528, 1
  br i1 %529, label %530, label %547

530:                                              ; preds = %525
  %531 = add i64 %527, -1
  %532 = inttoptr i64 %531 to i32*
  %533 = load i32, i32* %532, align 4
  %534 = and i64 %527, -4294967296
  %535 = zext i32 %533 to i64
  %536 = or i64 %534, %535
  %537 = add i64 %536, 7
  %538 = inttoptr i64 %537 to i16*
  %539 = load i16, i16* %538, align 2
  %540 = icmp eq i16 %539, 67
  br i1 %540, label %541, label %547

541:                                              ; preds = %530
  %542 = add i64 %527, 23
  %543 = inttoptr i64 %542 to i32*
  %544 = load i32, i32* %543, align 4
  %545 = and i32 %544, -2
  %546 = icmp eq i32 %545, 10
  br i1 %546, label %687, label %547

547:                                              ; preds = %530, %525, %541
  %548 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %548) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %548, i8 -86, i64 152, i1 false)
  %549 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %517, %"class.v8::Value"** %549, align 8
  %550 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %550, align 8
  %551 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %551, align 8
  %552 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %553 = bitcast %"class.std::__1::unique_ptr"* %552 to i64*
  store i64 0, i64* %553, align 8
  %554 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %554, label %555, label %665

555:                                              ; preds = %547
  %556 = load %"class.v8::Value"*, %"class.v8::Value"** %549, align 8
  %557 = icmp eq %"class.v8::Value"* %556, null
  br i1 %557, label %558, label %582, !prof !3

558:                                              ; preds = %555
  %559 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %551, align 8
  %560 = icmp eq %"class.WTF::StringImpl"* %559, null
  br i1 %560, label %561, label %563

561:                                              ; preds = %558
  %562 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 5
  br label %607

563:                                              ; preds = %558
  %564 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %565 = load atomic i32, i32* %564 monotonic, align 4
  %566 = and i32 %565, 2
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %568, label %580

568:                                              ; preds = %563
  %569 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 0
  %570 = load i32, i32* %569, align 4
  %571 = zext i32 %570 to i33
  %572 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %571, i33 1) #8
  %573 = extractvalue { i33, i1 } %572, 1
  %574 = extractvalue { i33, i1 } %572, 0
  %575 = icmp slt i33 %574, 0
  %576 = or i1 %573, %575
  br i1 %576, label %577, label %578, !prof !3

577:                                              ; preds = %568
  call void @llvm.trap() #8
  unreachable

578:                                              ; preds = %568
  %579 = trunc i33 %574 to i32
  store i32 %579, i32* %569, align 4
  br label %580

580:                                              ; preds = %563, %578
  %581 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 5
  br label %588

582:                                              ; preds = %555
  %583 = bitcast %"class.v8::Value"* %556 to %"class.v8::String"*
  %584 = load i32, i32* %550, align 8
  %585 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %583, i32 %584) #8
  %586 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 5
  %587 = icmp eq %"class.WTF::StringImpl"* %585, null
  br i1 %587, label %607, label %588

588:                                              ; preds = %580, %582
  %589 = phi %"class.WTF::String"* [ %581, %580 ], [ %586, %582 ]
  %590 = phi %"class.WTF::StringImpl"* [ %559, %580 ], [ %585, %582 ]
  %591 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %590, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %592 = load atomic i32, i32* %591 monotonic, align 4
  %593 = and i32 %592, 2
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %595, label %607

595:                                              ; preds = %588
  %596 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %590, i64 0, i32 0
  %597 = load i32, i32* %596, align 4
  %598 = zext i32 %597 to i33
  %599 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %598, i33 1) #8
  %600 = extractvalue { i33, i1 } %599, 1
  %601 = extractvalue { i33, i1 } %599, 0
  %602 = icmp slt i33 %601, 0
  %603 = or i1 %600, %602
  br i1 %603, label %604, label %605, !prof !3

604:                                              ; preds = %595
  call void @llvm.trap() #8
  unreachable

605:                                              ; preds = %595
  %606 = trunc i33 %601 to i32
  store i32 %606, i32* %596, align 4
  br label %607

607:                                              ; preds = %561, %605, %588, %582
  %608 = phi i1 [ false, %605 ], [ false, %588 ], [ true, %582 ], [ true, %561 ]
  %609 = phi %"class.WTF::String"* [ %589, %605 ], [ %589, %588 ], [ %586, %582 ], [ %562, %561 ]
  %610 = phi %"class.WTF::StringImpl"* [ %590, %605 ], [ %590, %588 ], [ null, %582 ], [ null, %561 ]
  %611 = ptrtoint %"class.WTF::StringImpl"* %610 to i64
  %612 = bitcast %"class.WTF::String"* %609 to i64*
  %613 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %609, i64 0, i32 0, i32 0
  %614 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %613, align 8
  store i64 %611, i64* %612, align 8
  %615 = icmp eq %"class.WTF::StringImpl"* %614, null
  br i1 %615, label %629, label %616

616:                                              ; preds = %607
  %617 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %618 = load atomic i32, i32* %617 monotonic, align 4
  %619 = and i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 0
  %622 = load i32, i32* %621, align 4
  br i1 %620, label %623, label %625

623:                                              ; preds = %616
  %624 = add i32 %622, -1
  store i32 %624, i32* %621, align 4
  br label %625

625:                                              ; preds = %623, %616
  %626 = phi i32 [ %624, %623 ], [ %622, %616 ]
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %628, label %629

628:                                              ; preds = %625
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %614) #8
  br label %629

629:                                              ; preds = %607, %625, %628
  br i1 %608, label %643, label %630

630:                                              ; preds = %629
  %631 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %610, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %632 = load atomic i32, i32* %631 monotonic, align 4
  %633 = and i32 %632, 2
  %634 = icmp eq i32 %633, 0
  %635 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %610, i64 0, i32 0
  %636 = load i32, i32* %635, align 4
  br i1 %634, label %637, label %639

637:                                              ; preds = %630
  %638 = add i32 %636, -1
  store i32 %638, i32* %635, align 4
  br label %639

639:                                              ; preds = %637, %630
  %640 = phi i32 [ %638, %637 ], [ %636, %630 ]
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %642, label %643

642:                                              ; preds = %639
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %610) #8
  br label %643

643:                                              ; preds = %629, %639, %642
  %644 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %645 = load i8*, i8** %644, align 8
  store i8* null, i8** %644, align 8
  %646 = icmp eq i8* %645, null
  br i1 %646, label %648, label %647

647:                                              ; preds = %643
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %645) #8
  br label %648

648:                                              ; preds = %647, %643
  %649 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %551, align 8
  %650 = icmp eq %"class.WTF::StringImpl"* %649, null
  br i1 %650, label %664, label %651

651:                                              ; preds = %648
  %652 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %649, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %653 = load atomic i32, i32* %652 monotonic, align 4
  %654 = and i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %649, i64 0, i32 0
  %657 = load i32, i32* %656, align 4
  br i1 %655, label %658, label %660

658:                                              ; preds = %651
  %659 = add i32 %657, -1
  store i32 %659, i32* %656, align 4
  br label %660

660:                                              ; preds = %658, %651
  %661 = phi i32 [ %659, %658 ], [ %657, %651 ]
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %663, label %664

663:                                              ; preds = %660
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %649) #8
  br label %664

664:                                              ; preds = %648, %660, %663
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %548) #8
  br label %687

665:                                              ; preds = %547
  %666 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %667 = load i8*, i8** %666, align 8
  store i8* null, i8** %666, align 8
  %668 = icmp eq i8* %667, null
  br i1 %668, label %670, label %669

669:                                              ; preds = %665
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %667) #8
  br label %670

670:                                              ; preds = %669, %665
  %671 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %551, align 8
  %672 = icmp eq %"class.WTF::StringImpl"* %671, null
  br i1 %672, label %686, label %673

673:                                              ; preds = %670
  %674 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %671, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %675 = load atomic i32, i32* %674 monotonic, align 4
  %676 = and i32 %675, 2
  %677 = icmp eq i32 %676, 0
  %678 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %671, i64 0, i32 0
  %679 = load i32, i32* %678, align 4
  br i1 %677, label %680, label %682

680:                                              ; preds = %673
  %681 = add i32 %679, -1
  store i32 %681, i32* %678, align 4
  br label %682

682:                                              ; preds = %680, %673
  %683 = phi i32 [ %681, %680 ], [ %679, %673 ]
  %684 = icmp eq i32 %683, 0
  br i1 %684, label %685, label %686

685:                                              ; preds = %682
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %671) #8
  br label %686

686:                                              ; preds = %670, %682, %685
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %548) #8
  br label %1731

687:                                              ; preds = %664, %541
  %688 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 4, i32 0
  %689 = bitcast %"class.v8::Name"** %688 to %"class.v8::Value"**
  %690 = load %"class.v8::Value"*, %"class.v8::Value"** %689, align 8
  %691 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %690) #8
  %692 = icmp eq %"class.v8::Value"* %691, null
  br i1 %692, label %693, label %699

693:                                              ; preds = %687
  %694 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %695 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %696 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %695, align 8
  %697 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %696, i64 5
  %698 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %697, align 8
  call void %698(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %694) #8
  br label %1731

699:                                              ; preds = %687
  %700 = bitcast %"class.v8::Value"* %691 to i64*
  %701 = load i64, i64* %700, align 8
  %702 = and i64 %701, 3
  %703 = icmp eq i64 %702, 1
  br i1 %703, label %704, label %721

704:                                              ; preds = %699
  %705 = add i64 %701, -1
  %706 = inttoptr i64 %705 to i32*
  %707 = load i32, i32* %706, align 4
  %708 = and i64 %701, -4294967296
  %709 = zext i32 %707 to i64
  %710 = or i64 %708, %709
  %711 = add i64 %710, 7
  %712 = inttoptr i64 %711 to i16*
  %713 = load i16, i16* %712, align 2
  %714 = icmp eq i16 %713, 67
  br i1 %714, label %715, label %721

715:                                              ; preds = %704
  %716 = add i64 %701, 23
  %717 = inttoptr i64 %716 to i32*
  %718 = load i32, i32* %717, align 4
  %719 = and i32 %718, -2
  %720 = icmp eq i32 %719, 10
  br i1 %720, label %861, label %721

721:                                              ; preds = %704, %699, %715
  %722 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %722) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %722, i8 -86, i64 152, i1 false)
  %723 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %691, %"class.v8::Value"** %723, align 8
  %724 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %724, align 8
  %725 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %725, align 8
  %726 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %727 = bitcast %"class.std::__1::unique_ptr"* %726 to i64*
  store i64 0, i64* %727, align 8
  %728 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %728, label %729, label %839

729:                                              ; preds = %721
  %730 = load %"class.v8::Value"*, %"class.v8::Value"** %723, align 8
  %731 = icmp eq %"class.v8::Value"* %730, null
  br i1 %731, label %732, label %756, !prof !3

732:                                              ; preds = %729
  %733 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %725, align 8
  %734 = icmp eq %"class.WTF::StringImpl"* %733, null
  br i1 %734, label %735, label %737

735:                                              ; preds = %732
  %736 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 6
  br label %781

737:                                              ; preds = %732
  %738 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %733, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %739 = load atomic i32, i32* %738 monotonic, align 4
  %740 = and i32 %739, 2
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %742, label %754

742:                                              ; preds = %737
  %743 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %733, i64 0, i32 0
  %744 = load i32, i32* %743, align 4
  %745 = zext i32 %744 to i33
  %746 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %745, i33 1) #8
  %747 = extractvalue { i33, i1 } %746, 1
  %748 = extractvalue { i33, i1 } %746, 0
  %749 = icmp slt i33 %748, 0
  %750 = or i1 %747, %749
  br i1 %750, label %751, label %752, !prof !3

751:                                              ; preds = %742
  call void @llvm.trap() #8
  unreachable

752:                                              ; preds = %742
  %753 = trunc i33 %748 to i32
  store i32 %753, i32* %743, align 4
  br label %754

754:                                              ; preds = %737, %752
  %755 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 6
  br label %762

756:                                              ; preds = %729
  %757 = bitcast %"class.v8::Value"* %730 to %"class.v8::String"*
  %758 = load i32, i32* %724, align 8
  %759 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %757, i32 %758) #8
  %760 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 6
  %761 = icmp eq %"class.WTF::StringImpl"* %759, null
  br i1 %761, label %781, label %762

762:                                              ; preds = %754, %756
  %763 = phi %"class.WTF::String"* [ %755, %754 ], [ %760, %756 ]
  %764 = phi %"class.WTF::StringImpl"* [ %733, %754 ], [ %759, %756 ]
  %765 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %764, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %766 = load atomic i32, i32* %765 monotonic, align 4
  %767 = and i32 %766, 2
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %769, label %781

769:                                              ; preds = %762
  %770 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %764, i64 0, i32 0
  %771 = load i32, i32* %770, align 4
  %772 = zext i32 %771 to i33
  %773 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %772, i33 1) #8
  %774 = extractvalue { i33, i1 } %773, 1
  %775 = extractvalue { i33, i1 } %773, 0
  %776 = icmp slt i33 %775, 0
  %777 = or i1 %774, %776
  br i1 %777, label %778, label %779, !prof !3

778:                                              ; preds = %769
  call void @llvm.trap() #8
  unreachable

779:                                              ; preds = %769
  %780 = trunc i33 %775 to i32
  store i32 %780, i32* %770, align 4
  br label %781

781:                                              ; preds = %735, %779, %762, %756
  %782 = phi i1 [ false, %779 ], [ false, %762 ], [ true, %756 ], [ true, %735 ]
  %783 = phi %"class.WTF::String"* [ %763, %779 ], [ %763, %762 ], [ %760, %756 ], [ %736, %735 ]
  %784 = phi %"class.WTF::StringImpl"* [ %764, %779 ], [ %764, %762 ], [ null, %756 ], [ null, %735 ]
  %785 = ptrtoint %"class.WTF::StringImpl"* %784 to i64
  %786 = bitcast %"class.WTF::String"* %783 to i64*
  %787 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %783, i64 0, i32 0, i32 0
  %788 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %787, align 8
  store i64 %785, i64* %786, align 8
  %789 = icmp eq %"class.WTF::StringImpl"* %788, null
  br i1 %789, label %803, label %790

790:                                              ; preds = %781
  %791 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %788, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %792 = load atomic i32, i32* %791 monotonic, align 4
  %793 = and i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %788, i64 0, i32 0
  %796 = load i32, i32* %795, align 4
  br i1 %794, label %797, label %799

797:                                              ; preds = %790
  %798 = add i32 %796, -1
  store i32 %798, i32* %795, align 4
  br label %799

799:                                              ; preds = %797, %790
  %800 = phi i32 [ %798, %797 ], [ %796, %790 ]
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %802, label %803

802:                                              ; preds = %799
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %788) #8
  br label %803

803:                                              ; preds = %781, %799, %802
  br i1 %782, label %817, label %804

804:                                              ; preds = %803
  %805 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %784, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %806 = load atomic i32, i32* %805 monotonic, align 4
  %807 = and i32 %806, 2
  %808 = icmp eq i32 %807, 0
  %809 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %784, i64 0, i32 0
  %810 = load i32, i32* %809, align 4
  br i1 %808, label %811, label %813

811:                                              ; preds = %804
  %812 = add i32 %810, -1
  store i32 %812, i32* %809, align 4
  br label %813

813:                                              ; preds = %811, %804
  %814 = phi i32 [ %812, %811 ], [ %810, %804 ]
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %816, label %817

816:                                              ; preds = %813
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %784) #8
  br label %817

817:                                              ; preds = %803, %813, %816
  %818 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %819 = load i8*, i8** %818, align 8
  store i8* null, i8** %818, align 8
  %820 = icmp eq i8* %819, null
  br i1 %820, label %822, label %821

821:                                              ; preds = %817
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %819) #8
  br label %822

822:                                              ; preds = %821, %817
  %823 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %725, align 8
  %824 = icmp eq %"class.WTF::StringImpl"* %823, null
  br i1 %824, label %838, label %825

825:                                              ; preds = %822
  %826 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %823, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %827 = load atomic i32, i32* %826 monotonic, align 4
  %828 = and i32 %827, 2
  %829 = icmp eq i32 %828, 0
  %830 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %823, i64 0, i32 0
  %831 = load i32, i32* %830, align 4
  br i1 %829, label %832, label %834

832:                                              ; preds = %825
  %833 = add i32 %831, -1
  store i32 %833, i32* %830, align 4
  br label %834

834:                                              ; preds = %832, %825
  %835 = phi i32 [ %833, %832 ], [ %831, %825 ]
  %836 = icmp eq i32 %835, 0
  br i1 %836, label %837, label %838

837:                                              ; preds = %834
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %823) #8
  br label %838

838:                                              ; preds = %822, %834, %837
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %722) #8
  br label %861

839:                                              ; preds = %721
  %840 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %841 = load i8*, i8** %840, align 8
  store i8* null, i8** %840, align 8
  %842 = icmp eq i8* %841, null
  br i1 %842, label %844, label %843

843:                                              ; preds = %839
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %841) #8
  br label %844

844:                                              ; preds = %843, %839
  %845 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %725, align 8
  %846 = icmp eq %"class.WTF::StringImpl"* %845, null
  br i1 %846, label %860, label %847

847:                                              ; preds = %844
  %848 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %845, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %849 = load atomic i32, i32* %848 monotonic, align 4
  %850 = and i32 %849, 2
  %851 = icmp eq i32 %850, 0
  %852 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %845, i64 0, i32 0
  %853 = load i32, i32* %852, align 4
  br i1 %851, label %854, label %856

854:                                              ; preds = %847
  %855 = add i32 %853, -1
  store i32 %855, i32* %852, align 4
  br label %856

856:                                              ; preds = %854, %847
  %857 = phi i32 [ %855, %854 ], [ %853, %847 ]
  %858 = icmp eq i32 %857, 0
  br i1 %858, label %859, label %860

859:                                              ; preds = %856
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %845) #8
  br label %860

860:                                              ; preds = %844, %856, %859
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %722) #8
  br label %1731

861:                                              ; preds = %838, %715
  %862 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 5, i32 0
  %863 = bitcast %"class.v8::Name"** %862 to %"class.v8::Value"**
  %864 = load %"class.v8::Value"*, %"class.v8::Value"** %863, align 8
  %865 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %864) #8
  %866 = icmp eq %"class.v8::Value"* %865, null
  br i1 %866, label %867, label %873

867:                                              ; preds = %861
  %868 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %869 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %870 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %869, align 8
  %871 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %870, i64 5
  %872 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %871, align 8
  call void %872(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %868) #8
  br label %1731

873:                                              ; preds = %861
  %874 = bitcast %"class.v8::Value"* %865 to i64*
  %875 = load i64, i64* %874, align 8
  %876 = and i64 %875, 3
  %877 = icmp eq i64 %876, 1
  br i1 %877, label %878, label %895

878:                                              ; preds = %873
  %879 = add i64 %875, -1
  %880 = inttoptr i64 %879 to i32*
  %881 = load i32, i32* %880, align 4
  %882 = and i64 %875, -4294967296
  %883 = zext i32 %881 to i64
  %884 = or i64 %882, %883
  %885 = add i64 %884, 7
  %886 = inttoptr i64 %885 to i16*
  %887 = load i16, i16* %886, align 2
  %888 = icmp eq i16 %887, 67
  br i1 %888, label %889, label %895

889:                                              ; preds = %878
  %890 = add i64 %875, 23
  %891 = inttoptr i64 %890 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = and i32 %892, -2
  %894 = icmp eq i32 %893, 10
  br i1 %894, label %1035, label %895

895:                                              ; preds = %878, %873, %889
  %896 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %896) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %896, i8 -86, i64 152, i1 false)
  %897 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %865, %"class.v8::Value"** %897, align 8
  %898 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %898, align 8
  %899 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %899, align 8
  %900 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %901 = bitcast %"class.std::__1::unique_ptr"* %900 to i64*
  store i64 0, i64* %901, align 8
  %902 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %902, label %903, label %1013

903:                                              ; preds = %895
  %904 = load %"class.v8::Value"*, %"class.v8::Value"** %897, align 8
  %905 = icmp eq %"class.v8::Value"* %904, null
  br i1 %905, label %906, label %930, !prof !3

906:                                              ; preds = %903
  %907 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %899, align 8
  %908 = icmp eq %"class.WTF::StringImpl"* %907, null
  br i1 %908, label %909, label %911

909:                                              ; preds = %906
  %910 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 7
  br label %955

911:                                              ; preds = %906
  %912 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %907, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %913 = load atomic i32, i32* %912 monotonic, align 4
  %914 = and i32 %913, 2
  %915 = icmp eq i32 %914, 0
  br i1 %915, label %916, label %928

916:                                              ; preds = %911
  %917 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %907, i64 0, i32 0
  %918 = load i32, i32* %917, align 4
  %919 = zext i32 %918 to i33
  %920 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %919, i33 1) #8
  %921 = extractvalue { i33, i1 } %920, 1
  %922 = extractvalue { i33, i1 } %920, 0
  %923 = icmp slt i33 %922, 0
  %924 = or i1 %921, %923
  br i1 %924, label %925, label %926, !prof !3

925:                                              ; preds = %916
  call void @llvm.trap() #8
  unreachable

926:                                              ; preds = %916
  %927 = trunc i33 %922 to i32
  store i32 %927, i32* %917, align 4
  br label %928

928:                                              ; preds = %911, %926
  %929 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 7
  br label %936

930:                                              ; preds = %903
  %931 = bitcast %"class.v8::Value"* %904 to %"class.v8::String"*
  %932 = load i32, i32* %898, align 8
  %933 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %931, i32 %932) #8
  %934 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 7
  %935 = icmp eq %"class.WTF::StringImpl"* %933, null
  br i1 %935, label %955, label %936

936:                                              ; preds = %928, %930
  %937 = phi %"class.WTF::String"* [ %929, %928 ], [ %934, %930 ]
  %938 = phi %"class.WTF::StringImpl"* [ %907, %928 ], [ %933, %930 ]
  %939 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %938, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %940 = load atomic i32, i32* %939 monotonic, align 4
  %941 = and i32 %940, 2
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %943, label %955

943:                                              ; preds = %936
  %944 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %938, i64 0, i32 0
  %945 = load i32, i32* %944, align 4
  %946 = zext i32 %945 to i33
  %947 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %946, i33 1) #8
  %948 = extractvalue { i33, i1 } %947, 1
  %949 = extractvalue { i33, i1 } %947, 0
  %950 = icmp slt i33 %949, 0
  %951 = or i1 %948, %950
  br i1 %951, label %952, label %953, !prof !3

952:                                              ; preds = %943
  call void @llvm.trap() #8
  unreachable

953:                                              ; preds = %943
  %954 = trunc i33 %949 to i32
  store i32 %954, i32* %944, align 4
  br label %955

955:                                              ; preds = %909, %953, %936, %930
  %956 = phi i1 [ false, %953 ], [ false, %936 ], [ true, %930 ], [ true, %909 ]
  %957 = phi %"class.WTF::String"* [ %937, %953 ], [ %937, %936 ], [ %934, %930 ], [ %910, %909 ]
  %958 = phi %"class.WTF::StringImpl"* [ %938, %953 ], [ %938, %936 ], [ null, %930 ], [ null, %909 ]
  %959 = ptrtoint %"class.WTF::StringImpl"* %958 to i64
  %960 = bitcast %"class.WTF::String"* %957 to i64*
  %961 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %957, i64 0, i32 0, i32 0
  %962 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %961, align 8
  store i64 %959, i64* %960, align 8
  %963 = icmp eq %"class.WTF::StringImpl"* %962, null
  br i1 %963, label %977, label %964

964:                                              ; preds = %955
  %965 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %962, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %966 = load atomic i32, i32* %965 monotonic, align 4
  %967 = and i32 %966, 2
  %968 = icmp eq i32 %967, 0
  %969 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %962, i64 0, i32 0
  %970 = load i32, i32* %969, align 4
  br i1 %968, label %971, label %973

971:                                              ; preds = %964
  %972 = add i32 %970, -1
  store i32 %972, i32* %969, align 4
  br label %973

973:                                              ; preds = %971, %964
  %974 = phi i32 [ %972, %971 ], [ %970, %964 ]
  %975 = icmp eq i32 %974, 0
  br i1 %975, label %976, label %977

976:                                              ; preds = %973
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %962) #8
  br label %977

977:                                              ; preds = %955, %973, %976
  br i1 %956, label %991, label %978

978:                                              ; preds = %977
  %979 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %980 = load atomic i32, i32* %979 monotonic, align 4
  %981 = and i32 %980, 2
  %982 = icmp eq i32 %981, 0
  %983 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 0
  %984 = load i32, i32* %983, align 4
  br i1 %982, label %985, label %987

985:                                              ; preds = %978
  %986 = add i32 %984, -1
  store i32 %986, i32* %983, align 4
  br label %987

987:                                              ; preds = %985, %978
  %988 = phi i32 [ %986, %985 ], [ %984, %978 ]
  %989 = icmp eq i32 %988, 0
  br i1 %989, label %990, label %991

990:                                              ; preds = %987
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %958) #8
  br label %991

991:                                              ; preds = %977, %987, %990
  %992 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %993 = load i8*, i8** %992, align 8
  store i8* null, i8** %992, align 8
  %994 = icmp eq i8* %993, null
  br i1 %994, label %996, label %995

995:                                              ; preds = %991
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %993) #8
  br label %996

996:                                              ; preds = %995, %991
  %997 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %899, align 8
  %998 = icmp eq %"class.WTF::StringImpl"* %997, null
  br i1 %998, label %1012, label %999

999:                                              ; preds = %996
  %1000 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %997, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1001 = load atomic i32, i32* %1000 monotonic, align 4
  %1002 = and i32 %1001, 2
  %1003 = icmp eq i32 %1002, 0
  %1004 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %997, i64 0, i32 0
  %1005 = load i32, i32* %1004, align 4
  br i1 %1003, label %1006, label %1008

1006:                                             ; preds = %999
  %1007 = add i32 %1005, -1
  store i32 %1007, i32* %1004, align 4
  br label %1008

1008:                                             ; preds = %1006, %999
  %1009 = phi i32 [ %1007, %1006 ], [ %1005, %999 ]
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %1012

1011:                                             ; preds = %1008
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %997) #8
  br label %1012

1012:                                             ; preds = %996, %1008, %1011
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %896) #8
  br label %1035

1013:                                             ; preds = %895
  %1014 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1015 = load i8*, i8** %1014, align 8
  store i8* null, i8** %1014, align 8
  %1016 = icmp eq i8* %1015, null
  br i1 %1016, label %1018, label %1017

1017:                                             ; preds = %1013
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1015) #8
  br label %1018

1018:                                             ; preds = %1017, %1013
  %1019 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %899, align 8
  %1020 = icmp eq %"class.WTF::StringImpl"* %1019, null
  br i1 %1020, label %1034, label %1021

1021:                                             ; preds = %1018
  %1022 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1019, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1023 = load atomic i32, i32* %1022 monotonic, align 4
  %1024 = and i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1019, i64 0, i32 0
  %1027 = load i32, i32* %1026, align 4
  br i1 %1025, label %1028, label %1030

1028:                                             ; preds = %1021
  %1029 = add i32 %1027, -1
  store i32 %1029, i32* %1026, align 4
  br label %1030

1030:                                             ; preds = %1028, %1021
  %1031 = phi i32 [ %1029, %1028 ], [ %1027, %1021 ]
  %1032 = icmp eq i32 %1031, 0
  br i1 %1032, label %1033, label %1034

1033:                                             ; preds = %1030
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1019) #8
  br label %1034

1034:                                             ; preds = %1018, %1030, %1033
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %896) #8
  br label %1731

1035:                                             ; preds = %1012, %889
  %1036 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 6, i32 0
  %1037 = bitcast %"class.v8::Name"** %1036 to %"class.v8::Value"**
  %1038 = load %"class.v8::Value"*, %"class.v8::Value"** %1037, align 8
  %1039 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1038) #8
  %1040 = icmp eq %"class.v8::Value"* %1039, null
  br i1 %1040, label %1041, label %1047

1041:                                             ; preds = %1035
  %1042 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %1043 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1044 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1043, align 8
  %1045 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1044, i64 5
  %1046 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1045, align 8
  call void %1046(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1042) #8
  br label %1731

1047:                                             ; preds = %1035
  %1048 = bitcast %"class.v8::Value"* %1039 to i64*
  %1049 = load i64, i64* %1048, align 8
  %1050 = and i64 %1049, 3
  %1051 = icmp eq i64 %1050, 1
  br i1 %1051, label %1052, label %1069

1052:                                             ; preds = %1047
  %1053 = add i64 %1049, -1
  %1054 = inttoptr i64 %1053 to i32*
  %1055 = load i32, i32* %1054, align 4
  %1056 = and i64 %1049, -4294967296
  %1057 = zext i32 %1055 to i64
  %1058 = or i64 %1056, %1057
  %1059 = add i64 %1058, 7
  %1060 = inttoptr i64 %1059 to i16*
  %1061 = load i16, i16* %1060, align 2
  %1062 = icmp eq i16 %1061, 67
  br i1 %1062, label %1063, label %1069

1063:                                             ; preds = %1052
  %1064 = add i64 %1049, 23
  %1065 = inttoptr i64 %1064 to i32*
  %1066 = load i32, i32* %1065, align 4
  %1067 = and i32 %1066, -2
  %1068 = icmp eq i32 %1067, 10
  br i1 %1068, label %1209, label %1069

1069:                                             ; preds = %1052, %1047, %1063
  %1070 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1070) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1070, i8 -86, i64 152, i1 false)
  %1071 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1039, %"class.v8::Value"** %1071, align 8
  %1072 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %1072, align 8
  %1073 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1073, align 8
  %1074 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %1075 = bitcast %"class.std::__1::unique_ptr"* %1074 to i64*
  store i64 0, i64* %1075, align 8
  %1076 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1076, label %1077, label %1187

1077:                                             ; preds = %1069
  %1078 = load %"class.v8::Value"*, %"class.v8::Value"** %1071, align 8
  %1079 = icmp eq %"class.v8::Value"* %1078, null
  br i1 %1079, label %1080, label %1104, !prof !3

1080:                                             ; preds = %1077
  %1081 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1073, align 8
  %1082 = icmp eq %"class.WTF::StringImpl"* %1081, null
  br i1 %1082, label %1083, label %1085

1083:                                             ; preds = %1080
  %1084 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 8
  br label %1129

1085:                                             ; preds = %1080
  %1086 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1081, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1087 = load atomic i32, i32* %1086 monotonic, align 4
  %1088 = and i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  br i1 %1089, label %1090, label %1102

1090:                                             ; preds = %1085
  %1091 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1081, i64 0, i32 0
  %1092 = load i32, i32* %1091, align 4
  %1093 = zext i32 %1092 to i33
  %1094 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1093, i33 1) #8
  %1095 = extractvalue { i33, i1 } %1094, 1
  %1096 = extractvalue { i33, i1 } %1094, 0
  %1097 = icmp slt i33 %1096, 0
  %1098 = or i1 %1095, %1097
  br i1 %1098, label %1099, label %1100, !prof !3

1099:                                             ; preds = %1090
  call void @llvm.trap() #8
  unreachable

1100:                                             ; preds = %1090
  %1101 = trunc i33 %1096 to i32
  store i32 %1101, i32* %1091, align 4
  br label %1102

1102:                                             ; preds = %1085, %1100
  %1103 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 8
  br label %1110

1104:                                             ; preds = %1077
  %1105 = bitcast %"class.v8::Value"* %1078 to %"class.v8::String"*
  %1106 = load i32, i32* %1072, align 8
  %1107 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1105, i32 %1106) #8
  %1108 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 8
  %1109 = icmp eq %"class.WTF::StringImpl"* %1107, null
  br i1 %1109, label %1129, label %1110

1110:                                             ; preds = %1102, %1104
  %1111 = phi %"class.WTF::String"* [ %1103, %1102 ], [ %1108, %1104 ]
  %1112 = phi %"class.WTF::StringImpl"* [ %1081, %1102 ], [ %1107, %1104 ]
  %1113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1114 = load atomic i32, i32* %1113 monotonic, align 4
  %1115 = and i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  br i1 %1116, label %1117, label %1129

1117:                                             ; preds = %1110
  %1118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1112, i64 0, i32 0
  %1119 = load i32, i32* %1118, align 4
  %1120 = zext i32 %1119 to i33
  %1121 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1120, i33 1) #8
  %1122 = extractvalue { i33, i1 } %1121, 1
  %1123 = extractvalue { i33, i1 } %1121, 0
  %1124 = icmp slt i33 %1123, 0
  %1125 = or i1 %1122, %1124
  br i1 %1125, label %1126, label %1127, !prof !3

1126:                                             ; preds = %1117
  call void @llvm.trap() #8
  unreachable

1127:                                             ; preds = %1117
  %1128 = trunc i33 %1123 to i32
  store i32 %1128, i32* %1118, align 4
  br label %1129

1129:                                             ; preds = %1083, %1127, %1110, %1104
  %1130 = phi i1 [ false, %1127 ], [ false, %1110 ], [ true, %1104 ], [ true, %1083 ]
  %1131 = phi %"class.WTF::String"* [ %1111, %1127 ], [ %1111, %1110 ], [ %1108, %1104 ], [ %1084, %1083 ]
  %1132 = phi %"class.WTF::StringImpl"* [ %1112, %1127 ], [ %1112, %1110 ], [ null, %1104 ], [ null, %1083 ]
  %1133 = ptrtoint %"class.WTF::StringImpl"* %1132 to i64
  %1134 = bitcast %"class.WTF::String"* %1131 to i64*
  %1135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1131, i64 0, i32 0, i32 0
  %1136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1135, align 8
  store i64 %1133, i64* %1134, align 8
  %1137 = icmp eq %"class.WTF::StringImpl"* %1136, null
  br i1 %1137, label %1151, label %1138

1138:                                             ; preds = %1129
  %1139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1140 = load atomic i32, i32* %1139 monotonic, align 4
  %1141 = and i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1136, i64 0, i32 0
  %1144 = load i32, i32* %1143, align 4
  br i1 %1142, label %1145, label %1147

1145:                                             ; preds = %1138
  %1146 = add i32 %1144, -1
  store i32 %1146, i32* %1143, align 4
  br label %1147

1147:                                             ; preds = %1145, %1138
  %1148 = phi i32 [ %1146, %1145 ], [ %1144, %1138 ]
  %1149 = icmp eq i32 %1148, 0
  br i1 %1149, label %1150, label %1151

1150:                                             ; preds = %1147
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1136) #8
  br label %1151

1151:                                             ; preds = %1129, %1147, %1150
  br i1 %1130, label %1165, label %1152

1152:                                             ; preds = %1151
  %1153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1154 = load atomic i32, i32* %1153 monotonic, align 4
  %1155 = and i32 %1154, 2
  %1156 = icmp eq i32 %1155, 0
  %1157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1132, i64 0, i32 0
  %1158 = load i32, i32* %1157, align 4
  br i1 %1156, label %1159, label %1161

1159:                                             ; preds = %1152
  %1160 = add i32 %1158, -1
  store i32 %1160, i32* %1157, align 4
  br label %1161

1161:                                             ; preds = %1159, %1152
  %1162 = phi i32 [ %1160, %1159 ], [ %1158, %1152 ]
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1164, label %1165

1164:                                             ; preds = %1161
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1132) #8
  br label %1165

1165:                                             ; preds = %1151, %1161, %1164
  %1166 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1167 = load i8*, i8** %1166, align 8
  store i8* null, i8** %1166, align 8
  %1168 = icmp eq i8* %1167, null
  br i1 %1168, label %1170, label %1169

1169:                                             ; preds = %1165
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1167) #8
  br label %1170

1170:                                             ; preds = %1169, %1165
  %1171 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1073, align 8
  %1172 = icmp eq %"class.WTF::StringImpl"* %1171, null
  br i1 %1172, label %1186, label %1173

1173:                                             ; preds = %1170
  %1174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1171, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1175 = load atomic i32, i32* %1174 monotonic, align 4
  %1176 = and i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1171, i64 0, i32 0
  %1179 = load i32, i32* %1178, align 4
  br i1 %1177, label %1180, label %1182

1180:                                             ; preds = %1173
  %1181 = add i32 %1179, -1
  store i32 %1181, i32* %1178, align 4
  br label %1182

1182:                                             ; preds = %1180, %1173
  %1183 = phi i32 [ %1181, %1180 ], [ %1179, %1173 ]
  %1184 = icmp eq i32 %1183, 0
  br i1 %1184, label %1185, label %1186

1185:                                             ; preds = %1182
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1171) #8
  br label %1186

1186:                                             ; preds = %1170, %1182, %1185
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1070) #8
  br label %1209

1187:                                             ; preds = %1069
  %1188 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1189 = load i8*, i8** %1188, align 8
  store i8* null, i8** %1188, align 8
  %1190 = icmp eq i8* %1189, null
  br i1 %1190, label %1192, label %1191

1191:                                             ; preds = %1187
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1189) #8
  br label %1192

1192:                                             ; preds = %1191, %1187
  %1193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1073, align 8
  %1194 = icmp eq %"class.WTF::StringImpl"* %1193, null
  br i1 %1194, label %1208, label %1195

1195:                                             ; preds = %1192
  %1196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1197 = load atomic i32, i32* %1196 monotonic, align 4
  %1198 = and i32 %1197, 2
  %1199 = icmp eq i32 %1198, 0
  %1200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1193, i64 0, i32 0
  %1201 = load i32, i32* %1200, align 4
  br i1 %1199, label %1202, label %1204

1202:                                             ; preds = %1195
  %1203 = add i32 %1201, -1
  store i32 %1203, i32* %1200, align 4
  br label %1204

1204:                                             ; preds = %1202, %1195
  %1205 = phi i32 [ %1203, %1202 ], [ %1201, %1195 ]
  %1206 = icmp eq i32 %1205, 0
  br i1 %1206, label %1207, label %1208

1207:                                             ; preds = %1204
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1193) #8
  br label %1208

1208:                                             ; preds = %1192, %1204, %1207
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1070) #8
  br label %1731

1209:                                             ; preds = %1186, %1063
  %1210 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 7, i32 0
  %1211 = bitcast %"class.v8::Name"** %1210 to %"class.v8::Value"**
  %1212 = load %"class.v8::Value"*, %"class.v8::Value"** %1211, align 8
  %1213 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1212) #8
  %1214 = icmp eq %"class.v8::Value"* %1213, null
  br i1 %1214, label %1215, label %1221

1215:                                             ; preds = %1209
  %1216 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %1217 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1218 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1217, align 8
  %1219 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1218, i64 5
  %1220 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1219, align 8
  call void %1220(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1216) #8
  br label %1731

1221:                                             ; preds = %1209
  %1222 = bitcast %"class.v8::Value"* %1213 to i64*
  %1223 = load i64, i64* %1222, align 8
  %1224 = and i64 %1223, 3
  %1225 = icmp eq i64 %1224, 1
  br i1 %1225, label %1226, label %1243

1226:                                             ; preds = %1221
  %1227 = add i64 %1223, -1
  %1228 = inttoptr i64 %1227 to i32*
  %1229 = load i32, i32* %1228, align 4
  %1230 = and i64 %1223, -4294967296
  %1231 = zext i32 %1229 to i64
  %1232 = or i64 %1230, %1231
  %1233 = add i64 %1232, 7
  %1234 = inttoptr i64 %1233 to i16*
  %1235 = load i16, i16* %1234, align 2
  %1236 = icmp eq i16 %1235, 67
  br i1 %1236, label %1237, label %1243

1237:                                             ; preds = %1226
  %1238 = add i64 %1223, 23
  %1239 = inttoptr i64 %1238 to i32*
  %1240 = load i32, i32* %1239, align 4
  %1241 = and i32 %1240, -2
  %1242 = icmp eq i32 %1241, 10
  br i1 %1242, label %1383, label %1243

1243:                                             ; preds = %1226, %1221, %1237
  %1244 = bitcast %"class.blink::V8StringResource"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1244) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1244, i8 -86, i64 152, i1 false)
  %1245 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1213, %"class.v8::Value"** %1245, align 8
  %1246 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 1
  store i32 0, i32* %1246, align 8
  %1247 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1247, align 8
  %1248 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1
  %1249 = bitcast %"class.std::__1::unique_ptr"* %1248 to i64*
  store i64 0, i64* %1249, align 8
  %1250 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %13, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1250, label %1251, label %1361

1251:                                             ; preds = %1243
  %1252 = load %"class.v8::Value"*, %"class.v8::Value"** %1245, align 8
  %1253 = icmp eq %"class.v8::Value"* %1252, null
  br i1 %1253, label %1254, label %1278, !prof !3

1254:                                             ; preds = %1251
  %1255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1247, align 8
  %1256 = icmp eq %"class.WTF::StringImpl"* %1255, null
  br i1 %1256, label %1257, label %1259

1257:                                             ; preds = %1254
  %1258 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 9
  br label %1303

1259:                                             ; preds = %1254
  %1260 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1255, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1261 = load atomic i32, i32* %1260 monotonic, align 4
  %1262 = and i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  br i1 %1263, label %1264, label %1276

1264:                                             ; preds = %1259
  %1265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1255, i64 0, i32 0
  %1266 = load i32, i32* %1265, align 4
  %1267 = zext i32 %1266 to i33
  %1268 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1267, i33 1) #8
  %1269 = extractvalue { i33, i1 } %1268, 1
  %1270 = extractvalue { i33, i1 } %1268, 0
  %1271 = icmp slt i33 %1270, 0
  %1272 = or i1 %1269, %1271
  br i1 %1272, label %1273, label %1274, !prof !3

1273:                                             ; preds = %1264
  call void @llvm.trap() #8
  unreachable

1274:                                             ; preds = %1264
  %1275 = trunc i33 %1270 to i32
  store i32 %1275, i32* %1265, align 4
  br label %1276

1276:                                             ; preds = %1259, %1274
  %1277 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 9
  br label %1284

1278:                                             ; preds = %1251
  %1279 = bitcast %"class.v8::Value"* %1252 to %"class.v8::String"*
  %1280 = load i32, i32* %1246, align 8
  %1281 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1279, i32 %1280) #8
  %1282 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 9
  %1283 = icmp eq %"class.WTF::StringImpl"* %1281, null
  br i1 %1283, label %1303, label %1284

1284:                                             ; preds = %1276, %1278
  %1285 = phi %"class.WTF::String"* [ %1277, %1276 ], [ %1282, %1278 ]
  %1286 = phi %"class.WTF::StringImpl"* [ %1255, %1276 ], [ %1281, %1278 ]
  %1287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1286, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1288 = load atomic i32, i32* %1287 monotonic, align 4
  %1289 = and i32 %1288, 2
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1291, label %1303

1291:                                             ; preds = %1284
  %1292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1286, i64 0, i32 0
  %1293 = load i32, i32* %1292, align 4
  %1294 = zext i32 %1293 to i33
  %1295 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1294, i33 1) #8
  %1296 = extractvalue { i33, i1 } %1295, 1
  %1297 = extractvalue { i33, i1 } %1295, 0
  %1298 = icmp slt i33 %1297, 0
  %1299 = or i1 %1296, %1298
  br i1 %1299, label %1300, label %1301, !prof !3

1300:                                             ; preds = %1291
  call void @llvm.trap() #8
  unreachable

1301:                                             ; preds = %1291
  %1302 = trunc i33 %1297 to i32
  store i32 %1302, i32* %1292, align 4
  br label %1303

1303:                                             ; preds = %1257, %1301, %1284, %1278
  %1304 = phi i1 [ false, %1301 ], [ false, %1284 ], [ true, %1278 ], [ true, %1257 ]
  %1305 = phi %"class.WTF::String"* [ %1285, %1301 ], [ %1285, %1284 ], [ %1282, %1278 ], [ %1258, %1257 ]
  %1306 = phi %"class.WTF::StringImpl"* [ %1286, %1301 ], [ %1286, %1284 ], [ null, %1278 ], [ null, %1257 ]
  %1307 = ptrtoint %"class.WTF::StringImpl"* %1306 to i64
  %1308 = bitcast %"class.WTF::String"* %1305 to i64*
  %1309 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1305, i64 0, i32 0, i32 0
  %1310 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1309, align 8
  store i64 %1307, i64* %1308, align 8
  %1311 = icmp eq %"class.WTF::StringImpl"* %1310, null
  br i1 %1311, label %1325, label %1312

1312:                                             ; preds = %1303
  %1313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1314 = load atomic i32, i32* %1313 monotonic, align 4
  %1315 = and i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 0
  %1318 = load i32, i32* %1317, align 4
  br i1 %1316, label %1319, label %1321

1319:                                             ; preds = %1312
  %1320 = add i32 %1318, -1
  store i32 %1320, i32* %1317, align 4
  br label %1321

1321:                                             ; preds = %1319, %1312
  %1322 = phi i32 [ %1320, %1319 ], [ %1318, %1312 ]
  %1323 = icmp eq i32 %1322, 0
  br i1 %1323, label %1324, label %1325

1324:                                             ; preds = %1321
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1310) #8
  br label %1325

1325:                                             ; preds = %1303, %1321, %1324
  br i1 %1304, label %1339, label %1326

1326:                                             ; preds = %1325
  %1327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1306, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1328 = load atomic i32, i32* %1327 monotonic, align 4
  %1329 = and i32 %1328, 2
  %1330 = icmp eq i32 %1329, 0
  %1331 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1306, i64 0, i32 0
  %1332 = load i32, i32* %1331, align 4
  br i1 %1330, label %1333, label %1335

1333:                                             ; preds = %1326
  %1334 = add i32 %1332, -1
  store i32 %1334, i32* %1331, align 4
  br label %1335

1335:                                             ; preds = %1333, %1326
  %1336 = phi i32 [ %1334, %1333 ], [ %1332, %1326 ]
  %1337 = icmp eq i32 %1336, 0
  br i1 %1337, label %1338, label %1339

1338:                                             ; preds = %1335
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1306) #8
  br label %1339

1339:                                             ; preds = %1325, %1335, %1338
  %1340 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1341 = load i8*, i8** %1340, align 8
  store i8* null, i8** %1340, align 8
  %1342 = icmp eq i8* %1341, null
  br i1 %1342, label %1344, label %1343

1343:                                             ; preds = %1339
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1341) #8
  br label %1344

1344:                                             ; preds = %1343, %1339
  %1345 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1247, align 8
  %1346 = icmp eq %"class.WTF::StringImpl"* %1345, null
  br i1 %1346, label %1360, label %1347

1347:                                             ; preds = %1344
  %1348 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1345, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1349 = load atomic i32, i32* %1348 monotonic, align 4
  %1350 = and i32 %1349, 2
  %1351 = icmp eq i32 %1350, 0
  %1352 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1345, i64 0, i32 0
  %1353 = load i32, i32* %1352, align 4
  br i1 %1351, label %1354, label %1356

1354:                                             ; preds = %1347
  %1355 = add i32 %1353, -1
  store i32 %1355, i32* %1352, align 4
  br label %1356

1356:                                             ; preds = %1354, %1347
  %1357 = phi i32 [ %1355, %1354 ], [ %1353, %1347 ]
  %1358 = icmp eq i32 %1357, 0
  br i1 %1358, label %1359, label %1360

1359:                                             ; preds = %1356
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1345) #8
  br label %1360

1360:                                             ; preds = %1344, %1356, %1359
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1244) #8
  br label %1383

1361:                                             ; preds = %1243
  %1362 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1363 = load i8*, i8** %1362, align 8
  store i8* null, i8** %1362, align 8
  %1364 = icmp eq i8* %1363, null
  br i1 %1364, label %1366, label %1365

1365:                                             ; preds = %1361
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1363) #8
  br label %1366

1366:                                             ; preds = %1365, %1361
  %1367 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1247, align 8
  %1368 = icmp eq %"class.WTF::StringImpl"* %1367, null
  br i1 %1368, label %1382, label %1369

1369:                                             ; preds = %1366
  %1370 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1367, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1371 = load atomic i32, i32* %1370 monotonic, align 4
  %1372 = and i32 %1371, 2
  %1373 = icmp eq i32 %1372, 0
  %1374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1367, i64 0, i32 0
  %1375 = load i32, i32* %1374, align 4
  br i1 %1373, label %1376, label %1378

1376:                                             ; preds = %1369
  %1377 = add i32 %1375, -1
  store i32 %1377, i32* %1374, align 4
  br label %1378

1378:                                             ; preds = %1376, %1369
  %1379 = phi i32 [ %1377, %1376 ], [ %1375, %1369 ]
  %1380 = icmp eq i32 %1379, 0
  br i1 %1380, label %1381, label %1382

1381:                                             ; preds = %1378
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1367) #8
  br label %1382

1382:                                             ; preds = %1366, %1378, %1381
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1244) #8
  br label %1731

1383:                                             ; preds = %1360, %1237
  %1384 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 8, i32 0
  %1385 = bitcast %"class.v8::Name"** %1384 to %"class.v8::Value"**
  %1386 = load %"class.v8::Value"*, %"class.v8::Value"** %1385, align 8
  %1387 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1386) #8
  %1388 = icmp eq %"class.v8::Value"* %1387, null
  br i1 %1388, label %1389, label %1395

1389:                                             ; preds = %1383
  %1390 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %1391 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1392 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1391, align 8
  %1393 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1392, i64 5
  %1394 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1393, align 8
  call void %1394(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1390) #8
  br label %1731

1395:                                             ; preds = %1383
  %1396 = bitcast %"class.v8::Value"* %1387 to i64*
  %1397 = load i64, i64* %1396, align 8
  %1398 = and i64 %1397, 3
  %1399 = icmp eq i64 %1398, 1
  br i1 %1399, label %1400, label %1417

1400:                                             ; preds = %1395
  %1401 = add i64 %1397, -1
  %1402 = inttoptr i64 %1401 to i32*
  %1403 = load i32, i32* %1402, align 4
  %1404 = and i64 %1397, -4294967296
  %1405 = zext i32 %1403 to i64
  %1406 = or i64 %1404, %1405
  %1407 = add i64 %1406, 7
  %1408 = inttoptr i64 %1407 to i16*
  %1409 = load i16, i16* %1408, align 2
  %1410 = icmp eq i16 %1409, 67
  br i1 %1410, label %1411, label %1417

1411:                                             ; preds = %1400
  %1412 = add i64 %1397, 23
  %1413 = inttoptr i64 %1412 to i32*
  %1414 = load i32, i32* %1413, align 4
  %1415 = and i32 %1414, -2
  %1416 = icmp eq i32 %1415, 10
  br i1 %1416, label %1557, label %1417

1417:                                             ; preds = %1400, %1395, %1411
  %1418 = bitcast %"class.blink::V8StringResource"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1418) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1418, i8 -86, i64 152, i1 false)
  %1419 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1387, %"class.v8::Value"** %1419, align 8
  %1420 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 1
  store i32 0, i32* %1420, align 8
  %1421 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1421, align 8
  %1422 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1
  %1423 = bitcast %"class.std::__1::unique_ptr"* %1422 to i64*
  store i64 0, i64* %1423, align 8
  %1424 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %14, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1424, label %1425, label %1535

1425:                                             ; preds = %1417
  %1426 = load %"class.v8::Value"*, %"class.v8::Value"** %1419, align 8
  %1427 = icmp eq %"class.v8::Value"* %1426, null
  br i1 %1427, label %1428, label %1452, !prof !3

1428:                                             ; preds = %1425
  %1429 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1421, align 8
  %1430 = icmp eq %"class.WTF::StringImpl"* %1429, null
  br i1 %1430, label %1431, label %1433

1431:                                             ; preds = %1428
  %1432 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 10
  br label %1477

1433:                                             ; preds = %1428
  %1434 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1429, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1435 = load atomic i32, i32* %1434 monotonic, align 4
  %1436 = and i32 %1435, 2
  %1437 = icmp eq i32 %1436, 0
  br i1 %1437, label %1438, label %1450

1438:                                             ; preds = %1433
  %1439 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1429, i64 0, i32 0
  %1440 = load i32, i32* %1439, align 4
  %1441 = zext i32 %1440 to i33
  %1442 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1441, i33 1) #8
  %1443 = extractvalue { i33, i1 } %1442, 1
  %1444 = extractvalue { i33, i1 } %1442, 0
  %1445 = icmp slt i33 %1444, 0
  %1446 = or i1 %1443, %1445
  br i1 %1446, label %1447, label %1448, !prof !3

1447:                                             ; preds = %1438
  call void @llvm.trap() #8
  unreachable

1448:                                             ; preds = %1438
  %1449 = trunc i33 %1444 to i32
  store i32 %1449, i32* %1439, align 4
  br label %1450

1450:                                             ; preds = %1433, %1448
  %1451 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 10
  br label %1458

1452:                                             ; preds = %1425
  %1453 = bitcast %"class.v8::Value"* %1426 to %"class.v8::String"*
  %1454 = load i32, i32* %1420, align 8
  %1455 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1453, i32 %1454) #8
  %1456 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 10
  %1457 = icmp eq %"class.WTF::StringImpl"* %1455, null
  br i1 %1457, label %1477, label %1458

1458:                                             ; preds = %1450, %1452
  %1459 = phi %"class.WTF::String"* [ %1451, %1450 ], [ %1456, %1452 ]
  %1460 = phi %"class.WTF::StringImpl"* [ %1429, %1450 ], [ %1455, %1452 ]
  %1461 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1460, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1462 = load atomic i32, i32* %1461 monotonic, align 4
  %1463 = and i32 %1462, 2
  %1464 = icmp eq i32 %1463, 0
  br i1 %1464, label %1465, label %1477

1465:                                             ; preds = %1458
  %1466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1460, i64 0, i32 0
  %1467 = load i32, i32* %1466, align 4
  %1468 = zext i32 %1467 to i33
  %1469 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1468, i33 1) #8
  %1470 = extractvalue { i33, i1 } %1469, 1
  %1471 = extractvalue { i33, i1 } %1469, 0
  %1472 = icmp slt i33 %1471, 0
  %1473 = or i1 %1470, %1472
  br i1 %1473, label %1474, label %1475, !prof !3

1474:                                             ; preds = %1465
  call void @llvm.trap() #8
  unreachable

1475:                                             ; preds = %1465
  %1476 = trunc i33 %1471 to i32
  store i32 %1476, i32* %1466, align 4
  br label %1477

1477:                                             ; preds = %1431, %1475, %1458, %1452
  %1478 = phi i1 [ false, %1475 ], [ false, %1458 ], [ true, %1452 ], [ true, %1431 ]
  %1479 = phi %"class.WTF::String"* [ %1459, %1475 ], [ %1459, %1458 ], [ %1456, %1452 ], [ %1432, %1431 ]
  %1480 = phi %"class.WTF::StringImpl"* [ %1460, %1475 ], [ %1460, %1458 ], [ null, %1452 ], [ null, %1431 ]
  %1481 = ptrtoint %"class.WTF::StringImpl"* %1480 to i64
  %1482 = bitcast %"class.WTF::String"* %1479 to i64*
  %1483 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1479, i64 0, i32 0, i32 0
  %1484 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1483, align 8
  store i64 %1481, i64* %1482, align 8
  %1485 = icmp eq %"class.WTF::StringImpl"* %1484, null
  br i1 %1485, label %1499, label %1486

1486:                                             ; preds = %1477
  %1487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1488 = load atomic i32, i32* %1487 monotonic, align 4
  %1489 = and i32 %1488, 2
  %1490 = icmp eq i32 %1489, 0
  %1491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 0, i32 0
  %1492 = load i32, i32* %1491, align 4
  br i1 %1490, label %1493, label %1495

1493:                                             ; preds = %1486
  %1494 = add i32 %1492, -1
  store i32 %1494, i32* %1491, align 4
  br label %1495

1495:                                             ; preds = %1493, %1486
  %1496 = phi i32 [ %1494, %1493 ], [ %1492, %1486 ]
  %1497 = icmp eq i32 %1496, 0
  br i1 %1497, label %1498, label %1499

1498:                                             ; preds = %1495
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1484) #8
  br label %1499

1499:                                             ; preds = %1477, %1495, %1498
  br i1 %1478, label %1513, label %1500

1500:                                             ; preds = %1499
  %1501 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1502 = load atomic i32, i32* %1501 monotonic, align 4
  %1503 = and i32 %1502, 2
  %1504 = icmp eq i32 %1503, 0
  %1505 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1480, i64 0, i32 0
  %1506 = load i32, i32* %1505, align 4
  br i1 %1504, label %1507, label %1509

1507:                                             ; preds = %1500
  %1508 = add i32 %1506, -1
  store i32 %1508, i32* %1505, align 4
  br label %1509

1509:                                             ; preds = %1507, %1500
  %1510 = phi i32 [ %1508, %1507 ], [ %1506, %1500 ]
  %1511 = icmp eq i32 %1510, 0
  br i1 %1511, label %1512, label %1513

1512:                                             ; preds = %1509
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1480) #8
  br label %1513

1513:                                             ; preds = %1499, %1509, %1512
  %1514 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1515 = load i8*, i8** %1514, align 8
  store i8* null, i8** %1514, align 8
  %1516 = icmp eq i8* %1515, null
  br i1 %1516, label %1518, label %1517

1517:                                             ; preds = %1513
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1515) #8
  br label %1518

1518:                                             ; preds = %1517, %1513
  %1519 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1421, align 8
  %1520 = icmp eq %"class.WTF::StringImpl"* %1519, null
  br i1 %1520, label %1534, label %1521

1521:                                             ; preds = %1518
  %1522 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1519, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1523 = load atomic i32, i32* %1522 monotonic, align 4
  %1524 = and i32 %1523, 2
  %1525 = icmp eq i32 %1524, 0
  %1526 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1519, i64 0, i32 0
  %1527 = load i32, i32* %1526, align 4
  br i1 %1525, label %1528, label %1530

1528:                                             ; preds = %1521
  %1529 = add i32 %1527, -1
  store i32 %1529, i32* %1526, align 4
  br label %1530

1530:                                             ; preds = %1528, %1521
  %1531 = phi i32 [ %1529, %1528 ], [ %1527, %1521 ]
  %1532 = icmp eq i32 %1531, 0
  br i1 %1532, label %1533, label %1534

1533:                                             ; preds = %1530
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1519) #8
  br label %1534

1534:                                             ; preds = %1518, %1530, %1533
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1418) #8
  br label %1557

1535:                                             ; preds = %1417
  %1536 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1537 = load i8*, i8** %1536, align 8
  store i8* null, i8** %1536, align 8
  %1538 = icmp eq i8* %1537, null
  br i1 %1538, label %1540, label %1539

1539:                                             ; preds = %1535
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1537) #8
  br label %1540

1540:                                             ; preds = %1539, %1535
  %1541 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1421, align 8
  %1542 = icmp eq %"class.WTF::StringImpl"* %1541, null
  br i1 %1542, label %1556, label %1543

1543:                                             ; preds = %1540
  %1544 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1541, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1545 = load atomic i32, i32* %1544 monotonic, align 4
  %1546 = and i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1541, i64 0, i32 0
  %1549 = load i32, i32* %1548, align 4
  br i1 %1547, label %1550, label %1552

1550:                                             ; preds = %1543
  %1551 = add i32 %1549, -1
  store i32 %1551, i32* %1548, align 4
  br label %1552

1552:                                             ; preds = %1550, %1543
  %1553 = phi i32 [ %1551, %1550 ], [ %1549, %1543 ]
  %1554 = icmp eq i32 %1553, 0
  br i1 %1554, label %1555, label %1556

1555:                                             ; preds = %1552
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1541) #8
  br label %1556

1556:                                             ; preds = %1540, %1552, %1555
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1418) #8
  br label %1731

1557:                                             ; preds = %1534, %1411
  %1558 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 9, i32 0
  %1559 = bitcast %"class.v8::Name"** %1558 to %"class.v8::Value"**
  %1560 = load %"class.v8::Value"*, %"class.v8::Value"** %1559, align 8
  %1561 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1560) #8
  %1562 = icmp eq %"class.v8::Value"* %1561, null
  br i1 %1562, label %1563, label %1569

1563:                                             ; preds = %1557
  %1564 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %1565 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1566 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1565, align 8
  %1567 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1566, i64 5
  %1568 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1567, align 8
  call void %1568(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1564) #8
  br label %1731

1569:                                             ; preds = %1557
  %1570 = bitcast %"class.v8::Value"* %1561 to i64*
  %1571 = load i64, i64* %1570, align 8
  %1572 = and i64 %1571, 3
  %1573 = icmp eq i64 %1572, 1
  br i1 %1573, label %1574, label %1591

1574:                                             ; preds = %1569
  %1575 = add i64 %1571, -1
  %1576 = inttoptr i64 %1575 to i32*
  %1577 = load i32, i32* %1576, align 4
  %1578 = and i64 %1571, -4294967296
  %1579 = zext i32 %1577 to i64
  %1580 = or i64 %1578, %1579
  %1581 = add i64 %1580, 7
  %1582 = inttoptr i64 %1581 to i16*
  %1583 = load i16, i16* %1582, align 2
  %1584 = icmp eq i16 %1583, 67
  br i1 %1584, label %1585, label %1591

1585:                                             ; preds = %1574
  %1586 = add i64 %1571, 23
  %1587 = inttoptr i64 %1586 to i32*
  %1588 = load i32, i32* %1587, align 4
  %1589 = and i32 %1588, -2
  %1590 = icmp eq i32 %1589, 10
  br i1 %1590, label %1731, label %1591

1591:                                             ; preds = %1574, %1569, %1585
  %1592 = bitcast %"class.blink::V8StringResource"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1592) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1592, i8 -86, i64 152, i1 false)
  %1593 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1561, %"class.v8::Value"** %1593, align 8
  %1594 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 1
  store i32 0, i32* %1594, align 8
  %1595 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1595, align 8
  %1596 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1
  %1597 = bitcast %"class.std::__1::unique_ptr"* %1596 to i64*
  store i64 0, i64* %1597, align 8
  %1598 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1598, label %1599, label %1709

1599:                                             ; preds = %1591
  %1600 = load %"class.v8::Value"*, %"class.v8::Value"** %1593, align 8
  %1601 = icmp eq %"class.v8::Value"* %1600, null
  br i1 %1601, label %1602, label %1626, !prof !3

1602:                                             ; preds = %1599
  %1603 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1595, align 8
  %1604 = icmp eq %"class.WTF::StringImpl"* %1603, null
  br i1 %1604, label %1605, label %1607

1605:                                             ; preds = %1602
  %1606 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 11
  br label %1651

1607:                                             ; preds = %1602
  %1608 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1603, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1609 = load atomic i32, i32* %1608 monotonic, align 4
  %1610 = and i32 %1609, 2
  %1611 = icmp eq i32 %1610, 0
  br i1 %1611, label %1612, label %1624

1612:                                             ; preds = %1607
  %1613 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1603, i64 0, i32 0
  %1614 = load i32, i32* %1613, align 4
  %1615 = zext i32 %1614 to i33
  %1616 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1615, i33 1) #8
  %1617 = extractvalue { i33, i1 } %1616, 1
  %1618 = extractvalue { i33, i1 } %1616, 0
  %1619 = icmp slt i33 %1618, 0
  %1620 = or i1 %1617, %1619
  br i1 %1620, label %1621, label %1622, !prof !3

1621:                                             ; preds = %1612
  call void @llvm.trap() #8
  unreachable

1622:                                             ; preds = %1612
  %1623 = trunc i33 %1618 to i32
  store i32 %1623, i32* %1613, align 4
  br label %1624

1624:                                             ; preds = %1607, %1622
  %1625 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 11
  br label %1632

1626:                                             ; preds = %1599
  %1627 = bitcast %"class.v8::Value"* %1600 to %"class.v8::String"*
  %1628 = load i32, i32* %1594, align 8
  %1629 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1627, i32 %1628) #8
  %1630 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %2, i64 0, i32 11
  %1631 = icmp eq %"class.WTF::StringImpl"* %1629, null
  br i1 %1631, label %1651, label %1632

1632:                                             ; preds = %1624, %1626
  %1633 = phi %"class.WTF::String"* [ %1625, %1624 ], [ %1630, %1626 ]
  %1634 = phi %"class.WTF::StringImpl"* [ %1603, %1624 ], [ %1629, %1626 ]
  %1635 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1634, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1636 = load atomic i32, i32* %1635 monotonic, align 4
  %1637 = and i32 %1636, 2
  %1638 = icmp eq i32 %1637, 0
  br i1 %1638, label %1639, label %1651

1639:                                             ; preds = %1632
  %1640 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1634, i64 0, i32 0
  %1641 = load i32, i32* %1640, align 4
  %1642 = zext i32 %1641 to i33
  %1643 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1642, i33 1) #8
  %1644 = extractvalue { i33, i1 } %1643, 1
  %1645 = extractvalue { i33, i1 } %1643, 0
  %1646 = icmp slt i33 %1645, 0
  %1647 = or i1 %1644, %1646
  br i1 %1647, label %1648, label %1649, !prof !3

1648:                                             ; preds = %1639
  call void @llvm.trap() #8
  unreachable

1649:                                             ; preds = %1639
  %1650 = trunc i33 %1645 to i32
  store i32 %1650, i32* %1640, align 4
  br label %1651

1651:                                             ; preds = %1605, %1649, %1632, %1626
  %1652 = phi i1 [ false, %1649 ], [ false, %1632 ], [ true, %1626 ], [ true, %1605 ]
  %1653 = phi %"class.WTF::String"* [ %1633, %1649 ], [ %1633, %1632 ], [ %1630, %1626 ], [ %1606, %1605 ]
  %1654 = phi %"class.WTF::StringImpl"* [ %1634, %1649 ], [ %1634, %1632 ], [ null, %1626 ], [ null, %1605 ]
  %1655 = ptrtoint %"class.WTF::StringImpl"* %1654 to i64
  %1656 = bitcast %"class.WTF::String"* %1653 to i64*
  %1657 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1653, i64 0, i32 0, i32 0
  %1658 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1657, align 8
  store i64 %1655, i64* %1656, align 8
  %1659 = icmp eq %"class.WTF::StringImpl"* %1658, null
  br i1 %1659, label %1673, label %1660

1660:                                             ; preds = %1651
  %1661 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1658, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1662 = load atomic i32, i32* %1661 monotonic, align 4
  %1663 = and i32 %1662, 2
  %1664 = icmp eq i32 %1663, 0
  %1665 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1658, i64 0, i32 0
  %1666 = load i32, i32* %1665, align 4
  br i1 %1664, label %1667, label %1669

1667:                                             ; preds = %1660
  %1668 = add i32 %1666, -1
  store i32 %1668, i32* %1665, align 4
  br label %1669

1669:                                             ; preds = %1667, %1660
  %1670 = phi i32 [ %1668, %1667 ], [ %1666, %1660 ]
  %1671 = icmp eq i32 %1670, 0
  br i1 %1671, label %1672, label %1673

1672:                                             ; preds = %1669
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1658) #8
  br label %1673

1673:                                             ; preds = %1651, %1669, %1672
  br i1 %1652, label %1687, label %1674

1674:                                             ; preds = %1673
  %1675 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1654, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1676 = load atomic i32, i32* %1675 monotonic, align 4
  %1677 = and i32 %1676, 2
  %1678 = icmp eq i32 %1677, 0
  %1679 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1654, i64 0, i32 0
  %1680 = load i32, i32* %1679, align 4
  br i1 %1678, label %1681, label %1683

1681:                                             ; preds = %1674
  %1682 = add i32 %1680, -1
  store i32 %1682, i32* %1679, align 4
  br label %1683

1683:                                             ; preds = %1681, %1674
  %1684 = phi i32 [ %1682, %1681 ], [ %1680, %1674 ]
  %1685 = icmp eq i32 %1684, 0
  br i1 %1685, label %1686, label %1687

1686:                                             ; preds = %1683
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1654) #8
  br label %1687

1687:                                             ; preds = %1673, %1683, %1686
  %1688 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1689 = load i8*, i8** %1688, align 8
  store i8* null, i8** %1688, align 8
  %1690 = icmp eq i8* %1689, null
  br i1 %1690, label %1692, label %1691

1691:                                             ; preds = %1687
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1689) #8
  br label %1692

1692:                                             ; preds = %1691, %1687
  %1693 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1595, align 8
  %1694 = icmp eq %"class.WTF::StringImpl"* %1693, null
  br i1 %1694, label %1708, label %1695

1695:                                             ; preds = %1692
  %1696 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1693, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1697 = load atomic i32, i32* %1696 monotonic, align 4
  %1698 = and i32 %1697, 2
  %1699 = icmp eq i32 %1698, 0
  %1700 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1693, i64 0, i32 0
  %1701 = load i32, i32* %1700, align 4
  br i1 %1699, label %1702, label %1704

1702:                                             ; preds = %1695
  %1703 = add i32 %1701, -1
  store i32 %1703, i32* %1700, align 4
  br label %1704

1704:                                             ; preds = %1702, %1695
  %1705 = phi i32 [ %1703, %1702 ], [ %1701, %1695 ]
  %1706 = icmp eq i32 %1705, 0
  br i1 %1706, label %1707, label %1708

1707:                                             ; preds = %1704
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1693) #8
  br label %1708

1708:                                             ; preds = %1692, %1704, %1707
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1592) #8
  br label %1731

1709:                                             ; preds = %1591
  %1710 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1711 = load i8*, i8** %1710, align 8
  store i8* null, i8** %1710, align 8
  %1712 = icmp eq i8* %1711, null
  br i1 %1712, label %1714, label %1713

1713:                                             ; preds = %1709
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1711) #8
  br label %1714

1714:                                             ; preds = %1713, %1709
  %1715 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1595, align 8
  %1716 = icmp eq %"class.WTF::StringImpl"* %1715, null
  br i1 %1716, label %1730, label %1717

1717:                                             ; preds = %1714
  %1718 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1715, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1719 = load atomic i32, i32* %1718 monotonic, align 4
  %1720 = and i32 %1719, 2
  %1721 = icmp eq i32 %1720, 0
  %1722 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1715, i64 0, i32 0
  %1723 = load i32, i32* %1722, align 4
  br i1 %1721, label %1724, label %1726

1724:                                             ; preds = %1717
  %1725 = add i32 %1723, -1
  store i32 %1725, i32* %1722, align 4
  br label %1726

1726:                                             ; preds = %1724, %1717
  %1727 = phi i32 [ %1725, %1724 ], [ %1723, %1717 ]
  %1728 = icmp eq i32 %1727, 0
  br i1 %1728, label %1729, label %1730

1729:                                             ; preds = %1726
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1715) #8
  br label %1730

1730:                                             ; preds = %1714, %1726, %1729
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1592) #8
  br label %1731

1731:                                             ; preds = %171, %338, %519, %686, %867, %1034, %1215, %1382, %1563, %1730, %1708, %1585, %1556, %1389, %1208, %1041, %860, %693, %512, %345, %164, %55
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %49) #8
  br label %1732

1732:                                             ; preds = %33, %33, %4, %1731, %40
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #2

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.blink::ScriptIterator", align 8
  %6 = tail call zeroext i1 @_ZNK2v85Value7IsArrayEv(%"class.v8::Value"* %2) #8
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = bitcast %"class.v8::Value"* %2 to %"class.v8::Array"*
  tail call void @_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE(%"class.WTF::Vector"* sret %0, %"class.v8::Isolate"* %1, %"class.v8::Array"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br label %29

9:                                                ; preds = %4
  %10 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* %2) #8
  br i1 %10, label %13, label %11

11:                                               ; preds = %9
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.14, i64 0, i64 0)) #8
  %12 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #8
  br label %29

13:                                               ; preds = %9
  %14 = bitcast %"class.blink::ScriptIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 56, i1 false)
  %15 = bitcast %"class.v8::Value"* %2 to %"class.v8::Object"*
  call void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* nonnull sret %5, %"class.v8::Isolate"* %1, %"class.v8::Object"* %15, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  %16 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #8
  br label %28

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %5, i64 0, i32 1, i32 0
  %23 = load %"class.v8::Object"*, %"class.v8::Object"** %22, align 8
  %24 = icmp eq %"class.v8::Object"* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.15, i64 0, i64 0)) #8
  %26 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #8
  br label %28

27:                                               ; preds = %21
  call void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* sret %0, %"class.v8::Isolate"* %1, %"class.blink::ScriptIterator"* nonnull byval(%"class.blink::ScriptIterator") align 8 %5, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br label %28

28:                                               ; preds = %27, %25, %19
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %14) #8
  br label %29

29:                                               ; preds = %28, %11, %7
  ret void
}

declare void @_ZN5blink11AddressInit14setAddressLineERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::AddressInit"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #8
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #8
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #8
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #8
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #8
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #8
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #8
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink11AddressInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::AddressInit"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #8
  %5 = tail call zeroext i1 @_ZN5blink15toV8AddressInitEPKNS_11AddressInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::AddressInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15toV8AddressInitEPKNS_11AddressInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::AddressInit"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to %"class.blink::V8PerIsolateData"**
  %17 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %16, align 8
  %18 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %17, i8* bitcast ([10 x i8*]* @_ZZN5blinkL24eternalV8AddressInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.318"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.318"*)) #8
  %19 = extractvalue { i64, %"class.v8::Eternal"* } %18, 1
  %20 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #8
  %21 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 1
  %22 = load i8, i8* %21, align 8, !range !4
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 2
  %26 = tail call %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE(%"class.WTF::Vector"* dereferenceable(16) %25, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #8
  %27 = bitcast %"class.v8::Array"* %26 to %"class.v8::Value"*
  %28 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 0, i32 0
  %29 = load %"class.v8::Name"*, %"class.v8::Name"** %28, align 8
  %30 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %29, %"class.v8::Value"* %27) #8
  %31 = trunc i16 %30 to i8
  %32 = icmp ne i8 %31, 0
  %33 = icmp ugt i16 %30, 255
  %34 = and i1 %33, %32
  br i1 %34, label %35, label %234

35:                                               ; preds = %4, %24
  %36 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 3, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %57, label %39

39:                                               ; preds = %35
  %40 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #8
  %41 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %41, align 8
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 1
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %46 = bitcast i8** %45 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %46, align 8
  %47 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %43, i32* %47, align 8
  %48 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #8
  %49 = bitcast %"class.v8::String"* %48 to %"class.v8::Value"*
  %50 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 1, i32 0
  %51 = load %"class.v8::Name"*, %"class.v8::Name"** %50, align 8
  %52 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %51, %"class.v8::Value"* %49) #8
  %53 = trunc i16 %52 to i8
  %54 = icmp ne i8 %53, 0
  %55 = icmp ugt i16 %52, 255
  %56 = and i1 %55, %54
  br i1 %56, label %57, label %234

57:                                               ; preds = %35, %39
  %58 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 4, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %79, label %61

61:                                               ; preds = %57
  %62 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #8
  %63 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %63, align 8
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 1
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %68 = bitcast i8** %67 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %66, %"class.WTF::StringImpl"** %68, align 8
  %69 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %65, i32* %69, align 8
  %70 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #8
  %71 = bitcast %"class.v8::String"* %70 to %"class.v8::Value"*
  %72 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 2, i32 0
  %73 = load %"class.v8::Name"*, %"class.v8::Name"** %72, align 8
  %74 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %73, %"class.v8::Value"* %71) #8
  %75 = trunc i16 %74 to i8
  %76 = icmp ne i8 %75, 0
  %77 = icmp ugt i16 %74, 255
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %234

79:                                               ; preds = %57, %61
  %80 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 5, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %101, label %83

83:                                               ; preds = %79
  %84 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84) #8
  %85 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %81, %"class.WTF::StringImpl"** %85, align 8
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 1
  %89 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %90 = bitcast i8** %89 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %90, align 8
  %91 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %87, i32* %91, align 8
  %92 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %84) #8
  %93 = bitcast %"class.v8::String"* %92 to %"class.v8::Value"*
  %94 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 3, i32 0
  %95 = load %"class.v8::Name"*, %"class.v8::Name"** %94, align 8
  %96 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %95, %"class.v8::Value"* %93) #8
  %97 = trunc i16 %96 to i8
  %98 = icmp ne i8 %97, 0
  %99 = icmp ugt i16 %96, 255
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %234

101:                                              ; preds = %79, %83
  %102 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 6, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %123, label %105

105:                                              ; preds = %101
  %106 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #8
  %107 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %103, %"class.WTF::StringImpl"** %107, align 8
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 1
  %111 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %112 = bitcast i8** %111 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %110, %"class.WTF::StringImpl"** %112, align 8
  %113 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %109, i32* %113, align 8
  %114 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #8
  %115 = bitcast %"class.v8::String"* %114 to %"class.v8::Value"*
  %116 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 4, i32 0
  %117 = load %"class.v8::Name"*, %"class.v8::Name"** %116, align 8
  %118 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %117, %"class.v8::Value"* %115) #8
  %119 = trunc i16 %118 to i8
  %120 = icmp ne i8 %119, 0
  %121 = icmp ugt i16 %118, 255
  %122 = and i1 %121, %120
  br i1 %122, label %123, label %234

123:                                              ; preds = %101, %105
  %124 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 7, i32 0, i32 0
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %145, label %127

127:                                              ; preds = %123
  %128 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %128) #8
  %129 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %125, %"class.WTF::StringImpl"** %129, align 8
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 1
  %133 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %134 = bitcast i8** %133 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %132, %"class.WTF::StringImpl"** %134, align 8
  %135 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %131, i32* %135, align 8
  %136 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %128) #8
  %137 = bitcast %"class.v8::String"* %136 to %"class.v8::Value"*
  %138 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 5, i32 0
  %139 = load %"class.v8::Name"*, %"class.v8::Name"** %138, align 8
  %140 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %139, %"class.v8::Value"* %137) #8
  %141 = trunc i16 %140 to i8
  %142 = icmp ne i8 %141, 0
  %143 = icmp ugt i16 %140, 255
  %144 = and i1 %143, %142
  br i1 %144, label %145, label %234

145:                                              ; preds = %123, %127
  %146 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 8, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %167, label %149

149:                                              ; preds = %145
  %150 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #8
  %151 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %147, %"class.WTF::StringImpl"** %151, align 8
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 1
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 1
  %155 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %156 = bitcast i8** %155 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %154, %"class.WTF::StringImpl"** %156, align 8
  %157 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %153, i32* %157, align 8
  %158 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #8
  %159 = bitcast %"class.v8::String"* %158 to %"class.v8::Value"*
  %160 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 6, i32 0
  %161 = load %"class.v8::Name"*, %"class.v8::Name"** %160, align 8
  %162 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %161, %"class.v8::Value"* %159) #8
  %163 = trunc i16 %162 to i8
  %164 = icmp ne i8 %163, 0
  %165 = icmp ugt i16 %162, 255
  %166 = and i1 %165, %164
  br i1 %166, label %167, label %234

167:                                              ; preds = %145, %149
  %168 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 9, i32 0, i32 0
  %169 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %170 = icmp eq %"class.WTF::StringImpl"* %169, null
  br i1 %170, label %189, label %171

171:                                              ; preds = %167
  %172 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %172) #8
  %173 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %169, %"class.WTF::StringImpl"** %173, align 8
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %169, i64 1
  %177 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %178 = bitcast i8** %177 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %176, %"class.WTF::StringImpl"** %178, align 8
  %179 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %175, i32* %179, align 8
  %180 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %172) #8
  %181 = bitcast %"class.v8::String"* %180 to %"class.v8::Value"*
  %182 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 7, i32 0
  %183 = load %"class.v8::Name"*, %"class.v8::Name"** %182, align 8
  %184 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %183, %"class.v8::Value"* %181) #8
  %185 = trunc i16 %184 to i8
  %186 = icmp ne i8 %185, 0
  %187 = icmp ugt i16 %184, 255
  %188 = and i1 %187, %186
  br i1 %188, label %189, label %234

189:                                              ; preds = %167, %171
  %190 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 10, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %192, label %211, label %193

193:                                              ; preds = %189
  %194 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %194) #8
  %195 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %195, align 8
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 1
  %199 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %200 = bitcast i8** %199 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %198, %"class.WTF::StringImpl"** %200, align 8
  %201 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %197, i32* %201, align 8
  %202 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %194) #8
  %203 = bitcast %"class.v8::String"* %202 to %"class.v8::Value"*
  %204 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 8, i32 0
  %205 = load %"class.v8::Name"*, %"class.v8::Name"** %204, align 8
  %206 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %205, %"class.v8::Value"* %203) #8
  %207 = trunc i16 %206 to i8
  %208 = icmp ne i8 %207, 0
  %209 = icmp ugt i16 %206, 255
  %210 = and i1 %209, %208
  br i1 %210, label %211, label %234

211:                                              ; preds = %189, %193
  %212 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %0, i64 0, i32 11, i32 0, i32 0
  %213 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %212, align 8
  %214 = icmp eq %"class.WTF::StringImpl"* %213, null
  br i1 %214, label %233, label %215

215:                                              ; preds = %211
  %216 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %216) #8
  %217 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %213, %"class.WTF::StringImpl"** %217, align 8
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %213, i64 0, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %213, i64 1
  %221 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %222 = bitcast i8** %221 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %220, %"class.WTF::StringImpl"** %222, align 8
  %223 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %219, i32* %223, align 8
  %224 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %216) #8
  %225 = bitcast %"class.v8::String"* %224 to %"class.v8::Value"*
  %226 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 9, i32 0
  %227 = load %"class.v8::Name"*, %"class.v8::Name"** %226, align 8
  %228 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %227, %"class.v8::Value"* %225) #8
  %229 = trunc i16 %228 to i8
  %230 = icmp ne i8 %229, 0
  %231 = icmp ugt i16 %228, 255
  %232 = and i1 %231, %230
  br i1 %232, label %233, label %234

233:                                              ; preds = %211, %215
  br label %234

234:                                              ; preds = %39, %83, %127, %171, %233, %215, %193, %149, %105, %61, %24
  %235 = phi i1 [ false, %24 ], [ false, %39 ], [ false, %61 ], [ false, %83 ], [ false, %105 ], [ false, %127 ], [ false, %149 ], [ false, %171 ], [ false, %193 ], [ true, %233 ], [ false, %215 ]
  ret i1 %235
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #8
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #8
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #8
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !3

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #8
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AddressInit"* @_ZN5blink17NativeValueTraitsINS_11AddressInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 104) #8
  %5 = bitcast i8* %4 to %"class.blink::AddressInit"*
  tail call void @_ZN5blink11AddressInitC1Ev(%"class.blink::AddressInit"* %5) #8
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink13V8AddressInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_11AddressInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::AddressInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::AddressInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.318"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #2

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #2

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #2

declare void @_ZN5blink11AddressInitC1Ev(%"class.blink::AddressInit"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #8
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #8
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #8
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %40, i8* %41) #8
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #8
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #8
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #8
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value7IsArrayEv(%"class.v8::Value"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Array"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.v8::TryCatch", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = tail call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %9 = zext i32 %8 to i64
  %10 = icmp ugt i32 %8, 268173312
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  tail call void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16, i64 0, i64 0)) #8
  %12 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #8
  br label %145

13:                                               ; preds = %4
  %14 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 16, i1 false) #8
  %18 = icmp eq i32 %8, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %13
  %20 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %9) #8
  %21 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %20, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast %"class.WTF::Vector"* %5 to i64*
  store atomic i64 %22, i64* %23 monotonic, align 8
  %24 = lshr i64 %20, 3
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* %16, align 8
  br label %26

26:                                               ; preds = %13, %19
  %27 = phi i32 [ 0, %13 ], [ %25, %19 ]
  %28 = phi i64 [ 0, %13 ], [ %22, %19 ]
  %29 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #8
  %30 = bitcast %"class.v8::TryCatch"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %30) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %6, %"class.v8::Isolate"* %1) #8
  %31 = call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %26
  %34 = bitcast %"class.WTF::Vector"* %5 to i64*
  %35 = bitcast %"class.WTF::Vector"* %0 to i8*
  br label %99

36:                                               ; preds = %26
  %37 = bitcast %"class.v8::Array"* %2 to %"class.v8::Object"*
  %38 = bitcast %"class.WTF::String"* %7 to i8*
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %41 = bitcast %"class.WTF::Vector"* %0 to i8*
  br label %42

42:                                               ; preds = %36, %90
  %43 = phi i32 [ 0, %36 ], [ %91, %90 ]
  %44 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEEj(%"class.v8::Object"* %37, %"class.v8::Context"* %29, i32 %43) #8
  %45 = icmp eq %"class.v8::Value"* %44, null
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #8
  %48 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %49 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %49, i64 5
  %51 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %50, align 8
  call void %51(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %47) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false) #8
  br label %108

52:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #8
  %53 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* nonnull %44, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  store %"class.WTF::StringImpl"* %53, %"class.WTF::StringImpl"** %39, align 8
  %54 = load i32, i32* %40, align 8
  %55 = icmp eq i32 %54, 0
  %56 = ptrtoint %"class.WTF::StringImpl"* %53 to i64
  br i1 %55, label %58, label %57

57:                                               ; preds = %52
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false) #8
  br label %71

58:                                               ; preds = %52
  %59 = load i32, i32* %17, align 4
  %60 = load i32, i32* %16, align 8
  %61 = icmp eq i32 %59, %60
  br i1 %61, label %69, label %62, !prof !3

62:                                               ; preds = %58
  %63 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %64 = zext i32 %59 to i64
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %63, i64 %64
  %66 = bitcast %"class.WTF::String"* %65 to i64*
  store i64 %56, i64* %66, align 8
  %67 = load i32, i32* %17, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %17, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  br label %90

69:                                               ; preds = %58
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"class.WTF::String"* nonnull dereferenceable(8) %7) #8
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  br label %71

71:                                               ; preds = %69, %57
  %72 = phi %"class.WTF::StringImpl"* [ %70, %69 ], [ %53, %57 ]
  %73 = phi i32 [ 0, %69 ], [ 1, %57 ]
  %74 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #8
  br label %88

88:                                               ; preds = %87, %84, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  %89 = icmp eq i32 %73, 0
  br i1 %89, label %90, label %108

90:                                               ; preds = %62, %88
  %91 = add nuw i32 %43, 1
  %92 = call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %42, label %94

94:                                               ; preds = %90
  %95 = bitcast %"class.WTF::Vector"* %5 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = load i32, i32* %16, align 8
  %98 = load i32, i32* %17, align 4
  br label %99

99:                                               ; preds = %33, %94
  %100 = phi i8* [ %35, %33 ], [ %41, %94 ]
  %101 = phi i64* [ %34, %33 ], [ %95, %94 ]
  %102 = phi i32 [ 0, %33 ], [ %98, %94 ]
  %103 = phi i32 [ %27, %33 ], [ %97, %94 ]
  %104 = phi i64 [ %28, %33 ], [ %96, %94 ]
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %106 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 16, i1 false) #8
  %107 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %101 monotonic, align 8
  store atomic i64 %104, i64* %107 monotonic, align 8
  store i32 %103, i32* %105, align 8
  store i32 0, i32* %16, align 8
  store i32 %102, i32* %106, align 4
  store i32 0, i32* %17, align 4
  br label %108

108:                                              ; preds = %88, %46, %99
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %30) #8
  %109 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %110 = icmp eq %"class.WTF::String"* %109, null
  br i1 %110, label %144, label %111, !prof !2

111:                                              ; preds = %108
  %112 = bitcast %"class.WTF::String"* %109 to i8*
  %113 = load i32, i32* %17, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %142, label %115, !prof !3

115:                                              ; preds = %111
  %116 = zext i32 %113 to i64
  %117 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %109, i64 %116
  br label %118

118:                                              ; preds = %136, %115
  %119 = phi %"class.WTF::String"* [ %137, %136 ], [ %109, %115 ]
  %120 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 0, i32 0, i32 0
  %121 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  %122 = icmp eq %"class.WTF::StringImpl"* %121, null
  br i1 %122, label %136, label %123

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  br i1 %127, label %130, label %132

130:                                              ; preds = %123
  %131 = add i32 %129, -1
  store i32 %131, i32* %128, align 4
  br label %132

132:                                              ; preds = %130, %123
  %133 = phi i32 [ %131, %130 ], [ %129, %123 ]
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %121) #8
  br label %136

136:                                              ; preds = %135, %132, %118
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 1
  %138 = icmp eq %"class.WTF::String"* %137, %117
  br i1 %138, label %139, label %118

139:                                              ; preds = %136
  store i32 0, i32* %17, align 4
  %140 = bitcast %"class.WTF::Vector"* %5 to i8**
  %141 = load i8*, i8** %140, align 8
  br label %142

142:                                              ; preds = %139, %111
  %143 = phi i8* [ %141, %139 ], [ %112, %111 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %143) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %15, align 8
  br label %144

144:                                              ; preds = %108, %142
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %145

145:                                              ; preds = %144, %11
  ret void
}

declare void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* sret, %"class.v8::Isolate"*, %"class.v8::Object"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.blink::ScriptIterator"* byval(%"class.blink::ScriptIterator") align 8, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #8
  %8 = tail call %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"* %7) #8
  %9 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #8
  %13 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #8
  br i1 %13, label %14, label %74

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %2, i64 0, i32 6, i32 0
  %16 = bitcast %"class.WTF::String"* %6 to i8*
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  br label %19

19:                                               ; preds = %14, %72
  %20 = load %"class.v8::Value"*, %"class.v8::Value"** %15, align 8
  %21 = icmp eq %"class.v8::Value"* %20, null
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %19
  call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %23

23:                                               ; preds = %19, %22
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %24 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* %20, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %17, align 8
  %25 = load i32, i32* %18, align 8
  %26 = icmp eq i32 %25, 0
  %27 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  br i1 %26, label %45, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #8
  %30 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  br i1 %35, label %38, label %40

38:                                               ; preds = %31
  %39 = add i32 %37, -1
  store i32 %39, i32* %36, align 4
  br label %40

40:                                               ; preds = %38, %31
  %41 = phi i32 [ %39, %38 ], [ %37, %31 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #8
  br label %44

44:                                               ; preds = %28, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %89

45:                                               ; preds = %23
  %46 = load i32, i32* %12, align 4
  %47 = load i32, i32* %11, align 8
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %56, label %49, !prof !3

49:                                               ; preds = %45
  %50 = load %"class.WTF::String"*, %"class.WTF::String"** %10, align 8
  %51 = zext i32 %46 to i64
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %50, i64 %51
  %53 = bitcast %"class.WTF::String"* %52 to i64*
  store i64 %27, i64* %53, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %54 = load i32, i32* %12, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %12, align 4
  br label %72

56:                                               ; preds = %45
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"class.WTF::String"* nonnull dereferenceable(8) %6) #8
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #8
  br label %72

72:                                               ; preds = %49, %56, %68, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  %73 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #8
  br i1 %73, label %19, label %74

74:                                               ; preds = %72, %4
  %75 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false) #8
  br label %89

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %83 = bitcast %"class.WTF::Vector"* %5 to i64*
  %84 = bitcast %"class.WTF::Vector"* %0 to i64*
  store i64 0, i64* %84, align 8
  %85 = load i64, i64* %83, align 8
  %86 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %83 monotonic, align 8
  store atomic i64 %85, i64* %86 monotonic, align 8
  %87 = load i32, i32* %11, align 8
  store i32 %87, i32* %81, align 8
  store i32 0, i32* %11, align 8
  %88 = load i32, i32* %12, align 4
  store i32 %88, i32* %82, align 4
  store i32 0, i32* %12, align 4
  br label %89

89:                                               ; preds = %44, %80, %78
  %90 = load %"class.WTF::String"*, %"class.WTF::String"** %10, align 8
  %91 = icmp eq %"class.WTF::String"* %90, null
  br i1 %91, label %125, label %92, !prof !2

92:                                               ; preds = %89
  %93 = bitcast %"class.WTF::String"* %90 to i8*
  %94 = load i32, i32* %12, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %123, label %96, !prof !3

96:                                               ; preds = %92
  %97 = zext i32 %94 to i64
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %90, i64 %97
  br label %99

99:                                               ; preds = %117, %96
  %100 = phi %"class.WTF::String"* [ %118, %117 ], [ %90, %96 ]
  %101 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %117, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %104
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %104
  %114 = phi i32 [ %112, %111 ], [ %110, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %102) #8
  br label %117

117:                                              ; preds = %116, %113, %99
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 1
  %119 = icmp eq %"class.WTF::String"* %118, %98
  br i1 %119, label %120, label %99

120:                                              ; preds = %117
  store i32 0, i32* %12, align 4
  %121 = bitcast %"class.WTF::Vector"* %5 to i8**
  %122 = load i8*, i8** %121, align 8
  br label %123

123:                                              ; preds = %120, %92
  %124 = phi i8* [ %122, %120 ], [ %93, %92 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %124) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %10, align 8
  br label %125

125:                                              ; preds = %89, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  ret void
}

declare i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEEj(%"class.v8::Object"*, %"class.v8::Context"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_13IDLStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::TryCatch", align 8
  %5 = alloca %"class.blink::V8StringResource", align 8
  %6 = bitcast %"class.blink::V8StringResource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 152, i1 false)
  %7 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1, %"class.v8::Value"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 0, i64* %11, align 8
  %12 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %5) #8
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.v8::TryCatch"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false) #8
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %4, %"class.v8::Isolate"* %0) #8
  %15 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %16 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #8
  %17 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %15, %"class.v8::Context"* %16) #8
  %18 = ptrtoint %"class.v8::String"* %17 to i64
  %19 = bitcast %"class.blink::V8StringResource"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = icmp eq %"class.v8::String"* %17, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #8
  br label %28

22:                                               ; preds = %13
  %23 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %4) #8
  %24 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %25 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %25, i64 5
  %27 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %26, align 8
  call void %27(%"class.blink::ExceptionState"* %2, %"class.v8::Value"* %23) #8
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #8
  br label %55

28:                                               ; preds = %3, %21
  %29 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %30 = icmp eq %"class.v8::Value"* %29, null
  br i1 %30, label %35, label %31, !prof !3

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %29 to %"class.v8::String"*
  %33 = load i32, i32* %8, align 8
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %32, i32 %33) #8
  br label %55

35:                                               ; preds = %28
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #8
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %35, %31, %22
  %56 = phi %"class.WTF::StringImpl"* [ null, %22 ], [ %34, %31 ], [ null, %35 ], [ %36, %38 ], [ %36, %53 ]
  %57 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  store i8* null, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %61, label %60

60:                                               ; preds = %55
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %58) #8
  br label %61

61:                                               ; preds = %60, %55
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #8
  br label %77

77:                                               ; preds = %61, %73, %76
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #8
  ret %"class.WTF::StringImpl"* %56
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.18, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !2

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #8
  br i1 %22, label %23, label %80, !prof !2

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #8
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #8
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #8
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %35
  tail call void @llvm.trap() #8
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #8
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #8
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #2

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #2

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !2

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !2

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !2

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %106 = bitcast %"class.WTF::String"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.WTF::String"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

declare %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72), %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE(%"class.WTF::Vector"* dereferenceable(16), %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #4 comdat {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.absl::optional", align 8
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #8
  %7 = bitcast %"class.absl::optional"* %5 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  store i8 0, i8* %6, align 8
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %union.anon.350* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false) #8
  %10 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E, align 1, !range !4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %26, label %12, !prof !2

12:                                               ; preds = %3
  %13 = tail call %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"* %2) #8
  %14 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 3
  %15 = bitcast %"class.base::TickClock"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::RuntimeCallStats"* %13, %"class.blink::RuntimeCallStats"** %17, align 8
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 4
  %21 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #8
  %22 = bitcast %"class.base::TickClock"** %20 to i64*
  store i64 %16, i64* %22, align 8
  %23 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 2, i64 5
  %24 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 0
  %25 = load %"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallTimer"** %24, align 8
  call void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"* %18, %"class.blink::RuntimeCallCounter"* %23, %"class.blink::RuntimeCallTimer"* %25) #8
  store %"class.blink::RuntimeCallTimer"* %18, %"class.blink::RuntimeCallTimer"** %24, align 8
  store i8 1, i8* %6, align 8
  br label %26

26:                                               ; preds = %3, %12
  %27 = call %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"* %1) #8
  call void @_ZN2v87Context5EnterEv(%"class.v8::Context"* %27) #8
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, -1
  br i1 %30, label %32, label %31, !prof !2

31:                                               ; preds = %26
  call void @llvm.trap() #8
  unreachable

32:                                               ; preds = %26
  %33 = call %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"* %2, i32 %29) #8
  %34 = ptrtoint %"class.v8::Array"* %33 to i64
  call void @_ZN2v87Context4ExitEv(%"class.v8::Context"* %27) #8
  %35 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %2) #8
  %36 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::String"*, %"class.WTF::String"** %36, align 8
  %38 = load i32, i32* %28, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %37, i64 %39
  %41 = icmp eq i32 %38, 0
  br i1 %41, label %80, label %42

42:                                               ; preds = %32
  %43 = bitcast %"class.WTF::StringView"* %4 to i8*
  %44 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %46 = bitcast i8** %45 to %"class.WTF::StringImpl"**
  %47 = bitcast %"class.WTF::StringView"* %4 to i64*
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %49 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %50 = add i64 %49, 160
  %51 = bitcast %"class.v8::Array"* %33 to %"class.v8::Object"*
  br label %52

52:                                               ; preds = %42, %76
  %53 = phi i32 [ 0, %42 ], [ %77, %76 ]
  %54 = phi %"class.WTF::String"* [ %37, %42 ], [ %78, %76 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #8
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %52
  store i8* null, i8** %45, align 8
  %59 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %59, i64* %47, align 8
  br label %64

60:                                               ; preds = %52
  store %"class.WTF::StringImpl"* %56, %"class.WTF::StringImpl"** %44, align 8
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 1
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %46, align 8
  br label %64

64:                                               ; preds = %58, %60
  %65 = phi i32 [ %62, %60 ], [ 0, %58 ]
  store i32 %65, i32* %48, align 8
  %66 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #8
  %67 = ptrtoint %"class.v8::String"* %66 to i64
  %68 = icmp eq %"class.v8::String"* %66, null
  %69 = select i1 %68, i64 %50, i64 %67
  %70 = inttoptr i64 %69 to %"class.v8::Value"*
  %71 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"* %51, %"class.v8::Context"* %35, i32 %53, %"class.v8::Value"* %70) #8
  %72 = trunc i16 %71 to i8
  %73 = icmp eq i8 %72, 0
  %74 = icmp ult i16 %71, 256
  %75 = or i1 %74, %73
  br i1 %75, label %80, label %76, !prof !6

76:                                               ; preds = %64
  %77 = add i32 %53, 1
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 1
  %79 = icmp eq %"class.WTF::String"* %78, %40
  br i1 %79, label %80, label %52

80:                                               ; preds = %76, %64, %32
  %81 = phi i64 [ %34, %32 ], [ 0, %64 ], [ %34, %76 ]
  %82 = load i8, i8* %6, align 8, !range !4
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %90, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %86 = load %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallStats"** %85, align 8
  %87 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %88 = call %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"* %87) #8
  %89 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %86, i64 0, i32 0
  store %"class.blink::RuntimeCallTimer"* %88, %"class.blink::RuntimeCallTimer"** %89, align 8
  store i8 0, i8* %6, align 8
  br label %90

90:                                               ; preds = %80, %84
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #8
  %91 = inttoptr i64 %81 to %"class.v8::Array"*
  ret %"class.v8::Array"* %91
}

declare %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"*) local_unnamed_addr #2

declare %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"*, i32) local_unnamed_addr #2

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, i32, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"*) local_unnamed_addr #2

declare void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*) local_unnamed_addr #2

declare void @_ZN2v87Context5EnterEv(%"class.v8::Context"*) local_unnamed_addr #2

declare void @_ZN2v87Context4ExitEv(%"class.v8::Context"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
!6 = !{!"branch_weights", i32 2002, i32 2000}
