; ModuleID = '../../third_party/ffmpeg/libavcodec/bitstream.c'
source_filename = "../../third_party/ffmpeg/libavcodec/bitstream.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PutBitContext = type { i64, i32, i8*, i8*, i8*, i32 }
%struct.VLC = type { i32, [2 x i16]*, i32, i32 }
%struct.VLCcode = type { i8, i16, i32 }

@ff_log2_run = hidden local_unnamed_addr constant [41 x i8] c"\00\00\00\00\01\01\01\01\02\02\02\02\03\03\03\03\04\04\05\05\06\06\07\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18", align 16
@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"length <= put_bits_left(pb)\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"../../third_party/ffmpeg/libavcodec/bitstream.c\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"symbols_size <= 2 || !symbols\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Too long VLC (%u) in init_vlc\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Invalid code %x for %d in init_vlc\0A\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"Invalid VLC (length %u)\0A\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"Overdetermined VLC tree\0A\00", align 1
@.str.15 = private unnamed_addr constant [43 x i8] c"Internal error, put_bits buffer too small\0A\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"s->buf_ptr < s->buf_end\00", align 1
@.str.17 = private unnamed_addr constant [47 x i8] c"../../third_party/ffmpeg/libavcodec/put_bits.h\00", align 1
@.str.18 = private unnamed_addr constant [29 x i8] c"n <= s->buf_end - s->buf_ptr\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"nb_codes <= 1500\00", align 1
@ff_reverse = external local_unnamed_addr constant [256 x i8], align 16
@.str.20 = private unnamed_addr constant [18 x i8] c"needed %d had %d\0A\00", align 1
@.str.21 = private unnamed_addr constant [9 x i8] c"ret >= 0\00", align 1
@.str.22 = private unnamed_addr constant [17 x i8] c"incorrect codes\0A\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"strange codes\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @avpriv_align_put_bits(%struct.PutBitContext* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 7
  %5 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp sgt i32 %3, 7
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = zext i32 %4 to i64
  %10 = shl i64 %6, %9
  br label %30

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 4
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp ugt i64 %18, 7
  br i1 %19, label %20, label %27

20:                                               ; preds = %11
  %21 = zext i32 %3 to i64
  %22 = shl i64 %6, %21
  %23 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %22) #5, !srcloc !2
  %24 = bitcast i8* %16 to i64*
  store i64 %23, i64* %24, align 1
  %25 = load i8*, i8** %15, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  store i8* %26, i8** %15, align 8
  br label %28

27:                                               ; preds = %11
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %28

28:                                               ; preds = %27, %20
  %29 = add nsw i32 %3, 64
  br label %30

30:                                               ; preds = %8, %28
  %31 = phi i64 [ %10, %8 ], [ 0, %28 ]
  %32 = phi i32 [ %3, %8 ], [ %29, %28 ]
  %33 = sub nsw i32 %32, %4
  store i64 %31, i64* %5, align 8
  store i32 %33, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avpriv_copy_bits(%struct.PutBitContext*, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call void @ff_copy_bits(%struct.PutBitContext* %0, i8* %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_copy_bits(%struct.PutBitContext*, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = ashr i32 %2, 4
  %5 = and i32 %2, 15
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %234, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 4
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 3
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %10, %13
  %15 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = trunc i64 %14 to i32
  %18 = shl i32 %17, 3
  %19 = add i32 %16, -64
  %20 = add i32 %19, %18
  %21 = icmp slt i32 %20, %2
  %22 = inttoptr i64 %13 to i8*
  br i1 %21, label %23, label %24

23:                                               ; preds = %7
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 78) #6
  tail call void @abort() #7
  unreachable

24:                                               ; preds = %7
  %25 = icmp slt i32 %2, 256
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 2
  %28 = bitcast i8** %27 to i64*
  %29 = sub i32 0, %16
  %30 = and i32 %29, 7
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %76, label %34

32:                                               ; preds = %24
  %33 = icmp sgt i32 %2, 15
  br i1 %33, label %34, label %190

34:                                               ; preds = %26, %32
  %35 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %36 = sext i32 %4 to i64
  %37 = load i64, i64* %35, align 8
  br label %38

38:                                               ; preds = %34, %70
  %39 = phi i32 [ %16, %34 ], [ %73, %70 ]
  %40 = phi i64 [ %37, %34 ], [ %72, %70 ]
  %41 = phi i64 [ 0, %34 ], [ %74, %70 ]
  %42 = shl nuw nsw i64 %41, 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 1
  %46 = tail call i16 @llvm.bswap.i16(i16 %45) #6
  %47 = zext i16 %46 to i64
  %48 = icmp sgt i32 %39, 16
  br i1 %48, label %49, label %52

49:                                               ; preds = %38
  %50 = shl i64 %40, 16
  %51 = or i64 %50, %47
  br label %70

52:                                               ; preds = %38
  %53 = load i64, i64* %9, align 8
  %54 = load i8*, i8** %11, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = sub i64 %53, %55
  %57 = icmp ugt i64 %56, 7
  br i1 %57, label %58, label %69

58:                                               ; preds = %52
  %59 = zext i32 %39 to i64
  %60 = shl i64 %40, %59
  %61 = sub nsw i32 16, %39
  %62 = zext i32 %61 to i64
  %63 = lshr i64 %47, %62
  %64 = or i64 %63, %60
  %65 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %64) #5, !srcloc !2
  %66 = bitcast i8* %54 to i64*
  store i64 %65, i64* %66, align 1
  %67 = load i8*, i8** %11, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 8
  store i8* %68, i8** %11, align 8
  br label %70

69:                                               ; preds = %52
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %70

70:                                               ; preds = %58, %69, %49
  %71 = phi i32 [ -16, %49 ], [ 48, %69 ], [ 48, %58 ]
  %72 = phi i64 [ %51, %49 ], [ %47, %69 ], [ %47, %58 ]
  %73 = add nsw i32 %39, %71
  store i64 %72, i64* %35, align 8
  store i32 %73, i32* %15, align 8
  %74 = add nuw nsw i64 %41, 1
  %75 = icmp slt i64 %74, %36
  br i1 %75, label %38, label %190

76:                                               ; preds = %26
  %77 = load i64, i64* %28, align 8
  %78 = sub i64 %13, %77
  %79 = trunc i64 %78 to i32
  %80 = shl i32 %79, 3
  %81 = sub i32 %80, %16
  %82 = and i32 %81, 31
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %146, label %84

84:                                               ; preds = %76
  %85 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %86 = load i64, i64* %85, align 8
  br label %87

87:                                               ; preds = %84, %129
  %88 = phi i8* [ %22, %84 ], [ %131, %129 ]
  %89 = phi i8* [ %22, %84 ], [ %132, %129 ]
  %90 = phi i64 [ %77, %84 ], [ %133, %129 ]
  %91 = phi i64 [ %13, %84 ], [ %134, %129 ]
  %92 = phi i8* [ %22, %84 ], [ %130, %129 ]
  %93 = phi i64 [ %86, %84 ], [ %135, %129 ]
  %94 = phi i64 [ 0, %84 ], [ %137, %129 ]
  %95 = phi i32 [ %16, %84 ], [ %136, %129 ]
  %96 = getelementptr inbounds i8, i8* %1, i64 %94
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = icmp sgt i32 %95, 8
  br i1 %99, label %100, label %105

100:                                              ; preds = %87
  %101 = shl i64 %93, 8
  %102 = or i64 %101, %98
  %103 = add nsw i32 %95, -8
  %104 = inttoptr i64 %91 to i8*
  br label %129

105:                                              ; preds = %87
  %106 = load i64, i64* %9, align 8
  %107 = ptrtoint i8* %92 to i64
  %108 = sub i64 %106, %107
  %109 = icmp ugt i64 %108, 7
  br i1 %109, label %110, label %122

110:                                              ; preds = %105
  %111 = zext i32 %95 to i64
  %112 = shl i64 %93, %111
  %113 = sub nsw i32 8, %95
  %114 = zext i32 %113 to i64
  %115 = lshr i64 %98, %114
  %116 = or i64 %115, %112
  %117 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %116) #5, !srcloc !2
  %118 = bitcast i8* %92 to i64*
  store i64 %117, i64* %118, align 1
  %119 = load i8*, i8** %11, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 8
  store i8* %120, i8** %11, align 8
  %121 = ptrtoint i8* %120 to i64
  br label %124

122:                                              ; preds = %105
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  %123 = load i64, i64* %12, align 8
  br label %124

124:                                              ; preds = %122, %110
  %125 = phi i64 [ %123, %122 ], [ %121, %110 ]
  %126 = add nsw i32 %95, 56
  %127 = load i64, i64* %28, align 8
  %128 = inttoptr i64 %125 to i8*
  br label %129

129:                                              ; preds = %100, %124
  %130 = phi i8* [ %104, %100 ], [ %128, %124 ]
  %131 = phi i8* [ %88, %100 ], [ %128, %124 ]
  %132 = phi i8* [ %89, %100 ], [ %128, %124 ]
  %133 = phi i64 [ %90, %100 ], [ %127, %124 ]
  %134 = phi i64 [ %91, %100 ], [ %125, %124 ]
  %135 = phi i64 [ %102, %100 ], [ %98, %124 ]
  %136 = phi i32 [ %103, %100 ], [ %126, %124 ]
  store i64 %135, i64* %85, align 8
  store i32 %136, i32* %15, align 8
  %137 = add nuw i64 %94, 1
  %138 = sub i64 %134, %133
  %139 = trunc i64 %138 to i32
  %140 = shl i32 %139, 3
  %141 = sub i32 %140, %136
  %142 = and i32 %141, 31
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %87

144:                                              ; preds = %129
  %145 = trunc i64 %137 to i32
  br label %146

146:                                              ; preds = %144, %76
  %147 = phi i8* [ %22, %76 ], [ %131, %144 ]
  %148 = phi i8* [ %22, %76 ], [ %132, %144 ]
  %149 = phi i32 [ %16, %76 ], [ %136, %144 ]
  %150 = phi i32 [ 0, %76 ], [ %145, %144 ]
  %151 = icmp slt i32 %149, 64
  br i1 %151, label %152, label %173

152:                                              ; preds = %146
  %153 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %154 = load i64, i64* %153, align 8
  %155 = zext i32 %149 to i64
  %156 = shl i64 %154, %155
  store i64 %156, i64* %153, align 8
  br label %157

157:                                              ; preds = %163, %152
  %158 = phi i64 [ %156, %152 ], [ %168, %163 ]
  %159 = phi i8* [ %148, %152 ], [ %172, %163 ]
  %160 = load i8*, i8** %8, align 8
  %161 = icmp ult i8* %159, %160
  br i1 %161, label %163, label %162

162:                                              ; preds = %157
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.17, i64 0, i64 0), i32 124) #6
  tail call void @abort() #7
  unreachable

163:                                              ; preds = %157
  %164 = lshr i64 %158, 56
  %165 = trunc i64 %164 to i8
  %166 = getelementptr inbounds i8, i8* %159, i64 1
  store i8* %166, i8** %11, align 8
  store i8 %165, i8* %159, align 1
  %167 = load i64, i64* %153, align 8
  %168 = shl i64 %167, 8
  store i64 %168, i64* %153, align 8
  %169 = load i32, i32* %15, align 8
  %170 = add nsw i32 %169, 8
  store i32 %170, i32* %15, align 8
  %171 = icmp slt i32 %170, 64
  %172 = load i8*, i8** %11, align 8
  br i1 %171, label %157, label %173

173:                                              ; preds = %163, %146
  %174 = phi i8* [ %147, %146 ], [ %172, %163 ]
  store i32 64, i32* %15, align 8
  %175 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  store i64 0, i64* %175, align 8
  %176 = zext i32 %150 to i64
  %177 = getelementptr inbounds i8, i8* %1, i64 %176
  %178 = shl nsw i32 %4, 1
  %179 = sub nsw i32 %178, %150
  %180 = sext i32 %179 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %177, i64 %180, i1 false)
  %181 = load i64, i64* %9, align 8
  %182 = load i8*, i8** %11, align 8
  %183 = ptrtoint i8* %182 to i64
  %184 = sub i64 %181, %183
  %185 = icmp slt i64 %184, %180
  br i1 %185, label %186, label %187

186:                                              ; preds = %173
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.17, i64 0, i64 0), i32 362) #6
  tail call void @abort() #7
  unreachable

187:                                              ; preds = %173
  %188 = getelementptr inbounds i8, i8* %182, i64 %180
  store i8* %188, i8** %11, align 8
  %189 = load i32, i32* %15, align 8
  br label %190

190:                                              ; preds = %70, %32, %187
  %191 = phi i32 [ %16, %32 ], [ %189, %187 ], [ %73, %70 ]
  %192 = shl nsw i32 %4, 1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %1, i64 %193
  %195 = bitcast i8* %194 to i16*
  %196 = load i16, i16* %195, align 1
  %197 = tail call i16 @llvm.bswap.i16(i16 %196) #6
  %198 = zext i16 %197 to i32
  %199 = sub nuw nsw i32 16, %5
  %200 = lshr i32 %198, %199
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %203 = load i64, i64* %202, align 8
  %204 = icmp sgt i32 %191, %5
  br i1 %204, label %205, label %210

205:                                              ; preds = %190
  %206 = zext i32 %5 to i64
  %207 = shl i64 %203, %206
  %208 = or i64 %207, %201
  %209 = sub nsw i32 %191, %5
  br label %231

210:                                              ; preds = %190
  %211 = load i64, i64* %9, align 8
  %212 = load i8*, i8** %11, align 8
  %213 = ptrtoint i8* %212 to i64
  %214 = sub i64 %211, %213
  %215 = icmp ugt i64 %214, 7
  br i1 %215, label %216, label %227

216:                                              ; preds = %210
  %217 = zext i32 %191 to i64
  %218 = shl i64 %203, %217
  %219 = sub nsw i32 %5, %191
  %220 = zext i32 %219 to i64
  %221 = lshr i64 %201, %220
  %222 = or i64 %221, %218
  %223 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %222) #5, !srcloc !2
  %224 = bitcast i8* %212 to i64*
  store i64 %223, i64* %224, align 1
  %225 = load i8*, i8** %11, align 8
  %226 = getelementptr inbounds i8, i8* %225, i64 8
  store i8* %226, i8** %11, align 8
  br label %228

227:                                              ; preds = %210
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %228

228:                                              ; preds = %227, %216
  %229 = sub nuw nsw i32 64, %5
  %230 = add nsw i32 %229, %191
  br label %231

231:                                              ; preds = %205, %228
  %232 = phi i64 [ %208, %205 ], [ %201, %228 ]
  %233 = phi i32 [ %209, %205 ], [ %230, %228 ]
  store i64 %232, i64* %202, align 8
  store i32 %233, i32* %15, align 8
  br label %234

234:                                              ; preds = %3, %231
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_put_string(%struct.PutBitContext* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = load i8, i8* %1, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %49, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %8 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 4
  %10 = bitcast i8** %9 to i64*
  %11 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 3
  %12 = load i64, i64* %7, align 8
  %13 = load i32, i32* %8, align 8
  br label %14

14:                                               ; preds = %6, %42
  %15 = phi i32 [ %13, %6 ], [ %45, %42 ]
  %16 = phi i64 [ %12, %6 ], [ %44, %42 ]
  %17 = phi i8 [ %4, %6 ], [ %47, %42 ]
  %18 = phi i8* [ %1, %6 ], [ %46, %42 ]
  %19 = sext i8 %17 to i64
  %20 = icmp sgt i32 %15, 8
  br i1 %20, label %21, label %24

21:                                               ; preds = %14
  %22 = shl i64 %16, 8
  %23 = or i64 %22, %19
  br label %42

24:                                               ; preds = %14
  %25 = load i64, i64* %10, align 8
  %26 = load i8*, i8** %11, align 8
  %27 = ptrtoint i8* %26 to i64
  %28 = sub i64 %25, %27
  %29 = icmp ugt i64 %28, 7
  br i1 %29, label %30, label %41

30:                                               ; preds = %24
  %31 = zext i32 %15 to i64
  %32 = shl i64 %16, %31
  %33 = sub nsw i32 8, %15
  %34 = zext i32 %33 to i64
  %35 = lshr i64 %19, %34
  %36 = or i64 %35, %32
  %37 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %36) #5, !srcloc !2
  %38 = bitcast i8* %26 to i64*
  store i64 %37, i64* %38, align 1
  %39 = load i8*, i8** %11, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 8
  store i8* %40, i8** %11, align 8
  br label %42

41:                                               ; preds = %24
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %42

42:                                               ; preds = %30, %41, %21
  %43 = phi i32 [ -8, %21 ], [ 56, %41 ], [ 56, %30 ]
  %44 = phi i64 [ %23, %21 ], [ %19, %41 ], [ %19, %30 ]
  %45 = add nsw i32 %15, %43
  store i64 %44, i64* %7, align 8
  store i32 %45, i32* %8, align 8
  %46 = getelementptr inbounds i8, i8* %18, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %14

49:                                               ; preds = %42, %3
  %50 = icmp eq i32 %2, 0
  br i1 %50, label %80, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = icmp sgt i32 %55, 8
  br i1 %56, label %57, label %59

57:                                               ; preds = %51
  %58 = shl i64 %53, 8
  br label %76

59:                                               ; preds = %51
  %60 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 4
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i64 0, i32 3
  %64 = load i8*, i8** %63, align 8
  %65 = ptrtoint i8* %64 to i64
  %66 = sub i64 %62, %65
  %67 = icmp ugt i64 %66, 7
  br i1 %67, label %68, label %75

68:                                               ; preds = %59
  %69 = zext i32 %55 to i64
  %70 = shl i64 %53, %69
  %71 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %70) #5, !srcloc !2
  %72 = bitcast i8* %64 to i64*
  store i64 %71, i64* %72, align 1
  %73 = load i8*, i8** %63, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 8
  store i8* %74, i8** %63, align 8
  br label %76

75:                                               ; preds = %59
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0)) #6
  br label %76

76:                                               ; preds = %68, %75, %57
  %77 = phi i32 [ -8, %57 ], [ 56, %75 ], [ 56, %68 ]
  %78 = phi i64 [ %58, %57 ], [ 0, %75 ], [ 0, %68 ]
  %79 = add nsw i32 %55, %77
  store i64 %78, i64* %52, align 8
  store i32 %79, i32* %54, align 8
  br label %80

80:                                               ; preds = %49, %76
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_init_vlc_sparse(%struct.VLC*, i32, i32, i8* nocapture readonly, i32, i32, i8* nocapture readonly, i32, i32, i8* readonly, i32, i32, i32) local_unnamed_addr #0 {
  %14 = alloca [1500 x %struct.VLCcode], align 16
  %15 = alloca %struct.VLC, align 8
  %16 = alloca [64 x [2 x i8*]], align 16
  %17 = getelementptr inbounds [1500 x %struct.VLCcode], [1500 x %struct.VLCcode]* %14, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12000, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 12000, i1 false)
  %18 = getelementptr inbounds [1500 x %struct.VLCcode], [1500 x %struct.VLCcode]* %14, i64 0, i64 0
  %19 = ptrtoint [1500 x %struct.VLCcode]* %14 to i64
  %20 = bitcast %struct.VLC* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 24, i1 false)
  %21 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 0
  store i32 %1, i32* %21, align 8
  %22 = and i32 %12, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %13
  %25 = icmp slt i32 %2, 1501
  br i1 %25, label %27, label %26

26:                                               ; preds = %24
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 152) #6
  call void @abort() #7
  unreachable

27:                                               ; preds = %24
  %28 = bitcast %struct.VLC* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %28, i64 24, i1 false) #6
  %29 = getelementptr inbounds %struct.VLC, %struct.VLC* %15, i64 0, i32 2
  store i32 0, i32* %29, align 8
  br label %39

30:                                               ; preds = %13
  %31 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %32 = icmp sgt i32 %2, 1500
  %33 = bitcast [2 x i16]** %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false)
  br i1 %32, label %34, label %39

34:                                               ; preds = %30
  %35 = sext i32 %2 to i64
  %36 = call i8* @av_malloc_array(i64 %35, i64 8) #6
  %37 = ptrtoint i8* %36 to i64
  %38 = icmp eq i8* %36, null
  br i1 %38, label %526, label %39

39:                                               ; preds = %34, %30, %27
  %40 = phi %struct.VLC* [ %0, %34 ], [ %0, %30 ], [ %15, %27 ]
  %41 = phi i64 [ %37, %34 ], [ %19, %30 ], [ %19, %27 ]
  %42 = icmp sgt i32 %11, 2
  %43 = icmp ne i8* %9, null
  %44 = and i1 %43, %42
  br i1 %44, label %58, label %45

45:                                               ; preds = %39
  %46 = icmp sgt i32 %2, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = inttoptr i64 %41 to %struct.VLCcode*
  br label %174

49:                                               ; preds = %45
  %50 = mul nsw i32 %1, 3
  %51 = inttoptr i64 %41 to %struct.VLCcode*
  %52 = and i32 %12, 2
  %53 = icmp eq i32 %52, 0
  %54 = sext i32 %10 to i64
  %55 = sext i32 %7 to i64
  %56 = sext i32 %4 to i64
  %57 = zext i32 %2 to i64
  br label %59

58:                                               ; preds = %39
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 338) #6
  call void @abort() #7
  unreachable

59:                                               ; preds = %170, %49
  %60 = phi i64 [ 0, %49 ], [ %172, %170 ]
  %61 = phi i32 [ 0, %49 ], [ %171, %170 ]
  %62 = mul nsw i64 %60, %56
  %63 = getelementptr inbounds i8, i8* %3, i64 %62
  switch i32 %5, label %71 [
    i32 1, label %64
    i32 2, label %67
  ]

64:                                               ; preds = %59
  %65 = load i8, i8* %63, align 1
  %66 = zext i8 %65 to i32
  br label %74

67:                                               ; preds = %59
  %68 = bitcast i8* %63 to i16*
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  br label %74

71:                                               ; preds = %59
  %72 = bitcast i8* %63 to i32*
  %73 = load i32, i32* %72, align 4
  br label %74

74:                                               ; preds = %71, %67, %64
  %75 = phi i32 [ %73, %71 ], [ %70, %67 ], [ %66, %64 ]
  %76 = icmp ugt i32 %75, %1
  br i1 %76, label %77, label %170

77:                                               ; preds = %74
  %78 = icmp ugt i32 %75, %50
  %79 = icmp ugt i32 %75, 32
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 %75) #6
  %82 = icmp eq %struct.VLCcode* %18, %51
  br i1 %82, label %526, label %83

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 0, i32 0
  call void @av_free(i8* %84) #6
  br label %526

85:                                               ; preds = %77
  %86 = trunc i32 %75 to i8
  %87 = sext i32 %61 to i64
  %88 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 %87, i32 0
  store i8 %86, i8* %88, align 4
  %89 = mul nsw i64 %60, %55
  %90 = getelementptr inbounds i8, i8* %6, i64 %89
  switch i32 %8, label %98 [
    i32 1, label %91
    i32 2, label %94
  ]

91:                                               ; preds = %85
  %92 = load i8, i8* %90, align 1
  %93 = zext i8 %92 to i32
  br label %101

94:                                               ; preds = %85
  %95 = bitcast i8* %90 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  br label %101

98:                                               ; preds = %85
  %99 = bitcast i8* %90 to i32*
  %100 = load i32, i32* %99, align 4
  br label %101

101:                                              ; preds = %98, %94, %91
  %102 = phi i32 [ %100, %98 ], [ %97, %94 ], [ %93, %91 ]
  %103 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 %87, i32 2
  store i32 %102, i32* %103, align 4
  %104 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 %87, i32 2
  %105 = zext i32 %102 to i64
  %106 = and i32 %75, 255
  %107 = and i32 %75, 255
  %108 = zext i32 %107 to i64
  %109 = shl i64 1, %108
  %110 = icmp sgt i64 %109, %105
  br i1 %110, label %116, label %111

111:                                              ; preds = %101
  %112 = trunc i64 %60 to i32
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i32 %102, i32 %112) #6
  %113 = icmp eq %struct.VLCcode* %18, %51
  br i1 %113, label %526, label %114

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 0, i32 0
  call void @av_free(i8* %115) #6
  br label %526

116:                                              ; preds = %101
  br i1 %53, label %146, label %117

117:                                              ; preds = %116
  %118 = and i32 %102, 255
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw i32 %122, 24
  %124 = lshr i32 %102, 8
  %125 = and i32 %124, 255
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = shl nuw nsw i32 %129, 16
  %131 = or i32 %130, %123
  %132 = lshr i32 %102, 16
  %133 = and i32 %132, 255
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %137, 8
  %139 = or i32 %131, %138
  %140 = lshr i32 %102, 24
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = or i32 %139, %144
  br label %149

146:                                              ; preds = %116
  %147 = sub nuw nsw i32 32, %106
  %148 = shl i32 %102, %147
  br label %149

149:                                              ; preds = %146, %117
  %150 = phi i32 [ %145, %117 ], [ %148, %146 ]
  store i32 %150, i32* %104, align 4
  br i1 %43, label %151, label %164

151:                                              ; preds = %149
  %152 = mul nsw i64 %60, %54
  %153 = getelementptr inbounds i8, i8* %9, i64 %152
  switch i32 %11, label %160 [
    i32 1, label %154
    i32 2, label %157
  ]

154:                                              ; preds = %151
  %155 = load i8, i8* %153, align 1
  %156 = zext i8 %155 to i16
  br label %166

157:                                              ; preds = %151
  %158 = bitcast i8* %153 to i16*
  %159 = load i16, i16* %158, align 2
  br label %166

160:                                              ; preds = %151
  %161 = bitcast i8* %153 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = trunc i32 %162 to i16
  br label %166

164:                                              ; preds = %149
  %165 = trunc i64 %60 to i16
  br label %166

166:                                              ; preds = %154, %157, %160, %164
  %167 = phi i16 [ %156, %154 ], [ %159, %157 ], [ %163, %160 ], [ %165, %164 ]
  %168 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %51, i64 %87, i32 1
  store i16 %167, i16* %168, align 2
  %169 = add nsw i32 %61, 1
  br label %170

170:                                              ; preds = %166, %74
  %171 = phi i32 [ %169, %166 ], [ %61, %74 ]
  %172 = add nuw nsw i64 %60, 1
  %173 = icmp eq i64 %172, %57
  br i1 %173, label %174, label %59

174:                                              ; preds = %170, %47
  %175 = phi %struct.VLCcode* [ %48, %47 ], [ %51, %170 ]
  %176 = phi i32 [ 0, %47 ], [ %171, %170 ]
  %177 = bitcast [64 x [2 x i8*]]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %177) #6
  %178 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 1
  %179 = bitcast [2 x i8*]* %178 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %179, i8 -86, i64 1008, i1 false)
  %180 = bitcast [64 x [2 x i8*]]* %16 to i64*
  store i64 %41, i64* %180, align 16
  %181 = sext i32 %176 to i64
  %182 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 %181
  %183 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %182, i64 -1
  %184 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %183, i64 0, i32 0
  %185 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 0, i64 1
  store i8* %184, i8** %185, align 8
  br label %186

186:                                              ; preds = %174, %395
  %187 = phi i32 [ 1, %174 ], [ %396, %395 ]
  %188 = add i32 %187, -1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 %189
  %191 = bitcast [2 x i8*]* %190 to %struct.VLCcode**
  %192 = load %struct.VLCcode*, %struct.VLCcode** %191, align 16
  %193 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 %189, i64 1
  %194 = bitcast i8** %193 to %struct.VLCcode**
  %195 = load %struct.VLCcode*, %struct.VLCcode** %194, align 8
  %196 = icmp ult %struct.VLCcode* %192, %195
  br i1 %196, label %197, label %395

197:                                              ; preds = %186, %363
  %198 = phi i64 [ %370, %363 ], [ %189, %186 ]
  %199 = phi %struct.VLCcode* [ %367, %363 ], [ %195, %186 ]
  %200 = phi %struct.VLCcode* [ %366, %363 ], [ %192, %186 ]
  %201 = phi i32 [ %371, %363 ], [ %188, %186 ]
  %202 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %199, i64 -1
  %203 = icmp ult %struct.VLCcode* %200, %202
  br i1 %203, label %204, label %373

204:                                              ; preds = %197
  %205 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %199, i64 -2
  %206 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %200, i64 1
  %207 = ptrtoint %struct.VLCcode* %199 to i64
  %208 = ptrtoint %struct.VLCcode* %200 to i64
  %209 = sub i64 %207, %208
  %210 = ashr i64 %209, 4
  %211 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %200, i64 %210
  %212 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %200, i64 0, i32 0
  %213 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %199, i64 0, i32 0
  %214 = getelementptr inbounds i8, i8* %212, i64 4
  %215 = bitcast i8* %214 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = lshr i32 %216, 1
  %218 = getelementptr inbounds i8, i8* %213, i64 4
  %219 = bitcast i8* %218 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = lshr i32 %220, 1
  %222 = icmp ugt i32 %217, %221
  %223 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %211, i64 0, i32 0
  %224 = getelementptr inbounds i8, i8* %223, i64 4
  %225 = bitcast i8* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = lshr i32 %226, 1
  br i1 %222, label %228, label %240

228:                                              ; preds = %204
  %229 = icmp ugt i32 %221, %227
  br i1 %229, label %230, label %235

230:                                              ; preds = %228
  %231 = bitcast %struct.VLCcode* %211 to i64*
  %232 = load i64, i64* %231, align 4
  %233 = bitcast %struct.VLCcode* %200 to i64*
  %234 = load i64, i64* %233, align 4
  store i64 %234, i64* %231, align 4
  store i64 %232, i64* %233, align 4
  br label %247

235:                                              ; preds = %228
  %236 = bitcast %struct.VLCcode* %199 to i64*
  %237 = load i64, i64* %236, align 4
  %238 = bitcast %struct.VLCcode* %200 to i64*
  %239 = load i64, i64* %238, align 4
  store i64 %239, i64* %236, align 4
  store i64 %237, i64* %238, align 4
  br label %247

240:                                              ; preds = %204
  %241 = icmp ugt i32 %217, %227
  br i1 %241, label %242, label %247

242:                                              ; preds = %240
  %243 = bitcast %struct.VLCcode* %211 to i64*
  %244 = load i64, i64* %243, align 4
  %245 = bitcast %struct.VLCcode* %200 to i64*
  %246 = load i64, i64* %245, align 4
  store i64 %246, i64* %243, align 4
  store i64 %244, i64* %245, align 4
  br label %247

247:                                              ; preds = %240, %242, %230, %235
  %248 = phi i32 [ 0, %230 ], [ 0, %235 ], [ 0, %242 ], [ 1, %240 ]
  %249 = load i32, i32* %225, align 4
  %250 = lshr i32 %249, 1
  %251 = load i32, i32* %219, align 4
  %252 = lshr i32 %251, 1
  %253 = icmp ugt i32 %250, %252
  br i1 %253, label %254, label %259

254:                                              ; preds = %247
  %255 = bitcast %struct.VLCcode* %199 to i64*
  %256 = load i64, i64* %255, align 4
  %257 = bitcast %struct.VLCcode* %211 to i64*
  %258 = load i64, i64* %257, align 4
  store i64 %258, i64* %255, align 4
  store i64 %256, i64* %257, align 4
  br label %259

259:                                              ; preds = %254, %247
  %260 = phi i32 [ 0, %254 ], [ %248, %247 ]
  %261 = icmp eq %struct.VLCcode* %200, %205
  br i1 %261, label %393, label %262

262:                                              ; preds = %259
  %263 = bitcast %struct.VLCcode* %211 to i64*
  %264 = load i64, i64* %263, align 4
  %265 = bitcast %struct.VLCcode* %202 to i64*
  %266 = load i64, i64* %265, align 4
  store i64 %266, i64* %263, align 4
  store i64 %264, i64* %265, align 4
  %267 = icmp ugt %struct.VLCcode* %206, %205
  br i1 %267, label %320, label %268

268:                                              ; preds = %262
  %269 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %202, i64 0, i32 0
  %270 = getelementptr inbounds i8, i8* %269, i64 4
  %271 = bitcast i8* %270 to i32*
  br label %272

272:                                              ; preds = %268, %314
  %273 = phi %struct.VLCcode* [ %206, %268 ], [ %316, %314 ]
  %274 = phi %struct.VLCcode* [ %205, %268 ], [ %315, %314 ]
  %275 = icmp ugt %struct.VLCcode* %273, %274
  br i1 %275, label %290, label %276

276:                                              ; preds = %272
  %277 = load i32, i32* %271, align 4
  %278 = lshr i32 %277, 1
  br label %279

279:                                              ; preds = %276, %287
  %280 = phi %struct.VLCcode* [ %273, %276 ], [ %288, %287 ]
  %281 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %280, i64 0, i32 0
  %282 = getelementptr inbounds i8, i8* %281, i64 4
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = lshr i32 %284, 1
  %286 = icmp ult i32 %285, %278
  br i1 %286, label %287, label %290

287:                                              ; preds = %279
  %288 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %280, i64 1
  %289 = icmp ugt %struct.VLCcode* %288, %274
  br i1 %289, label %290, label %279

290:                                              ; preds = %279, %287, %272
  %291 = phi %struct.VLCcode* [ %273, %272 ], [ %288, %287 ], [ %280, %279 ]
  %292 = icmp ugt %struct.VLCcode* %291, %274
  br i1 %292, label %314, label %293

293:                                              ; preds = %290
  %294 = load i32, i32* %271, align 4
  %295 = lshr i32 %294, 1
  br label %296

296:                                              ; preds = %293, %304
  %297 = phi %struct.VLCcode* [ %274, %293 ], [ %305, %304 ]
  %298 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %297, i64 0, i32 0
  %299 = getelementptr inbounds i8, i8* %298, i64 4
  %300 = bitcast i8* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = lshr i32 %301, 1
  %303 = icmp ugt i32 %302, %295
  br i1 %303, label %304, label %307

304:                                              ; preds = %296
  %305 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %297, i64 -1
  %306 = icmp ugt %struct.VLCcode* %291, %305
  br i1 %306, label %314, label %296

307:                                              ; preds = %296
  %308 = bitcast %struct.VLCcode* %297 to i64*
  %309 = load i64, i64* %308, align 4
  %310 = bitcast %struct.VLCcode* %291 to i64*
  %311 = load i64, i64* %310, align 4
  store i64 %311, i64* %308, align 4
  store i64 %309, i64* %310, align 4
  %312 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %291, i64 1
  %313 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %297, i64 -1
  br label %314

314:                                              ; preds = %304, %290, %307
  %315 = phi %struct.VLCcode* [ %313, %307 ], [ %274, %290 ], [ %305, %304 ]
  %316 = phi %struct.VLCcode* [ %312, %307 ], [ %291, %290 ], [ %291, %304 ]
  %317 = icmp ugt %struct.VLCcode* %316, %315
  br i1 %317, label %318, label %272

318:                                              ; preds = %314
  %319 = load i64, i64* %265, align 4
  br label %320

320:                                              ; preds = %318, %262
  %321 = phi i64 [ %264, %262 ], [ %319, %318 ]
  %322 = phi %struct.VLCcode* [ %205, %262 ], [ %315, %318 ]
  %323 = phi %struct.VLCcode* [ %206, %262 ], [ %316, %318 ]
  %324 = bitcast %struct.VLCcode* %323 to i64*
  %325 = load i64, i64* %324, align 4
  store i64 %321, i64* %324, align 4
  store i64 %325, i64* %265, align 4
  %326 = icmp eq i32 %260, 0
  br i1 %326, label %353, label %327

327:                                              ; preds = %320
  %328 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %323, i64 -1
  %329 = icmp eq %struct.VLCcode* %211, %328
  %330 = icmp eq %struct.VLCcode* %211, %323
  %331 = or i1 %330, %329
  br i1 %331, label %332, label %353

332:                                              ; preds = %327
  %333 = icmp ult %struct.VLCcode* %200, %199
  br i1 %333, label %334, label %350

334:                                              ; preds = %332, %347
  %335 = phi %struct.VLCcode* [ %348, %347 ], [ %200, %332 ]
  %336 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %335, i64 0, i32 0
  %337 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %335, i64 1, i32 0
  %338 = getelementptr inbounds i8, i8* %336, i64 4
  %339 = bitcast i8* %338 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = lshr i32 %340, 1
  %342 = getelementptr inbounds i8, i8* %337, i64 4
  %343 = bitcast i8* %342 to i32*
  %344 = load i32, i32* %343, align 4
  %345 = lshr i32 %344, 1
  %346 = icmp ugt i32 %341, %345
  br i1 %346, label %350, label %347

347:                                              ; preds = %334
  %348 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %335, i64 1
  %349 = icmp ult %struct.VLCcode* %348, %199
  br i1 %349, label %334, label %350

350:                                              ; preds = %347, %334, %332
  %351 = phi %struct.VLCcode* [ %200, %332 ], [ %335, %334 ], [ %348, %347 ]
  %352 = icmp eq %struct.VLCcode* %351, %199
  br i1 %352, label %391, label %353

353:                                              ; preds = %327, %320, %350
  %354 = ptrtoint %struct.VLCcode* %323 to i64
  %355 = sub i64 %207, %354
  %356 = sub i64 %354, %208
  %357 = icmp slt i64 %355, %356
  br i1 %357, label %358, label %361

358:                                              ; preds = %353
  %359 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %322, i64 0, i32 0
  %360 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %323, i64 1
  br label %363

361:                                              ; preds = %353
  %362 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %323, i64 1, i32 0
  br label %363

363:                                              ; preds = %358, %361
  %364 = phi i8* [ %212, %358 ], [ %362, %361 ]
  %365 = phi i8* [ %359, %358 ], [ %213, %361 ]
  %366 = phi %struct.VLCcode* [ %360, %358 ], [ %200, %361 ]
  %367 = phi %struct.VLCcode* [ %199, %358 ], [ %322, %361 ]
  %368 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 %198, i64 0
  store i8* %364, i8** %368, align 16
  %369 = getelementptr inbounds [64 x [2 x i8*]], [64 x [2 x i8*]]* %16, i64 0, i64 %198, i64 1
  store i8* %365, i8** %369, align 8
  %370 = add i64 %198, 1
  %371 = add nsw i32 %201, 1
  %372 = icmp ult %struct.VLCcode* %366, %367
  br i1 %372, label %197, label %395

373:                                              ; preds = %197
  %374 = trunc i64 %198 to i32
  %375 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %200, i64 0, i32 0
  %376 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %199, i64 0, i32 0
  %377 = getelementptr inbounds i8, i8* %375, i64 4
  %378 = bitcast i8* %377 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = lshr i32 %379, 1
  %381 = getelementptr inbounds i8, i8* %376, i64 4
  %382 = bitcast i8* %381 to i32*
  %383 = load i32, i32* %382, align 4
  %384 = lshr i32 %383, 1
  %385 = icmp ugt i32 %380, %384
  br i1 %385, label %386, label %395

386:                                              ; preds = %373
  %387 = bitcast %struct.VLCcode* %199 to i64*
  %388 = load i64, i64* %387, align 4
  %389 = bitcast %struct.VLCcode* %200 to i64*
  %390 = load i64, i64* %389, align 4
  store i64 %390, i64* %387, align 4
  store i64 %388, i64* %389, align 4
  br label %395

391:                                              ; preds = %350
  %392 = trunc i64 %198 to i32
  br label %395

393:                                              ; preds = %259
  %394 = trunc i64 %198 to i32
  br label %395

395:                                              ; preds = %363, %391, %393, %186, %373, %386
  %396 = phi i32 [ %374, %373 ], [ %374, %386 ], [ %188, %186 ], [ %392, %391 ], [ %394, %393 ], [ %371, %363 ]
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %398, label %186

398:                                              ; preds = %395
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %177) #6
  br i1 %46, label %399, label %523

399:                                              ; preds = %398
  %400 = mul nsw i32 %1, 3
  %401 = and i32 %12, 2
  %402 = icmp eq i32 %401, 0
  %403 = sext i32 %10 to i64
  %404 = sext i32 %7 to i64
  %405 = sext i32 %4 to i64
  %406 = zext i32 %2 to i64
  br label %407

407:                                              ; preds = %519, %399
  %408 = phi i64 [ 0, %399 ], [ %521, %519 ]
  %409 = phi i32 [ %176, %399 ], [ %520, %519 ]
  %410 = mul nsw i64 %408, %405
  %411 = getelementptr inbounds i8, i8* %3, i64 %410
  switch i32 %5, label %419 [
    i32 1, label %412
    i32 2, label %415
  ]

412:                                              ; preds = %407
  %413 = load i8, i8* %411, align 1
  %414 = zext i8 %413 to i32
  br label %422

415:                                              ; preds = %407
  %416 = bitcast i8* %411 to i16*
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  br label %422

419:                                              ; preds = %407
  %420 = bitcast i8* %411 to i32*
  %421 = load i32, i32* %420, align 4
  br label %422

422:                                              ; preds = %419, %415, %412
  %423 = phi i32 [ %421, %419 ], [ %418, %415 ], [ %414, %412 ]
  %424 = add i32 %423, -1
  %425 = icmp ult i32 %424, %1
  br i1 %425, label %426, label %519

426:                                              ; preds = %422
  %427 = icmp ugt i32 %423, %400
  %428 = icmp ugt i32 %423, 32
  %429 = or i1 %427, %428
  br i1 %429, label %430, label %434

430:                                              ; preds = %426
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 %423) #6
  %431 = icmp eq %struct.VLCcode* %18, %175
  br i1 %431, label %526, label %432

432:                                              ; preds = %430
  %433 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 0, i32 0
  call void @av_free(i8* %433) #6
  br label %526

434:                                              ; preds = %426
  %435 = trunc i32 %423 to i8
  %436 = sext i32 %409 to i64
  %437 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 %436, i32 0
  store i8 %435, i8* %437, align 4
  %438 = mul nsw i64 %408, %404
  %439 = getelementptr inbounds i8, i8* %6, i64 %438
  switch i32 %8, label %447 [
    i32 1, label %440
    i32 2, label %443
  ]

440:                                              ; preds = %434
  %441 = load i8, i8* %439, align 1
  %442 = zext i8 %441 to i32
  br label %450

443:                                              ; preds = %434
  %444 = bitcast i8* %439 to i16*
  %445 = load i16, i16* %444, align 2
  %446 = zext i16 %445 to i32
  br label %450

447:                                              ; preds = %434
  %448 = bitcast i8* %439 to i32*
  %449 = load i32, i32* %448, align 4
  br label %450

450:                                              ; preds = %447, %443, %440
  %451 = phi i32 [ %449, %447 ], [ %446, %443 ], [ %442, %440 ]
  %452 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 %436, i32 2
  store i32 %451, i32* %452, align 4
  %453 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 %436, i32 2
  %454 = zext i32 %451 to i64
  %455 = and i32 %423, 255
  %456 = and i32 %423, 255
  %457 = zext i32 %456 to i64
  %458 = shl i64 1, %457
  %459 = icmp sgt i64 %458, %454
  br i1 %459, label %465, label %460

460:                                              ; preds = %450
  %461 = trunc i64 %408 to i32
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i32 %451, i32 %461) #6
  %462 = icmp eq %struct.VLCcode* %18, %175
  br i1 %462, label %526, label %463

463:                                              ; preds = %460
  %464 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 0, i32 0
  call void @av_free(i8* %464) #6
  br label %526

465:                                              ; preds = %450
  br i1 %402, label %495, label %466

466:                                              ; preds = %465
  %467 = and i32 %451, 255
  %468 = zext i32 %467 to i64
  %469 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = shl nuw i32 %471, 24
  %473 = lshr i32 %451, 8
  %474 = and i32 %473, 255
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %475
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i32
  %479 = shl nuw nsw i32 %478, 16
  %480 = or i32 %479, %472
  %481 = lshr i32 %451, 16
  %482 = and i32 %481, 255
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i32
  %487 = shl nuw nsw i32 %486, 8
  %488 = or i32 %480, %487
  %489 = lshr i32 %451, 24
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %490
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = or i32 %488, %493
  br label %498

495:                                              ; preds = %465
  %496 = sub nuw nsw i32 32, %455
  %497 = shl i32 %451, %496
  br label %498

498:                                              ; preds = %495, %466
  %499 = phi i32 [ %494, %466 ], [ %497, %495 ]
  store i32 %499, i32* %453, align 4
  br i1 %43, label %500, label %513

500:                                              ; preds = %498
  %501 = mul nsw i64 %408, %403
  %502 = getelementptr inbounds i8, i8* %9, i64 %501
  switch i32 %11, label %509 [
    i32 1, label %503
    i32 2, label %506
  ]

503:                                              ; preds = %500
  %504 = load i8, i8* %502, align 1
  %505 = zext i8 %504 to i16
  br label %515

506:                                              ; preds = %500
  %507 = bitcast i8* %502 to i16*
  %508 = load i16, i16* %507, align 2
  br label %515

509:                                              ; preds = %500
  %510 = bitcast i8* %502 to i32*
  %511 = load i32, i32* %510, align 4
  %512 = trunc i32 %511 to i16
  br label %515

513:                                              ; preds = %498
  %514 = trunc i64 %408 to i16
  br label %515

515:                                              ; preds = %503, %506, %509, %513
  %516 = phi i16 [ %505, %503 ], [ %508, %506 ], [ %512, %509 ], [ %514, %513 ]
  %517 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %175, i64 %436, i32 1
  store i16 %516, i16* %517, align 2
  %518 = add nsw i32 %409, 1
  br label %519

519:                                              ; preds = %422, %515
  %520 = phi i32 [ %518, %515 ], [ %409, %422 ]
  %521 = add nuw nsw i64 %408, 1
  %522 = icmp eq i64 %521, %406
  br i1 %522, label %523, label %407

523:                                              ; preds = %519, %398
  %524 = phi i32 [ %176, %398 ], [ %520, %519 ]
  %525 = call fastcc i32 @vlc_common_end(%struct.VLC* %40, i32 %1, i32 %524, %struct.VLCcode* %175, i32 %12, %struct.VLC* %0, %struct.VLCcode* nonnull %18)
  br label %526

526:                                              ; preds = %463, %460, %432, %430, %114, %111, %83, %81, %34, %523
  %527 = phi i32 [ %525, %523 ], [ -12, %34 ], [ -22, %81 ], [ -22, %83 ], [ -22, %111 ], [ -22, %114 ], [ -22, %430 ], [ -22, %432 ], [ -22, %460 ], [ -22, %463 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 12000, i8* nonnull %17) #6
  ret i32 %527
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @vlc_common_end(%struct.VLC*, i32, i32, %struct.VLCcode*, i32, %struct.VLC* nocapture, %struct.VLCcode* readnone) unnamed_addr #0 {
  %8 = tail call fastcc i32 @build_table(%struct.VLC* %0, i32 %1, i32 %2, %struct.VLCcode* %3, i32 %4)
  %9 = and i32 %4, 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %27, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %13, %15
  %17 = and i32 %4, 1
  %18 = icmp eq i32 %17, 0
  %19 = and i1 %18, %16
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i32 %13, i32 %15) #6
  br label %21

21:                                               ; preds = %11, %20
  %22 = icmp sgt i32 %8, -1
  br i1 %22, label %24, label %23

23:                                               ; preds = %21
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 287) #6
  tail call void @abort() #7
  unreachable

24:                                               ; preds = %21
  %25 = bitcast %struct.VLC* %5 to i8*
  %26 = bitcast %struct.VLC* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false)
  br label %36

27:                                               ; preds = %7
  %28 = icmp eq %struct.VLCcode* %3, %6
  br i1 %28, label %31, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 0, i32 0
  tail call void @av_free(i8* %30) #6
  br label %31

31:                                               ; preds = %27, %29
  %32 = icmp slt i32 %8, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %35 = bitcast [2 x i16]** %34 to i8*
  tail call void @av_freep(i8* %35) #6
  br label %36

36:                                               ; preds = %24, %31, %33
  %37 = phi i32 [ %8, %33 ], [ 0, %31 ], [ 0, %24 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_init_vlc_from_lengths(%struct.VLC*, i32, i32, i8* nocapture readonly, i32, i8* readonly, i32, i32, i32, i32, i8*) local_unnamed_addr #0 {
  %12 = alloca [1500 x %struct.VLCcode], align 16
  %13 = alloca %struct.VLC, align 8
  %14 = getelementptr inbounds [1500 x %struct.VLCcode], [1500 x %struct.VLCcode]* %12, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12000, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 12000, i1 false)
  %15 = getelementptr inbounds [1500 x %struct.VLCcode], [1500 x %struct.VLCcode]* %12, i64 0, i64 0
  %16 = bitcast %struct.VLC* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false)
  %17 = mul nsw i32 %1, 3
  %18 = icmp slt i32 %17, 32
  %19 = select i1 %18, i32 %17, i32 32
  %20 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 0
  store i32 %1, i32* %20, align 8
  %21 = and i32 %9, 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %11
  %24 = icmp slt i32 %2, 1501
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 152) #6
  tail call void @abort() #7
  unreachable

26:                                               ; preds = %23
  %27 = bitcast %struct.VLC* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %27, i64 24, i1 false) #6
  %28 = getelementptr inbounds %struct.VLC, %struct.VLC* %13, i64 0, i32 2
  store i32 0, i32* %28, align 8
  br label %38

29:                                               ; preds = %11
  %30 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %31 = icmp sgt i32 %2, 1500
  %32 = bitcast [2 x i16]** %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false)
  br i1 %31, label %33, label %38

33:                                               ; preds = %29
  %34 = sext i32 %2 to i64
  %35 = tail call i8* @av_malloc_array(i64 %34, i64 8) #6
  %36 = bitcast i8* %35 to %struct.VLCcode*
  %37 = icmp eq i8* %35, null
  br i1 %37, label %117, label %41

38:                                               ; preds = %26, %29
  %39 = phi %struct.VLC* [ %0, %29 ], [ %13, %26 ]
  %40 = icmp sgt i32 %2, 0
  br i1 %40, label %41, label %108

41:                                               ; preds = %33, %38
  %42 = phi %struct.VLC* [ %39, %38 ], [ %0, %33 ]
  %43 = phi %struct.VLCcode* [ %15, %38 ], [ %36, %33 ]
  %44 = icmp eq i8* %5, null
  %45 = sext i32 %4 to i64
  %46 = sext i32 %6 to i64
  %47 = zext i32 %2 to i64
  br label %48

48:                                               ; preds = %102, %41
  %49 = phi i64 [ 0, %41 ], [ %105, %102 ]
  %50 = phi i32 [ 0, %41 ], [ %104, %102 ]
  %51 = phi i64 [ 0, %41 ], [ %103, %102 ]
  %52 = phi i8* [ %3, %41 ], [ %106, %102 ]
  %53 = load i8, i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = icmp sgt i8 %53, 0
  br i1 %55, label %56, label %81

56:                                               ; preds = %48
  %57 = sext i32 %50 to i64
  %58 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %43, i64 %57, i32 0
  store i8 %53, i8* %58, align 4
  %59 = trunc i64 %49 to i32
  br i1 %44, label %73, label %60

60:                                               ; preds = %56
  %61 = mul nsw i64 %49, %46
  %62 = getelementptr inbounds i8, i8* %5, i64 %61
  switch i32 %7, label %70 [
    i32 1, label %63
    i32 2, label %66
  ]

63:                                               ; preds = %60
  %64 = load i8, i8* %62, align 1
  %65 = zext i8 %64 to i32
  br label %73

66:                                               ; preds = %60
  %67 = bitcast i8* %62 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  br label %73

70:                                               ; preds = %60
  %71 = bitcast i8* %62 to i32*
  %72 = load i32, i32* %71, align 4
  br label %73

73:                                               ; preds = %56, %63, %66, %70
  %74 = phi i32 [ %72, %70 ], [ %69, %66 ], [ %65, %63 ], [ %59, %56 ]
  %75 = add i32 %74, %8
  %76 = trunc i32 %75 to i16
  %77 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %43, i64 %57, i32 1
  store i16 %76, i16* %77, align 2
  %78 = trunc i64 %51 to i32
  %79 = add nsw i32 %50, 1
  %80 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %43, i64 %57, i32 2
  store i32 %78, i32* %80, align 4
  br label %85

81:                                               ; preds = %48
  %82 = icmp slt i8 %53, 0
  br i1 %82, label %83, label %102

83:                                               ; preds = %81
  %84 = sub nsw i32 0, %54
  br label %85

85:                                               ; preds = %83, %73
  %86 = phi i32 [ %79, %73 ], [ %50, %83 ]
  %87 = phi i32 [ %54, %73 ], [ %84, %83 ]
  %88 = icmp sgt i32 %87, %19
  br i1 %88, label %96, label %89

89:                                               ; preds = %85
  %90 = sub nsw i32 32, %87
  %91 = shl i32 1, %90
  %92 = add i32 %91, -1
  %93 = zext i32 %92 to i64
  %94 = and i64 %51, %93
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %97, label %96

96:                                               ; preds = %89, %85
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i32 %87) #6
  br label %113

97:                                               ; preds = %89
  %98 = zext i32 %91 to i64
  %99 = add i64 %51, %98
  %100 = icmp ugt i64 %99, 4294967296
  br i1 %100, label %101, label %102

101:                                              ; preds = %97
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %113

102:                                              ; preds = %81, %97
  %103 = phi i64 [ %51, %81 ], [ %99, %97 ]
  %104 = phi i32 [ %50, %81 ], [ %86, %97 ]
  %105 = add nuw nsw i64 %49, 1
  %106 = getelementptr inbounds i8, i8* %52, i64 %45
  %107 = icmp eq i64 %105, %47
  br i1 %107, label %108, label %48

108:                                              ; preds = %102, %38
  %109 = phi %struct.VLC* [ %39, %38 ], [ %42, %102 ]
  %110 = phi %struct.VLCcode* [ %15, %38 ], [ %43, %102 ]
  %111 = phi i32 [ 0, %38 ], [ %104, %102 ]
  %112 = call fastcc i32 @vlc_common_end(%struct.VLC* %109, i32 %1, i32 %111, %struct.VLCcode* %110, i32 %9, %struct.VLC* %0, %struct.VLCcode* nonnull %15)
  br label %117

113:                                              ; preds = %101, %96
  %114 = icmp eq %struct.VLCcode* %43, %15
  br i1 %114, label %117, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %43, i64 0, i32 0
  call void @av_free(i8* %116) #6
  br label %117

117:                                              ; preds = %33, %115, %113, %108
  %118 = phi i32 [ %112, %108 ], [ -1094995529, %113 ], [ -1094995529, %115 ], [ -12, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 12000, i8* nonnull %14) #6
  ret i32 %118
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_free_vlc(%struct.VLC*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %3 = bitcast [2 x i16]** %2 to i8*
  tail call void @av_freep(i8* %3) #6
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #2

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @build_table(%struct.VLC* nocapture, i32, i32, %struct.VLCcode* nocapture, i32) unnamed_addr #0 {
  %6 = alloca [2 x i16]*, align 8
  %7 = bitcast [2 x i16]** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  store volatile [2 x i16]* inttoptr (i64 -6148914691236517206 to [2 x i16]*), [2 x i16]** %6, align 8
  %8 = icmp sgt i32 %1, 30
  br i1 %8, label %255, label %9

9:                                                ; preds = %5
  %10 = shl i32 1, %1
  %11 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = add nsw i32 %12, %10
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %13, %15
  br i1 %16, label %17, label %46

17:                                               ; preds = %9
  %18 = and i32 %4, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @abort() #7
  unreachable

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = shl i32 1, %23
  %25 = add nsw i32 %24, %15
  store i32 %25, i32* %14, align 4
  %26 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %27 = bitcast [2 x i16]** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = sext i32 %25 to i64
  %30 = tail call i8* @av_realloc_f(i8* %28, i64 %29, i64 4) #6
  store i8* %30, i8** %27, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %21
  store i32 0, i32* %14, align 4
  store i32 0, i32* %11, align 8
  br label %255

33:                                               ; preds = %21
  %34 = bitcast i8* %30 to [2 x i16]*
  %35 = load i32, i32* %14, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [2 x i16], [2 x i16]* %34, i64 %36
  %38 = load i32, i32* %22, align 8
  %39 = shl i32 1, %38
  %40 = sext i32 %39 to i64
  %41 = sub nsw i64 0, %40
  %42 = getelementptr inbounds [2 x i16], [2 x i16]* %37, i64 %41
  %43 = bitcast [2 x i16]* %42 to i8*
  %44 = zext i32 %38 to i64
  %45 = shl i64 4, %44
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %43, i8 0, i64 %45, i1 false) #6
  br label %46

46:                                               ; preds = %9, %33
  %47 = icmp slt i32 %12, 0
  br i1 %47, label %255, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.VLC, %struct.VLC* %0, i64 0, i32 1
  %50 = load [2 x i16]*, [2 x i16]** %49, align 8
  %51 = sext i32 %12 to i64
  %52 = getelementptr inbounds [2 x i16], [2 x i16]* %50, i64 %51
  store volatile [2 x i16]* %52, [2 x i16]** %6, align 8
  %53 = icmp sgt i32 %2, 0
  br i1 %53, label %54, label %60

54:                                               ; preds = %48
  %55 = sub nsw i32 32, %1
  %56 = and i32 %4, 8
  %57 = icmp eq i32 %56, 0
  br label %62

58:                                               ; preds = %239
  %59 = icmp eq i32 %1, 31
  br i1 %59, label %255, label %60

60:                                               ; preds = %48, %58
  %61 = sext i32 %10 to i64
  br label %243

62:                                               ; preds = %54, %239
  %63 = phi i32 [ 0, %54 ], [ %241, %239 ]
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 %64
  %66 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %65, i64 0, i32 0
  %67 = load i8, i8* %66, align 4
  %68 = zext i8 %67 to i32
  %69 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 %64, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 %64, i32 1
  %72 = load i16, i16* %71, align 2
  %73 = icmp sgt i32 %68, %1
  br i1 %73, label %141, label %74

74:                                               ; preds = %62
  %75 = lshr i32 %70, %55
  %76 = sub nsw i32 %1, %68
  %77 = shl i32 1, %76
  br i1 %57, label %108, label %78

78:                                               ; preds = %74
  %79 = and i32 %70, 255
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl nuw i32 %83, 24
  %85 = lshr i32 %70, 8
  %86 = and i32 %85, 255
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 16
  %92 = or i32 %91, %84
  %93 = lshr i32 %70, 16
  %94 = and i32 %93, 255
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = shl nuw nsw i32 %98, 8
  %100 = or i32 %92, %99
  %101 = lshr i32 %70, 24
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = or i32 %100, %105
  %107 = shl i32 1, %68
  br label %108

108:                                              ; preds = %74, %78
  %109 = phi i32 [ %106, %78 ], [ %75, %74 ]
  %110 = phi i32 [ %107, %78 ], [ 1, %74 ]
  %111 = icmp eq i32 %76, 31
  br i1 %111, label %239, label %112

112:                                              ; preds = %108
  %113 = zext i8 %67 to i16
  %114 = sext i32 %109 to i64
  %115 = sext i32 %110 to i64
  br label %116

116:                                              ; preds = %112, %133
  %117 = phi i64 [ %114, %112 ], [ %138, %133 ]
  %118 = phi i32 [ 0, %112 ], [ %139, %133 ]
  %119 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %120 = getelementptr inbounds [2 x i16], [2 x i16]* %119, i64 %117, i64 1
  %121 = load volatile i16, i16* %120, align 2
  %122 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %123 = getelementptr inbounds [2 x i16], [2 x i16]* %122, i64 %117, i64 0
  %124 = load volatile i16, i16* %123, align 2
  %125 = or i16 %124, %121
  %126 = icmp eq i16 %125, 0
  br i1 %126, label %133, label %127

127:                                              ; preds = %116
  %128 = sext i16 %121 to i32
  %129 = icmp eq i32 %128, %68
  %130 = icmp eq i16 %124, %72
  %131 = and i1 %129, %130
  br i1 %131, label %133, label %132

132:                                              ; preds = %127
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #6
  br label %255

133:                                              ; preds = %116, %127
  %134 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %135 = getelementptr inbounds [2 x i16], [2 x i16]* %134, i64 %117, i64 1
  store volatile i16 %113, i16* %135, align 2
  %136 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %137 = getelementptr inbounds [2 x i16], [2 x i16]* %136, i64 %117, i64 0
  store volatile i16 %72, i16* %137, align 2
  %138 = add i64 %117, %115
  %139 = add nuw nsw i32 %118, 1
  %140 = icmp slt i32 %139, %77
  br i1 %140, label %116, label %239

141:                                              ; preds = %62
  %142 = sub nsw i32 %68, %1
  %143 = lshr i32 %70, %55
  %144 = trunc i32 %142 to i8
  store i8 %144, i8* %66, align 4
  %145 = shl i32 %70, %1
  store i32 %145, i32* %69, align 4
  %146 = add nsw i32 %63, 1
  %147 = icmp slt i32 %146, %2
  br i1 %147, label %148, label %181

148:                                              ; preds = %141
  %149 = sext i32 %146 to i64
  br label %150

150:                                              ; preds = %166, %148
  %151 = phi i64 [ %149, %148 ], [ %171, %166 ]
  %152 = phi i32 [ %146, %148 ], [ %172, %166 ]
  %153 = phi i32 [ %63, %148 ], [ %160, %166 ]
  %154 = phi i32 [ %142, %148 ], [ %170, %166 ]
  %155 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 %151, i32 0
  %156 = load i8, i8* %155, align 4
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %157, %1
  %159 = icmp slt i32 %158, 1
  %160 = trunc i64 %151 to i32
  br i1 %159, label %179, label %161

161:                                              ; preds = %150
  %162 = getelementptr inbounds %struct.VLCcode, %struct.VLCcode* %3, i64 %151, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = lshr i32 %163, %55
  %165 = icmp eq i32 %164, %143
  br i1 %165, label %166, label %177

166:                                              ; preds = %161
  %167 = trunc i32 %158 to i8
  store i8 %167, i8* %155, align 4
  %168 = shl i32 %163, %1
  store i32 %168, i32* %162, align 4
  %169 = icmp sgt i32 %154, %158
  %170 = select i1 %169, i32 %154, i32 %158
  %171 = add nsw i64 %151, 1
  %172 = add nsw i32 %152, 1
  %173 = trunc i64 %171 to i32
  %174 = icmp eq i32 %173, %2
  br i1 %174, label %175, label %150

175:                                              ; preds = %166
  %176 = trunc i64 %151 to i32
  br label %181

177:                                              ; preds = %161
  %178 = trunc i64 %151 to i32
  br label %181

179:                                              ; preds = %150
  %180 = trunc i64 %151 to i32
  br label %181

181:                                              ; preds = %175, %177, %179, %141
  %182 = phi i32 [ %142, %141 ], [ %170, %175 ], [ %154, %177 ], [ %154, %179 ]
  %183 = phi i32 [ %63, %141 ], [ %176, %175 ], [ %153, %177 ], [ %153, %179 ]
  %184 = phi i32 [ %146, %141 ], [ %172, %175 ], [ %178, %177 ], [ %180, %179 ]
  %185 = icmp sgt i32 %182, %1
  %186 = select i1 %185, i32 %1, i32 %182
  br i1 %57, label %217, label %187

187:                                              ; preds = %181
  %188 = and i32 %143, 255
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = shl nuw i32 %192, 24
  %194 = lshr i32 %143, 8
  %195 = and i32 %194, 255
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = shl nuw nsw i32 %199, 16
  %201 = or i32 %200, %193
  %202 = lshr i32 %143, 16
  %203 = and i32 %202, 255
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = shl nuw nsw i32 %207, 8
  %209 = or i32 %201, %208
  %210 = lshr i32 %143, 24
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = or i32 %209, %214
  %216 = lshr i32 %215, %55
  br label %217

217:                                              ; preds = %181, %187
  %218 = phi i32 [ %216, %187 ], [ %143, %181 ]
  %219 = trunc i32 %186 to i16
  %220 = sub i16 0, %219
  %221 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %222 = sext i32 %218 to i64
  %223 = getelementptr inbounds [2 x i16], [2 x i16]* %221, i64 %222, i64 1
  store volatile i16 %220, i16* %223, align 2
  %224 = sub nsw i32 %184, %63
  %225 = tail call fastcc i32 @build_table(%struct.VLC* %0, i32 %186, i32 %224, %struct.VLCcode* %65, i32 %4)
  %226 = icmp slt i32 %225, 0
  br i1 %226, label %255, label %227

227:                                              ; preds = %217
  %228 = load [2 x i16]*, [2 x i16]** %49, align 8
  %229 = getelementptr inbounds [2 x i16], [2 x i16]* %228, i64 %51
  store volatile [2 x i16]* %229, [2 x i16]** %6, align 8
  %230 = trunc i32 %225 to i16
  %231 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %232 = getelementptr inbounds [2 x i16], [2 x i16]* %231, i64 %222, i64 0
  store volatile i16 %230, i16* %232, align 2
  %233 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %234 = getelementptr inbounds [2 x i16], [2 x i16]* %233, i64 %222, i64 0
  %235 = load volatile i16, i16* %234, align 2
  %236 = sext i16 %235 to i32
  %237 = icmp eq i32 %225, %236
  br i1 %237, label %239, label %238

238:                                              ; preds = %227
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0)) #6
  br label %255

239:                                              ; preds = %133, %108, %227
  %240 = phi i32 [ %183, %227 ], [ %63, %108 ], [ %63, %133 ]
  %241 = add nsw i32 %240, 1
  %242 = icmp slt i32 %241, %2
  br i1 %242, label %62, label %58

243:                                              ; preds = %60, %252
  %244 = phi i64 [ 0, %60 ], [ %253, %252 ]
  %245 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %246 = getelementptr inbounds [2 x i16], [2 x i16]* %245, i64 %244, i64 1
  %247 = load volatile i16, i16* %246, align 2
  %248 = icmp eq i16 %247, 0
  br i1 %248, label %249, label %252

249:                                              ; preds = %243
  %250 = load volatile [2 x i16]*, [2 x i16]** %6, align 8
  %251 = getelementptr inbounds [2 x i16], [2 x i16]* %250, i64 %244, i64 0
  store volatile i16 -1, i16* %251, align 2
  br label %252

252:                                              ; preds = %243, %249
  %253 = add nuw nsw i64 %244, 1
  %254 = icmp slt i64 %253, %61
  br i1 %254, label %243, label %255

255:                                              ; preds = %217, %252, %58, %132, %32, %46, %5, %238
  %256 = phi i32 [ -1094995529, %132 ], [ -1163346256, %238 ], [ -22, %5 ], [ %12, %46 ], [ -12, %32 ], [ %12, %58 ], [ %12, %252 ], [ %225, %217 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  ret i32 %256
}

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #2

declare i8* @av_realloc_f(i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1817065}
