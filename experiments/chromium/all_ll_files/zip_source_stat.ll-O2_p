; ModuleID = '../../third_party/libzip/src/lib/zip_source_stat.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_stat.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %25

6:                                                ; preds = %2
  %7 = icmp eq %struct.zip_stat* %1, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  tail call void @zip_error_set(%struct.zip_error* %9, i32 18, i32 0) #2
  br label %25

10:                                               ; preds = %6
  tail call void @zip_stat_init(%struct.zip_stat* nonnull %1) #2
  %11 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 0
  %12 = load %struct.zip_source*, %struct.zip_source** %11, align 8
  %13 = icmp eq %struct.zip_source* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @zip_source_stat(%struct.zip_source* nonnull %12, %struct.zip_stat* nonnull %1)
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  %19 = load %struct.zip_source*, %struct.zip_source** %11, align 8
  tail call void @_zip_error_set_from_source(%struct.zip_error* %18, %struct.zip_source* %19) #2
  br label %25

20:                                               ; preds = %10, %14
  %21 = bitcast %struct.zip_stat* %1 to i8*
  %22 = tail call i64 @_zip_source_call(%struct.zip_source* %0, i8* nonnull %21, i64 64, i32 3) #2
  %23 = ashr i64 %22, 63
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %20, %2, %17, %8
  %26 = phi i32 [ -1, %8 ], [ -1, %17 ], [ -1, %2 ], [ %24, %20 ]
  ret i32 %26
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare void @zip_stat_init(%struct.zip_stat*) local_unnamed_addr #1

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #1

declare i64 @_zip_source_call(%struct.zip_source*, i8*, i64, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
