; ModuleID = '../../third_party/boringssl/src/crypto/trust_token/voprf.c'
source_filename = "../../third_party/boringssl/src/crypto/trust_token/voprf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_SCALAR = type { [9 x i64] }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%union.EC_FELEM = type { [9 x i64] }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.TRUST_TOKEN_CLIENT_KEY = type { %struct.EC_AFFINE, %struct.EC_AFFINE, %struct.EC_AFFINE }
%struct.TRUST_TOKEN_ISSUER_KEY = type { %union.EC_SCALAR, %union.EC_SCALAR, %union.EC_SCALAR, %union.EC_SCALAR, %union.EC_SCALAR, %union.EC_SCALAR, %struct.EC_AFFINE, %union.EC_PRECOMP, %struct.EC_AFFINE, %union.EC_PRECOMP, %struct.EC_AFFINE, %union.EC_PRECOMP }
%struct.stack_st_TRUST_TOKEN_PRETOKEN = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.pmb_pretoken_st = type { [64 x i8], %union.EC_SCALAR, %struct.EC_AFFINE }
%struct.cbs_st = type { i8*, i64 }
%struct.stack_st_TRUST_TOKEN = type opaque
%struct.trust_token_st = type { i8*, i64 }

@voprf_exp2_method_once = internal global i32 0, align 4
@voprf_exp2_ok = internal unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [59 x i8] c"../../third_party/boringssl/src/crypto/trust_token/voprf.c\00", align 1
@voprf_exp2_hash_to_group.kHashTLabel = internal constant [43 x i8] c"TrustToken VOPRF Experiment V2 HashToGroup\00", align 16
@voprf_exp2_hash_to_scalar.kHashCLabel = internal constant [44 x i8] c"TrustToken VOPRF Experiment V2 HashToScalar\00", align 16
@kDefaultAdditionalData = internal constant [32 x i8] zeroinitializer, align 16
@hash_to_scalar_batch.kDLEQBatchLabel = internal constant [11 x i8] c"DLEQ BATCH\00", align 1
@hash_to_scalar_dleq.kDLEQLabel = internal constant [5 x i8] c"DLEQ\00", align 1
@voprf_exp2_method.0 = internal unnamed_addr global %struct.ec_group_st* null, align 8
@voprf_exp2_method.1 = internal unnamed_addr global i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)* null, align 8
@voprf_exp2_method.2 = internal unnamed_addr global i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)* null, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @voprf_exp2_generate_key(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.EC_RAW_POINT, align 8
  %7 = alloca %union.EC_SCALAR, align 8
  %8 = alloca %struct.EC_AFFINE, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %9 = load i32, i32* @voprf_exp2_ok, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %54

12:                                               ; preds = %2
  %13 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %14 = bitcast %struct.EC_RAW_POINT* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 216, i1 false) #4
  %15 = bitcast %union.EC_SCALAR* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 72, i1 false) #4
  %16 = bitcast %struct.EC_AFFINE* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 144, i1 false) #4
  %17 = call i32 @ec_random_nonzero_scalar(%struct.ec_group_st* %13, %union.EC_SCALAR* nonnull %7, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @kDefaultAdditionalData, i64 0, i64 0)) #4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %12
  %20 = call i32 @ec_point_mul_scalar_base(%struct.ec_group_st* %13, %struct.EC_RAW_POINT* nonnull %6, %union.EC_SCALAR* nonnull %7) #4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %19
  %23 = call i32 @ec_jacobian_to_affine(%struct.ec_group_st* %13, %struct.EC_AFFINE* nonnull %8, %struct.EC_RAW_POINT* nonnull %6) #4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22, %19, %12
  call void @ERR_put_error(i32 32, i32 0, i32 100, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 122) #4
  br label %52

26:                                               ; preds = %22
  %27 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %28 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  %29 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %13, i64 0, i32 2
  %30 = call i32 @BN_num_bytes(%struct.bignum_st* %29) #4
  %31 = zext i32 %30 to i64
  store i64 %31, i64* %5, align 8
  %32 = call i32 @CBB_add_space(%struct.cbb_st* %0, i8** nonnull %4, i64 %31) #4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 94) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #4
  br label %51

35:                                               ; preds = %26
  %36 = load i8*, i8** %4, align 8
  call void @ec_scalar_to_bytes(%struct.ec_group_st* %13, i8* %36, i64* nonnull %5, %union.EC_SCALAR* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #4
  %37 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %13, %struct.EC_AFFINE* nonnull %8, i32 4, i8* null, i64 0) #4
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %51, label %39

39:                                               ; preds = %35
  %40 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %41 = call i32 @CBB_add_space(%struct.cbb_st* %1, i8** nonnull %3, i64 %37) #4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = load i8*, i8** %3, align 8
  %45 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %13, %struct.EC_AFFINE* nonnull %8, i32 4, i8* %44, i64 %37) #4
  %46 = icmp eq i64 %45, %37
  br i1 %46, label %48, label %47

47:                                               ; preds = %43, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #4
  br label %51

48:                                               ; preds = %43
  %49 = call i32 @CBB_flush(%struct.cbb_st* %1) #4
  %50 = icmp eq i32 %49, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #4
  br i1 %50, label %51, label %52

51:                                               ; preds = %48, %47, %35, %34
  call void @ERR_put_error(i32 32, i32 0, i32 101, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 128) #4
  br label %52

52:                                               ; preds = %25, %48, %51
  %53 = phi i32 [ 0, %51 ], [ 0, %25 ], [ 1, %48 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %14) #4
  br label %54

54:                                               ; preds = %11, %52
  %55 = phi i32 [ %53, %52 ], [ 0, %11 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @voprf_exp2_client_key_from_bytes(%struct.TRUST_TOKEN_CLIENT_KEY*, i8*, i64) local_unnamed_addr #0 {
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %4 = load i32, i32* @voprf_exp2_ok, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %13

7:                                                ; preds = %3
  %8 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %9 = getelementptr inbounds %struct.TRUST_TOKEN_CLIENT_KEY, %struct.TRUST_TOKEN_CLIENT_KEY* %0, i64 0, i32 2
  %10 = tail call i32 @ec_point_from_uncompressed(%struct.ec_group_st* %8, %struct.EC_AFFINE* %9, i8* %1, i64 %2) #4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  tail call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 140) #4
  br label %13

13:                                               ; preds = %12, %7, %6
  %14 = phi i32 [ 0, %6 ], [ 0, %12 ], [ 1, %7 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @voprf_exp2_issuer_key_from_bytes(%struct.TRUST_TOKEN_ISSUER_KEY*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %struct.EC_RAW_POINT, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %5 = load i32, i32* @voprf_exp2_ok, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %25

8:                                                ; preds = %3
  %9 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %10 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 4
  %11 = tail call i32 @ec_scalar_from_bytes(%struct.ec_group_st* %9, %union.EC_SCALAR* %10, i8* %1, i64 %2) #4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  tail call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 152) #4
  br label %25

14:                                               ; preds = %8
  %15 = bitcast %struct.EC_RAW_POINT* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 216, i1 false) #4
  %16 = call i32 @ec_point_mul_scalar_base(%struct.ec_group_st* %9, %struct.EC_RAW_POINT* nonnull %4, %union.EC_SCALAR* %10) #4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 10
  %20 = call i32 @ec_jacobian_to_affine(%struct.ec_group_st* %9, %struct.EC_AFFINE* %19, %struct.EC_RAW_POINT* nonnull %4) #4
  %21 = icmp ne i32 %20, 0
  %22 = zext i1 %21 to i32
  br label %23

23:                                               ; preds = %18, %14
  %24 = phi i32 [ 0, %14 ], [ %22, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %15) #4
  br label %25

25:                                               ; preds = %23, %13, %7
  %26 = phi i32 [ 0, %7 ], [ %24, %23 ], [ 0, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_TRUST_TOKEN_PRETOKEN* @voprf_exp2_blind(%struct.cbb_st*, i64) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %union.EC_SCALAR, align 8
  %5 = alloca %struct.EC_RAW_POINT, align 8
  %6 = alloca %struct.EC_RAW_POINT, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %7 = load i32, i32* @voprf_exp2_ok, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %73

10:                                               ; preds = %2
  %11 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %12 = tail call %struct.stack_st* @sk_new_null() #4
  %13 = bitcast %struct.stack_st* %12 to %struct.stack_st_TRUST_TOKEN_PRETOKEN*
  %14 = icmp eq %struct.stack_st* %12, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %10
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %73, label %17

17:                                               ; preds = %15
  %18 = bitcast %union.EC_SCALAR* %4 to i8*
  %19 = bitcast %struct.EC_RAW_POINT* %5 to i8*
  %20 = bitcast %struct.EC_RAW_POINT* %6 to i8*
  %21 = bitcast i8** %3 to i8*
  br label %23

22:                                               ; preds = %10
  tail call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 172) #4
  br label %72

23:                                               ; preds = %66, %17
  %24 = phi i64 [ 0, %17 ], [ %67, %66 ]
  %25 = call i8* @OPENSSL_malloc(i64 280) #4
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = call i64 @sk_push(%struct.stack_st* nonnull %12, i8* nonnull %25) #4
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %27, %23
  %31 = bitcast i8* %25 to %struct.pmb_pretoken_st*
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 182) #4
  call void @TRUST_TOKEN_PRETOKEN_free(%struct.pmb_pretoken_st* %31) #4
  br label %72

32:                                               ; preds = %27
  %33 = call i32 @RAND_bytes(i8* nonnull %25, i64 64) #4
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 72, i1 false) #4
  %34 = call i32 @ec_random_nonzero_scalar(%struct.ec_group_st* %11, %union.EC_SCALAR* nonnull %4, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @kDefaultAdditionalData, i64 0, i64 0)) #4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 193) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %72

37:                                               ; preds = %32
  %38 = getelementptr inbounds i8, i8* %25, i64 64
  %39 = bitcast i8* %38 to %union.EC_SCALAR*
  call void @ec_scalar_inv0_montgomery(%struct.ec_group_st* %11, %union.EC_SCALAR* %39, %union.EC_SCALAR* nonnull %4) #4
  call void @ec_scalar_from_montgomery(%struct.ec_group_st* %11, %union.EC_SCALAR* nonnull %4, %union.EC_SCALAR* nonnull %4) #4
  call void @ec_scalar_from_montgomery(%struct.ec_group_st* %11, %union.EC_SCALAR* %39, %union.EC_SCALAR* %39) #4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 216, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 216, i1 false) #4
  %40 = load i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)** @voprf_exp2_method.1, align 8
  %41 = call i32 %40(%struct.ec_group_st* %11, %struct.EC_RAW_POINT* nonnull %5, i8* nonnull %25) #4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %71, label %43

43:                                               ; preds = %37
  %44 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %11, %struct.EC_RAW_POINT* nonnull %6, %struct.EC_RAW_POINT* nonnull %5, %union.EC_SCALAR* nonnull %4) #4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %70, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds i8, i8* %25, i64 136
  %48 = bitcast i8* %47 to %struct.EC_AFFINE*
  %49 = call i32 @ec_jacobian_to_affine(%struct.ec_group_st* %11, %struct.EC_AFFINE* %48, %struct.EC_RAW_POINT* nonnull %6) #4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %69, label %51

51:                                               ; preds = %46
  %52 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %11, %struct.EC_AFFINE* %48, i32 4, i8* null, i64 0) #4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %55 = call i32 @CBB_add_space(%struct.cbb_st* %0, i8** nonnull %3, i64 %52) #4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %54
  %58 = load i8*, i8** %3, align 8
  %59 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %11, %struct.EC_AFFINE* %48, i32 4, i8* %58, i64 %52) #4
  %60 = icmp eq i64 %59, %52
  br i1 %60, label %62, label %61

61:                                               ; preds = %57, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  br label %65

62:                                               ; preds = %57
  %63 = call i32 @CBB_flush(%struct.cbb_st* %0) #4
  %64 = icmp eq i32 %63, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  br i1 %64, label %65, label %66

65:                                               ; preds = %62, %51, %61
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %72

66:                                               ; preds = %62
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  %67 = add nuw i64 %24, 1
  %68 = icmp eq i64 %67, %1
  br i1 %68, label %73, label %23

69:                                               ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %72

70:                                               ; preds = %43
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %72

71:                                               ; preds = %37
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %72

72:                                               ; preds = %71, %70, %69, %65, %36, %30, %22
  call void @sk_pop_free_ex(%struct.stack_st* %12, void (void (i8*)*, i8*)* nonnull @sk_TRUST_TOKEN_PRETOKEN_call_free_func, void (i8*)* bitcast (void (%struct.pmb_pretoken_st*)* @TRUST_TOKEN_PRETOKEN_free to void (i8*)*)) #4
  br label %73

73:                                               ; preds = %66, %72, %15, %9
  %74 = phi %struct.stack_st_TRUST_TOKEN_PRETOKEN* [ null, %9 ], [ null, %72 ], [ %13, %15 ], [ %13, %66 ]
  ret %struct.stack_st_TRUST_TOKEN_PRETOKEN* %74
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @voprf_exp2_sign(%struct.TRUST_TOKEN_ISSUER_KEY*, %struct.cbb_st*, %struct.cbs_st*, i64, i64, i8 zeroext) local_unnamed_addr #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca [4 x %struct.EC_RAW_POINT], align 16
  %12 = alloca %union.EC_SCALAR, align 8
  %13 = alloca [4 x %struct.EC_AFFINE], align 16
  %14 = alloca %union.EC_SCALAR, align 8
  %15 = alloca %union.EC_SCALAR, align 8
  %16 = alloca %union.EC_SCALAR, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca %struct.cbs_st, align 8
  %21 = alloca i8*, align 8
  %22 = alloca %struct.cbb_st, align 8
  %23 = alloca %struct.EC_AFFINE, align 8
  %24 = alloca %struct.EC_AFFINE, align 8
  %25 = alloca %struct.EC_RAW_POINT, align 8
  %26 = alloca %struct.EC_RAW_POINT, align 8
  %27 = alloca %struct.EC_RAW_POINT, align 8
  %28 = alloca %struct.EC_RAW_POINT, align 8
  %29 = alloca %struct.cbb_st, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %30 = load i32, i32* @voprf_exp2_ok, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %6
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %268

33:                                               ; preds = %6
  %34 = icmp eq i8 %5, 0
  br i1 %34, label %35, label %268

35:                                               ; preds = %33
  %36 = bitcast %struct.EC_RAW_POINT* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %36)
  %37 = bitcast %struct.EC_RAW_POINT* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %37)
  %38 = bitcast %struct.cbb_st* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38)
  %39 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %40 = icmp ult i64 %3, %4
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 418) #4
  br label %266

42:                                               ; preds = %35
  %43 = icmp ugt i64 %4, 85401592933840516
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @ERR_put_error(i32 32, i32 0, i32 69, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 424) #4
  br label %266

45:                                               ; preds = %42
  %46 = mul i64 %4, 216
  %47 = tail call i8* @OPENSSL_malloc(i64 %46) #4
  %48 = bitcast i8* %47 to %struct.EC_RAW_POINT*
  %49 = tail call i8* @OPENSSL_malloc(i64 %46) #4
  %50 = bitcast i8* %49 to %struct.EC_RAW_POINT*
  %51 = mul i64 %4, 72
  %52 = tail call i8* @OPENSSL_malloc(i64 %51) #4
  %53 = bitcast i8* %52 to %union.EC_SCALAR*
  %54 = bitcast %struct.cbb_st* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 32, i1 false) #4
  call void @CBB_zero(%struct.cbb_st* nonnull %22) #4
  %55 = icmp ne i8* %47, null
  %56 = icmp ne i8* %49, null
  %57 = and i1 %55, %56
  %58 = icmp ne i8* %52, null
  %59 = and i1 %57, %58
  br i1 %59, label %60, label %93

60:                                               ; preds = %45
  %61 = call i32 @CBB_init(%struct.cbb_st* nonnull %22, i64 0) #4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %93, label %63

63:                                               ; preds = %60
  %64 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %65 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 10
  %66 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %64, %struct.EC_AFFINE* %65, i32 4, i8* null, i64 0) #4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %93, label %68

68:                                               ; preds = %63
  %69 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %21, align 8
  %70 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %22, i8** nonnull %21, i64 %66) #4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %76, label %72

72:                                               ; preds = %68
  %73 = load i8*, i8** %21, align 8
  %74 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %64, %struct.EC_AFFINE* %65, i32 4, i8* %73, i64 %66) #4
  %75 = icmp eq i64 %74, %66
  br i1 %75, label %77, label %76

76:                                               ; preds = %72, %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #4
  br label %93

77:                                               ; preds = %72
  %78 = call i32 @CBB_flush(%struct.cbb_st* nonnull %22) #4
  %79 = icmp eq i32 %78, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #4
  br i1 %79, label %93, label %80

80:                                               ; preds = %77
  %81 = icmp eq i64 %4, 0
  br i1 %81, label %180, label %82

82:                                               ; preds = %80
  %83 = bitcast %struct.EC_AFFINE* %23 to i8*
  %84 = bitcast %struct.EC_AFFINE* %24 to i8*
  %85 = bitcast %struct.EC_RAW_POINT* %25 to i8*
  %86 = bitcast %struct.EC_RAW_POINT* %26 to i8*
  %87 = bitcast %struct.cbs_st* %20 to i8*
  %88 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %39, i64 0, i32 5
  %89 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 4
  %90 = bitcast i8** %19 to i8*
  %91 = bitcast i8** %18 to i8*
  %92 = bitcast i8** %17 to i8*
  br label %96

93:                                               ; preds = %77, %76, %63, %60, %45
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 439) #4
  br label %264

94:                                               ; preds = %168
  %95 = icmp eq i64 %170, %4
  br i1 %95, label %174, label %96

96:                                               ; preds = %94, %82
  %97 = phi i64 [ 0, %82 ], [ %170, %94 ]
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %83) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 -86, i64 144, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %84) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 -86, i64 144, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %85) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %85, i8 -86, i64 216, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %86) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 216, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -86, i64 16, i1 false) #4
  %98 = call i32 @BN_num_bytes(%struct.bignum_st* %88) #4
  %99 = shl i32 %98, 1
  %100 = or i32 %99, 1
  %101 = zext i32 %100 to i64
  %102 = call i32 @CBS_get_bytes(%struct.cbs_st* %2, %struct.cbs_st* nonnull %20, i64 %101) #4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %96
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #4
  br label %110

105:                                              ; preds = %96
  %106 = call i8* @CBS_data(%struct.cbs_st* nonnull %20) #4
  %107 = call i64 @CBS_len(%struct.cbs_st* nonnull %20) #4
  %108 = call i32 @ec_point_from_uncompressed(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %23, i8* %106, i64 %107) #4
  %109 = icmp eq i32 %108, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #4
  br i1 %109, label %110, label %111

110:                                              ; preds = %105, %104
  call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 447) #4
  br label %168

111:                                              ; preds = %105
  call void @ec_affine_to_jacobian(%struct.ec_group_st* %39, %struct.EC_RAW_POINT* nonnull %25, %struct.EC_AFFINE* nonnull %23) #4
  %112 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %39, %struct.EC_RAW_POINT* nonnull %26, %struct.EC_RAW_POINT* nonnull %25, %union.EC_SCALAR* %89) #4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %168, label %114

114:                                              ; preds = %111
  %115 = call i32 @ec_jacobian_to_affine(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %24, %struct.EC_RAW_POINT* nonnull %26) #4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %168, label %117

117:                                              ; preds = %114
  %118 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %24, i32 4, i8* null, i64 0) #4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %168, label %120

120:                                              ; preds = %117
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %121 = call i32 @CBB_add_space(%struct.cbb_st* %1, i8** nonnull %19, i64 %118) #4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %127, label %123

123:                                              ; preds = %120
  %124 = load i8*, i8** %19, align 8
  %125 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %24, i32 4, i8* %124, i64 %118) #4
  %126 = icmp eq i64 %125, %118
  br i1 %126, label %128, label %127

127:                                              ; preds = %123, %120
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #4
  br label %168

128:                                              ; preds = %123
  %129 = call i32 @CBB_flush(%struct.cbb_st* %1) #4
  %130 = icmp eq i32 %129, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #4
  br i1 %130, label %168, label %131

131:                                              ; preds = %128
  %132 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %23, i32 4, i8* null, i64 0) #4
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %159, label %134

134:                                              ; preds = %131
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %135 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %22, i8** nonnull %18, i64 %132) #4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %141, label %137

137:                                              ; preds = %134
  %138 = load i8*, i8** %18, align 8
  %139 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %23, i32 4, i8* %138, i64 %132) #4
  %140 = icmp eq i64 %139, %132
  br i1 %140, label %142, label %141

141:                                              ; preds = %137, %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #4
  br label %159

142:                                              ; preds = %137
  %143 = call i32 @CBB_flush(%struct.cbb_st* nonnull %22) #4
  %144 = icmp eq i32 %143, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #4
  br i1 %144, label %159, label %145

145:                                              ; preds = %142
  %146 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %24, i32 4, i8* null, i64 0) #4
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %159, label %148

148:                                              ; preds = %145
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %149 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %22, i8** nonnull %17, i64 %146) #4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %155, label %151

151:                                              ; preds = %148
  %152 = load i8*, i8** %17, align 8
  %153 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %39, %struct.EC_AFFINE* nonnull %24, i32 4, i8* %152, i64 %146) #4
  %154 = icmp eq i64 %153, %146
  br i1 %154, label %156, label %155

155:                                              ; preds = %151, %148
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #4
  br label %159

156:                                              ; preds = %151
  %157 = call i32 @CBB_flush(%struct.cbb_st* nonnull %22) #4
  %158 = icmp eq i32 %157, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #4
  br i1 %158, label %159, label %160

159:                                              ; preds = %156, %155, %145, %142, %141, %131
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 459) #4
  br label %168

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %48, i64 %97
  %162 = bitcast %struct.EC_RAW_POINT* %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* nonnull align 8 %85, i64 216, i1 false) #4
  %163 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %50, i64 %97
  %164 = bitcast %struct.EC_RAW_POINT* %163 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* nonnull align 8 %86, i64 216, i1 false) #4
  %165 = call i32 @CBB_flush(%struct.cbb_st* %1) #4
  %166 = icmp eq i32 %165, 0
  %167 = select i1 %166, i32 2, i32 0
  br label %168

168:                                              ; preds = %160, %159, %128, %127, %117, %114, %111, %110
  %169 = phi i32 [ 2, %159 ], [ 2, %110 ], [ 2, %128 ], [ 2, %114 ], [ 2, %111 ], [ 2, %127 ], [ 2, %117 ], [ %167, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %86) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %85) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %84) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %83) #4
  %170 = add nuw i64 %97, 1
  %171 = icmp eq i32 %169, 0
  br i1 %171, label %94, label %264

172:                                              ; preds = %174
  %173 = icmp eq i64 %179, %4
  br i1 %173, label %180, label %174

174:                                              ; preds = %94, %172
  %175 = phi i64 [ %179, %172 ], [ 0, %94 ]
  %176 = getelementptr inbounds %union.EC_SCALAR, %union.EC_SCALAR* %53, i64 %175
  %177 = call fastcc i32 @hash_to_scalar_batch(%union.EC_SCALAR* %176, %struct.cbb_st* nonnull %22, i64 %175) #4
  %178 = icmp eq i32 %177, 0
  %179 = add nuw i64 %175, 1
  br i1 %178, label %264, label %172

180:                                              ; preds = %172, %80
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 216, i1 false) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 216, i1 false) #4
  %181 = call i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st* %39, %struct.EC_RAW_POINT* nonnull %27, %union.EC_SCALAR* null, %struct.EC_RAW_POINT* nonnull %48, %union.EC_SCALAR* nonnull %53, i64 %4) #4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %264, label %183

183:                                              ; preds = %180
  %184 = call i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st* %39, %struct.EC_RAW_POINT* nonnull %28, %union.EC_SCALAR* null, %struct.EC_RAW_POINT* nonnull %50, %union.EC_SCALAR* nonnull %53, i64 %4) #4
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %264, label %186

186:                                              ; preds = %183
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 32, i1 false) #4
  %187 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %29) #4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %264, label %189

189:                                              ; preds = %186
  %190 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %191 = bitcast [4 x %struct.EC_RAW_POINT]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %191) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %191, i8 -86, i64 864, i1 false) #4
  %192 = bitcast %union.EC_SCALAR* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %192) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 -86, i64 72, i1 false) #4
  %193 = call i32 @ec_random_nonzero_scalar(%struct.ec_group_st* %190, %union.EC_SCALAR* nonnull %12, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @kDefaultAdditionalData, i64 0, i64 0)) #4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %246, label %195

195:                                              ; preds = %189
  %196 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %11, i64 0, i64 2
  %197 = call i32 @ec_point_mul_scalar_base(%struct.ec_group_st* %190, %struct.EC_RAW_POINT* %196, %union.EC_SCALAR* nonnull %12) #4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %246, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %11, i64 0, i64 3
  %201 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %190, %struct.EC_RAW_POINT* %200, %struct.EC_RAW_POINT* nonnull %27, %union.EC_SCALAR* nonnull %12) #4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %246, label %203

203:                                              ; preds = %199
  %204 = bitcast [4 x %struct.EC_AFFINE]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %204) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %204, i8 -86, i64 576, i1 false) #4
  %205 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %11, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %191, i8* nonnull align 8 %36, i64 216, i1 false) #4
  %206 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %11, i64 0, i64 1
  %207 = bitcast %struct.EC_RAW_POINT* %206 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* nonnull align 8 %37, i64 216, i1 false) #4
  %208 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 0
  %209 = call i32 @ec_jacobian_to_affine_batch(%struct.ec_group_st* %190, %struct.EC_AFFINE* nonnull %208, %struct.EC_RAW_POINT* nonnull %205, i64 4) #4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %247, label %211

211:                                              ; preds = %203
  %212 = bitcast %union.EC_SCALAR* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %212) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %212, i8 -86, i64 72, i1 false) #4
  %213 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 1
  %214 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 2
  %215 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 3
  %216 = call fastcc i32 @hash_to_scalar_dleq(%union.EC_SCALAR* nonnull %14, %struct.EC_AFFINE* %65, %struct.EC_AFFINE* nonnull %208, %struct.EC_AFFINE* %213, %struct.EC_AFFINE* %214, %struct.EC_AFFINE* %215) #4
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %244, label %218

218:                                              ; preds = %211
  %219 = bitcast %union.EC_SCALAR* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %219) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %219, i8 -86, i64 72, i1 false) #4
  call void @ec_scalar_to_montgomery(%struct.ec_group_st* %190, %union.EC_SCALAR* nonnull %15, %union.EC_SCALAR* nonnull %14) #4
  %220 = bitcast %union.EC_SCALAR* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %220) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 -86, i64 72, i1 false) #4
  %221 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 4
  call void @ec_scalar_mul_montgomery(%struct.ec_group_st* %190, %union.EC_SCALAR* nonnull %16, %union.EC_SCALAR* %221, %union.EC_SCALAR* nonnull %15) #4
  call void @ec_scalar_add(%struct.ec_group_st* %190, %union.EC_SCALAR* nonnull %16, %union.EC_SCALAR* nonnull %12, %union.EC_SCALAR* nonnull %16) #4
  %222 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %222) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %223 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %223) #4
  %224 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %190, i64 0, i32 2
  %225 = call i32 @BN_num_bytes(%struct.bignum_st* %224) #4
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %10, align 8
  %227 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %29, i8** nonnull %9, i64 %226) #4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %239, label %229

229:                                              ; preds = %218
  %230 = load i8*, i8** %9, align 8
  call void @ec_scalar_to_bytes(%struct.ec_group_st* %190, i8* %230, i64* nonnull %10, %union.EC_SCALAR* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %223) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %222) #4
  %231 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %231) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %232 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %232) #4
  %233 = call i32 @BN_num_bytes(%struct.bignum_st* %224) #4
  %234 = zext i32 %233 to i64
  store i64 %234, i64* %8, align 8
  %235 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %29, i8** nonnull %7, i64 %234) #4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %239, label %237

237:                                              ; preds = %229
  %238 = load i8*, i8** %7, align 8
  call void @ec_scalar_to_bytes(%struct.ec_group_st* %190, i8* %238, i64* nonnull %8, %union.EC_SCALAR* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %232) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %231) #4
  br label %242

239:                                              ; preds = %229, %218
  %240 = phi i8* [ %223, %218 ], [ %232, %229 ]
  %241 = phi i8* [ %222, %218 ], [ %231, %229 ]
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 94) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %241) #4
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 338) #4
  br label %242

242:                                              ; preds = %239, %237
  %243 = phi i32 [ 0, %239 ], [ 1, %237 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %220) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %219) #4
  br label %244

244:                                              ; preds = %242, %211
  %245 = phi i32 [ %243, %242 ], [ 0, %211 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %212) #4
  br label %247

246:                                              ; preds = %199, %195, %189
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %192) #4
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %191) #4
  br label %264

247:                                              ; preds = %244, %203
  %248 = phi i32 [ %245, %244 ], [ 0, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %204) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %192) #4
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %191) #4
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %264, label %250

250:                                              ; preds = %247
  %251 = call i32 @CBB_flush(%struct.cbb_st* %1) #4
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %264, label %253

253:                                              ; preds = %250
  %254 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %39, i64 0, i32 5
  %255 = call i32 @BN_num_bytes(%struct.bignum_st* %254) #4
  %256 = shl i32 %255, 1
  %257 = or i32 %256, 1
  %258 = zext i32 %257 to i64
  %259 = sub i64 %3, %4
  %260 = mul i64 %259, %258
  %261 = call i32 @CBS_skip(%struct.cbs_st* %2, i64 %260) #4
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %264

263:                                              ; preds = %253
  call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 499) #4
  br label %264

264:                                              ; preds = %168, %174, %263, %253, %250, %247, %246, %186, %183, %180, %93
  %265 = phi i32 [ 0, %263 ], [ 0, %250 ], [ 0, %247 ], [ 0, %186 ], [ 0, %183 ], [ 0, %180 ], [ 0, %93 ], [ 1, %253 ], [ 0, %246 ], [ 0, %174 ], [ 0, %168 ]
  call void @OPENSSL_free(i8* %47) #4
  call void @OPENSSL_free(i8* %49) #4
  call void @OPENSSL_free(i8* %52) #4
  call void @CBB_cleanup(%struct.cbb_st* nonnull %22) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #4
  br label %266

266:                                              ; preds = %41, %44, %264
  %267 = phi i32 [ 0, %41 ], [ 0, %44 ], [ %265, %264 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %37)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38)
  br label %268

268:                                              ; preds = %32, %33, %266
  %269 = phi i32 [ %267, %266 ], [ 0, %33 ], [ 0, %32 ]
  ret i32 %269
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_TRUST_TOKEN* @voprf_exp2_unblind(%struct.TRUST_TOKEN_CLIENT_KEY*, %struct.stack_st_TRUST_TOKEN_PRETOKEN*, %struct.cbs_st*, i64, i32) local_unnamed_addr #0 {
  %6 = alloca [2 x %struct.EC_RAW_POINT], align 16
  %7 = alloca [2 x %union.EC_SCALAR], align 16
  %8 = alloca [4 x %struct.EC_RAW_POINT], align 16
  %9 = alloca %union.EC_SCALAR, align 8
  %10 = alloca %union.EC_SCALAR, align 8
  %11 = alloca %struct.EC_RAW_POINT, align 8
  %12 = alloca %union.EC_SCALAR, align 8
  %13 = alloca [4 x %struct.EC_AFFINE], align 16
  %14 = alloca %union.EC_SCALAR, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.cbs_st, align 8
  %19 = alloca i8*, align 8
  %20 = alloca %struct.cbb_st, align 8
  %21 = alloca %struct.EC_AFFINE, align 8
  %22 = alloca %struct.EC_RAW_POINT, align 8
  %23 = alloca %struct.EC_AFFINE, align 8
  %24 = alloca %struct.cbb_st, align 8
  %25 = alloca %struct.EC_RAW_POINT, align 8
  %26 = alloca %struct.EC_RAW_POINT, align 8
  %27 = alloca %struct.cbs_st, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %28 = load i32, i32* @voprf_exp2_ok, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %5
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %289

31:                                               ; preds = %5
  %32 = bitcast %struct.EC_RAW_POINT* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %32)
  %33 = bitcast %struct.EC_RAW_POINT* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %33)
  %34 = bitcast %struct.cbs_st* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34)
  %35 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %36 = bitcast %struct.stack_st_TRUST_TOKEN_PRETOKEN* %1 to %struct.stack_st*
  %37 = tail call i64 @sk_num(%struct.stack_st* %36) #4
  %38 = icmp ult i64 %37, %3
  br i1 %38, label %39, label %40

39:                                               ; preds = %31
  tail call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 519) #4
  br label %287

40:                                               ; preds = %31
  %41 = tail call %struct.stack_st* @sk_new_null() #4
  %42 = bitcast %struct.stack_st* %41 to %struct.stack_st_TRUST_TOKEN*
  %43 = icmp eq %struct.stack_st* %41, null
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  tail call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 526) #4
  br label %287

45:                                               ; preds = %40
  %46 = icmp ugt i64 %3, 85401592933840516
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @ERR_put_error(i32 32, i32 0, i32 69, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 532) #4
  br label %287

48:                                               ; preds = %45
  %49 = mul i64 %3, 216
  %50 = tail call i8* @OPENSSL_malloc(i64 %49) #4
  %51 = bitcast i8* %50 to %struct.EC_RAW_POINT*
  %52 = tail call i8* @OPENSSL_malloc(i64 %49) #4
  %53 = bitcast i8* %52 to %struct.EC_RAW_POINT*
  %54 = mul i64 %3, 72
  %55 = tail call i8* @OPENSSL_malloc(i64 %54) #4
  %56 = bitcast i8* %55 to %union.EC_SCALAR*
  %57 = bitcast %struct.cbb_st* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %57) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 32, i1 false) #4
  call void @CBB_zero(%struct.cbb_st* nonnull %20) #4
  %58 = icmp ne i8* %50, null
  %59 = icmp ne i8* %52, null
  %60 = and i1 %58, %59
  %61 = icmp ne i8* %55, null
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %95

63:                                               ; preds = %48
  %64 = call i32 @CBB_init(%struct.cbb_st* nonnull %20, i64 0) #4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %95, label %66

66:                                               ; preds = %63
  %67 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %68 = getelementptr inbounds %struct.TRUST_TOKEN_CLIENT_KEY, %struct.TRUST_TOKEN_CLIENT_KEY* %0, i64 0, i32 2
  %69 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %67, %struct.EC_AFFINE* %68, i32 4, i8* null, i64 0) #4
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %95, label %71

71:                                               ; preds = %66
  %72 = bitcast i8** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %73 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %20, i8** nonnull %19, i64 %69) #4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = load i8*, i8** %19, align 8
  %77 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %67, %struct.EC_AFFINE* %68, i32 4, i8* %76, i64 %69) #4
  %78 = icmp eq i64 %77, %69
  br i1 %78, label %80, label %79

79:                                               ; preds = %75, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #4
  br label %95

80:                                               ; preds = %75
  %81 = call i32 @CBB_flush(%struct.cbb_st* nonnull %20) #4
  %82 = icmp eq i32 %81, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #4
  br i1 %82, label %95, label %83

83:                                               ; preds = %80
  %84 = icmp eq i64 %3, 0
  br i1 %84, label %208, label %85

85:                                               ; preds = %83
  %86 = bitcast %struct.EC_AFFINE* %21 to i8*
  %87 = bitcast %struct.cbs_st* %18 to i8*
  %88 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %35, i64 0, i32 5
  %89 = bitcast i8** %17 to i8*
  %90 = bitcast i8** %16 to i8*
  %91 = bitcast %struct.EC_RAW_POINT* %22 to i8*
  %92 = bitcast %struct.EC_AFFINE* %23 to i8*
  %93 = bitcast %struct.cbb_st* %24 to i8*
  %94 = bitcast i8** %15 to i8*
  br label %99

95:                                               ; preds = %80, %79, %66, %63, %48
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 545) #4
  call void @OPENSSL_free(i8* %50) #4
  call void @OPENSSL_free(i8* %52) #4
  call void @OPENSSL_free(i8* %55) #4
  br label %283

96:                                               ; preds = %193
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %93) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %92) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %91) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %86) #4
  %97 = add nuw i64 %100, 1
  %98 = icmp eq i64 %97, %3
  br i1 %98, label %202, label %99

99:                                               ; preds = %96, %85
  %100 = phi i64 [ 0, %85 ], [ %97, %96 ]
  %101 = call i8* @sk_value(%struct.stack_st* %36, i64 %100) #4
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %86) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 144, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -86, i64 16, i1 false) #4
  %102 = call i32 @BN_num_bytes(%struct.bignum_st* %88) #4
  %103 = shl i32 %102, 1
  %104 = or i32 %103, 1
  %105 = zext i32 %104 to i64
  %106 = call i32 @CBS_get_bytes(%struct.cbs_st* %2, %struct.cbs_st* nonnull %18, i64 %105) #4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %99
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #4
  br label %114

109:                                              ; preds = %99
  %110 = call i8* @CBS_data(%struct.cbs_st* nonnull %18) #4
  %111 = call i64 @CBS_len(%struct.cbs_st* nonnull %18) #4
  %112 = call i32 @ec_point_from_uncompressed(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %21, i8* %110, i64 %111) #4
  %113 = icmp eq i32 %112, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #4
  br i1 %113, label %114, label %115

114:                                              ; preds = %109, %108
  call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 555) #4
  br label %277

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %51, i64 %100
  %117 = getelementptr inbounds i8, i8* %101, i64 136
  %118 = bitcast i8* %117 to %struct.EC_AFFINE*
  call void @ec_affine_to_jacobian(%struct.ec_group_st* %35, %struct.EC_RAW_POINT* %116, %struct.EC_AFFINE* %118) #4
  %119 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %53, i64 %100
  call void @ec_affine_to_jacobian(%struct.ec_group_st* %35, %struct.EC_RAW_POINT* %119, %struct.EC_AFFINE* nonnull %21) #4
  %120 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* %118, i32 4, i8* null, i64 0) #4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %147, label %122

122:                                              ; preds = %115
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %123 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %20, i8** nonnull %17, i64 %120) #4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %122
  %126 = load i8*, i8** %17, align 8
  %127 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* %118, i32 4, i8* %126, i64 %120) #4
  %128 = icmp eq i64 %127, %120
  br i1 %128, label %130, label %129

129:                                              ; preds = %125, %122
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #4
  br label %147

130:                                              ; preds = %125
  %131 = call i32 @CBB_flush(%struct.cbb_st* nonnull %20) #4
  %132 = icmp eq i32 %131, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #4
  br i1 %132, label %147, label %133

133:                                              ; preds = %130
  %134 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %21, i32 4, i8* null, i64 0) #4
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %147, label %136

136:                                              ; preds = %133
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %16, align 8
  %137 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %20, i8** nonnull %16, i64 %134) #4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %143, label %139

139:                                              ; preds = %136
  %140 = load i8*, i8** %16, align 8
  %141 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %21, i32 4, i8* %140, i64 %134) #4
  %142 = icmp eq i64 %141, %134
  br i1 %142, label %144, label %143

143:                                              ; preds = %139, %136
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #4
  br label %147

144:                                              ; preds = %139
  %145 = call i32 @CBB_flush(%struct.cbb_st* nonnull %20) #4
  %146 = icmp eq i32 %145, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #4
  br i1 %146, label %147, label %148

147:                                              ; preds = %144, %133, %130, %115, %143, %129
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 564) #4
  br label %277

148:                                              ; preds = %144
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %91) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 -86, i64 216, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %92) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 144, i1 false) #4
  %149 = getelementptr inbounds i8, i8* %101, i64 64
  %150 = bitcast i8* %149 to %union.EC_SCALAR*
  %151 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %35, %struct.EC_RAW_POINT* nonnull %22, %struct.EC_RAW_POINT* %119, %union.EC_SCALAR* %150) #4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %198, label %153

153:                                              ; preds = %148
  %154 = call i32 @ec_jacobian_to_affine(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %23, %struct.EC_RAW_POINT* nonnull %22) #4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %198, label %156

156:                                              ; preds = %153
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %93) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 32, i1 false) #4
  %157 = call i32 @BN_num_bytes(%struct.bignum_st* %88) #4
  %158 = shl i32 %157, 1
  %159 = or i32 %158, 1
  %160 = zext i32 %159 to i64
  %161 = add nuw nsw i64 %160, 70
  %162 = call i32 @CBB_init(%struct.cbb_st* nonnull %24, i64 %161) #4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %187, label %164

164:                                              ; preds = %156
  %165 = call i32 @CBB_add_u32(%struct.cbb_st* nonnull %24, i32 %4) #4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %187, label %167

167:                                              ; preds = %164
  %168 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %24, i8* %101, i64 64) #4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %187, label %170

170:                                              ; preds = %167
  %171 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %23, i32 4, i8* null, i64 0) #4
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %187, label %173

173:                                              ; preds = %170
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %174 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %24, i8** nonnull %15, i64 %171) #4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %180, label %176

176:                                              ; preds = %173
  %177 = load i8*, i8** %15, align 8
  %178 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %35, %struct.EC_AFFINE* nonnull %23, i32 4, i8* %177, i64 %171) #4
  %179 = icmp eq i64 %178, %171
  br i1 %179, label %181, label %180

180:                                              ; preds = %176, %173
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #4
  br label %187

181:                                              ; preds = %176
  %182 = call i32 @CBB_flush(%struct.cbb_st* nonnull %24) #4
  %183 = icmp eq i32 %182, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #4
  br i1 %183, label %187, label %184

184:                                              ; preds = %181
  %185 = call i32 @CBB_flush(%struct.cbb_st* nonnull %24) #4
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %184, %181, %170, %167, %164, %156, %180
  call void @CBB_cleanup(%struct.cbb_st* nonnull %24) #4
  br label %199

188:                                              ; preds = %184
  %189 = call i8* @CBB_data(%struct.cbb_st* nonnull %24) #4
  %190 = call i64 @CBB_len(%struct.cbb_st* nonnull %24) #4
  %191 = call %struct.trust_token_st* @TRUST_TOKEN_new(i8* %189, i64 %190) #4
  call void @CBB_cleanup(%struct.cbb_st* nonnull %24) #4
  %192 = icmp eq %struct.trust_token_st* %191, null
  br i1 %192, label %197, label %193

193:                                              ; preds = %188
  %194 = bitcast %struct.trust_token_st* %191 to i8*
  %195 = call i64 @sk_push(%struct.stack_st* nonnull %41, i8* nonnull %194) #4
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %96

197:                                              ; preds = %193, %188
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 595) #4
  call void @TRUST_TOKEN_free(%struct.trust_token_st* %191) #4
  br label %199

198:                                              ; preds = %153, %148
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %92) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %91) #4
  br label %277

199:                                              ; preds = %187, %197
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %93) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %92) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %91) #4
  br label %277

200:                                              ; preds = %202
  %201 = icmp eq i64 %207, %3
  br i1 %201, label %208, label %202

202:                                              ; preds = %96, %200
  %203 = phi i64 [ %207, %200 ], [ 0, %96 ]
  %204 = getelementptr inbounds %union.EC_SCALAR, %union.EC_SCALAR* %56, i64 %203
  %205 = call fastcc i32 @hash_to_scalar_batch(%union.EC_SCALAR* %204, %struct.cbb_st* nonnull %20, i64 %203) #4
  %206 = icmp eq i32 %205, 0
  %207 = add nuw i64 %203, 1
  br i1 %206, label %278, label %200

208:                                              ; preds = %200, %83
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 216, i1 false) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 216, i1 false) #4
  %209 = call i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st* %35, %struct.EC_RAW_POINT* nonnull %25, %union.EC_SCALAR* null, %struct.EC_RAW_POINT* nonnull %51, %union.EC_SCALAR* nonnull %56, i64 %3) #4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %282, label %211

211:                                              ; preds = %208
  %212 = call i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st* %35, %struct.EC_RAW_POINT* nonnull %26, %union.EC_SCALAR* null, %struct.EC_RAW_POINT* nonnull %53, %union.EC_SCALAR* nonnull %56, i64 %3) #4
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %281, label %214

214:                                              ; preds = %211
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 16, i1 false) #4
  %215 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* %2, %struct.cbs_st* nonnull %27) #4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %280, label %217

217:                                              ; preds = %214
  %218 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %219 = bitcast [4 x %struct.EC_RAW_POINT]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %219) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %219, i8 -86, i64 864, i1 false) #4
  %220 = bitcast %union.EC_SCALAR* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %220) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 -86, i64 72, i1 false) #4
  %221 = bitcast %union.EC_SCALAR* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %221) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %221, i8 -86, i64 72, i1 false) #4
  %222 = call fastcc i32 @scalar_from_cbs(%struct.cbs_st* nonnull %27, %struct.ec_group_st* %218, %union.EC_SCALAR* nonnull %9) #4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %227, label %224

224:                                              ; preds = %217
  %225 = call fastcc i32 @scalar_from_cbs(%struct.cbs_st* nonnull %27, %struct.ec_group_st* %218, %union.EC_SCALAR* nonnull %10) #4
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224, %217
  call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 373) #4
  br label %271

228:                                              ; preds = %224
  %229 = bitcast %struct.EC_RAW_POINT* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %229) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 -86, i64 216, i1 false) #4
  call void @ec_affine_to_jacobian(%struct.ec_group_st* %218, %struct.EC_RAW_POINT* nonnull %11, %struct.EC_AFFINE* %68) #4
  %230 = bitcast %union.EC_SCALAR* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %230) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 -86, i64 72, i1 false) #4
  call void @ec_scalar_neg(%struct.ec_group_st* %218, %union.EC_SCALAR* nonnull %12, %union.EC_SCALAR* nonnull %9) #4
  %231 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %8, i64 0, i64 2
  %232 = call i32 @ec_point_mul_scalar_public(%struct.ec_group_st* %218, %struct.EC_RAW_POINT* %231, %union.EC_SCALAR* nonnull %10, %struct.EC_RAW_POINT* nonnull %11, %union.EC_SCALAR* nonnull %12) #4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %269, label %234

234:                                              ; preds = %228
  %235 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %8, i64 0, i64 3
  %236 = bitcast [2 x %struct.EC_RAW_POINT]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %236) #4
  %237 = getelementptr inbounds [2 x %struct.EC_RAW_POINT], [2 x %struct.EC_RAW_POINT]* %6, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %236, i8* nonnull align 8 %32, i64 216, i1 false) #4
  %238 = getelementptr inbounds [2 x %struct.EC_RAW_POINT], [2 x %struct.EC_RAW_POINT]* %6, i64 0, i64 1
  %239 = bitcast %struct.EC_RAW_POINT* %238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* nonnull align 8 %33, i64 216, i1 false) #4
  %240 = bitcast [2 x %union.EC_SCALAR]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %240) #4
  %241 = getelementptr inbounds [2 x %union.EC_SCALAR], [2 x %union.EC_SCALAR]* %7, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %240, i8* nonnull align 8 %221, i64 72, i1 false) #4
  %242 = getelementptr inbounds [2 x %union.EC_SCALAR], [2 x %union.EC_SCALAR]* %7, i64 0, i64 1
  %243 = bitcast %union.EC_SCALAR* %242 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* nonnull align 8 %230, i64 72, i1 false) #4
  %244 = call i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st* %218, %struct.EC_RAW_POINT* %235, %union.EC_SCALAR* null, %struct.EC_RAW_POINT* nonnull %237, %union.EC_SCALAR* nonnull %241, i64 2) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %240) #4
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %236) #4
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %269, label %246

246:                                              ; preds = %234
  %247 = bitcast [4 x %struct.EC_AFFINE]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %247) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %247, i8 -86, i64 576, i1 false) #4
  %248 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %8, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %219, i8* nonnull align 8 %32, i64 216, i1 false) #4
  %249 = getelementptr inbounds [4 x %struct.EC_RAW_POINT], [4 x %struct.EC_RAW_POINT]* %8, i64 0, i64 1
  %250 = bitcast %struct.EC_RAW_POINT* %249 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %250, i8* nonnull align 8 %33, i64 216, i1 false) #4
  %251 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 0
  %252 = call i32 @ec_jacobian_to_affine_batch(%struct.ec_group_st* %218, %struct.EC_AFFINE* nonnull %251, %struct.EC_RAW_POINT* nonnull %248, i64 4) #4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %267, label %254

254:                                              ; preds = %246
  %255 = bitcast %union.EC_SCALAR* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %255) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %255, i8 -86, i64 72, i1 false) #4
  %256 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 1
  %257 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 2
  %258 = getelementptr inbounds [4 x %struct.EC_AFFINE], [4 x %struct.EC_AFFINE]* %13, i64 0, i64 3
  %259 = call fastcc i32 @hash_to_scalar_dleq(%union.EC_SCALAR* nonnull %14, %struct.EC_AFFINE* %68, %struct.EC_AFFINE* nonnull %251, %struct.EC_AFFINE* %256, %struct.EC_AFFINE* %257, %struct.EC_AFFINE* %258) #4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %265, label %261

261:                                              ; preds = %254
  %262 = call i32 @ec_scalar_equal_vartime(%struct.ec_group_st* %218, %union.EC_SCALAR* nonnull %9, %union.EC_SCALAR* nonnull %14) #4
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %265

264:                                              ; preds = %261
  call void @ERR_put_error(i32 32, i32 0, i32 114, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 406) #4
  br label %265

265:                                              ; preds = %264, %261, %254
  %266 = phi i32 [ 0, %264 ], [ 0, %254 ], [ 1, %261 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %255) #4
  br label %267

267:                                              ; preds = %265, %246
  %268 = phi i32 [ %266, %265 ], [ 0, %246 ]
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %247) #4
  br label %269

269:                                              ; preds = %267, %234, %228
  %270 = phi i32 [ %268, %267 ], [ 0, %234 ], [ 0, %228 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %230) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %229) #4
  br label %271

271:                                              ; preds = %269, %227
  %272 = phi i32 [ %270, %269 ], [ 0, %227 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %221) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %220) #4
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %219) #4
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %279, label %274

274:                                              ; preds = %271
  %275 = call i64 @CBS_len(%struct.cbs_st* nonnull %27) #4
  %276 = icmp eq i64 %275, 0
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  call void @CBB_cleanup(%struct.cbb_st* nonnull %20) #4
  br i1 %276, label %285, label %284

277:                                              ; preds = %114, %147, %198, %199
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %86) #4
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

278:                                              ; preds = %202
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

279:                                              ; preds = %271
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

280:                                              ; preds = %214
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

281:                                              ; preds = %211
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

282:                                              ; preds = %208
  call void @OPENSSL_free(i8* nonnull %50) #4
  call void @OPENSSL_free(i8* nonnull %52) #4
  call void @OPENSSL_free(i8* nonnull %55) #4
  br label %283

283:                                              ; preds = %95, %277, %278, %279, %280, %281, %282
  call void @CBB_cleanup(%struct.cbb_st* nonnull %20) #4
  br label %284

284:                                              ; preds = %283, %274
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %41, void (void (i8*)*, i8*)* nonnull @sk_TRUST_TOKEN_call_free_func, void (i8*)* bitcast (void (%struct.trust_token_st*)* @TRUST_TOKEN_free to void (i8*)*)) #4
  br label %285

285:                                              ; preds = %284, %274
  %286 = phi %struct.stack_st_TRUST_TOKEN* [ %42, %274 ], [ null, %284 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %57) #4
  br label %287

287:                                              ; preds = %39, %44, %47, %285
  %288 = phi %struct.stack_st_TRUST_TOKEN* [ null, %39 ], [ null, %44 ], [ null, %47 ], [ %286, %285 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %32)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %33)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34)
  br label %289

289:                                              ; preds = %30, %287
  %290 = phi %struct.stack_st_TRUST_TOKEN* [ %288, %287 ], [ null, %30 ]
  ret %struct.stack_st_TRUST_TOKEN* %290
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @voprf_exp2_read(%struct.TRUST_TOKEN_ISSUER_KEY*, i8*, i8* nocapture readnone, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %struct.cbs_st, align 8
  %7 = alloca %struct.cbs_st, align 8
  %8 = alloca %struct.EC_AFFINE, align 8
  %9 = alloca %struct.EC_RAW_POINT, align 8
  %10 = alloca %struct.EC_RAW_POINT, align 8
  tail call void @CRYPTO_once(i32* nonnull @voprf_exp2_method_once, void ()* nonnull @voprf_exp2_init_method_impl) #4
  %11 = load i32, i32* @voprf_exp2_ok, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %5
  tail call void @ERR_put_error(i32 32, i32 0, i32 68, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 700) #4
  br label %59

14:                                               ; preds = %5
  %15 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %16 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false) #4
  call void @CBS_init(%struct.cbs_st* nonnull %7, i8* %3, i64 %4) #4
  %17 = bitcast %struct.EC_AFFINE* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 144, i1 false) #4
  %18 = call i32 @CBS_copy_bytes(%struct.cbs_st* nonnull %7, i8* %1, i64 64) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %38, label %20

20:                                               ; preds = %14
  %21 = bitcast %struct.cbs_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #4
  %22 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %15, i64 0, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 16, i1 false) #4
  %23 = call i32 @BN_num_bytes(%struct.bignum_st* %22) #4
  %24 = shl i32 %23, 1
  %25 = or i32 %24, 1
  %26 = zext i32 %25 to i64
  %27 = call i32 @CBS_get_bytes(%struct.cbs_st* nonnull %7, %struct.cbs_st* nonnull %6, i64 %26) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #4
  br label %38

30:                                               ; preds = %20
  %31 = call i8* @CBS_data(%struct.cbs_st* nonnull %6) #4
  %32 = call i64 @CBS_len(%struct.cbs_st* nonnull %6) #4
  %33 = call i32 @ec_point_from_uncompressed(%struct.ec_group_st* %15, %struct.EC_AFFINE* nonnull %8, i8* %31, i64 %32) #4
  %34 = icmp eq i32 %33, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #4
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  %36 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %35, %30, %29, %14
  call void @ERR_put_error(i32 32, i32 0, i32 110, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 650) #4
  br label %57

39:                                               ; preds = %35
  %40 = bitcast %struct.EC_RAW_POINT* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %40) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 216, i1 false) #4
  %41 = load i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)** @voprf_exp2_method.1, align 8
  %42 = call i32 %41(%struct.ec_group_st* %15, %struct.EC_RAW_POINT* nonnull %9, i8* %1) #4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %39
  %45 = bitcast %struct.EC_RAW_POINT* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %45) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 216, i1 false) #4
  %46 = getelementptr inbounds %struct.TRUST_TOKEN_ISSUER_KEY, %struct.TRUST_TOKEN_ISSUER_KEY* %0, i64 0, i32 4
  %47 = call i32 @ec_point_mul_scalar(%struct.ec_group_st* %15, %struct.EC_RAW_POINT* nonnull %10, %struct.EC_RAW_POINT* nonnull %9, %union.EC_SCALAR* %46) #4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %44
  %50 = call i32 @ec_affine_jacobian_equal(%struct.ec_group_st* %15, %struct.EC_AFFINE* nonnull %8, %struct.EC_RAW_POINT* nonnull %10) #4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49, %44
  call void @ERR_put_error(i32 32, i32 0, i32 111, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 663) #4
  br label %53

53:                                               ; preds = %52, %49
  %54 = phi i32 [ 0, %52 ], [ 1, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %45) #4
  br label %55

55:                                               ; preds = %53, %39
  %56 = phi i32 [ %54, %53 ], [ 0, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %40) #4
  br label %57

57:                                               ; preds = %38, %55
  %58 = phi i32 [ 0, %38 ], [ %56, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #4
  br label %59

59:                                               ; preds = %13, %57
  %60 = phi i32 [ %58, %57 ], [ 0, %13 ]
  ret i32 %60
}

declare void @CRYPTO_once(i32*, void ()*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @voprf_exp2_init_method_impl() #0 {
  %1 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 715) #4
  store %struct.ec_group_st* %1, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %2 = icmp eq %struct.ec_group_st* %1, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %0
  store i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)* @voprf_exp2_hash_to_group, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*)** @voprf_exp2_method.1, align 8
  store i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)* @voprf_exp2_hash_to_scalar, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)** @voprf_exp2_method.2, align 8
  br label %4

4:                                                ; preds = %0, %3
  %5 = phi i32 [ 1, %3 ], [ 0, %0 ]
  store i32 %5, i32* @voprf_exp2_ok, align 4
  ret void
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @voprf_exp2_hash_to_group(%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*) #0 {
  %4 = tail call i32 @ec_hash_to_curve_p384_xmd_sha512_sswu_draft07(%struct.ec_group_st* %0, %struct.EC_RAW_POINT* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @voprf_exp2_hash_to_group.kHashTLabel, i64 0, i64 0), i64 43, i8* %2, i64 64) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @voprf_exp2_hash_to_scalar(%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64) #0 {
  %5 = tail call i32 @ec_hash_to_scalar_p384_xmd_sha512_draft07(%struct.ec_group_st* %0, %union.EC_SCALAR* %1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @voprf_exp2_hash_to_scalar.kHashCLabel, i64 0, i64 0), i64 44, i8* %2, i64 %3) #4
  ret i32 %5
}

declare %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32) local_unnamed_addr #1

declare i32 @ec_hash_to_curve_p384_xmd_sha512_sswu_draft07(%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*, i64, i8*, i64) local_unnamed_addr #1

declare i32 @ec_hash_to_scalar_p384_xmd_sha512_draft07(%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @ec_random_nonzero_scalar(%struct.ec_group_st*, %union.EC_SCALAR*, i8*) local_unnamed_addr #1

declare i32 @ec_point_mul_scalar_base(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @ec_jacobian_to_affine(%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @BN_num_bytes(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @CBB_add_space(%struct.cbb_st*, i8**, i64) local_unnamed_addr #1

declare void @ec_scalar_to_bytes(%struct.ec_group_st*, i8*, i64*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i64 @ec_point_to_bytes(%struct.ec_group_st*, %struct.EC_AFFINE*, i32, i8*, i64) local_unnamed_addr #1

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #1

declare i32 @ec_point_from_uncompressed(%struct.ec_group_st*, %struct.EC_AFFINE*, i8*, i64) local_unnamed_addr #1

declare i32 @ec_scalar_from_bytes(%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @TRUST_TOKEN_PRETOKEN_free(%struct.pmb_pretoken_st*) #1

declare i32 @RAND_bytes(i8*, i64) local_unnamed_addr #1

declare void @ec_scalar_inv0_montgomery(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare void @ec_scalar_from_montgomery(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @ec_point_mul_scalar(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_TRUST_TOKEN_PRETOKEN_call_free_func(void (i8*)* nocapture, i8*) #3 {
  %3 = bitcast void (i8*)* %0 to void (%struct.pmb_pretoken_st*)*
  %4 = bitcast i8* %1 to %struct.pmb_pretoken_st*
  tail call void %3(%struct.pmb_pretoken_st* %4) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #1

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #1

declare void @ec_affine_to_jacobian(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_AFFINE*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @hash_to_scalar_batch(%union.EC_SCALAR*, %struct.cbb_st*, i64) unnamed_addr #0 {
  %4 = alloca %struct.cbb_st, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %2, 65535
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  tail call void @ERR_put_error(i32 32, i32 0, i32 69, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 260) #4
  br label %41

9:                                                ; preds = %3
  %10 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  call void @CBB_zero(%struct.cbb_st* nonnull %4) #4
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #4
  store i8* null, i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #4
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = call i32 @CBB_init(%struct.cbb_st* nonnull %4, i64 0) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %37, label %15

15:                                               ; preds = %9
  %16 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @hash_to_scalar_batch.kDLEQBatchLabel, i64 0, i64 0), i64 11) #4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %37, label %18

18:                                               ; preds = %15
  %19 = call i8* @CBB_data(%struct.cbb_st* %1) #4
  %20 = call i64 @CBB_len(%struct.cbb_st* %1) #4
  %21 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %4, i8* %19, i64 %20) #4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %18
  %24 = trunc i64 %2 to i16
  %25 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %4, i16 zeroext %24) #4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %23
  %28 = call i32 @CBB_finish(%struct.cbb_st* nonnull %4, i8** nonnull %5, i64* nonnull %6) #4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %27
  %31 = load i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)** @voprf_exp2_method.2, align 8
  %32 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %33 = load i8*, i8** %5, align 8
  %34 = load i64, i64* %6, align 8
  %35 = call i32 %31(%struct.ec_group_st* %32, %union.EC_SCALAR* %0, i8* %33, i64 %34) #4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %30, %27, %23, %18, %15, %9
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 275) #4
  br label %38

38:                                               ; preds = %30, %37
  %39 = phi i32 [ 0, %37 ], [ 1, %30 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %4) #4
  %40 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %40) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #4
  br label %41

41:                                               ; preds = %38, %8
  %42 = phi i32 [ 0, %8 ], [ %39, %38 ]
  ret i32 %42
}

declare i32 @ec_point_mul_scalar_public_batch(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64) local_unnamed_addr #1

declare i32 @CBB_add_u16_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #1

declare i32 @CBS_skip(%struct.cbs_st*, i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #1

declare i32 @CBS_get_bytes(%struct.cbs_st*, %struct.cbs_st*, i64) local_unnamed_addr #1

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #1

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #1

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #1

declare i8* @CBB_data(%struct.cbb_st*) local_unnamed_addr #1

declare i64 @CBB_len(%struct.cbb_st*) local_unnamed_addr #1

declare i32 @CBB_add_u16(%struct.cbb_st*, i16 zeroext) local_unnamed_addr #1

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #1

declare i32 @ec_jacobian_to_affine_batch(%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @hash_to_scalar_dleq(%union.EC_SCALAR*, %struct.EC_AFFINE*, %struct.EC_AFFINE*, %struct.EC_AFFINE*, %struct.EC_AFFINE*, %struct.EC_AFFINE*) unnamed_addr #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %struct.cbb_st, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = bitcast %struct.cbb_st* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 32, i1 false)
  call void @CBB_zero(%struct.cbb_st* nonnull %12) #4
  %16 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  store i8* null, i8** %13, align 8
  %17 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #4
  store i64 -6148914691236517206, i64* %14, align 8
  %18 = call i32 @CBB_init(%struct.cbb_st* nonnull %12, i64 0) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %113, label %20

20:                                               ; preds = %6
  %21 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @hash_to_scalar_dleq.kDLEQLabel, i64 0, i64 0), i64 5) #4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %113, label %23

23:                                               ; preds = %20
  %24 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %25 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %24, %struct.EC_AFFINE* %1, i32 4, i8* null, i64 0) #4
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %113, label %27

27:                                               ; preds = %23
  %28 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %11, align 8
  %29 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %12, i8** nonnull %11, i64 %25) #4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = load i8*, i8** %11, align 8
  %33 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %24, %struct.EC_AFFINE* %1, i32 4, i8* %32, i64 %25) #4
  %34 = icmp eq i64 %33, %25
  br i1 %34, label %36, label %35

35:                                               ; preds = %31, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  br label %113

36:                                               ; preds = %31
  %37 = call i32 @CBB_flush(%struct.cbb_st* nonnull %12) #4
  %38 = icmp eq i32 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  br i1 %38, label %113, label %39

39:                                               ; preds = %36
  %40 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %41 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %40, %struct.EC_AFFINE* %2, i32 4, i8* null, i64 0) #4
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %113, label %43

43:                                               ; preds = %39
  %44 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %45 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %12, i8** nonnull %10, i64 %41) #4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = load i8*, i8** %10, align 8
  %49 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %40, %struct.EC_AFFINE* %2, i32 4, i8* %48, i64 %41) #4
  %50 = icmp eq i64 %49, %41
  br i1 %50, label %52, label %51

51:                                               ; preds = %47, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #4
  br label %113

52:                                               ; preds = %47
  %53 = call i32 @CBB_flush(%struct.cbb_st* nonnull %12) #4
  %54 = icmp eq i32 %53, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #4
  br i1 %54, label %113, label %55

55:                                               ; preds = %52
  %56 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %57 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %56, %struct.EC_AFFINE* %3, i32 4, i8* null, i64 0) #4
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %113, label %59

59:                                               ; preds = %55
  %60 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %61 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %12, i8** nonnull %9, i64 %57) #4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = load i8*, i8** %9, align 8
  %65 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %56, %struct.EC_AFFINE* %3, i32 4, i8* %64, i64 %57) #4
  %66 = icmp eq i64 %65, %57
  br i1 %66, label %68, label %67

67:                                               ; preds = %63, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #4
  br label %113

68:                                               ; preds = %63
  %69 = call i32 @CBB_flush(%struct.cbb_st* nonnull %12) #4
  %70 = icmp eq i32 %69, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #4
  br i1 %70, label %113, label %71

71:                                               ; preds = %68
  %72 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %73 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %72, %struct.EC_AFFINE* %4, i32 4, i8* null, i64 0) #4
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %113, label %75

75:                                               ; preds = %71
  %76 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %77 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %12, i8** nonnull %8, i64 %73) #4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %75
  %80 = load i8*, i8** %8, align 8
  %81 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %72, %struct.EC_AFFINE* %4, i32 4, i8* %80, i64 %73) #4
  %82 = icmp eq i64 %81, %73
  br i1 %82, label %84, label %83

83:                                               ; preds = %79, %75
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #4
  br label %113

84:                                               ; preds = %79
  %85 = call i32 @CBB_flush(%struct.cbb_st* nonnull %12) #4
  %86 = icmp eq i32 %85, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #4
  br i1 %86, label %113, label %87

87:                                               ; preds = %84
  %88 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %89 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %88, %struct.EC_AFFINE* %5, i32 4, i8* null, i64 0) #4
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %113, label %91

91:                                               ; preds = %87
  %92 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %93 = call i32 @CBB_add_space(%struct.cbb_st* nonnull %12, i8** nonnull %7, i64 %89) #4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i8*, i8** %7, align 8
  %97 = call i64 @ec_point_to_bytes(%struct.ec_group_st* %88, %struct.EC_AFFINE* %5, i32 4, i8* %96, i64 %89) #4
  %98 = icmp eq i64 %97, %89
  br i1 %98, label %100, label %99

99:                                               ; preds = %95, %91
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #4
  br label %113

100:                                              ; preds = %95
  %101 = call i32 @CBB_flush(%struct.cbb_st* nonnull %12) #4
  %102 = icmp eq i32 %101, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #4
  br i1 %102, label %113, label %103

103:                                              ; preds = %100
  %104 = call i32 @CBB_finish(%struct.cbb_st* nonnull %12, i8** nonnull %13, i64* nonnull %14) #4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %113, label %106

106:                                              ; preds = %103
  %107 = load i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64)** @voprf_exp2_method.2, align 8
  %108 = load %struct.ec_group_st*, %struct.ec_group_st** @voprf_exp2_method.0, align 8
  %109 = load i8*, i8** %13, align 8
  %110 = load i64, i64* %14, align 8
  %111 = call i32 %107(%struct.ec_group_st* %108, %union.EC_SCALAR* %0, i8* %109, i64 %110) #4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %87, %71, %55, %39, %23, %99, %83, %67, %51, %35, %106, %103, %100, %84, %68, %52, %36, %20, %6
  call void @ERR_put_error(i32 32, i32 0, i32 65, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 243) #4
  br label %114

114:                                              ; preds = %106, %113
  %115 = phi i32 [ 0, %113 ], [ 1, %106 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %12) #4
  %116 = load i8*, i8** %13, align 8
  call void @OPENSSL_free(i8* %116) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #4
  ret i32 %115
}

declare void @ec_scalar_to_montgomery(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare void @ec_scalar_mul_montgomery(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare void @ec_scalar_add(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @CBB_add_u32(%struct.cbb_st*, i32) local_unnamed_addr #1

declare %struct.trust_token_st* @TRUST_TOKEN_new(i8*, i64) local_unnamed_addr #1

declare void @TRUST_TOKEN_free(%struct.trust_token_st*) #1

declare i32 @CBS_get_u16_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @scalar_from_cbs(%struct.cbs_st*, %struct.ec_group_st*, %union.EC_SCALAR*) unnamed_addr #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %1, i64 0, i32 2
  %6 = tail call i32 @BN_num_bytes(%struct.bignum_st* %5) #4
  %7 = zext i32 %6 to i64
  %8 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #4
  %9 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = call i32 @CBS_get_bytes(%struct.cbs_st* %0, %struct.cbs_st* nonnull %4, i64 %7) #4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  call void @ERR_put_error(i32 32, i32 0, i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 105) #4
  br label %17

13:                                               ; preds = %3
  %14 = call i8* @CBS_data(%struct.cbs_st* nonnull %4) #4
  %15 = call i64 @CBS_len(%struct.cbs_st* nonnull %4) #4
  %16 = call i32 @ec_scalar_from_bytes(%struct.ec_group_st* %1, %union.EC_SCALAR* %2, i8* %14, i64 %15) #4
  br label %17

17:                                               ; preds = %13, %12
  %18 = phi i32 [ 1, %13 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #4
  ret i32 %18
}

declare void @ec_scalar_neg(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @ec_point_mul_scalar_public(%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*) local_unnamed_addr #1

declare i32 @ec_scalar_equal_vartime(%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_TRUST_TOKEN_call_free_func(void (i8*)* nocapture, i8*) #3 {
  %3 = bitcast void (i8*)* %0 to void (%struct.trust_token_st*)*
  %4 = bitcast i8* %1 to %struct.trust_token_st*
  tail call void %3(%struct.trust_token_st* %4) #4
  ret void
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #1

declare i32 @CBS_copy_bytes(%struct.cbs_st*, i8*, i64) local_unnamed_addr #1

declare i32 @ec_affine_jacobian_equal(%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
