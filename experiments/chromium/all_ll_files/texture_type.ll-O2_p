; ModuleID = '../../third_party/dawn/third_party/tint/src/sem/texture_type.cc'
source_filename = "../../third_party/dawn/third_party/tint/src/sem/texture_type.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.tint::TypeInfo" = type { %"struct.tint::TypeInfo"*, i8* }
%"class.tint::sem::Texture" = type <{ %"class.tint::Castable", i32, [4 x i8] }>
%"class.tint::Castable" = type { %"class.tint::sem::Type" }
%"class.tint::sem::Type" = type { %"class.tint::Castable.0" }
%"class.tint::Castable.0" = type { %"class.tint::sem::Node" }
%"class.tint::sem::Node" = type { %"class.tint::Castable.1" }
%"class.tint::Castable.1" = type { %"class.tint::CastableBase" }
%"class.tint::CastableBase" = type { i32 (...)** }

$_ZNK4tint8CastableINS_3sem7TextureENS1_4TypeEE8TypeInfoEv = comdat any

@_ZN4tint6detail10TypeInfoOfINS_3sem4TypeEE4infoE = external global %"struct.tint::TypeInfo", align 8
@.str = private unnamed_addr constant [19 x i8] c"tint::sem::Texture\00", align 1
@_ZN4tint6detail10TypeInfoOfINS_3sem7TextureEE4infoE = hidden constant %"struct.tint::TypeInfo" { %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3sem4TypeEE4infoE, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0) }, align 8
@_ZTVN4tint3sem7TextureE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.tint::sem::Texture"*)* @_ZN4tint3sem7TextureD2Ev to i8*), i8* bitcast (void (%"class.tint::sem::Texture"*)* @_ZN4tint3sem7TextureD0Ev to i8*), i8* bitcast (%"struct.tint::TypeInfo"* (%"class.tint::Castable"*)* @_ZNK4tint8CastableINS_3sem7TextureENS1_4TypeEE8TypeInfoEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN4tint3sem7TextureD1Ev = hidden unnamed_addr alias void (%"class.tint::sem::Texture"*), void (%"class.tint::sem::Texture"*)* @_ZN4tint3sem7TextureD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7TextureC2ENS_3ast16TextureDimensionE(%"class.tint::sem::Texture"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeC2Ev(%"class.tint::sem::Type"* %3) #5
  %4 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3sem7TextureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 1
  store i32 %1, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7TextureC2EOS1_(%"class.tint::sem::Texture"*, %"class.tint::sem::Texture"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeC2EOS1_(%"class.tint::sem::Type"* %3, %"class.tint::sem::Type"* dereferenceable(8) %4) #5
  %5 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3sem7TextureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  store i32 %8, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7TextureD2Ev(%"class.tint::sem::Texture"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tint::sem::Texture", %"class.tint::sem::Texture"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeD2Ev(%"class.tint::sem::Type"* %2) #5
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4tint3sem7TextureD0Ev(%"class.tint::sem::Texture"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.tint::TypeInfo"* @_ZNK4tint8CastableINS_3sem7TextureENS1_4TypeEE8TypeInfoEv(%"class.tint::Castable"*) unnamed_addr #0 comdat align 2 {
  ret %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3sem7TextureEE4infoE
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN4tint3sem4TypeC2Ev(%"class.tint::sem::Type"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4tint3sem4TypeD2Ev(%"class.tint::sem::Type"*) unnamed_addr #4

declare void @_ZN4tint3sem4TypeC2EOS1_(%"class.tint::sem::Type"*, %"class.tint::sem::Type"* dereferenceable(8)) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
