; ModuleID = '../../components/webapps/browser/installable/installable_data.cc'
source_filename = "../../components/webapps/browser/installable/installable_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.webapps::InstallableData" = type <{ %"class.std::__1::vector", %class.GURL*, %"struct.blink::Manifest"*, %class.GURL*, %class.SkBitmap*, i8, [7 x i8], %class.GURL*, %class.SkBitmap*, i8, [7 x i8], %"class.std::__1::vector.132"*, i8, i8, [6 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.blink::Manifest" = type <{ %"class.absl::optional", %"class.absl::optional", %"class.absl::optional", %class.GURL, i32, [4 x i8], %"class.std::__1::vector.19", i32, [4 x i8], %"class.std::__1::vector.26", %"class.std::__1::vector.26", %"class.std::__1::vector.47", %"class.absl::optional.54", %"class.std::__1::vector.73", %"class.std::__1::vector.88", %"class.std::__1::vector.95", %"class.absl::optional.107", %"class.std::__1::vector.112", i8, [3 x i8], %"class.absl::optional.119", %"class.absl::optional.119", [4 x i8], %"class.absl::optional", %class.GURL, i32, i8, [3 x i8] }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { i32*, i32*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i32* }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"struct.blink::Manifest::ImageResource"*, %"struct.blink::Manifest::ImageResource"*, %"class.std::__1::__compressed_pair.42" }
%"struct.blink::Manifest::ImageResource" = type { %class.GURL, %"class.std::__1::basic_string.10", %"class.std::__1::vector.28", %"class.std::__1::vector.35" }
%"class.std::__1::basic_string.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.13 }
%union.anon.13 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"class.gfx::Size"*, %"class.gfx::Size"*, %"class.std::__1::__compressed_pair.30" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.gfx::Size"* }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i32*, i32*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i32* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.blink::Manifest::ImageResource"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.blink::Manifest::ShortcutItem"*, %"struct.blink::Manifest::ShortcutItem"*, %"class.std::__1::__compressed_pair.49" }
%"struct.blink::Manifest::ShortcutItem" = type { %"class.std::__1::basic_string.10", %"class.absl::optional", %"class.absl::optional", %class.GURL, %"class.std::__1::vector.26" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.blink::Manifest::ShortcutItem"* }
%"class.absl::optional.54" = type { %"class.absl::optional_internal::optional_data.55" }
%"class.absl::optional_internal::optional_data.55" = type { %"class.absl::optional_internal::optional_data_base.56" }
%"class.absl::optional_internal::optional_data_base.56" = type { %"class.absl::optional_internal::optional_data_dtor_base.57" }
%"class.absl::optional_internal::optional_data_dtor_base.57" = type { i8, %union.anon.58 }
%union.anon.58 = type { %"struct.blink::Manifest::ShareTarget" }
%"struct.blink::Manifest::ShareTarget" = type { %class.GURL, i32, i32, %"struct.blink::Manifest::ShareTargetParams" }
%"struct.blink::Manifest::ShareTargetParams" = type { %"class.absl::optional", %"class.absl::optional", %"class.absl::optional", %"class.std::__1::vector.59" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.blink::Manifest::FileFilter"*, %"struct.blink::Manifest::FileFilter"*, %"class.std::__1::__compressed_pair.68" }
%"struct.blink::Manifest::FileFilter" = type { %"class.std::__1::basic_string.10", %"class.std::__1::vector.61" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::basic_string.10"* }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.blink::Manifest::FileFilter"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.blink::Manifest::FileHandler"*, %"struct.blink::Manifest::FileHandler"*, %"class.std::__1::__compressed_pair.83" }
%"struct.blink::Manifest::FileHandler" = type { %class.GURL, %"class.std::__1::basic_string.10", %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { i64 }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.blink::Manifest::FileHandler"* }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"struct.blink::Manifest::ProtocolHandler"*, %"struct.blink::Manifest::ProtocolHandler"*, %"class.std::__1::__compressed_pair.90" }
%"struct.blink::Manifest::ProtocolHandler" = type { %"class.std::__1::basic_string.10", %class.GURL }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.blink::Manifest::ProtocolHandler"* }
%"class.std::__1::vector.95" = type { %"class.std::__1::__vector_base.96" }
%"class.std::__1::__vector_base.96" = type { %"struct.blink::Manifest::UrlHandler"*, %"struct.blink::Manifest::UrlHandler"*, %"class.std::__1::__compressed_pair.102" }
%"struct.blink::Manifest::UrlHandler" = type <{ %"class.url::Origin", i8, [7 x i8] }>
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.97" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.97" = type { %"class.absl::optional_internal::optional_data.98" }
%"class.absl::optional_internal::optional_data.98" = type { %"class.absl::optional_internal::optional_data_base.99" }
%"class.absl::optional_internal::optional_data_base.99" = type { %"class.absl::optional_internal::optional_data_dtor_base.100" }
%"class.absl::optional_internal::optional_data_dtor_base.100" = type { i8, %union.anon.101 }
%union.anon.101 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.blink::Manifest::UrlHandler"* }
%"class.absl::optional.107" = type { %"class.absl::optional_internal::optional_data.108" }
%"class.absl::optional_internal::optional_data.108" = type { %"class.absl::optional_internal::optional_data_base.109" }
%"class.absl::optional_internal::optional_data_base.109" = type { %"class.absl::optional_internal::optional_data_dtor_base.110" }
%"class.absl::optional_internal::optional_data_dtor_base.110" = type { i8, %union.anon.111 }
%union.anon.111 = type { %"struct.blink::Manifest::NoteTaking" }
%"struct.blink::Manifest::NoteTaking" = type { %class.GURL }
%"class.std::__1::vector.112" = type { %"class.std::__1::__vector_base.113" }
%"class.std::__1::__vector_base.113" = type { %"struct.blink::Manifest::RelatedApplication"*, %"struct.blink::Manifest::RelatedApplication"*, %"class.std::__1::__compressed_pair.114" }
%"struct.blink::Manifest::RelatedApplication" = type { %"class.absl::optional", %class.GURL, %"class.absl::optional" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.blink::Manifest::RelatedApplication"* }
%"class.absl::optional.119" = type { %"class.absl::optional_internal::optional_data.120" }
%"class.absl::optional_internal::optional_data.120" = type { %"class.absl::optional_internal::optional_data_base.121" }
%"class.absl::optional_internal::optional_data_base.121" = type { %"class.absl::optional_internal::optional_data_dtor_base.122" }
%"class.absl::optional_internal::optional_data_dtor_base.122" = type { i8, %union.anon.123 }
%union.anon.123 = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.9 }
%union.anon.9 = type { %"class.std::__1::basic_string.10" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.GURL* }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.131 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.124, i32, i32 }
%class.sk_sp.124 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.125" }
%"struct.std::__1::__atomic_base.125" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.126" }
%"struct.std::__1::atomic.126" = type { %"struct.std::__1::__atomic_base.127" }
%"struct.std::__1::__atomic_base.127" = type { %"struct.std::__1::__atomic_base.128" }
%"struct.std::__1::__atomic_base.128" = type { %"struct.std::__1::__cxx_atomic_impl.129" }
%"struct.std::__1::__cxx_atomic_impl.129" = type { %"struct.std::__1::__cxx_atomic_base_impl.130" }
%"struct.std::__1::__cxx_atomic_base_impl.130" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.131 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.std::__1::vector.132" = type opaque

@_ZN7webapps15InstallableDataC1ENSt3__16vectorINS_21InstallableStatusCodeENS1_9allocatorIS3_EEEERK4GURLRKN5blink8ManifestES9_PK8SkBitmapbS9_SG_bRKNS2_ISE_NS4_ISE_EEEEbb = hidden unnamed_addr alias void (%"struct.webapps::InstallableData"*, %"class.std::__1::vector"*, %class.GURL*, %"struct.blink::Manifest"*, %class.GURL*, %class.SkBitmap*, i1, %class.GURL*, %class.SkBitmap*, i1, %"class.std::__1::vector.132"*, i1, i1), void (%"struct.webapps::InstallableData"*, %"class.std::__1::vector"*, %class.GURL*, %"struct.blink::Manifest"*, %class.GURL*, %class.SkBitmap*, i1, %class.GURL*, %class.SkBitmap*, i1, %"class.std::__1::vector.132"*, i1, i1)* @_ZN7webapps15InstallableDataC2ENSt3__16vectorINS_21InstallableStatusCodeENS1_9allocatorIS3_EEEERK4GURLRKN5blink8ManifestES9_PK8SkBitmapbS9_SG_bRKNS2_ISE_NS4_ISE_EEEEbb
@_ZN7webapps15InstallableDataD1Ev = hidden unnamed_addr alias void (%"struct.webapps::InstallableData"*), void (%"struct.webapps::InstallableData"*)* @_ZN7webapps15InstallableDataD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7webapps15InstallableDataC2ENSt3__16vectorINS_21InstallableStatusCodeENS1_9allocatorIS3_EEEERK4GURLRKN5blink8ManifestES9_PK8SkBitmapbS9_SG_bRKNS2_ISE_NS4_ISE_EEEEbb(%"struct.webapps::InstallableData"* nocapture, %"class.std::__1::vector"* nocapture, %class.GURL* dereferenceable(120), %"struct.blink::Manifest"* dereferenceable(992), %class.GURL* dereferenceable(120), %class.SkBitmap*, i1 zeroext, %class.GURL* dereferenceable(120), %class.SkBitmap*, i1 zeroext, %"class.std::__1::vector.132"*, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %14 = zext i1 %6 to i8
  %15 = zext i1 %9 to i8
  %16 = zext i1 %11 to i8
  %17 = zext i1 %12 to i8
  %18 = bitcast %"struct.webapps::InstallableData"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #4
  %19 = bitcast %"class.std::__1::vector"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.webapps::InstallableData"* %0 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast i32** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast i32** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast %"class.std::__1::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #4
  %33 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 1
  store %class.GURL* %2, %class.GURL** %33, align 8
  %34 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 2
  store %"struct.blink::Manifest"* %3, %"struct.blink::Manifest"** %34, align 8
  %35 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 3
  store %class.GURL* %4, %class.GURL** %35, align 8
  %36 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 4
  store %class.SkBitmap* %5, %class.SkBitmap** %36, align 8
  %37 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 5
  store i8 %14, i8* %37, align 8
  %38 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 7
  store %class.GURL* %7, %class.GURL** %38, align 8
  %39 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 8
  store %class.SkBitmap* %8, %class.SkBitmap** %39, align 8
  %40 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 9
  store i8 %15, i8* %40, align 8
  %41 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 11
  store %"class.std::__1::vector.132"* %10, %"class.std::__1::vector.132"** %41, align 8
  %42 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 12
  store i8 %16, i8* %42, align 8
  %43 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 13
  store i8 %17, i8* %43, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7webapps15InstallableDataD2Ev(%"struct.webapps::InstallableData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #5
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7webapps15InstallableData16NoBlockingErrorsEv(%"struct.webapps::InstallableData"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"struct.webapps::InstallableData", %"struct.webapps::InstallableData"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %3, %5
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = ptrtoint i32* %3 to i64
  %9 = ptrtoint i32* %5 to i64
  %10 = sub i64 %9, %8
  %11 = icmp eq i64 %10, 4
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = load i32, i32* %3, align 4
  %14 = icmp eq i32 %13, 40
  br label %15

15:                                               ; preds = %7, %12, %1
  %16 = phi i1 [ true, %1 ], [ false, %7 ], [ %14, %12 ]
  ret i1 %16
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
