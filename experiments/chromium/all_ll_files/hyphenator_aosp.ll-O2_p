; ModuleID = '../../third_party/blink/renderer/platform/text/hyphenation/hyphenator_aosp.cc'
source_filename = "../../third_party/blink/renderer/platform/text/hyphenation/hyphenator_aosp.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.android::Hyphenator" = type { i8* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"struct.android::Header" = type { i32, i32, i32, i32, i32, i32 }
%"struct.android::AlphabetTable0" = type { i32, i32, i32, [1 x i8] }
%"struct.android::AlphabetTable1" = type { i32, i32, [1 x i32] }
%"struct.android::Trie" = type { i32, i32, i32, i32, i32, i32, [1 x i32] }
%"struct.android::Pattern" = type { i32, i32, i32, i32, [1 x i32] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.android::Hyphenator"* @_ZN7android10Hyphenator10loadBinaryEPKh(i8*) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 8) #7
  %3 = bitcast i8* %2 to %"class.android::Hyphenator"*
  %4 = bitcast i8* %2 to i8**
  store i8* %0, i8** %4, align 8
  ret %"class.android::Hyphenator"* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7android10Hyphenator9hyphenateEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEEPKtm(%"class.android::Hyphenator"* nocapture readonly, %"class.WTF::Vector"* nocapture, i16* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %5 = bitcast i16* %2 to i8*
  %6 = alloca [64 x i16], align 16
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  store i32 0, i32* %11, align 4
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.WTF::Vector"* %1 to i64*
  store atomic i64 0, i64* %18 monotonic, align 8
  store i32 0, i32* %7, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %17) #8
  br label %19

19:                                               ; preds = %4, %15
  %20 = trunc i64 %3 to i32
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ult i32 %22, %20
  br i1 %23, label %24, label %71

24:                                               ; preds = %19
  %25 = load i32, i32* %7, align 8
  %26 = icmp ult i32 %25, %20
  br i1 %26, label %27, label %60

27:                                               ; preds = %24
  %28 = lshr i32 %25, 2
  %29 = add nuw i32 %25, 1
  %30 = add i32 %29, %28
  %31 = icmp ugt i32 %30, 4
  %32 = select i1 %31, i32 %30, i32 4
  %33 = icmp ugt i32 %32, %20
  %34 = select i1 %33, i32 %32, i32 %20
  %35 = icmp ult i32 %25, %34
  br i1 %35, label %36, label %60, !prof !2

36:                                               ; preds = %27
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  %40 = zext i32 %34 to i64
  %41 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %40) #8
  %42 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %43 = ptrtoint i8* %42 to i64
  br i1 %39, label %44, label %47

44:                                               ; preds = %36
  %45 = bitcast %"class.WTF::Vector"* %1 to i64*
  store atomic i64 %43, i64* %45 monotonic, align 8
  %46 = trunc i64 %41 to i32
  store i32 %46, i32* %7, align 8
  br label %60

47:                                               ; preds = %36
  %48 = load i8*, i8** %37, align 8
  %49 = icmp ne i8* %42, null
  %50 = icmp ne i8* %48, null
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %56, !prof !2

52:                                               ; preds = %47
  %53 = load i32, i32* %21, align 4
  %54 = zext i32 %53 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* nonnull align 1 %48, i64 %54, i1 false) #8
  %55 = load i8*, i8** %37, align 8
  br label %56

56:                                               ; preds = %52, %47
  %57 = phi i8* [ %48, %47 ], [ %55, %52 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #8
  %58 = bitcast %"class.WTF::Vector"* %1 to i64*
  store atomic i64 %43, i64* %58 monotonic, align 8
  %59 = trunc i64 %41 to i32
  store i32 %59, i32* %7, align 8
  br label %60

60:                                               ; preds = %56, %44, %27, %24
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i32, i32* %21, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = and i64 %3, 4294967295
  %67 = getelementptr inbounds i8, i8* %62, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = ptrtoint i8* %65 to i64
  %70 = sub i64 %68, %69
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 0, i64 %70, i1 false) #8
  br label %71

71:                                               ; preds = %19, %60
  store i32 %20, i32* %21, align 4
  %72 = add i64 %3, 2
  %73 = getelementptr inbounds %"class.android::Hyphenator", %"class.android::Hyphenator"* %0, i64 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %88, label %76

76:                                               ; preds = %71
  %77 = icmp sgt i32 %20, 4
  %78 = icmp ult i64 %72, 65
  %79 = and i1 %77, %78
  br i1 %79, label %80, label %88

80:                                               ; preds = %76
  %81 = bitcast [64 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %81) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %81, i8 -86, i64 128, i1 false)
  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 0
  %83 = call zeroext i1 @_ZN7android10Hyphenator14alphabetLookupEPtPKtm(%"class.android::Hyphenator"* %0, i16* nonnull %82, i16* %2, i64 %3)
  br i1 %83, label %84, label %87

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  call void @_ZN7android10Hyphenator18hyphenateFromCodesEPhPKtm(%"class.android::Hyphenator"* %0, i8* %86, i16* nonnull %82, i64 %72)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %81) #8
  br label %205

87:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %81) #8
  br label %88

88:                                               ; preds = %87, %71, %76
  %89 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  store i8 0, i8* %90, align 1
  %91 = icmp ugt i64 %3, 1
  br i1 %91, label %92, label %205

92:                                               ; preds = %88
  %93 = add i64 %3, -1
  %94 = icmp ult i64 %93, 16
  br i1 %94, label %172, label %95

95:                                               ; preds = %92
  %96 = getelementptr i8, i8* %90, i64 1
  %97 = getelementptr i8, i8* %90, i64 %3
  %98 = add i64 %3, -1
  %99 = getelementptr i16, i16* %2, i64 %98
  %100 = bitcast i16* %99 to i8*
  %101 = icmp ult i8* %96, %100
  %102 = icmp ugt i8* %97, %5
  %103 = and i1 %101, %102
  br i1 %103, label %172, label %104

104:                                              ; preds = %95
  %105 = and i64 %93, -16
  %106 = or i64 %105, 1
  %107 = add i64 %105, -16
  %108 = lshr exact i64 %107, 4
  %109 = add nuw nsw i64 %108, 1
  %110 = and i64 %109, 1
  %111 = icmp eq i64 %107, 0
  br i1 %111, label %151, label %112

112:                                              ; preds = %104
  %113 = sub nuw nsw i64 %109, %110
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ 0, %112 ], [ %148, %114 ]
  %116 = phi i64 [ %113, %112 ], [ %149, %114 ]
  %117 = or i64 %115, 1
  %118 = getelementptr inbounds i16, i16* %2, i64 %115
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !3
  %121 = getelementptr inbounds i16, i16* %118, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !3
  %124 = icmp eq <8 x i16> %120, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %125 = icmp eq <8 x i16> %123, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %126 = zext <8 x i1> %124 to <8 x i8>
  %127 = zext <8 x i1> %125 to <8 x i8>
  %128 = getelementptr inbounds i8, i8* %90, i64 %117
  %129 = bitcast i8* %128 to <8 x i8>*
  store <8 x i8> %126, <8 x i8>* %129, align 1, !alias.scope !6, !noalias !3
  %130 = getelementptr inbounds i8, i8* %128, i64 8
  %131 = bitcast i8* %130 to <8 x i8>*
  store <8 x i8> %127, <8 x i8>* %131, align 1, !alias.scope !6, !noalias !3
  %132 = or i64 %115, 16
  %133 = or i64 %115, 17
  %134 = getelementptr inbounds i16, i16* %2, i64 %132
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2, !alias.scope !3
  %137 = getelementptr inbounds i16, i16* %134, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !3
  %140 = icmp eq <8 x i16> %136, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %141 = icmp eq <8 x i16> %139, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %142 = zext <8 x i1> %140 to <8 x i8>
  %143 = zext <8 x i1> %141 to <8 x i8>
  %144 = getelementptr inbounds i8, i8* %90, i64 %133
  %145 = bitcast i8* %144 to <8 x i8>*
  store <8 x i8> %142, <8 x i8>* %145, align 1, !alias.scope !6, !noalias !3
  %146 = getelementptr inbounds i8, i8* %144, i64 8
  %147 = bitcast i8* %146 to <8 x i8>*
  store <8 x i8> %143, <8 x i8>* %147, align 1, !alias.scope !6, !noalias !3
  %148 = add i64 %115, 32
  %149 = add i64 %116, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %114, !llvm.loop !8

151:                                              ; preds = %114, %104
  %152 = phi i64 [ 0, %104 ], [ %148, %114 ]
  %153 = icmp eq i64 %110, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %151
  %155 = or i64 %152, 1
  %156 = getelementptr inbounds i16, i16* %2, i64 %152
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !3
  %159 = getelementptr inbounds i16, i16* %156, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !3
  %162 = icmp eq <8 x i16> %158, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %163 = icmp eq <8 x i16> %161, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %164 = zext <8 x i1> %162 to <8 x i8>
  %165 = zext <8 x i1> %163 to <8 x i8>
  %166 = getelementptr inbounds i8, i8* %90, i64 %155
  %167 = bitcast i8* %166 to <8 x i8>*
  store <8 x i8> %164, <8 x i8>* %167, align 1, !alias.scope !6, !noalias !3
  %168 = getelementptr inbounds i8, i8* %166, i64 8
  %169 = bitcast i8* %168 to <8 x i8>*
  store <8 x i8> %165, <8 x i8>* %169, align 1, !alias.scope !6, !noalias !3
  br label %170

170:                                              ; preds = %151, %154
  %171 = icmp eq i64 %93, %105
  br i1 %171, label %205, label %172

172:                                              ; preds = %170, %95, %92
  %173 = phi i64 [ 1, %95 ], [ 1, %92 ], [ %106, %170 ]
  %174 = xor i64 %173, -1
  %175 = and i64 %3, 1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %185

177:                                              ; preds = %172
  %178 = add nsw i64 %173, -1
  %179 = getelementptr inbounds i16, i16* %2, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = icmp eq i16 %180, 173
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds i8, i8* %90, i64 %173
  store i8 %182, i8* %183, align 1
  %184 = add nuw i64 %173, 1
  br label %185

185:                                              ; preds = %172, %177
  %186 = phi i64 [ %173, %172 ], [ %184, %177 ]
  %187 = sub i64 0, %3
  %188 = icmp eq i64 %174, %187
  br i1 %188, label %205, label %189

189:                                              ; preds = %185, %189
  %190 = phi i64 [ %203, %189 ], [ %186, %185 ]
  %191 = add i64 %190, -1
  %192 = getelementptr inbounds i16, i16* %2, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = icmp eq i16 %193, 173
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds i8, i8* %90, i64 %190
  store i8 %195, i8* %196, align 1
  %197 = add nuw i64 %190, 1
  %198 = getelementptr inbounds i16, i16* %2, i64 %190
  %199 = load i16, i16* %198, align 2
  %200 = icmp eq i16 %199, 173
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds i8, i8* %90, i64 %197
  store i8 %201, i8* %202, align 1
  %203 = add nuw i64 %190, 2
  %204 = icmp eq i64 %203, %3
  br i1 %204, label %205, label %189, !llvm.loop !10

205:                                              ; preds = %185, %189, %170, %88, %84
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7android10Hyphenator14alphabetLookupEPtPKtm(%"class.android::Hyphenator"* nocapture readonly, i16* nocapture, i16* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %5 = bitcast %"class.android::Hyphenator"* %0 to %"struct.android::Header"**
  %6 = load %"struct.android::Header"*, %"struct.android::Header"** %5, align 8
  %7 = bitcast %"struct.android::Header"* %6 to i8*
  %8 = getelementptr inbounds %"struct.android::Header", %"struct.android::Header"* %6, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  switch i32 %13, label %92 [
    i32 0, label %14
    i32 1, label %45
  ]

14:                                               ; preds = %4
  %15 = bitcast i8* %11 to %"struct.android::AlphabetTable0"*
  %16 = getelementptr inbounds i8, i8* %11, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i8, i8* %11, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  store i16 0, i16* %1, align 2
  %22 = icmp eq i64 %3, 0
  br i1 %22, label %42, label %23

23:                                               ; preds = %14, %37
  %24 = phi i64 [ %39, %37 ], [ 0, %14 ]
  %25 = getelementptr inbounds i16, i16* %2, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = icmp ule i32 %18, %27
  %29 = icmp ugt i32 %21, %27
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %92

31:                                               ; preds = %23
  %32 = sub i32 %27, %18
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.android::AlphabetTable0", %"struct.android::AlphabetTable0"* %15, i64 0, i32 3, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %92, label %37

37:                                               ; preds = %31
  %38 = zext i8 %35 to i16
  %39 = add nuw i64 %24, 1
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  store i16 %38, i16* %40, align 2
  %41 = icmp eq i64 %39, %3
  br i1 %41, label %42, label %23

42:                                               ; preds = %37, %14
  %43 = add i64 %3, 1
  %44 = getelementptr inbounds i16, i16* %1, i64 %43
  store i16 0, i16* %44, align 2
  br label %92

45:                                               ; preds = %4
  %46 = bitcast i8* %11 to %"struct.android::AlphabetTable1"*
  %47 = getelementptr inbounds i8, i8* %11, i64 4
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %11, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = getelementptr inbounds %"struct.android::AlphabetTable1", %"struct.android::AlphabetTable1"* %46, i64 0, i32 2, i64 %50
  store i16 0, i16* %1, align 2
  %54 = icmp eq i64 %3, 0
  br i1 %54, label %89, label %55

55:                                               ; preds = %45
  %56 = icmp eq i32 %49, 0
  br label %57

57:                                               ; preds = %83, %55
  %58 = phi i64 [ 0, %55 ], [ %86, %83 ]
  %59 = getelementptr inbounds i16, i16* %2, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = shl nuw nsw i32 %61, 11
  br i1 %56, label %76, label %63

63:                                               ; preds = %57, %63
  %64 = phi i64 [ %74, %63 ], [ %50, %57 ]
  %65 = phi i32* [ %73, %63 ], [ %52, %57 ]
  %66 = lshr i64 %64, 1
  %67 = getelementptr inbounds i32, i32* %65, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp ult i32 %68, %62
  %70 = getelementptr inbounds i32, i32* %67, i64 1
  %71 = xor i64 %66, -1
  %72 = add i64 %64, %71
  %73 = select i1 %69, i32* %70, i32* %65
  %74 = select i1 %69, i64 %72, i64 %66
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %63

76:                                               ; preds = %63, %57
  %77 = phi i32* [ %52, %57 ], [ %73, %63 ]
  %78 = icmp eq i32* %77, %53
  br i1 %78, label %92, label %79

79:                                               ; preds = %76
  %80 = load i32, i32* %77, align 4
  %81 = lshr i32 %80, 11
  %82 = icmp eq i32 %81, %61
  br i1 %82, label %83, label %92

83:                                               ; preds = %79
  %84 = trunc i32 %80 to i16
  %85 = and i16 %84, 2047
  %86 = add nuw i64 %58, 1
  %87 = getelementptr inbounds i16, i16* %1, i64 %86
  store i16 %85, i16* %87, align 2
  %88 = icmp eq i64 %86, %3
  br i1 %88, label %89, label %57

89:                                               ; preds = %83, %45
  %90 = add i64 %3, 1
  %91 = getelementptr inbounds i16, i16* %1, i64 %90
  store i16 0, i16* %91, align 2
  br label %92

92:                                               ; preds = %79, %76, %31, %23, %4, %89, %42
  %93 = phi i1 [ true, %42 ], [ true, %89 ], [ false, %4 ], [ false, %23 ], [ false, %31 ], [ false, %76 ], [ false, %79 ]
  ret i1 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7android10Hyphenator18hyphenateFromCodesEPhPKtm(%"class.android::Hyphenator"* nocapture readonly, i8* nocapture, i16* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %5 = bitcast %"class.android::Hyphenator"* %0 to %"struct.android::Header"**
  %6 = load %"struct.android::Header"*, %"struct.android::Header"** %5, align 8
  %7 = bitcast %"struct.android::Header"* %6 to i8*
  %8 = getelementptr inbounds %"struct.android::Header", %"struct.android::Header"* %6, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = bitcast i8* %11 to %"struct.android::Trie"*
  %13 = getelementptr inbounds %"struct.android::Header", %"struct.android::Header"* %6, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %7, i64 %15
  %17 = bitcast i8* %16 to %"struct.android::Pattern"*
  %18 = getelementptr inbounds i8, i8* %11, i64 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds i8, i8* %11, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i8, i8* %11, i64 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %11, i64 16
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = add i64 %3, -4
  %31 = add i64 %3, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %45, label %33

33:                                               ; preds = %4
  %34 = getelementptr inbounds i8, i8* %16, i64 8
  %35 = bitcast i8* %34 to i32*
  %36 = trunc i64 %30 to i32
  %37 = getelementptr i8, i8* %7, i64 %15
  %38 = getelementptr i8, i8* %7, i64 %15
  br label %39

39:                                               ; preds = %275, %33
  %40 = phi i32 [ 1, %33 ], [ %277, %275 ]
  %41 = phi i64 [ 0, %33 ], [ %276, %275 ]
  %42 = icmp ult i64 %41, %3
  br i1 %42, label %106, label %275

43:                                               ; preds = %275
  %44 = icmp ugt i64 %30, 2
  br i1 %44, label %45, label %279

45:                                               ; preds = %4, %43
  %46 = add i64 %3, -6
  %47 = icmp ult i64 %46, 32
  br i1 %47, label %48, label %50

48:                                               ; preds = %104, %45
  %49 = phi i64 [ 2, %45 ], [ %52, %104 ]
  br label %280

50:                                               ; preds = %45
  %51 = and i64 %46, -32
  %52 = or i64 %51, 2
  %53 = add i64 %51, -32
  %54 = lshr exact i64 %53, 5
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %90, label %58

58:                                               ; preds = %50
  %59 = sub nuw nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %85, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %86, %60 ]
  %63 = or i64 %61, 2
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = getelementptr inbounds i8, i8* %64, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = and <16 x i8> %66, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %71 = and <16 x i8> %69, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %72 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %72, align 1
  %73 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %73, align 1
  %74 = or i64 %61, 34
  %75 = getelementptr inbounds i8, i8* %1, i64 %74
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = getelementptr inbounds i8, i8* %75, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = and <16 x i8> %77, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %82 = and <16 x i8> %80, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %83 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %83, align 1
  %84 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  %85 = add i64 %61, 64
  %86 = add i64 %62, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %60, !llvm.loop !11

88:                                               ; preds = %60
  %89 = or i64 %85, 2
  br label %90

90:                                               ; preds = %88, %50
  %91 = phi i64 [ 2, %50 ], [ %89, %88 ]
  %92 = icmp eq i64 %56, 0
  br i1 %92, label %104, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %1, i64 %91
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1
  %97 = getelementptr inbounds i8, i8* %94, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = and <16 x i8> %96, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %101 = and <16 x i8> %99, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %102 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %102, align 1
  %103 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %103, align 1
  br label %104

104:                                              ; preds = %90, %93
  %105 = icmp eq i64 %46, %51
  br i1 %105, label %279, label %48

106:                                              ; preds = %39, %271
  %107 = phi i32 [ %273, %271 ], [ %40, %39 ]
  %108 = phi i64 [ %272, %271 ], [ %41, %39 ]
  %109 = phi i32 [ %121, %271 ], [ 0, %39 ]
  %110 = getelementptr inbounds i16, i16* %2, i64 %108
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add i32 %109, %112
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds %"struct.android::Trie", %"struct.android::Trie"* %12, i64 0, i32 6, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %116, %20
  %118 = icmp eq i32 %117, %112
  br i1 %118, label %119, label %275

119:                                              ; preds = %106
  %120 = and i32 %116, %26
  %121 = lshr i32 %120, %23
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %"struct.android::Trie", %"struct.android::Trie"* %12, i64 0, i32 6, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = lshr i32 %124, %29
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %271, label %127

127:                                              ; preds = %119
  %128 = zext i32 %125 to i64
  %129 = getelementptr inbounds %"struct.android::Pattern", %"struct.android::Pattern"* %17, i64 0, i32 4, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = lshr i32 %130, 26
  %132 = lshr i32 %130, 20
  %133 = and i32 %132, 63
  %134 = load i32, i32* %35, align 4
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %16, i64 %135
  %137 = and i32 %130, 1048575
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %136, i64 %138
  %140 = trunc i64 %108 to i32
  %141 = add i32 %140, 1
  %142 = sub i32 %141, %131
  %143 = sub i32 %142, %133
  %144 = sub nsw i32 2, %143
  %145 = icmp sgt i32 %144, 0
  %146 = select i1 %145, i32 %144, i32 0
  %147 = sub nsw i32 %36, %143
  %148 = icmp slt i32 %147, %131
  %149 = select i1 %148, i32 %147, i32 %131
  %150 = icmp slt i32 %146, %149
  br i1 %150, label %151, label %271

151:                                              ; preds = %127
  %152 = add i32 %107, %131
  %153 = add i32 %152, %133
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = zext i32 %155 to i64
  %157 = sext i32 %143 to i64
  %158 = sext i32 %149 to i64
  %159 = sub nsw i64 %158, %156
  %160 = icmp ult i64 %159, 32
  br i1 %160, label %258, label %161

161:                                              ; preds = %151
  %162 = add nsw i64 %157, %156
  %163 = getelementptr i8, i8* %1, i64 %162
  %164 = add nsw i64 %158, %157
  %165 = getelementptr i8, i8* %1, i64 %164
  %166 = add nuw nsw i64 %135, %156
  %167 = add nuw nsw i64 %166, %138
  %168 = getelementptr i8, i8* %37, i64 %167
  %169 = add nsw i64 %158, %135
  %170 = add nsw i64 %169, %138
  %171 = getelementptr i8, i8* %38, i64 %170
  %172 = icmp ult i8* %163, %171
  %173 = icmp ult i8* %168, %165
  %174 = and i1 %172, %173
  br i1 %174, label %258, label %175

175:                                              ; preds = %161
  %176 = and i64 %159, -32
  %177 = add nsw i64 %176, %156
  %178 = add nsw i64 %176, -32
  %179 = lshr exact i64 %178, 5
  %180 = add nuw nsw i64 %179, 1
  %181 = and i64 %180, 1
  %182 = icmp eq i64 %178, 0
  br i1 %182, label %232, label %183

183:                                              ; preds = %175
  %184 = sub nuw nsw i64 %180, %181
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 0, %183 ], [ %229, %185 ]
  %187 = phi i64 [ %184, %183 ], [ %230, %185 ]
  %188 = add i64 %186, %156
  %189 = add nsw i64 %188, %157
  %190 = getelementptr inbounds i8, i8* %1, i64 %189
  %191 = getelementptr inbounds i8, i8* %139, i64 %188
  %192 = bitcast i8* %190 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1, !alias.scope !12, !noalias !15
  %194 = getelementptr inbounds i8, i8* %190, i64 16
  %195 = bitcast i8* %194 to <16 x i8>*
  %196 = load <16 x i8>, <16 x i8>* %195, align 1, !alias.scope !12, !noalias !15
  %197 = bitcast i8* %191 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !15
  %199 = getelementptr inbounds i8, i8* %191, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !15
  %202 = icmp ult <16 x i8> %193, %198
  %203 = icmp ult <16 x i8> %196, %201
  %204 = select <16 x i1> %202, <16 x i8> %198, <16 x i8> %193
  %205 = select <16 x i1> %203, <16 x i8> %201, <16 x i8> %196
  %206 = bitcast i8* %190 to <16 x i8>*
  store <16 x i8> %204, <16 x i8>* %206, align 1, !alias.scope !12, !noalias !15
  %207 = bitcast i8* %194 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %207, align 1, !alias.scope !12, !noalias !15
  %208 = or i64 %186, 32
  %209 = add i64 %208, %156
  %210 = add nsw i64 %209, %157
  %211 = getelementptr inbounds i8, i8* %1, i64 %210
  %212 = getelementptr inbounds i8, i8* %139, i64 %209
  %213 = bitcast i8* %211 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !alias.scope !12, !noalias !15
  %215 = getelementptr inbounds i8, i8* %211, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !12, !noalias !15
  %218 = bitcast i8* %212 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !15
  %220 = getelementptr inbounds i8, i8* %212, i64 16
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1, !alias.scope !15
  %223 = icmp ult <16 x i8> %214, %219
  %224 = icmp ult <16 x i8> %217, %222
  %225 = select <16 x i1> %223, <16 x i8> %219, <16 x i8> %214
  %226 = select <16 x i1> %224, <16 x i8> %222, <16 x i8> %217
  %227 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %225, <16 x i8>* %227, align 1, !alias.scope !12, !noalias !15
  %228 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %228, align 1, !alias.scope !12, !noalias !15
  %229 = add i64 %186, 64
  %230 = add i64 %187, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %185, !llvm.loop !17

232:                                              ; preds = %185, %175
  %233 = phi i64 [ 0, %175 ], [ %229, %185 ]
  %234 = icmp eq i64 %181, 0
  br i1 %234, label %256, label %235

235:                                              ; preds = %232
  %236 = add i64 %233, %156
  %237 = add nsw i64 %236, %157
  %238 = getelementptr inbounds i8, i8* %1, i64 %237
  %239 = getelementptr inbounds i8, i8* %139, i64 %236
  %240 = bitcast i8* %238 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !12, !noalias !15
  %242 = getelementptr inbounds i8, i8* %238, i64 16
  %243 = bitcast i8* %242 to <16 x i8>*
  %244 = load <16 x i8>, <16 x i8>* %243, align 1, !alias.scope !12, !noalias !15
  %245 = bitcast i8* %239 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1, !alias.scope !15
  %247 = getelementptr inbounds i8, i8* %239, i64 16
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !15
  %250 = icmp ult <16 x i8> %241, %246
  %251 = icmp ult <16 x i8> %244, %249
  %252 = select <16 x i1> %250, <16 x i8> %246, <16 x i8> %241
  %253 = select <16 x i1> %251, <16 x i8> %249, <16 x i8> %244
  %254 = bitcast i8* %238 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %254, align 1, !alias.scope !12, !noalias !15
  %255 = bitcast i8* %242 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %255, align 1, !alias.scope !12, !noalias !15
  br label %256

256:                                              ; preds = %232, %235
  %257 = icmp eq i64 %159, %176
  br i1 %257, label %271, label %258

258:                                              ; preds = %256, %161, %151
  %259 = phi i64 [ %156, %161 ], [ %156, %151 ], [ %177, %256 ]
  br label %260

260:                                              ; preds = %258, %260
  %261 = phi i64 [ %269, %260 ], [ %259, %258 ]
  %262 = add nsw i64 %261, %157
  %263 = getelementptr inbounds i8, i8* %1, i64 %262
  %264 = getelementptr inbounds i8, i8* %139, i64 %261
  %265 = load i8, i8* %263, align 1
  %266 = load i8, i8* %264, align 1
  %267 = icmp ult i8 %265, %266
  %268 = select i1 %267, i8 %266, i8 %265
  store i8 %268, i8* %263, align 1
  %269 = add nuw nsw i64 %261, 1
  %270 = icmp slt i64 %269, %158
  br i1 %270, label %260, label %271, !llvm.loop !18

271:                                              ; preds = %260, %256, %127, %119
  %272 = add nuw i64 %108, 1
  %273 = add i32 %107, -1
  %274 = icmp eq i64 %272, %3
  br i1 %274, label %275, label %106

275:                                              ; preds = %106, %271, %39
  %276 = add nuw i64 %41, 1
  %277 = add i32 %40, -1
  %278 = icmp eq i64 %276, %31
  br i1 %278, label %43, label %39

279:                                              ; preds = %280, %104, %43
  ret void

280:                                              ; preds = %48, %280
  %281 = phi i64 [ %285, %280 ], [ %49, %48 ]
  %282 = getelementptr inbounds i8, i8* %1, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = and i8 %283, 1
  store i8 %284, i8* %282, align 1
  %285 = add nuw i64 %281, 1
  %286 = icmp eq i64 %285, %30
  br i1 %286, label %279, label %280, !llvm.loop !19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7android10Hyphenator13hyphenateSoftEPhPKtm(%"class.android::Hyphenator"* nocapture readnone, i8* nocapture, i16* nocapture readonly, i64) local_unnamed_addr #4 align 2 {
  %5 = bitcast i16* %2 to i8*
  store i8 0, i8* %1, align 1
  %6 = icmp ugt i64 %3, 1
  br i1 %6, label %7, label %104

7:                                                ; preds = %4
  %8 = add i64 %3, -1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %10, label %27

10:                                               ; preds = %102, %27, %7
  %11 = phi i64 [ 1, %27 ], [ 1, %7 ], [ %38, %102 ]
  %12 = xor i64 %11, -1
  %13 = and i64 %3, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %10
  %16 = add nsw i64 %11, -1
  %17 = getelementptr inbounds i16, i16* %2, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 173
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds i8, i8* %1, i64 %11
  store i8 %20, i8* %21, align 1
  %22 = add nuw i64 %11, 1
  br label %23

23:                                               ; preds = %10, %15
  %24 = phi i64 [ %11, %10 ], [ %22, %15 ]
  %25 = sub i64 0, %3
  %26 = icmp eq i64 %12, %25
  br i1 %26, label %104, label %105

27:                                               ; preds = %7
  %28 = getelementptr i8, i8* %1, i64 1
  %29 = getelementptr i8, i8* %1, i64 %3
  %30 = add i64 %3, -1
  %31 = getelementptr i16, i16* %2, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = icmp ult i8* %28, %32
  %34 = icmp ugt i8* %29, %5
  %35 = and i1 %33, %34
  br i1 %35, label %10, label %36

36:                                               ; preds = %27
  %37 = and i64 %8, -16
  %38 = or i64 %37, 1
  %39 = add i64 %37, -16
  %40 = lshr exact i64 %39, 4
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %83, label %44

44:                                               ; preds = %36
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %80, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %81, %46 ]
  %49 = or i64 %47, 1
  %50 = getelementptr inbounds i16, i16* %2, i64 %47
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !21
  %53 = getelementptr inbounds i16, i16* %50, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !21
  %56 = icmp eq <8 x i16> %52, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %57 = icmp eq <8 x i16> %55, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %58 = zext <8 x i1> %56 to <8 x i8>
  %59 = zext <8 x i1> %57 to <8 x i8>
  %60 = getelementptr inbounds i8, i8* %1, i64 %49
  %61 = bitcast i8* %60 to <8 x i8>*
  store <8 x i8> %58, <8 x i8>* %61, align 1, !alias.scope !24, !noalias !21
  %62 = getelementptr inbounds i8, i8* %60, i64 8
  %63 = bitcast i8* %62 to <8 x i8>*
  store <8 x i8> %59, <8 x i8>* %63, align 1, !alias.scope !24, !noalias !21
  %64 = or i64 %47, 16
  %65 = or i64 %47, 17
  %66 = getelementptr inbounds i16, i16* %2, i64 %64
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !21
  %69 = getelementptr inbounds i16, i16* %66, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !21
  %72 = icmp eq <8 x i16> %68, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %73 = icmp eq <8 x i16> %71, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %74 = zext <8 x i1> %72 to <8 x i8>
  %75 = zext <8 x i1> %73 to <8 x i8>
  %76 = getelementptr inbounds i8, i8* %1, i64 %65
  %77 = bitcast i8* %76 to <8 x i8>*
  store <8 x i8> %74, <8 x i8>* %77, align 1, !alias.scope !24, !noalias !21
  %78 = getelementptr inbounds i8, i8* %76, i64 8
  %79 = bitcast i8* %78 to <8 x i8>*
  store <8 x i8> %75, <8 x i8>* %79, align 1, !alias.scope !24, !noalias !21
  %80 = add i64 %47, 32
  %81 = add i64 %48, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %46, !llvm.loop !26

83:                                               ; preds = %46, %36
  %84 = phi i64 [ 0, %36 ], [ %80, %46 ]
  %85 = icmp eq i64 %42, 0
  br i1 %85, label %102, label %86

86:                                               ; preds = %83
  %87 = or i64 %84, 1
  %88 = getelementptr inbounds i16, i16* %2, i64 %84
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !21
  %91 = getelementptr inbounds i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !21
  %94 = icmp eq <8 x i16> %90, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %95 = icmp eq <8 x i16> %93, <i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173, i16 173>
  %96 = zext <8 x i1> %94 to <8 x i8>
  %97 = zext <8 x i1> %95 to <8 x i8>
  %98 = getelementptr inbounds i8, i8* %1, i64 %87
  %99 = bitcast i8* %98 to <8 x i8>*
  store <8 x i8> %96, <8 x i8>* %99, align 1, !alias.scope !24, !noalias !21
  %100 = getelementptr inbounds i8, i8* %98, i64 8
  %101 = bitcast i8* %100 to <8 x i8>*
  store <8 x i8> %97, <8 x i8>* %101, align 1, !alias.scope !24, !noalias !21
  br label %102

102:                                              ; preds = %83, %86
  %103 = icmp eq i64 %8, %37
  br i1 %103, label %104, label %10

104:                                              ; preds = %23, %105, %102, %4
  ret void

105:                                              ; preds = %23, %105
  %106 = phi i64 [ %119, %105 ], [ %24, %23 ]
  %107 = add i64 %106, -1
  %108 = getelementptr inbounds i16, i16* %2, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = icmp eq i16 %109, 173
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds i8, i8* %1, i64 %106
  store i8 %111, i8* %112, align 1
  %113 = add nuw i64 %106, 1
  %114 = getelementptr inbounds i16, i16* %2, i64 %106
  %115 = load i16, i16* %114, align 2
  %116 = icmp eq i16 %115, 173
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds i8, i8* %1, i64 %113
  store i8 %117, i8* %118, align 1
  %119 = add nuw i64 %106, 2
  %120 = icmp eq i64 %119, %3
  br i1 %120, label %104, label %105, !llvm.loop !27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #3 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #8
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = distinct !{!11, !9}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !20, !9}
!20 = !{!"llvm.loop.unroll.runtime.disable"}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !9}
