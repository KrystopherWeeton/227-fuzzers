; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/ratectrl_rtc.cc'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/ratectrl_rtc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"class.libvpx::VP9RateControlRTC" = type { %struct.VP9_COMP* }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%"struct.libvpx::VP9RateControlRtcConfig" = type { i32, i32, i32, i32, i64, i64, i64, i64, i32, i32, i32, double, i32, i32, [12 x i32], [12 x i32], [5 x i32], [5 x i32], [12 x i32], [5 x i32] }
%"struct.libvpx::VP9FrameParamsQpRTC" = type { i32, i32, i32 }

$_ZN6libvpx17VP9RateControlRTCD2Ev = comdat any

@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.libvpx::VP9RateControlRTC"* @_ZN6libvpx17VP9RateControlRTC6CreateERKNS_23VP9RateControlRtcConfigE(%"struct.libvpx::VP9RateControlRtcConfig"* nocapture readonly dereferenceable(288)) local_unnamed_addr #0 align 2 {
  %2 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 8, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #6
  %3 = icmp eq i8* %2, null
  br i1 %3, label %52, label %4

4:                                                ; preds = %1
  %5 = tail call i8* @vpx_memalign(i64 32, i64 847040) #7
  %6 = bitcast i8* %2 to i8**
  store i8* %5, i8** %6, align 8
  %7 = bitcast i8* %2 to %struct.VP9_COMP**
  %8 = icmp eq i8* %5, null
  %9 = bitcast i8* %2 to %"class.libvpx::VP9RateControlRTC"*
  br i1 %8, label %51, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, i8* %5, i64 190048
  %12 = bitcast i8* %11 to %struct.VP9EncoderConfig*
  %13 = getelementptr inbounds i8, i8* %5, i64 738232
  %14 = bitcast i8* %13 to %struct.RATE_CONTROL*
  %15 = getelementptr inbounds i8, i8* %5, i64 189916
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %5, i64 189920
  %18 = bitcast i8* %17 to i32*
  store i32 8, i32* %18, align 16
  %19 = getelementptr inbounds i8, i8* %5, i64 173040
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 16
  %21 = getelementptr inbounds i8, i8* %5, i64 190156
  %22 = bitcast i8* %21 to i32*
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %5, i64 190140
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %5, i64 190212
  %26 = bitcast i8* %25 to i32*
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %5, i64 190444
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %5, i64 190192
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 8
  tail call void @_ZN6libvpx17VP9RateControlRTC17UpdateRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"* nonnull %9, %"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288) %0) #7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %31, i64 0, i32 104, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp sgt i32 %33, 1
  br i1 %34, label %40, label %35

35:                                               ; preds = %10
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %31, i64 0, i32 104, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, 1
  %39 = zext i1 %38 to i32
  br label %40

40:                                               ; preds = %10, %35
  %41 = phi i32 [ 1, %10 ], [ %39, %35 ]
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %31, i64 0, i32 103
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %5, i64 738544
  %44 = bitcast i8* %43 to i32*
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds i8, i8* %5, i64 738548
  %46 = bitcast i8* %45 to i32*
  store i32 0, i32* %46, align 4
  tail call void @vp9_rc_init_minq_luts() #7
  tail call void @vp9_rc_init(%struct.VP9EncoderConfig* %12, i32 0, %struct.RATE_CONTROL* %14) #7
  %47 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %47, i64 0, i32 75, i32 61
  store i32 1, i32* %48, align 4
  %49 = getelementptr inbounds i8, i8* %5, i64 189908
  %50 = bitcast i8* %49 to i32*
  store i32 0, i32* %50, align 4
  br label %52

51:                                               ; preds = %4
  tail call void @_ZN6libvpx17VP9RateControlRTCD2Ev(%"class.libvpx::VP9RateControlRTC"* nonnull %9) #7
  tail call void @_ZdlPv(i8* nonnull %2) #6
  br label %52

52:                                               ; preds = %1, %40, %51
  %53 = phi %"class.libvpx::VP9RateControlRTC"* [ null, %51 ], [ %9, %40 ], [ null, %1 ]
  ret %"class.libvpx::VP9RateControlRTC"* %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #2

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6libvpx17VP9RateControlRTC15InitRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"* nocapture readonly, %"struct.libvpx::VP9RateControlRtcConfig"* nocapture readonly dereferenceable(288)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 79
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 80
  store i32 8, i32* %8, align 16
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 24
  store i32 1, i32* %9, align 16
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 20
  store i32 1, i32* %10, align 4
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 16
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 31
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 62
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 26
  store i32 0, i32* %14, align 8
  tail call void @_ZN6libvpx17VP9RateControlRTC17UpdateRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"* %0, %"struct.libvpx::VP9RateControlRtcConfig"* dereferenceable(288) %1)
  %15 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %15, i64 0, i32 104, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %24, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %15, i64 0, i32 104, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 1
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %19, %2
  %25 = phi i32 [ 1, %2 ], [ %23, %19 ]
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %15, i64 0, i32 103
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 53
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 54
  store i32 0, i32* %28, align 4
  tail call void @vp9_rc_init_minq_luts() #7
  tail call void @vp9_rc_init(%struct.VP9EncoderConfig* %5, i32 0, %struct.RATE_CONTROL* %6) #7
  %29 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %29, i64 0, i32 75, i32 61
  store i32 1, i32* %30, align 4
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 77
  store i32 0, i32* %31, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6libvpx17VP9RateControlRTC17UpdateRateControlERKNS_23VP9RateControlRtcConfigE(%"class.libvpx::VP9RateControlRTC"* nocapture readonly, %"struct.libvpx::VP9RateControlRtcConfig"* nocapture readonly dereferenceable(288)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 3
  store i32 %6, i32* %7, align 16
  %8 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 4
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* %5, align 8
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 2
  store i32 %11, i32* %12, align 8
  %13 = load i32, i32* %8, align 4
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 3
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = tail call i32 @vp9_quantizer_to_qindex(i32 %16) #7
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 28
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @vp9_quantizer_to_qindex(i32 %20) #7
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 29
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* %18, align 8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 48
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 49
  store i32 %21, i32* %25, align 4
  %26 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 4
  %27 = load i64, i64* %26, align 8
  %28 = mul nsw i64 %27, 1000
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 8
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 5
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 23
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 6
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 24
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 7
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 25
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 8
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 21
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 9
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 22
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 12
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 41
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 13
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 42
  store i32 %49, i32* %50, align 8
  %51 = load i32, i32* %48, align 4
  %52 = icmp sgt i32 %51, 1
  %53 = select i1 %52, i32 %51, i32 0
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 68
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 10
  %56 = load i32, i32* %55, align 8
  %57 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %58 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %57, i64 0, i32 9, i32 12
  store i32 %56, i32* %58, align 4
  %59 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 11
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %62, i64 0, i32 68
  %64 = bitcast double* %63 to i64*
  store i64 %61, i64* %64, align 16
  %65 = load i32, i32* %45, align 8
  %66 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %66, i64 0, i32 104, i32 2
  store i32 %65, i32* %67, align 8
  %68 = load i32, i32* %48, align 4
  %69 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %70 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %69, i64 0, i32 104, i32 3
  store i32 %68, i32* %70, align 4
  %71 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %71, i64 0, i32 104, i32 2
  %73 = load i32, i32* %72, align 8
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %85

75:                                               ; preds = %2, %94
  %76 = phi %struct.VP9_COMP* [ %95, %94 ], [ %71, %2 ]
  %77 = phi i64 [ %96, %94 ], [ 0, %2 ]
  %78 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %76, i64 0, i32 104, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %94

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 16, i64 %77
  %83 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 17, i64 %77
  %84 = trunc i64 %77 to i32
  br label %101

85:                                               ; preds = %94, %2
  %86 = phi %struct.VP9_COMP* [ %71, %2 ], [ %95, %94 ]
  tail call void @vp9_set_rc_buffer_sizes(%struct.VP9_COMP* %86) #7
  %87 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %88 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %87, i64 0, i32 68
  %89 = load double, double* %88, align 16
  tail call void @vp9_new_framerate(%struct.VP9_COMP* %87, double %89) #7
  %90 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %90, i64 0, i32 104, i32 3
  %92 = load i32, i32* %91, align 4
  %93 = icmp sgt i32 %92, 1
  br i1 %93, label %138, label %134

94:                                               ; preds = %101, %75
  %95 = phi %struct.VP9_COMP* [ %76, %75 ], [ %129, %101 ]
  %96 = add nuw nsw i64 %77, 1
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %95, i64 0, i32 104, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %96, %99
  br i1 %100, label %75, label %85

101:                                              ; preds = %81, %101
  %102 = phi i64 [ 0, %81 ], [ %128, %101 ]
  %103 = phi i32 [ %79, %81 ], [ %131, %101 ]
  %104 = phi %struct.VP9_COMP* [ %76, %81 ], [ %129, %101 ]
  %105 = mul nsw i32 %103, %84
  %106 = trunc i64 %102 to i32
  %107 = add nsw i32 %105, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 18, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = mul nsw i32 %110, 1000
  %112 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 43, i64 %108
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 14, i64 %108
  %114 = load i32, i32* %113, align 4
  %115 = tail call i32 @vp9_quantizer_to_qindex(i32 %114) #7
  %116 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %104, i64 0, i32 104, i32 12, i64 %108, i32 0, i32 48
  store i32 %115, i32* %116, align 8
  %117 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 15, i64 %108
  %118 = load i32, i32* %117, align 4
  %119 = tail call i32 @vp9_quantizer_to_qindex(i32 %118) #7
  %120 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %104, i64 0, i32 104, i32 12, i64 %108, i32 0, i32 49
  store i32 %119, i32* %120, align 4
  %121 = load i32, i32* %82, align 4
  %122 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %104, i64 0, i32 104, i32 12, i64 %108, i32 7
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %83, align 4
  %124 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %104, i64 0, i32 104, i32 12, i64 %108, i32 8
  store i32 %123, i32* %124, align 8
  %125 = getelementptr inbounds %"struct.libvpx::VP9RateControlRtcConfig", %"struct.libvpx::VP9RateControlRtcConfig"* %1, i64 0, i32 19, i64 %102
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 9, i32 46, i64 %102
  store i32 %126, i32* %127, align 4
  %128 = add nuw nsw i64 %102, 1
  %129 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %130 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %129, i64 0, i32 104, i32 3
  %131 = load i32, i32* %130, align 4
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %128, %132
  br i1 %133, label %101, label %94

134:                                              ; preds = %85
  %135 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %90, i64 0, i32 104, i32 2
  %136 = load i32, i32* %135, align 8
  %137 = icmp sgt i32 %136, 1
  br i1 %137, label %138, label %150

138:                                              ; preds = %134, %85
  %139 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 77
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %138
  tail call void @vp9_init_layer_context(%struct.VP9_COMP* %90) #7
  %143 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  br label %144

144:                                              ; preds = %142, %138
  %145 = phi %struct.VP9_COMP* [ %143, %142 ], [ %90, %138 ]
  %146 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %145, i64 0, i32 9, i32 8
  %147 = load i64, i64* %146, align 8
  %148 = trunc i64 %147 to i32
  tail call void @vp9_update_layer_context_change_config(%struct.VP9_COMP* %145, i32 %148) #7
  %149 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  br label %150

150:                                              ; preds = %144, %134
  %151 = phi %struct.VP9_COMP* [ %149, %144 ], [ %90, %134 ]
  tail call void @vp9_check_reset_rc_flag(%struct.VP9_COMP* %151) #7
  ret void
}

declare void @vp9_rc_init_minq_luts() local_unnamed_addr #3

declare void @vp9_rc_init(%struct.VP9EncoderConfig*, i32, %struct.RATE_CONTROL*) local_unnamed_addr #3

declare i32 @vp9_quantizer_to_qindex(i32) local_unnamed_addr #3

declare void @vp9_set_rc_buffer_sizes(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_new_framerate(%struct.VP9_COMP*, double) local_unnamed_addr #3

declare void @vp9_init_layer_context(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_update_layer_context_change_config(%struct.VP9_COMP*, i32) local_unnamed_addr #3

declare void @vp9_check_reset_rc_flag(%struct.VP9_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6libvpx17VP9RateControlRTC9ComputeQPERKNS_19VP9FrameParamsQpRTCE(%"class.libvpx::VP9RateControlRTC"* nocapture readonly, %"struct.libvpx::VP9FrameParamsQpRTC"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %8 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %3, align 4
  %11 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %4, align 4
  %12 = getelementptr inbounds %"struct.libvpx::VP9FrameParamsQpRTC", %"struct.libvpx::VP9FrameParamsQpRTC"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 104, i32 0
  store i32 %13, i32* %14, align 16
  %15 = getelementptr inbounds %"struct.libvpx::VP9FrameParamsQpRTC", %"struct.libvpx::VP9FrameParamsQpRTC"* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %17, i64 0, i32 104, i32 1
  store i32 %16, i32* %18, align 4
  %19 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, 1
  br i1 %22, label %28, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 3
  %25 = load i32, i32* %24, align 16
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 4
  %27 = load i32, i32* %26, align 4
  br label %50

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 0
  %30 = load i32, i32* %29, align 16
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %32, %30
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %33, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 9, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 9, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 12, i64 %37, i32 7
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 12, i64 %37, i32 8
  %45 = load i32, i32* %44, align 8
  call void @get_layer_resolution(i32 %39, i32 %41, i32 %43, i32 %45, i32* nonnull %3, i32* nonnull %4) #7
  %46 = load i32, i32* %3, align 4
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 3
  store i32 %46, i32* %47, align 16
  %48 = load i32, i32* %4, align 4
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 4
  store i32 %48, i32* %49, align 4
  br label %50

50:                                               ; preds = %23, %28
  %51 = phi i32 [ %27, %23 ], [ %48, %28 ]
  %52 = phi i32 [ %25, %23 ], [ %46, %28 ]
  call void @vp9_set_mb_mi(%struct.VP9Common* %9, i32 %52, i32 %51) #7
  %53 = getelementptr inbounds %"struct.libvpx::VP9FrameParamsQpRTC", %"struct.libvpx::VP9FrameParamsQpRTC"* %1, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 23
  store i32 %54, i32* %55, align 4
  %56 = icmp eq i32 %54, 0
  %57 = zext i1 %56 to i32
  %58 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %58, i64 0, i32 41
  store i32 %57, i32* %59, align 4
  %60 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %61 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %60, i64 0, i32 75, i32 61
  store i32 1, i32* %61, align 4
  %62 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %62, i64 0, i32 104, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %85

66:                                               ; preds = %50
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %62, i64 0, i32 104, i32 3
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %85

70:                                               ; preds = %66
  %71 = load i32, i32* %55, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %8, i64 0, i32 8, i32 27
  %75 = load i8, i8* %74, align 4
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %70, %73
  %78 = call i32 @vp9_calc_iframe_target_size_one_pass_cbr(%struct.VP9_COMP* %62) #7
  br label %81

79:                                               ; preds = %73
  %80 = call i32 @vp9_calc_pframe_target_size_one_pass_cbr(%struct.VP9_COMP* %62) #7
  br label %81

81:                                               ; preds = %79, %77
  %82 = phi i32 [ %78, %77 ], [ %80, %79 ]
  %83 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  call void @vp9_rc_set_frame_target(%struct.VP9_COMP* %83, i32 %82) #7
  %84 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  call void @vp9_update_buffer_level_preencode(%struct.VP9_COMP* %84) #7
  br label %88

85:                                               ; preds = %66, %50
  call void @vp9_update_temporal_layer_framerate(%struct.VP9_COMP* %62) #7
  %86 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  call void @vp9_restore_layer_context(%struct.VP9_COMP* %86) #7
  %87 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  call void @vp9_rc_get_svc_params(%struct.VP9_COMP* %87) #7
  br label %88

88:                                               ; preds = %85, %81
  %89 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %89) #7
  store i32 -1431655766, i32* %5, align 4
  %90 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #7
  store i32 -1431655766, i32* %6, align 4
  %91 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %92 = call i32 @vp9_rc_pick_q_and_bounds(%struct.VP9_COMP* %91, i32* nonnull %5, i32* nonnull %6) #7
  %93 = load %struct.VP9_COMP*, %struct.VP9_COMP** %7, align 8
  %94 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %93, i64 0, i32 8, i32 38
  store i32 %92, i32* %94, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %89) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret void
}

declare void @get_layer_resolution(i32, i32, i32, i32, i32*, i32*) local_unnamed_addr #3

declare void @vp9_set_mb_mi(%struct.VP9Common*, i32, i32) local_unnamed_addr #3

declare i32 @vp9_calc_iframe_target_size_one_pass_cbr(%struct.VP9_COMP*) local_unnamed_addr #3

declare i32 @vp9_calc_pframe_target_size_one_pass_cbr(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_rc_set_frame_target(%struct.VP9_COMP*, i32) local_unnamed_addr #3

declare void @vp9_update_buffer_level_preencode(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_update_temporal_layer_framerate(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_restore_layer_context(%struct.VP9_COMP*) local_unnamed_addr #3

declare void @vp9_rc_get_svc_params(%struct.VP9_COMP*) local_unnamed_addr #3

declare i32 @vp9_rc_pick_q_and_bounds(%struct.VP9_COMP*, i32*, i32*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6libvpx17VP9RateControlRTC5GetQPEv(%"class.libvpx::VP9RateControlRTC"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %3 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %3, i64 0, i32 8, i32 38
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK6libvpx17VP9RateControlRTC18GetLoopfilterLevelEv(%"class.libvpx::VP9RateControlRTC"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %3 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  tail call void @vp9_pick_filter_level(%struct.yv12_buffer_config* null, %struct.VP9_COMP* %3, i32 2) #7
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %3, i64 0, i32 8, i32 68, i32 0
  %5 = load i32, i32* %4, align 8
  ret i32 %5
}

declare void @vp9_pick_filter_level(%struct.yv12_buffer_config*, %struct.VP9_COMP*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6libvpx17VP9RateControlRTC16PostEncodeUpdateEm(%"class.libvpx::VP9RateControlRTC"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  tail call void @vp9_rc_postencode_update(%struct.VP9_COMP* %4, i64 %1) #7
  %5 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %5, i64 0, i32 104, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %5, i64 0, i32 104, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9, %2
  tail call void @vp9_save_layer_context(%struct.VP9_COMP* %5) #7
  %14 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  br label %15

15:                                               ; preds = %13, %9
  %16 = phi %struct.VP9_COMP* [ %14, %13 ], [ %5, %9 ]
  %17 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %16, i64 0, i32 8, i32 77
  %18 = load i32, i32* %17, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %17, align 4
  ret void
}

declare void @vp9_rc_postencode_update(%struct.VP9_COMP*, i64) local_unnamed_addr #3

declare void @vp9_save_layer_context(%struct.VP9_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6libvpx17VP9RateControlRTCD2Ev(%"class.libvpx::VP9RateControlRTC"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.libvpx::VP9RateControlRTC", %"class.libvpx::VP9RateControlRTC"* %0, i64 0, i32 0
  %3 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  %4 = icmp eq %struct.VP9_COMP* %3, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %3, i64 0, i32 104, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5, %18
  %10 = phi %struct.VP9_COMP* [ %19, %18 ], [ %3, %5 ]
  %11 = phi i32 [ %20, %18 ], [ 0, %5 ]
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %10, i64 0, i32 104, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %24, label %18

15:                                               ; preds = %18, %5
  %16 = phi %struct.VP9_COMP* [ %3, %5 ], [ %19, %18 ]
  %17 = bitcast %struct.VP9_COMP* %16 to i8*
  tail call void @vpx_free(i8* %17) #7
  br label %43

18:                                               ; preds = %24, %9
  %19 = phi %struct.VP9_COMP* [ %10, %9 ], [ %39, %24 ]
  %20 = add nuw nsw i32 %11, 1
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %19, i64 0, i32 104, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %20, %22
  br i1 %23, label %9, label %15

24:                                               ; preds = %9, %24
  %25 = phi %struct.VP9_COMP* [ %39, %24 ], [ %10, %9 ]
  %26 = phi i32 [ %38, %24 ], [ 0, %9 ]
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 42
  %28 = load i32, i32* %27, align 16
  %29 = mul nsw i32 %28, %11
  %30 = add nsw i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 23
  %33 = load i8*, i8** %32, align 8
  tail call void @vpx_free(i8* %33) #7
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 24
  %35 = load i8*, i8** %34, align 8
  tail call void @vpx_free(i8* %35) #7
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 104, i32 12, i64 %31, i32 25
  %37 = load i8*, i8** %36, align 8
  tail call void @vpx_free(i8* %37) #7
  %38 = add nuw nsw i32 %26, 1
  %39 = load %struct.VP9_COMP*, %struct.VP9_COMP** %2, align 8
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %39, i64 0, i32 104, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %38, %41
  br i1 %42, label %24, label %18

43:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @vpx_free(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
