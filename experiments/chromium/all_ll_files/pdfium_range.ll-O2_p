; ModuleID = '../../pdf/pdfium/pdfium_range.cc'
source_filename = "../../pdf/pdfium/pdfium_range.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.chrome_pdf::PDFiumRange" = type { %"class.chrome_pdf::PDFiumPage"*, i32, i32, %"class.std::__1::vector.5", %"class.gfx::Point", double }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.7" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.gfx::Rect"* }
%"class.gfx::Point" = type { i32, i32 }
%"class.chrome_pdf::PDFiumPage" = type <{ %"class.chrome_pdf::PDFiumEngine"*, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", i32, i32, %"class.gfx::Rect", i8, [7 x i8], %"class.std::__1::vector", i8, [7 x i8], %"class.std::__1::vector.21", i8, [7 x i8], %"class.std::__1::vector.28", %"class.std::__1::vector.35", %"class.std::__1::vector.42", %"class.std::__1::vector.56", i8, i8, [6 x i8], %"class.std::__1::set", %"class.base::OnceCallback", i8, [7 x i8] }>
%"class.chrome_pdf::PDFiumEngine" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.fpdf_page_t__* }
%struct.fpdf_page_t__ = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.fpdf_textpage_t__* }
%struct.fpdf_textpage_t__ = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.chrome_pdf::PDFiumPage::Link"*, %"struct.chrome_pdf::PDFiumPage::Link"*, %"class.std::__1::__compressed_pair.16" }
%"struct.chrome_pdf::PDFiumPage::Link" = type { i32, i32, %"class.std::__1::vector.5", %"struct.chrome_pdf::PDFiumPage::LinkTarget" }
%"struct.chrome_pdf::PDFiumPage::LinkTarget" = type <{ %"class.std::__1::basic_string", i32, %"class.absl::optional", %"class.absl::optional", %"class.absl::optional", [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.15 }
%union.anon.15 = type { float }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.chrome_pdf::PDFiumPage::Link"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"struct.chrome_pdf::PDFiumPage::Image"*, %"struct.chrome_pdf::PDFiumPage::Image"*, %"class.std::__1::__compressed_pair.23" }
%"struct.chrome_pdf::PDFiumPage::Image" = type { %"class.gfx::Rect", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.chrome_pdf::PDFiumPage::Image"* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"struct.chrome_pdf::PDFiumPage::Highlight"*, %"struct.chrome_pdf::PDFiumPage::Highlight"*, %"class.std::__1::__compressed_pair.30" }
%"struct.chrome_pdf::PDFiumPage::Highlight" = type { i32, i32, %"class.gfx::Rect", i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.chrome_pdf::PDFiumPage::Highlight"* }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"struct.chrome_pdf::PDFiumPage::TextField"*, %"struct.chrome_pdf::PDFiumPage::TextField"*, %"class.std::__1::__compressed_pair.37" }
%"struct.chrome_pdf::PDFiumPage::TextField" = type { %"struct.chrome_pdf::PDFiumPage::FormField.base", %"class.std::__1::basic_string" }
%"struct.chrome_pdf::PDFiumPage::FormField.base" = type <{ %"class.gfx::Rect", %"class.std::__1::basic_string", i32 }>
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.chrome_pdf::PDFiumPage::TextField"* }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"struct.chrome_pdf::PDFiumPage::ChoiceField"*, %"struct.chrome_pdf::PDFiumPage::ChoiceField"*, %"class.std::__1::__compressed_pair.51" }
%"struct.chrome_pdf::PDFiumPage::ChoiceField" = type { %"struct.chrome_pdf::PDFiumPage::FormField.base", %"class.std::__1::vector.44" }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.chrome_pdf::PDFiumPage::ChoiceFieldOption"*, %"struct.chrome_pdf::PDFiumPage::ChoiceFieldOption"*, %"class.std::__1::__compressed_pair.46" }
%"struct.chrome_pdf::PDFiumPage::ChoiceFieldOption" = type <{ %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.chrome_pdf::PDFiumPage::ChoiceFieldOption"* }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.chrome_pdf::PDFiumPage::ChoiceField"* }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"struct.chrome_pdf::PDFiumPage::Button"*, %"struct.chrome_pdf::PDFiumPage::Button"*, %"class.std::__1::__compressed_pair.58" }
%"struct.chrome_pdf::PDFiumPage::Button" = type { %"struct.chrome_pdf::PDFiumPage::FormField.base", %"class.std::__1::basic_string", i32, i8, i32, i32 }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.chrome_pdf::PDFiumPage::Button"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.63", %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.75 }
%union.anon.75 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter" = type <{ %"class.std::__1::basic_string.72"*, i8*, i64, i8, i8, [6 x i8] }>
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.76 }
%struct.anon.76 = type { %"struct.std::__1::__padding.77", i8 }
%"struct.std::__1::__padding.77" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZN10chrome_pdf11PDFiumRangeC1EPNS_10PDFiumPageEii = hidden unnamed_addr alias void (%"class.chrome_pdf::PDFiumRange"*, %"class.chrome_pdf::PDFiumPage"*, i32, i32), void (%"class.chrome_pdf::PDFiumRange"*, %"class.chrome_pdf::PDFiumPage"*, i32, i32)* @_ZN10chrome_pdf11PDFiumRangeC2EPNS_10PDFiumPageEii
@_ZN10chrome_pdf11PDFiumRangeC1ERKS0_ = hidden unnamed_addr alias void (%"class.chrome_pdf::PDFiumRange"*, %"class.chrome_pdf::PDFiumRange"*), void (%"class.chrome_pdf::PDFiumRange"*, %"class.chrome_pdf::PDFiumRange"*)* @_ZN10chrome_pdf11PDFiumRangeC2ERKS0_
@_ZN10chrome_pdf11PDFiumRangeD1Ev = hidden unnamed_addr alias void (%"class.chrome_pdf::PDFiumRange"*), void (%"class.chrome_pdf::PDFiumRange"*)* @_ZN10chrome_pdf11PDFiumRangeD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN10chrome_pdf20IsIgnorableCharacterEDs(i16 zeroext) local_unnamed_addr #0 {
  %2 = icmp eq i16 %0, 8203
  %3 = icmp eq i16 %0, -2
  %4 = or i1 %2, %3
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf11PDFiumRangeC2EPNS_10PDFiumPageEii(%"class.chrome_pdf::PDFiumRange"* nocapture, %"class.chrome_pdf::PDFiumPage"*, i32, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 0
  store %"class.chrome_pdf::PDFiumPage"* %1, %"class.chrome_pdf::PDFiumPage"** %5, align 8
  %6 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 8
  %7 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 2
  store i32 %3, i32* %7, align 4
  %8 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3
  %9 = bitcast %"class.std::__1::vector.5"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf11PDFiumRangeC2ERKS0_(%"class.chrome_pdf::PDFiumRange"*, %"class.chrome_pdf::PDFiumRange"* nocapture readonly dereferenceable(56)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.chrome_pdf::PDFiumRange"* %0 to i8*
  %4 = bitcast %"class.chrome_pdf::PDFiumRange"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 3
  %7 = bitcast %"class.std::__1::vector.5"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #12
  %8 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast %"class.gfx::Rect"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.5"* %6 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %43, label %16

16:                                               ; preds = %2
  %17 = icmp ugt i64 %14, 1152921504606846975
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.std::__1::vector.5"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #13
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #14
  %22 = bitcast i8* %21 to %"class.gfx::Rect"*
  %23 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 1
  %24 = bitcast %"class.gfx::Rect"** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %"class.std::__1::vector.5"* %5 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %22, i64 %14
  %27 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  store %"class.gfx::Rect"* %26, %"class.gfx::Rect"** %27, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %6, i64 0, i32 0, i32 0
  %29 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %28, align 8
  %30 = load i64, i64* %9, align 8
  %31 = bitcast %"class.gfx::Rect"** %23 to i64*
  %32 = ptrtoint i8* %21 to i64
  %33 = ptrtoint %"class.gfx::Rect"* %29 to i64
  %34 = sub i64 %30, %33
  %35 = icmp sgt i64 %34, 0
  br i1 %35, label %36, label %41

36:                                               ; preds = %20
  %37 = lshr exact i64 %34, 4
  %38 = bitcast %"class.gfx::Rect"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %38, i64 %34, i1 false) #12
  %39 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %22, i64 %37
  %40 = ptrtoint %"class.gfx::Rect"* %39 to i64
  br label %41

41:                                               ; preds = %36, %20
  %42 = phi i64 [ %40, %36 ], [ %32, %20 ]
  store i64 %42, i64* %31, align 8
  br label %43

43:                                               ; preds = %2, %41
  %44 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 4
  %45 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 4
  %46 = bitcast %"class.gfx::Point"* %44 to i8*
  %47 = bitcast %"class.gfx::Point"* %45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf11PDFiumRangeD2Ev(%"class.chrome_pdf::PDFiumRange"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %2, align 8
  %4 = icmp eq %"class.gfx::Rect"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.gfx::Rect"* %3 to i64
  %7 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.gfx::Rect"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN10chrome_pdf11PDFiumRange12SetCharCountEi(%"class.chrome_pdf::PDFiumRange"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 2
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 4
  %5 = bitcast %"class.gfx::Point"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector.5"* @_ZNK10chrome_pdf11PDFiumRange14GetScreenRectsERKN3gfx5PointEdNS_15PageOrientationE(%"class.chrome_pdf::PDFiumRange"*, %"class.gfx::Point"* dereferenceable(8), double, i8 zeroext) local_unnamed_addr #1 align 2 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %9, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 4, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 5
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, %2
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3
  br label %150

27:                                               ; preds = %4, %21, %15
  %28 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3
  %29 = bitcast %"class.std::__1::vector.5"* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 1
  %32 = bitcast %"class.gfx::Rect"** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast %"class.gfx::Point"* %1 to i64*
  %34 = bitcast %"class.gfx::Point"* %9 to i64*
  %35 = load i64, i64* %33, align 4
  store i64 %35, i64* %34, align 8
  %36 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 5
  store double %2, double* %36, align 8
  %37 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %150, label %42

42:                                               ; preds = %27
  %43 = icmp slt i32 %40, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %42
  %45 = sub nsw i32 0, %40
  %46 = add i32 %38, 1
  %47 = add i32 %46, %40
  br label %48

48:                                               ; preds = %42, %44
  %49 = phi i32 [ %47, %44 ], [ %38, %42 ]
  %50 = phi i32 [ %45, %44 ], [ %40, %42 ]
  %51 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 0
  %52 = load %"class.chrome_pdf::PDFiumPage"*, %"class.chrome_pdf::PDFiumPage"** %51, align 8
  %53 = tail call %struct.fpdf_textpage_t__* @_ZN10chrome_pdf10PDFiumPage11GetTextPageEv(%"class.chrome_pdf::PDFiumPage"* %52) #12
  %54 = tail call i32 @FPDFText_CountRects(%struct.fpdf_textpage_t__* %53, i32 %49, i32 %50) #12
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %150

56:                                               ; preds = %48
  %57 = bitcast double* %5 to i8*
  %58 = bitcast double* %6 to i8*
  %59 = bitcast double* %7 to i8*
  %60 = bitcast double* %8 to i8*
  %61 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.gfx::Rect"** %61 to i64*
  %63 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %28, i64 0, i32 0, i32 0
  br label %64

64:                                               ; preds = %147, %56
  %65 = phi i32 [ 0, %56 ], [ %148, %147 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  %66 = load %"class.chrome_pdf::PDFiumPage"*, %"class.chrome_pdf::PDFiumPage"** %51, align 8
  %67 = call %struct.fpdf_textpage_t__* @_ZN10chrome_pdf10PDFiumPage11GetTextPageEv(%"class.chrome_pdf::PDFiumPage"* %66) #12
  %68 = call i32 @FPDFText_GetRect(%struct.fpdf_textpage_t__* %67, i32 %65, double* nonnull %5, double* nonnull %6, double* nonnull %7, double* nonnull %8) #12
  %69 = load %"class.chrome_pdf::PDFiumPage"*, %"class.chrome_pdf::PDFiumPage"** %51, align 8
  %70 = load double, double* %5, align 8
  %71 = load double, double* %6, align 8
  %72 = load double, double* %7, align 8
  %73 = load double, double* %8, align 8
  %74 = call { i64, i64 } @_ZNK10chrome_pdf10PDFiumPage12PageToScreenERKN3gfx5PointEdddddNS_15PageOrientationE(%"class.chrome_pdf::PDFiumPage"* %69, %"class.gfx::Point"* dereferenceable(8) %1, double %2, double %70, double %71, double %72, double %73, i8 zeroext %3) #12
  %75 = extractvalue { i64, i64 } %74, 0
  %76 = extractvalue { i64, i64 } %74, 1
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 0
  %79 = icmp ult i64 %76, 4294967296
  %80 = or i1 %79, %78
  br i1 %80, label %147, label %81

81:                                               ; preds = %64
  %82 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %31, align 8
  %83 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %61, align 8
  %84 = icmp eq %"class.gfx::Rect"* %82, %83
  %85 = ptrtoint %"class.gfx::Rect"* %83 to i64
  br i1 %84, label %92, label %86

86:                                               ; preds = %81
  %87 = bitcast %"class.gfx::Rect"* %82 to i64*
  store i64 %75, i64* %87, align 4
  %88 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %82, i64 0, i32 1
  %89 = bitcast %"class.gfx::Size"* %88 to i64*
  store i64 %76, i64* %89, align 4
  %90 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %82, i64 1
  %91 = ptrtoint %"class.gfx::Rect"* %90 to i64
  store i64 %91, i64* %32, align 8
  br label %147

92:                                               ; preds = %81
  %93 = ptrtoint %"class.gfx::Rect"* %82 to i64
  %94 = load i64, i64* %29, align 8
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 4
  %97 = add nsw i64 %96, 1
  %98 = icmp ugt i64 %97, 1152921504606846975
  br i1 %98, label %99, label %101

99:                                               ; preds = %92
  %100 = bitcast %"class.std::__1::vector.5"* %28 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %100) #13
  unreachable

101:                                              ; preds = %92
  %102 = sub i64 %85, %94
  %103 = ashr exact i64 %102, 4
  %104 = icmp ult i64 %103, 576460752303423487
  br i1 %104, label %105, label %113

105:                                              ; preds = %101
  %106 = ashr exact i64 %102, 3
  %107 = icmp ult i64 %106, %97
  %108 = select i1 %107, i64 %97, i64 %106
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %118, label %110

110:                                              ; preds = %105
  %111 = icmp ugt i64 %108, 1152921504606846975
  br i1 %111, label %112, label %113

112:                                              ; preds = %110
  call void @abort() #13
  unreachable

113:                                              ; preds = %110, %101
  %114 = phi i64 [ %108, %110 ], [ 1152921504606846975, %101 ]
  %115 = shl i64 %114, 4
  %116 = call i8* @_Znwm(i64 %115) #14
  %117 = bitcast i8* %116 to %"class.gfx::Rect"*
  br label %118

118:                                              ; preds = %113, %105
  %119 = phi i64 [ %114, %113 ], [ 0, %105 ]
  %120 = phi %"class.gfx::Rect"* [ %117, %113 ], [ null, %105 ]
  %121 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %120, i64 %96
  %122 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %120, i64 %119
  %123 = ptrtoint %"class.gfx::Rect"* %122 to i64
  %124 = bitcast %"class.gfx::Rect"* %121 to i64*
  store i64 %75, i64* %124, align 4
  %125 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %120, i64 %96, i32 1
  %126 = bitcast %"class.gfx::Size"* %125 to i64*
  store i64 %76, i64* %126, align 4
  %127 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %121, i64 1
  %128 = ptrtoint %"class.gfx::Rect"* %127 to i64
  %129 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %63, align 8
  %130 = load i64, i64* %32, align 8
  %131 = ptrtoint %"class.gfx::Rect"* %129 to i64
  %132 = sub i64 %130, %131
  %133 = ashr exact i64 %132, 4
  %134 = sub nsw i64 0, %133
  %135 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %121, i64 %134
  %136 = ptrtoint %"class.gfx::Rect"* %135 to i64
  %137 = icmp sgt i64 %132, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %118
  %139 = bitcast %"class.gfx::Rect"* %135 to i8*
  %140 = bitcast %"class.gfx::Rect"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %139, i8* align 4 %140, i64 %132, i1 false) #12
  %141 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %63, align 8
  br label %142

142:                                              ; preds = %138, %118
  %143 = phi %"class.gfx::Rect"* [ %129, %118 ], [ %141, %138 ]
  store i64 %136, i64* %29, align 8
  store i64 %128, i64* %32, align 8
  store i64 %123, i64* %62, align 8
  %144 = icmp eq %"class.gfx::Rect"* %143, null
  br i1 %144, label %147, label %145

145:                                              ; preds = %142
  %146 = bitcast %"class.gfx::Rect"* %143 to i8*
  call void @_ZdlPv(i8* %146) #14
  br label %147

147:                                              ; preds = %64, %145, %142, %86
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #12
  %148 = add nuw nsw i32 %65, 1
  %149 = icmp eq i32 %148, %54
  br i1 %149, label %150, label %64

150:                                              ; preds = %147, %48, %27, %25
  %151 = phi %"class.std::__1::vector.5"* [ %26, %25 ], [ %28, %27 ], [ %28, %48 ], [ %28, %147 ]
  ret %"class.std::__1::vector.5"* %151
}

declare i32 @FPDFText_CountRects(%struct.fpdf_textpage_t__*, i32, i32) local_unnamed_addr #4

declare %struct.fpdf_textpage_t__* @_ZN10chrome_pdf10PDFiumPage11GetTextPageEv(%"class.chrome_pdf::PDFiumPage"*) local_unnamed_addr #4

declare i32 @FPDFText_GetRect(%struct.fpdf_textpage_t__*, i32, double*, double*, double*, double*) local_unnamed_addr #4

declare { i64, i64 } @_ZNK10chrome_pdf10PDFiumPage12PageToScreenERKN3gfx5PointEdddddNS_15PageOrientationE(%"class.chrome_pdf::PDFiumPage"*, %"class.gfx::Point"* dereferenceable(8), double, double, double, double, double, i8 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10chrome_pdf11PDFiumRange7GetTextEv(%"class.std::__1::basic_string.72"* noalias sret, %"class.chrome_pdf::PDFiumRange"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter", align 8
  %4 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.std::__1::basic_string.72", %"class.std::__1::basic_string.72"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string.72", %"class.std::__1::basic_string.72"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::basic_string.72"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #12
  %11 = icmp eq i32 %7, 0
  br i1 %11, label %466, label %12

12:                                               ; preds = %2
  %13 = icmp slt i32 %7, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %12
  %15 = sub nsw i32 0, %7
  %16 = add i32 %5, 1
  %17 = add i32 %16, %7
  br label %18

18:                                               ; preds = %14, %12
  %19 = phi i32 [ %15, %14 ], [ %7, %12 ]
  %20 = phi i32 [ %17, %14 ], [ %5, %12 ]
  %21 = bitcast %"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #12
  %22 = sext i32 %19 to i64
  %23 = bitcast %"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  call void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEEC1EPS8_mb(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* nonnull %3, %"class.std::__1::basic_string.72"* %0, i64 %22, i1 zeroext false) #12
  %24 = call i8* @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE7GetDataEv(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* nonnull %3) #12
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds %"class.chrome_pdf::PDFiumRange", %"class.chrome_pdf::PDFiumRange"* %1, i64 0, i32 0
  %27 = load %"class.chrome_pdf::PDFiumPage"*, %"class.chrome_pdf::PDFiumPage"** %26, align 8
  %28 = call %struct.fpdf_textpage_t__* @_ZN10chrome_pdf10PDFiumPage11GetTextPageEv(%"class.chrome_pdf::PDFiumPage"* %27) #12
  %29 = call i32 @FPDFText_GetText(%struct.fpdf_textpage_t__* %28, i32 %20, i32 %19, i16* %25) #12
  %30 = icmp sgt i32 %29, -1
  br i1 %30, label %32, label %31, !prof !2

31:                                               ; preds = %18
  call void @llvm.trap() #12
  unreachable

32:                                               ; preds = %18
  %33 = sext i32 %29 to i64
  call void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE5CloseEm(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* nonnull %3, i64 %33) #12
  call void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED1Ev(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #12
  %34 = bitcast %"class.std::__1::basic_string.72"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = load i16*, i16** %8, align 8
  %39 = load i64, i64* %9, align 8
  %40 = bitcast %"class.std::__1::basic_string.72"* %0 to i16*
  %41 = zext i8 %36 to i64
  %42 = select i1 %37, i16* %38, i16* %40
  %43 = select i1 %37, i64 %39, i64 %41
  %44 = getelementptr inbounds i16, i16* %42, i64 %43
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %32, %49
  %47 = phi i16* [ %50, %49 ], [ %42, %32 ]
  %48 = load i16, i16* %47, align 2
  switch i16 %48, label %49 [
    i16 -2, label %54
    i16 8203, label %54
  ]

49:                                               ; preds = %46
  %50 = getelementptr inbounds i16, i16* %47, i64 1
  %51 = icmp eq i16* %50, %44
  br i1 %51, label %52, label %46

52:                                               ; preds = %49
  %53 = ptrtoint i16* %44 to i64
  br label %107

54:                                               ; preds = %46, %46, %32
  %55 = phi i16* [ %42, %32 ], [ %47, %46 ], [ %47, %46 ]
  %56 = ptrtoint i16* %55 to i64
  %57 = icmp eq i16* %55, %44
  br i1 %57, label %107, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i16, i16* %55, i64 1
  %60 = icmp eq i16* %59, %44
  br i1 %60, label %107, label %61

61:                                               ; preds = %58
  %62 = add i64 %43, -2
  %63 = getelementptr i16, i16* %42, i64 %62
  %64 = ptrtoint i16* %63 to i64
  %65 = sub i64 %64, %56
  %66 = lshr i64 %65, 1
  %67 = add nuw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %84, label %70

70:                                               ; preds = %61, %79
  %71 = phi i16* [ %81, %79 ], [ %59, %61 ]
  %72 = phi i64 [ %80, %79 ], [ %56, %61 ]
  %73 = phi i64 [ %82, %79 ], [ %68, %61 ]
  %74 = load i16, i16* %71, align 2
  switch i16 %74, label %75 [
    i16 -2, label %79
    i16 8203, label %79
  ]

75:                                               ; preds = %70
  %76 = inttoptr i64 %72 to i16*
  store i16 %74, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %76, i64 1
  %78 = ptrtoint i16* %77 to i64
  br label %79

79:                                               ; preds = %75, %70, %70
  %80 = phi i64 [ %72, %70 ], [ %78, %75 ], [ %72, %70 ]
  %81 = getelementptr inbounds i16, i16* %71, i64 1
  %82 = add i64 %73, -1
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %70, !llvm.loop !3

84:                                               ; preds = %79, %61
  %85 = phi i64 [ undef, %61 ], [ %80, %79 ]
  %86 = phi i16* [ %59, %61 ], [ %81, %79 ]
  %87 = phi i64 [ %56, %61 ], [ %80, %79 ]
  %88 = icmp ult i64 %65, 6
  br i1 %88, label %101, label %89

89:                                               ; preds = %84, %487
  %90 = phi i16* [ %489, %487 ], [ %86, %84 ]
  %91 = phi i64 [ %488, %487 ], [ %87, %84 ]
  %92 = load i16, i16* %90, align 2
  switch i16 %92, label %93 [
    i16 -2, label %97
    i16 8203, label %97
  ]

93:                                               ; preds = %89
  %94 = inttoptr i64 %91 to i16*
  store i16 %92, i16* %94, align 2
  %95 = getelementptr inbounds i16, i16* %94, i64 1
  %96 = ptrtoint i16* %95 to i64
  br label %97

97:                                               ; preds = %93, %89, %89
  %98 = phi i64 [ %91, %89 ], [ %96, %93 ], [ %91, %89 ]
  %99 = getelementptr inbounds i16, i16* %90, i64 1
  %100 = load i16, i16* %99, align 2
  switch i16 %100, label %467 [
    i16 -2, label %471
    i16 8203, label %471
  ]

101:                                              ; preds = %487, %84
  %102 = phi i64 [ %85, %84 ], [ %488, %487 ]
  %103 = load i8, i8* %35, align 1
  %104 = load i16*, i16** %8, align 8
  %105 = load i64, i64* %9, align 8
  %106 = zext i8 %103 to i64
  br label %107

107:                                              ; preds = %101, %58, %54, %52
  %108 = phi i64 [ %106, %101 ], [ %41, %52 ], [ %41, %54 ], [ %41, %58 ]
  %109 = phi i64 [ %105, %101 ], [ %39, %52 ], [ %39, %54 ], [ %39, %58 ]
  %110 = phi i16* [ %104, %101 ], [ %38, %52 ], [ %38, %54 ], [ %38, %58 ]
  %111 = phi i8 [ %103, %101 ], [ %36, %52 ], [ %36, %54 ], [ %36, %58 ]
  %112 = phi i64 [ %102, %101 ], [ %53, %52 ], [ %56, %54 ], [ %56, %58 ]
  %113 = icmp slt i8 %111, 0
  %114 = getelementptr inbounds i16, i16* %110, i64 %109
  %115 = ptrtoint i16* %110 to i64
  %116 = getelementptr inbounds i16, i16* %40, i64 %108
  %117 = ptrtoint %"class.std::__1::basic_string.72"* %0 to i64
  %118 = select i1 %113, i16* %114, i16* %116
  %119 = select i1 %113, i64 %115, i64 %117
  %120 = select i1 %113, i64 %109, i64 %108
  %121 = ptrtoint i16* %118 to i64
  %122 = sub i64 %112, %119
  %123 = sub i64 %121, %112
  %124 = ashr exact i64 %122, 1
  %125 = ashr exact i64 %123, 1
  %126 = icmp ult i64 %120, %124
  br i1 %126, label %127, label %129

127:                                              ; preds = %107
  %128 = bitcast %"class.std::__1::basic_string.72"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %128) #13
  unreachable

129:                                              ; preds = %107
  switch i64 %125, label %136 [
    i64 -1, label %130
    i64 0, label %466
  ]

130:                                              ; preds = %129
  br i1 %113, label %131, label %133

131:                                              ; preds = %130
  %132 = getelementptr inbounds i16, i16* %110, i64 %124
  store i16 0, i16* %132, align 2
  store i64 %124, i64* %9, align 8
  br label %466

133:                                              ; preds = %130
  %134 = getelementptr inbounds i16, i16* %40, i64 %124
  store i16 0, i16* %134, align 2
  %135 = trunc i64 %124 to i8
  store i8 %135, i8* %35, align 1
  br label %466

136:                                              ; preds = %129
  %137 = select i1 %113, i16* %110, i16* %40
  %138 = sub i64 %120, %124
  %139 = icmp ult i64 %138, %125
  %140 = select i1 %139, i64 %138, i64 %125
  %141 = sub i64 %138, %140
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %457, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds i16, i16* %137, i64 %124
  %145 = getelementptr inbounds i16, i16* %144, i64 %140
  %146 = icmp sgt i64 %140, 0
  br i1 %146, label %147, label %291

147:                                              ; preds = %143
  %148 = icmp ult i64 %141, 16
  br i1 %148, label %238, label %149

149:                                              ; preds = %147
  %150 = sub i64 %120, %140
  %151 = getelementptr i16, i16* %137, i64 %150
  %152 = getelementptr i16, i16* %137, i64 %120
  %153 = icmp ult i16* %144, %152
  %154 = icmp ult i16* %145, %151
  %155 = and i1 %153, %154
  br i1 %155, label %238, label %156

156:                                              ; preds = %149
  %157 = and i64 %141, -16
  %158 = sub i64 %141, %157
  %159 = getelementptr i16, i16* %145, i64 %157
  %160 = getelementptr i16, i16* %144, i64 %157
  %161 = add i64 %157, -16
  %162 = lshr exact i64 %161, 4
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 3
  %165 = icmp ult i64 %161, 48
  br i1 %165, label %217, label %166

166:                                              ; preds = %156
  %167 = sub nsw i64 %163, %164
  br label %168

168:                                              ; preds = %168, %166
  %169 = phi i64 [ 0, %166 ], [ %214, %168 ]
  %170 = phi i64 [ %167, %166 ], [ %215, %168 ]
  %171 = getelementptr i16, i16* %145, i64 %169
  %172 = getelementptr i16, i16* %144, i64 %169
  %173 = bitcast i16* %171 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2, !alias.scope !5
  %175 = getelementptr i16, i16* %171, i64 8
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !5
  %178 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %178, align 2, !alias.scope !8, !noalias !5
  %179 = getelementptr i16, i16* %172, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %180, align 2, !alias.scope !8, !noalias !5
  %181 = or i64 %169, 16
  %182 = getelementptr i16, i16* %145, i64 %181
  %183 = getelementptr i16, i16* %144, i64 %181
  %184 = bitcast i16* %182 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2, !alias.scope !5
  %186 = getelementptr i16, i16* %182, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2, !alias.scope !5
  %189 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %189, align 2, !alias.scope !8, !noalias !5
  %190 = getelementptr i16, i16* %183, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %191, align 2, !alias.scope !8, !noalias !5
  %192 = or i64 %169, 32
  %193 = getelementptr i16, i16* %145, i64 %192
  %194 = getelementptr i16, i16* %144, i64 %192
  %195 = bitcast i16* %193 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2, !alias.scope !5
  %197 = getelementptr i16, i16* %193, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !5
  %200 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %196, <8 x i16>* %200, align 2, !alias.scope !8, !noalias !5
  %201 = getelementptr i16, i16* %194, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %202, align 2, !alias.scope !8, !noalias !5
  %203 = or i64 %169, 48
  %204 = getelementptr i16, i16* %145, i64 %203
  %205 = getelementptr i16, i16* %144, i64 %203
  %206 = bitcast i16* %204 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2, !alias.scope !5
  %208 = getelementptr i16, i16* %204, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 2, !alias.scope !5
  %211 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %211, align 2, !alias.scope !8, !noalias !5
  %212 = getelementptr i16, i16* %205, i64 8
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %210, <8 x i16>* %213, align 2, !alias.scope !8, !noalias !5
  %214 = add i64 %169, 64
  %215 = add i64 %170, -4
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %168, !llvm.loop !10

217:                                              ; preds = %168, %156
  %218 = phi i64 [ 0, %156 ], [ %214, %168 ]
  %219 = icmp eq i64 %164, 0
  br i1 %219, label %236, label %220

220:                                              ; preds = %217, %220
  %221 = phi i64 [ %233, %220 ], [ %218, %217 ]
  %222 = phi i64 [ %234, %220 ], [ %164, %217 ]
  %223 = getelementptr i16, i16* %145, i64 %221
  %224 = getelementptr i16, i16* %144, i64 %221
  %225 = bitcast i16* %223 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2, !alias.scope !5
  %227 = getelementptr i16, i16* %223, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !5
  %230 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %230, align 2, !alias.scope !8, !noalias !5
  %231 = getelementptr i16, i16* %224, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %232, align 2, !alias.scope !8, !noalias !5
  %233 = add i64 %221, 16
  %234 = add i64 %222, -1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %220, !llvm.loop !12

236:                                              ; preds = %220, %217
  %237 = icmp eq i64 %141, %157
  br i1 %237, label %457, label %238

238:                                              ; preds = %236, %149, %147
  %239 = phi i64 [ %141, %149 ], [ %141, %147 ], [ %158, %236 ]
  %240 = phi i16* [ %145, %149 ], [ %145, %147 ], [ %159, %236 ]
  %241 = phi i16* [ %144, %149 ], [ %144, %147 ], [ %160, %236 ]
  %242 = add i64 %239, -1
  %243 = and i64 %239, 7
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %256, label %245

245:                                              ; preds = %238, %245
  %246 = phi i64 [ %251, %245 ], [ %239, %238 ]
  %247 = phi i16* [ %253, %245 ], [ %240, %238 ]
  %248 = phi i16* [ %252, %245 ], [ %241, %238 ]
  %249 = phi i64 [ %254, %245 ], [ %243, %238 ]
  %250 = load i16, i16* %247, align 2
  store i16 %250, i16* %248, align 2
  %251 = add i64 %246, -1
  %252 = getelementptr inbounds i16, i16* %248, i64 1
  %253 = getelementptr inbounds i16, i16* %247, i64 1
  %254 = add i64 %249, -1
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %245, !llvm.loop !13

256:                                              ; preds = %245, %238
  %257 = phi i64 [ %239, %238 ], [ %251, %245 ]
  %258 = phi i16* [ %240, %238 ], [ %253, %245 ]
  %259 = phi i16* [ %241, %238 ], [ %252, %245 ]
  %260 = icmp ult i64 %242, 7
  br i1 %260, label %457, label %261

261:                                              ; preds = %256, %261
  %262 = phi i64 [ %287, %261 ], [ %257, %256 ]
  %263 = phi i16* [ %289, %261 ], [ %258, %256 ]
  %264 = phi i16* [ %288, %261 ], [ %259, %256 ]
  %265 = load i16, i16* %263, align 2
  store i16 %265, i16* %264, align 2
  %266 = getelementptr inbounds i16, i16* %264, i64 1
  %267 = getelementptr inbounds i16, i16* %263, i64 1
  %268 = load i16, i16* %267, align 2
  store i16 %268, i16* %266, align 2
  %269 = getelementptr inbounds i16, i16* %264, i64 2
  %270 = getelementptr inbounds i16, i16* %263, i64 2
  %271 = load i16, i16* %270, align 2
  store i16 %271, i16* %269, align 2
  %272 = getelementptr inbounds i16, i16* %264, i64 3
  %273 = getelementptr inbounds i16, i16* %263, i64 3
  %274 = load i16, i16* %273, align 2
  store i16 %274, i16* %272, align 2
  %275 = getelementptr inbounds i16, i16* %264, i64 4
  %276 = getelementptr inbounds i16, i16* %263, i64 4
  %277 = load i16, i16* %276, align 2
  store i16 %277, i16* %275, align 2
  %278 = getelementptr inbounds i16, i16* %264, i64 5
  %279 = getelementptr inbounds i16, i16* %263, i64 5
  %280 = load i16, i16* %279, align 2
  store i16 %280, i16* %278, align 2
  %281 = getelementptr inbounds i16, i16* %264, i64 6
  %282 = getelementptr inbounds i16, i16* %263, i64 6
  %283 = load i16, i16* %282, align 2
  store i16 %283, i16* %281, align 2
  %284 = getelementptr inbounds i16, i16* %264, i64 7
  %285 = getelementptr inbounds i16, i16* %263, i64 7
  %286 = load i16, i16* %285, align 2
  store i16 %286, i16* %284, align 2
  %287 = add i64 %262, -8
  %288 = getelementptr inbounds i16, i16* %264, i64 8
  %289 = getelementptr inbounds i16, i16* %263, i64 8
  %290 = icmp eq i64 %287, 0
  br i1 %290, label %457, label %261, !llvm.loop !14

291:                                              ; preds = %143
  %292 = icmp slt i64 %140, 0
  br i1 %292, label %293, label %457

293:                                              ; preds = %291
  %294 = getelementptr inbounds i16, i16* %145, i64 %141
  %295 = getelementptr inbounds i16, i16* %144, i64 %141
  %296 = icmp ult i64 %141, 16
  br i1 %296, label %404, label %297

297:                                              ; preds = %293
  %298 = add i64 %120, -1
  %299 = sub i64 %298, %124
  %300 = sub i64 %299, %140
  %301 = sub i64 %298, %140
  %302 = getelementptr i16, i16* %137, i64 %301
  %303 = ptrtoint i16* %302 to i64
  %304 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %300, i64 2)
  %305 = extractvalue { i64, i1 } %304, 0
  %306 = extractvalue { i64, i1 } %304, 1
  %307 = icmp ugt i64 %305, %303
  %308 = or i1 %307, %306
  %309 = add i64 %120, -1
  %310 = getelementptr i16, i16* %137, i64 %309
  %311 = ptrtoint i16* %310 to i64
  %312 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %300, i64 2)
  %313 = extractvalue { i64, i1 } %312, 0
  %314 = extractvalue { i64, i1 } %312, 1
  %315 = icmp ugt i64 %313, %311
  %316 = or i1 %315, %314
  %317 = or i1 %308, %316
  br i1 %317, label %404, label %318

318:                                              ; preds = %297
  %319 = add i64 %124, %140
  %320 = getelementptr i16, i16* %137, i64 %319
  %321 = icmp ult i16* %144, %294
  %322 = icmp ult i16* %320, %295
  %323 = and i1 %321, %322
  br i1 %323, label %404, label %324

324:                                              ; preds = %318
  %325 = and i64 %141, -16
  %326 = sub i64 %141, %325
  %327 = sub i64 0, %325
  %328 = getelementptr i16, i16* %294, i64 %327
  %329 = sub i64 0, %325
  %330 = getelementptr i16, i16* %295, i64 %329
  %331 = add i64 %325, -16
  %332 = lshr exact i64 %331, 4
  %333 = add nuw nsw i64 %332, 1
  %334 = and i64 %333, 1
  %335 = icmp eq i64 %331, 0
  br i1 %335, label %382, label %336

336:                                              ; preds = %324
  %337 = sub nuw nsw i64 %333, %334
  %338 = getelementptr i16, i16* %294, i64 -1
  %339 = getelementptr i16, i16* %295, i64 -1
  %340 = getelementptr i16, i16* %294, i64 -1
  %341 = getelementptr i16, i16* %295, i64 -1
  br label %342

342:                                              ; preds = %342, %336
  %343 = phi i64 [ 0, %336 ], [ %377, %342 ]
  %344 = phi i64 [ %337, %336 ], [ %378, %342 ]
  %345 = sub i64 0, %343
  %346 = sub i64 0, %343
  %347 = getelementptr inbounds i16, i16* %339, i64 %346
  %348 = getelementptr inbounds i16, i16* %338, i64 %345
  %349 = getelementptr inbounds i16, i16* %348, i64 -7
  %350 = bitcast i16* %349 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 2, !alias.scope !15
  %352 = getelementptr inbounds i16, i16* %348, i64 -8
  %353 = getelementptr inbounds i16, i16* %352, i64 -7
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !15
  %356 = getelementptr inbounds i16, i16* %347, i64 -7
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %357, align 2, !alias.scope !18, !noalias !15
  %358 = getelementptr inbounds i16, i16* %347, i64 -8
  %359 = getelementptr inbounds i16, i16* %358, i64 -7
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %355, <8 x i16>* %360, align 2, !alias.scope !18, !noalias !15
  %361 = sub nuw nsw i64 -16, %343
  %362 = sub nuw nsw i64 -16, %343
  %363 = getelementptr inbounds i16, i16* %341, i64 %362
  %364 = getelementptr inbounds i16, i16* %340, i64 %361
  %365 = getelementptr inbounds i16, i16* %364, i64 -7
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !15
  %368 = getelementptr inbounds i16, i16* %364, i64 -8
  %369 = getelementptr inbounds i16, i16* %368, i64 -7
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 2, !alias.scope !15
  %372 = getelementptr inbounds i16, i16* %363, i64 -7
  %373 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %373, align 2, !alias.scope !18, !noalias !15
  %374 = getelementptr inbounds i16, i16* %363, i64 -8
  %375 = getelementptr inbounds i16, i16* %374, i64 -7
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %376, align 2, !alias.scope !18, !noalias !15
  %377 = add i64 %343, 32
  %378 = add i64 %344, -2
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %342, !llvm.loop !20

380:                                              ; preds = %342
  %381 = sub nuw nsw i64 -32, %343
  br label %382

382:                                              ; preds = %380, %324
  %383 = phi i64 [ 0, %324 ], [ %381, %380 ]
  %384 = icmp eq i64 %334, 0
  br i1 %384, label %402, label %385

385:                                              ; preds = %382
  %386 = getelementptr i16, i16* %294, i64 -1
  %387 = getelementptr i16, i16* %295, i64 -1
  %388 = getelementptr inbounds i16, i16* %387, i64 %383
  %389 = getelementptr inbounds i16, i16* %386, i64 %383
  %390 = getelementptr inbounds i16, i16* %389, i64 -7
  %391 = bitcast i16* %390 to <8 x i16>*
  %392 = load <8 x i16>, <8 x i16>* %391, align 2, !alias.scope !15
  %393 = getelementptr inbounds i16, i16* %389, i64 -8
  %394 = getelementptr inbounds i16, i16* %393, i64 -7
  %395 = bitcast i16* %394 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !15
  %397 = getelementptr inbounds i16, i16* %388, i64 -7
  %398 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %392, <8 x i16>* %398, align 2, !alias.scope !18, !noalias !15
  %399 = getelementptr inbounds i16, i16* %388, i64 -8
  %400 = getelementptr inbounds i16, i16* %399, i64 -7
  %401 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %401, align 2, !alias.scope !18, !noalias !15
  br label %402

402:                                              ; preds = %382, %385
  %403 = icmp eq i64 %141, %325
  br i1 %403, label %457, label %404

404:                                              ; preds = %402, %318, %297, %293
  %405 = phi i64 [ %141, %318 ], [ %141, %297 ], [ %141, %293 ], [ %326, %402 ]
  %406 = phi i16* [ %294, %318 ], [ %294, %297 ], [ %294, %293 ], [ %328, %402 ]
  %407 = phi i16* [ %295, %318 ], [ %295, %297 ], [ %295, %293 ], [ %330, %402 ]
  %408 = add i64 %405, -1
  %409 = and i64 %405, 7
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %422, label %411

411:                                              ; preds = %404, %411
  %412 = phi i64 [ %419, %411 ], [ %405, %404 ]
  %413 = phi i16* [ %417, %411 ], [ %406, %404 ]
  %414 = phi i16* [ %416, %411 ], [ %407, %404 ]
  %415 = phi i64 [ %420, %411 ], [ %409, %404 ]
  %416 = getelementptr inbounds i16, i16* %414, i64 -1
  %417 = getelementptr inbounds i16, i16* %413, i64 -1
  %418 = load i16, i16* %417, align 2
  store i16 %418, i16* %416, align 2
  %419 = add i64 %412, -1
  %420 = add i64 %415, -1
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %411, !llvm.loop !21

422:                                              ; preds = %411, %404
  %423 = phi i64 [ %405, %404 ], [ %419, %411 ]
  %424 = phi i16* [ %406, %404 ], [ %417, %411 ]
  %425 = phi i16* [ %407, %404 ], [ %416, %411 ]
  %426 = icmp ult i64 %408, 7
  br i1 %426, label %457, label %427

427:                                              ; preds = %422, %427
  %428 = phi i64 [ %455, %427 ], [ %423, %422 ]
  %429 = phi i16* [ %453, %427 ], [ %424, %422 ]
  %430 = phi i16* [ %452, %427 ], [ %425, %422 ]
  %431 = getelementptr inbounds i16, i16* %430, i64 -1
  %432 = getelementptr inbounds i16, i16* %429, i64 -1
  %433 = load i16, i16* %432, align 2
  store i16 %433, i16* %431, align 2
  %434 = getelementptr inbounds i16, i16* %430, i64 -2
  %435 = getelementptr inbounds i16, i16* %429, i64 -2
  %436 = load i16, i16* %435, align 2
  store i16 %436, i16* %434, align 2
  %437 = getelementptr inbounds i16, i16* %430, i64 -3
  %438 = getelementptr inbounds i16, i16* %429, i64 -3
  %439 = load i16, i16* %438, align 2
  store i16 %439, i16* %437, align 2
  %440 = getelementptr inbounds i16, i16* %430, i64 -4
  %441 = getelementptr inbounds i16, i16* %429, i64 -4
  %442 = load i16, i16* %441, align 2
  store i16 %442, i16* %440, align 2
  %443 = getelementptr inbounds i16, i16* %430, i64 -5
  %444 = getelementptr inbounds i16, i16* %429, i64 -5
  %445 = load i16, i16* %444, align 2
  store i16 %445, i16* %443, align 2
  %446 = getelementptr inbounds i16, i16* %430, i64 -6
  %447 = getelementptr inbounds i16, i16* %429, i64 -6
  %448 = load i16, i16* %447, align 2
  store i16 %448, i16* %446, align 2
  %449 = getelementptr inbounds i16, i16* %430, i64 -7
  %450 = getelementptr inbounds i16, i16* %429, i64 -7
  %451 = load i16, i16* %450, align 2
  store i16 %451, i16* %449, align 2
  %452 = getelementptr inbounds i16, i16* %430, i64 -8
  %453 = getelementptr inbounds i16, i16* %429, i64 -8
  %454 = load i16, i16* %453, align 2
  store i16 %454, i16* %452, align 2
  %455 = add i64 %428, -8
  %456 = icmp eq i64 %455, 0
  br i1 %456, label %457, label %427, !llvm.loop !22

457:                                              ; preds = %422, %427, %256, %261, %402, %236, %291, %136
  %458 = sub i64 %120, %140
  %459 = load i8, i8* %35, align 1
  %460 = icmp slt i8 %459, 0
  br i1 %460, label %461, label %462

461:                                              ; preds = %457
  store i64 %458, i64* %9, align 8
  br label %464

462:                                              ; preds = %457
  %463 = trunc i64 %458 to i8
  store i8 %463, i8* %35, align 1
  br label %464

464:                                              ; preds = %462, %461
  %465 = getelementptr inbounds i16, i16* %137, i64 %458
  store i16 0, i16* %465, align 2
  br label %466

466:                                              ; preds = %464, %133, %131, %129, %2
  ret void

467:                                              ; preds = %97
  %468 = inttoptr i64 %98 to i16*
  store i16 %100, i16* %468, align 2
  %469 = getelementptr inbounds i16, i16* %468, i64 1
  %470 = ptrtoint i16* %469 to i64
  br label %471

471:                                              ; preds = %467, %97, %97
  %472 = phi i64 [ %98, %97 ], [ %470, %467 ], [ %98, %97 ]
  %473 = getelementptr inbounds i16, i16* %90, i64 2
  %474 = load i16, i16* %473, align 2
  switch i16 %474, label %475 [
    i16 -2, label %479
    i16 8203, label %479
  ]

475:                                              ; preds = %471
  %476 = inttoptr i64 %472 to i16*
  store i16 %474, i16* %476, align 2
  %477 = getelementptr inbounds i16, i16* %476, i64 1
  %478 = ptrtoint i16* %477 to i64
  br label %479

479:                                              ; preds = %475, %471, %471
  %480 = phi i64 [ %472, %471 ], [ %478, %475 ], [ %472, %471 ]
  %481 = getelementptr inbounds i16, i16* %90, i64 3
  %482 = load i16, i16* %481, align 2
  switch i16 %482, label %483 [
    i16 -2, label %487
    i16 8203, label %487
  ]

483:                                              ; preds = %479
  %484 = inttoptr i64 %480 to i16*
  store i16 %482, i16* %484, align 2
  %485 = getelementptr inbounds i16, i16* %484, i64 1
  %486 = ptrtoint i16* %485 to i64
  br label %487

487:                                              ; preds = %483, %479, %479
  %488 = phi i64 [ %480, %479 ], [ %486, %483 ], [ %480, %479 ]
  %489 = getelementptr inbounds i16, i16* %90, i64 4
  %490 = icmp eq i16* %489, %44
  br i1 %490, label %101, label %89
}

declare void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEEC1EPS8_mb(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"*, %"class.std::__1::basic_string.72"*, i64, i1 zeroext) unnamed_addr #4

declare i8* @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE7GetDataEv(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"*) local_unnamed_addr #4

declare i32 @FPDFText_GetText(%struct.fpdf_textpage_t__*, i32, i32, i16*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED1Ev(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN10chrome_pdf8internal28PDFiumAPIStringBufferAdapterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE5CloseEm(%"class.chrome_pdf::internal::PDFiumAPIStringBufferAdapter"*, i64) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #11

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !4}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !4}
!22 = distinct !{!22, !11}
