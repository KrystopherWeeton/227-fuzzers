; ModuleID = '../../third_party/pdfium/fxbarcode/oned/BC_OnedEAN8Writer.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/oned/BC_OnedEAN8Writer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_OnedEAN8Writer = type { %class.CBC_OneDimEANWriter.base, i32 }
%class.CBC_OneDimEANWriter.base = type { %class.CBC_OneDimWriter.base }
%class.CBC_OneDimWriter.base = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFX_PathData*, %class.CFX_PathData*, %"class.std::__1::__compressed_pair" }
%class.CFX_PathData = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_PathData* }
%class.CBC_OneDimEANWriter = type { %class.CBC_OneDimWriter.base, [4 x i8] }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.1", i64 }
%"class.fxcrt::UnownedPtr.1" = type { i32* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.fxcrt::StringDataTemplate.9"* }
%"class.fxcrt::StringDataTemplate.9" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%class.CBC_OneDimWriter = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float, [4 x i8] }>
%class.CFX_RenderDevice = type { i32 (...)**, %"class.fxcrt::RetainPtr.17", i32, i32, i32, i32, i8, %struct.FX_RECT, %"class.std::__1::unique_ptr.23" }
%"class.fxcrt::RetainPtr.17" = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.RenderDeviceDriverIface* }
%class.RenderDeviceDriverIface = type { i32 (...)** }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %class.TextCharPos*, %class.TextCharPos*, %"class.std::__1::__compressed_pair.29" }
%class.TextCharPos = type { %class.CFX_PTemplate, i32, i32, i32, i32, i8, i8, [4 x float] }
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.TextCharPos* }
%class.CFX_FloatRect = type { float, float, float, float }
%struct.CFX_TextRenderOptions = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>

@_ZTV18CBC_OnedEAN8Writer = hidden unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_OnedEAN8Writer*)* @_ZN18CBC_OnedEAN8WriterD2Ev to i8*), i8* bitcast (void (%class.CBC_OnedEAN8Writer*)* @_ZN18CBC_OnedEAN8WriterD0Ev to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetCharEncodingEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetModuleHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer14SetModuleWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer9SetHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer8SetWidthEi to i8*), i8* bitcast (i1 (%class.CBC_OnedEAN8Writer*, i8)* @_ZN18CBC_OnedEAN8Writer15SetTextLocationE11BC_TEXT_LOC to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer18SetWideNarrowRatioEa to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer12SetStartCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer10SetEndCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer23SetErrorCorrectionLevelEi to i8*), i8* bitcast (i1 (%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32)* @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi to i8*), i8* bitcast (i1 (%class.CBC_OnedEAN8Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN18CBC_OnedEAN8Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%"class.fxcrt::WideString"*, %class.CBC_OnedEAN8Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN18CBC_OnedEAN8Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter16SetPrintChecksumEb to i8*), i8* bitcast (void (%class.CBC_OnedEAN8Writer*, i32)* @_ZN18CBC_OnedEAN8Writer13SetDataLengthEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter15SetCalcChecksumEb to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, float)* @_ZN16CBC_OneDimWriter11SetFontSizeEf to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontStyleEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontColorEj to i8*), i8* bitcast (i8* (%class.CBC_OnedEAN8Writer*, %"class.fxcrt::ByteString"*, i32, i32*, i32*, i32)* @_ZN18CBC_OnedEAN8Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i to i8*), i8* bitcast (i8* (%class.CBC_OnedEAN8Writer*, %"class.fxcrt::ByteString"*, i32*)* @_ZN18CBC_OnedEAN8Writer10EncodeImplERKN5fxcrt10ByteStringERi to i8*), i8* bitcast (i1 (%class.CBC_OnedEAN8Writer*, %"class.fxcrt::StringViewTemplate"*, %class.CFX_RenderDevice*, %class.CFX_Matrix*, i32, i32)* @_ZN18CBC_OnedEAN8Writer9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii to i8*), i8* bitcast (void (%class.CBC_OneDimEANWriter*)* @_ZN19CBC_OneDimEANWriter13InitEANWriterEv to i8*), i8* bitcast (i32 (%class.CBC_OnedEAN8Writer*, %"class.fxcrt::ByteString"*)* @_ZN18CBC_OnedEAN8Writer12CalcChecksumERKN5fxcrt10ByteStringE to i8*)] }, align 8
@_ZN12_GLOBAL__N_121kOnedEAN8StartPatternE = internal constant [3 x i8] c"\01\01\01", align 1
@_ZN12_GLOBAL__N_117kOnedEAN8LPatternE = internal constant [10 x [4 x i8]] [[4 x i8] c"\03\02\01\01", [4 x i8] c"\02\02\02\01", [4 x i8] c"\02\01\02\02", [4 x i8] c"\01\04\01\01", [4 x i8] c"\01\01\03\02", [4 x i8] c"\01\02\03\01", [4 x i8] c"\01\01\01\04", [4 x i8] c"\01\03\01\02", [4 x i8] c"\01\02\01\03", [4 x i8] c"\03\01\01\02"], align 16
@_ZN12_GLOBAL__N_122kOnedEAN8MiddlePatternE = internal constant [5 x i8] c"\01\01\01\01\01", align 1

@_ZN18CBC_OnedEAN8WriterC1Ev = hidden unnamed_addr alias void (%class.CBC_OnedEAN8Writer*), void (%class.CBC_OnedEAN8Writer*)* @_ZN18CBC_OnedEAN8WriterC2Ev
@_ZN18CBC_OnedEAN8WriterD1Ev = hidden unnamed_addr alias void (%class.CBC_OnedEAN8Writer*), void (%class.CBC_OnedEAN8Writer*)* @_ZN18CBC_OnedEAN8WriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_OnedEAN8WriterC2Ev(%class.CBC_OnedEAN8Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterC2Ev(%class.CBC_OneDimEANWriter* %2) #9
  %3 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTV18CBC_OnedEAN8Writer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 1
  store i32 67, i32* %4, align 4
  %5 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 12
  store i32 8, i32* %5, align 8
  ret void
}

declare void @_ZN19CBC_OneDimEANWriterC2Ev(%class.CBC_OneDimEANWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_OnedEAN8WriterD2Ev(%class.CBC_OnedEAN8Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_OnedEAN8WriterD0Ev(%class.CBC_OnedEAN8Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN19CBC_OneDimEANWriterD2Ev(%class.CBC_OneDimEANWriter* %2) #9
  %3 = bitcast %class.CBC_OnedEAN8Writer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN18CBC_OnedEAN8Writer13SetDataLengthEi(%class.CBC_OnedEAN8Writer* nocapture, i32) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 12
  store i32 8, i32* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN18CBC_OnedEAN8Writer15SetTextLocationE11BC_TEXT_LOC(%class.CBC_OnedEAN8Writer* nocapture, i8 zeroext) unnamed_addr #4 align 2 {
  %3 = icmp eq i8 %1, 4
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 10
  store i8 4, i8* %5, align 4
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i1 [ true, %4 ], [ false, %2 ]
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CBC_OnedEAN8Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE(%class.CBC_OnedEAN8Writer* nocapture readnone, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %5 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 16, i1 false)
  %6 = call zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"* nonnull %3) #9
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %24, label %16

14:                                               ; preds = %20
  %15 = icmp eq i32* %23, %12
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %14
  %17 = phi i32* [ %23, %14 ], [ %9, %7 ]
  %18 = load i32, i32* %17, align 4
  %19 = icmp ugt i32 %18, 127
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = call i32 @iswdigit(i32 %18) #9
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds i32, i32* %17, i64 1
  br i1 %22, label %24, label %14

24:                                               ; preds = %20, %16, %14, %7, %2
  %25 = phi i1 [ false, %2 ], [ true, %7 ], [ true, %14 ], [ false, %16 ], [ false, %20 ]
  ret i1 %25
}

declare zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_OnedEAN8Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::WideString"* noalias sret, %class.CBC_OnedEAN8Writer* nocapture readnone, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %4, align 8
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #9
  %5 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* %0, i64 %6) #9
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 0, i32 0
  br label %11

11:                                               ; preds = %9, %26
  %12 = phi i64 [ 0, %9 ], [ %28, %26 ]
  %13 = load i32*, i32** %10, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 %12
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 175
  br i1 %16, label %17, label %19

17:                                               ; preds = %11
  %18 = add nuw i64 %12, 1
  br label %26

19:                                               ; preds = %11
  %20 = icmp ugt i32 %15, 127
  br i1 %20, label %26, label %21

21:                                               ; preds = %19
  %22 = tail call i32 @iswdigit(i32 %15) #9
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext %15) #9
  br label %26

26:                                               ; preds = %21, %19, %24, %17
  %27 = phi i64 [ %18, %17 ], [ %12, %24 ], [ %12, %21 ], [ %12, %19 ]
  %28 = add i64 %27, 1
  %29 = load i64, i64* %5, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %11, label %31

31:                                               ; preds = %26, %3
  ret void
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN18CBC_OnedEAN8Writer12CalcChecksumERKN5fxcrt10ByteStringE(%class.CBC_OnedEAN8Writer* nocapture readnone, %"class.fxcrt::ByteString"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = tail call i32 @_Z15EANCalcChecksumRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* dereferenceable(8) %1) #9
  ret i32 %3
}

declare i32 @_Z15EANCalcChecksumRKN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN18CBC_OnedEAN8Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OnedEAN8Writer*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #0 align 2 {
  %7 = icmp eq i32 %2, 5
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimWriter*
  %10 = tail call i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter* %9, %"class.fxcrt::ByteString"* dereferenceable(8) %1, i32 5, i32* dereferenceable(4) %3, i32* dereferenceable(4) %4, i32 %5) #9
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i8* [ %10, %8 ], [ null, %6 ]
  ret i8* %12
}

declare i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN18CBC_OnedEAN8Writer10EncodeImplERKN5fxcrt10ByteStringERi(%class.CBC_OnedEAN8Writer*, %"class.fxcrt::ByteString"* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %6 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %5, null
  br i1 %6, label %65, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %5, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %65

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %2, align 4
  %14 = load i32, i32* %12, align 4
  %15 = sext i32 %14 to i64
  %16 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %15, i64 1) #9
  %17 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimWriter*
  %18 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN12_GLOBAL__N_121kOnedEAN8StartPatternE, i64 0, i64 0), i32 3, i1 zeroext true) #9
  %19 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %20 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %19, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %21, %171, %164, %150, %143, %129, %35, %11
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !4
  unreachable

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %19, i64 0, i32 3, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = sext i8 %28 to i32
  %32 = add nsw i32 %31, -48
  %33 = icmp ult i32 %32, 10
  %34 = select i1 %33, i32 %32, i32 0
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi i32 [ %34, %30 ], [ 0, %26 ]
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %37, i64 0
  %39 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %18, i8* %38, i32 4, i1 zeroext false) #9
  %40 = add nsw i32 %39, %18
  %41 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %42 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %41, null
  br i1 %42, label %25, label %129

43:                                               ; preds = %185
  %44 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %192, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %45, 4
  br i1 %46, label %48, label %47, !prof !5

47:                                               ; preds = %109, %102, %88, %81, %67, %58, %43, %185
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !4
  unreachable

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %192, i64 0, i32 3, i64 4
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = sext i8 %50 to i32
  %54 = add nsw i32 %53, -48
  %55 = icmp ult i32 %54, 10
  %56 = select i1 %55, i32 %54, i32 0
  %57 = sext i32 %56 to i64
  br label %58

58:                                               ; preds = %48, %52
  %59 = phi i64 [ %57, %52 ], [ 0, %48 ]
  %60 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %59, i64 0
  %61 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %191, i8* %60, i32 4, i1 zeroext true) #9
  %62 = add nsw i32 %61, %191
  %63 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %64 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %63, null
  br i1 %64, label %47, label %67

65:                                               ; preds = %3, %7, %123
  %66 = phi i8* [ %16, %123 ], [ null, %7 ], [ null, %3 ]
  ret i8* %66

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %63, i64 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = icmp ugt i64 %69, 5
  br i1 %70, label %71, label %47, !prof !5

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %63, i64 0, i32 3, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %81, label %75

75:                                               ; preds = %71
  %76 = sext i8 %73 to i32
  %77 = add nsw i32 %76, -48
  %78 = icmp ult i32 %77, 10
  %79 = select i1 %78, i32 %77, i32 0
  %80 = sext i32 %79 to i64
  br label %81

81:                                               ; preds = %75, %71
  %82 = phi i64 [ %80, %75 ], [ 0, %71 ]
  %83 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %82, i64 0
  %84 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %62, i8* %83, i32 4, i1 zeroext true) #9
  %85 = add nsw i32 %84, %62
  %86 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %87 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %86, null
  br i1 %87, label %47, label %88

88:                                               ; preds = %81
  %89 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %86, i64 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp ugt i64 %90, 6
  br i1 %91, label %92, label %47, !prof !5

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %86, i64 0, i32 3, i64 6
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %102, label %96

96:                                               ; preds = %92
  %97 = sext i8 %94 to i32
  %98 = add nsw i32 %97, -48
  %99 = icmp ult i32 %98, 10
  %100 = select i1 %99, i32 %98, i32 0
  %101 = sext i32 %100 to i64
  br label %102

102:                                              ; preds = %96, %92
  %103 = phi i64 [ %101, %96 ], [ 0, %92 ]
  %104 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %103, i64 0
  %105 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %85, i8* %104, i32 4, i1 zeroext true) #9
  %106 = add nsw i32 %105, %85
  %107 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %108 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %107, null
  br i1 %108, label %47, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %107, i64 0, i32 1
  %111 = load i64, i64* %110, align 8
  %112 = icmp ugt i64 %111, 7
  br i1 %112, label %113, label %47, !prof !5

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %107, i64 0, i32 3, i64 7
  %115 = load i8, i8* %114, align 1
  %116 = icmp slt i8 %115, 0
  br i1 %116, label %123, label %117

117:                                              ; preds = %113
  %118 = sext i8 %115 to i32
  %119 = add nsw i32 %118, -48
  %120 = icmp ult i32 %119, 10
  %121 = select i1 %120, i32 %119, i32 0
  %122 = sext i32 %121 to i64
  br label %123

123:                                              ; preds = %117, %113
  %124 = phi i64 [ %122, %117 ], [ 0, %113 ]
  %125 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %124, i64 0
  %126 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %106, i8* %125, i32 4, i1 zeroext true) #9
  %127 = add nsw i32 %126, %106
  %128 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %127, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN12_GLOBAL__N_121kOnedEAN8StartPatternE, i64 0, i64 0), i32 3, i1 zeroext true) #9
  br label %65

129:                                              ; preds = %35
  %130 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %41, i64 0, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = icmp ugt i64 %131, 1
  br i1 %132, label %133, label %25, !prof !5

133:                                              ; preds = %129
  %134 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %41, i64 0, i32 3, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = icmp slt i8 %135, 0
  br i1 %136, label %143, label %137

137:                                              ; preds = %133
  %138 = sext i8 %135 to i32
  %139 = add nsw i32 %138, -48
  %140 = icmp ult i32 %139, 10
  %141 = select i1 %140, i32 %139, i32 0
  %142 = sext i32 %141 to i64
  br label %143

143:                                              ; preds = %137, %133
  %144 = phi i64 [ %142, %137 ], [ 0, %133 ]
  %145 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %144, i64 0
  %146 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %40, i8* %145, i32 4, i1 zeroext false) #9
  %147 = add nsw i32 %146, %40
  %148 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %149 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %148, null
  br i1 %149, label %25, label %150

150:                                              ; preds = %143
  %151 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %148, i64 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = icmp ugt i64 %152, 2
  br i1 %153, label %154, label %25, !prof !5

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %148, i64 0, i32 3, i64 2
  %156 = load i8, i8* %155, align 1
  %157 = icmp slt i8 %156, 0
  br i1 %157, label %164, label %158

158:                                              ; preds = %154
  %159 = sext i8 %156 to i32
  %160 = add nsw i32 %159, -48
  %161 = icmp ult i32 %160, 10
  %162 = select i1 %161, i32 %160, i32 0
  %163 = sext i32 %162 to i64
  br label %164

164:                                              ; preds = %158, %154
  %165 = phi i64 [ %163, %158 ], [ 0, %154 ]
  %166 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %165, i64 0
  %167 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %147, i8* %166, i32 4, i1 zeroext false) #9
  %168 = add nsw i32 %167, %147
  %169 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %170 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %169, null
  br i1 %170, label %25, label %171

171:                                              ; preds = %164
  %172 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %169, i64 0, i32 1
  %173 = load i64, i64* %172, align 8
  %174 = icmp ugt i64 %173, 3
  br i1 %174, label %175, label %25, !prof !5

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %169, i64 0, i32 3, i64 3
  %177 = load i8, i8* %176, align 1
  %178 = icmp slt i8 %177, 0
  br i1 %178, label %185, label %179

179:                                              ; preds = %175
  %180 = sext i8 %177 to i32
  %181 = add nsw i32 %180, -48
  %182 = icmp ult i32 %181, 10
  %183 = select i1 %182, i32 %181, i32 0
  %184 = sext i32 %183 to i64
  br label %185

185:                                              ; preds = %179, %175
  %186 = phi i64 [ %184, %179 ], [ 0, %175 ]
  %187 = getelementptr inbounds [10 x [4 x i8]], [10 x [4 x i8]]* @_ZN12_GLOBAL__N_117kOnedEAN8LPatternE, i64 0, i64 %186, i64 0
  %188 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %168, i8* %187, i32 4, i1 zeroext false) #9
  %189 = add nsw i32 %188, %168
  %190 = tail call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %17, i8* %16, i32 %189, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN12_GLOBAL__N_122kOnedEAN8MiddlePatternE, i64 0, i64 0), i32 5, i1 zeroext false) #9
  %191 = add nsw i32 %190, %189
  %192 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %4, align 8
  %193 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %192, null
  br i1 %193, label %47, label %43
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #1

declare i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter*, i8*, i32, i8*, i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CBC_OnedEAN8Writer9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii(%class.CBC_OnedEAN8Writer*, %"class.fxcrt::StringViewTemplate"* nocapture readonly, %class.CFX_RenderDevice*, %class.CFX_Matrix* readonly dereferenceable(24), i32, i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.fxcrt::ByteString", align 8
  %8 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %9 = alloca %"class.std::__1::vector.27", align 8
  %10 = alloca %"class.fxcrt::ByteString", align 8
  %11 = alloca float, align 4
  %12 = alloca %class.CFX_Matrix, align 16
  %13 = alloca %class.CFX_FloatRect, align 4
  %14 = alloca { i64, i64 }, align 8
  %15 = bitcast { i64, i64 }* %14 to %struct.FX_RECT*
  %16 = alloca { <2 x float>, <2 x float> }, align 8
  %17 = alloca %class.CFX_Matrix, align 16
  %18 = alloca %class.CFX_FloatRect, align 4
  %19 = alloca { <2 x float>, <2 x float> }, align 8
  %20 = alloca %class.CFX_Matrix, align 16
  %21 = alloca i64, align 8
  %22 = alloca %"class.fxcrt::ByteString", align 8
  %23 = alloca %class.CFX_Matrix, align 16
  %24 = alloca i64, align 8
  %25 = icmp eq %class.CFX_RenderDevice* %2, null
  br i1 %25, label %314, label %26

26:                                               ; preds = %6
  %27 = bitcast i64* %24 to %struct.CFX_TextRenderOptions*
  %28 = bitcast i64* %21 to %struct.CFX_TextRenderOptions*
  %29 = bitcast { <2 x float>, <2 x float> }* %19 to %class.CFX_FloatRect*
  %30 = bitcast { <2 x float>, <2 x float> }* %16 to %class.CFX_FloatRect*
  %31 = mul nsw i32 %5, 3
  %32 = bitcast %"class.fxcrt::ByteString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #9
  %33 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate.9"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.9"*), %"class.fxcrt::StringDataTemplate.9"** %33, align 8
  %34 = bitcast %"class.fxcrt::StringViewTemplate"* %8 to i8*
  %35 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %34, i8* align 8 %35, i64 16, i1 false)
  call void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* nonnull sret %7, %"class.fxcrt::StringViewTemplate"* nonnull %8) #9
  %36 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %33, align 8
  %37 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %26
  %39 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %36, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  br label %41

41:                                               ; preds = %26, %38
  %42 = phi i64 [ %40, %38 ], [ 0, %26 ]
  %43 = bitcast %"class.std::__1::vector.27"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #9
  %44 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 0, i64 24, i1 false) #9
  %47 = icmp eq i64 %42, 0
  br i1 %47, label %66, label %48

48:                                               ; preds = %41
  %49 = icmp ugt i64 %42, 419244183493398900
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.27"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %51) #11
  unreachable

52:                                               ; preds = %48
  %53 = mul i64 %42, 44
  %54 = call i8* @_Znwm(i64 %53) #10
  %55 = bitcast i8* %54 to %class.TextCharPos*
  %56 = bitcast %class.TextCharPos** %45 to i8**
  store i8* %54, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.27"* %9 to i8**
  store i8* %54, i8** %57, align 8
  %58 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %55, i64 %42
  store %class.TextCharPos* %58, %class.TextCharPos** %46, align 8
  br label %59

59:                                               ; preds = %59, %52
  %60 = phi %class.TextCharPos* [ %61, %59 ], [ %55, %52 ]
  call void @_ZN11TextCharPosC1Ev(%class.TextCharPos* %60) #9
  %61 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %60, i64 1
  %62 = icmp eq %class.TextCharPos* %61, %58
  br i1 %62, label %63, label %59

63:                                               ; preds = %59
  %64 = bitcast %class.TextCharPos** %45 to i64*
  %65 = ptrtoint %class.TextCharPos* %58 to i64
  store i64 %65, i64* %64, align 8
  br label %66

66:                                               ; preds = %41, %63
  %67 = bitcast %"class.fxcrt::ByteString"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #9
  %68 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate.9"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.9"*), %"class.fxcrt::StringDataTemplate.9"** %68, align 8
  call void @_ZNK5fxcrt10ByteString5FirstEm(%"class.fxcrt::ByteString"* nonnull sret %10, %"class.fxcrt::ByteString"* nonnull %7, i64 4) #9
  %69 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %68, align 8
  %70 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %69, i64 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  br label %75

75:                                               ; preds = %66, %71
  %76 = phi i32 [ %74, %71 ], [ 0, %66 ]
  %77 = mul i32 %5, 28
  %78 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78) #9
  store float 0.000000e+00, float* %11, align 4
  %79 = bitcast %class.CBC_OnedEAN8Writer* %0 to %class.CBC_OneDimWriter*
  %80 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 7
  %81 = load float, float* %80, align 8
  %82 = call float @llvm.fabs.f32(float %81) #9
  %83 = fptosi float %82 to i32
  %84 = add nsw i32 %83, 1
  %85 = bitcast %class.CFX_Matrix* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85) #9
  %86 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %12, i64 0, i32 4
  %87 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %12, i64 0, i32 5
  %88 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 18
  %89 = load float, float* %88, align 8
  %90 = bitcast %class.CFX_FloatRect* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #9
  %91 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %13, i64 0, i32 0
  %92 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %13, i64 0, i32 1
  %93 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %13, i64 0, i32 2
  %94 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %13, i64 0, i32 3
  %95 = sitofp i32 %31 to float
  %96 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 0, i32 4
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 %97, %84
  %99 = sitofp i32 %98 to float
  %100 = mul i32 %5, 31
  %101 = sitofp i32 %100 to double
  %102 = fadd double %101, -5.000000e-01
  %103 = fptrunc double %102 to float
  %104 = sitofp i32 %97 to float
  store float %95, float* %91, align 4
  store float %99, float* %92, align 4
  store float %103, float* %93, align 4
  store float %104, float* %94, align 4
  %105 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 2
  %106 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %107 = load <2 x float>, <2 x float>* %106, align 4, !noalias !6
  %108 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %109 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = bitcast float* %105 to <2 x float>*
  %112 = load <2 x float>, <2 x float>* %111, align 4, !noalias !6
  %113 = fmul <2 x float> %112, zeroinitializer
  %114 = insertelement <4 x float> undef, float %89, i32 0
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %116 = shufflevector <4 x float> %115, <4 x float> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = shufflevector <4 x float> %108, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %118 = shufflevector <4 x float> %117, <4 x float> %109, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %119 = fmul <4 x float> %116, %118
  %120 = extractelement <2 x float> %113, i32 0
  %121 = extractelement <2 x float> %113, i32 1
  %122 = shufflevector <2 x float> %113, <2 x float> %112, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = fadd <4 x float> %119, %122
  %124 = extractelement <4 x float> %119, i32 2
  %125 = fadd float %124, %120
  %126 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 4
  %127 = load float, float* %126, align 4, !noalias !6
  %128 = fadd float %125, %127
  %129 = extractelement <4 x float> %119, i32 3
  %130 = fadd float %129, %121
  %131 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 5
  %132 = load float, float* %131, align 4, !noalias !6
  %133 = fadd float %130, %132
  %134 = bitcast %class.CFX_Matrix* %12 to <4 x float>*
  store <4 x float> %123, <4 x float>* %134, align 16
  store float %128, float* %86, align 16
  store float %133, float* %87, align 4
  %135 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %135) #9
  %136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 1
  %137 = bitcast { <2 x float>, <2 x float> }* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #9
  %138 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %12, %class.CFX_FloatRect* nonnull dereferenceable(16) %13) #9
  %139 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, i64 0, i32 0
  %140 = extractvalue { <2 x float>, <2 x float> } %138, 0
  store <2 x float> %140, <2 x float>* %139, align 8
  %141 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, i64 0, i32 1
  %142 = extractvalue { <2 x float>, <2 x float> } %138, 1
  store <2 x float> %142, <2 x float>* %141, align 8
  %143 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %30) #9
  %144 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 0
  %145 = extractvalue { i64, i64 } %143, 0
  store i64 %145, i64* %144, align 8
  %146 = extractvalue { i64, i64 } %143, 1
  store i64 %146, i64* %136, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #9
  %147 = call zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice* nonnull %2, %struct.FX_RECT* nonnull dereferenceable(16) %15, i32 -1, i32 0) #9
  %148 = bitcast %class.CFX_Matrix* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #9
  %149 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %17, i64 0, i32 4
  %150 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %17, i64 0, i32 5
  %151 = load float, float* %88, align 8
  %152 = bitcast %class.CFX_FloatRect* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %152) #9
  %153 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %18, i64 0, i32 0
  %154 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %18, i64 0, i32 1
  %155 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %18, i64 0, i32 2
  %156 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %18, i64 0, i32 3
  %157 = mul nsw i32 %5, 36
  %158 = sitofp i32 %157 to float
  %159 = load i32, i32* %96, align 4
  %160 = sub nsw i32 %159, %84
  %161 = sitofp i32 %160 to float
  %162 = shl i32 %5, 6
  %163 = sitofp i32 %162 to double
  %164 = fadd double %163, -5.000000e-01
  %165 = fptrunc double %164 to float
  %166 = sitofp i32 %159 to float
  store float %158, float* %153, align 4
  store float %161, float* %154, align 4
  store float %165, float* %155, align 4
  store float %166, float* %156, align 4
  %167 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %168 = load <2 x float>, <2 x float>* %167, align 4, !noalias !9
  %169 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %170 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %171 = shufflevector <2 x float> %168, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = bitcast float* %105 to <2 x float>*
  %173 = load <2 x float>, <2 x float>* %172, align 4, !noalias !9
  %174 = fmul <2 x float> %173, zeroinitializer
  %175 = insertelement <4 x float> undef, float %151, i32 0
  %176 = shufflevector <4 x float> %175, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %177 = shufflevector <4 x float> %176, <4 x float> %171, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %178 = shufflevector <4 x float> %169, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %179 = shufflevector <4 x float> %178, <4 x float> %170, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %180 = fmul <4 x float> %177, %179
  %181 = extractelement <2 x float> %174, i32 0
  %182 = extractelement <2 x float> %174, i32 1
  %183 = shufflevector <2 x float> %174, <2 x float> %173, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = fadd <4 x float> %180, %183
  %185 = extractelement <4 x float> %180, i32 2
  %186 = fadd float %185, %181
  %187 = load float, float* %126, align 4, !noalias !9
  %188 = fadd float %186, %187
  %189 = extractelement <4 x float> %180, i32 3
  %190 = fadd float %189, %182
  %191 = load float, float* %131, align 4, !noalias !9
  %192 = fadd float %190, %191
  %193 = bitcast %class.CFX_Matrix* %17 to <4 x float>*
  store <4 x float> %184, <4 x float>* %193, align 16
  store float %188, float* %149, align 16
  store float %192, float* %150, align 4
  %194 = bitcast { <2 x float>, <2 x float> }* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #9
  %195 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %17, %class.CFX_FloatRect* nonnull dereferenceable(16) %18) #9
  %196 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, i64 0, i32 0
  %197 = extractvalue { <2 x float>, <2 x float> } %195, 0
  store <2 x float> %197, <2 x float>* %196, align 8
  %198 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %19, i64 0, i32 1
  %199 = extractvalue { <2 x float>, <2 x float> } %195, 1
  store <2 x float> %199, <2 x float>* %198, align 8
  %200 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %29) #9
  %201 = extractvalue { i64, i64 } %200, 0
  %202 = extractvalue { i64, i64 } %200, 1
  store i64 %201, i64* %144, align 8
  store i64 %202, i64* %136, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #9
  %203 = call zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice* nonnull %2, %struct.FX_RECT* nonnull dereferenceable(16) %15, i32 -1, i32 0) #9
  %204 = sitofp i32 %77 to float
  %205 = load float, float* %88, align 8
  %206 = fmul float %205, %204
  %207 = fptosi float %206 to i32
  %208 = load %class.TextCharPos*, %class.TextCharPos** %44, align 8
  %209 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %210 = load %class.CFX_Font*, %class.CFX_Font** %209, align 8
  %211 = sitofp i32 %207 to float
  call void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter* %79, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10, %class.TextCharPos* %208, %class.CFX_Font* %210, float %211, i32 %83, float* nonnull dereferenceable(4) %11) #9
  %212 = bitcast %class.CFX_Matrix* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %212) #9
  %213 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %20, i64 0, i32 4
  %214 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %20, i64 0, i32 5
  %215 = load float, float* %88, align 8
  %216 = fmul float %215, %95
  %217 = load i32, i32* %96, align 4
  %218 = add i32 %217, -1
  %219 = sitofp i32 %218 to float
  %220 = bitcast %class.CFX_Matrix* %3 to <4 x float>*
  %221 = load <4 x float>, <4 x float>* %220, align 4, !noalias !12
  %222 = fmul <4 x float> %221, zeroinitializer
  %223 = shufflevector <4 x float> %222, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %224 = extractelement <4 x float> %221, i32 0
  %225 = extractelement <4 x float> %221, i32 1
  %226 = extractelement <4 x float> %221, i32 2
  %227 = extractelement <4 x float> %221, i32 3
  %228 = fadd <4 x float> %223, %221
  %229 = fsub <4 x float> %223, %221
  %230 = shufflevector <4 x float> %228, <4 x float> %229, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %231 = fmul float %216, %224
  %232 = fmul float %226, %219
  %233 = fadd float %231, %232
  %234 = load float, float* %126, align 4, !noalias !12
  %235 = fadd float %233, %234
  %236 = fmul float %216, %225
  %237 = fmul float %227, %219
  %238 = fadd float %236, %237
  %239 = load float, float* %131, align 4, !noalias !12
  %240 = fadd float %238, %239
  %241 = bitcast %class.CFX_Matrix* %20 to <4 x float>*
  store <4 x float> %230, <4 x float>* %241, align 16
  store float %235, float* %213, align 16
  store float %240, float* %214, align 4
  %242 = load %class.TextCharPos*, %class.TextCharPos** %44, align 8
  %243 = load %class.CFX_Font*, %class.CFX_Font** %209, align 8
  %244 = sitofp i32 %83 to float
  %245 = getelementptr inbounds %class.CBC_OnedEAN8Writer, %class.CBC_OnedEAN8Writer* %0, i64 0, i32 0, i32 0, i32 9
  %246 = load i32, i32* %245, align 8
  %247 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %247) #9
  store i64 1099511627778, i64* %21, align 8
  %248 = call zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice* nonnull %2, i32 %76, %class.TextCharPos* %242, %class.CFX_Font* %243, float %244, %class.CFX_Matrix* nonnull dereferenceable(24) %20, i32 %246, %struct.CFX_TextRenderOptions* nonnull dereferenceable(8) %28) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %247) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %212) #9
  %249 = bitcast %"class.fxcrt::ByteString"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %249) #9
  call void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* nonnull sret %22, %"class.fxcrt::ByteString"* nonnull %7, i64 4, i64 4) #9
  %250 = call dereferenceable(8) %"class.fxcrt::ByteString"* @_ZN5fxcrt10ByteStringaSEOS0_(%"class.fxcrt::ByteString"* nonnull %10, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %22) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %22) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #9
  %251 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %68, align 8
  %252 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %251, null
  br i1 %252, label %257, label %253

253:                                              ; preds = %75
  %254 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %251, i64 0, i32 1
  %255 = load i64, i64* %254, align 8
  %256 = trunc i64 %255 to i32
  br label %257

257:                                              ; preds = %75, %253
  %258 = phi i32 [ %256, %253 ], [ 0, %75 ]
  %259 = load %class.TextCharPos*, %class.TextCharPos** %44, align 8
  %260 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %259, i64 4
  %261 = load %class.CFX_Font*, %class.CFX_Font** %209, align 8
  call void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter* %79, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %10, %class.TextCharPos* %260, %class.CFX_Font* %261, float %211, i32 %83, float* nonnull dereferenceable(4) %11) #9
  %262 = bitcast %class.CFX_Matrix* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %262) #9
  %263 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %23, i64 0, i32 4
  %264 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %23, i64 0, i32 5
  %265 = load float, float* %88, align 8
  %266 = fmul float %265, %158
  %267 = load i32, i32* %96, align 4
  %268 = add i32 %267, -1
  %269 = sitofp i32 %268 to float
  %270 = bitcast %class.CFX_Matrix* %3 to <4 x float>*
  %271 = load <4 x float>, <4 x float>* %270, align 4, !noalias !15
  %272 = fmul <4 x float> %271, zeroinitializer
  %273 = shufflevector <4 x float> %272, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %274 = extractelement <4 x float> %271, i32 0
  %275 = extractelement <4 x float> %271, i32 1
  %276 = extractelement <4 x float> %271, i32 2
  %277 = extractelement <4 x float> %271, i32 3
  %278 = fadd <4 x float> %273, %271
  %279 = fsub <4 x float> %273, %271
  %280 = shufflevector <4 x float> %278, <4 x float> %279, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %281 = fmul float %266, %274
  %282 = fmul float %276, %269
  %283 = fadd float %281, %282
  %284 = load float, float* %126, align 4, !noalias !15
  %285 = fadd float %283, %284
  %286 = fmul float %266, %275
  %287 = fmul float %277, %269
  %288 = fadd float %286, %287
  %289 = load float, float* %131, align 4, !noalias !15
  %290 = fadd float %288, %289
  %291 = bitcast %class.CFX_Matrix* %23 to <4 x float>*
  store <4 x float> %280, <4 x float>* %291, align 16
  store float %285, float* %263, align 16
  store float %290, float* %264, align 4
  %292 = load %class.TextCharPos*, %class.TextCharPos** %44, align 8
  %293 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %292, i64 4
  %294 = load %class.CFX_Font*, %class.CFX_Font** %209, align 8
  %295 = load i32, i32* %245, align 8
  %296 = bitcast i64* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %296) #9
  store i64 1099511627778, i64* %24, align 8
  %297 = call zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice* nonnull %2, i32 %258, %class.TextCharPos* %293, %class.CFX_Font* %294, float %244, %class.CFX_Matrix* nonnull dereferenceable(24) %23, i32 %295, %struct.CFX_TextRenderOptions* nonnull dereferenceable(8) %27) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %296) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %262) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %152) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %85) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #9
  %298 = load %class.TextCharPos*, %class.TextCharPos** %44, align 8
  %299 = icmp eq %class.TextCharPos* %298, null
  br i1 %299, label %313, label %300

300:                                              ; preds = %257
  %301 = bitcast %class.TextCharPos* %298 to i8*
  %302 = load %class.TextCharPos*, %class.TextCharPos** %45, align 8
  %303 = icmp eq %class.TextCharPos* %302, %298
  br i1 %303, label %311, label %304

304:                                              ; preds = %300, %304
  %305 = phi %class.TextCharPos* [ %306, %304 ], [ %302, %300 ]
  %306 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %305, i64 -1
  call void @_ZN11TextCharPosD1Ev(%class.TextCharPos* %306) #9
  %307 = icmp eq %class.TextCharPos* %306, %298
  br i1 %307, label %308, label %304

308:                                              ; preds = %304
  %309 = bitcast %"class.std::__1::vector.27"* %9 to i8**
  %310 = load i8*, i8** %309, align 8
  br label %311

311:                                              ; preds = %308, %300
  %312 = phi i8* [ %310, %308 ], [ %301, %300 ]
  store %class.TextCharPos* %298, %class.TextCharPos** %45, align 8
  call void @_ZdlPv(i8* %312) #10
  br label %313

313:                                              ; preds = %257, %311
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #9
  br label %314

314:                                              ; preds = %6, %313
  %315 = phi i1 [ true, %313 ], [ false, %6 ]
  ret i1 %315
}

declare void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #1

declare void @_ZNK5fxcrt10ByteString5FirstEm(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::ByteString"*, i64) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix*, %class.CFX_FloatRect* dereferenceable(16)) local_unnamed_addr #1

declare { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect*) local_unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12CalcTextInfoERKN5fxcrt10ByteStringEP11TextCharPosP8CFX_FontfiRf(%class.CBC_OneDimWriter*, %"class.fxcrt::ByteString"* dereferenceable(8), %class.TextCharPos*, %class.CFX_Font*, float, i32, float* dereferenceable(4)) local_unnamed_addr #1

declare zeroext i1 @_ZN16CFX_RenderDevice14DrawNormalTextEiPK11TextCharPosP8CFX_FontfRK10CFX_MatrixjRK21CFX_TextRenderOptions(%class.CFX_RenderDevice*, i32, %class.TextCharPos*, %class.CFX_Font*, float, %class.CFX_Matrix* dereferenceable(24), i32, %struct.CFX_TextRenderOptions* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::ByteString"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare dereferenceable(8) %"class.fxcrt::ByteString"* @_ZN5fxcrt10ByteStringaSEOS0_(%"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare zeroext i1 @_ZN10CBC_Writer15SetCharEncodingEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetModuleHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer14SetModuleWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer9SetHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer8SetWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer18SetWideNarrowRatioEa(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer12SetStartCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer10SetEndCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer23SetErrorCorrectionLevelEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi(%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter16SetPrintChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter15SetCalcChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter11SetFontSizeEf(%class.CBC_OneDimWriter*, float) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontStyleEi(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontColorEj(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN19CBC_OneDimEANWriter13InitEANWriterEv(%class.CBC_OneDimEANWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare zeroext i1 @_ZN16CFX_RenderDevice17FillRectWithBlendERK7FX_RECTj9BlendMode(%class.CFX_RenderDevice*, %struct.FX_RECT* dereferenceable(16), i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN11TextCharPosC1Ev(%class.TextCharPos*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11TextCharPosD1Ev(%class.TextCharPos*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 -2143841618}
!4 = !{i32 -2143841597}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!8 = distinct !{!8, !"_ZNK10CFX_MatrixmlERKS_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!11 = distinct !{!11, !"_ZNK10CFX_MatrixmlERKS_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!14 = distinct !{!14, !"_ZNK10CFX_MatrixmlERKS_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!17 = distinct !{!17, !"_ZNK10CFX_MatrixmlERKS_"}
