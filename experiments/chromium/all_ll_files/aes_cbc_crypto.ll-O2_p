; ModuleID = '../../media/cdm/aes_cbc_crypto.cc'
source_filename = "../../media/cdm/aes_cbc_crypto.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::AesCbcCrypto" = type { %struct.evp_cipher_ctx_st }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%"class.crypto::SymmetricKey" = type { i32 (...)**, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.crypto::OpenSSLErrStackTracer" = type { %"class.base::Location" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [11 x i8] c"Initialize\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"../../media/cdm/aes_cbc_crypto.cc\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"Decrypt\00", align 1

@_ZN5media12AesCbcCryptoC1Ev = hidden unnamed_addr alias void (%"class.media::AesCbcCrypto"*), void (%"class.media::AesCbcCrypto"*)* @_ZN5media12AesCbcCryptoC2Ev
@_ZN5media12AesCbcCryptoD1Ev = hidden unnamed_addr alias void (%"class.media::AesCbcCrypto"*), void (%"class.media::AesCbcCrypto"*)* @_ZN5media12AesCbcCryptoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media12AesCbcCryptoC2Ev(%"class.media::AesCbcCrypto"*) unnamed_addr #0 align 2 {
  tail call void @CRYPTO_library_init() #4
  %2 = getelementptr inbounds %"class.media::AesCbcCrypto", %"class.media::AesCbcCrypto"* %0, i64 0, i32 0
  tail call void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st* %2) #4
  ret void
}

declare void @CRYPTO_library_init() local_unnamed_addr #1

declare void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media12AesCbcCryptoD2Ev(%"class.media::AesCbcCrypto"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::AesCbcCrypto", %"class.media::AesCbcCrypto"* %0, i64 0, i32 0
  %3 = tail call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* %2) #4
  ret void
}

declare i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media12AesCbcCrypto10InitializeERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEE(%"class.media::AesCbcCrypto"*, %"class.crypto::SymmetricKey"* dereferenceable(32), i64, i8*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %6 = alloca %"class.base::Location", align 8
  %7 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = bitcast %"class.base::Location"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 51) #4
  %9 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %5, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %9, %"class.base::Location"* nonnull dereferenceable(32) %6) #4
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  %10 = call %struct.evp_cipher_st* @EVP_aes_128_cbc() #4
  %11 = getelementptr inbounds %"class.crypto::SymmetricKey", %"class.crypto::SymmetricKey"* %1, i64 0, i32 1
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.crypto::SymmetricKey", %"class.crypto::SymmetricKey"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %21 = zext i8 %14 to i64
  %22 = select i1 %15, i8* %17, i8* %20
  %23 = select i1 %15, i64 %19, i64 %21
  %24 = call i32 @EVP_CIPHER_key_length(%struct.evp_cipher_st* %10) #4
  %25 = zext i32 %24 to i64
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* %10) #4
  %29 = zext i32 %28 to i64
  %30 = icmp eq i64 %29, %2
  br i1 %30, label %31, label %38

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.media::AesCbcCrypto", %"class.media::AesCbcCrypto"* %0, i64 0, i32 0
  %33 = call i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st* %32, %struct.evp_cipher_st* %10, %struct.engine_st* null, i8* %22, i8* %3) #4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = call i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st* %32, i32 0) #4
  %37 = icmp ne i32 %36, 0
  br label %38

38:                                               ; preds = %35, %31, %27, %4
  %39 = phi i1 [ false, %4 ], [ false, %27 ], [ false, %31 ], [ %37, %35 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %9) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #4
  ret i1 %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.evp_cipher_st* @EVP_aes_128_cbc() local_unnamed_addr #1

declare i32 @EVP_CIPHER_key_length(%struct.evp_cipher_st*) local_unnamed_addr #1

declare i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st*) local_unnamed_addr #1

declare i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #1

declare i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media12AesCbcCrypto7DecryptEN4base4spanIKhLm18446744073709551615EEEPh(%"class.media::AesCbcCrypto"*, i64, i8*, i8*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %6 = alloca %"class.base::Location", align 8
  %7 = alloca i32, align 4
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #4
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 82) #4
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %5, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %6) #4
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #4
  %11 = getelementptr inbounds %"class.media::AesCbcCrypto", %"class.media::AesCbcCrypto"* %0, i64 0, i32 0
  %12 = call i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st* %11) #4
  %13 = zext i32 %12 to i64
  %14 = urem i64 %1, %13
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %30

16:                                               ; preds = %4
  %17 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #4
  store i32 -1431655766, i32* %7, align 4
  %18 = trunc i64 %1 to i32
  %19 = call i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st* %11, i8* %3, i32* nonnull %7, i8* %2, i32 %18) #4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %16
  %22 = load i32, i32* %7, align 4
  %23 = icmp sgt i32 %22, -1
  br i1 %23, label %25, label %24, !prof !2

24:                                               ; preds = %21
  call void @llvm.trap() #4
  unreachable

25:                                               ; preds = %21
  %26 = sext i32 %22 to i64
  %27 = icmp eq i64 %26, %1
  br label %28

28:                                               ; preds = %16, %25
  %29 = phi i1 [ %27, %25 ], [ false, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #4
  br label %30

30:                                               ; preds = %4, %28
  %31 = phi i1 [ %29, %28 ], [ false, %4 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret i1 %31
}

declare i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #1

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #1

declare void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
