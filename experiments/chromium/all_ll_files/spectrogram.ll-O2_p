; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/internal/spectrogram.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/internal/spectrogram.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.tflite::internal::Spectrogram" = type { i32, i32, i32, i32, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::deque", %"class.std::__1::vector.8", %"class.std::__1::vector" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::__split_buffer" = type { double**, double**, double**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { double** }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { float*, float*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { float* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.std::__1::complex"*, %"class.std::__1::complex"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::complex" = type { float, float }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::complex"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::vector.18"* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::complex.34" = type { double, double }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::complex.34"* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::vector.32"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::vector.15"* }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.std::__1::vector"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__split_buffer.70" = type { double**, double**, double**, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.std::__1::allocator.4"* }
%"class.std::__1::allocator.4" = type { i8 }

$_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIffEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi = comdat any

$_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIdfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi = comdat any

$_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIfdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIddEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIffEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIdfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIfdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE = comdat any

$_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIddEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE = comdat any

$_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi = comdat any

$_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm = comdat any

$_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKfEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdPKdRSE_PKSF_lLl0EEET_SK_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISK_EE5valueEvE4typeE = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE5eraseENS_16__deque_iteratorIdPKdRS5_PKS6_lLl0EEESA_ = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE20__add_front_capacityEm = comdat any

$_ZNSt3__14moveIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_ = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEm = comdat any

$_ZNSt3__113move_backwardIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_ = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZNSt3__16vectorINS0_INS_7complexIfEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS_7complexIfEENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKdEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdS7_RS6_PKS7_lLl0EEET_SI_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISI_EE5valueEvE4typeE = comdat any

$_ZNSt3__16vectorINS0_INS_7complexIdEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS_7complexIdEENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIffEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector.15"*, %"class.std::__1::vector.16"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %106, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.18"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.18"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %17, align 8
  %19 = icmp eq %"class.std::__1::complex"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint %"class.std::__1::complex"* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast %"class.std::__1::complex"** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::complex"* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.18"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.18"* %10, %"class.std::__1::vector.18"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* %1, i32* nonnull %4)
  br i1 %29, label %30, label %105

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.18"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* %1, i32* nonnull %4)
  br i1 %36, label %37, label %105

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.18"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_INS_7complexIfEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.16"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.18"*
  %47 = icmp eq %"class.std::__1::vector.18"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.18"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %51, align 8
  %53 = icmp eq %"class.std::__1::complex"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint %"class.std::__1::complex"* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast %"class.std::__1::complex"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast %"class.std::__1::complex"* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.18"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.18"* %46, %"class.std::__1::vector.18"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.18"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast %"class.std::__1::complex"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.18"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 3
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to %"class.std::__1::complex"*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorINS_7complexIfEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.18"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %75, i64 %66
  store %"class.std::__1::complex"* %81, %"class.std::__1::complex"** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %101, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = fptrunc double %92 to float
  %94 = or i64 %89, 1
  %95 = getelementptr inbounds double, double* %90, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fptrunc double %96 to float
  %98 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %86, align 8
  %99 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %98, i64 %88, i32 0
  store float %93, float* %99, align 4
  %100 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %98, i64 %88, i32 1
  store float %97, float* %100, align 4
  %101 = add nuw nsw i64 %88, 1
  %102 = load i32, i32* %33, align 4
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %101, %103
  br i1 %104, label %87, label %35

105:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %106

106:                                              ; preds = %3, %105
  %107 = phi i1 [ true, %105 ], [ false, %3 ]
  ret i1 %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector.15"*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %1, i64 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8
  %6 = load i32, i32* %2, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds float, float* %5, i64 %7
  %9 = ptrtoint float* %8 to i64
  %10 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %1, i64 0, i32 0, i32 1
  %11 = load float*, float** %10, align 8
  %12 = ptrtoint float* %11 to i64
  %13 = sub i64 %12, %9
  %14 = lshr exact i64 %13, 2
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, %15
  %19 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %21
  %25 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %26 = load double**, double*** %25, align 8
  %27 = lshr i64 %24, 9
  %28 = getelementptr inbounds double*, double** %26, i64 %27
  %29 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %30 = load double**, double*** %29, align 8
  %31 = icmp eq double** %30, %26
  br i1 %18, label %32, label %44

32:                                               ; preds = %3
  br i1 %31, label %37, label %33

33:                                               ; preds = %32
  %34 = load double*, double** %28, align 8
  %35 = and i64 %24, 511
  %36 = getelementptr inbounds double, double* %34, i64 %35
  br label %37

37:                                               ; preds = %32, %33
  %38 = phi double* [ %36, %33 ], [ null, %32 ]
  %39 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKfEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdPKdRSE_PKSF_lLl0EEET_SK_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISK_EE5valueEvE4typeE(%"class.std::__1::deque"* %19, double** %28, double* %38, float* %8, float* %11, i8* null)
  %40 = load i32, i32* %2, align 4
  %41 = add nsw i32 %40, %15
  store i32 %41, i32* %2, align 4
  %42 = load i32, i32* %16, align 4
  %43 = sub nsw i32 %42, %15
  br label %133

44:                                               ; preds = %3
  br i1 %31, label %49, label %45

45:                                               ; preds = %44
  %46 = load double*, double** %28, align 8
  %47 = and i64 %24, 511
  %48 = getelementptr inbounds double, double* %46, i64 %47
  br label %49

49:                                               ; preds = %44, %45
  %50 = phi double* [ %48, %45 ], [ null, %44 ]
  %51 = sext i32 %17 to i64
  %52 = getelementptr inbounds float, float* %8, i64 %51
  %53 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKfEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdPKdRSE_PKSF_lLl0EEET_SK_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISK_EE5valueEvE4typeE(%"class.std::__1::deque"* %19, double** %28, double* %50, float* %8, float* %52, i8* null)
  %54 = load i32, i32* %16, align 4
  %55 = load i32, i32* %2, align 4
  %56 = add nsw i32 %55, %54
  store i32 %56, i32* %2, align 4
  %57 = load double**, double*** %25, align 8
  %58 = load i64, i64* %22, align 8
  %59 = lshr i64 %58, 9
  %60 = getelementptr inbounds double*, double** %57, i64 %59
  %61 = load double**, double*** %29, align 8
  %62 = icmp eq double** %61, %57
  br i1 %62, label %68, label %63

63:                                               ; preds = %49
  %64 = load double*, double** %60, align 8
  %65 = and i64 %58, 511
  %66 = getelementptr inbounds double, double* %64, i64 %65
  %67 = ptrtoint double* %66 to i64
  br label %68

68:                                               ; preds = %49, %63
  %69 = phi double* [ %66, %63 ], [ null, %49 ]
  %70 = phi i64 [ %67, %63 ], [ 0, %49 ]
  %71 = load i64, i64* %20, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %96, label %73

73:                                               ; preds = %68
  %74 = bitcast double** %60 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %70, %75
  %77 = ashr exact i64 %76, 3
  %78 = add nsw i64 %77, %71
  %79 = icmp sgt i64 %78, 0
  br i1 %79, label %80, label %87

80:                                               ; preds = %73
  %81 = lshr i64 %78, 9
  %82 = getelementptr inbounds double*, double** %60, i64 %81
  %83 = load double*, double** %82, align 8
  %84 = and i64 %78, 511
  %85 = getelementptr inbounds double, double* %83, i64 %84
  %86 = ptrtoint double* %85 to i64
  br label %96

87:                                               ; preds = %73
  %88 = sub nsw i64 511, %78
  %89 = sdiv i64 %88, -512
  %90 = getelementptr inbounds double*, double** %60, i64 %89
  %91 = load double*, double** %90, align 8
  %92 = srem i64 %88, 512
  %93 = sub nsw i64 511, %92
  %94 = getelementptr inbounds double, double* %91, i64 %93
  %95 = ptrtoint double* %94 to i64
  br label %96

96:                                               ; preds = %68, %80, %87
  %97 = phi i64 [ %70, %68 ], [ %86, %80 ], [ %95, %87 ]
  %98 = phi double** [ %60, %68 ], [ %82, %80 ], [ %90, %87 ]
  %99 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %126, label %102

102:                                              ; preds = %96
  %103 = sext i32 %100 to i64
  %104 = bitcast double** %98 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %97, %105
  %107 = ashr exact i64 %106, 3
  %108 = sub nsw i64 %107, %103
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = lshr i64 %108, 9
  %112 = getelementptr inbounds double*, double** %98, i64 %111
  %113 = load double*, double** %112, align 8
  %114 = and i64 %108, 511
  %115 = getelementptr inbounds double, double* %113, i64 %114
  %116 = ptrtoint double* %115 to i64
  br label %126

117:                                              ; preds = %102
  %118 = sub nsw i64 511, %108
  %119 = sdiv i64 %118, -512
  %120 = getelementptr inbounds double*, double** %98, i64 %119
  %121 = load double*, double** %120, align 8
  %122 = srem i64 %118, 512
  %123 = sub nuw nsw i64 511, %122
  %124 = getelementptr inbounds double, double* %121, i64 %123
  %125 = ptrtoint double* %124 to i64
  br label %126

126:                                              ; preds = %96, %110, %117
  %127 = phi i64 [ %97, %96 ], [ %116, %110 ], [ %125, %117 ]
  %128 = phi double** [ %98, %96 ], [ %112, %110 ], [ %120, %117 ]
  %129 = inttoptr i64 %127 to double*
  %130 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE5eraseENS_16__deque_iteratorIdPKdRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"* %19, double** %60, double* %69, double** %128, double* %129)
  %131 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 3
  %132 = load i32, i32* %131, align 4
  br label %133

133:                                              ; preds = %126, %37
  %134 = phi i32 [ %132, %126 ], [ %43, %37 ]
  %135 = phi i1 [ true, %126 ], [ false, %37 ]
  store i32 %134, i32* %16, align 4
  ret i1 %135
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 1
  %7 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 6, i32 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %19

10:                                               ; preds = %19, %1
  %11 = phi i32 [ %3, %1 ], [ %37, %19 ]
  %12 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp slt i32 %11, %13
  %15 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7
  br i1 %14, label %16, label %40

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %18 = sext i32 %11 to i64
  br label %63

19:                                               ; preds = %5, %19
  %20 = phi i64 [ 0, %5 ], [ %36, %19 ]
  %21 = load i64, i64* %6, align 8
  %22 = add i64 %21, %20
  %23 = load double**, double*** %7, align 8
  %24 = lshr i64 %22, 9
  %25 = getelementptr inbounds double*, double** %23, i64 %24
  %26 = load double*, double** %25, align 8
  %27 = and i64 %22, 511
  %28 = getelementptr inbounds double, double* %26, i64 %27
  %29 = load double, double* %28, align 8
  %30 = load double*, double** %8, align 8
  %31 = getelementptr inbounds double, double* %30, i64 %20
  %32 = load double, double* %31, align 8
  %33 = fmul double %29, %32
  %34 = load double*, double** %9, align 8
  %35 = getelementptr inbounds double, double* %34, i64 %20
  store double %33, double* %35, align 8
  %36 = add nuw nsw i64 %20, 1
  %37 = load i32, i32* %2, align 8
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %19, label %10

40:                                               ; preds = %63, %10
  %41 = phi i32 [ %13, %10 ], [ %68, %63 ]
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %43 = load double*, double** %42, align 8
  %44 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 9, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 10, i32 0, i32 0
  %47 = load double*, double** %46, align 8
  tail call void @rdft(i32 %41, i32 1, double* %43, i32* %45, double* %47) #10
  %48 = load double*, double** %42, align 8
  %49 = getelementptr inbounds double, double* %48, i64 1
  %50 = bitcast double* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = load i32, i32* %12, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double, double* %48, i64 %53
  %55 = bitcast double* %54 to i64*
  store i64 %51, i64* %55, align 8
  %56 = load i32, i32* %12, align 8
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = load double*, double** %42, align 8
  %60 = getelementptr inbounds double, double* %59, i64 %58
  store double 0.000000e+00, double* %60, align 8
  %61 = load double*, double** %42, align 8
  %62 = getelementptr inbounds double, double* %61, i64 1
  store double 0.000000e+00, double* %62, align 8
  ret void

63:                                               ; preds = %16, %63
  %64 = phi i64 [ %18, %16 ], [ %67, %63 ]
  %65 = load double*, double** %17, align 8
  %66 = getelementptr inbounds double, double* %65, i64 %64
  store double 0.000000e+00, double* %66, align 8
  %67 = add nsw i64 %64, 1
  %68 = load i32, i32* %12, align 8
  %69 = sext i32 %68 to i64
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %63, label %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIdfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.16"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %106, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.18"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.18"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %17, align 8
  %19 = icmp eq %"class.std::__1::complex"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint %"class.std::__1::complex"* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast %"class.std::__1::complex"** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::complex"* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.18"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.18"* %10, %"class.std::__1::vector.18"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %105

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.18"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %105

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.18"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_INS_7complexIfEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.16"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.18"*
  %47 = icmp eq %"class.std::__1::vector.18"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.18"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %51, align 8
  %53 = icmp eq %"class.std::__1::complex"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint %"class.std::__1::complex"* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast %"class.std::__1::complex"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast %"class.std::__1::complex"* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.18"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.18"* %46, %"class.std::__1::vector.18"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.18"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast %"class.std::__1::complex"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.18"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 3
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to %"class.std::__1::complex"*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorINS_7complexIfEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.18"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %75, i64 %66
  store %"class.std::__1::complex"* %81, %"class.std::__1::complex"** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %101, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = fptrunc double %92 to float
  %94 = or i64 %89, 1
  %95 = getelementptr inbounds double, double* %90, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fptrunc double %96 to float
  %98 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %86, align 8
  %99 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %98, i64 %88, i32 0
  store float %93, float* %99, align 4
  %100 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %98, i64 %88, i32 1
  store float %97, float* %100, align 4
  %101 = add nuw nsw i64 %88, 1
  %102 = load i32, i32* %33, align 4
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %101, %103
  br i1 %104, label %87, label %35

105:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %106

106:                                              ; preds = %3, %105
  %107 = phi i1 [ true, %105 ], [ false, %3 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* dereferenceable(24), i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %5 = load double*, double** %4, align 8
  %6 = load i32, i32* %2, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds double, double* %5, i64 %7
  %9 = ptrtoint double* %8 to i64
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = load double*, double** %10, align 8
  %12 = ptrtoint double* %11 to i64
  %13 = sub i64 %12, %9
  %14 = lshr exact i64 %13, 3
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, %15
  %19 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %21
  %25 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %26 = load double**, double*** %25, align 8
  %27 = lshr i64 %24, 9
  %28 = getelementptr inbounds double*, double** %26, i64 %27
  %29 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %30 = load double**, double*** %29, align 8
  %31 = icmp eq double** %30, %26
  br i1 %18, label %32, label %44

32:                                               ; preds = %3
  br i1 %31, label %37, label %33

33:                                               ; preds = %32
  %34 = load double*, double** %28, align 8
  %35 = and i64 %24, 511
  %36 = getelementptr inbounds double, double* %34, i64 %35
  br label %37

37:                                               ; preds = %32, %33
  %38 = phi double* [ %36, %33 ], [ null, %32 ]
  %39 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKdEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdS7_RS6_PKS7_lLl0EEET_SI_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISI_EE5valueEvE4typeE(%"class.std::__1::deque"* %19, double** %28, double* %38, double* %8, double* %11, i8* null)
  %40 = load i32, i32* %2, align 4
  %41 = add nsw i32 %40, %15
  store i32 %41, i32* %2, align 4
  %42 = load i32, i32* %16, align 4
  %43 = sub nsw i32 %42, %15
  br label %133

44:                                               ; preds = %3
  br i1 %31, label %49, label %45

45:                                               ; preds = %44
  %46 = load double*, double** %28, align 8
  %47 = and i64 %24, 511
  %48 = getelementptr inbounds double, double* %46, i64 %47
  br label %49

49:                                               ; preds = %44, %45
  %50 = phi double* [ %48, %45 ], [ null, %44 ]
  %51 = sext i32 %17 to i64
  %52 = getelementptr inbounds double, double* %8, i64 %51
  %53 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKdEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdS7_RS6_PKS7_lLl0EEET_SI_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISI_EE5valueEvE4typeE(%"class.std::__1::deque"* %19, double** %28, double* %50, double* %8, double* %52, i8* null)
  %54 = load i32, i32* %16, align 4
  %55 = load i32, i32* %2, align 4
  %56 = add nsw i32 %55, %54
  store i32 %56, i32* %2, align 4
  %57 = load double**, double*** %25, align 8
  %58 = load i64, i64* %22, align 8
  %59 = lshr i64 %58, 9
  %60 = getelementptr inbounds double*, double** %57, i64 %59
  %61 = load double**, double*** %29, align 8
  %62 = icmp eq double** %61, %57
  br i1 %62, label %68, label %63

63:                                               ; preds = %49
  %64 = load double*, double** %60, align 8
  %65 = and i64 %58, 511
  %66 = getelementptr inbounds double, double* %64, i64 %65
  %67 = ptrtoint double* %66 to i64
  br label %68

68:                                               ; preds = %49, %63
  %69 = phi double* [ %66, %63 ], [ null, %49 ]
  %70 = phi i64 [ %67, %63 ], [ 0, %49 ]
  %71 = load i64, i64* %20, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %96, label %73

73:                                               ; preds = %68
  %74 = bitcast double** %60 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %70, %75
  %77 = ashr exact i64 %76, 3
  %78 = add nsw i64 %77, %71
  %79 = icmp sgt i64 %78, 0
  br i1 %79, label %80, label %87

80:                                               ; preds = %73
  %81 = lshr i64 %78, 9
  %82 = getelementptr inbounds double*, double** %60, i64 %81
  %83 = load double*, double** %82, align 8
  %84 = and i64 %78, 511
  %85 = getelementptr inbounds double, double* %83, i64 %84
  %86 = ptrtoint double* %85 to i64
  br label %96

87:                                               ; preds = %73
  %88 = sub nsw i64 511, %78
  %89 = sdiv i64 %88, -512
  %90 = getelementptr inbounds double*, double** %60, i64 %89
  %91 = load double*, double** %90, align 8
  %92 = srem i64 %88, 512
  %93 = sub nsw i64 511, %92
  %94 = getelementptr inbounds double, double* %91, i64 %93
  %95 = ptrtoint double* %94 to i64
  br label %96

96:                                               ; preds = %68, %80, %87
  %97 = phi i64 [ %70, %68 ], [ %86, %80 ], [ %95, %87 ]
  %98 = phi double** [ %60, %68 ], [ %82, %80 ], [ %90, %87 ]
  %99 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %126, label %102

102:                                              ; preds = %96
  %103 = sext i32 %100 to i64
  %104 = bitcast double** %98 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %97, %105
  %107 = ashr exact i64 %106, 3
  %108 = sub nsw i64 %107, %103
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = lshr i64 %108, 9
  %112 = getelementptr inbounds double*, double** %98, i64 %111
  %113 = load double*, double** %112, align 8
  %114 = and i64 %108, 511
  %115 = getelementptr inbounds double, double* %113, i64 %114
  %116 = ptrtoint double* %115 to i64
  br label %126

117:                                              ; preds = %102
  %118 = sub nsw i64 511, %108
  %119 = sdiv i64 %118, -512
  %120 = getelementptr inbounds double*, double** %98, i64 %119
  %121 = load double*, double** %120, align 8
  %122 = srem i64 %118, 512
  %123 = sub nuw nsw i64 511, %122
  %124 = getelementptr inbounds double, double* %121, i64 %123
  %125 = ptrtoint double* %124 to i64
  br label %126

126:                                              ; preds = %96, %110, %117
  %127 = phi i64 [ %97, %96 ], [ %116, %110 ], [ %125, %117 ]
  %128 = phi double** [ %98, %96 ], [ %112, %110 ], [ %120, %117 ]
  %129 = inttoptr i64 %127 to double*
  %130 = tail call { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE5eraseENS_16__deque_iteratorIdPKdRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"* %19, double** %60, double* %69, double** %128, double* %129)
  %131 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 3
  %132 = load i32, i32* %131, align 4
  br label %133

133:                                              ; preds = %126, %37
  %134 = phi i32 [ %132, %126 ], [ %43, %37 ]
  %135 = phi i1 [ true, %126 ], [ false, %37 ]
  store i32 %134, i32* %16, align 4
  ret i1 %135
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIfdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector.15"*, %"class.std::__1::vector.30"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %102, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.32"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.32"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %17, align 8
  %19 = icmp eq %"class.std::__1::complex.34"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint %"class.std::__1::complex.34"* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast %"class.std::__1::complex.34"** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::complex.34"* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.32"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.32"* %10, %"class.std::__1::vector.32"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* %1, i32* nonnull %4)
  br i1 %29, label %30, label %101

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.32"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.30"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* %1, i32* nonnull %4)
  br i1 %36, label %37, label %101

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.32"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_INS_7complexIdEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.30"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.32"*
  %47 = icmp eq %"class.std::__1::vector.32"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.32"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %51, align 8
  %53 = icmp eq %"class.std::__1::complex.34"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint %"class.std::__1::complex.34"* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast %"class.std::__1::complex.34"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast %"class.std::__1::complex.34"* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.32"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.32"* %46, %"class.std::__1::vector.32"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.32"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast %"class.std::__1::complex.34"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.32"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 4
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to %"class.std::__1::complex.34"*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorINS_7complexIdEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.32"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %75, i64 %66
  store %"class.std::__1::complex.34"* %81, %"class.std::__1::complex.34"** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %97, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = bitcast double* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8
  %94 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %86, align 8
  %95 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %94, i64 %88
  %96 = bitcast %"class.std::__1::complex.34"* %95 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %96, align 8
  %97 = add nuw nsw i64 %88, 1
  %98 = load i32, i32* %33, align 4
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %87, label %35

101:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %102

102:                                              ; preds = %3, %101
  %103 = phi i1 [ true, %101 ], [ false, %3 ]
  ret i1 %103
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram25ComputeComplexSpectrogramIddEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_INS3_7complexIT0_EENS6_ISD_EEEENS6_ISF_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.30"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %102, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.32"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.32"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %17, align 8
  %19 = icmp eq %"class.std::__1::complex.34"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint %"class.std::__1::complex.34"* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast %"class.std::__1::complex.34"** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::complex.34"* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.32"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.32"* %10, %"class.std::__1::vector.32"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %101

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.32"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.30"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %101

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.32"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_INS_7complexIdEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.30"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.32"*
  %47 = icmp eq %"class.std::__1::vector.32"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.32"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %51, align 8
  %53 = icmp eq %"class.std::__1::complex.34"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint %"class.std::__1::complex.34"* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast %"class.std::__1::complex.34"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast %"class.std::__1::complex.34"* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.32"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.32"* %46, %"class.std::__1::vector.32"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.32"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast %"class.std::__1::complex.34"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.32"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 4
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to %"class.std::__1::complex.34"*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorINS_7complexIdEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.32"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %75, i64 %66
  store %"class.std::__1::complex.34"* %81, %"class.std::__1::complex.34"** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %97, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = bitcast double* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8
  %94 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %86, align 8
  %95 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %94, i64 %88
  %96 = bitcast %"class.std::__1::complex.34"* %95 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %96, align 8
  %97 = add nuw nsw i64 %88, 1
  %98 = load i32, i32* %33, align 4
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %87, label %35

101:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %102

102:                                              ; preds = %3, %101
  %103 = phi i1 [ true, %101 ], [ false, %3 ]
  ret i1 %103
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIffEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector.15"* dereferenceable(24), %"class.std::__1::vector.51"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %107, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.15"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.15"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %16, i64 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  %19 = icmp eq float* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint float* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast float** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast float* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.15"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.15"* %10, %"class.std::__1::vector.15"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %106

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.15"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.51"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %106

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.15"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.51"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.15"*
  %47 = icmp eq %"class.std::__1::vector.15"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.15"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %50, i64 0, i32 0, i32 0
  %52 = load float*, float** %51, align 8
  %53 = icmp eq float* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint float* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast float** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast float* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.15"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.15"* %46, %"class.std::__1::vector.15"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.15"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast float** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.15"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 2
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to float*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.15"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds float, float* %75, i64 %66
  store float* %81, float** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %102, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds double, double* %90, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fmul double %92, %92
  %97 = fmul double %95, %95
  %98 = fadd double %96, %97
  %99 = fptrunc double %98 to float
  %100 = load float*, float** %86, align 8
  %101 = getelementptr inbounds float, float* %100, i64 %88
  store float %99, float* %101, align 4
  %102 = add nuw nsw i64 %88, 1
  %103 = load i32, i32* %33, align 4
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %87, label %35

106:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %107

107:                                              ; preds = %3, %106
  %108 = phi i1 [ true, %106 ], [ false, %3 ]
  ret i1 %108
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIdfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.51"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %107, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.15"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector.15"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %16, i64 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  %19 = icmp eq float* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint float* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast float** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast float* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector.15"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector.15"* %10, %"class.std::__1::vector.15"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %106

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector.15"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.51"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %106

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector.15"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.51"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector.15"*
  %47 = icmp eq %"class.std::__1::vector.15"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector.15"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %50, i64 0, i32 0, i32 0
  %52 = load float*, float** %51, align 8
  %53 = icmp eq float* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint float* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast float** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast float* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector.15"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector.15"* %46, %"class.std::__1::vector.15"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector.15"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast float** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.15"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 2
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to float*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.15"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds float, float* %75, i64 %66
  store float* %81, float** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %102, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds double, double* %90, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fmul double %92, %92
  %97 = fmul double %95, %95
  %98 = fadd double %96, %97
  %99 = fptrunc double %98 to float
  %100 = load float*, float** %86, align 8
  %101 = getelementptr inbounds float, float* %100, i64 %88
  store float %99, float* %101, align 4
  %102 = add nuw nsw i64 %88, 1
  %103 = load i32, i32* %33, align 4
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %87, label %35

106:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %107

107:                                              ; preds = %3, %106
  %108 = phi i1 [ true, %106 ], [ false, %3 ]
  ret i1 %108
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIfdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector.15"* dereferenceable(24), %"class.std::__1::vector.58"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %106, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %18 = load double*, double** %17, align 8
  %19 = icmp eq double* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint double* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast double** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast double* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector"* %10, %"class.std::__1::vector"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %105

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.58"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIfEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector.15"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %105

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.58"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector"*
  %47 = icmp eq %"class.std::__1::vector"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %50, i64 0, i32 0, i32 0
  %52 = load double*, double** %51, align 8
  %53 = icmp eq double* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint double* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast double** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast double* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector"* %46, %"class.std::__1::vector"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast double** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 3
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to double*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds double, double* %75, i64 %66
  store double* %81, double** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %101, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds double, double* %90, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fmul double %92, %92
  %97 = fmul double %95, %95
  %98 = fadd double %96, %97
  %99 = load double*, double** %86, align 8
  %100 = getelementptr inbounds double, double* %99, i64 %88
  store double %98, double* %100, align 8
  %101 = add nuw nsw i64 %88, 1
  %102 = load i32, i32* %33, align 4
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %101, %103
  br i1 %104, label %87, label %35

105:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %106

106:                                              ; preds = %3, %105
  %107 = phi i1 [ true, %105 ], [ false, %3 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN6tflite8internal11Spectrogram34ComputeSquaredMagnitudeSpectrogramIddEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPNS4_INS4_IT0_NS6_ISB_EEEENS6_ISD_EEEE(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.58"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %106, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector"* %12, %10
  br i1 %13, label %27, label %14

14:                                               ; preds = %8, %25
  %15 = phi %"class.std::__1::vector"* [ %16, %25 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %18 = load double*, double** %17, align 8
  %19 = icmp eq double* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = ptrtoint double* %18 to i64
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 -1, i32 0, i32 1
  %23 = bitcast double** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast double* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #9
  br label %25

25:                                               ; preds = %20, %14
  %26 = icmp eq %"class.std::__1::vector"* %16, %10
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %8
  store %"class.std::__1::vector"* %10, %"class.std::__1::vector"** %11, align 8
  %28 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 0, i32* %4, align 4
  %29 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %29, label %30, label %105

30:                                               ; preds = %27
  %31 = bitcast %"class.std::__1::vector"** %11 to i64*
  %32 = bitcast %"class.std::__1::vector.58"* %2 to i64*
  %33 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7, i32 0, i32 0
  br label %37

35:                                               ; preds = %87, %82
  %36 = call zeroext i1 @_ZN6tflite8internal11Spectrogram22GetNextWindowOfSamplesIdEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEEPi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* dereferenceable(24) %1, i32* nonnull %4)
  br i1 %36, label %37, label %105

37:                                               ; preds = %30, %35
  call void @_ZN6tflite8internal11Spectrogram14ProcessCoreFFTEv(%"class.tflite::internal::Spectrogram"* %0)
  %38 = load i64, i64* %31, align 8
  %39 = load i64, i64* %32, align 8
  %40 = sub i64 %38, %39
  %41 = icmp eq i64 %40, -24
  %42 = inttoptr i64 %38 to %"class.std::__1::vector"*
  br i1 %41, label %45, label %43

43:                                               ; preds = %37
  call void @_ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.58"* %2, i64 1) #10
  %44 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  br label %62

45:                                               ; preds = %37
  %46 = inttoptr i64 %39 to %"class.std::__1::vector"*
  %47 = icmp eq %"class.std::__1::vector"* %46, %42
  br i1 %47, label %61, label %48

48:                                               ; preds = %45, %59
  %49 = phi %"class.std::__1::vector"* [ %50, %59 ], [ %42, %45 ]
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %50, i64 0, i32 0, i32 0
  %52 = load double*, double** %51, align 8
  %53 = icmp eq double* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint double* %52 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %49, i64 -1, i32 0, i32 1
  %57 = bitcast double** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast double* %52 to i8*
  call void @_ZdlPv(i8* %58) #9
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"class.std::__1::vector"* %50, %46
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %45
  store %"class.std::__1::vector"* %46, %"class.std::__1::vector"** %11, align 8
  br label %62

62:                                               ; preds = %43, %61
  %63 = phi %"class.std::__1::vector"* [ %44, %43 ], [ %46, %61 ]
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %63, i64 -1
  %65 = load i32, i32* %33, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %63, i64 -1, i32 0, i32 1
  %68 = bitcast double** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector"* %64 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 3
  %74 = icmp ult i64 %73, %66
  %75 = inttoptr i64 %71 to double*
  br i1 %74, label %76, label %78

76:                                               ; preds = %62
  %77 = sub nsw i64 %66, %73
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"* %64, i64 %77) #10
  br label %82

78:                                               ; preds = %62
  %79 = icmp ugt i64 %73, %66
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds double, double* %75, i64 %66
  store double* %81, double** %67, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i32, i32* %33, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %35

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %64, i64 0, i32 0, i32 0
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ 0, %85 ], [ %101, %87 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = load double*, double** %34, align 8
  %91 = getelementptr inbounds double, double* %90, i64 %89
  %92 = load double, double* %91, align 8
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds double, double* %90, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fmul double %92, %92
  %97 = fmul double %95, %95
  %98 = fadd double %96, %97
  %99 = load double*, double** %86, align 8
  %100 = getelementptr inbounds double, double* %99, i64 %88
  store double %98, double* %100, align 8
  %101 = add nuw nsw i64 %88, 1
  %102 = load i32, i32* %33, align 4
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %101, %103
  br i1 %104, label %87, label %35

105:                                              ; preds = %35, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  br label %106

106:                                              ; preds = %3, %105
  %107 = phi i1 [ true, %105 ], [ false, %3 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6tflite8internal11Spectrogram10InitializeEii(%"class.tflite::internal::Spectrogram"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #10
  %8 = tail call double @atan(double 1.000000e+00) #10
  %9 = bitcast double** %7 to i64*
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %59, label %11

11:                                               ; preds = %3
  %12 = sext i32 %1 to i64
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"* nonnull %4, i64 %12) #10
  %13 = icmp sgt i32 %1, 0
  br i1 %13, label %14, label %59

14:                                               ; preds = %11
  %15 = sitofp i32 %1 to double
  %16 = zext i32 %1 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i32 %1, 1
  br i1 %18, label %46, label %19

19:                                               ; preds = %14
  %20 = sub nsw i64 %16, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %21 ]
  %23 = phi i64 [ %20, %19 ], [ %44, %21 ]
  %24 = trunc i64 %22 to i32
  %25 = sitofp i32 %24 to double
  %26 = fmul double %25, 0x401921FB54442D18
  %27 = fdiv double %26, %15
  %28 = call double @cos(double %27) #10
  %29 = fmul double %28, 5.000000e-01
  %30 = fsub double 5.000000e-01, %29
  %31 = load double*, double** %6, align 8
  %32 = getelementptr inbounds double, double* %31, i64 %22
  store double %30, double* %32, align 8
  %33 = or i64 %22, 1
  %34 = trunc i64 %33 to i32
  %35 = sitofp i32 %34 to double
  %36 = fmul double %35, 0x401921FB54442D18
  %37 = fdiv double %36, %15
  %38 = call double @cos(double %37) #10
  %39 = fmul double %38, 5.000000e-01
  %40 = fsub double 5.000000e-01, %39
  %41 = load double*, double** %6, align 8
  %42 = getelementptr inbounds double, double* %41, i64 %33
  store double %40, double* %42, align 8
  %43 = add nuw nsw i64 %22, 2
  %44 = add i64 %23, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %21

46:                                               ; preds = %21, %14
  %47 = phi i64 [ 0, %14 ], [ %43, %21 ]
  %48 = icmp eq i64 %17, 0
  br i1 %48, label %59, label %49

49:                                               ; preds = %46
  %50 = trunc i64 %47 to i32
  %51 = sitofp i32 %50 to double
  %52 = fmul double %51, 0x401921FB54442D18
  %53 = fdiv double %52, %15
  %54 = call double @cos(double %53) #10
  %55 = fmul double %54, 5.000000e-01
  %56 = fsub double 5.000000e-01, %55
  %57 = load double*, double** %6, align 8
  %58 = getelementptr inbounds double, double* %57, i64 %47
  store double %56, double* %58, align 8
  br label %59

59:                                               ; preds = %49, %46, %3, %11
  %60 = call zeroext i1 @_ZN6tflite8internal11Spectrogram10InitializeERKNSt3__16vectorIdNS2_9allocatorIdEEEEi(%"class.tflite::internal::Spectrogram"* %0, %"class.std::__1::vector"* nonnull dereferenceable(24) %4, i32 %2)
  %61 = load double*, double** %6, align 8
  %62 = icmp eq double* %61, null
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = ptrtoint double* %61 to i64
  store i64 %64, i64* %9, align 8
  %65 = bitcast double* %61 to i8*
  call void @_ZdlPv(i8* %65) #9
  br label %66

66:                                               ; preds = %59, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6tflite8internal11Spectrogram10InitializeERKNSt3__16vectorIdNS2_9allocatorIdEEEEi(%"class.tflite::internal::Spectrogram"*, %"class.std::__1::vector"* readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = bitcast double** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = lshr exact i64 %12, 3
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 2
  store i32 %14, i32* %15, align 8
  %16 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 6
  %17 = icmp eq %"class.std::__1::vector"* %16, %1
  br i1 %17, label %23, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %20 = load double*, double** %19, align 8
  %21 = load double*, double** %7, align 8
  tail call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %16, double* %20, double* %21) #10
  %22 = load i32, i32* %15, align 8
  br label %23

23:                                               ; preds = %3, %18
  %24 = phi i32 [ %14, %3 ], [ %22, %18 ]
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %148, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 3
  store i32 %2, i32* %27, align 4
  %28 = icmp slt i32 %2, 1
  br i1 %28, label %148, label %29

29:                                               ; preds = %26
  %30 = lshr i32 %24, 16
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 0, i32 16
  %33 = select i1 %31, i32 %24, i32 %30
  %34 = lshr i32 %33, 8
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 0, i32 8
  %37 = or i32 %36, %32
  %38 = select i1 %35, i32 %33, i32 %34
  %39 = lshr i32 %38, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i32 0, i32 4
  %42 = or i32 %37, %41
  %43 = select i1 %40, i32 %38, i32 %39
  %44 = lshr i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, i32 0, i32 2
  %47 = or i32 %42, %46
  %48 = select i1 %45, i32 %43, i32 %44
  %49 = icmp ugt i32 %48, 1
  %50 = zext i1 %49 to i32
  %51 = or i32 %47, %50
  %52 = tail call i32 @llvm.ctpop.i32(i32 %24) #10, !range !3
  %53 = icmp ugt i32 %52, 1
  %54 = zext i1 %53 to i32
  %55 = add nuw nsw i32 %51, %54
  %56 = shl i32 1, %55
  %57 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 0
  store i32 %56, i32* %57, align 8
  %58 = sdiv i32 %56, 2
  %59 = add nsw i32 %58, 1
  %60 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 1
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 7
  %62 = add nsw i32 %56, 2
  %63 = sext i32 %62 to i64
  %64 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #10
  store double 0.000000e+00, double* %4, align 8
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd(%"class.std::__1::vector"* %61, i64 %63, double* nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #10
  %65 = load i32, i32* %57, align 8
  %66 = sdiv i32 %65, 2
  %67 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 10
  %68 = sext i32 %66 to i64
  %69 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #10
  store double 0.000000e+00, double* %5, align 8
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd(%"class.std::__1::vector"* %67, i64 %68, double* nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #10
  %70 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 9
  %71 = sitofp i32 %66 to double
  %72 = call double @sqrt(double %71) #10
  %73 = fptosi double %72 to i32
  %74 = add nsw i32 %73, 2
  %75 = sext i32 %74 to i64
  %76 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %76) #10
  store i32 0, i32* %6, align 4
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi(%"class.std::__1::vector.8"* %70, i64 %75, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76) #10
  %77 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %70, i64 0, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %80 = load double**, double*** %79, align 8
  %81 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 9
  %84 = getelementptr inbounds double*, double** %80, i64 %83
  %85 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %86 = load double**, double*** %85, align 8
  %87 = icmp eq double** %86, %80
  %88 = ptrtoint double** %86 to i64
  %89 = ptrtoint double** %80 to i64
  br i1 %87, label %90, label %92

90:                                               ; preds = %29
  %91 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  br label %105

92:                                               ; preds = %29
  %93 = load double*, double** %84, align 8
  %94 = and i64 %82, 511
  %95 = getelementptr inbounds double, double* %93, i64 %94
  %96 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, %82
  %99 = lshr i64 %98, 9
  %100 = getelementptr inbounds double*, double** %80, i64 %99
  %101 = load double*, double** %100, align 8
  %102 = and i64 %98, 511
  %103 = getelementptr inbounds double, double* %101, i64 %102
  %104 = icmp eq double* %103, %95
  br i1 %104, label %105, label %111

105:                                              ; preds = %124, %92, %90
  %106 = phi i64* [ %91, %90 ], [ %96, %92 ], [ %96, %124 ]
  store i64 0, i64* %106, align 8
  %107 = bitcast double*** %85 to i64*
  %108 = sub i64 %88, %89
  %109 = ashr exact i64 %108, 3
  %110 = icmp ugt i64 %109, 2
  br i1 %110, label %129, label %140

111:                                              ; preds = %92, %124
  %112 = phi double* [ %127, %124 ], [ %95, %92 ]
  %113 = phi double** [ %126, %124 ], [ %84, %92 ]
  %114 = getelementptr inbounds double, double* %112, i64 1
  %115 = ptrtoint double* %114 to i64
  %116 = bitcast double** %113 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %115, %117
  %119 = icmp eq i64 %118, 4096
  br i1 %119, label %120, label %124

120:                                              ; preds = %111
  %121 = getelementptr inbounds double*, double** %113, i64 1
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  br label %124

124:                                              ; preds = %120, %111
  %125 = phi i64 [ %123, %120 ], [ %115, %111 ]
  %126 = phi double** [ %121, %120 ], [ %113, %111 ]
  %127 = inttoptr i64 %125 to double*
  %128 = icmp eq double* %103, %127
  br i1 %128, label %105, label %111

129:                                              ; preds = %105, %129
  %130 = phi double** [ %134, %129 ], [ %80, %105 ]
  %131 = bitcast double** %130 to i8**
  %132 = load i8*, i8** %131, align 8
  call void @_ZdlPv(i8* %132) #9
  %133 = load double**, double*** %79, align 8
  %134 = getelementptr inbounds double*, double** %133, i64 1
  store double** %134, double*** %79, align 8
  %135 = load i64, i64* %107, align 8
  %136 = ptrtoint double** %134 to i64
  %137 = sub i64 %135, %136
  %138 = ashr exact i64 %137, 3
  %139 = icmp ugt i64 %138, 2
  br i1 %139, label %129, label %140

140:                                              ; preds = %129, %105
  %141 = phi i64 [ %109, %105 ], [ %138, %129 ]
  switch i64 %141, label %145 [
    i64 1, label %143
    i64 2, label %142
  ]

142:                                              ; preds = %140
  br label %143

143:                                              ; preds = %140, %142
  %144 = phi i64 [ 512, %142 ], [ 256, %140 ]
  store i64 %144, i64* %81, align 8
  br label %145

145:                                              ; preds = %143, %140
  %146 = load i32, i32* %15, align 8
  %147 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 5
  store i32 %146, i32* %147, align 4
  br label %148

148:                                              ; preds = %26, %23, %145
  %149 = phi i8 [ 1, %145 ], [ 0, %23 ], [ 0, %26 ]
  %150 = phi i1 [ true, %145 ], [ false, %23 ], [ false, %26 ]
  %151 = getelementptr inbounds %"class.tflite::internal::Spectrogram", %"class.tflite::internal::Spectrogram"* %0, i64 0, i32 4
  store i8 %149, i8* %151, align 8
  ret i1 %150
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd(%"class.std::__1::vector"*, i64, double* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast double* %2 to i8*
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast double** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, %1
  %13 = inttoptr i64 %9 to double*
  %14 = inttoptr i64 %9 to i8*
  br i1 %12, label %268, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast double** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %9
  %20 = ashr exact i64 %19, 3
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %22 = icmp ult i64 %20, %1
  %23 = select i1 %22, i64 %20, i64 %1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %134, label %25

25:                                               ; preds = %15
  %26 = bitcast double* %2 to i64*
  %27 = icmp ult i64 %23, 4
  br i1 %27, label %85, label %28

28:                                               ; preds = %25
  %29 = getelementptr double, double* %13, i64 %23
  %30 = getelementptr i8, i8* %4, i64 1
  %31 = icmp ugt i8* %30, %14
  %32 = icmp ugt double* %29, %2
  %33 = and i1 %31, %32
  br i1 %33, label %85, label %34

34:                                               ; preds = %28
  %35 = and i64 %23, -4
  %36 = getelementptr double, double* %13, i64 %35
  %37 = sub i64 %23, %35
  %38 = add i64 %35, -4
  %39 = lshr exact i64 %38, 2
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %70, label %43

43:                                               ; preds = %34
  %44 = sub nuw nsw i64 %40, %41
  %45 = load i64, i64* %26, align 8, !alias.scope !4
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = shufflevector <2 x i64> %46, <2 x i64> undef, <2 x i32> zeroinitializer
  %48 = insertelement <2 x i64> undef, i64 %45, i32 0
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <2 x i32> zeroinitializer
  %50 = load i64, i64* %26, align 8, !alias.scope !4
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = shufflevector <2 x i64> %51, <2 x i64> undef, <2 x i32> zeroinitializer
  %53 = insertelement <2 x i64> undef, i64 %50, i32 0
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %55

55:                                               ; preds = %55, %43
  %56 = phi i64 [ 0, %43 ], [ %67, %55 ]
  %57 = phi i64 [ %44, %43 ], [ %68, %55 ]
  %58 = getelementptr double, double* %13, i64 %56
  %59 = bitcast double* %58 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %59, align 8, !alias.scope !7, !noalias !4
  %60 = getelementptr double, double* %58, i64 2
  %61 = bitcast double* %60 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %61, align 8, !alias.scope !7, !noalias !4
  %62 = or i64 %56, 4
  %63 = getelementptr double, double* %13, i64 %62
  %64 = bitcast double* %63 to <2 x i64>*
  store <2 x i64> %52, <2 x i64>* %64, align 8, !alias.scope !7, !noalias !4
  %65 = getelementptr double, double* %63, i64 2
  %66 = bitcast double* %65 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %66, align 8, !alias.scope !7, !noalias !4
  %67 = add i64 %56, 8
  %68 = add i64 %57, -2
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %55, !llvm.loop !9

70:                                               ; preds = %55, %34
  %71 = phi i64 [ 0, %34 ], [ %67, %55 ]
  %72 = icmp eq i64 %41, 0
  br i1 %72, label %83, label %73

73:                                               ; preds = %70
  %74 = getelementptr double, double* %13, i64 %71
  %75 = load i64, i64* %26, align 8, !alias.scope !4
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <2 x i32> zeroinitializer
  %78 = insertelement <2 x i64> undef, i64 %75, i32 0
  %79 = shufflevector <2 x i64> %78, <2 x i64> undef, <2 x i32> zeroinitializer
  %80 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %80, align 8, !alias.scope !7, !noalias !4
  %81 = getelementptr double, double* %74, i64 2
  %82 = bitcast double* %81 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %82, align 8, !alias.scope !7, !noalias !4
  br label %83

83:                                               ; preds = %70, %73
  %84 = icmp eq i64 %23, %35
  br i1 %84, label %134, label %85

85:                                               ; preds = %83, %28, %25
  %86 = phi double* [ %13, %28 ], [ %13, %25 ], [ %36, %83 ]
  %87 = phi i64 [ %23, %28 ], [ %23, %25 ], [ %37, %83 ]
  %88 = add i64 %87, -1
  %89 = and i64 %87, 7
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %101, label %91

91:                                               ; preds = %85, %91
  %92 = phi double* [ %97, %91 ], [ %86, %85 ]
  %93 = phi i64 [ %98, %91 ], [ %87, %85 ]
  %94 = phi i64 [ %99, %91 ], [ %89, %85 ]
  %95 = load i64, i64* %26, align 8
  %96 = bitcast double* %92 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds double, double* %92, i64 1
  %98 = add i64 %93, -1
  %99 = add i64 %94, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %91, !llvm.loop !11

101:                                              ; preds = %91, %85
  %102 = phi double* [ %86, %85 ], [ %97, %91 ]
  %103 = phi i64 [ %87, %85 ], [ %98, %91 ]
  %104 = icmp ult i64 %88, 7
  br i1 %104, label %134, label %105

105:                                              ; preds = %101, %105
  %106 = phi double* [ %131, %105 ], [ %102, %101 ]
  %107 = phi i64 [ %132, %105 ], [ %103, %101 ]
  %108 = load i64, i64* %26, align 8
  %109 = bitcast double* %106 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double, double* %106, i64 1
  %111 = load i64, i64* %26, align 8
  %112 = bitcast double* %110 to i64*
  store i64 %111, i64* %112, align 8
  %113 = getelementptr inbounds double, double* %106, i64 2
  %114 = load i64, i64* %26, align 8
  %115 = bitcast double* %113 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double, double* %106, i64 3
  %117 = load i64, i64* %26, align 8
  %118 = bitcast double* %116 to i64*
  store i64 %117, i64* %118, align 8
  %119 = getelementptr inbounds double, double* %106, i64 4
  %120 = load i64, i64* %26, align 8
  %121 = bitcast double* %119 to i64*
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds double, double* %106, i64 5
  %123 = load i64, i64* %26, align 8
  %124 = bitcast double* %122 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double, double* %106, i64 6
  %126 = load i64, i64* %26, align 8
  %127 = bitcast double* %125 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds double, double* %106, i64 7
  %129 = load i64, i64* %26, align 8
  %130 = bitcast double* %128 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double, double* %106, i64 8
  %132 = add i64 %107, -8
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %105, !llvm.loop !13

134:                                              ; preds = %101, %105, %83, %15
  br i1 %22, label %135, label %265

135:                                              ; preds = %134
  %136 = sub i64 %1, %20
  %137 = load i64, i64* %17, align 8
  %138 = inttoptr i64 %137 to double*
  %139 = inttoptr i64 %137 to i8*
  %140 = getelementptr inbounds double, double* %138, i64 %136
  %141 = icmp eq i64 %136, 0
  br i1 %141, label %263, label %142

142:                                              ; preds = %135
  %143 = bitcast double* %2 to i64*
  %144 = shl i64 %1, 3
  %145 = add i64 %144, -8
  %146 = sub i64 %145, %19
  %147 = lshr i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %148, 4
  br i1 %149, label %150, label %173

150:                                              ; preds = %232, %173, %142
  %151 = phi double* [ %138, %173 ], [ %138, %142 ], [ %186, %232 ]
  %152 = ptrtoint double* %151 to i64
  %153 = xor i64 %20, -1
  %154 = add i64 %153, %1
  %155 = getelementptr double, double* %138, i64 %154
  %156 = ptrtoint double* %155 to i64
  %157 = sub i64 %156, %152
  %158 = lshr i64 %157, 3
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 7
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %170, label %162

162:                                              ; preds = %150, %162
  %163 = phi double* [ %167, %162 ], [ %151, %150 ]
  %164 = phi i64 [ %168, %162 ], [ %160, %150 ]
  %165 = load i64, i64* %143, align 8
  %166 = bitcast double* %163 to i64*
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds double, double* %163, i64 1
  %168 = add i64 %164, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %162, !llvm.loop !14

170:                                              ; preds = %162, %150
  %171 = phi double* [ %151, %150 ], [ %167, %162 ]
  %172 = icmp ult i64 %157, 56
  br i1 %172, label %234, label %236

173:                                              ; preds = %142
  %174 = shl i64 %1, 3
  %175 = add i64 %174, -8
  %176 = sub i64 %175, %19
  %177 = lshr i64 %176, 3
  %178 = add nuw nsw i64 %177, 1
  %179 = getelementptr double, double* %138, i64 %178
  %180 = getelementptr i8, i8* %4, i64 1
  %181 = icmp ugt i8* %180, %139
  %182 = icmp ugt double* %179, %2
  %183 = and i1 %181, %182
  br i1 %183, label %150, label %184

184:                                              ; preds = %173
  %185 = and i64 %148, 4611686018427387900
  %186 = getelementptr double, double* %138, i64 %185
  %187 = add nsw i64 %185, -4
  %188 = lshr exact i64 %187, 2
  %189 = add nuw nsw i64 %188, 1
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %187, 0
  br i1 %191, label %219, label %192

192:                                              ; preds = %184
  %193 = sub nuw nsw i64 %189, %190
  %194 = load i64, i64* %143, align 8, !alias.scope !15
  %195 = insertelement <2 x i64> undef, i64 %194, i32 0
  %196 = shufflevector <2 x i64> %195, <2 x i64> undef, <2 x i32> zeroinitializer
  %197 = insertelement <2 x i64> undef, i64 %194, i32 0
  %198 = shufflevector <2 x i64> %197, <2 x i64> undef, <2 x i32> zeroinitializer
  %199 = load i64, i64* %143, align 8, !alias.scope !15
  %200 = insertelement <2 x i64> undef, i64 %199, i32 0
  %201 = shufflevector <2 x i64> %200, <2 x i64> undef, <2 x i32> zeroinitializer
  %202 = insertelement <2 x i64> undef, i64 %199, i32 0
  %203 = shufflevector <2 x i64> %202, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %204

204:                                              ; preds = %204, %192
  %205 = phi i64 [ 0, %192 ], [ %216, %204 ]
  %206 = phi i64 [ %193, %192 ], [ %217, %204 ]
  %207 = getelementptr double, double* %138, i64 %205
  %208 = bitcast double* %207 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %208, align 8, !alias.scope !18, !noalias !15
  %209 = getelementptr double, double* %207, i64 2
  %210 = bitcast double* %209 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %210, align 8, !alias.scope !18, !noalias !15
  %211 = or i64 %205, 4
  %212 = getelementptr double, double* %138, i64 %211
  %213 = bitcast double* %212 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %213, align 8, !alias.scope !18, !noalias !15
  %214 = getelementptr double, double* %212, i64 2
  %215 = bitcast double* %214 to <2 x i64>*
  store <2 x i64> %203, <2 x i64>* %215, align 8, !alias.scope !18, !noalias !15
  %216 = add i64 %205, 8
  %217 = add i64 %206, -2
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %204, !llvm.loop !20

219:                                              ; preds = %204, %184
  %220 = phi i64 [ 0, %184 ], [ %216, %204 ]
  %221 = icmp eq i64 %190, 0
  br i1 %221, label %232, label %222

222:                                              ; preds = %219
  %223 = getelementptr double, double* %138, i64 %220
  %224 = load i64, i64* %143, align 8, !alias.scope !15
  %225 = insertelement <2 x i64> undef, i64 %224, i32 0
  %226 = shufflevector <2 x i64> %225, <2 x i64> undef, <2 x i32> zeroinitializer
  %227 = insertelement <2 x i64> undef, i64 %224, i32 0
  %228 = shufflevector <2 x i64> %227, <2 x i64> undef, <2 x i32> zeroinitializer
  %229 = bitcast double* %223 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %229, align 8, !alias.scope !18, !noalias !15
  %230 = getelementptr double, double* %223, i64 2
  %231 = bitcast double* %230 to <2 x i64>*
  store <2 x i64> %228, <2 x i64>* %231, align 8, !alias.scope !18, !noalias !15
  br label %232

232:                                              ; preds = %219, %222
  %233 = icmp eq i64 %148, %185
  br i1 %233, label %234, label %150

234:                                              ; preds = %170, %236, %232
  %235 = ptrtoint double* %140 to i64
  br label %263

236:                                              ; preds = %170, %236
  %237 = phi double* [ %261, %236 ], [ %171, %170 ]
  %238 = load i64, i64* %143, align 8
  %239 = bitcast double* %237 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds double, double* %237, i64 1
  %241 = load i64, i64* %143, align 8
  %242 = bitcast double* %240 to i64*
  store i64 %241, i64* %242, align 8
  %243 = getelementptr inbounds double, double* %237, i64 2
  %244 = load i64, i64* %143, align 8
  %245 = bitcast double* %243 to i64*
  store i64 %244, i64* %245, align 8
  %246 = getelementptr inbounds double, double* %237, i64 3
  %247 = load i64, i64* %143, align 8
  %248 = bitcast double* %246 to i64*
  store i64 %247, i64* %248, align 8
  %249 = getelementptr inbounds double, double* %237, i64 4
  %250 = load i64, i64* %143, align 8
  %251 = bitcast double* %249 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds double, double* %237, i64 5
  %253 = load i64, i64* %143, align 8
  %254 = bitcast double* %252 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds double, double* %237, i64 6
  %256 = load i64, i64* %143, align 8
  %257 = bitcast double* %255 to i64*
  store i64 %256, i64* %257, align 8
  %258 = getelementptr inbounds double, double* %237, i64 7
  %259 = load i64, i64* %143, align 8
  %260 = bitcast double* %258 to i64*
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds double, double* %237, i64 8
  %262 = icmp eq double* %261, %140
  br i1 %262, label %234, label %236, !llvm.loop !21

263:                                              ; preds = %135, %234
  %264 = phi i64 [ %235, %234 ], [ %137, %135 ]
  store i64 %264, i64* %17, align 8
  br label %417

265:                                              ; preds = %134
  %266 = load double*, double** %21, align 8
  %267 = getelementptr inbounds double, double* %266, i64 %1
  store double* %267, double** %16, align 8
  br label %417

268:                                              ; preds = %3
  %269 = icmp eq i64 %9, 0
  br i1 %269, label %275, label %270

270:                                              ; preds = %268
  %271 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %272 = bitcast double** %271 to i64*
  store i64 %9, i64* %272, align 8
  %273 = inttoptr i64 %9 to i8*
  tail call void @_ZdlPv(i8* %273) #9
  %274 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %274, i8 0, i64 24, i1 false) #10
  br label %275

275:                                              ; preds = %268, %270
  %276 = phi i64 [ %7, %268 ], [ 0, %270 ]
  %277 = icmp ugt i64 %1, 2305843009213693951
  br i1 %277, label %278, label %280

278:                                              ; preds = %275
  %279 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %279) #11
  unreachable

280:                                              ; preds = %275
  %281 = ashr exact i64 %276, 3
  %282 = icmp ult i64 %281, 1152921504606846975
  br i1 %282, label %283, label %290

283:                                              ; preds = %280
  %284 = ashr exact i64 %276, 2
  %285 = icmp ult i64 %284, %1
  br i1 %285, label %290, label %286

286:                                              ; preds = %283
  %287 = icmp ugt i64 %284, 2305843009213693951
  br i1 %287, label %288, label %290

288:                                              ; preds = %286
  %289 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %289) #11
  unreachable

290:                                              ; preds = %283, %280, %286
  %291 = phi i64 [ %284, %286 ], [ 2305843009213693951, %280 ], [ %1, %283 ]
  %292 = shl i64 %291, 3
  %293 = tail call i8* @_Znwm(i64 %292) #9
  %294 = bitcast i8* %293 to double*
  %295 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %296 = bitcast double** %295 to i8**
  store i8* %293, i8** %296, align 8
  %297 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %293, i8** %297, align 8
  %298 = getelementptr inbounds double, double* %294, i64 %291
  store double* %298, double** %5, align 8
  %299 = getelementptr inbounds double, double* %294, i64 %1
  %300 = bitcast double* %2 to i64*
  %301 = shl nsw i64 %1, 3
  %302 = add i64 %301, -8
  %303 = lshr exact i64 %302, 3
  %304 = add nuw nsw i64 %303, 1
  %305 = icmp ult i64 %304, 4
  br i1 %305, label %364, label %306

306:                                              ; preds = %290
  %307 = shl nsw i64 %1, 3
  %308 = getelementptr i8, i8* %293, i64 %307
  %309 = getelementptr i8, i8* %4, i64 1
  %310 = bitcast double* %2 to i8*
  %311 = icmp ult i8* %293, %309
  %312 = icmp ugt i8* %308, %310
  %313 = and i1 %311, %312
  br i1 %313, label %364, label %314

314:                                              ; preds = %306
  %315 = and i64 %304, 4611686018427387900
  %316 = getelementptr double, double* %294, i64 %315
  %317 = add nsw i64 %315, -4
  %318 = lshr exact i64 %317, 2
  %319 = add nuw nsw i64 %318, 1
  %320 = and i64 %319, 1
  %321 = icmp eq i64 %317, 0
  br i1 %321, label %349, label %322

322:                                              ; preds = %314
  %323 = sub nuw nsw i64 %319, %320
  %324 = load i64, i64* %300, align 8, !alias.scope !22
  %325 = insertelement <2 x i64> undef, i64 %324, i32 0
  %326 = shufflevector <2 x i64> %325, <2 x i64> undef, <2 x i32> zeroinitializer
  %327 = insertelement <2 x i64> undef, i64 %324, i32 0
  %328 = shufflevector <2 x i64> %327, <2 x i64> undef, <2 x i32> zeroinitializer
  %329 = load i64, i64* %300, align 8, !alias.scope !22
  %330 = insertelement <2 x i64> undef, i64 %329, i32 0
  %331 = shufflevector <2 x i64> %330, <2 x i64> undef, <2 x i32> zeroinitializer
  %332 = insertelement <2 x i64> undef, i64 %329, i32 0
  %333 = shufflevector <2 x i64> %332, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %334

334:                                              ; preds = %334, %322
  %335 = phi i64 [ 0, %322 ], [ %346, %334 ]
  %336 = phi i64 [ %323, %322 ], [ %347, %334 ]
  %337 = getelementptr double, double* %294, i64 %335
  %338 = bitcast double* %337 to <2 x i64>*
  store <2 x i64> %326, <2 x i64>* %338, align 8, !alias.scope !25, !noalias !22
  %339 = getelementptr double, double* %337, i64 2
  %340 = bitcast double* %339 to <2 x i64>*
  store <2 x i64> %328, <2 x i64>* %340, align 8, !alias.scope !25, !noalias !22
  %341 = or i64 %335, 4
  %342 = getelementptr double, double* %294, i64 %341
  %343 = bitcast double* %342 to <2 x i64>*
  store <2 x i64> %331, <2 x i64>* %343, align 8, !alias.scope !25, !noalias !22
  %344 = getelementptr double, double* %342, i64 2
  %345 = bitcast double* %344 to <2 x i64>*
  store <2 x i64> %333, <2 x i64>* %345, align 8, !alias.scope !25, !noalias !22
  %346 = add i64 %335, 8
  %347 = add i64 %336, -2
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %334, !llvm.loop !27

349:                                              ; preds = %334, %314
  %350 = phi i64 [ 0, %314 ], [ %346, %334 ]
  %351 = icmp eq i64 %320, 0
  br i1 %351, label %362, label %352

352:                                              ; preds = %349
  %353 = getelementptr double, double* %294, i64 %350
  %354 = load i64, i64* %300, align 8, !alias.scope !22
  %355 = insertelement <2 x i64> undef, i64 %354, i32 0
  %356 = shufflevector <2 x i64> %355, <2 x i64> undef, <2 x i32> zeroinitializer
  %357 = insertelement <2 x i64> undef, i64 %354, i32 0
  %358 = shufflevector <2 x i64> %357, <2 x i64> undef, <2 x i32> zeroinitializer
  %359 = bitcast double* %353 to <2 x i64>*
  store <2 x i64> %356, <2 x i64>* %359, align 8, !alias.scope !25, !noalias !22
  %360 = getelementptr double, double* %353, i64 2
  %361 = bitcast double* %360 to <2 x i64>*
  store <2 x i64> %358, <2 x i64>* %361, align 8, !alias.scope !25, !noalias !22
  br label %362

362:                                              ; preds = %349, %352
  %363 = icmp eq i64 %304, %315
  br i1 %363, label %414, label %364

364:                                              ; preds = %362, %306, %290
  %365 = phi double* [ %294, %306 ], [ %294, %290 ], [ %316, %362 ]
  %366 = ptrtoint double* %365 to i64
  %367 = shl nsw i64 %1, 3
  %368 = add i64 %367, -8
  %369 = sub i64 %368, %366
  %370 = getelementptr i8, i8* %293, i64 %369
  %371 = ptrtoint i8* %370 to i64
  %372 = lshr i64 %371, 3
  %373 = add nuw nsw i64 %372, 1
  %374 = and i64 %373, 7
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %384, label %376

376:                                              ; preds = %364, %376
  %377 = phi double* [ %381, %376 ], [ %365, %364 ]
  %378 = phi i64 [ %382, %376 ], [ %374, %364 ]
  %379 = load i64, i64* %300, align 8
  %380 = bitcast double* %377 to i64*
  store i64 %379, i64* %380, align 8
  %381 = getelementptr inbounds double, double* %377, i64 1
  %382 = add i64 %378, -1
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %384, label %376, !llvm.loop !28

384:                                              ; preds = %376, %364
  %385 = phi double* [ %365, %364 ], [ %381, %376 ]
  %386 = icmp ult i8* %370, inttoptr (i64 56 to i8*)
  br i1 %386, label %414, label %387

387:                                              ; preds = %384, %387
  %388 = phi double* [ %412, %387 ], [ %385, %384 ]
  %389 = load i64, i64* %300, align 8
  %390 = bitcast double* %388 to i64*
  store i64 %389, i64* %390, align 8
  %391 = getelementptr inbounds double, double* %388, i64 1
  %392 = load i64, i64* %300, align 8
  %393 = bitcast double* %391 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds double, double* %388, i64 2
  %395 = load i64, i64* %300, align 8
  %396 = bitcast double* %394 to i64*
  store i64 %395, i64* %396, align 8
  %397 = getelementptr inbounds double, double* %388, i64 3
  %398 = load i64, i64* %300, align 8
  %399 = bitcast double* %397 to i64*
  store i64 %398, i64* %399, align 8
  %400 = getelementptr inbounds double, double* %388, i64 4
  %401 = load i64, i64* %300, align 8
  %402 = bitcast double* %400 to i64*
  store i64 %401, i64* %402, align 8
  %403 = getelementptr inbounds double, double* %388, i64 5
  %404 = load i64, i64* %300, align 8
  %405 = bitcast double* %403 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds double, double* %388, i64 6
  %407 = load i64, i64* %300, align 8
  %408 = bitcast double* %406 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds double, double* %388, i64 7
  %410 = load i64, i64* %300, align 8
  %411 = bitcast double* %409 to i64*
  store i64 %410, i64* %411, align 8
  %412 = getelementptr inbounds double, double* %388, i64 8
  %413 = icmp eq double* %412, %299
  br i1 %413, label %414, label %387, !llvm.loop !29

414:                                              ; preds = %384, %387, %362
  %415 = bitcast double** %295 to i64*
  %416 = ptrtoint double* %299 to i64
  store i64 %416, i64* %415, align 8
  br label %417

417:                                              ; preds = %263, %265, %414
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi(%"class.std::__1::vector.8"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %2 to i8*
  %7 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %250, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %11
  %22 = ashr exact i64 %21, 2
  %23 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %24 = icmp ult i64 %22, %1
  %25 = select i1 %24, i64 %22, i64 %1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %126, label %27

27:                                               ; preds = %15
  %28 = icmp ult i64 %25, 8
  br i1 %28, label %86, label %29

29:                                               ; preds = %27
  %30 = getelementptr i32, i32* %16, i64 %25
  %31 = getelementptr i8, i8* %6, i64 1
  %32 = icmp ugt i8* %31, %17
  %33 = icmp ugt i32* %30, %2
  %34 = and i1 %32, %33
  br i1 %34, label %86, label %35

35:                                               ; preds = %29
  %36 = and i64 %25, -8
  %37 = getelementptr i32, i32* %16, i64 %36
  %38 = sub i64 %25, %36
  %39 = add i64 %36, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %35
  %45 = sub nuw nsw i64 %41, %42
  %46 = load i32, i32* %2, align 4, !alias.scope !30
  %47 = insertelement <4 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %46, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = load i32, i32* %2, align 4, !alias.scope !30
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  %54 = insertelement <4 x i32> undef, i32 %51, i32 0
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %56

56:                                               ; preds = %56, %44
  %57 = phi i64 [ 0, %44 ], [ %68, %56 ]
  %58 = phi i64 [ %45, %44 ], [ %69, %56 ]
  %59 = getelementptr i32, i32* %16, i64 %57
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %60, align 4, !alias.scope !33, !noalias !30
  %61 = getelementptr i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %62, align 4, !alias.scope !33, !noalias !30
  %63 = or i64 %57, 8
  %64 = getelementptr i32, i32* %16, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %65, align 4, !alias.scope !33, !noalias !30
  %66 = getelementptr i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %67, align 4, !alias.scope !33, !noalias !30
  %68 = add i64 %57, 16
  %69 = add i64 %58, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %56, !llvm.loop !35

71:                                               ; preds = %56, %35
  %72 = phi i64 [ 0, %35 ], [ %68, %56 ]
  %73 = icmp eq i64 %42, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %71
  %75 = getelementptr i32, i32* %16, i64 %72
  %76 = load i32, i32* %2, align 4, !alias.scope !30
  %77 = insertelement <4 x i32> undef, i32 %76, i32 0
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = insertelement <4 x i32> undef, i32 %76, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %81, align 4, !alias.scope !33, !noalias !30
  %82 = getelementptr i32, i32* %75, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %83, align 4, !alias.scope !33, !noalias !30
  br label %84

84:                                               ; preds = %71, %74
  %85 = icmp eq i64 %25, %36
  br i1 %85, label %126, label %86

86:                                               ; preds = %84, %29, %27
  %87 = phi i32* [ %16, %29 ], [ %16, %27 ], [ %37, %84 ]
  %88 = phi i64 [ %25, %29 ], [ %25, %27 ], [ %38, %84 ]
  %89 = add i64 %88, -1
  %90 = and i64 %88, 7
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %101, label %92

92:                                               ; preds = %86, %92
  %93 = phi i32* [ %97, %92 ], [ %87, %86 ]
  %94 = phi i64 [ %98, %92 ], [ %88, %86 ]
  %95 = phi i64 [ %99, %92 ], [ %90, %86 ]
  %96 = load i32, i32* %2, align 4
  store i32 %96, i32* %93, align 4
  %97 = getelementptr inbounds i32, i32* %93, i64 1
  %98 = add i64 %94, -1
  %99 = add i64 %95, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %92, !llvm.loop !36

101:                                              ; preds = %92, %86
  %102 = phi i32* [ %87, %86 ], [ %97, %92 ]
  %103 = phi i64 [ %88, %86 ], [ %98, %92 ]
  %104 = icmp ult i64 %89, 7
  br i1 %104, label %126, label %105

105:                                              ; preds = %101, %105
  %106 = phi i32* [ %123, %105 ], [ %102, %101 ]
  %107 = phi i64 [ %124, %105 ], [ %103, %101 ]
  %108 = load i32, i32* %2, align 4
  store i32 %108, i32* %106, align 4
  %109 = getelementptr inbounds i32, i32* %106, i64 1
  %110 = load i32, i32* %2, align 4
  store i32 %110, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %106, i64 2
  %112 = load i32, i32* %2, align 4
  store i32 %112, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %106, i64 3
  %114 = load i32, i32* %2, align 4
  store i32 %114, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %106, i64 4
  %116 = load i32, i32* %2, align 4
  store i32 %116, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %106, i64 5
  %118 = load i32, i32* %2, align 4
  store i32 %118, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %106, i64 6
  %120 = load i32, i32* %2, align 4
  store i32 %120, i32* %119, align 4
  %121 = getelementptr inbounds i32, i32* %106, i64 7
  %122 = load i32, i32* %2, align 4
  store i32 %122, i32* %121, align 4
  %123 = getelementptr inbounds i32, i32* %106, i64 8
  %124 = add i64 %107, -8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %105, !llvm.loop !37

126:                                              ; preds = %101, %105, %84, %15
  br i1 %24, label %127, label %247

127:                                              ; preds = %126
  %128 = sub i64 %1, %22
  %129 = load i64, i64* %19, align 8
  %130 = inttoptr i64 %129 to i32*
  %131 = inttoptr i64 %129 to i8*
  %132 = getelementptr inbounds i32, i32* %130, i64 %128
  %133 = icmp eq i64 %128, 0
  br i1 %133, label %245, label %134

134:                                              ; preds = %127
  %135 = shl i64 %1, 2
  %136 = add i64 %135, -4
  %137 = sub i64 %136, %21
  %138 = lshr i64 %137, 2
  %139 = add nuw nsw i64 %138, 1
  %140 = icmp ult i64 %139, 8
  br i1 %140, label %141, label %163

141:                                              ; preds = %222, %163, %134
  %142 = phi i32* [ %130, %163 ], [ %130, %134 ], [ %176, %222 ]
  %143 = ptrtoint i32* %142 to i64
  %144 = xor i64 %22, -1
  %145 = add i64 %144, %1
  %146 = getelementptr i32, i32* %130, i64 %145
  %147 = ptrtoint i32* %146 to i64
  %148 = sub i64 %147, %143
  %149 = lshr i64 %148, 2
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 7
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %160, label %153

153:                                              ; preds = %141, %153
  %154 = phi i32* [ %157, %153 ], [ %142, %141 ]
  %155 = phi i64 [ %158, %153 ], [ %151, %141 ]
  %156 = load i32, i32* %2, align 4
  store i32 %156, i32* %154, align 4
  %157 = getelementptr inbounds i32, i32* %154, i64 1
  %158 = add i64 %155, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %153, !llvm.loop !38

160:                                              ; preds = %153, %141
  %161 = phi i32* [ %142, %141 ], [ %157, %153 ]
  %162 = icmp ult i64 %148, 28
  br i1 %162, label %224, label %226

163:                                              ; preds = %134
  %164 = shl i64 %1, 2
  %165 = add i64 %164, -4
  %166 = sub i64 %165, %21
  %167 = lshr i64 %166, 2
  %168 = add nuw nsw i64 %167, 1
  %169 = getelementptr i32, i32* %130, i64 %168
  %170 = getelementptr i8, i8* %5, i64 1
  %171 = icmp ugt i8* %170, %131
  %172 = icmp ugt i32* %169, %2
  %173 = and i1 %171, %172
  br i1 %173, label %141, label %174

174:                                              ; preds = %163
  %175 = and i64 %139, 9223372036854775800
  %176 = getelementptr i32, i32* %130, i64 %175
  %177 = add nsw i64 %175, -8
  %178 = lshr exact i64 %177, 3
  %179 = add nuw nsw i64 %178, 1
  %180 = and i64 %179, 1
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %209, label %182

182:                                              ; preds = %174
  %183 = sub nuw nsw i64 %179, %180
  %184 = load i32, i32* %2, align 4, !alias.scope !39
  %185 = insertelement <4 x i32> undef, i32 %184, i32 0
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> zeroinitializer
  %187 = insertelement <4 x i32> undef, i32 %184, i32 0
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> zeroinitializer
  %189 = load i32, i32* %2, align 4, !alias.scope !39
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %194

194:                                              ; preds = %194, %182
  %195 = phi i64 [ 0, %182 ], [ %206, %194 ]
  %196 = phi i64 [ %183, %182 ], [ %207, %194 ]
  %197 = getelementptr i32, i32* %130, i64 %195
  %198 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %198, align 4, !alias.scope !42, !noalias !39
  %199 = getelementptr i32, i32* %197, i64 4
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %200, align 4, !alias.scope !42, !noalias !39
  %201 = or i64 %195, 8
  %202 = getelementptr i32, i32* %130, i64 %201
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !42, !noalias !39
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !42, !noalias !39
  %206 = add i64 %195, 16
  %207 = add i64 %196, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %194, !llvm.loop !44

209:                                              ; preds = %194, %174
  %210 = phi i64 [ 0, %174 ], [ %206, %194 ]
  %211 = icmp eq i64 %180, 0
  br i1 %211, label %222, label %212

212:                                              ; preds = %209
  %213 = getelementptr i32, i32* %130, i64 %210
  %214 = load i32, i32* %2, align 4, !alias.scope !39
  %215 = insertelement <4 x i32> undef, i32 %214, i32 0
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> zeroinitializer
  %217 = insertelement <4 x i32> undef, i32 %214, i32 0
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> zeroinitializer
  %219 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %219, align 4, !alias.scope !42, !noalias !39
  %220 = getelementptr i32, i32* %213, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %221, align 4, !alias.scope !42, !noalias !39
  br label %222

222:                                              ; preds = %209, %212
  %223 = icmp eq i64 %139, %175
  br i1 %223, label %224, label %141

224:                                              ; preds = %160, %226, %222
  %225 = ptrtoint i32* %132 to i64
  br label %245

226:                                              ; preds = %160, %226
  %227 = phi i32* [ %243, %226 ], [ %161, %160 ]
  %228 = load i32, i32* %2, align 4
  store i32 %228, i32* %227, align 4
  %229 = getelementptr inbounds i32, i32* %227, i64 1
  %230 = load i32, i32* %2, align 4
  store i32 %230, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %227, i64 2
  %232 = load i32, i32* %2, align 4
  store i32 %232, i32* %231, align 4
  %233 = getelementptr inbounds i32, i32* %227, i64 3
  %234 = load i32, i32* %2, align 4
  store i32 %234, i32* %233, align 4
  %235 = getelementptr inbounds i32, i32* %227, i64 4
  %236 = load i32, i32* %2, align 4
  store i32 %236, i32* %235, align 4
  %237 = getelementptr inbounds i32, i32* %227, i64 5
  %238 = load i32, i32* %2, align 4
  store i32 %238, i32* %237, align 4
  %239 = getelementptr inbounds i32, i32* %227, i64 6
  %240 = load i32, i32* %2, align 4
  store i32 %240, i32* %239, align 4
  %241 = getelementptr inbounds i32, i32* %227, i64 7
  %242 = load i32, i32* %2, align 4
  store i32 %242, i32* %241, align 4
  %243 = getelementptr inbounds i32, i32* %227, i64 8
  %244 = icmp eq i32* %243, %132
  br i1 %244, label %224, label %226, !llvm.loop !45

245:                                              ; preds = %127, %224
  %246 = phi i64 [ %225, %224 ], [ %129, %127 ]
  store i64 %246, i64* %19, align 8
  br label %389

247:                                              ; preds = %126
  %248 = load i32*, i32** %23, align 8
  %249 = getelementptr inbounds i32, i32* %248, i64 %1
  store i32* %249, i32** %18, align 8
  br label %389

250:                                              ; preds = %3
  %251 = icmp eq i64 %11, 0
  br i1 %251, label %257, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %254 = bitcast i32** %253 to i64*
  store i64 %11, i64* %254, align 8
  %255 = inttoptr i64 %11 to i8*
  tail call void @_ZdlPv(i8* %255) #9
  %256 = bitcast %"class.std::__1::vector.8"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %256, i8 0, i64 24, i1 false) #10
  br label %257

257:                                              ; preds = %250, %252
  %258 = phi i64 [ %9, %250 ], [ 0, %252 ]
  %259 = icmp ugt i64 %1, 4611686018427387903
  br i1 %259, label %260, label %262

260:                                              ; preds = %257
  %261 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %261) #11
  unreachable

262:                                              ; preds = %257
  %263 = ashr exact i64 %258, 2
  %264 = icmp ult i64 %263, 2305843009213693951
  br i1 %264, label %265, label %272

265:                                              ; preds = %262
  %266 = ashr exact i64 %258, 1
  %267 = icmp ult i64 %266, %1
  br i1 %267, label %272, label %268

268:                                              ; preds = %265
  %269 = icmp ugt i64 %266, 4611686018427387903
  br i1 %269, label %270, label %272

270:                                              ; preds = %268
  %271 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %271) #11
  unreachable

272:                                              ; preds = %265, %262, %268
  %273 = phi i64 [ %266, %268 ], [ 4611686018427387903, %262 ], [ %1, %265 ]
  %274 = shl i64 %273, 2
  %275 = tail call i8* @_Znwm(i64 %274) #9
  %276 = bitcast i8* %275 to i32*
  %277 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %278 = bitcast i32** %277 to i8**
  store i8* %275, i8** %278, align 8
  %279 = bitcast %"class.std::__1::vector.8"* %0 to i8**
  store i8* %275, i8** %279, align 8
  %280 = getelementptr inbounds i32, i32* %276, i64 %273
  store i32* %280, i32** %7, align 8
  %281 = getelementptr inbounds i32, i32* %276, i64 %1
  %282 = shl nsw i64 %1, 2
  %283 = add i64 %282, -4
  %284 = lshr exact i64 %283, 2
  %285 = add nuw nsw i64 %284, 1
  %286 = icmp ult i64 %285, 8
  br i1 %286, label %345, label %287

287:                                              ; preds = %272
  %288 = shl nsw i64 %1, 2
  %289 = getelementptr i8, i8* %275, i64 %288
  %290 = getelementptr i8, i8* %4, i64 1
  %291 = bitcast i32* %2 to i8*
  %292 = icmp ult i8* %275, %290
  %293 = icmp ugt i8* %289, %291
  %294 = and i1 %292, %293
  br i1 %294, label %345, label %295

295:                                              ; preds = %287
  %296 = and i64 %285, 9223372036854775800
  %297 = getelementptr i32, i32* %276, i64 %296
  %298 = add nsw i64 %296, -8
  %299 = lshr exact i64 %298, 3
  %300 = add nuw nsw i64 %299, 1
  %301 = and i64 %300, 1
  %302 = icmp eq i64 %298, 0
  br i1 %302, label %330, label %303

303:                                              ; preds = %295
  %304 = sub nuw nsw i64 %300, %301
  %305 = load i32, i32* %2, align 4, !alias.scope !46
  %306 = insertelement <4 x i32> undef, i32 %305, i32 0
  %307 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> zeroinitializer
  %308 = insertelement <4 x i32> undef, i32 %305, i32 0
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> zeroinitializer
  %310 = load i32, i32* %2, align 4, !alias.scope !46
  %311 = insertelement <4 x i32> undef, i32 %310, i32 0
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> zeroinitializer
  %313 = insertelement <4 x i32> undef, i32 %310, i32 0
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %315

315:                                              ; preds = %315, %303
  %316 = phi i64 [ 0, %303 ], [ %327, %315 ]
  %317 = phi i64 [ %304, %303 ], [ %328, %315 ]
  %318 = getelementptr i32, i32* %276, i64 %316
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %319, align 4, !alias.scope !49, !noalias !46
  %320 = getelementptr i32, i32* %318, i64 4
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %321, align 4, !alias.scope !49, !noalias !46
  %322 = or i64 %316, 8
  %323 = getelementptr i32, i32* %276, i64 %322
  %324 = bitcast i32* %323 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %324, align 4, !alias.scope !49, !noalias !46
  %325 = getelementptr i32, i32* %323, i64 4
  %326 = bitcast i32* %325 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %326, align 4, !alias.scope !49, !noalias !46
  %327 = add i64 %316, 16
  %328 = add i64 %317, -2
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %315, !llvm.loop !51

330:                                              ; preds = %315, %295
  %331 = phi i64 [ 0, %295 ], [ %327, %315 ]
  %332 = icmp eq i64 %301, 0
  br i1 %332, label %343, label %333

333:                                              ; preds = %330
  %334 = getelementptr i32, i32* %276, i64 %331
  %335 = load i32, i32* %2, align 4, !alias.scope !46
  %336 = insertelement <4 x i32> undef, i32 %335, i32 0
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> zeroinitializer
  %338 = insertelement <4 x i32> undef, i32 %335, i32 0
  %339 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> zeroinitializer
  %340 = bitcast i32* %334 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %340, align 4, !alias.scope !49, !noalias !46
  %341 = getelementptr i32, i32* %334, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %342, align 4, !alias.scope !49, !noalias !46
  br label %343

343:                                              ; preds = %330, %333
  %344 = icmp eq i64 %285, %296
  br i1 %344, label %386, label %345

345:                                              ; preds = %343, %287, %272
  %346 = phi i32* [ %276, %287 ], [ %276, %272 ], [ %297, %343 ]
  %347 = ptrtoint i32* %346 to i64
  %348 = shl nsw i64 %1, 2
  %349 = add i64 %348, -4
  %350 = sub i64 %349, %347
  %351 = getelementptr i8, i8* %275, i64 %350
  %352 = ptrtoint i8* %351 to i64
  %353 = lshr i64 %352, 2
  %354 = add nuw nsw i64 %353, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %364, label %357

357:                                              ; preds = %345, %357
  %358 = phi i32* [ %361, %357 ], [ %346, %345 ]
  %359 = phi i64 [ %362, %357 ], [ %355, %345 ]
  %360 = load i32, i32* %2, align 4
  store i32 %360, i32* %358, align 4
  %361 = getelementptr inbounds i32, i32* %358, i64 1
  %362 = add i64 %359, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %357, !llvm.loop !52

364:                                              ; preds = %357, %345
  %365 = phi i32* [ %346, %345 ], [ %361, %357 ]
  %366 = icmp ult i8* %351, inttoptr (i64 28 to i8*)
  br i1 %366, label %386, label %367

367:                                              ; preds = %364, %367
  %368 = phi i32* [ %384, %367 ], [ %365, %364 ]
  %369 = load i32, i32* %2, align 4
  store i32 %369, i32* %368, align 4
  %370 = getelementptr inbounds i32, i32* %368, i64 1
  %371 = load i32, i32* %2, align 4
  store i32 %371, i32* %370, align 4
  %372 = getelementptr inbounds i32, i32* %368, i64 2
  %373 = load i32, i32* %2, align 4
  store i32 %373, i32* %372, align 4
  %374 = getelementptr inbounds i32, i32* %368, i64 3
  %375 = load i32, i32* %2, align 4
  store i32 %375, i32* %374, align 4
  %376 = getelementptr inbounds i32, i32* %368, i64 4
  %377 = load i32, i32* %2, align 4
  store i32 %377, i32* %376, align 4
  %378 = getelementptr inbounds i32, i32* %368, i64 5
  %379 = load i32, i32* %2, align 4
  store i32 %379, i32* %378, align 4
  %380 = getelementptr inbounds i32, i32* %368, i64 6
  %381 = load i32, i32* %2, align 4
  store i32 %381, i32* %380, align 4
  %382 = getelementptr inbounds i32, i32* %368, i64 7
  %383 = load i32, i32* %2, align 4
  store i32 %383, i32* %382, align 4
  %384 = getelementptr inbounds i32, i32* %368, i64 8
  %385 = icmp eq i32* %384, %281
  br i1 %385, label %386, label %367, !llvm.loop !53

386:                                              ; preds = %364, %367, %343
  %387 = bitcast i32** %277 to i64*
  %388 = ptrtoint i32* %281 to i64
  store i64 %388, i64* %387, align 8
  br label %389

389:                                              ; preds = %245, %247, %386
  ret void
}

declare void @rdft(i32, i32, double*, i32*, double*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @atan(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast double** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast double** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to double*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds double, double* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr double, double* %13, i64 %18
  %20 = bitcast double* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint double* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to double*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi double* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds double, double* %57, i64 %33
  %59 = getelementptr inbounds double, double* %57, i64 %56
  %60 = getelementptr inbounds double, double* %58, i64 %1
  %61 = bitcast double* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint double* %59 to i64
  %64 = ptrtoint double* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load double*, double** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint double* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds double, double* %58, i64 %71
  %73 = ptrtoint double* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast double* %72 to i8*
  %77 = bitcast double* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #10
  %78 = load double*, double** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi double* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq double* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast double* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, double*, double*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint double* %2 to i64
  %5 = ptrtoint double* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast double** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to double*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast double** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds double, double* %1, i64 %22
  %25 = select i1 %23, double* %24, double* %2
  %26 = ptrtoint double* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast double* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast double* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to double*
  %43 = getelementptr inbounds double, double* %42, i64 %39
  %44 = ptrtoint double* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds double, double* %16, i64 %28
  store double* %48, double** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast double** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #9
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #11
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #11
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #9
  %75 = bitcast i8* %74 to double*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast double** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds double, double* %75, i64 %72
  store double* %79, double** %8, align 8
  %80 = bitcast double** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast double* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds double, double* %75, i64 %84
  %87 = ptrtoint double* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKfEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdPKdRSE_PKSF_lLl0EEET_SK_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISK_EE5valueEvE4typeE(%"class.std::__1::deque"*, double**, double*, float*, float*, i8*) local_unnamed_addr #0 comdat align 2 {
  %7 = ptrtoint float* %3 to i64
  %8 = ptrtoint float* %4 to i64
  %9 = sub i64 %8, %7
  %10 = ashr exact i64 %9, 2
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load double**, double*** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, 9
  %16 = getelementptr inbounds double*, double** %12, i64 %15
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load double**, double*** %17, align 8
  %19 = icmp eq double** %18, %12
  %20 = ptrtoint double** %18 to i64
  %21 = ptrtoint double** %12 to i64
  br i1 %19, label %26, label %22

22:                                               ; preds = %6
  %23 = load double*, double** %16, align 8
  %24 = and i64 %14, 511
  %25 = getelementptr inbounds double, double* %23, i64 %24
  br label %26

26:                                               ; preds = %6, %22
  %27 = phi double* [ %25, %22 ], [ null, %6 ]
  %28 = icmp eq double* %27, %2
  br i1 %28, label %46, label %29

29:                                               ; preds = %26
  %30 = ptrtoint double* %27 to i64
  %31 = ptrtoint double** %16 to i64
  %32 = ptrtoint double* %2 to i64
  %33 = ptrtoint double** %1 to i64
  %34 = sub i64 %33, %31
  %35 = shl i64 %34, 6
  %36 = bitcast double** %1 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %32, %37
  %39 = ashr exact i64 %38, 3
  %40 = add nsw i64 %39, %35
  %41 = bitcast double** %16 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %30, %42
  %44 = ashr exact i64 %43, 3
  %45 = sub i64 %40, %44
  br label %46

46:                                               ; preds = %26, %29
  %47 = phi i64 [ %45, %29 ], [ 0, %26 ]
  %48 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %49, %47
  %51 = icmp ult i64 %47, %50
  br i1 %51, label %52, label %429

52:                                               ; preds = %46
  %53 = icmp ugt i64 %10, %14
  br i1 %53, label %54, label %60

54:                                               ; preds = %52
  %55 = sub i64 %10, %14
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE20__add_front_capacityEm(%"class.std::__1::deque"* %0, i64 %55)
  %56 = load double**, double*** %11, align 8
  %57 = load i64, i64* %13, align 8
  %58 = load double**, double*** %17, align 8
  %59 = lshr i64 %57, 9
  br label %60

60:                                               ; preds = %54, %52
  %61 = phi i64 [ %59, %54 ], [ %15, %52 ]
  %62 = phi double** [ %58, %54 ], [ %18, %52 ]
  %63 = phi i64 [ %57, %54 ], [ %14, %52 ]
  %64 = phi double** [ %56, %54 ], [ %12, %52 ]
  %65 = getelementptr inbounds double*, double** %64, i64 %61
  %66 = icmp eq double** %62, %64
  br i1 %66, label %71, label %67

67:                                               ; preds = %60
  %68 = load double*, double** %65, align 8
  %69 = and i64 %63, 511
  %70 = getelementptr inbounds double, double* %68, i64 %69
  br label %71

71:                                               ; preds = %60, %67
  %72 = phi double* [ %70, %67 ], [ null, %60 ]
  %73 = ptrtoint double* %72 to i64
  %74 = icmp ugt i64 %10, %47
  br i1 %74, label %75, label %141

75:                                               ; preds = %71
  %76 = lshr i64 %10, 1
  %77 = icmp ult i64 %47, %76
  %78 = sub nsw i64 0, %47
  %79 = getelementptr inbounds float, float* %4, i64 %78
  %80 = sub i64 %10, %47
  %81 = getelementptr inbounds float, float* %3, i64 %80
  %82 = select i1 %77, float* %79, float* %81
  %83 = icmp eq float* %82, %3
  br i1 %83, label %141, label %84

84:                                               ; preds = %75
  %85 = getelementptr float, float* %82, i64 -1
  %86 = ptrtoint float* %85 to i64
  %87 = sub i64 %86, %7
  %88 = and i64 %87, 4
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %108

90:                                               ; preds = %84
  %91 = load double*, double** %65, align 8
  %92 = icmp eq double* %72, %91
  br i1 %92, label %93, label %97

93:                                               ; preds = %90
  %94 = getelementptr inbounds double*, double** %65, i64 -1
  %95 = load double*, double** %94, align 8
  %96 = getelementptr inbounds double, double* %95, i64 512
  br label %97

97:                                               ; preds = %93, %90
  %98 = phi double** [ %94, %93 ], [ %65, %90 ]
  %99 = phi double* [ %96, %93 ], [ %72, %90 ]
  %100 = getelementptr inbounds double, double* %99, i64 -1
  %101 = getelementptr inbounds float, float* %82, i64 -1
  %102 = load float, float* %101, align 4
  %103 = fpext float %102 to double
  store double %103, double* %100, align 8
  %104 = bitcast i64* %13 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8
  %106 = add <2 x i64> %105, <i64 -1, i64 1>
  %107 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %107, align 8
  br label %108

108:                                              ; preds = %97, %84
  %109 = phi double** [ undef, %84 ], [ %98, %97 ]
  %110 = phi double* [ undef, %84 ], [ %100, %97 ]
  %111 = phi float* [ %82, %84 ], [ %101, %97 ]
  %112 = phi double** [ %65, %84 ], [ %98, %97 ]
  %113 = phi double* [ %72, %84 ], [ %100, %97 ]
  %114 = icmp ult i64 %87, 4
  br i1 %114, label %141, label %115

115:                                              ; preds = %108
  %116 = bitcast i64* %13 to <2 x i64>*
  %117 = bitcast i64* %13 to <2 x i64>*
  %118 = bitcast i64* %13 to <2 x i64>*
  %119 = bitcast i64* %13 to <2 x i64>*
  br label %120

120:                                              ; preds = %930, %115
  %121 = phi float* [ %111, %115 ], [ %934, %930 ]
  %122 = phi double** [ %112, %115 ], [ %931, %930 ]
  %123 = phi double* [ %113, %115 ], [ %933, %930 ]
  %124 = load double*, double** %122, align 8
  %125 = icmp eq double* %123, %124
  br i1 %125, label %126, label %130

126:                                              ; preds = %120
  %127 = getelementptr inbounds double*, double** %122, i64 -1
  %128 = load double*, double** %127, align 8
  %129 = getelementptr inbounds double, double* %128, i64 512
  br label %130

130:                                              ; preds = %120, %126
  %131 = phi double** [ %127, %126 ], [ %122, %120 ]
  %132 = phi double* [ %129, %126 ], [ %123, %120 ]
  %133 = getelementptr inbounds double, double* %132, i64 -1
  %134 = getelementptr inbounds float, float* %121, i64 -1
  %135 = load float, float* %134, align 4
  %136 = fpext float %135 to double
  store double %136, double* %133, align 8
  %137 = load <2 x i64>, <2 x i64>* %116, align 8
  %138 = add <2 x i64> %137, <i64 -1, i64 1>
  store <2 x i64> %138, <2 x i64>* %117, align 8
  %139 = load double*, double** %131, align 8
  %140 = icmp eq double* %133, %139
  br i1 %140, label %926, label %930

141:                                              ; preds = %108, %930, %75, %71
  %142 = phi double* [ %72, %71 ], [ %72, %75 ], [ %110, %108 ], [ %933, %930 ]
  %143 = phi double** [ %65, %71 ], [ %65, %75 ], [ %109, %108 ], [ %931, %930 ]
  %144 = phi float* [ %3, %71 ], [ %3, %75 ], [ %82, %930 ], [ %82, %108 ]
  %145 = phi i64 [ %10, %71 ], [ %47, %75 ], [ %47, %930 ], [ %47, %108 ]
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %882, label %147

147:                                              ; preds = %141
  %148 = bitcast double** %65 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %73, %149
  %151 = ashr exact i64 %150, 3
  %152 = add nsw i64 %151, %145
  %153 = icmp sgt i64 %152, 0
  br i1 %153, label %154, label %160

154:                                              ; preds = %147
  %155 = lshr i64 %152, 9
  %156 = getelementptr inbounds double*, double** %65, i64 %155
  %157 = load double*, double** %156, align 8
  %158 = and i64 %152, 511
  %159 = getelementptr inbounds double, double* %157, i64 %158
  br label %168

160:                                              ; preds = %147
  %161 = sub nsw i64 511, %152
  %162 = sdiv i64 %161, -512
  %163 = getelementptr inbounds double*, double** %65, i64 %162
  %164 = load double*, double** %163, align 8
  %165 = srem i64 %161, 512
  %166 = sub nsw i64 511, %165
  %167 = getelementptr inbounds double, double* %164, i64 %166
  br label %168

168:                                              ; preds = %154, %160
  %169 = phi double* [ %159, %154 ], [ %167, %160 ]
  %170 = phi double** [ %156, %154 ], [ %163, %160 ]
  %171 = icmp eq double* %169, %72
  br i1 %171, label %175, label %172

172:                                              ; preds = %168
  %173 = bitcast i64* %13 to <2 x i64>*
  %174 = bitcast i64* %13 to <2 x i64>*
  br label %177

175:                                              ; preds = %198, %168
  %176 = icmp ult i64 %145, %47
  br i1 %176, label %208, label %235

177:                                              ; preds = %172, %198
  %178 = phi double** [ %199, %198 ], [ %170, %172 ]
  %179 = phi double* [ %201, %198 ], [ %169, %172 ]
  %180 = phi double** [ %189, %198 ], [ %143, %172 ]
  %181 = phi double* [ %191, %198 ], [ %142, %172 ]
  %182 = load double*, double** %180, align 8
  %183 = icmp eq double* %181, %182
  br i1 %183, label %184, label %188

184:                                              ; preds = %177
  %185 = getelementptr inbounds double*, double** %180, i64 -1
  %186 = load double*, double** %185, align 8
  %187 = getelementptr inbounds double, double* %186, i64 512
  br label %188

188:                                              ; preds = %177, %184
  %189 = phi double** [ %185, %184 ], [ %180, %177 ]
  %190 = phi double* [ %187, %184 ], [ %181, %177 ]
  %191 = getelementptr inbounds double, double* %190, i64 -1
  %192 = load double*, double** %178, align 8
  %193 = icmp eq double* %179, %192
  br i1 %193, label %194, label %198

194:                                              ; preds = %188
  %195 = getelementptr inbounds double*, double** %178, i64 -1
  %196 = load double*, double** %195, align 8
  %197 = getelementptr inbounds double, double* %196, i64 512
  br label %198

198:                                              ; preds = %188, %194
  %199 = phi double** [ %195, %194 ], [ %178, %188 ]
  %200 = phi double* [ %197, %194 ], [ %179, %188 ]
  %201 = getelementptr inbounds double, double* %200, i64 -1
  %202 = bitcast double* %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast double* %191 to i64*
  store i64 %203, i64* %204, align 8
  %205 = load <2 x i64>, <2 x i64>* %173, align 8
  %206 = add <2 x i64> %205, <i64 -1, i64 1>
  store <2 x i64> %206, <2 x i64>* %174, align 8
  %207 = icmp eq double* %201, %72
  br i1 %207, label %175, label %177

208:                                              ; preds = %175
  %209 = load i64, i64* %148, align 8
  %210 = sub i64 %73, %209
  %211 = ashr exact i64 %210, 3
  %212 = add nsw i64 %211, %47
  %213 = icmp sgt i64 %212, 0
  br i1 %213, label %214, label %220

214:                                              ; preds = %208
  %215 = lshr i64 %212, 9
  %216 = getelementptr inbounds double*, double** %65, i64 %215
  %217 = load double*, double** %216, align 8
  %218 = and i64 %212, 511
  %219 = getelementptr inbounds double, double* %217, i64 %218
  br label %228

220:                                              ; preds = %208
  %221 = sub nsw i64 511, %212
  %222 = sdiv i64 %221, -512
  %223 = getelementptr inbounds double*, double** %65, i64 %222
  %224 = load double*, double** %223, align 8
  %225 = srem i64 %221, 512
  %226 = sub nsw i64 511, %225
  %227 = getelementptr inbounds double, double* %224, i64 %226
  br label %228

228:                                              ; preds = %214, %220
  %229 = phi double* [ %219, %214 ], [ %227, %220 ]
  %230 = phi double** [ %216, %214 ], [ %223, %220 ]
  %231 = tail call { double**, double* } @_ZNSt3__14moveIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %170, double* %169, double** %230, double* %229, double** %65, double* %72)
  %232 = extractvalue { double**, double* } %231, 0
  %233 = extractvalue { double**, double* } %231, 1
  %234 = ptrtoint double* %233 to i64
  br label %235

235:                                              ; preds = %228, %175
  %236 = phi double** [ %232, %228 ], [ %65, %175 ]
  %237 = phi i64 [ %234, %228 ], [ %73, %175 ]
  %238 = icmp eq float* %144, %4
  br i1 %238, label %882, label %239

239:                                              ; preds = %235, %425
  %240 = phi i64 [ %426, %425 ], [ %237, %235 ]
  %241 = phi double** [ %427, %425 ], [ %236, %235 ]
  %242 = phi float* [ %253, %425 ], [ %144, %235 ]
  %243 = ptrtoint float* %242 to i64
  %244 = load double*, double** %241, align 8
  %245 = getelementptr inbounds double, double* %244, i64 512
  %246 = ptrtoint double* %245 to i64
  %247 = sub i64 %246, %240
  %248 = ashr exact i64 %247, 3
  %249 = sub i64 %8, %243
  %250 = ashr exact i64 %249, 2
  %251 = icmp sgt i64 %250, %248
  %252 = getelementptr inbounds float, float* %242, i64 %248
  %253 = select i1 %251, float* %252, float* %4
  %254 = select i1 %251, i64 %248, i64 %250
  %255 = icmp eq float* %242, %253
  br i1 %255, label %400, label %256

256:                                              ; preds = %239
  %257 = inttoptr i64 %240 to double*
  %258 = getelementptr float, float* %253, i64 -1
  %259 = ptrtoint float* %258 to i64
  %260 = sub i64 %259, %243
  %261 = lshr i64 %260, 2
  %262 = add nuw nsw i64 %261, 1
  %263 = icmp ult i64 %262, 4
  br i1 %263, label %339, label %264

264:                                              ; preds = %256
  %265 = inttoptr i64 %240 to i8*
  %266 = getelementptr double, double* %257, i64 1
  %267 = getelementptr float, float* %253, i64 -1
  %268 = ptrtoint float* %267 to i64
  %269 = sub i64 %268, %243
  %270 = lshr i64 %269, 2
  %271 = getelementptr double, double* %266, i64 %270
  %272 = getelementptr float, float* %242, i64 1
  %273 = getelementptr float, float* %272, i64 %270
  %274 = bitcast float* %273 to i8*
  %275 = icmp ult i8* %265, %274
  %276 = bitcast double* %271 to float*
  %277 = icmp ult float* %242, %276
  %278 = and i1 %275, %277
  br i1 %278, label %339, label %279

279:                                              ; preds = %264
  %280 = and i64 %262, 9223372036854775804
  %281 = getelementptr double, double* %257, i64 %280
  %282 = getelementptr float, float* %242, i64 %280
  %283 = add nsw i64 %280, -4
  %284 = lshr exact i64 %283, 2
  %285 = add nuw nsw i64 %284, 1
  %286 = and i64 %285, 1
  %287 = icmp eq i64 %283, 0
  br i1 %287, label %321, label %288

288:                                              ; preds = %279
  %289 = sub nuw nsw i64 %285, %286
  br label %290

290:                                              ; preds = %290, %288
  %291 = phi i64 [ 0, %288 ], [ %318, %290 ]
  %292 = phi i64 [ %289, %288 ], [ %319, %290 ]
  %293 = getelementptr double, double* %257, i64 %291
  %294 = getelementptr float, float* %242, i64 %291
  %295 = bitcast float* %294 to <2 x float>*
  %296 = load <2 x float>, <2 x float>* %295, align 4, !alias.scope !54
  %297 = getelementptr float, float* %294, i64 2
  %298 = bitcast float* %297 to <2 x float>*
  %299 = load <2 x float>, <2 x float>* %298, align 4, !alias.scope !54
  %300 = fpext <2 x float> %296 to <2 x double>
  %301 = fpext <2 x float> %299 to <2 x double>
  %302 = bitcast double* %293 to <2 x double>*
  store <2 x double> %300, <2 x double>* %302, align 8, !alias.scope !57, !noalias !54
  %303 = getelementptr double, double* %293, i64 2
  %304 = bitcast double* %303 to <2 x double>*
  store <2 x double> %301, <2 x double>* %304, align 8, !alias.scope !57, !noalias !54
  %305 = or i64 %291, 4
  %306 = getelementptr double, double* %257, i64 %305
  %307 = getelementptr float, float* %242, i64 %305
  %308 = bitcast float* %307 to <2 x float>*
  %309 = load <2 x float>, <2 x float>* %308, align 4, !alias.scope !54
  %310 = getelementptr float, float* %307, i64 2
  %311 = bitcast float* %310 to <2 x float>*
  %312 = load <2 x float>, <2 x float>* %311, align 4, !alias.scope !54
  %313 = fpext <2 x float> %309 to <2 x double>
  %314 = fpext <2 x float> %312 to <2 x double>
  %315 = bitcast double* %306 to <2 x double>*
  store <2 x double> %313, <2 x double>* %315, align 8, !alias.scope !57, !noalias !54
  %316 = getelementptr double, double* %306, i64 2
  %317 = bitcast double* %316 to <2 x double>*
  store <2 x double> %314, <2 x double>* %317, align 8, !alias.scope !57, !noalias !54
  %318 = add i64 %291, 8
  %319 = add i64 %292, -2
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %290, !llvm.loop !59

321:                                              ; preds = %290, %279
  %322 = phi i64 [ 0, %279 ], [ %318, %290 ]
  %323 = icmp eq i64 %286, 0
  br i1 %323, label %337, label %324

324:                                              ; preds = %321
  %325 = getelementptr double, double* %257, i64 %322
  %326 = getelementptr float, float* %242, i64 %322
  %327 = bitcast float* %326 to <2 x float>*
  %328 = load <2 x float>, <2 x float>* %327, align 4, !alias.scope !54
  %329 = getelementptr float, float* %326, i64 2
  %330 = bitcast float* %329 to <2 x float>*
  %331 = load <2 x float>, <2 x float>* %330, align 4, !alias.scope !54
  %332 = fpext <2 x float> %328 to <2 x double>
  %333 = fpext <2 x float> %331 to <2 x double>
  %334 = bitcast double* %325 to <2 x double>*
  store <2 x double> %332, <2 x double>* %334, align 8, !alias.scope !57, !noalias !54
  %335 = getelementptr double, double* %325, i64 2
  %336 = bitcast double* %335 to <2 x double>*
  store <2 x double> %333, <2 x double>* %336, align 8, !alias.scope !57, !noalias !54
  br label %337

337:                                              ; preds = %321, %324
  %338 = icmp eq i64 %262, %280
  br i1 %338, label %400, label %339

339:                                              ; preds = %337, %264, %256
  %340 = phi double* [ %257, %264 ], [ %257, %256 ], [ %281, %337 ]
  %341 = phi float* [ %242, %264 ], [ %242, %256 ], [ %282, %337 ]
  %342 = ptrtoint float* %341 to i64
  %343 = getelementptr float, float* %253, i64 -1
  %344 = ptrtoint float* %343 to i64
  %345 = sub i64 %344, %342
  %346 = lshr i64 %345, 2
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 7
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %360, label %350

350:                                              ; preds = %339, %350
  %351 = phi double* [ %357, %350 ], [ %340, %339 ]
  %352 = phi float* [ %356, %350 ], [ %341, %339 ]
  %353 = phi i64 [ %358, %350 ], [ %348, %339 ]
  %354 = load float, float* %352, align 4
  %355 = fpext float %354 to double
  store double %355, double* %351, align 8
  %356 = getelementptr inbounds float, float* %352, i64 1
  %357 = getelementptr inbounds double, double* %351, i64 1
  %358 = add i64 %353, -1
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %350, !llvm.loop !60

360:                                              ; preds = %350, %339
  %361 = phi double* [ %340, %339 ], [ %357, %350 ]
  %362 = phi float* [ %341, %339 ], [ %356, %350 ]
  %363 = icmp ult i64 %345, 28
  br i1 %363, label %400, label %364

364:                                              ; preds = %360, %364
  %365 = phi double* [ %398, %364 ], [ %361, %360 ]
  %366 = phi float* [ %397, %364 ], [ %362, %360 ]
  %367 = load float, float* %366, align 4
  %368 = fpext float %367 to double
  store double %368, double* %365, align 8
  %369 = getelementptr inbounds float, float* %366, i64 1
  %370 = getelementptr inbounds double, double* %365, i64 1
  %371 = load float, float* %369, align 4
  %372 = fpext float %371 to double
  store double %372, double* %370, align 8
  %373 = getelementptr inbounds float, float* %366, i64 2
  %374 = getelementptr inbounds double, double* %365, i64 2
  %375 = load float, float* %373, align 4
  %376 = fpext float %375 to double
  store double %376, double* %374, align 8
  %377 = getelementptr inbounds float, float* %366, i64 3
  %378 = getelementptr inbounds double, double* %365, i64 3
  %379 = load float, float* %377, align 4
  %380 = fpext float %379 to double
  store double %380, double* %378, align 8
  %381 = getelementptr inbounds float, float* %366, i64 4
  %382 = getelementptr inbounds double, double* %365, i64 4
  %383 = load float, float* %381, align 4
  %384 = fpext float %383 to double
  store double %384, double* %382, align 8
  %385 = getelementptr inbounds float, float* %366, i64 5
  %386 = getelementptr inbounds double, double* %365, i64 5
  %387 = load float, float* %385, align 4
  %388 = fpext float %387 to double
  store double %388, double* %386, align 8
  %389 = getelementptr inbounds float, float* %366, i64 6
  %390 = getelementptr inbounds double, double* %365, i64 6
  %391 = load float, float* %389, align 4
  %392 = fpext float %391 to double
  store double %392, double* %390, align 8
  %393 = getelementptr inbounds float, float* %366, i64 7
  %394 = getelementptr inbounds double, double* %365, i64 7
  %395 = load float, float* %393, align 4
  %396 = fpext float %395 to double
  store double %396, double* %394, align 8
  %397 = getelementptr inbounds float, float* %366, i64 8
  %398 = getelementptr inbounds double, double* %365, i64 8
  %399 = icmp eq float* %397, %253
  br i1 %399, label %400, label %364, !llvm.loop !61

400:                                              ; preds = %360, %364, %337, %239
  %401 = icmp eq i64 %254, 0
  br i1 %401, label %425, label %402

402:                                              ; preds = %400
  %403 = bitcast double** %241 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = sub i64 %240, %404
  %406 = ashr exact i64 %405, 3
  %407 = add nsw i64 %406, %254
  %408 = icmp sgt i64 %407, 0
  br i1 %408, label %409, label %416

409:                                              ; preds = %402
  %410 = lshr i64 %407, 9
  %411 = getelementptr inbounds double*, double** %241, i64 %410
  %412 = load double*, double** %411, align 8
  %413 = and i64 %407, 511
  %414 = getelementptr inbounds double, double* %412, i64 %413
  %415 = ptrtoint double* %414 to i64
  br label %425

416:                                              ; preds = %402
  %417 = sub nsw i64 511, %407
  %418 = sdiv i64 %417, -512
  %419 = getelementptr inbounds double*, double** %241, i64 %418
  %420 = load double*, double** %419, align 8
  %421 = srem i64 %417, 512
  %422 = sub nsw i64 511, %421
  %423 = getelementptr inbounds double, double* %420, i64 %422
  %424 = ptrtoint double* %423 to i64
  br label %425

425:                                              ; preds = %416, %409, %400
  %426 = phi i64 [ %240, %400 ], [ %415, %409 ], [ %424, %416 ]
  %427 = phi double** [ %241, %400 ], [ %411, %409 ], [ %419, %416 ]
  %428 = icmp eq float* %253, %4
  br i1 %428, label %882, label %239

429:                                              ; preds = %46
  %430 = sub i64 %20, %21
  %431 = icmp eq i64 %430, 0
  %432 = shl i64 %430, 6
  %433 = add i64 %432, -1
  %434 = select i1 %431, i64 0, i64 %433
  %435 = add i64 %49, %14
  %436 = sub i64 %434, %435
  %437 = icmp ugt i64 %10, %436
  br i1 %437, label %438, label %445

438:                                              ; preds = %429
  %439 = sub i64 %10, %436
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEm(%"class.std::__1::deque"* %0, i64 %439)
  %440 = load i64, i64* %48, align 8
  %441 = load i64, i64* %13, align 8
  %442 = load double**, double*** %11, align 8
  %443 = load double**, double*** %17, align 8
  %444 = add i64 %441, %440
  br label %445

445:                                              ; preds = %438, %429
  %446 = phi i64 [ %444, %438 ], [ %435, %429 ]
  %447 = phi double** [ %443, %438 ], [ %18, %429 ]
  %448 = phi double** [ %442, %438 ], [ %12, %429 ]
  %449 = phi i64 [ %440, %438 ], [ %49, %429 ]
  %450 = lshr i64 %446, 9
  %451 = getelementptr inbounds double*, double** %448, i64 %450
  %452 = icmp eq double** %447, %448
  br i1 %452, label %457, label %453

453:                                              ; preds = %445
  %454 = load double*, double** %451, align 8
  %455 = and i64 %446, 511
  %456 = getelementptr inbounds double, double* %454, i64 %455
  br label %457

457:                                              ; preds = %445, %453
  %458 = phi double* [ %456, %453 ], [ null, %445 ]
  %459 = ptrtoint double* %458 to i64
  %460 = sub i64 %449, %47
  %461 = icmp ult i64 %460, %10
  br i1 %461, label %462, label %533

462:                                              ; preds = %457
  %463 = lshr i64 %10, 1
  %464 = icmp ult i64 %460, %463
  %465 = getelementptr inbounds float, float* %3, i64 %460
  %466 = sub i64 %460, %10
  %467 = getelementptr inbounds float, float* %4, i64 %466
  %468 = select i1 %464, float* %465, float* %467
  %469 = icmp eq float* %468, %4
  br i1 %469, label %533, label %470

470:                                              ; preds = %462
  %471 = ptrtoint float* %468 to i64
  %472 = getelementptr float, float* %4, i64 -1
  %473 = ptrtoint float* %472 to i64
  %474 = sub i64 %473, %471
  %475 = and i64 %474, 4
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %477, label %497

477:                                              ; preds = %470
  %478 = load float, float* %468, align 4
  %479 = fpext float %478 to double
  store double %479, double* %458, align 8
  %480 = getelementptr inbounds double, double* %458, i64 1
  %481 = ptrtoint double* %480 to i64
  %482 = bitcast double** %451 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = sub i64 %481, %483
  %485 = icmp eq i64 %484, 4096
  br i1 %485, label %486, label %490

486:                                              ; preds = %477
  %487 = getelementptr inbounds double*, double** %451, i64 1
  %488 = bitcast double** %487 to i64*
  %489 = load i64, i64* %488, align 8
  br label %490

490:                                              ; preds = %486, %477
  %491 = phi i64 [ %489, %486 ], [ %481, %477 ]
  %492 = phi double** [ %487, %486 ], [ %451, %477 ]
  %493 = inttoptr i64 %491 to double*
  %494 = getelementptr inbounds float, float* %468, i64 1
  %495 = load i64, i64* %48, align 8
  %496 = add i64 %495, 1
  store i64 %496, i64* %48, align 8
  br label %497

497:                                              ; preds = %490, %470
  %498 = phi i64 [ undef, %470 ], [ %491, %490 ]
  %499 = phi double** [ undef, %470 ], [ %492, %490 ]
  %500 = phi float* [ %468, %470 ], [ %494, %490 ]
  %501 = phi double** [ %451, %470 ], [ %492, %490 ]
  %502 = phi double* [ %458, %470 ], [ %493, %490 ]
  %503 = icmp ult i64 %474, 4
  br i1 %503, label %533, label %504

504:                                              ; preds = %497, %944
  %505 = phi float* [ %948, %944 ], [ %500, %497 ]
  %506 = phi double** [ %946, %944 ], [ %501, %497 ]
  %507 = phi double* [ %947, %944 ], [ %502, %497 ]
  %508 = load float, float* %505, align 4
  %509 = fpext float %508 to double
  store double %509, double* %507, align 8
  %510 = getelementptr inbounds double, double* %507, i64 1
  %511 = ptrtoint double* %510 to i64
  %512 = bitcast double** %506 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = sub i64 %511, %513
  %515 = icmp eq i64 %514, 4096
  br i1 %515, label %516, label %519

516:                                              ; preds = %504
  %517 = getelementptr inbounds double*, double** %506, i64 1
  %518 = load double*, double** %517, align 8
  br label %519

519:                                              ; preds = %504, %516
  %520 = phi double* [ %518, %516 ], [ %510, %504 ]
  %521 = phi double** [ %517, %516 ], [ %506, %504 ]
  %522 = getelementptr inbounds float, float* %505, i64 1
  %523 = load i64, i64* %48, align 8
  %524 = add i64 %523, 1
  store i64 %524, i64* %48, align 8
  %525 = load float, float* %522, align 4
  %526 = fpext float %525 to double
  store double %526, double* %520, align 8
  %527 = getelementptr inbounds double, double* %520, i64 1
  %528 = ptrtoint double* %527 to i64
  %529 = bitcast double** %521 to i64*
  %530 = load i64, i64* %529, align 8
  %531 = sub i64 %528, %530
  %532 = icmp eq i64 %531, 4096
  br i1 %532, label %940, label %944

533:                                              ; preds = %497, %944, %462, %457
  %534 = phi i64 [ %459, %457 ], [ %459, %462 ], [ %498, %497 ], [ %945, %944 ]
  %535 = phi double** [ %451, %457 ], [ %451, %462 ], [ %499, %497 ], [ %946, %944 ]
  %536 = phi float* [ %4, %457 ], [ %4, %462 ], [ %468, %944 ], [ %468, %497 ]
  %537 = phi i64 [ %10, %457 ], [ %460, %462 ], [ %460, %944 ], [ %460, %497 ]
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %882, label %539

539:                                              ; preds = %533
  %540 = bitcast double** %451 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = sub i64 %459, %541
  %543 = ashr exact i64 %542, 3
  %544 = sub i64 %543, %537
  %545 = icmp sgt i64 %544, 0
  br i1 %545, label %546, label %552

546:                                              ; preds = %539
  %547 = lshr i64 %544, 9
  %548 = getelementptr inbounds double*, double** %451, i64 %547
  %549 = load double*, double** %548, align 8
  %550 = and i64 %544, 511
  %551 = getelementptr inbounds double, double* %549, i64 %550
  br label %560

552:                                              ; preds = %539
  %553 = sub nsw i64 511, %544
  %554 = sdiv i64 %553, -512
  %555 = getelementptr inbounds double*, double** %451, i64 %554
  %556 = load double*, double** %555, align 8
  %557 = srem i64 %553, 512
  %558 = sub nsw i64 511, %557
  %559 = getelementptr inbounds double, double* %556, i64 %558
  br label %560

560:                                              ; preds = %546, %552
  %561 = phi double* [ %551, %546 ], [ %559, %552 ]
  %562 = phi double** [ %548, %546 ], [ %555, %552 ]
  %563 = icmp eq double* %561, %458
  br i1 %563, label %564, label %566

564:                                              ; preds = %598, %560
  %565 = icmp ult i64 %537, %460
  br i1 %565, label %605, label %632

566:                                              ; preds = %560, %598
  %567 = phi double** [ %600, %598 ], [ %562, %560 ]
  %568 = phi double* [ %601, %598 ], [ %561, %560 ]
  %569 = phi double** [ %587, %598 ], [ %535, %560 ]
  %570 = phi i64 [ %586, %598 ], [ %534, %560 ]
  %571 = inttoptr i64 %570 to double*
  %572 = bitcast double* %568 to i64*
  %573 = load i64, i64* %572, align 8
  %574 = inttoptr i64 %570 to i64*
  store i64 %573, i64* %574, align 8
  %575 = getelementptr inbounds double, double* %571, i64 1
  %576 = ptrtoint double* %575 to i64
  %577 = bitcast double** %569 to i64*
  %578 = load i64, i64* %577, align 8
  %579 = sub i64 %576, %578
  %580 = icmp eq i64 %579, 4096
  br i1 %580, label %581, label %585

581:                                              ; preds = %566
  %582 = getelementptr inbounds double*, double** %569, i64 1
  %583 = bitcast double** %582 to i64*
  %584 = load i64, i64* %583, align 8
  br label %585

585:                                              ; preds = %566, %581
  %586 = phi i64 [ %584, %581 ], [ %576, %566 ]
  %587 = phi double** [ %582, %581 ], [ %569, %566 ]
  %588 = getelementptr inbounds double, double* %568, i64 1
  %589 = ptrtoint double* %588 to i64
  %590 = bitcast double** %567 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = sub i64 %589, %591
  %593 = icmp eq i64 %592, 4096
  br i1 %593, label %594, label %598

594:                                              ; preds = %585
  %595 = getelementptr inbounds double*, double** %567, i64 1
  %596 = bitcast double** %595 to i64*
  %597 = load i64, i64* %596, align 8
  br label %598

598:                                              ; preds = %585, %594
  %599 = phi i64 [ %597, %594 ], [ %589, %585 ]
  %600 = phi double** [ %595, %594 ], [ %567, %585 ]
  %601 = inttoptr i64 %599 to double*
  %602 = load i64, i64* %48, align 8
  %603 = add i64 %602, 1
  store i64 %603, i64* %48, align 8
  %604 = icmp eq double* %458, %601
  br i1 %604, label %564, label %566

605:                                              ; preds = %564
  %606 = load i64, i64* %540, align 8
  %607 = sub i64 %459, %606
  %608 = ashr exact i64 %607, 3
  %609 = sub i64 %608, %460
  %610 = icmp sgt i64 %609, 0
  br i1 %610, label %611, label %617

611:                                              ; preds = %605
  %612 = lshr i64 %609, 9
  %613 = getelementptr inbounds double*, double** %451, i64 %612
  %614 = load double*, double** %613, align 8
  %615 = and i64 %609, 511
  %616 = getelementptr inbounds double, double* %614, i64 %615
  br label %625

617:                                              ; preds = %605
  %618 = sub nsw i64 511, %609
  %619 = sdiv i64 %618, -512
  %620 = getelementptr inbounds double*, double** %451, i64 %619
  %621 = load double*, double** %620, align 8
  %622 = srem i64 %618, 512
  %623 = sub nsw i64 511, %622
  %624 = getelementptr inbounds double, double* %621, i64 %623
  br label %625

625:                                              ; preds = %611, %617
  %626 = phi double* [ %616, %611 ], [ %624, %617 ]
  %627 = phi double** [ %613, %611 ], [ %620, %617 ]
  %628 = tail call { double**, double* } @_ZNSt3__113move_backwardIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %627, double* %626, double** %562, double* %561, double** %451, double* %458)
  %629 = extractvalue { double**, double* } %628, 0
  %630 = extractvalue { double**, double* } %628, 1
  %631 = ptrtoint double* %630 to i64
  br label %632

632:                                              ; preds = %625, %564
  %633 = phi i64 [ %631, %625 ], [ %459, %564 ]
  %634 = phi double** [ %629, %625 ], [ %451, %564 ]
  %635 = icmp eq float* %536, %3
  br i1 %635, label %882, label %636

636:                                              ; preds = %632, %878
  %637 = phi float* [ %675, %878 ], [ %536, %632 ]
  %638 = phi double** [ %880, %878 ], [ %634, %632 ]
  %639 = phi i64 [ %879, %878 ], [ %633, %632 ]
  %640 = ptrtoint float* %637 to i64
  %641 = bitcast double** %638 to i64*
  %642 = load i64, i64* %641, align 8
  %643 = sub i64 %639, %642
  %644 = ashr exact i64 %643, 3
  %645 = add nsw i64 %644, -1
  %646 = icmp sgt i64 %645, 0
  br i1 %646, label %647, label %653

647:                                              ; preds = %636
  %648 = lshr i64 %645, 9
  %649 = getelementptr inbounds double*, double** %638, i64 %648
  %650 = load double*, double** %649, align 8
  %651 = and i64 %645, 511
  %652 = getelementptr inbounds double, double* %650, i64 %651
  br label %661

653:                                              ; preds = %636
  %654 = sub nsw i64 512, %644
  %655 = sdiv i64 %654, -512
  %656 = getelementptr inbounds double*, double** %638, i64 %655
  %657 = load double*, double** %656, align 8
  %658 = srem i64 %654, 512
  %659 = sub nuw nsw i64 511, %658
  %660 = getelementptr inbounds double, double* %657, i64 %659
  br label %661

661:                                              ; preds = %653, %647
  %662 = phi double* [ %652, %647 ], [ %660, %653 ]
  %663 = phi double** [ %649, %647 ], [ %656, %653 ]
  %664 = bitcast double** %663 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = getelementptr inbounds double, double* %662, i64 1
  %667 = ptrtoint double* %666 to i64
  %668 = sub i64 %667, %665
  %669 = ashr exact i64 %668, 3
  %670 = sub i64 %640, %7
  %671 = ashr exact i64 %670, 2
  %672 = icmp sgt i64 %671, %669
  %673 = sub nsw i64 0, %669
  %674 = getelementptr inbounds float, float* %637, i64 %673
  %675 = select i1 %672, float* %674, float* %3
  %676 = ptrtoint float* %675 to i64
  %677 = select i1 %672, i64 %669, i64 %671
  %678 = icmp eq float* %637, %675
  br i1 %678, label %854, label %679

679:                                              ; preds = %661
  %680 = getelementptr float, float* %637, i64 -1
  %681 = ptrtoint float* %680 to i64
  %682 = sub i64 %681, %676
  %683 = lshr i64 %682, 2
  %684 = add nuw nsw i64 %683, 1
  %685 = icmp ult i64 %684, 4
  br i1 %685, label %794, label %686

686:                                              ; preds = %679
  %687 = getelementptr float, float* %637, i64 -1
  %688 = ptrtoint float* %687 to i64
  %689 = sub i64 %688, %676
  %690 = lshr i64 %689, 2
  %691 = sub nsw i64 0, %690
  %692 = getelementptr double, double* %662, i64 %691
  %693 = getelementptr float, float* %637, i64 -1
  %694 = getelementptr float, float* %693, i64 %691
  %695 = bitcast float* %637 to double*
  %696 = icmp ult double* %692, %695
  %697 = bitcast double* %666 to float*
  %698 = icmp ult float* %694, %697
  %699 = and i1 %696, %698
  br i1 %699, label %794, label %700

700:                                              ; preds = %686
  %701 = and i64 %684, 9223372036854775804
  %702 = sub nsw i64 0, %701
  %703 = getelementptr double, double* %666, i64 %702
  %704 = sub nsw i64 0, %701
  %705 = getelementptr float, float* %637, i64 %704
  %706 = add nsw i64 %701, -4
  %707 = lshr exact i64 %706, 2
  %708 = add nuw nsw i64 %707, 1
  %709 = and i64 %708, 1
  %710 = icmp eq i64 %706, 0
  br i1 %710, label %765, label %711

711:                                              ; preds = %700
  %712 = sub nuw nsw i64 %708, %709
  %713 = getelementptr float, float* %637, i64 -1
  %714 = getelementptr float, float* %637, i64 -1
  br label %715

715:                                              ; preds = %715, %711
  %716 = phi i64 [ 0, %711 ], [ %762, %715 ]
  %717 = phi i64 [ %712, %711 ], [ %763, %715 ]
  %718 = sub i64 0, %716
  %719 = sub i64 0, %716
  %720 = getelementptr inbounds float, float* %713, i64 %719
  %721 = getelementptr inbounds float, float* %720, i64 -1
  %722 = bitcast float* %721 to <2 x float>*
  %723 = load <2 x float>, <2 x float>* %722, align 4, !alias.scope !62
  %724 = shufflevector <2 x float> %723, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %725 = getelementptr inbounds float, float* %720, i64 -2
  %726 = getelementptr inbounds float, float* %725, i64 -1
  %727 = bitcast float* %726 to <2 x float>*
  %728 = load <2 x float>, <2 x float>* %727, align 4, !alias.scope !62
  %729 = shufflevector <2 x float> %728, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %730 = fpext <2 x float> %724 to <2 x double>
  %731 = fpext <2 x float> %729 to <2 x double>
  %732 = getelementptr inbounds double, double* %662, i64 %718
  %733 = shufflevector <2 x double> %730, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %734 = getelementptr inbounds double, double* %732, i64 -1
  %735 = bitcast double* %734 to <2 x double>*
  store <2 x double> %733, <2 x double>* %735, align 8, !alias.scope !65, !noalias !62
  %736 = shufflevector <2 x double> %731, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %737 = getelementptr inbounds double, double* %732, i64 -2
  %738 = getelementptr inbounds double, double* %737, i64 -1
  %739 = bitcast double* %738 to <2 x double>*
  store <2 x double> %736, <2 x double>* %739, align 8, !alias.scope !65, !noalias !62
  %740 = sub nuw nsw i64 -4, %716
  %741 = sub nuw nsw i64 -4, %716
  %742 = getelementptr inbounds float, float* %714, i64 %741
  %743 = getelementptr inbounds float, float* %742, i64 -1
  %744 = bitcast float* %743 to <2 x float>*
  %745 = load <2 x float>, <2 x float>* %744, align 4, !alias.scope !62
  %746 = shufflevector <2 x float> %745, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %747 = getelementptr inbounds float, float* %742, i64 -2
  %748 = getelementptr inbounds float, float* %747, i64 -1
  %749 = bitcast float* %748 to <2 x float>*
  %750 = load <2 x float>, <2 x float>* %749, align 4, !alias.scope !62
  %751 = shufflevector <2 x float> %750, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %752 = fpext <2 x float> %746 to <2 x double>
  %753 = fpext <2 x float> %751 to <2 x double>
  %754 = getelementptr inbounds double, double* %662, i64 %740
  %755 = shufflevector <2 x double> %752, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %756 = getelementptr inbounds double, double* %754, i64 -1
  %757 = bitcast double* %756 to <2 x double>*
  store <2 x double> %755, <2 x double>* %757, align 8, !alias.scope !65, !noalias !62
  %758 = shufflevector <2 x double> %753, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %759 = getelementptr inbounds double, double* %754, i64 -2
  %760 = getelementptr inbounds double, double* %759, i64 -1
  %761 = bitcast double* %760 to <2 x double>*
  store <2 x double> %758, <2 x double>* %761, align 8, !alias.scope !65, !noalias !62
  %762 = add i64 %716, 8
  %763 = add i64 %717, -2
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %765, label %715, !llvm.loop !67

765:                                              ; preds = %715, %700
  %766 = phi i64 [ 0, %700 ], [ %762, %715 ]
  %767 = icmp eq i64 %709, 0
  br i1 %767, label %792, label %768

768:                                              ; preds = %765
  %769 = sub i64 0, %766
  %770 = sub i64 0, %766
  %771 = getelementptr float, float* %637, i64 -1
  %772 = getelementptr inbounds float, float* %771, i64 %770
  %773 = getelementptr inbounds float, float* %772, i64 -1
  %774 = bitcast float* %773 to <2 x float>*
  %775 = load <2 x float>, <2 x float>* %774, align 4, !alias.scope !62
  %776 = shufflevector <2 x float> %775, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %777 = getelementptr inbounds float, float* %772, i64 -2
  %778 = getelementptr inbounds float, float* %777, i64 -1
  %779 = bitcast float* %778 to <2 x float>*
  %780 = load <2 x float>, <2 x float>* %779, align 4, !alias.scope !62
  %781 = shufflevector <2 x float> %780, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %782 = fpext <2 x float> %776 to <2 x double>
  %783 = fpext <2 x float> %781 to <2 x double>
  %784 = getelementptr inbounds double, double* %662, i64 %769
  %785 = shufflevector <2 x double> %782, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %786 = getelementptr inbounds double, double* %784, i64 -1
  %787 = bitcast double* %786 to <2 x double>*
  store <2 x double> %785, <2 x double>* %787, align 8, !alias.scope !65, !noalias !62
  %788 = shufflevector <2 x double> %783, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %789 = getelementptr inbounds double, double* %784, i64 -2
  %790 = getelementptr inbounds double, double* %789, i64 -1
  %791 = bitcast double* %790 to <2 x double>*
  store <2 x double> %788, <2 x double>* %791, align 8, !alias.scope !65, !noalias !62
  br label %792

792:                                              ; preds = %765, %768
  %793 = icmp eq i64 %684, %701
  br i1 %793, label %854, label %794

794:                                              ; preds = %792, %686, %679
  %795 = phi double* [ %666, %686 ], [ %666, %679 ], [ %703, %792 ]
  %796 = phi float* [ %637, %686 ], [ %637, %679 ], [ %705, %792 ]
  %797 = getelementptr float, float* %796, i64 -1
  %798 = ptrtoint float* %797 to i64
  %799 = sub i64 %798, %676
  %800 = lshr i64 %799, 2
  %801 = add nuw nsw i64 %800, 1
  %802 = and i64 %801, 7
  %803 = icmp eq i64 %802, 0
  br i1 %803, label %814, label %804

804:                                              ; preds = %794, %804
  %805 = phi double* [ %811, %804 ], [ %795, %794 ]
  %806 = phi float* [ %808, %804 ], [ %796, %794 ]
  %807 = phi i64 [ %812, %804 ], [ %802, %794 ]
  %808 = getelementptr inbounds float, float* %806, i64 -1
  %809 = load float, float* %808, align 4
  %810 = fpext float %809 to double
  %811 = getelementptr inbounds double, double* %805, i64 -1
  store double %810, double* %811, align 8
  %812 = add i64 %807, -1
  %813 = icmp eq i64 %812, 0
  br i1 %813, label %814, label %804, !llvm.loop !68

814:                                              ; preds = %804, %794
  %815 = phi double* [ %795, %794 ], [ %811, %804 ]
  %816 = phi float* [ %796, %794 ], [ %808, %804 ]
  %817 = icmp ult i64 %799, 28
  br i1 %817, label %854, label %818

818:                                              ; preds = %814, %818
  %819 = phi double* [ %852, %818 ], [ %815, %814 ]
  %820 = phi float* [ %849, %818 ], [ %816, %814 ]
  %821 = getelementptr inbounds float, float* %820, i64 -1
  %822 = load float, float* %821, align 4
  %823 = fpext float %822 to double
  %824 = getelementptr inbounds double, double* %819, i64 -1
  store double %823, double* %824, align 8
  %825 = getelementptr inbounds float, float* %820, i64 -2
  %826 = load float, float* %825, align 4
  %827 = fpext float %826 to double
  %828 = getelementptr inbounds double, double* %819, i64 -2
  store double %827, double* %828, align 8
  %829 = getelementptr inbounds float, float* %820, i64 -3
  %830 = load float, float* %829, align 4
  %831 = fpext float %830 to double
  %832 = getelementptr inbounds double, double* %819, i64 -3
  store double %831, double* %832, align 8
  %833 = getelementptr inbounds float, float* %820, i64 -4
  %834 = load float, float* %833, align 4
  %835 = fpext float %834 to double
  %836 = getelementptr inbounds double, double* %819, i64 -4
  store double %835, double* %836, align 8
  %837 = getelementptr inbounds float, float* %820, i64 -5
  %838 = load float, float* %837, align 4
  %839 = fpext float %838 to double
  %840 = getelementptr inbounds double, double* %819, i64 -5
  store double %839, double* %840, align 8
  %841 = getelementptr inbounds float, float* %820, i64 -6
  %842 = load float, float* %841, align 4
  %843 = fpext float %842 to double
  %844 = getelementptr inbounds double, double* %819, i64 -6
  store double %843, double* %844, align 8
  %845 = getelementptr inbounds float, float* %820, i64 -7
  %846 = load float, float* %845, align 4
  %847 = fpext float %846 to double
  %848 = getelementptr inbounds double, double* %819, i64 -7
  store double %847, double* %848, align 8
  %849 = getelementptr inbounds float, float* %820, i64 -8
  %850 = load float, float* %849, align 4
  %851 = fpext float %850 to double
  %852 = getelementptr inbounds double, double* %819, i64 -8
  store double %851, double* %852, align 8
  %853 = icmp eq float* %849, %675
  br i1 %853, label %854, label %818, !llvm.loop !69

854:                                              ; preds = %814, %818, %792, %661
  %855 = icmp eq i64 %677, 0
  br i1 %855, label %878, label %856

856:                                              ; preds = %854
  %857 = load i64, i64* %641, align 8
  %858 = sub i64 %639, %857
  %859 = ashr exact i64 %858, 3
  %860 = sub nsw i64 %859, %677
  %861 = icmp sgt i64 %860, 0
  br i1 %861, label %862, label %869

862:                                              ; preds = %856
  %863 = lshr i64 %860, 9
  %864 = getelementptr inbounds double*, double** %638, i64 %863
  %865 = load double*, double** %864, align 8
  %866 = and i64 %860, 511
  %867 = getelementptr inbounds double, double* %865, i64 %866
  %868 = ptrtoint double* %867 to i64
  br label %878

869:                                              ; preds = %856
  %870 = sub nsw i64 511, %860
  %871 = sdiv i64 %870, -512
  %872 = getelementptr inbounds double*, double** %638, i64 %871
  %873 = load double*, double** %872, align 8
  %874 = srem i64 %870, 512
  %875 = sub nsw i64 511, %874
  %876 = getelementptr inbounds double, double* %873, i64 %875
  %877 = ptrtoint double* %876 to i64
  br label %878

878:                                              ; preds = %869, %862, %854
  %879 = phi i64 [ %639, %854 ], [ %868, %862 ], [ %877, %869 ]
  %880 = phi double** [ %638, %854 ], [ %864, %862 ], [ %872, %869 ]
  %881 = icmp eq float* %675, %3
  br i1 %881, label %882, label %636

882:                                              ; preds = %878, %425, %632, %235, %533, %141
  %883 = load double**, double*** %11, align 8
  %884 = load i64, i64* %13, align 8
  %885 = lshr i64 %884, 9
  %886 = getelementptr inbounds double*, double** %883, i64 %885
  %887 = load double**, double*** %17, align 8
  %888 = icmp eq double** %887, %883
  br i1 %888, label %894, label %889

889:                                              ; preds = %882
  %890 = load double*, double** %886, align 8
  %891 = and i64 %884, 511
  %892 = getelementptr inbounds double, double* %890, i64 %891
  %893 = ptrtoint double* %892 to i64
  br label %894

894:                                              ; preds = %882, %889
  %895 = phi i64 [ %893, %889 ], [ 0, %882 ]
  %896 = icmp eq i64 %47, 0
  br i1 %896, label %920, label %897

897:                                              ; preds = %894
  %898 = bitcast double** %886 to i64*
  %899 = load i64, i64* %898, align 8
  %900 = sub i64 %895, %899
  %901 = ashr exact i64 %900, 3
  %902 = add nsw i64 %901, %47
  %903 = icmp sgt i64 %902, 0
  br i1 %903, label %904, label %911

904:                                              ; preds = %897
  %905 = lshr i64 %902, 9
  %906 = getelementptr inbounds double*, double** %886, i64 %905
  %907 = load double*, double** %906, align 8
  %908 = and i64 %902, 511
  %909 = getelementptr inbounds double, double* %907, i64 %908
  %910 = ptrtoint double* %909 to i64
  br label %920

911:                                              ; preds = %897
  %912 = sub nsw i64 511, %902
  %913 = sdiv i64 %912, -512
  %914 = getelementptr inbounds double*, double** %886, i64 %913
  %915 = load double*, double** %914, align 8
  %916 = srem i64 %912, 512
  %917 = sub nsw i64 511, %916
  %918 = getelementptr inbounds double, double* %915, i64 %917
  %919 = ptrtoint double* %918 to i64
  br label %920

920:                                              ; preds = %894, %904, %911
  %921 = phi i64 [ %895, %894 ], [ %910, %904 ], [ %919, %911 ]
  %922 = phi double** [ %886, %894 ], [ %906, %904 ], [ %914, %911 ]
  %923 = insertvalue { double**, double* } undef, double** %922, 0
  %924 = inttoptr i64 %921 to double*
  %925 = insertvalue { double**, double* } %923, double* %924, 1
  ret { double**, double* } %925

926:                                              ; preds = %130
  %927 = getelementptr inbounds double*, double** %131, i64 -1
  %928 = load double*, double** %927, align 8
  %929 = getelementptr inbounds double, double* %928, i64 512
  br label %930

930:                                              ; preds = %926, %130
  %931 = phi double** [ %927, %926 ], [ %131, %130 ]
  %932 = phi double* [ %929, %926 ], [ %133, %130 ]
  %933 = getelementptr inbounds double, double* %932, i64 -1
  %934 = getelementptr inbounds float, float* %121, i64 -2
  %935 = load float, float* %934, align 4
  %936 = fpext float %935 to double
  store double %936, double* %933, align 8
  %937 = load <2 x i64>, <2 x i64>* %118, align 8
  %938 = add <2 x i64> %937, <i64 -1, i64 1>
  store <2 x i64> %938, <2 x i64>* %119, align 8
  %939 = icmp eq float* %934, %3
  br i1 %939, label %141, label %120

940:                                              ; preds = %519
  %941 = getelementptr inbounds double*, double** %521, i64 1
  %942 = bitcast double** %941 to i64*
  %943 = load i64, i64* %942, align 8
  br label %944

944:                                              ; preds = %940, %519
  %945 = phi i64 [ %943, %940 ], [ %528, %519 ]
  %946 = phi double** [ %941, %940 ], [ %521, %519 ]
  %947 = inttoptr i64 %945 to double*
  %948 = getelementptr inbounds float, float* %505, i64 2
  %949 = load i64, i64* %48, align 8
  %950 = add i64 %949, 1
  store i64 %950, i64* %48, align 8
  %951 = icmp eq float* %948, %4
  br i1 %951, label %533, label %504
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE5eraseENS_16__deque_iteratorIdPKdRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"*, double**, double*, double**, double*) local_unnamed_addr #0 comdat align 2 {
  %6 = icmp eq double* %4, %2
  br i1 %6, label %24, label %7

7:                                                ; preds = %5
  %8 = ptrtoint double* %2 to i64
  %9 = ptrtoint double* %4 to i64
  %10 = ptrtoint double** %3 to i64
  %11 = ptrtoint double** %1 to i64
  %12 = sub i64 %10, %11
  %13 = shl i64 %12, 6
  %14 = bitcast double** %3 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %9, %15
  %17 = ashr exact i64 %16, 3
  %18 = add nsw i64 %17, %13
  %19 = bitcast double** %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %8, %20
  %22 = ashr exact i64 %21, 3
  %23 = sub i64 %18, %22
  br label %24

24:                                               ; preds = %5, %7
  %25 = phi i64 [ %23, %7 ], [ 0, %5 ]
  %26 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load double**, double*** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 9
  %31 = getelementptr inbounds double*, double** %27, i64 %30
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %33 = load double**, double*** %32, align 8
  %34 = icmp eq double** %33, %27
  br i1 %34, label %39, label %35

35:                                               ; preds = %24
  %36 = load double*, double** %31, align 8
  %37 = and i64 %29, 511
  %38 = getelementptr inbounds double, double* %36, i64 %37
  br label %39

39:                                               ; preds = %24, %35
  %40 = phi double* [ %38, %35 ], [ null, %24 ]
  %41 = ptrtoint double** %31 to i64
  %42 = ptrtoint double* %40 to i64
  %43 = icmp eq double* %40, %2
  br i1 %43, label %78, label %44

44:                                               ; preds = %39
  %45 = ptrtoint double* %2 to i64
  %46 = ptrtoint double** %1 to i64
  %47 = sub i64 %46, %41
  %48 = shl i64 %47, 6
  %49 = bitcast double** %1 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %45, %50
  %52 = ashr exact i64 %51, 3
  %53 = add nsw i64 %52, %48
  %54 = bitcast double** %31 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %42, %55
  %57 = ashr exact i64 %56, 3
  %58 = sub i64 %53, %57
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %78, label %60

60:                                               ; preds = %44
  %61 = icmp sgt i64 %53, 0
  br i1 %61, label %62, label %69

62:                                               ; preds = %60
  %63 = lshr i64 %53, 9
  %64 = getelementptr inbounds double*, double** %31, i64 %63
  %65 = load double*, double** %64, align 8
  %66 = and i64 %53, 511
  %67 = getelementptr inbounds double, double* %65, i64 %66
  %68 = ptrtoint double* %67 to i64
  br label %78

69:                                               ; preds = %60
  %70 = sub nsw i64 511, %53
  %71 = sdiv i64 %70, -512
  %72 = getelementptr inbounds double*, double** %31, i64 %71
  %73 = load double*, double** %72, align 8
  %74 = srem i64 %70, 512
  %75 = sub nsw i64 511, %74
  %76 = getelementptr inbounds double, double* %73, i64 %75
  %77 = ptrtoint double* %76 to i64
  br label %78

78:                                               ; preds = %39, %44, %62, %69
  %79 = phi i1 [ true, %44 ], [ false, %62 ], [ false, %69 ], [ true, %39 ]
  %80 = phi i64 [ 0, %44 ], [ %58, %62 ], [ %58, %69 ], [ 0, %39 ]
  %81 = phi i64 [ %42, %44 ], [ %68, %62 ], [ %77, %69 ], [ %42, %39 ]
  %82 = phi double** [ %31, %44 ], [ %64, %62 ], [ %72, %69 ], [ %31, %39 ]
  %83 = inttoptr i64 %81 to double*
  %84 = icmp sgt i64 %25, 0
  br i1 %84, label %85, label %255

85:                                               ; preds = %78
  %86 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %87, %25
  %89 = lshr i64 %88, 1
  %90 = icmp ugt i64 %80, %89
  %91 = bitcast double** %82 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %81, %92
  %94 = ashr exact i64 %93, 3
  %95 = add nsw i64 %94, %25
  %96 = icmp sgt i64 %95, 0
  br i1 %90, label %158, label %97

97:                                               ; preds = %85
  br i1 %96, label %98, label %104

98:                                               ; preds = %97
  %99 = lshr i64 %95, 9
  %100 = getelementptr inbounds double*, double** %82, i64 %99
  %101 = load double*, double** %100, align 8
  %102 = and i64 %95, 511
  %103 = getelementptr inbounds double, double* %101, i64 %102
  br label %112

104:                                              ; preds = %97
  %105 = sub nsw i64 511, %95
  %106 = sdiv i64 %105, -512
  %107 = getelementptr inbounds double*, double** %82, i64 %106
  %108 = load double*, double** %107, align 8
  %109 = srem i64 %105, 512
  %110 = sub nsw i64 511, %109
  %111 = getelementptr inbounds double, double* %108, i64 %110
  br label %112

112:                                              ; preds = %98, %104
  %113 = phi double* [ %103, %98 ], [ %111, %104 ]
  %114 = phi double** [ %100, %98 ], [ %107, %104 ]
  %115 = tail call { double**, double* } @_ZNSt3__113move_backwardIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %31, double* %40, double** %82, double* %83, double** %114, double* %113)
  %116 = extractvalue { double**, double* } %115, 1
  %117 = icmp eq double* %40, %116
  br i1 %117, label %138, label %118

118:                                              ; preds = %112, %133
  %119 = phi double* [ %136, %133 ], [ %40, %112 ]
  %120 = phi i64 [ %134, %133 ], [ %41, %112 ]
  %121 = getelementptr inbounds double, double* %119, i64 1
  %122 = ptrtoint double* %121 to i64
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %122, %124
  %126 = icmp eq i64 %125, 4096
  br i1 %126, label %127, label %133

127:                                              ; preds = %118
  %128 = inttoptr i64 %120 to double**
  %129 = getelementptr inbounds double*, double** %128, i64 1
  %130 = ptrtoint double** %129 to i64
  %131 = bitcast double** %129 to i64*
  %132 = load i64, i64* %131, align 8
  br label %133

133:                                              ; preds = %118, %127
  %134 = phi i64 [ %130, %127 ], [ %120, %118 ]
  %135 = phi i64 [ %132, %127 ], [ %122, %118 ]
  %136 = inttoptr i64 %135 to double*
  %137 = icmp eq double* %116, %136
  br i1 %137, label %138, label %118

138:                                              ; preds = %133, %112
  %139 = load i64, i64* %86, align 8
  %140 = sub i64 %139, %25
  store i64 %140, i64* %86, align 8
  %141 = load i64, i64* %28, align 8
  %142 = add i64 %141, %25
  store i64 %142, i64* %28, align 8
  %143 = icmp ult i64 %142, 1024
  br i1 %143, label %144, label %146

144:                                              ; preds = %138
  %145 = load double**, double*** %26, align 8
  br label %255

146:                                              ; preds = %138
  %147 = bitcast double*** %26 to i8***
  %148 = load i8**, i8*** %147, align 8
  br label %149

149:                                              ; preds = %146, %149
  %150 = phi i8** [ %148, %146 ], [ %157, %149 ]
  %151 = load i8*, i8** %150, align 8
  tail call void @_ZdlPv(i8* %151) #9
  %152 = load double**, double*** %26, align 8
  %153 = getelementptr inbounds double*, double** %152, i64 1
  store double** %153, double*** %26, align 8
  %154 = load i64, i64* %28, align 8
  %155 = add i64 %154, -512
  store i64 %155, i64* %28, align 8
  %156 = icmp ult i64 %155, 1024
  %157 = bitcast double** %153 to i8**
  br i1 %156, label %255, label %149

158:                                              ; preds = %85
  br i1 %96, label %159, label %165

159:                                              ; preds = %158
  %160 = lshr i64 %95, 9
  %161 = getelementptr inbounds double*, double** %82, i64 %160
  %162 = load double*, double** %161, align 8
  %163 = and i64 %95, 511
  %164 = getelementptr inbounds double, double* %162, i64 %163
  br label %173

165:                                              ; preds = %158
  %166 = sub nsw i64 511, %95
  %167 = sdiv i64 %166, -512
  %168 = getelementptr inbounds double*, double** %82, i64 %167
  %169 = load double*, double** %168, align 8
  %170 = srem i64 %166, 512
  %171 = sub nsw i64 511, %170
  %172 = getelementptr inbounds double, double* %169, i64 %171
  br label %173

173:                                              ; preds = %159, %165
  %174 = phi double* [ %164, %159 ], [ %172, %165 ]
  %175 = phi double** [ %161, %159 ], [ %168, %165 ]
  %176 = add i64 %87, %29
  %177 = lshr i64 %176, 9
  %178 = getelementptr inbounds double*, double** %27, i64 %177
  br i1 %34, label %183, label %179

179:                                              ; preds = %173
  %180 = load double*, double** %178, align 8
  %181 = and i64 %176, 511
  %182 = getelementptr inbounds double, double* %180, i64 %181
  br label %183

183:                                              ; preds = %173, %179
  %184 = phi double* [ %182, %179 ], [ null, %173 ]
  %185 = tail call { double**, double* } @_ZNSt3__14moveIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %175, double* %174, double** %178, double* %184, double** %82, double* %83)
  %186 = extractvalue { double**, double* } %185, 0
  %187 = extractvalue { double**, double* } %185, 1
  %188 = load i64, i64* %86, align 8
  %189 = load i64, i64* %28, align 8
  %190 = add i64 %189, %188
  %191 = load double**, double*** %26, align 8
  %192 = load double**, double*** %32, align 8
  %193 = icmp eq double** %192, %191
  %194 = ptrtoint double** %192 to i64
  %195 = ptrtoint double** %191 to i64
  br i1 %193, label %202, label %196

196:                                              ; preds = %183
  %197 = lshr i64 %190, 9
  %198 = getelementptr inbounds double*, double** %191, i64 %197
  %199 = load double*, double** %198, align 8
  %200 = and i64 %190, 511
  %201 = getelementptr inbounds double, double* %199, i64 %200
  br label %202

202:                                              ; preds = %183, %196
  %203 = phi double* [ %201, %196 ], [ null, %183 ]
  %204 = icmp eq double* %187, %203
  br i1 %204, label %205, label %216

205:                                              ; preds = %229, %202
  %206 = sub i64 %188, %25
  store i64 %206, i64* %86, align 8
  %207 = bitcast double*** %26 to i64*
  %208 = sub i64 %194, %195
  %209 = icmp eq i64 %208, 0
  %210 = shl i64 %208, 6
  %211 = add i64 %210, -1
  %212 = select i1 %209, i64 0, i64 %211
  %213 = add i64 %206, %189
  %214 = sub i64 %212, %213
  %215 = icmp ult i64 %214, 1024
  br i1 %215, label %255, label %234

216:                                              ; preds = %202, %229
  %217 = phi double** [ %231, %229 ], [ %186, %202 ]
  %218 = phi double* [ %232, %229 ], [ %187, %202 ]
  %219 = getelementptr inbounds double, double* %218, i64 1
  %220 = ptrtoint double* %219 to i64
  %221 = bitcast double** %217 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = sub i64 %220, %222
  %224 = icmp eq i64 %223, 4096
  br i1 %224, label %225, label %229

225:                                              ; preds = %216
  %226 = getelementptr inbounds double*, double** %217, i64 1
  %227 = bitcast double** %226 to i64*
  %228 = load i64, i64* %227, align 8
  br label %229

229:                                              ; preds = %216, %225
  %230 = phi i64 [ %228, %225 ], [ %220, %216 ]
  %231 = phi double** [ %226, %225 ], [ %217, %216 ]
  %232 = inttoptr i64 %230 to double*
  %233 = icmp eq double* %203, %232
  br i1 %233, label %205, label %216

234:                                              ; preds = %205, %234
  %235 = phi double** [ %240, %234 ], [ %192, %205 ]
  %236 = getelementptr inbounds double*, double** %235, i64 -1
  %237 = bitcast double** %236 to i8**
  %238 = load i8*, i8** %237, align 8
  tail call void @_ZdlPv(i8* %238) #9
  %239 = load double**, double*** %32, align 8
  %240 = getelementptr double*, double** %239, i64 -1
  store double** %240, double*** %32, align 8
  %241 = ptrtoint double** %240 to i64
  %242 = load i64, i64* %207, align 8
  %243 = sub i64 %241, %242
  %244 = icmp eq i64 %243, 0
  %245 = shl i64 %243, 6
  %246 = add i64 %245, -1
  %247 = select i1 %244, i64 0, i64 %246
  %248 = load i64, i64* %28, align 8
  %249 = load i64, i64* %86, align 8
  %250 = add i64 %249, %248
  %251 = sub i64 %247, %250
  %252 = icmp ult i64 %251, 1024
  br i1 %252, label %253, label %234

253:                                              ; preds = %234
  %254 = inttoptr i64 %242 to double**
  br label %255

255:                                              ; preds = %149, %144, %253, %205, %78
  %256 = phi i64 [ %142, %144 ], [ %248, %253 ], [ %189, %205 ], [ %29, %78 ], [ %155, %149 ]
  %257 = phi double** [ %145, %144 ], [ %254, %253 ], [ %191, %205 ], [ %27, %78 ], [ %153, %149 ]
  %258 = lshr i64 %256, 9
  %259 = getelementptr inbounds double*, double** %257, i64 %258
  %260 = load double**, double*** %32, align 8
  %261 = icmp eq double** %260, %257
  br i1 %261, label %267, label %262

262:                                              ; preds = %255
  %263 = load double*, double** %259, align 8
  %264 = and i64 %256, 511
  %265 = getelementptr inbounds double, double* %263, i64 %264
  %266 = ptrtoint double* %265 to i64
  br label %267

267:                                              ; preds = %255, %262
  %268 = phi i64 [ %266, %262 ], [ 0, %255 ]
  br i1 %79, label %292, label %269

269:                                              ; preds = %267
  %270 = bitcast double** %259 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = sub i64 %268, %271
  %273 = ashr exact i64 %272, 3
  %274 = add nsw i64 %273, %80
  %275 = icmp sgt i64 %274, 0
  br i1 %275, label %276, label %283

276:                                              ; preds = %269
  %277 = lshr i64 %274, 9
  %278 = getelementptr inbounds double*, double** %259, i64 %277
  %279 = load double*, double** %278, align 8
  %280 = and i64 %274, 511
  %281 = getelementptr inbounds double, double* %279, i64 %280
  %282 = ptrtoint double* %281 to i64
  br label %292

283:                                              ; preds = %269
  %284 = sub nsw i64 511, %274
  %285 = sdiv i64 %284, -512
  %286 = getelementptr inbounds double*, double** %259, i64 %285
  %287 = load double*, double** %286, align 8
  %288 = srem i64 %284, 512
  %289 = sub nsw i64 511, %288
  %290 = getelementptr inbounds double, double* %287, i64 %289
  %291 = ptrtoint double* %290 to i64
  br label %292

292:                                              ; preds = %267, %276, %283
  %293 = phi i64 [ %268, %267 ], [ %282, %276 ], [ %291, %283 ]
  %294 = phi double** [ %259, %267 ], [ %278, %276 ], [ %286, %283 ]
  %295 = insertvalue { double**, double* } undef, double** %294, 0
  %296 = inttoptr i64 %293 to double*
  %297 = insertvalue { double**, double* } %295, double* %296, 1
  ret { double**, double* } %297
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIdNS_9allocatorIdEEE20__add_front_capacityEm(%"class.std::__1::deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load double**, double*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load double**, double*** %10, align 8
  %12 = icmp eq double** %9, %11
  %13 = zext i1 %12 to i64
  %14 = add i64 %13, %1
  %15 = lshr i64 %14, 9
  %16 = and i64 %14, 511
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i64
  %19 = add nuw nsw i64 %15, %18
  %20 = bitcast double*** %8 to i64*
  %21 = ptrtoint double** %9 to i64
  %22 = bitcast double*** %10 to i64*
  %23 = ptrtoint double** %11 to i64
  %24 = sub i64 %21, %23
  %25 = icmp eq i64 %24, 0
  %26 = shl i64 %24, 6
  %27 = add i64 %26, -1
  %28 = select i1 %25, i64 0, i64 %27
  %29 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = sub i64 %28, %33
  %35 = lshr i64 %34, 9
  %36 = icmp ult i64 %19, %35
  %37 = select i1 %36, i64 %19, i64 %35
  %38 = sub nsw i64 %19, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %60

40:                                               ; preds = %2
  %41 = shl nuw i64 %37, 9
  %42 = add i64 %41, %30
  store i64 %42, i64* %29, align 8
  %43 = icmp eq i64 %37, 0
  br i1 %43, label %607, label %44

44:                                               ; preds = %40
  %45 = bitcast double** %3 to i8*
  %46 = bitcast double** %3 to i64*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #10
  store double* inttoptr (i64 -6148914691236517206 to double*), double** %3, align 8
  %47 = getelementptr double*, double** %9, i64 -1
  %48 = bitcast double** %47 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %46, align 8
  store double** %47, double*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, double** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #10
  %50 = add nsw i64 %37, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %607, label %52

52:                                               ; preds = %44, %52
  %53 = phi i64 [ %58, %52 ], [ %50, %44 ]
  %54 = load double**, double*** %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #10
  store double* inttoptr (i64 -6148914691236517206 to double*), double** %3, align 8
  %55 = getelementptr double*, double** %54, i64 -1
  %56 = bitcast double** %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %46, align 8
  store double** %55, double*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, double** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #10
  %58 = add i64 %53, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %607, label %52

60:                                               ; preds = %2
  %61 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %62 = bitcast double*** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.std::__1::deque"* %0 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %63, %65
  %67 = ashr exact i64 %66, 3
  %68 = ashr exact i64 %24, 3
  %69 = sub nsw i64 %67, %68
  %70 = icmp ugt i64 %38, %69
  br i1 %70, label %122, label %71

71:                                               ; preds = %60
  %72 = bitcast double** %4 to i8*
  %73 = bitcast double** %4 to i8**
  %74 = icmp eq i64 %65, %23
  br i1 %74, label %90, label %75

75:                                               ; preds = %71, %87
  %76 = phi i64 [ %78, %87 ], [ %38, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #10
  %77 = call i8* @_Znwm(i64 4096) #9
  store i8* %77, i8** %73, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %7, double** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #10
  %78 = add i64 %76, -1
  %79 = load i64, i64* %20, align 8
  %80 = load i64, i64* %22, align 8
  %81 = sub i64 %79, %80
  %82 = icmp eq i64 %81, 8
  %83 = select i1 %82, i64 511, i64 512
  %84 = load i64, i64* %29, align 8
  %85 = add i64 %83, %84
  store i64 %85, i64* %29, align 8
  %86 = icmp eq i64 %78, 0
  br i1 %86, label %105, label %87

87:                                               ; preds = %75
  %88 = load i64, i64* %64, align 8
  %89 = icmp eq i64 %80, %88
  br i1 %89, label %90, label %75

90:                                               ; preds = %87, %71
  %91 = phi i64 [ %30, %71 ], [ %85, %87 ]
  %92 = phi i64 [ %38, %71 ], [ %78, %87 ]
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %105, label %94

94:                                               ; preds = %90
  %95 = bitcast double** %5 to i8*
  %96 = bitcast double** %5 to i8**
  br label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %92, %94 ], [ %100, %97 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #10
  %99 = call i8* @_Znwm(i64 4096) #9
  store i8* %99, i8** %96, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %7, double** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #10
  %100 = add i64 %98, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %97

102:                                              ; preds = %97
  %103 = add i64 %92, %37
  %104 = load i64, i64* %29, align 8
  br label %105

105:                                              ; preds = %75, %102, %90
  %106 = phi i64 [ %91, %90 ], [ %104, %102 ], [ %85, %75 ]
  %107 = phi i64 [ %37, %90 ], [ %103, %102 ], [ %37, %75 ]
  %108 = shl i64 %107, 9
  %109 = add i64 %106, %108
  store i64 %109, i64* %29, align 8
  %110 = icmp eq i64 %107, 0
  br i1 %110, label %607, label %111

111:                                              ; preds = %105
  %112 = bitcast double** %6 to i8*
  %113 = bitcast double** %6 to i64*
  br label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %107, %111 ], [ %120, %114 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #10
  store double* inttoptr (i64 -6148914691236517206 to double*), double** %6, align 8
  %116 = load double**, double*** %8, align 8
  %117 = getelementptr double*, double** %116, i64 -1
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %113, align 8
  store double** %117, double*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, double** nonnull dereferenceable(8) %6)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #10
  %120 = add i64 %115, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %607, label %114

122:                                              ; preds = %60
  %123 = shl i64 %19, 9
  %124 = sub i64 %123, %13
  %125 = ashr exact i64 %66, 2
  %126 = add nsw i64 %68, %38
  %127 = icmp ult i64 %125, %126
  %128 = select i1 %127, i64 %126, i64 %125
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %137, label %130

130:                                              ; preds = %122
  %131 = icmp ugt i64 %128, 2305843009213693951
  br i1 %131, label %132, label %133

132:                                              ; preds = %130
  tail call void @abort() #11
  unreachable

133:                                              ; preds = %130
  %134 = shl i64 %128, 3
  %135 = tail call i8* @_Znwm(i64 %134) #9
  %136 = bitcast i8* %135 to double**
  br label %137

137:                                              ; preds = %133, %122
  %138 = phi double** [ %136, %133 ], [ null, %122 ]
  %139 = ptrtoint double** %138 to i64
  %140 = getelementptr inbounds double*, double** %138, i64 %128
  %141 = ptrtoint double** %140 to i64
  br label %146

142:                                              ; preds = %280
  %143 = ptrtoint double** %286 to i64
  %144 = icmp eq i64 %37, 0
  %145 = load double**, double*** %8, align 8
  br i1 %144, label %440, label %290

146:                                              ; preds = %137, %280
  %147 = phi i64 [ %288, %280 ], [ %38, %137 ]
  %148 = phi i64 [ %284, %280 ], [ %139, %137 ]
  %149 = phi i64 [ %283, %280 ], [ %141, %137 ]
  %150 = phi i64 [ %287, %280 ], [ %139, %137 ]
  %151 = phi i64 [ %281, %280 ], [ %139, %137 ]
  %152 = tail call i8* @_Znwm(i64 4096) #9
  %153 = ptrtoint i8* %152 to i64
  %154 = inttoptr i64 %150 to double**
  %155 = inttoptr i64 %149 to double**
  %156 = icmp eq double** %154, %155
  %157 = inttoptr i64 %150 to i64*
  br i1 %156, label %158, label %280

158:                                              ; preds = %146
  %159 = inttoptr i64 %151 to double**
  %160 = inttoptr i64 %148 to double**
  %161 = icmp ugt double** %159, %160
  br i1 %161, label %162, label %178

162:                                              ; preds = %158
  %163 = sub i64 %151, %148
  %164 = ashr exact i64 %163, 3
  %165 = add nsw i64 %164, 1
  %166 = sdiv i64 %165, -2
  %167 = getelementptr inbounds double*, double** %159, i64 %166
  %168 = sub i64 %150, %151
  %169 = ashr exact i64 %168, 3
  %170 = icmp eq i64 %168, 0
  br i1 %170, label %174, label %171

171:                                              ; preds = %162
  %172 = bitcast double** %167 to i8*
  %173 = inttoptr i64 %151 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 %168, i1 false) #10
  br label %174

174:                                              ; preds = %171, %162
  %175 = getelementptr inbounds double*, double** %167, i64 %169
  %176 = ptrtoint double** %167 to i64
  %177 = bitcast double** %175 to i64*
  br label %280

178:                                              ; preds = %158
  %179 = sub i64 %149, %148
  %180 = ashr exact i64 %179, 2
  %181 = icmp eq i64 %179, 0
  %182 = select i1 %181, i64 1, i64 %180
  %183 = icmp ugt i64 %182, 2305843009213693951
  br i1 %183, label %184, label %185

184:                                              ; preds = %178
  tail call void @abort() #11
  unreachable

185:                                              ; preds = %178
  %186 = lshr i64 %182, 2
  %187 = shl i64 %182, 3
  %188 = tail call i8* @_Znwm(i64 %187) #9
  %189 = bitcast i8* %188 to double**
  %190 = ptrtoint i8* %188 to i64
  %191 = getelementptr inbounds double*, double** %189, i64 %186
  %192 = ptrtoint double** %191 to i64
  %193 = getelementptr inbounds double*, double** %189, i64 %182
  %194 = ptrtoint double** %193 to i64
  %195 = sub i64 %150, %151
  %196 = ashr exact i64 %195, 3
  %197 = getelementptr inbounds double*, double** %191, i64 %196
  %198 = icmp eq i64 %195, 0
  br i1 %198, label %273, label %199

199:                                              ; preds = %185
  %200 = add i64 %195, -8
  %201 = lshr i64 %200, 3
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 7
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %220, label %205

205:                                              ; preds = %199, %205
  %206 = phi double** [ %213, %205 ], [ %191, %199 ]
  %207 = phi i64 [ %214, %205 ], [ %192, %199 ]
  %208 = phi double** [ %215, %205 ], [ %159, %199 ]
  %209 = phi i64 [ %216, %205 ], [ %203, %199 ]
  %210 = bitcast double** %208 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = inttoptr i64 %207 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds double*, double** %206, i64 1
  %214 = ptrtoint double** %213 to i64
  %215 = getelementptr inbounds double*, double** %208, i64 1
  %216 = add i64 %209, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %205, !llvm.loop !70

218:                                              ; preds = %205
  %219 = ptrtoint double** %213 to i64
  br label %220

220:                                              ; preds = %199, %218
  %221 = phi double** [ %191, %199 ], [ %213, %218 ]
  %222 = phi i64 [ %192, %199 ], [ %219, %218 ]
  %223 = phi double** [ %159, %199 ], [ %215, %218 ]
  %224 = icmp ult i64 %200, 56
  br i1 %224, label %271, label %225

225:                                              ; preds = %220, %225
  %226 = phi double** [ %267, %225 ], [ %221, %220 ]
  %227 = phi i64 [ %268, %225 ], [ %222, %220 ]
  %228 = phi double** [ %269, %225 ], [ %223, %220 ]
  %229 = bitcast double** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = inttoptr i64 %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds double*, double** %226, i64 1
  %233 = getelementptr inbounds double*, double** %228, i64 1
  %234 = bitcast double** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast double** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = getelementptr inbounds double*, double** %226, i64 2
  %238 = getelementptr inbounds double*, double** %228, i64 2
  %239 = bitcast double** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast double** %237 to i64*
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds double*, double** %226, i64 3
  %243 = getelementptr inbounds double*, double** %228, i64 3
  %244 = bitcast double** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast double** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = getelementptr inbounds double*, double** %226, i64 4
  %248 = getelementptr inbounds double*, double** %228, i64 4
  %249 = bitcast double** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast double** %247 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds double*, double** %226, i64 5
  %253 = getelementptr inbounds double*, double** %228, i64 5
  %254 = bitcast double** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = bitcast double** %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds double*, double** %226, i64 6
  %258 = getelementptr inbounds double*, double** %228, i64 6
  %259 = bitcast double** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast double** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds double*, double** %226, i64 7
  %263 = getelementptr inbounds double*, double** %228, i64 7
  %264 = bitcast double** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast double** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds double*, double** %226, i64 8
  %268 = ptrtoint double** %267 to i64
  %269 = getelementptr inbounds double*, double** %228, i64 8
  %270 = icmp eq double** %197, %267
  br i1 %270, label %271, label %225

271:                                              ; preds = %225, %220
  %272 = ptrtoint double** %197 to i64
  br label %273

273:                                              ; preds = %271, %185
  %274 = phi i64 [ %272, %271 ], [ %192, %185 ]
  %275 = inttoptr i64 %274 to double**
  %276 = icmp eq i64 %148, 0
  %277 = inttoptr i64 %274 to i64*
  br i1 %276, label %280, label %278

278:                                              ; preds = %273
  %279 = inttoptr i64 %148 to i8*
  tail call void @_ZdlPv(i8* %279) #9
  br label %280

280:                                              ; preds = %146, %174, %273, %278
  %281 = phi i64 [ %176, %174 ], [ %192, %273 ], [ %192, %278 ], [ %151, %146 ]
  %282 = phi double** [ %175, %174 ], [ %275, %273 ], [ %275, %278 ], [ %154, %146 ]
  %283 = phi i64 [ %149, %174 ], [ %194, %273 ], [ %194, %278 ], [ %149, %146 ]
  %284 = phi i64 [ %148, %174 ], [ %190, %273 ], [ %190, %278 ], [ %148, %146 ]
  %285 = phi i64* [ %177, %174 ], [ %277, %273 ], [ %277, %278 ], [ %157, %146 ]
  store i64 %153, i64* %285, align 8
  %286 = getelementptr inbounds double*, double** %282, i64 1
  %287 = ptrtoint double** %286 to i64
  %288 = add i64 %147, -1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %142, label %146

290:                                              ; preds = %142, %424
  %291 = phi double** [ %435, %424 ], [ %145, %142 ]
  %292 = phi i64 [ %436, %424 ], [ %37, %142 ]
  %293 = phi i64 [ %428, %424 ], [ %284, %142 ]
  %294 = phi i64 [ %427, %424 ], [ %283, %142 ]
  %295 = phi i64 [ %433, %424 ], [ %143, %142 ]
  %296 = phi i64 [ %425, %424 ], [ %281, %142 ]
  %297 = getelementptr inbounds double*, double** %291, i64 -1
  %298 = inttoptr i64 %295 to double**
  %299 = inttoptr i64 %294 to double**
  %300 = icmp eq double** %298, %299
  %301 = inttoptr i64 %295 to i64*
  br i1 %300, label %302, label %424

302:                                              ; preds = %290
  %303 = inttoptr i64 %296 to double**
  %304 = inttoptr i64 %293 to double**
  %305 = icmp ugt double** %303, %304
  br i1 %305, label %306, label %322

306:                                              ; preds = %302
  %307 = sub i64 %296, %293
  %308 = ashr exact i64 %307, 3
  %309 = add nsw i64 %308, 1
  %310 = sdiv i64 %309, -2
  %311 = getelementptr inbounds double*, double** %303, i64 %310
  %312 = sub i64 %295, %296
  %313 = ashr exact i64 %312, 3
  %314 = icmp eq i64 %312, 0
  br i1 %314, label %318, label %315

315:                                              ; preds = %306
  %316 = bitcast double** %311 to i8*
  %317 = inttoptr i64 %296 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %316, i8* align 8 %317, i64 %312, i1 false) #10
  br label %318

318:                                              ; preds = %315, %306
  %319 = getelementptr inbounds double*, double** %311, i64 %313
  %320 = ptrtoint double** %311 to i64
  %321 = bitcast double** %319 to i64*
  br label %424

322:                                              ; preds = %302
  %323 = sub i64 %294, %293
  %324 = ashr exact i64 %323, 2
  %325 = icmp eq i64 %323, 0
  %326 = select i1 %325, i64 1, i64 %324
  %327 = icmp ugt i64 %326, 2305843009213693951
  br i1 %327, label %328, label %329

328:                                              ; preds = %322
  tail call void @abort() #11
  unreachable

329:                                              ; preds = %322
  %330 = lshr i64 %326, 2
  %331 = shl i64 %326, 3
  %332 = tail call i8* @_Znwm(i64 %331) #9
  %333 = bitcast i8* %332 to double**
  %334 = ptrtoint i8* %332 to i64
  %335 = getelementptr inbounds double*, double** %333, i64 %330
  %336 = ptrtoint double** %335 to i64
  %337 = getelementptr inbounds double*, double** %333, i64 %326
  %338 = ptrtoint double** %337 to i64
  %339 = sub i64 %295, %296
  %340 = ashr exact i64 %339, 3
  %341 = getelementptr inbounds double*, double** %335, i64 %340
  %342 = icmp eq i64 %339, 0
  br i1 %342, label %417, label %343

343:                                              ; preds = %329
  %344 = add i64 %339, -8
  %345 = lshr i64 %344, 3
  %346 = add nuw nsw i64 %345, 1
  %347 = and i64 %346, 7
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %364, label %349

349:                                              ; preds = %343, %349
  %350 = phi double** [ %357, %349 ], [ %335, %343 ]
  %351 = phi i64 [ %358, %349 ], [ %336, %343 ]
  %352 = phi double** [ %359, %349 ], [ %303, %343 ]
  %353 = phi i64 [ %360, %349 ], [ %347, %343 ]
  %354 = bitcast double** %352 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = inttoptr i64 %351 to i64*
  store i64 %355, i64* %356, align 8
  %357 = getelementptr inbounds double*, double** %350, i64 1
  %358 = ptrtoint double** %357 to i64
  %359 = getelementptr inbounds double*, double** %352, i64 1
  %360 = add i64 %353, -1
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %349, !llvm.loop !71

362:                                              ; preds = %349
  %363 = ptrtoint double** %357 to i64
  br label %364

364:                                              ; preds = %343, %362
  %365 = phi double** [ %335, %343 ], [ %357, %362 ]
  %366 = phi i64 [ %336, %343 ], [ %363, %362 ]
  %367 = phi double** [ %303, %343 ], [ %359, %362 ]
  %368 = icmp ult i64 %344, 56
  br i1 %368, label %415, label %369

369:                                              ; preds = %364, %369
  %370 = phi double** [ %411, %369 ], [ %365, %364 ]
  %371 = phi i64 [ %412, %369 ], [ %366, %364 ]
  %372 = phi double** [ %413, %369 ], [ %367, %364 ]
  %373 = bitcast double** %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = inttoptr i64 %371 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds double*, double** %370, i64 1
  %377 = getelementptr inbounds double*, double** %372, i64 1
  %378 = bitcast double** %377 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = bitcast double** %376 to i64*
  store i64 %379, i64* %380, align 8
  %381 = getelementptr inbounds double*, double** %370, i64 2
  %382 = getelementptr inbounds double*, double** %372, i64 2
  %383 = bitcast double** %382 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = bitcast double** %381 to i64*
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds double*, double** %370, i64 3
  %387 = getelementptr inbounds double*, double** %372, i64 3
  %388 = bitcast double** %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast double** %386 to i64*
  store i64 %389, i64* %390, align 8
  %391 = getelementptr inbounds double*, double** %370, i64 4
  %392 = getelementptr inbounds double*, double** %372, i64 4
  %393 = bitcast double** %392 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast double** %391 to i64*
  store i64 %394, i64* %395, align 8
  %396 = getelementptr inbounds double*, double** %370, i64 5
  %397 = getelementptr inbounds double*, double** %372, i64 5
  %398 = bitcast double** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = bitcast double** %396 to i64*
  store i64 %399, i64* %400, align 8
  %401 = getelementptr inbounds double*, double** %370, i64 6
  %402 = getelementptr inbounds double*, double** %372, i64 6
  %403 = bitcast double** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast double** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds double*, double** %370, i64 7
  %407 = getelementptr inbounds double*, double** %372, i64 7
  %408 = bitcast double** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast double** %406 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds double*, double** %370, i64 8
  %412 = ptrtoint double** %411 to i64
  %413 = getelementptr inbounds double*, double** %372, i64 8
  %414 = icmp eq double** %341, %411
  br i1 %414, label %415, label %369

415:                                              ; preds = %369, %364
  %416 = ptrtoint double** %341 to i64
  br label %417

417:                                              ; preds = %415, %329
  %418 = phi i64 [ %416, %415 ], [ %336, %329 ]
  %419 = inttoptr i64 %418 to double**
  %420 = icmp eq i64 %293, 0
  %421 = inttoptr i64 %418 to i64*
  br i1 %420, label %424, label %422

422:                                              ; preds = %417
  %423 = inttoptr i64 %293 to i8*
  tail call void @_ZdlPv(i8* %423) #9
  br label %424

424:                                              ; preds = %290, %318, %417, %422
  %425 = phi i64 [ %320, %318 ], [ %336, %417 ], [ %336, %422 ], [ %296, %290 ]
  %426 = phi double** [ %319, %318 ], [ %419, %417 ], [ %419, %422 ], [ %298, %290 ]
  %427 = phi i64 [ %294, %318 ], [ %338, %417 ], [ %338, %422 ], [ %294, %290 ]
  %428 = phi i64 [ %293, %318 ], [ %334, %417 ], [ %334, %422 ], [ %293, %290 ]
  %429 = phi i64* [ %321, %318 ], [ %421, %417 ], [ %421, %422 ], [ %301, %290 ]
  %430 = bitcast double** %297 to i64*
  %431 = load i64, i64* %430, align 8
  store i64 %431, i64* %429, align 8
  %432 = getelementptr inbounds double*, double** %426, i64 1
  %433 = ptrtoint double** %432 to i64
  %434 = load double**, double*** %8, align 8
  %435 = getelementptr double*, double** %434, i64 -1
  store double** %435, double*** %8, align 8
  %436 = add i64 %292, -1
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %438, label %290

438:                                              ; preds = %424
  %439 = ptrtoint double** %432 to i64
  br label %440

440:                                              ; preds = %142, %438
  %441 = phi double** [ %435, %438 ], [ %145, %142 ]
  %442 = phi i64 [ %425, %438 ], [ %281, %142 ]
  %443 = phi i64 [ %439, %438 ], [ %143, %142 ]
  %444 = phi i64 [ %427, %438 ], [ %283, %142 ]
  %445 = phi i64 [ %428, %438 ], [ %284, %142 ]
  %446 = load double**, double*** %10, align 8
  %447 = icmp eq double** %446, %441
  br i1 %447, label %450, label %462

448:                                              ; preds = %594
  %449 = ptrtoint double** %602 to i64
  br label %450

450:                                              ; preds = %448, %440
  %451 = phi i64 [ %442, %440 ], [ %595, %448 ]
  %452 = phi i64 [ %443, %440 ], [ %449, %448 ]
  %453 = phi i64 [ %444, %440 ], [ %597, %448 ]
  %454 = phi i64 [ %445, %440 ], [ %598, %448 ]
  %455 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %456 = load double**, double*** %455, align 8
  store i64 %454, i64* %64, align 8
  store i64 %451, i64* %22, align 8
  store i64 %452, i64* %20, align 8
  store i64 %453, i64* %62, align 8
  %457 = load i64, i64* %29, align 8
  %458 = add i64 %124, %457
  store i64 %458, i64* %29, align 8
  %459 = icmp eq double** %456, null
  br i1 %459, label %607, label %460

460:                                              ; preds = %450
  %461 = bitcast double** %456 to i8*
  tail call void @_ZdlPv(i8* %461) #9
  br label %607

462:                                              ; preds = %440, %594
  %463 = phi double** [ %604, %594 ], [ %446, %440 ]
  %464 = phi i64 [ %598, %594 ], [ %445, %440 ]
  %465 = phi i64 [ %597, %594 ], [ %444, %440 ]
  %466 = phi i64 [ %603, %594 ], [ %443, %440 ]
  %467 = phi i64 [ %595, %594 ], [ %442, %440 ]
  %468 = inttoptr i64 %466 to double**
  %469 = inttoptr i64 %465 to double**
  %470 = icmp eq double** %468, %469
  %471 = inttoptr i64 %466 to i64*
  br i1 %470, label %472, label %594

472:                                              ; preds = %462
  %473 = inttoptr i64 %467 to double**
  %474 = inttoptr i64 %464 to double**
  %475 = icmp ugt double** %473, %474
  br i1 %475, label %476, label %492

476:                                              ; preds = %472
  %477 = sub i64 %467, %464
  %478 = ashr exact i64 %477, 3
  %479 = add nsw i64 %478, 1
  %480 = sdiv i64 %479, -2
  %481 = getelementptr inbounds double*, double** %473, i64 %480
  %482 = sub i64 %466, %467
  %483 = ashr exact i64 %482, 3
  %484 = icmp eq i64 %482, 0
  br i1 %484, label %488, label %485

485:                                              ; preds = %476
  %486 = bitcast double** %481 to i8*
  %487 = inttoptr i64 %467 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %486, i8* align 8 %487, i64 %482, i1 false) #10
  br label %488

488:                                              ; preds = %485, %476
  %489 = getelementptr inbounds double*, double** %481, i64 %483
  %490 = ptrtoint double** %481 to i64
  %491 = bitcast double** %489 to i64*
  br label %594

492:                                              ; preds = %472
  %493 = sub i64 %465, %464
  %494 = ashr exact i64 %493, 2
  %495 = icmp eq i64 %493, 0
  %496 = select i1 %495, i64 1, i64 %494
  %497 = icmp ugt i64 %496, 2305843009213693951
  br i1 %497, label %498, label %499

498:                                              ; preds = %492
  tail call void @abort() #11
  unreachable

499:                                              ; preds = %492
  %500 = lshr i64 %496, 2
  %501 = shl i64 %496, 3
  %502 = tail call i8* @_Znwm(i64 %501) #9
  %503 = bitcast i8* %502 to double**
  %504 = ptrtoint i8* %502 to i64
  %505 = getelementptr inbounds double*, double** %503, i64 %500
  %506 = ptrtoint double** %505 to i64
  %507 = getelementptr inbounds double*, double** %503, i64 %496
  %508 = ptrtoint double** %507 to i64
  %509 = sub i64 %466, %467
  %510 = ashr exact i64 %509, 3
  %511 = getelementptr inbounds double*, double** %505, i64 %510
  %512 = icmp eq i64 %509, 0
  br i1 %512, label %587, label %513

513:                                              ; preds = %499
  %514 = add i64 %509, -8
  %515 = lshr i64 %514, 3
  %516 = add nuw nsw i64 %515, 1
  %517 = and i64 %516, 7
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %534, label %519

519:                                              ; preds = %513, %519
  %520 = phi double** [ %527, %519 ], [ %505, %513 ]
  %521 = phi i64 [ %528, %519 ], [ %506, %513 ]
  %522 = phi double** [ %529, %519 ], [ %473, %513 ]
  %523 = phi i64 [ %530, %519 ], [ %517, %513 ]
  %524 = bitcast double** %522 to i64*
  %525 = load i64, i64* %524, align 8
  %526 = inttoptr i64 %521 to i64*
  store i64 %525, i64* %526, align 8
  %527 = getelementptr inbounds double*, double** %520, i64 1
  %528 = ptrtoint double** %527 to i64
  %529 = getelementptr inbounds double*, double** %522, i64 1
  %530 = add i64 %523, -1
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %532, label %519, !llvm.loop !72

532:                                              ; preds = %519
  %533 = ptrtoint double** %527 to i64
  br label %534

534:                                              ; preds = %513, %532
  %535 = phi double** [ %505, %513 ], [ %527, %532 ]
  %536 = phi i64 [ %506, %513 ], [ %533, %532 ]
  %537 = phi double** [ %473, %513 ], [ %529, %532 ]
  %538 = icmp ult i64 %514, 56
  br i1 %538, label %585, label %539

539:                                              ; preds = %534, %539
  %540 = phi double** [ %581, %539 ], [ %535, %534 ]
  %541 = phi i64 [ %582, %539 ], [ %536, %534 ]
  %542 = phi double** [ %583, %539 ], [ %537, %534 ]
  %543 = bitcast double** %542 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = inttoptr i64 %541 to i64*
  store i64 %544, i64* %545, align 8
  %546 = getelementptr inbounds double*, double** %540, i64 1
  %547 = getelementptr inbounds double*, double** %542, i64 1
  %548 = bitcast double** %547 to i64*
  %549 = load i64, i64* %548, align 8
  %550 = bitcast double** %546 to i64*
  store i64 %549, i64* %550, align 8
  %551 = getelementptr inbounds double*, double** %540, i64 2
  %552 = getelementptr inbounds double*, double** %542, i64 2
  %553 = bitcast double** %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = bitcast double** %551 to i64*
  store i64 %554, i64* %555, align 8
  %556 = getelementptr inbounds double*, double** %540, i64 3
  %557 = getelementptr inbounds double*, double** %542, i64 3
  %558 = bitcast double** %557 to i64*
  %559 = load i64, i64* %558, align 8
  %560 = bitcast double** %556 to i64*
  store i64 %559, i64* %560, align 8
  %561 = getelementptr inbounds double*, double** %540, i64 4
  %562 = getelementptr inbounds double*, double** %542, i64 4
  %563 = bitcast double** %562 to i64*
  %564 = load i64, i64* %563, align 8
  %565 = bitcast double** %561 to i64*
  store i64 %564, i64* %565, align 8
  %566 = getelementptr inbounds double*, double** %540, i64 5
  %567 = getelementptr inbounds double*, double** %542, i64 5
  %568 = bitcast double** %567 to i64*
  %569 = load i64, i64* %568, align 8
  %570 = bitcast double** %566 to i64*
  store i64 %569, i64* %570, align 8
  %571 = getelementptr inbounds double*, double** %540, i64 6
  %572 = getelementptr inbounds double*, double** %542, i64 6
  %573 = bitcast double** %572 to i64*
  %574 = load i64, i64* %573, align 8
  %575 = bitcast double** %571 to i64*
  store i64 %574, i64* %575, align 8
  %576 = getelementptr inbounds double*, double** %540, i64 7
  %577 = getelementptr inbounds double*, double** %542, i64 7
  %578 = bitcast double** %577 to i64*
  %579 = load i64, i64* %578, align 8
  %580 = bitcast double** %576 to i64*
  store i64 %579, i64* %580, align 8
  %581 = getelementptr inbounds double*, double** %540, i64 8
  %582 = ptrtoint double** %581 to i64
  %583 = getelementptr inbounds double*, double** %542, i64 8
  %584 = icmp eq double** %511, %581
  br i1 %584, label %585, label %539

585:                                              ; preds = %539, %534
  %586 = ptrtoint double** %511 to i64
  br label %587

587:                                              ; preds = %585, %499
  %588 = phi i64 [ %586, %585 ], [ %506, %499 ]
  %589 = inttoptr i64 %588 to double**
  %590 = icmp eq i64 %464, 0
  %591 = inttoptr i64 %588 to i64*
  br i1 %590, label %594, label %592

592:                                              ; preds = %587
  %593 = inttoptr i64 %464 to i8*
  tail call void @_ZdlPv(i8* %593) #9
  br label %594

594:                                              ; preds = %462, %488, %587, %592
  %595 = phi i64 [ %490, %488 ], [ %506, %587 ], [ %506, %592 ], [ %467, %462 ]
  %596 = phi double** [ %489, %488 ], [ %589, %587 ], [ %589, %592 ], [ %468, %462 ]
  %597 = phi i64 [ %465, %488 ], [ %508, %587 ], [ %508, %592 ], [ %465, %462 ]
  %598 = phi i64 [ %464, %488 ], [ %504, %587 ], [ %504, %592 ], [ %464, %462 ]
  %599 = phi i64* [ %491, %488 ], [ %591, %587 ], [ %591, %592 ], [ %471, %462 ]
  %600 = bitcast double** %463 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %599, align 8
  %602 = getelementptr inbounds double*, double** %596, i64 1
  %603 = ptrtoint double** %602 to i64
  %604 = getelementptr inbounds double*, double** %463, i64 1
  %605 = load double**, double*** %8, align 8
  %606 = icmp eq double** %604, %605
  br i1 %606, label %448, label %462

607:                                              ; preds = %114, %52, %44, %105, %40, %460, %450
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double**, double* } @_ZNSt3__14moveIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double**, double*, double**, double*, double**, double*) local_unnamed_addr #0 comdat {
  %7 = ptrtoint double* %1 to i64
  %8 = icmp eq double* %3, %1
  br i1 %8, label %132, label %9

9:                                                ; preds = %6
  %10 = ptrtoint double* %3 to i64
  %11 = ptrtoint double** %2 to i64
  %12 = ptrtoint double** %0 to i64
  %13 = sub i64 %11, %12
  %14 = shl i64 %13, 6
  %15 = bitcast double** %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %10, %16
  %18 = ashr exact i64 %17, 3
  %19 = add nsw i64 %18, %14
  %20 = bitcast double** %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %7, %21
  %23 = ashr exact i64 %22, 3
  %24 = sub i64 %19, %23
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %132

26:                                               ; preds = %9, %126
  %27 = phi double* [ %100, %126 ], [ %5, %9 ]
  %28 = phi double** [ %99, %126 ], [ %4, %9 ]
  %29 = phi i64 [ %101, %126 ], [ %24, %9 ]
  %30 = phi i64 [ %128, %126 ], [ %7, %9 ]
  %31 = phi double** [ %127, %126 ], [ %0, %9 ]
  %32 = inttoptr i64 %30 to double*
  %33 = load double*, double** %31, align 8
  %34 = getelementptr inbounds double, double* %33, i64 512
  %35 = ptrtoint double* %34 to i64
  %36 = sub i64 %35, %30
  %37 = ashr exact i64 %36, 3
  %38 = icmp sgt i64 %37, %29
  %39 = getelementptr inbounds double, double* %32, i64 %29
  %40 = select i1 %38, double* %39, double* %34
  %41 = select i1 %38, i64 %29, i64 %37
  %42 = ptrtoint double* %27 to i64
  %43 = icmp eq double* %40, %32
  br i1 %43, label %97, label %44

44:                                               ; preds = %26
  %45 = ptrtoint double* %40 to i64
  br label %46

46:                                               ; preds = %93, %44
  %47 = phi double* [ %32, %44 ], [ %61, %93 ]
  %48 = phi double** [ %28, %44 ], [ %95, %93 ]
  %49 = phi i64 [ %42, %44 ], [ %94, %93 ]
  %50 = load double*, double** %48, align 8
  %51 = getelementptr inbounds double, double* %50, i64 512
  %52 = ptrtoint double* %51 to i64
  %53 = sub i64 %52, %49
  %54 = ashr exact i64 %53, 3
  %55 = ptrtoint double* %47 to i64
  %56 = sub i64 %45, %55
  %57 = ashr exact i64 %56, 3
  %58 = icmp sgt i64 %57, %54
  %59 = getelementptr inbounds double, double* %47, i64 %54
  %60 = select i1 %58, i64 %54, i64 %57
  %61 = select i1 %58, double* %59, double* %40
  %62 = ptrtoint double* %61 to i64
  %63 = sub i64 %62, %55
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %46
  %66 = inttoptr i64 %49 to i8*
  %67 = bitcast double* %47 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 %63, i1 false) #10
  br label %68

68:                                               ; preds = %65, %46
  %69 = icmp eq i64 %60, 0
  br i1 %69, label %93, label %70

70:                                               ; preds = %68
  %71 = bitcast double** %48 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %49, %72
  %74 = ashr exact i64 %73, 3
  %75 = add nsw i64 %74, %60
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %77, label %84

77:                                               ; preds = %70
  %78 = lshr i64 %75, 9
  %79 = getelementptr inbounds double*, double** %48, i64 %78
  %80 = load double*, double** %79, align 8
  %81 = and i64 %75, 511
  %82 = getelementptr inbounds double, double* %80, i64 %81
  %83 = ptrtoint double* %82 to i64
  br label %93

84:                                               ; preds = %70
  %85 = sub nsw i64 511, %75
  %86 = sdiv i64 %85, -512
  %87 = getelementptr inbounds double*, double** %48, i64 %86
  %88 = load double*, double** %87, align 8
  %89 = srem i64 %85, 512
  %90 = sub nuw nsw i64 511, %89
  %91 = getelementptr inbounds double, double* %88, i64 %90
  %92 = ptrtoint double* %91 to i64
  br label %93

93:                                               ; preds = %84, %77, %68
  %94 = phi i64 [ %49, %68 ], [ %83, %77 ], [ %92, %84 ]
  %95 = phi double** [ %48, %68 ], [ %79, %77 ], [ %87, %84 ]
  %96 = icmp eq double* %61, %40
  br i1 %96, label %97, label %46

97:                                               ; preds = %93, %26
  %98 = phi i64 [ %42, %26 ], [ %94, %93 ]
  %99 = phi double** [ %28, %26 ], [ %95, %93 ]
  %100 = inttoptr i64 %98 to double*
  %101 = sub nsw i64 %29, %41
  %102 = icmp eq i64 %41, 0
  br i1 %102, label %126, label %103

103:                                              ; preds = %97
  %104 = bitcast double** %31 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %30, %105
  %107 = ashr exact i64 %106, 3
  %108 = add nsw i64 %107, %41
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %117

110:                                              ; preds = %103
  %111 = lshr i64 %108, 9
  %112 = getelementptr inbounds double*, double** %31, i64 %111
  %113 = load double*, double** %112, align 8
  %114 = and i64 %108, 511
  %115 = getelementptr inbounds double, double* %113, i64 %114
  %116 = ptrtoint double* %115 to i64
  br label %126

117:                                              ; preds = %103
  %118 = sub nsw i64 511, %108
  %119 = sdiv i64 %118, -512
  %120 = getelementptr inbounds double*, double** %31, i64 %119
  %121 = load double*, double** %120, align 8
  %122 = srem i64 %118, 512
  %123 = sub nsw i64 511, %122
  %124 = getelementptr inbounds double, double* %121, i64 %123
  %125 = ptrtoint double* %124 to i64
  br label %126

126:                                              ; preds = %97, %110, %117
  %127 = phi double** [ %31, %97 ], [ %112, %110 ], [ %120, %117 ]
  %128 = phi i64 [ %30, %97 ], [ %116, %110 ], [ %125, %117 ]
  %129 = icmp sgt i64 %101, 0
  br i1 %129, label %26, label %130

130:                                              ; preds = %126
  %131 = inttoptr i64 %98 to double*
  br label %132

132:                                              ; preds = %130, %6, %9
  %133 = phi double** [ %4, %9 ], [ %4, %6 ], [ %99, %130 ]
  %134 = phi double* [ %5, %9 ], [ %5, %6 ], [ %131, %130 ]
  %135 = insertvalue { double**, double* } undef, double** %133, 0
  %136 = insertvalue { double**, double* } %135, double* %134, 1
  ret { double**, double* } %136
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEm(%"class.std::__1::deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca %"struct.std::__1::__split_buffer.70", align 16
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load double**, double*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load double**, double*** %9, align 8
  %11 = icmp eq double** %8, %10
  %12 = zext i1 %11 to i64
  %13 = add i64 %12, %1
  %14 = lshr i64 %13, 9
  %15 = and i64 %13, 511
  %16 = icmp ne i64 %15, 0
  %17 = zext i1 %16 to i64
  %18 = add nuw nsw i64 %14, %17
  %19 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = lshr i64 %20, 9
  %22 = icmp ult i64 %18, %21
  %23 = select i1 %22, i64 %18, i64 %21
  %24 = sub nsw i64 %18, %23
  %25 = icmp eq i64 %24, 0
  %26 = ptrtoint double** %8 to i64
  br i1 %25, label %27, label %186

27:                                               ; preds = %2
  %28 = shl nuw i64 %23, 9
  %29 = sub i64 %20, %28
  store i64 %29, i64* %19, align 8
  %30 = icmp eq i64 %23, 0
  br i1 %30, label %768, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %33 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %34 = bitcast double*** %32 to i64*
  %35 = bitcast %"class.std::__1::deque"* %0 to i64*
  %36 = bitcast double*** %9 to i64*
  %37 = bitcast double*** %7 to i64*
  %38 = bitcast double*** %7 to i64**
  br label %39

39:                                               ; preds = %184, %31
  %40 = phi double** [ %8, %31 ], [ %181, %184 ]
  %41 = phi double** [ %10, %31 ], [ %185, %184 ]
  %42 = phi i64 [ %23, %31 ], [ %182, %184 ]
  %43 = bitcast double** %41 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds double*, double** %41, i64 1
  store double** %45, double*** %9, align 8
  %46 = load double**, double*** %32, align 8
  %47 = icmp eq double** %40, %46
  %48 = ptrtoint double** %46 to i64
  %49 = bitcast double** %40 to i64*
  br i1 %47, label %50, label %178

50:                                               ; preds = %39
  %51 = load double**, double*** %33, align 8
  %52 = icmp ugt double** %45, %51
  %53 = ptrtoint double** %51 to i64
  br i1 %52, label %54, label %73

54:                                               ; preds = %50
  %55 = ptrtoint double** %45 to i64
  %56 = sub i64 %55, %53
  %57 = ashr exact i64 %56, 3
  %58 = add nsw i64 %57, 1
  %59 = sdiv i64 %58, -2
  %60 = getelementptr inbounds double*, double** %45, i64 %59
  %61 = sub i64 %48, %55
  %62 = ashr exact i64 %61, 3
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %54
  %65 = bitcast double** %60 to i8*
  %66 = bitcast double** %45 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %61, i1 false) #10
  %67 = load double**, double*** %9, align 8
  br label %68

68:                                               ; preds = %64, %54
  %69 = phi double** [ %45, %54 ], [ %67, %64 ]
  %70 = getelementptr inbounds double*, double** %60, i64 %62
  store double** %70, double*** %7, align 8
  %71 = getelementptr inbounds double*, double** %69, i64 %59
  store double** %71, double*** %9, align 8
  %72 = bitcast double** %70 to i64*
  br label %178

73:                                               ; preds = %50
  %74 = sub i64 %48, %53
  %75 = ashr exact i64 %74, 2
  %76 = icmp eq i64 %74, 0
  %77 = select i1 %76, i64 1, i64 %75
  %78 = icmp ugt i64 %77, 2305843009213693951
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  tail call void @abort() #11
  unreachable

80:                                               ; preds = %73
  %81 = lshr i64 %77, 2
  %82 = shl i64 %77, 3
  %83 = tail call i8* @_Znwm(i64 %82) #9
  %84 = bitcast i8* %83 to double**
  %85 = ptrtoint i8* %83 to i64
  %86 = getelementptr inbounds double*, double** %84, i64 %81
  %87 = ptrtoint double** %86 to i64
  %88 = getelementptr inbounds double*, double** %84, i64 %77
  %89 = ptrtoint double** %88 to i64
  %90 = ptrtoint double** %45 to i64
  %91 = sub i64 %48, %90
  %92 = ashr exact i64 %91, 3
  %93 = getelementptr inbounds double*, double** %86, i64 %92
  %94 = icmp eq i64 %91, 0
  br i1 %94, label %170, label %95

95:                                               ; preds = %80
  %96 = add i64 %91, -8
  %97 = lshr i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 7
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %95, %101
  %102 = phi double** [ %109, %101 ], [ %86, %95 ]
  %103 = phi i64 [ %110, %101 ], [ %87, %95 ]
  %104 = phi double** [ %111, %101 ], [ %45, %95 ]
  %105 = phi i64 [ %112, %101 ], [ %99, %95 ]
  %106 = bitcast double** %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = inttoptr i64 %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds double*, double** %102, i64 1
  %110 = ptrtoint double** %109 to i64
  %111 = getelementptr inbounds double*, double** %104, i64 1
  %112 = add i64 %105, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %101, !llvm.loop !73

114:                                              ; preds = %101
  %115 = ptrtoint double** %109 to i64
  br label %116

116:                                              ; preds = %95, %114
  %117 = phi double** [ %86, %95 ], [ %109, %114 ]
  %118 = phi i64 [ %87, %95 ], [ %115, %114 ]
  %119 = phi double** [ %45, %95 ], [ %111, %114 ]
  %120 = icmp ult i64 %96, 56
  br i1 %120, label %167, label %121

121:                                              ; preds = %116, %121
  %122 = phi double** [ %163, %121 ], [ %117, %116 ]
  %123 = phi i64 [ %164, %121 ], [ %118, %116 ]
  %124 = phi double** [ %165, %121 ], [ %119, %116 ]
  %125 = bitcast double** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = inttoptr i64 %123 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds double*, double** %122, i64 1
  %129 = getelementptr inbounds double*, double** %124, i64 1
  %130 = bitcast double** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast double** %128 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds double*, double** %122, i64 2
  %134 = getelementptr inbounds double*, double** %124, i64 2
  %135 = bitcast double** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast double** %133 to i64*
  store i64 %136, i64* %137, align 8
  %138 = getelementptr inbounds double*, double** %122, i64 3
  %139 = getelementptr inbounds double*, double** %124, i64 3
  %140 = bitcast double** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast double** %138 to i64*
  store i64 %141, i64* %142, align 8
  %143 = getelementptr inbounds double*, double** %122, i64 4
  %144 = getelementptr inbounds double*, double** %124, i64 4
  %145 = bitcast double** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast double** %143 to i64*
  store i64 %146, i64* %147, align 8
  %148 = getelementptr inbounds double*, double** %122, i64 5
  %149 = getelementptr inbounds double*, double** %124, i64 5
  %150 = bitcast double** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %148 to i64*
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds double*, double** %122, i64 6
  %154 = getelementptr inbounds double*, double** %124, i64 6
  %155 = bitcast double** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast double** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds double*, double** %122, i64 7
  %159 = getelementptr inbounds double*, double** %124, i64 7
  %160 = bitcast double** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast double** %158 to i64*
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds double*, double** %122, i64 8
  %164 = ptrtoint double** %163 to i64
  %165 = getelementptr inbounds double*, double** %124, i64 8
  %166 = icmp eq double** %93, %163
  br i1 %166, label %167, label %121

167:                                              ; preds = %121, %116
  %168 = ptrtoint double** %93 to i64
  %169 = load double**, double*** %33, align 8
  br label %170

170:                                              ; preds = %167, %80
  %171 = phi double** [ %169, %167 ], [ %51, %80 ]
  %172 = phi i64 [ %168, %167 ], [ %87, %80 ]
  store i64 %85, i64* %35, align 8
  store i64 %87, i64* %36, align 8
  store i64 %172, i64* %37, align 8
  store i64 %89, i64* %34, align 8
  %173 = icmp eq double** %171, null
  %174 = inttoptr i64 %172 to i64*
  br i1 %173, label %178, label %175

175:                                              ; preds = %170
  %176 = bitcast double** %171 to i8*
  tail call void @_ZdlPv(i8* %176) #9
  %177 = load i64*, i64** %38, align 8
  br label %178

178:                                              ; preds = %39, %68, %170, %175
  %179 = phi i64* [ %177, %175 ], [ %174, %170 ], [ %72, %68 ], [ %49, %39 ]
  store i64 %44, i64* %179, align 8
  %180 = load double**, double*** %7, align 8
  %181 = getelementptr inbounds double*, double** %180, i64 1
  store double** %181, double*** %7, align 8
  %182 = add i64 %42, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %768, label %184

184:                                              ; preds = %178
  %185 = load double**, double*** %9, align 8
  br label %39

186:                                              ; preds = %2
  %187 = ptrtoint double** %10 to i64
  %188 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %189 = bitcast double*** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.std::__1::deque"* %0 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = sub i64 %190, %192
  %194 = ashr exact i64 %193, 3
  %195 = bitcast double*** %7 to i64*
  %196 = bitcast double*** %9 to i64*
  %197 = sub i64 %26, %187
  %198 = ashr exact i64 %197, 3
  %199 = sub nsw i64 %194, %198
  %200 = icmp ugt i64 %24, %199
  br i1 %200, label %391, label %201

201:                                              ; preds = %186
  %202 = bitcast double** %3 to i8*
  %203 = bitcast double** %3 to i8**
  %204 = icmp eq i64 %190, %26
  br i1 %204, label %214, label %205

205:                                              ; preds = %201, %210
  %206 = phi i64 [ %208, %210 ], [ %24, %201 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #10
  %207 = call i8* @_Znwm(i64 4096) #9
  store i8* %207, i8** %203, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %6, double** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #10
  %208 = add i64 %206, -1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %217, label %210

210:                                              ; preds = %205
  %211 = load i64, i64* %189, align 8
  %212 = load i64, i64* %195, align 8
  %213 = icmp eq i64 %211, %212
  br i1 %213, label %214, label %205

214:                                              ; preds = %210, %201
  %215 = phi i64 [ %24, %201 ], [ %208, %210 ]
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %219

217:                                              ; preds = %205, %214
  %218 = load i64, i64* %19, align 8
  br label %236

219:                                              ; preds = %214
  %220 = bitcast double** %4 to i8*
  %221 = bitcast double** %4 to i8**
  br label %222

222:                                              ; preds = %219, %222
  %223 = phi i64 [ %215, %219 ], [ %225, %222 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #10
  %224 = call i8* @_Znwm(i64 4096) #9
  store i8* %224, i8** %221, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %6, double** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #10
  %225 = add i64 %223, -1
  %226 = load i64, i64* %195, align 8
  %227 = load i64, i64* %196, align 8
  %228 = sub i64 %226, %227
  %229 = icmp eq i64 %228, 8
  %230 = select i1 %229, i64 511, i64 512
  %231 = load i64, i64* %19, align 8
  %232 = add i64 %230, %231
  store i64 %232, i64* %19, align 8
  %233 = icmp eq i64 %225, 0
  br i1 %233, label %234, label %222

234:                                              ; preds = %222
  %235 = add i64 %215, %23
  br label %236

236:                                              ; preds = %217, %234
  %237 = phi i64 [ %218, %217 ], [ %232, %234 ]
  %238 = phi i64 [ %23, %217 ], [ %235, %234 ]
  %239 = shl i64 %238, 9
  %240 = sub i64 %237, %239
  store i64 %240, i64* %19, align 8
  %241 = icmp eq i64 %238, 0
  br i1 %241, label %768, label %242

242:                                              ; preds = %236
  %243 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %244 = bitcast double*** %7 to i64**
  %245 = load double**, double*** %7, align 8
  br label %246

246:                                              ; preds = %242, %385
  %247 = phi double** [ %245, %242 ], [ %388, %385 ]
  %248 = phi i64 [ %238, %242 ], [ %389, %385 ]
  %249 = load double**, double*** %9, align 8
  %250 = bitcast double** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = getelementptr inbounds double*, double** %249, i64 1
  store double** %252, double*** %9, align 8
  %253 = load double**, double*** %188, align 8
  %254 = icmp eq double** %247, %253
  %255 = ptrtoint double** %253 to i64
  %256 = bitcast double** %247 to i64*
  br i1 %254, label %257, label %385

257:                                              ; preds = %246
  %258 = load double**, double*** %243, align 8
  %259 = icmp ugt double** %252, %258
  %260 = ptrtoint double** %258 to i64
  br i1 %259, label %261, label %280

261:                                              ; preds = %257
  %262 = ptrtoint double** %252 to i64
  %263 = sub i64 %262, %260
  %264 = ashr exact i64 %263, 3
  %265 = add nsw i64 %264, 1
  %266 = sdiv i64 %265, -2
  %267 = getelementptr inbounds double*, double** %252, i64 %266
  %268 = sub i64 %255, %262
  %269 = ashr exact i64 %268, 3
  %270 = icmp eq i64 %268, 0
  br i1 %270, label %275, label %271

271:                                              ; preds = %261
  %272 = bitcast double** %267 to i8*
  %273 = bitcast double** %252 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 %268, i1 false) #10
  %274 = load double**, double*** %9, align 8
  br label %275

275:                                              ; preds = %271, %261
  %276 = phi double** [ %252, %261 ], [ %274, %271 ]
  %277 = getelementptr inbounds double*, double** %267, i64 %269
  store double** %277, double*** %7, align 8
  %278 = getelementptr inbounds double*, double** %276, i64 %266
  store double** %278, double*** %9, align 8
  %279 = bitcast double** %277 to i64*
  br label %385

280:                                              ; preds = %257
  %281 = sub i64 %255, %260
  %282 = ashr exact i64 %281, 2
  %283 = icmp eq i64 %281, 0
  %284 = select i1 %283, i64 1, i64 %282
  %285 = icmp ugt i64 %284, 2305843009213693951
  br i1 %285, label %286, label %287

286:                                              ; preds = %280
  call void @abort() #11
  unreachable

287:                                              ; preds = %280
  %288 = lshr i64 %284, 2
  %289 = shl i64 %284, 3
  %290 = call i8* @_Znwm(i64 %289) #9
  %291 = bitcast i8* %290 to double**
  %292 = ptrtoint i8* %290 to i64
  %293 = getelementptr inbounds double*, double** %291, i64 %288
  %294 = ptrtoint double** %293 to i64
  %295 = getelementptr inbounds double*, double** %291, i64 %284
  %296 = ptrtoint double** %295 to i64
  %297 = ptrtoint double** %252 to i64
  %298 = sub i64 %255, %297
  %299 = ashr exact i64 %298, 3
  %300 = getelementptr inbounds double*, double** %293, i64 %299
  %301 = icmp eq i64 %298, 0
  br i1 %301, label %377, label %302

302:                                              ; preds = %287
  %303 = add i64 %298, -8
  %304 = lshr i64 %303, 3
  %305 = add nuw nsw i64 %304, 1
  %306 = and i64 %305, 7
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %323, label %308

308:                                              ; preds = %302, %308
  %309 = phi double** [ %316, %308 ], [ %293, %302 ]
  %310 = phi i64 [ %317, %308 ], [ %294, %302 ]
  %311 = phi double** [ %318, %308 ], [ %252, %302 ]
  %312 = phi i64 [ %319, %308 ], [ %306, %302 ]
  %313 = bitcast double** %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = inttoptr i64 %310 to i64*
  store i64 %314, i64* %315, align 8
  %316 = getelementptr inbounds double*, double** %309, i64 1
  %317 = ptrtoint double** %316 to i64
  %318 = getelementptr inbounds double*, double** %311, i64 1
  %319 = add i64 %312, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %308, !llvm.loop !74

321:                                              ; preds = %308
  %322 = ptrtoint double** %316 to i64
  br label %323

323:                                              ; preds = %302, %321
  %324 = phi double** [ %293, %302 ], [ %316, %321 ]
  %325 = phi i64 [ %294, %302 ], [ %322, %321 ]
  %326 = phi double** [ %252, %302 ], [ %318, %321 ]
  %327 = icmp ult i64 %303, 56
  br i1 %327, label %374, label %328

328:                                              ; preds = %323, %328
  %329 = phi double** [ %370, %328 ], [ %324, %323 ]
  %330 = phi i64 [ %371, %328 ], [ %325, %323 ]
  %331 = phi double** [ %372, %328 ], [ %326, %323 ]
  %332 = bitcast double** %331 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = inttoptr i64 %330 to i64*
  store i64 %333, i64* %334, align 8
  %335 = getelementptr inbounds double*, double** %329, i64 1
  %336 = getelementptr inbounds double*, double** %331, i64 1
  %337 = bitcast double** %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast double** %335 to i64*
  store i64 %338, i64* %339, align 8
  %340 = getelementptr inbounds double*, double** %329, i64 2
  %341 = getelementptr inbounds double*, double** %331, i64 2
  %342 = bitcast double** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = bitcast double** %340 to i64*
  store i64 %343, i64* %344, align 8
  %345 = getelementptr inbounds double*, double** %329, i64 3
  %346 = getelementptr inbounds double*, double** %331, i64 3
  %347 = bitcast double** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast double** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds double*, double** %329, i64 4
  %351 = getelementptr inbounds double*, double** %331, i64 4
  %352 = bitcast double** %351 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast double** %350 to i64*
  store i64 %353, i64* %354, align 8
  %355 = getelementptr inbounds double*, double** %329, i64 5
  %356 = getelementptr inbounds double*, double** %331, i64 5
  %357 = bitcast double** %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast double** %355 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds double*, double** %329, i64 6
  %361 = getelementptr inbounds double*, double** %331, i64 6
  %362 = bitcast double** %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast double** %360 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds double*, double** %329, i64 7
  %366 = getelementptr inbounds double*, double** %331, i64 7
  %367 = bitcast double** %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast double** %365 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds double*, double** %329, i64 8
  %371 = ptrtoint double** %370 to i64
  %372 = getelementptr inbounds double*, double** %331, i64 8
  %373 = icmp eq double** %300, %370
  br i1 %373, label %374, label %328

374:                                              ; preds = %328, %323
  %375 = ptrtoint double** %300 to i64
  %376 = load double**, double*** %243, align 8
  br label %377

377:                                              ; preds = %374, %287
  %378 = phi double** [ %376, %374 ], [ %258, %287 ]
  %379 = phi i64 [ %375, %374 ], [ %294, %287 ]
  store i64 %292, i64* %191, align 8
  store i64 %294, i64* %196, align 8
  store i64 %379, i64* %195, align 8
  store i64 %296, i64* %189, align 8
  %380 = icmp eq double** %378, null
  %381 = inttoptr i64 %379 to i64*
  br i1 %380, label %385, label %382

382:                                              ; preds = %377
  %383 = bitcast double** %378 to i8*
  call void @_ZdlPv(i8* %383) #9
  %384 = load i64*, i64** %244, align 8
  br label %385

385:                                              ; preds = %246, %275, %377, %382
  %386 = phi i64* [ %384, %382 ], [ %381, %377 ], [ %279, %275 ], [ %256, %246 ]
  store i64 %251, i64* %386, align 8
  %387 = load double**, double*** %7, align 8
  %388 = getelementptr inbounds double*, double** %387, i64 1
  store double** %388, double*** %7, align 8
  %389 = add i64 %248, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %768, label %246

391:                                              ; preds = %186
  %392 = shl nuw i64 %23, 9
  %393 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %393) #10
  %394 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %5, i64 0, i32 0
  %395 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %5, i64 0, i32 1
  %396 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %5, i64 0, i32 2
  %397 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %5, i64 0, i32 3, i32 0, i32 0
  %398 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %5, i64 0, i32 3, i32 1, i32 0
  %399 = ashr exact i64 %193, 2
  %400 = add nsw i64 %198, %24
  %401 = icmp ult i64 %399, %400
  %402 = select i1 %401, i64 %400, i64 %399
  %403 = sub nsw i64 %198, %23
  %404 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %405 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %405, i8 -86, i64 24, i1 false)
  store double** null, double*** %397, align 8
  %406 = bitcast %"class.std::__1::allocator.4"** %398 to %"class.std::__1::__compressed_pair.1"**
  store %"class.std::__1::__compressed_pair.1"* %404, %"class.std::__1::__compressed_pair.1"** %406, align 8
  %407 = icmp eq i64 %402, 0
  br i1 %407, label %415, label %408

408:                                              ; preds = %391
  %409 = icmp ugt i64 %402, 2305843009213693951
  br i1 %409, label %410, label %411

410:                                              ; preds = %408
  tail call void @abort() #11
  unreachable

411:                                              ; preds = %408
  %412 = shl i64 %402, 3
  %413 = tail call i8* @_Znwm(i64 %412) #9
  %414 = bitcast i8* %413 to double**
  br label %415

415:                                              ; preds = %411, %391
  %416 = phi double** [ %414, %411 ], [ null, %391 ]
  store double** %416, double*** %394, align 16
  %417 = getelementptr inbounds double*, double** %416, i64 %403
  store double** %417, double*** %396, align 16
  store double** %417, double*** %395, align 8
  %418 = getelementptr inbounds double*, double** %416, i64 %402
  store double** %418, double*** %397, align 8
  %419 = bitcast double*** %397 to i64*
  %420 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to i64*
  %421 = bitcast double*** %395 to i64*
  %422 = bitcast double*** %396 to i64*
  br label %434

423:                                              ; preds = %568
  %424 = icmp eq i64 %23, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %423
  %426 = load double**, double*** %9, align 8
  br label %719

427:                                              ; preds = %423
  %428 = bitcast double*** %9 to i64**
  %429 = bitcast double*** %397 to i64*
  %430 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to i64*
  %431 = bitcast double*** %395 to i64*
  %432 = bitcast double*** %396 to i64*
  %433 = load i64*, i64** %428, align 8
  br label %576

434:                                              ; preds = %574, %415
  %435 = phi double** [ %418, %415 ], [ %575, %574 ]
  %436 = phi double** [ %417, %415 ], [ %571, %574 ]
  %437 = phi i64 [ %24, %415 ], [ %572, %574 ]
  %438 = tail call i8* @_Znwm(i64 4096) #9
  %439 = ptrtoint i8* %438 to i64
  %440 = icmp eq double** %436, %435
  %441 = ptrtoint double** %435 to i64
  %442 = bitcast double** %436 to i64*
  br i1 %440, label %443, label %568

443:                                              ; preds = %434
  %444 = load double**, double*** %395, align 8
  %445 = load double**, double*** %394, align 16
  %446 = icmp ugt double** %444, %445
  %447 = ptrtoint double** %445 to i64
  br i1 %446, label %448, label %464

448:                                              ; preds = %443
  %449 = ptrtoint double** %444 to i64
  %450 = sub i64 %449, %447
  %451 = ashr exact i64 %450, 3
  %452 = add nsw i64 %451, 1
  %453 = sdiv i64 %452, -2
  %454 = getelementptr inbounds double*, double** %444, i64 %453
  %455 = sub i64 %441, %449
  %456 = ashr exact i64 %455, 3
  %457 = icmp eq i64 %455, 0
  br i1 %457, label %461, label %458

458:                                              ; preds = %448
  %459 = bitcast double** %454 to i8*
  %460 = bitcast double** %444 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %459, i8* align 8 %460, i64 %455, i1 false) #10
  br label %461

461:                                              ; preds = %458, %448
  %462 = getelementptr inbounds double*, double** %454, i64 %456
  store double** %462, double*** %396, align 16
  store double** %454, double*** %395, align 8
  %463 = bitcast double** %462 to i64*
  br label %568

464:                                              ; preds = %443
  %465 = sub i64 %441, %447
  %466 = ashr exact i64 %465, 2
  %467 = icmp eq i64 %465, 0
  %468 = select i1 %467, i64 1, i64 %466
  %469 = icmp ugt i64 %468, 2305843009213693951
  br i1 %469, label %470, label %471

470:                                              ; preds = %464
  tail call void @abort() #11
  unreachable

471:                                              ; preds = %464
  %472 = lshr i64 %468, 2
  %473 = shl i64 %468, 3
  %474 = tail call i8* @_Znwm(i64 %473) #9
  %475 = bitcast i8* %474 to double**
  %476 = ptrtoint i8* %474 to i64
  %477 = getelementptr inbounds double*, double** %475, i64 %472
  %478 = ptrtoint double** %477 to i64
  %479 = getelementptr inbounds double*, double** %475, i64 %468
  %480 = ptrtoint double** %479 to i64
  %481 = ptrtoint double** %444 to i64
  %482 = sub i64 %441, %481
  %483 = ashr exact i64 %482, 3
  %484 = getelementptr inbounds double*, double** %477, i64 %483
  %485 = icmp eq i64 %482, 0
  br i1 %485, label %561, label %486

486:                                              ; preds = %471
  %487 = add i64 %482, -8
  %488 = lshr i64 %487, 3
  %489 = add nuw nsw i64 %488, 1
  %490 = and i64 %489, 7
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %507, label %492

492:                                              ; preds = %486, %492
  %493 = phi double** [ %500, %492 ], [ %477, %486 ]
  %494 = phi i64 [ %501, %492 ], [ %478, %486 ]
  %495 = phi double** [ %502, %492 ], [ %444, %486 ]
  %496 = phi i64 [ %503, %492 ], [ %490, %486 ]
  %497 = bitcast double** %495 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = inttoptr i64 %494 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds double*, double** %493, i64 1
  %501 = ptrtoint double** %500 to i64
  %502 = getelementptr inbounds double*, double** %495, i64 1
  %503 = add i64 %496, -1
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %505, label %492, !llvm.loop !75

505:                                              ; preds = %492
  %506 = ptrtoint double** %500 to i64
  br label %507

507:                                              ; preds = %486, %505
  %508 = phi double** [ %477, %486 ], [ %500, %505 ]
  %509 = phi i64 [ %478, %486 ], [ %506, %505 ]
  %510 = phi double** [ %444, %486 ], [ %502, %505 ]
  %511 = icmp ult i64 %487, 56
  br i1 %511, label %558, label %512

512:                                              ; preds = %507, %512
  %513 = phi double** [ %554, %512 ], [ %508, %507 ]
  %514 = phi i64 [ %555, %512 ], [ %509, %507 ]
  %515 = phi double** [ %556, %512 ], [ %510, %507 ]
  %516 = bitcast double** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = inttoptr i64 %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds double*, double** %513, i64 1
  %520 = getelementptr inbounds double*, double** %515, i64 1
  %521 = bitcast double** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast double** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds double*, double** %513, i64 2
  %525 = getelementptr inbounds double*, double** %515, i64 2
  %526 = bitcast double** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast double** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = getelementptr inbounds double*, double** %513, i64 3
  %530 = getelementptr inbounds double*, double** %515, i64 3
  %531 = bitcast double** %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = bitcast double** %529 to i64*
  store i64 %532, i64* %533, align 8
  %534 = getelementptr inbounds double*, double** %513, i64 4
  %535 = getelementptr inbounds double*, double** %515, i64 4
  %536 = bitcast double** %535 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = bitcast double** %534 to i64*
  store i64 %537, i64* %538, align 8
  %539 = getelementptr inbounds double*, double** %513, i64 5
  %540 = getelementptr inbounds double*, double** %515, i64 5
  %541 = bitcast double** %540 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = bitcast double** %539 to i64*
  store i64 %542, i64* %543, align 8
  %544 = getelementptr inbounds double*, double** %513, i64 6
  %545 = getelementptr inbounds double*, double** %515, i64 6
  %546 = bitcast double** %545 to i64*
  %547 = load i64, i64* %546, align 8
  %548 = bitcast double** %544 to i64*
  store i64 %547, i64* %548, align 8
  %549 = getelementptr inbounds double*, double** %513, i64 7
  %550 = getelementptr inbounds double*, double** %515, i64 7
  %551 = bitcast double** %550 to i64*
  %552 = load i64, i64* %551, align 8
  %553 = bitcast double** %549 to i64*
  store i64 %552, i64* %553, align 8
  %554 = getelementptr inbounds double*, double** %513, i64 8
  %555 = ptrtoint double** %554 to i64
  %556 = getelementptr inbounds double*, double** %515, i64 8
  %557 = icmp eq double** %484, %554
  br i1 %557, label %558, label %512

558:                                              ; preds = %512, %507
  %559 = ptrtoint double** %484 to i64
  %560 = load double**, double*** %394, align 16
  br label %561

561:                                              ; preds = %558, %471
  %562 = phi double** [ %560, %558 ], [ %445, %471 ]
  %563 = phi i64 [ %559, %558 ], [ %478, %471 ]
  store i64 %476, i64* %420, align 16
  store i64 %478, i64* %421, align 8
  store i64 %563, i64* %422, align 16
  store i64 %480, i64* %419, align 8
  %564 = icmp eq double** %562, null
  %565 = inttoptr i64 %563 to i64*
  br i1 %564, label %568, label %566

566:                                              ; preds = %561
  %567 = bitcast double** %562 to i8*
  tail call void @_ZdlPv(i8* %567) #9
  br label %568

568:                                              ; preds = %434, %461, %561, %566
  %569 = phi i64* [ %565, %566 ], [ %565, %561 ], [ %463, %461 ], [ %442, %434 ]
  store i64 %439, i64* %569, align 8
  %570 = load double**, double*** %396, align 16
  %571 = getelementptr inbounds double*, double** %570, i64 1
  store double** %571, double*** %396, align 16
  %572 = add i64 %437, -1
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %423, label %574

574:                                              ; preds = %568
  %575 = load double**, double*** %397, align 8
  br label %434

576:                                              ; preds = %427, %709
  %577 = phi double** [ %571, %427 ], [ %713, %709 ]
  %578 = phi i64* [ %433, %427 ], [ %718, %709 ]
  %579 = phi i64 [ %23, %427 ], [ %716, %709 ]
  %580 = load double**, double*** %397, align 8
  %581 = icmp eq double** %577, %580
  %582 = ptrtoint double** %580 to i64
  %583 = bitcast double** %577 to i64*
  br i1 %581, label %584, label %709

584:                                              ; preds = %576
  %585 = load double**, double*** %395, align 8
  %586 = load double**, double*** %394, align 16
  %587 = icmp ugt double** %585, %586
  %588 = ptrtoint double** %586 to i64
  br i1 %587, label %589, label %605

589:                                              ; preds = %584
  %590 = ptrtoint double** %585 to i64
  %591 = sub i64 %590, %588
  %592 = ashr exact i64 %591, 3
  %593 = add nsw i64 %592, 1
  %594 = sdiv i64 %593, -2
  %595 = getelementptr inbounds double*, double** %585, i64 %594
  %596 = sub i64 %582, %590
  %597 = ashr exact i64 %596, 3
  %598 = icmp eq i64 %596, 0
  br i1 %598, label %602, label %599

599:                                              ; preds = %589
  %600 = bitcast double** %595 to i8*
  %601 = bitcast double** %585 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %600, i8* align 8 %601, i64 %596, i1 false) #10
  br label %602

602:                                              ; preds = %599, %589
  %603 = getelementptr inbounds double*, double** %595, i64 %597
  store double** %603, double*** %396, align 16
  store double** %595, double*** %395, align 8
  %604 = bitcast double** %603 to i64*
  br label %709

605:                                              ; preds = %584
  %606 = sub i64 %582, %588
  %607 = ashr exact i64 %606, 2
  %608 = icmp eq i64 %606, 0
  %609 = select i1 %608, i64 1, i64 %607
  %610 = icmp ugt i64 %609, 2305843009213693951
  br i1 %610, label %611, label %612

611:                                              ; preds = %605
  tail call void @abort() #11
  unreachable

612:                                              ; preds = %605
  %613 = lshr i64 %609, 2
  %614 = shl i64 %609, 3
  %615 = tail call i8* @_Znwm(i64 %614) #9
  %616 = bitcast i8* %615 to double**
  %617 = ptrtoint i8* %615 to i64
  %618 = getelementptr inbounds double*, double** %616, i64 %613
  %619 = ptrtoint double** %618 to i64
  %620 = getelementptr inbounds double*, double** %616, i64 %609
  %621 = ptrtoint double** %620 to i64
  %622 = ptrtoint double** %585 to i64
  %623 = sub i64 %582, %622
  %624 = ashr exact i64 %623, 3
  %625 = getelementptr inbounds double*, double** %618, i64 %624
  %626 = icmp eq i64 %623, 0
  br i1 %626, label %702, label %627

627:                                              ; preds = %612
  %628 = add i64 %623, -8
  %629 = lshr i64 %628, 3
  %630 = add nuw nsw i64 %629, 1
  %631 = and i64 %630, 7
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %648, label %633

633:                                              ; preds = %627, %633
  %634 = phi double** [ %641, %633 ], [ %618, %627 ]
  %635 = phi i64 [ %642, %633 ], [ %619, %627 ]
  %636 = phi double** [ %643, %633 ], [ %585, %627 ]
  %637 = phi i64 [ %644, %633 ], [ %631, %627 ]
  %638 = bitcast double** %636 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = inttoptr i64 %635 to i64*
  store i64 %639, i64* %640, align 8
  %641 = getelementptr inbounds double*, double** %634, i64 1
  %642 = ptrtoint double** %641 to i64
  %643 = getelementptr inbounds double*, double** %636, i64 1
  %644 = add i64 %637, -1
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %646, label %633, !llvm.loop !76

646:                                              ; preds = %633
  %647 = ptrtoint double** %641 to i64
  br label %648

648:                                              ; preds = %627, %646
  %649 = phi double** [ %618, %627 ], [ %641, %646 ]
  %650 = phi i64 [ %619, %627 ], [ %647, %646 ]
  %651 = phi double** [ %585, %627 ], [ %643, %646 ]
  %652 = icmp ult i64 %628, 56
  br i1 %652, label %699, label %653

653:                                              ; preds = %648, %653
  %654 = phi double** [ %695, %653 ], [ %649, %648 ]
  %655 = phi i64 [ %696, %653 ], [ %650, %648 ]
  %656 = phi double** [ %697, %653 ], [ %651, %648 ]
  %657 = bitcast double** %656 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = inttoptr i64 %655 to i64*
  store i64 %658, i64* %659, align 8
  %660 = getelementptr inbounds double*, double** %654, i64 1
  %661 = getelementptr inbounds double*, double** %656, i64 1
  %662 = bitcast double** %661 to i64*
  %663 = load i64, i64* %662, align 8
  %664 = bitcast double** %660 to i64*
  store i64 %663, i64* %664, align 8
  %665 = getelementptr inbounds double*, double** %654, i64 2
  %666 = getelementptr inbounds double*, double** %656, i64 2
  %667 = bitcast double** %666 to i64*
  %668 = load i64, i64* %667, align 8
  %669 = bitcast double** %665 to i64*
  store i64 %668, i64* %669, align 8
  %670 = getelementptr inbounds double*, double** %654, i64 3
  %671 = getelementptr inbounds double*, double** %656, i64 3
  %672 = bitcast double** %671 to i64*
  %673 = load i64, i64* %672, align 8
  %674 = bitcast double** %670 to i64*
  store i64 %673, i64* %674, align 8
  %675 = getelementptr inbounds double*, double** %654, i64 4
  %676 = getelementptr inbounds double*, double** %656, i64 4
  %677 = bitcast double** %676 to i64*
  %678 = load i64, i64* %677, align 8
  %679 = bitcast double** %675 to i64*
  store i64 %678, i64* %679, align 8
  %680 = getelementptr inbounds double*, double** %654, i64 5
  %681 = getelementptr inbounds double*, double** %656, i64 5
  %682 = bitcast double** %681 to i64*
  %683 = load i64, i64* %682, align 8
  %684 = bitcast double** %680 to i64*
  store i64 %683, i64* %684, align 8
  %685 = getelementptr inbounds double*, double** %654, i64 6
  %686 = getelementptr inbounds double*, double** %656, i64 6
  %687 = bitcast double** %686 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = bitcast double** %685 to i64*
  store i64 %688, i64* %689, align 8
  %690 = getelementptr inbounds double*, double** %654, i64 7
  %691 = getelementptr inbounds double*, double** %656, i64 7
  %692 = bitcast double** %691 to i64*
  %693 = load i64, i64* %692, align 8
  %694 = bitcast double** %690 to i64*
  store i64 %693, i64* %694, align 8
  %695 = getelementptr inbounds double*, double** %654, i64 8
  %696 = ptrtoint double** %695 to i64
  %697 = getelementptr inbounds double*, double** %656, i64 8
  %698 = icmp eq double** %625, %695
  br i1 %698, label %699, label %653

699:                                              ; preds = %653, %648
  %700 = ptrtoint double** %625 to i64
  %701 = load double**, double*** %394, align 16
  br label %702

702:                                              ; preds = %699, %612
  %703 = phi double** [ %701, %699 ], [ %586, %612 ]
  %704 = phi i64 [ %700, %699 ], [ %619, %612 ]
  store i64 %617, i64* %430, align 16
  store i64 %619, i64* %431, align 8
  store i64 %704, i64* %432, align 16
  store i64 %621, i64* %429, align 8
  %705 = icmp eq double** %703, null
  %706 = inttoptr i64 %704 to i64*
  br i1 %705, label %709, label %707

707:                                              ; preds = %702
  %708 = bitcast double** %703 to i8*
  tail call void @_ZdlPv(i8* %708) #9
  br label %709

709:                                              ; preds = %576, %602, %702, %707
  %710 = phi i64* [ %706, %707 ], [ %706, %702 ], [ %604, %602 ], [ %583, %576 ]
  %711 = load i64, i64* %578, align 8
  store i64 %711, i64* %710, align 8
  %712 = load double**, double*** %396, align 16
  %713 = getelementptr inbounds double*, double** %712, i64 1
  store double** %713, double*** %396, align 16
  %714 = load double**, double*** %9, align 8
  %715 = getelementptr inbounds double*, double** %714, i64 1
  store double** %715, double*** %9, align 8
  %716 = add i64 %579, -1
  %717 = icmp eq i64 %716, 0
  %718 = bitcast double** %715 to i64*
  br i1 %717, label %719, label %576

719:                                              ; preds = %709, %425
  %720 = phi double** [ %571, %425 ], [ %713, %709 ]
  %721 = phi double** [ %426, %425 ], [ %715, %709 ]
  %722 = load double**, double*** %7, align 8
  %723 = icmp eq double** %722, %721
  br i1 %723, label %724, label %763

724:                                              ; preds = %719
  %725 = ptrtoint double** %722 to i64
  %726 = ptrtoint double** %720 to i64
  %727 = bitcast double*** %396 to i64*
  br label %732

728:                                              ; preds = %763
  %729 = load i64, i64* %195, align 8
  %730 = bitcast double*** %396 to i64*
  %731 = load i64, i64* %730, align 16
  br label %732

732:                                              ; preds = %724, %728
  %733 = phi i64* [ %727, %724 ], [ %730, %728 ]
  %734 = phi i64 [ %726, %724 ], [ %731, %728 ]
  %735 = phi i64 [ %725, %724 ], [ %729, %728 ]
  %736 = phi double** [ %721, %724 ], [ %766, %728 ]
  %737 = ptrtoint double** %736 to i64
  %738 = load i64, i64* %191, align 8
  %739 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to i64*
  %740 = bitcast double*** %395 to i64*
  %741 = bitcast %"struct.std::__1::__split_buffer.70"* %5 to <2 x i64>*
  %742 = load <2 x i64>, <2 x i64>* %741, align 16
  store i64 %738, i64* %739, align 16
  %743 = bitcast %"class.std::__1::deque"* %0 to <2 x i64>*
  store <2 x i64> %742, <2 x i64>* %743, align 8
  store i64 %737, i64* %740, align 8
  store i64 %734, i64* %195, align 8
  store i64 %735, i64* %733, align 8
  %744 = load i64, i64* %189, align 8
  %745 = bitcast double*** %397 to i64*
  %746 = load i64, i64* %745, align 8
  store i64 %746, i64* %189, align 8
  store i64 %744, i64* %745, align 8
  %747 = load i64, i64* %19, align 8
  %748 = sub i64 %747, %392
  store i64 %748, i64* %19, align 8
  %749 = inttoptr i64 %735 to double**
  %750 = icmp eq double** %736, %749
  br i1 %750, label %758, label %751

751:                                              ; preds = %732
  %752 = getelementptr double*, double** %749, i64 -1
  %753 = ptrtoint double** %752 to i64
  %754 = sub i64 %753, %737
  %755 = lshr i64 %754, 3
  %756 = xor i64 %755, -1
  %757 = getelementptr double*, double** %749, i64 %756
  store double** %757, double*** %396, align 16
  br label %758

758:                                              ; preds = %751, %732
  %759 = icmp eq i64 %738, 0
  br i1 %759, label %762, label %760

760:                                              ; preds = %758
  %761 = inttoptr i64 %738 to i8*
  call void @_ZdlPv(i8* %761) #9
  br label %762

762:                                              ; preds = %758, %760
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %393) #10
  br label %768

763:                                              ; preds = %719, %763
  %764 = phi double** [ %765, %763 ], [ %722, %719 ]
  %765 = getelementptr inbounds double*, double** %764, i64 -1
  call void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.70"* nonnull %5, double** dereferenceable(8) %765)
  %766 = load double**, double*** %9, align 8
  %767 = icmp eq double** %765, %766
  br i1 %767, label %728, label %763

768:                                              ; preds = %385, %178, %236, %27, %762
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double**, double* } @_ZNSt3__113move_backwardIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double**, double*, double**, double*, double**, double*) local_unnamed_addr #0 comdat {
  %7 = ptrtoint double* %3 to i64
  %8 = icmp eq double* %3, %1
  br i1 %8, label %172, label %9

9:                                                ; preds = %6
  %10 = ptrtoint double* %1 to i64
  %11 = ptrtoint double** %2 to i64
  %12 = ptrtoint double** %0 to i64
  %13 = sub i64 %11, %12
  %14 = shl i64 %13, 6
  %15 = bitcast double** %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %7, %16
  %18 = ashr exact i64 %17, 3
  %19 = add nsw i64 %18, %14
  %20 = bitcast double** %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %10, %21
  %23 = ashr exact i64 %22, 3
  %24 = sub i64 %19, %23
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %172

26:                                               ; preds = %9, %166
  %27 = phi double* [ %139, %166 ], [ %5, %9 ]
  %28 = phi double** [ %138, %166 ], [ %4, %9 ]
  %29 = phi i64 [ %140, %166 ], [ %24, %9 ]
  %30 = phi double** [ %168, %166 ], [ %2, %9 ]
  %31 = phi i64 [ %167, %166 ], [ %7, %9 ]
  %32 = inttoptr i64 %31 to double*
  %33 = load double*, double** %30, align 8
  %34 = icmp eq double* %33, %32
  br i1 %34, label %35, label %39

35:                                               ; preds = %26
  %36 = getelementptr inbounds double*, double** %30, i64 -1
  %37 = load double*, double** %36, align 8
  %38 = getelementptr inbounds double, double* %37, i64 512
  br label %39

39:                                               ; preds = %26, %35
  %40 = phi double* [ %37, %35 ], [ %33, %26 ]
  %41 = phi double** [ %36, %35 ], [ %30, %26 ]
  %42 = phi double* [ %38, %35 ], [ %32, %26 ]
  %43 = getelementptr inbounds double, double* %42, i64 -1
  %44 = ptrtoint double* %43 to i64
  %45 = ptrtoint double* %42 to i64
  %46 = ptrtoint double* %40 to i64
  %47 = sub i64 %45, %46
  %48 = ashr exact i64 %47, 3
  %49 = icmp sgt i64 %48, %29
  %50 = sub nsw i64 0, %29
  %51 = getelementptr inbounds double, double* %42, i64 %50
  %52 = select i1 %49, i64 %29, i64 %48
  %53 = select i1 %49, double* %51, double* %40
  %54 = ptrtoint double* %27 to i64
  %55 = icmp eq double* %42, %53
  br i1 %55, label %136, label %56

56:                                               ; preds = %39
  %57 = ptrtoint double* %53 to i64
  br label %58

58:                                               ; preds = %132, %56
  %59 = phi double* [ %42, %56 ], [ %98, %132 ]
  %60 = phi double** [ %28, %56 ], [ %134, %132 ]
  %61 = phi i64 [ %54, %56 ], [ %133, %132 ]
  %62 = bitcast double** %60 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = ashr exact i64 %64, 3
  %66 = add nsw i64 %65, -1
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %58
  %69 = lshr i64 %66, 9
  %70 = getelementptr inbounds double*, double** %60, i64 %69
  %71 = load double*, double** %70, align 8
  %72 = and i64 %66, 511
  %73 = getelementptr inbounds double, double* %71, i64 %72
  br label %82

74:                                               ; preds = %58
  %75 = sub nsw i64 512, %65
  %76 = sdiv i64 %75, -512
  %77 = getelementptr inbounds double*, double** %60, i64 %76
  %78 = load double*, double** %77, align 8
  %79 = srem i64 %75, 512
  %80 = sub nuw nsw i64 511, %79
  %81 = getelementptr inbounds double, double* %78, i64 %80
  br label %82

82:                                               ; preds = %74, %68
  %83 = phi double* [ %73, %68 ], [ %81, %74 ]
  %84 = phi double** [ %70, %68 ], [ %77, %74 ]
  %85 = bitcast double** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds double, double* %83, i64 1
  %88 = ptrtoint double* %87 to i64
  %89 = sub i64 %88, %86
  %90 = ashr exact i64 %89, 3
  %91 = ptrtoint double* %59 to i64
  %92 = sub i64 %91, %57
  %93 = ashr exact i64 %92, 3
  %94 = icmp sgt i64 %93, %90
  %95 = sub nsw i64 0, %90
  %96 = getelementptr inbounds double, double* %59, i64 %95
  %97 = select i1 %94, i64 %90, i64 %93
  %98 = select i1 %94, double* %96, double* %53
  %99 = ptrtoint double* %98 to i64
  %100 = sub i64 %91, %99
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %82
  %103 = ashr exact i64 %100, 3
  %104 = sub nsw i64 0, %103
  %105 = getelementptr inbounds double, double* %87, i64 %104
  %106 = bitcast double* %105 to i8*
  %107 = bitcast double* %98 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 %100, i1 false) #10
  br label %108

108:                                              ; preds = %102, %82
  %109 = icmp eq i64 %97, 0
  br i1 %109, label %132, label %110

110:                                              ; preds = %108
  %111 = load i64, i64* %62, align 8
  %112 = sub i64 %61, %111
  %113 = ashr exact i64 %112, 3
  %114 = sub nsw i64 %113, %97
  %115 = icmp sgt i64 %114, 0
  br i1 %115, label %116, label %123

116:                                              ; preds = %110
  %117 = lshr i64 %114, 9
  %118 = getelementptr inbounds double*, double** %60, i64 %117
  %119 = load double*, double** %118, align 8
  %120 = and i64 %114, 511
  %121 = getelementptr inbounds double, double* %119, i64 %120
  %122 = ptrtoint double* %121 to i64
  br label %132

123:                                              ; preds = %110
  %124 = sub nsw i64 511, %114
  %125 = sdiv i64 %124, -512
  %126 = getelementptr inbounds double*, double** %60, i64 %125
  %127 = load double*, double** %126, align 8
  %128 = srem i64 %124, 512
  %129 = sub nuw nsw i64 511, %128
  %130 = getelementptr inbounds double, double* %127, i64 %129
  %131 = ptrtoint double* %130 to i64
  br label %132

132:                                              ; preds = %123, %116, %108
  %133 = phi i64 [ %61, %108 ], [ %122, %116 ], [ %131, %123 ]
  %134 = phi double** [ %60, %108 ], [ %118, %116 ], [ %126, %123 ]
  %135 = icmp eq double* %98, %53
  br i1 %135, label %136, label %58

136:                                              ; preds = %132, %39
  %137 = phi i64 [ %54, %39 ], [ %133, %132 ]
  %138 = phi double** [ %28, %39 ], [ %134, %132 ]
  %139 = inttoptr i64 %137 to double*
  %140 = sub nsw i64 %29, %52
  %141 = add nsw i64 %52, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %166, label %143

143:                                              ; preds = %136
  %144 = bitcast double** %41 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = sub i64 %44, %145
  %147 = ashr exact i64 %146, 3
  %148 = sub i64 %147, %141
  %149 = icmp sgt i64 %148, 0
  br i1 %149, label %150, label %157

150:                                              ; preds = %143
  %151 = lshr i64 %148, 9
  %152 = getelementptr inbounds double*, double** %41, i64 %151
  %153 = load double*, double** %152, align 8
  %154 = and i64 %148, 511
  %155 = getelementptr inbounds double, double* %153, i64 %154
  %156 = ptrtoint double* %155 to i64
  br label %166

157:                                              ; preds = %143
  %158 = sub nsw i64 511, %148
  %159 = sdiv i64 %158, -512
  %160 = getelementptr inbounds double*, double** %41, i64 %159
  %161 = load double*, double** %160, align 8
  %162 = srem i64 %158, 512
  %163 = sub nsw i64 511, %162
  %164 = getelementptr inbounds double, double* %161, i64 %163
  %165 = ptrtoint double* %164 to i64
  br label %166

166:                                              ; preds = %136, %150, %157
  %167 = phi i64 [ %44, %136 ], [ %156, %150 ], [ %165, %157 ]
  %168 = phi double** [ %41, %136 ], [ %152, %150 ], [ %160, %157 ]
  %169 = icmp sgt i64 %140, 0
  br i1 %169, label %26, label %170

170:                                              ; preds = %166
  %171 = inttoptr i64 %137 to double*
  br label %172

172:                                              ; preds = %170, %6, %9
  %173 = phi double** [ %4, %9 ], [ %4, %6 ], [ %138, %170 ]
  %174 = phi double* [ %5, %9 ], [ %5, %6 ], [ %171, %170 ]
  %175 = insertvalue { double**, double* } undef, double** %173, 0
  %176 = insertvalue { double**, double* } %175, double* %174, 1
  ret { double**, double* } %176
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #9
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !77

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #9
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !78

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  %9 = bitcast double** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load double**, double*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load double**, double*** %13, align 8
  %15 = icmp ugt double** %12, %14
  %16 = ptrtoint double** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint double** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds double*, double** %12, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast double** %23 to i8*
  %30 = bitcast double** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load double**, double*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi double** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds double*, double** %23, i64 %26
  store double** %34, double*** %3, align 8
  %35 = getelementptr inbounds double*, double** %33, i64 %22
  store double** %35, double*** %11, align 8
  %36 = bitcast double** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast double*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #9
  %50 = bitcast i8* %49 to double**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds double*, double** %50, i64 %47
  %53 = ptrtoint double** %52 to i64
  %54 = getelementptr inbounds double*, double** %50, i64 %43
  %55 = ptrtoint double** %54 to i64
  %56 = ptrtoint double** %12 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds double*, double** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi double** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi double** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast double** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds double*, double** %69, i64 1
  %77 = ptrtoint double** %76 to i64
  %78 = getelementptr inbounds double*, double** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !79

81:                                               ; preds = %68
  %82 = ptrtoint double** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi double** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi double** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi double** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi double** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast double** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds double*, double** %89, i64 1
  %96 = getelementptr inbounds double*, double** %91, i64 1
  %97 = bitcast double** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast double** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds double*, double** %89, i64 2
  %101 = getelementptr inbounds double*, double** %91, i64 2
  %102 = bitcast double** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds double*, double** %89, i64 3
  %106 = getelementptr inbounds double*, double** %91, i64 3
  %107 = bitcast double** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast double** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double*, double** %89, i64 4
  %111 = getelementptr inbounds double*, double** %91, i64 4
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast double** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds double*, double** %89, i64 5
  %116 = getelementptr inbounds double*, double** %91, i64 5
  %117 = bitcast double** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast double** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds double*, double** %89, i64 6
  %121 = getelementptr inbounds double*, double** %91, i64 6
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast double** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double*, double** %89, i64 7
  %126 = getelementptr inbounds double*, double** %91, i64 7
  %127 = bitcast double** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double*, double** %89, i64 8
  %131 = ptrtoint double** %130 to i64
  %132 = getelementptr inbounds double*, double** %91, i64 8
  %133 = icmp eq double** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint double** %60 to i64
  %136 = load double**, double*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi double** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast double*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq double** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast double** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = bitcast double*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load double**, double*** %3, align 8
  %153 = getelementptr inbounds double*, double** %152, i64 1
  store double** %153, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.70"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.70", %"struct.std::__1::__split_buffer.70"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.70"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #9
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !80

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_INS_7complexIfEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.16"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.18"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.18"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.18"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"class.std::__1::complex"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector.18"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to %"class.std::__1::vector.18"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.18"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.18"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.18"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.18"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.18"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.18"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.18"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %70, align 8
  %72 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.18"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.18"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.18"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.18"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.18"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector.18"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.18"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"class.std::__1::complex"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"class.std::__1::complex"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.std::__1::complex"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.std::__1::complex"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.18"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector.18"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.18"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.18"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.18"*
  %106 = icmp eq %"class.std::__1::vector.18"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.18"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %109, i64 0, i32 0, i32 0
  %111 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %110, align 8
  %112 = icmp eq %"class.std::__1::complex"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.std::__1::complex"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"class.std::__1::complex"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"class.std::__1::complex"* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #9
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.18"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #9
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_7complexIfEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.18"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::complex"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::complex"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::complex"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::complex", %"class.std::__1::complex"* %13, i64 %18, i32 0
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint %"class.std::__1::complex"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.18"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.18"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to %"class.std::__1::complex"*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.std::__1::complex"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %57, i64 %33
  %59 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %57, i64 %56
  %60 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %58, i64 %1
  %61 = bitcast %"class.std::__1::complex"* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint %"class.std::__1::complex"* %59 to i64
  %64 = ptrtoint %"class.std::__1::complex"* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 0
  %66 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"class.std::__1::complex"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %58, i64 %71
  %73 = ptrtoint %"class.std::__1::complex"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"class.std::__1::complex"* %72 to i8*
  %77 = bitcast %"class.std::__1::complex"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"class.std::__1::complex"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"class.std::__1::complex"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"class.std::__1::complex"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double**, double* } @_ZNSt3__15dequeIdNS_9allocatorIdEEE6insertINS_11__wrap_iterIPKdEEEENS_16__deque_iteratorIdPdRdPSA_lLl0EEENS9_IdS7_RS6_PKS7_lLl0EEET_SI_PNS_9enable_ifIXsr33__is_cpp17_bidirectional_iteratorISI_EE5valueEvE4typeE(%"class.std::__1::deque"*, double**, double*, double*, double*, i8*) local_unnamed_addr #0 comdat align 2 {
  %7 = ptrtoint double* %3 to i64
  %8 = ptrtoint double* %4 to i64
  %9 = sub i64 %8, %7
  %10 = ashr exact i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load double**, double*** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, 9
  %16 = getelementptr inbounds double*, double** %12, i64 %15
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load double**, double*** %17, align 8
  %19 = icmp eq double** %18, %12
  %20 = ptrtoint double** %18 to i64
  %21 = ptrtoint double** %12 to i64
  br i1 %19, label %26, label %22

22:                                               ; preds = %6
  %23 = load double*, double** %16, align 8
  %24 = and i64 %14, 511
  %25 = getelementptr inbounds double, double* %23, i64 %24
  br label %26

26:                                               ; preds = %6, %22
  %27 = phi double* [ %25, %22 ], [ null, %6 ]
  %28 = icmp eq double* %27, %2
  br i1 %28, label %46, label %29

29:                                               ; preds = %26
  %30 = ptrtoint double* %27 to i64
  %31 = ptrtoint double** %16 to i64
  %32 = ptrtoint double* %2 to i64
  %33 = ptrtoint double** %1 to i64
  %34 = sub i64 %33, %31
  %35 = shl i64 %34, 6
  %36 = bitcast double** %1 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %32, %37
  %39 = ashr exact i64 %38, 3
  %40 = add nsw i64 %39, %35
  %41 = bitcast double** %16 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %30, %42
  %44 = ashr exact i64 %43, 3
  %45 = sub i64 %40, %44
  br label %46

46:                                               ; preds = %26, %29
  %47 = phi i64 [ %45, %29 ], [ 0, %26 ]
  %48 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %49, %47
  %51 = icmp ult i64 %47, %50
  br i1 %51, label %52, label %294

52:                                               ; preds = %46
  %53 = icmp ugt i64 %10, %14
  br i1 %53, label %54, label %60

54:                                               ; preds = %52
  %55 = sub i64 %10, %14
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE20__add_front_capacityEm(%"class.std::__1::deque"* %0, i64 %55)
  %56 = load double**, double*** %11, align 8
  %57 = load i64, i64* %13, align 8
  %58 = load double**, double*** %17, align 8
  %59 = lshr i64 %57, 9
  br label %60

60:                                               ; preds = %54, %52
  %61 = phi i64 [ %59, %54 ], [ %15, %52 ]
  %62 = phi double** [ %58, %54 ], [ %18, %52 ]
  %63 = phi i64 [ %57, %54 ], [ %14, %52 ]
  %64 = phi double** [ %56, %54 ], [ %12, %52 ]
  %65 = getelementptr inbounds double*, double** %64, i64 %61
  %66 = icmp eq double** %62, %64
  br i1 %66, label %71, label %67

67:                                               ; preds = %60
  %68 = load double*, double** %65, align 8
  %69 = and i64 %63, 511
  %70 = getelementptr inbounds double, double* %68, i64 %69
  br label %71

71:                                               ; preds = %60, %67
  %72 = phi double* [ %70, %67 ], [ null, %60 ]
  %73 = ptrtoint double* %72 to i64
  %74 = icmp ugt i64 %10, %47
  br i1 %74, label %75, label %143

75:                                               ; preds = %71
  %76 = lshr i64 %10, 1
  %77 = icmp ult i64 %47, %76
  %78 = sub nsw i64 0, %47
  %79 = getelementptr inbounds double, double* %4, i64 %78
  %80 = sub i64 %10, %47
  %81 = getelementptr inbounds double, double* %3, i64 %80
  %82 = select i1 %77, double* %79, double* %81
  %83 = icmp eq double* %82, %3
  br i1 %83, label %143, label %84

84:                                               ; preds = %75
  %85 = getelementptr double, double* %82, i64 -1
  %86 = ptrtoint double* %85 to i64
  %87 = sub i64 %86, %7
  %88 = and i64 %87, 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %109

90:                                               ; preds = %84
  %91 = load double*, double** %65, align 8
  %92 = icmp eq double* %72, %91
  br i1 %92, label %93, label %97

93:                                               ; preds = %90
  %94 = getelementptr inbounds double*, double** %65, i64 -1
  %95 = load double*, double** %94, align 8
  %96 = getelementptr inbounds double, double* %95, i64 512
  br label %97

97:                                               ; preds = %93, %90
  %98 = phi double** [ %94, %93 ], [ %65, %90 ]
  %99 = phi double* [ %96, %93 ], [ %72, %90 ]
  %100 = getelementptr inbounds double, double* %99, i64 -1
  %101 = getelementptr inbounds double, double* %82, i64 -1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double* %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = bitcast i64* %13 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8
  %107 = add <2 x i64> %106, <i64 -1, i64 1>
  %108 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %108, align 8
  br label %109

109:                                              ; preds = %97, %84
  %110 = phi double** [ undef, %84 ], [ %98, %97 ]
  %111 = phi double* [ undef, %84 ], [ %100, %97 ]
  %112 = phi double* [ %82, %84 ], [ %101, %97 ]
  %113 = phi double** [ %65, %84 ], [ %98, %97 ]
  %114 = phi double* [ %72, %84 ], [ %100, %97 ]
  %115 = icmp ult i64 %87, 8
  br i1 %115, label %143, label %116

116:                                              ; preds = %109
  %117 = bitcast i64* %13 to <2 x i64>*
  %118 = bitcast i64* %13 to <2 x i64>*
  %119 = bitcast i64* %13 to <2 x i64>*
  %120 = bitcast i64* %13 to <2 x i64>*
  br label %121

121:                                              ; preds = %634, %116
  %122 = phi double* [ %112, %116 ], [ %638, %634 ]
  %123 = phi double** [ %113, %116 ], [ %635, %634 ]
  %124 = phi double* [ %114, %116 ], [ %637, %634 ]
  %125 = load double*, double** %123, align 8
  %126 = icmp eq double* %124, %125
  br i1 %126, label %127, label %131

127:                                              ; preds = %121
  %128 = getelementptr inbounds double*, double** %123, i64 -1
  %129 = load double*, double** %128, align 8
  %130 = getelementptr inbounds double, double* %129, i64 512
  br label %131

131:                                              ; preds = %121, %127
  %132 = phi double** [ %128, %127 ], [ %123, %121 ]
  %133 = phi double* [ %130, %127 ], [ %124, %121 ]
  %134 = getelementptr inbounds double, double* %133, i64 -1
  %135 = getelementptr inbounds double, double* %122, i64 -1
  %136 = bitcast double* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast double* %134 to i64*
  store i64 %137, i64* %138, align 8
  %139 = load <2 x i64>, <2 x i64>* %117, align 8
  %140 = add <2 x i64> %139, <i64 -1, i64 1>
  store <2 x i64> %140, <2 x i64>* %118, align 8
  %141 = load double*, double** %132, align 8
  %142 = icmp eq double* %134, %141
  br i1 %142, label %630, label %634

143:                                              ; preds = %109, %634, %75, %71
  %144 = phi double* [ %72, %71 ], [ %72, %75 ], [ %111, %109 ], [ %637, %634 ]
  %145 = phi double** [ %65, %71 ], [ %65, %75 ], [ %110, %109 ], [ %635, %634 ]
  %146 = phi double* [ %3, %71 ], [ %3, %75 ], [ %82, %634 ], [ %82, %109 ]
  %147 = phi i64 [ %10, %71 ], [ %47, %75 ], [ %47, %634 ], [ %47, %109 ]
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %586, label %149

149:                                              ; preds = %143
  %150 = bitcast double** %65 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = sub i64 %73, %151
  %153 = ashr exact i64 %152, 3
  %154 = add nsw i64 %153, %147
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %162

156:                                              ; preds = %149
  %157 = lshr i64 %154, 9
  %158 = getelementptr inbounds double*, double** %65, i64 %157
  %159 = load double*, double** %158, align 8
  %160 = and i64 %154, 511
  %161 = getelementptr inbounds double, double* %159, i64 %160
  br label %170

162:                                              ; preds = %149
  %163 = sub nsw i64 511, %154
  %164 = sdiv i64 %163, -512
  %165 = getelementptr inbounds double*, double** %65, i64 %164
  %166 = load double*, double** %165, align 8
  %167 = srem i64 %163, 512
  %168 = sub nsw i64 511, %167
  %169 = getelementptr inbounds double, double* %166, i64 %168
  br label %170

170:                                              ; preds = %156, %162
  %171 = phi double* [ %161, %156 ], [ %169, %162 ]
  %172 = phi double** [ %158, %156 ], [ %165, %162 ]
  %173 = icmp eq double* %171, %72
  br i1 %173, label %177, label %174

174:                                              ; preds = %170
  %175 = bitcast i64* %13 to <2 x i64>*
  %176 = bitcast i64* %13 to <2 x i64>*
  br label %179

177:                                              ; preds = %200, %170
  %178 = icmp ult i64 %147, %47
  br i1 %178, label %210, label %237

179:                                              ; preds = %174, %200
  %180 = phi double** [ %201, %200 ], [ %172, %174 ]
  %181 = phi double* [ %203, %200 ], [ %171, %174 ]
  %182 = phi double** [ %191, %200 ], [ %145, %174 ]
  %183 = phi double* [ %193, %200 ], [ %144, %174 ]
  %184 = load double*, double** %182, align 8
  %185 = icmp eq double* %183, %184
  br i1 %185, label %186, label %190

186:                                              ; preds = %179
  %187 = getelementptr inbounds double*, double** %182, i64 -1
  %188 = load double*, double** %187, align 8
  %189 = getelementptr inbounds double, double* %188, i64 512
  br label %190

190:                                              ; preds = %179, %186
  %191 = phi double** [ %187, %186 ], [ %182, %179 ]
  %192 = phi double* [ %189, %186 ], [ %183, %179 ]
  %193 = getelementptr inbounds double, double* %192, i64 -1
  %194 = load double*, double** %180, align 8
  %195 = icmp eq double* %181, %194
  br i1 %195, label %196, label %200

196:                                              ; preds = %190
  %197 = getelementptr inbounds double*, double** %180, i64 -1
  %198 = load double*, double** %197, align 8
  %199 = getelementptr inbounds double, double* %198, i64 512
  br label %200

200:                                              ; preds = %190, %196
  %201 = phi double** [ %197, %196 ], [ %180, %190 ]
  %202 = phi double* [ %199, %196 ], [ %181, %190 ]
  %203 = getelementptr inbounds double, double* %202, i64 -1
  %204 = bitcast double* %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast double* %193 to i64*
  store i64 %205, i64* %206, align 8
  %207 = load <2 x i64>, <2 x i64>* %175, align 8
  %208 = add <2 x i64> %207, <i64 -1, i64 1>
  store <2 x i64> %208, <2 x i64>* %176, align 8
  %209 = icmp eq double* %203, %72
  br i1 %209, label %177, label %179

210:                                              ; preds = %177
  %211 = load i64, i64* %150, align 8
  %212 = sub i64 %73, %211
  %213 = ashr exact i64 %212, 3
  %214 = add nsw i64 %213, %47
  %215 = icmp sgt i64 %214, 0
  br i1 %215, label %216, label %222

216:                                              ; preds = %210
  %217 = lshr i64 %214, 9
  %218 = getelementptr inbounds double*, double** %65, i64 %217
  %219 = load double*, double** %218, align 8
  %220 = and i64 %214, 511
  %221 = getelementptr inbounds double, double* %219, i64 %220
  br label %230

222:                                              ; preds = %210
  %223 = sub nsw i64 511, %214
  %224 = sdiv i64 %223, -512
  %225 = getelementptr inbounds double*, double** %65, i64 %224
  %226 = load double*, double** %225, align 8
  %227 = srem i64 %223, 512
  %228 = sub nsw i64 511, %227
  %229 = getelementptr inbounds double, double* %226, i64 %228
  br label %230

230:                                              ; preds = %216, %222
  %231 = phi double* [ %221, %216 ], [ %229, %222 ]
  %232 = phi double** [ %218, %216 ], [ %225, %222 ]
  %233 = tail call { double**, double* } @_ZNSt3__14moveIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %172, double* %171, double** %232, double* %231, double** %65, double* %72)
  %234 = extractvalue { double**, double* } %233, 0
  %235 = extractvalue { double**, double* } %233, 1
  %236 = ptrtoint double* %235 to i64
  br label %237

237:                                              ; preds = %230, %177
  %238 = phi double** [ %234, %230 ], [ %65, %177 ]
  %239 = phi i64 [ %236, %230 ], [ %73, %177 ]
  %240 = icmp eq double* %146, %4
  br i1 %240, label %586, label %241

241:                                              ; preds = %237
  %242 = ptrtoint double* %146 to i64
  br label %243

243:                                              ; preds = %290, %241
  %244 = phi double* [ %257, %290 ], [ %146, %241 ]
  %245 = phi double** [ %292, %290 ], [ %238, %241 ]
  %246 = phi i64 [ %291, %290 ], [ %239, %241 ]
  %247 = phi i64 [ %259, %290 ], [ %242, %241 ]
  %248 = load double*, double** %245, align 8
  %249 = getelementptr inbounds double, double* %248, i64 512
  %250 = ptrtoint double* %249 to i64
  %251 = sub i64 %250, %246
  %252 = ashr exact i64 %251, 3
  %253 = sub i64 %8, %247
  %254 = ashr exact i64 %253, 3
  %255 = icmp sgt i64 %254, %252
  %256 = getelementptr inbounds double, double* %244, i64 %252
  %257 = select i1 %255, double* %256, double* %4
  %258 = select i1 %255, i64 %252, i64 %254
  %259 = ptrtoint double* %257 to i64
  %260 = sub i64 %259, %247
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %265, label %262

262:                                              ; preds = %243
  %263 = inttoptr i64 %246 to i8*
  %264 = inttoptr i64 %247 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %263, i8* align 8 %264, i64 %260, i1 false) #10
  br label %265

265:                                              ; preds = %262, %243
  %266 = icmp eq i64 %258, 0
  br i1 %266, label %290, label %267

267:                                              ; preds = %265
  %268 = bitcast double** %245 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = sub i64 %246, %269
  %271 = ashr exact i64 %270, 3
  %272 = add nsw i64 %271, %258
  %273 = icmp sgt i64 %272, 0
  br i1 %273, label %274, label %281

274:                                              ; preds = %267
  %275 = lshr i64 %272, 9
  %276 = getelementptr inbounds double*, double** %245, i64 %275
  %277 = load double*, double** %276, align 8
  %278 = and i64 %272, 511
  %279 = getelementptr inbounds double, double* %277, i64 %278
  %280 = ptrtoint double* %279 to i64
  br label %290

281:                                              ; preds = %267
  %282 = sub nsw i64 511, %272
  %283 = sdiv i64 %282, -512
  %284 = getelementptr inbounds double*, double** %245, i64 %283
  %285 = load double*, double** %284, align 8
  %286 = srem i64 %282, 512
  %287 = sub nuw nsw i64 511, %286
  %288 = getelementptr inbounds double, double* %285, i64 %287
  %289 = ptrtoint double* %288 to i64
  br label %290

290:                                              ; preds = %281, %274, %265
  %291 = phi i64 [ %246, %265 ], [ %280, %274 ], [ %289, %281 ]
  %292 = phi double** [ %245, %265 ], [ %276, %274 ], [ %284, %281 ]
  %293 = icmp eq double* %257, %4
  br i1 %293, label %586, label %243

294:                                              ; preds = %46
  %295 = sub i64 %20, %21
  %296 = icmp eq i64 %295, 0
  %297 = shl i64 %295, 6
  %298 = add i64 %297, -1
  %299 = select i1 %296, i64 0, i64 %298
  %300 = add i64 %49, %14
  %301 = sub i64 %299, %300
  %302 = icmp ugt i64 %10, %301
  br i1 %302, label %303, label %310

303:                                              ; preds = %294
  %304 = sub i64 %10, %301
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEm(%"class.std::__1::deque"* %0, i64 %304)
  %305 = load i64, i64* %48, align 8
  %306 = load i64, i64* %13, align 8
  %307 = load double**, double*** %11, align 8
  %308 = load double**, double*** %17, align 8
  %309 = add i64 %306, %305
  br label %310

310:                                              ; preds = %303, %294
  %311 = phi i64 [ %309, %303 ], [ %300, %294 ]
  %312 = phi double** [ %308, %303 ], [ %18, %294 ]
  %313 = phi double** [ %307, %303 ], [ %12, %294 ]
  %314 = phi i64 [ %305, %303 ], [ %49, %294 ]
  %315 = lshr i64 %311, 9
  %316 = getelementptr inbounds double*, double** %313, i64 %315
  %317 = icmp eq double** %312, %313
  br i1 %317, label %322, label %318

318:                                              ; preds = %310
  %319 = load double*, double** %316, align 8
  %320 = and i64 %311, 511
  %321 = getelementptr inbounds double, double* %319, i64 %320
  br label %322

322:                                              ; preds = %310, %318
  %323 = phi double* [ %321, %318 ], [ null, %310 ]
  %324 = ptrtoint double* %323 to i64
  %325 = sub i64 %314, %47
  %326 = icmp ult i64 %325, %10
  br i1 %326, label %327, label %403

327:                                              ; preds = %322
  %328 = lshr i64 %10, 1
  %329 = icmp ult i64 %325, %328
  %330 = getelementptr inbounds double, double* %3, i64 %325
  %331 = sub i64 %325, %10
  %332 = getelementptr inbounds double, double* %4, i64 %331
  %333 = select i1 %329, double* %330, double* %332
  %334 = icmp eq double* %333, %4
  br i1 %334, label %403, label %335

335:                                              ; preds = %327
  %336 = ptrtoint double* %333 to i64
  %337 = getelementptr double, double* %4, i64 -1
  %338 = ptrtoint double* %337 to i64
  %339 = sub i64 %338, %336
  %340 = and i64 %339, 8
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %362

342:                                              ; preds = %335
  %343 = bitcast double* %333 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = bitcast double* %323 to i64*
  store i64 %344, i64* %345, align 8
  %346 = getelementptr inbounds double, double* %323, i64 1
  %347 = ptrtoint double* %346 to i64
  %348 = bitcast double** %316 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = sub i64 %347, %349
  %351 = icmp eq i64 %350, 4096
  br i1 %351, label %352, label %356

352:                                              ; preds = %342
  %353 = getelementptr inbounds double*, double** %316, i64 1
  %354 = bitcast double** %353 to i64*
  %355 = load i64, i64* %354, align 8
  br label %356

356:                                              ; preds = %352, %342
  %357 = phi i64 [ %355, %352 ], [ %347, %342 ]
  %358 = phi double** [ %353, %352 ], [ %316, %342 ]
  %359 = getelementptr inbounds double, double* %333, i64 1
  %360 = load i64, i64* %48, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %48, align 8
  br label %362

362:                                              ; preds = %356, %335
  %363 = phi i64 [ undef, %335 ], [ %357, %356 ]
  %364 = phi double** [ undef, %335 ], [ %358, %356 ]
  %365 = phi double* [ %333, %335 ], [ %359, %356 ]
  %366 = phi double** [ %316, %335 ], [ %358, %356 ]
  %367 = phi i64 [ %324, %335 ], [ %357, %356 ]
  %368 = icmp ult i64 %339, 8
  br i1 %368, label %403, label %369

369:                                              ; preds = %362, %649
  %370 = phi double* [ %652, %649 ], [ %365, %362 ]
  %371 = phi double** [ %651, %649 ], [ %366, %362 ]
  %372 = phi i64 [ %650, %649 ], [ %367, %362 ]
  %373 = inttoptr i64 %372 to double*
  %374 = bitcast double* %370 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = inttoptr i64 %372 to i64*
  store i64 %375, i64* %376, align 8
  %377 = getelementptr inbounds double, double* %373, i64 1
  %378 = ptrtoint double* %377 to i64
  %379 = bitcast double** %371 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = sub i64 %378, %380
  %382 = icmp eq i64 %381, 4096
  br i1 %382, label %383, label %387

383:                                              ; preds = %369
  %384 = getelementptr inbounds double*, double** %371, i64 1
  %385 = bitcast double** %384 to i64*
  %386 = load i64, i64* %385, align 8
  br label %387

387:                                              ; preds = %369, %383
  %388 = phi i64 [ %386, %383 ], [ %378, %369 ]
  %389 = phi double** [ %384, %383 ], [ %371, %369 ]
  %390 = getelementptr inbounds double, double* %370, i64 1
  %391 = load i64, i64* %48, align 8
  %392 = add i64 %391, 1
  store i64 %392, i64* %48, align 8
  %393 = inttoptr i64 %388 to double*
  %394 = bitcast double* %390 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = inttoptr i64 %388 to i64*
  store i64 %395, i64* %396, align 8
  %397 = getelementptr inbounds double, double* %393, i64 1
  %398 = ptrtoint double* %397 to i64
  %399 = bitcast double** %389 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = sub i64 %398, %400
  %402 = icmp eq i64 %401, 4096
  br i1 %402, label %645, label %649

403:                                              ; preds = %362, %649, %327, %322
  %404 = phi i64 [ %324, %322 ], [ %324, %327 ], [ %363, %362 ], [ %650, %649 ]
  %405 = phi double** [ %316, %322 ], [ %316, %327 ], [ %364, %362 ], [ %651, %649 ]
  %406 = phi double* [ %4, %322 ], [ %4, %327 ], [ %333, %649 ], [ %333, %362 ]
  %407 = phi i64 [ %10, %322 ], [ %325, %327 ], [ %325, %649 ], [ %325, %362 ]
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %586, label %409

409:                                              ; preds = %403
  %410 = bitcast double** %316 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = sub i64 %324, %411
  %413 = ashr exact i64 %412, 3
  %414 = sub i64 %413, %407
  %415 = icmp sgt i64 %414, 0
  br i1 %415, label %416, label %422

416:                                              ; preds = %409
  %417 = lshr i64 %414, 9
  %418 = getelementptr inbounds double*, double** %316, i64 %417
  %419 = load double*, double** %418, align 8
  %420 = and i64 %414, 511
  %421 = getelementptr inbounds double, double* %419, i64 %420
  br label %430

422:                                              ; preds = %409
  %423 = sub nsw i64 511, %414
  %424 = sdiv i64 %423, -512
  %425 = getelementptr inbounds double*, double** %316, i64 %424
  %426 = load double*, double** %425, align 8
  %427 = srem i64 %423, 512
  %428 = sub nsw i64 511, %427
  %429 = getelementptr inbounds double, double* %426, i64 %428
  br label %430

430:                                              ; preds = %416, %422
  %431 = phi double* [ %421, %416 ], [ %429, %422 ]
  %432 = phi double** [ %418, %416 ], [ %425, %422 ]
  %433 = icmp eq double* %431, %323
  br i1 %433, label %434, label %436

434:                                              ; preds = %468, %430
  %435 = icmp ult i64 %407, %325
  br i1 %435, label %475, label %502

436:                                              ; preds = %430, %468
  %437 = phi double** [ %470, %468 ], [ %432, %430 ]
  %438 = phi double* [ %471, %468 ], [ %431, %430 ]
  %439 = phi double** [ %457, %468 ], [ %405, %430 ]
  %440 = phi i64 [ %456, %468 ], [ %404, %430 ]
  %441 = inttoptr i64 %440 to double*
  %442 = bitcast double* %438 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = inttoptr i64 %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds double, double* %441, i64 1
  %446 = ptrtoint double* %445 to i64
  %447 = bitcast double** %439 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = sub i64 %446, %448
  %450 = icmp eq i64 %449, 4096
  br i1 %450, label %451, label %455

451:                                              ; preds = %436
  %452 = getelementptr inbounds double*, double** %439, i64 1
  %453 = bitcast double** %452 to i64*
  %454 = load i64, i64* %453, align 8
  br label %455

455:                                              ; preds = %436, %451
  %456 = phi i64 [ %454, %451 ], [ %446, %436 ]
  %457 = phi double** [ %452, %451 ], [ %439, %436 ]
  %458 = getelementptr inbounds double, double* %438, i64 1
  %459 = ptrtoint double* %458 to i64
  %460 = bitcast double** %437 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = sub i64 %459, %461
  %463 = icmp eq i64 %462, 4096
  br i1 %463, label %464, label %468

464:                                              ; preds = %455
  %465 = getelementptr inbounds double*, double** %437, i64 1
  %466 = bitcast double** %465 to i64*
  %467 = load i64, i64* %466, align 8
  br label %468

468:                                              ; preds = %455, %464
  %469 = phi i64 [ %467, %464 ], [ %459, %455 ]
  %470 = phi double** [ %465, %464 ], [ %437, %455 ]
  %471 = inttoptr i64 %469 to double*
  %472 = load i64, i64* %48, align 8
  %473 = add i64 %472, 1
  store i64 %473, i64* %48, align 8
  %474 = icmp eq double* %323, %471
  br i1 %474, label %434, label %436

475:                                              ; preds = %434
  %476 = load i64, i64* %410, align 8
  %477 = sub i64 %324, %476
  %478 = ashr exact i64 %477, 3
  %479 = sub i64 %478, %325
  %480 = icmp sgt i64 %479, 0
  br i1 %480, label %481, label %487

481:                                              ; preds = %475
  %482 = lshr i64 %479, 9
  %483 = getelementptr inbounds double*, double** %316, i64 %482
  %484 = load double*, double** %483, align 8
  %485 = and i64 %479, 511
  %486 = getelementptr inbounds double, double* %484, i64 %485
  br label %495

487:                                              ; preds = %475
  %488 = sub nsw i64 511, %479
  %489 = sdiv i64 %488, -512
  %490 = getelementptr inbounds double*, double** %316, i64 %489
  %491 = load double*, double** %490, align 8
  %492 = srem i64 %488, 512
  %493 = sub nsw i64 511, %492
  %494 = getelementptr inbounds double, double* %491, i64 %493
  br label %495

495:                                              ; preds = %481, %487
  %496 = phi double* [ %486, %481 ], [ %494, %487 ]
  %497 = phi double** [ %483, %481 ], [ %490, %487 ]
  %498 = tail call { double**, double* } @_ZNSt3__113move_backwardIdPdRdPS1_lLl0EdS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(double** %497, double* %496, double** %432, double* %431, double** %316, double* %323)
  %499 = extractvalue { double**, double* } %498, 0
  %500 = extractvalue { double**, double* } %498, 1
  %501 = ptrtoint double* %500 to i64
  br label %502

502:                                              ; preds = %495, %434
  %503 = phi i64 [ %501, %495 ], [ %324, %434 ]
  %504 = phi double** [ %499, %495 ], [ %316, %434 ]
  %505 = icmp eq double* %406, %3
  br i1 %505, label %586, label %506

506:                                              ; preds = %502
  %507 = ptrtoint double* %406 to i64
  br label %508

508:                                              ; preds = %582, %506
  %509 = phi double* [ %547, %582 ], [ %406, %506 ]
  %510 = phi double** [ %584, %582 ], [ %504, %506 ]
  %511 = phi i64 [ %583, %582 ], [ %503, %506 ]
  %512 = phi i64 [ %549, %582 ], [ %507, %506 ]
  %513 = bitcast double** %510 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = sub i64 %511, %514
  %516 = ashr exact i64 %515, 3
  %517 = add nsw i64 %516, -1
  %518 = icmp sgt i64 %517, 0
  br i1 %518, label %519, label %525

519:                                              ; preds = %508
  %520 = lshr i64 %517, 9
  %521 = getelementptr inbounds double*, double** %510, i64 %520
  %522 = load double*, double** %521, align 8
  %523 = and i64 %517, 511
  %524 = getelementptr inbounds double, double* %522, i64 %523
  br label %533

525:                                              ; preds = %508
  %526 = sub nsw i64 512, %516
  %527 = sdiv i64 %526, -512
  %528 = getelementptr inbounds double*, double** %510, i64 %527
  %529 = load double*, double** %528, align 8
  %530 = srem i64 %526, 512
  %531 = sub nuw nsw i64 511, %530
  %532 = getelementptr inbounds double, double* %529, i64 %531
  br label %533

533:                                              ; preds = %525, %519
  %534 = phi double* [ %524, %519 ], [ %532, %525 ]
  %535 = phi double** [ %521, %519 ], [ %528, %525 ]
  %536 = bitcast double** %535 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = getelementptr inbounds double, double* %534, i64 1
  %539 = ptrtoint double* %538 to i64
  %540 = sub i64 %539, %537
  %541 = ashr exact i64 %540, 3
  %542 = sub i64 %512, %7
  %543 = ashr exact i64 %542, 3
  %544 = icmp sgt i64 %543, %541
  %545 = sub nsw i64 0, %541
  %546 = getelementptr inbounds double, double* %509, i64 %545
  %547 = select i1 %544, double* %546, double* %3
  %548 = select i1 %544, i64 %541, i64 %543
  %549 = ptrtoint double* %547 to i64
  %550 = sub i64 %512, %549
  %551 = icmp eq i64 %550, 0
  br i1 %551, label %558, label %552

552:                                              ; preds = %533
  %553 = ashr exact i64 %550, 3
  %554 = sub nsw i64 0, %553
  %555 = getelementptr inbounds double, double* %538, i64 %554
  %556 = bitcast double* %555 to i8*
  %557 = bitcast double* %547 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %556, i8* align 8 %557, i64 %550, i1 false) #10
  br label %558

558:                                              ; preds = %552, %533
  %559 = icmp eq i64 %548, 0
  br i1 %559, label %582, label %560

560:                                              ; preds = %558
  %561 = load i64, i64* %513, align 8
  %562 = sub i64 %511, %561
  %563 = ashr exact i64 %562, 3
  %564 = sub nsw i64 %563, %548
  %565 = icmp sgt i64 %564, 0
  br i1 %565, label %566, label %573

566:                                              ; preds = %560
  %567 = lshr i64 %564, 9
  %568 = getelementptr inbounds double*, double** %510, i64 %567
  %569 = load double*, double** %568, align 8
  %570 = and i64 %564, 511
  %571 = getelementptr inbounds double, double* %569, i64 %570
  %572 = ptrtoint double* %571 to i64
  br label %582

573:                                              ; preds = %560
  %574 = sub nsw i64 511, %564
  %575 = sdiv i64 %574, -512
  %576 = getelementptr inbounds double*, double** %510, i64 %575
  %577 = load double*, double** %576, align 8
  %578 = srem i64 %574, 512
  %579 = sub nuw nsw i64 511, %578
  %580 = getelementptr inbounds double, double* %577, i64 %579
  %581 = ptrtoint double* %580 to i64
  br label %582

582:                                              ; preds = %573, %566, %558
  %583 = phi i64 [ %511, %558 ], [ %572, %566 ], [ %581, %573 ]
  %584 = phi double** [ %510, %558 ], [ %568, %566 ], [ %576, %573 ]
  %585 = icmp eq double* %547, %3
  br i1 %585, label %586, label %508

586:                                              ; preds = %582, %290, %502, %237, %403, %143
  %587 = load double**, double*** %11, align 8
  %588 = load i64, i64* %13, align 8
  %589 = lshr i64 %588, 9
  %590 = getelementptr inbounds double*, double** %587, i64 %589
  %591 = load double**, double*** %17, align 8
  %592 = icmp eq double** %591, %587
  br i1 %592, label %598, label %593

593:                                              ; preds = %586
  %594 = load double*, double** %590, align 8
  %595 = and i64 %588, 511
  %596 = getelementptr inbounds double, double* %594, i64 %595
  %597 = ptrtoint double* %596 to i64
  br label %598

598:                                              ; preds = %586, %593
  %599 = phi i64 [ %597, %593 ], [ 0, %586 ]
  %600 = icmp eq i64 %47, 0
  br i1 %600, label %624, label %601

601:                                              ; preds = %598
  %602 = bitcast double** %590 to i64*
  %603 = load i64, i64* %602, align 8
  %604 = sub i64 %599, %603
  %605 = ashr exact i64 %604, 3
  %606 = add nsw i64 %605, %47
  %607 = icmp sgt i64 %606, 0
  br i1 %607, label %608, label %615

608:                                              ; preds = %601
  %609 = lshr i64 %606, 9
  %610 = getelementptr inbounds double*, double** %590, i64 %609
  %611 = load double*, double** %610, align 8
  %612 = and i64 %606, 511
  %613 = getelementptr inbounds double, double* %611, i64 %612
  %614 = ptrtoint double* %613 to i64
  br label %624

615:                                              ; preds = %601
  %616 = sub nsw i64 511, %606
  %617 = sdiv i64 %616, -512
  %618 = getelementptr inbounds double*, double** %590, i64 %617
  %619 = load double*, double** %618, align 8
  %620 = srem i64 %616, 512
  %621 = sub nsw i64 511, %620
  %622 = getelementptr inbounds double, double* %619, i64 %621
  %623 = ptrtoint double* %622 to i64
  br label %624

624:                                              ; preds = %598, %608, %615
  %625 = phi i64 [ %599, %598 ], [ %614, %608 ], [ %623, %615 ]
  %626 = phi double** [ %590, %598 ], [ %610, %608 ], [ %618, %615 ]
  %627 = insertvalue { double**, double* } undef, double** %626, 0
  %628 = inttoptr i64 %625 to double*
  %629 = insertvalue { double**, double* } %627, double* %628, 1
  ret { double**, double* } %629

630:                                              ; preds = %131
  %631 = getelementptr inbounds double*, double** %132, i64 -1
  %632 = load double*, double** %631, align 8
  %633 = getelementptr inbounds double, double* %632, i64 512
  br label %634

634:                                              ; preds = %630, %131
  %635 = phi double** [ %631, %630 ], [ %132, %131 ]
  %636 = phi double* [ %633, %630 ], [ %134, %131 ]
  %637 = getelementptr inbounds double, double* %636, i64 -1
  %638 = getelementptr inbounds double, double* %122, i64 -2
  %639 = bitcast double* %638 to i64*
  %640 = load i64, i64* %639, align 8
  %641 = bitcast double* %637 to i64*
  store i64 %640, i64* %641, align 8
  %642 = load <2 x i64>, <2 x i64>* %119, align 8
  %643 = add <2 x i64> %642, <i64 -1, i64 1>
  store <2 x i64> %643, <2 x i64>* %120, align 8
  %644 = icmp eq double* %638, %3
  br i1 %644, label %143, label %121

645:                                              ; preds = %387
  %646 = getelementptr inbounds double*, double** %389, i64 1
  %647 = bitcast double** %646 to i64*
  %648 = load i64, i64* %647, align 8
  br label %649

649:                                              ; preds = %645, %387
  %650 = phi i64 [ %648, %645 ], [ %398, %387 ]
  %651 = phi double** [ %646, %645 ], [ %389, %387 ]
  %652 = getelementptr inbounds double, double* %370, i64 2
  %653 = load i64, i64* %48, align 8
  %654 = add i64 %653, 1
  store i64 %654, i64* %48, align 8
  %655 = icmp eq double* %652, %4
  br i1 %655, label %403, label %369
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_INS_7complexIdEENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.30"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.32"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.32"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.32"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"class.std::__1::complex.34"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector.32"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.30"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.30"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to %"class.std::__1::vector.32"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.32"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.32"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.32"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.32"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.32"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.32"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.32"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %70, align 8
  %72 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.32"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.32"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.32"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.32"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.32"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector.32"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.32"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"class.std::__1::complex.34"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"class.std::__1::complex.34"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.std::__1::complex.34"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.std::__1::complex.34"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.32"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector.32"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.32"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.32"*, %"class.std::__1::vector.32"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.32"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.32"*
  %106 = icmp eq %"class.std::__1::vector.32"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.32"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %109, i64 0, i32 0, i32 0
  %111 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %110, align 8
  %112 = icmp eq %"class.std::__1::complex.34"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.std::__1::complex.34"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"class.std::__1::complex.34"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"class.std::__1::complex.34"* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #9
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.32"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #9
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_7complexIdEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.32"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::complex.34"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::complex.34"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::complex.34"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %13, i64 %18, i32 0
  %20 = bitcast double* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 16
  %25 = and i64 %24, -16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint %"class.std::__1::complex.34"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 4
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1152921504606846975
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 4
  %41 = icmp ult i64 %40, 576460752303423487
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 3
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 1152921504606846975, %38 ]
  %52 = shl i64 %51, 4
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to %"class.std::__1::complex.34"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.std::__1::complex.34"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %57, i64 %33
  %59 = bitcast %"class.std::__1::complex.34"* %58 to i8*
  %60 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %57, i64 %56
  %61 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %58, i64 %1
  %62 = shl nsw i64 %1, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"class.std::__1::complex.34"* %60 to i64
  %64 = ptrtoint %"class.std::__1::complex.34"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %66 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"class.std::__1::complex.34"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 4
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"class.std::__1::complex.34", %"class.std::__1::complex.34"* %58, i64 %71
  %73 = ptrtoint %"class.std::__1::complex.34"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"class.std::__1::complex.34"* %72 to i8*
  %77 = bitcast %"class.std::__1::complex.34"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #10
  %78 = load %"class.std::__1::complex.34"*, %"class.std::__1::complex.34"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"class.std::__1::complex.34"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"class.std::__1::complex.34"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"class.std::__1::complex.34"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.51"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.15"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.15"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.15"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector.15"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.51"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.51"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to %"class.std::__1::vector.15"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.15"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.15"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.15"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.15"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.15"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.15"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.15"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %70, align 8
  %72 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.15"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.15"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.15"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.15"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.15"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector.15"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.15"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast float** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast float** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast float** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast float** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.15"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector.15"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.15"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.15"*, %"class.std::__1::vector.15"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.15"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.15"*
  %106 = icmp eq %"class.std::__1::vector.15"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.15"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %109, i64 0, i32 0, i32 0
  %111 = load float*, float** %110, align 8
  %112 = icmp eq float* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint float* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast float** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast float* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #9
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.15"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #9
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.15"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.58"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast double** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.58"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.58"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to %"class.std::__1::vector"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.58", %"class.std::__1::vector.58"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %70, align 8
  %72 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast double** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast double** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast double** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast double** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector"*
  %106 = icmp eq %"class.std::__1::vector"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %109, i64 0, i32 0, i32 0
  %111 = load double*, double** %110, align 8
  %112 = icmp eq double* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint double* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast double** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast double* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #9
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #9
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !10}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !12}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !10}
!36 = distinct !{!36, !12}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !12}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !12}
!53 = distinct !{!53, !10}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !12}
!61 = distinct !{!61, !10}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !12}
!69 = distinct !{!69, !10}
!70 = distinct !{!70, !12}
!71 = distinct !{!71, !12}
!72 = distinct !{!72, !12}
!73 = distinct !{!73, !12}
!74 = distinct !{!74, !12}
!75 = distinct !{!75, !12}
!76 = distinct !{!76, !12}
!77 = distinct !{!77, !12}
!78 = distinct !{!78, !12}
!79 = distinct !{!79, !12}
!80 = distinct !{!80, !12}
