; ModuleID = '../../third_party/nasm/asm/listing.c'
source_filename = "../../third_party/nasm/asm/listing.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.lfmt = type { void (i8*)*, void ()*, void (%struct.out_data*)*, void (i32, i32, i8*)*, void (i32, i64)*, void (i32)*, void (i32, i8*, ...)*, void (i64)* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.strlist = type { %struct.hash_table, %struct.strlist_entry*, %struct.strlist_entry**, i64, i64, i8 }
%struct.hash_table = type { %struct.hash_node*, i64, i64, i64 }
%struct.hash_node = type { i64, i8*, i64, i8* }
%struct.strlist_entry = type { %struct.strlist_entry*, i64, i64, %union.intorptr, [1 x i8] }
%union.intorptr = type { i64 }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.pragma_facility = type { i8*, {}* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@nasm_list = internal constant %struct.lfmt { void (i8*)* @list_init, void ()* @list_cleanup, void (%struct.out_data*)* @list_output, void (i32, i32, i8*)* @list_line, void (i32, i64)* @list_uplevel, void (i32)* @list_downlevel, void (i32, i8*, ...)* @list_error, void (i64)* @list_set_offset }, align 8
@lfmt = hidden local_unnamed_addr global %struct.lfmt* @nasm_list, align 8
@list_options = common hidden local_unnamed_addr global i64 0, align 8
@active_list_options = common hidden local_unnamed_addr global i64 0, align 8
@listfp = internal unnamed_addr global %struct._IO_FILE* null, align 8
@.str = private unnamed_addr constant [33 x i8] c"unable to open listing file `%s'\00", align 1
@listline = internal global [1024 x i8] zeroinitializer, align 16
@listlineno = internal unnamed_addr global i32 0, align 4
@list_errors = internal global %struct.strlist* null, align 8
@listlevel = internal unnamed_addr global i32 0, align 4
@suppress = internal unnamed_addr global i32 0, align 4
@listlinep = internal unnamed_addr global i1 false, align 1
@listdata = internal global [80 x i8] zeroinitializer, align 16
@.str.1 = private unnamed_addr constant [5 x i8] c"%6d \00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"%08X %-*s\00", align 1
@listoffset = internal unnamed_addr global i32 0, align 4
@.str.3 = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@listlevel_e = internal unnamed_addr global i32 0, align 4
@.str.5 = private unnamed_addr constant [7 x i8] c"%s<%d>\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@list_emit.fillchars = internal unnamed_addr constant [9 x i8] c" --***XX\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"%6d          \00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c" %s<%d>\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"     \00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@user_nolist = external local_unnamed_addr global i8, align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@zero_buffer = external constant [65536 x i8], align 16
@xdigit = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str.14 = private unnamed_addr constant [4 x i8] c"len\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"res\00", align 1
@.str.18 = private unnamed_addr constant [37 x i8] c"../../third_party/nasm/asm/listing.c\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"<%s %lu>\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"<%s %lXh>\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"size <= 8\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"bin\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"rep\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @list_pragma(%struct.pragma* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 37
  br i1 %4, label %5, label %50

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  br label %8

8:                                                ; preds = %17, %5
  %9 = phi i8* [ %7, %5 ], [ %14, %17 ]
  %10 = phi i8 [ 1, %5 ], [ %18, %17 ]
  %11 = icmp eq i8 %10, 0
  br label %12

12:                                               ; preds = %48, %8
  %13 = phi i8* [ %9, %8 ], [ %14, %48 ]
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  %15 = load i8, i8* %13, align 1
  switch i8 %15, label %19 [
    i8 0, label %50
    i8 43, label %17
    i8 45, label %16
  ]

16:                                               ; preds = %12
  br label %17

17:                                               ; preds = %12, %16
  %18 = phi i8 [ 0, %16 ], [ 1, %12 ]
  br label %8

19:                                               ; preds = %12
  %20 = icmp ugt i8 %15, 96
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = icmp ugt i8 %15, 122
  br i1 %22, label %39, label %34

23:                                               ; preds = %19
  %24 = icmp ugt i8 %15, 64
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = icmp ugt i8 %15, 90
  br i1 %26, label %39, label %34

27:                                               ; preds = %23
  %28 = icmp ugt i8 %15, 47
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = icmp ugt i8 %15, 57
  br i1 %30, label %39, label %34

31:                                               ; preds = %27
  %32 = icmp eq i8 %15, 43
  %33 = sext i1 %32 to i64
  br label %39

34:                                               ; preds = %29, %25, %21
  %35 = phi i8 [ -97, %21 ], [ -39, %25 ], [ 4, %29 ]
  %36 = add nsw i8 %15, %35
  %37 = zext i8 %36 to i64
  %38 = shl i64 1, %37
  br label %39

39:                                               ; preds = %34, %31, %29, %25, %21
  %40 = phi i64 [ %38, %34 ], [ 0, %21 ], [ 0, %25 ], [ 0, %29 ], [ %33, %31 ]
  br i1 %11, label %44, label %41

41:                                               ; preds = %39
  %42 = load i64, i64* @list_options, align 8
  %43 = or i64 %42, %40
  br label %48

44:                                               ; preds = %39
  %45 = xor i64 %40, -1
  %46 = load i64, i64* @list_options, align 8
  %47 = and i64 %46, %45
  br label %48

48:                                               ; preds = %44, %41
  %49 = phi i64 [ %43, %41 ], [ %47, %44 ]
  store i64 %49, i64* @list_options, align 8
  br label %12

50:                                               ; preds = %12, %1
  %51 = phi i32 [ 0, %1 ], [ 1, %12 ]
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @list_init(i8*) #2 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %3 = icmp eq %struct._IO_FILE* %2, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  tail call fastcc void @list_emit() #9
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %6 = tail call i32 @fclose(%struct._IO_FILE* %5) #9
  store %struct._IO_FILE* null, %struct._IO_FILE** @listfp, align 8
  br label %7

7:                                                ; preds = %1, %4
  %8 = icmp eq i8* %0, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %7
  %10 = load i8, i8* %0, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %7, %9
  store %struct._IO_FILE* null, %struct._IO_FILE** @listfp, align 8
  br label %22

13:                                               ; preds = %9
  %14 = load i64, i64* @active_list_options, align 8
  %15 = and i64 %14, 4194304
  %16 = icmp eq i64 %15, 0
  %17 = select i1 %16, i32 1, i32 33
  %18 = tail call %struct._IO_FILE* @nasm_open_write(i8* nonnull %0, i32 %17) #9
  store %struct._IO_FILE* %18, %struct._IO_FILE** @listfp, align 8
  %19 = icmp eq %struct._IO_FILE* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* nonnull %0) #9
  br label %22

21:                                               ; preds = %13
  store i8 0, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @listline, i64 0, i64 0), align 16
  store i32 0, i32* @listlineno, align 4
  store %struct.strlist* null, %struct.strlist** @list_errors, align 8
  store i32 0, i32* @listlevel, align 4
  store i32 0, i32* @suppress, align 4
  br label %22

22:                                               ; preds = %21, %20, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @list_cleanup() #2 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %2 = icmp eq %struct._IO_FILE* %1, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %0
  tail call fastcc void @list_emit()
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %5 = tail call i32 @fclose(%struct._IO_FILE* %4)
  store %struct._IO_FILE* null, %struct._IO_FILE** @listfp, align 8
  br label %6

6:                                                ; preds = %0, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @list_output(%struct.out_data* nocapture readonly) #2 {
  %2 = alloca [24 x i8], align 16
  %3 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #9
  %4 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 1
  %5 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 2
  %6 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 24, i1 false)
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %11 = icmp ne %struct._IO_FILE* %10, null
  %12 = load i32, i32* @suppress, align 4
  %13 = icmp eq i32 %12, 0
  %14 = and i1 %11, %13
  %15 = load i8, i8* @user_nolist, align 1
  %16 = icmp eq i8 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %121

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  switch i32 %22, label %120 [
    i32 2, label %23
    i32 0, label %26
    i32 3, label %70
    i32 5, label %74
    i32 4, label %95
    i32 1, label %99
  ]

23:                                               ; preds = %18
  %24 = icmp ugt i64 %7, 16
  br i1 %24, label %25, label %26

25:                                               ; preds = %23
  tail call fastcc void @list_size(i64 %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i64 %7)
  br label %121

26:                                               ; preds = %23, %18
  %27 = phi i8* [ %20, %18 ], [ getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), %23 ]
  %28 = icmp eq i64 %7, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %121

32:                                               ; preds = %29
  %33 = trunc i64 %9 to i32
  store i32 %33, i32* @listoffset, align 4
  br label %121

34:                                               ; preds = %26
  %35 = icmp eq i8* %27, null
  br i1 %35, label %69, label %36

36:                                               ; preds = %34, %65
  %37 = phi i8* [ %67, %65 ], [ %27, %34 ]
  %38 = phi i64 [ %51, %65 ], [ %9, %34 ]
  %39 = phi i64 [ %40, %65 ], [ %7, %34 ]
  %40 = add i64 %39, -1
  %41 = load i8, i8* %37, align 1
  %42 = lshr i8 %41, 4
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %3, align 16
  %46 = load i8, i8* %37, align 1
  %47 = and i8 %46, 15
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  store i8 %50, i8* %4, align 1
  store i8 0, i8* %5, align 2
  %51 = add i64 %38, 1
  %52 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #11
  %53 = call i64 @strlen(i8* nonnull %3) #11
  %54 = add i64 %53, %52
  %55 = icmp ugt i64 %54, 18
  br i1 %55, label %56, label %60

56:                                               ; preds = %36
  %57 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #9
  %58 = getelementptr [80 x i8], [80 x i8]* @listdata, i64 0, i64 %57
  %59 = bitcast i8* %58 to i16*
  store i16 45, i16* %59, align 1
  tail call fastcc void @list_emit() #9
  br label %60

60:                                               ; preds = %56, %36
  %61 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = trunc i64 %38 to i32
  store i32 %64, i32* @listoffset, align 4
  br label %65

65:                                               ; preds = %60, %63
  %66 = call i8* @strcat(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), i8* nonnull %3) #9
  %67 = getelementptr inbounds i8, i8* %37, i64 1
  %68 = icmp eq i64 %40, 0
  br i1 %68, label %121, label %36

69:                                               ; preds = %34
  tail call fastcc void @list_size(i64 %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i64 %7)
  br label %121

70:                                               ; preds = %18
  %71 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %72 = load i64, i64* %71, align 8
  %73 = trunc i64 %7 to i32
  tail call fastcc void @list_address(i64 %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i64 %72, i32 %73)
  br label %121

74:                                               ; preds = %18
  store i8 91, i8* %3, align 16
  %75 = shl i64 %7, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 115, i64 %75, i1 false)
  %76 = or i64 %75, 1
  %77 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 %76
  store i8 93, i8* %77, align 1
  %78 = add i64 %75, 2
  %79 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 %78
  store i8 0, i8* %79, align 2
  %80 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #11
  %81 = call i64 @strlen(i8* nonnull %3) #11
  %82 = add i64 %81, %80
  %83 = icmp ugt i64 %82, 18
  br i1 %83, label %84, label %88

84:                                               ; preds = %74
  %85 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #9
  %86 = getelementptr [80 x i8], [80 x i8]* @listdata, i64 0, i64 %85
  %87 = bitcast i8* %86 to i16*
  store i16 45, i16* %87, align 1
  tail call fastcc void @list_emit() #9
  br label %88

88:                                               ; preds = %84, %74
  %89 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %88
  %92 = trunc i64 %9 to i32
  store i32 %92, i32* @listoffset, align 4
  br label %93

93:                                               ; preds = %88, %91
  %94 = call i8* @strcat(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), i8* nonnull %3) #9
  br label %121

95:                                               ; preds = %18
  %96 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %97 = load i64, i64* %96, align 8
  %98 = trunc i64 %7 to i32
  tail call fastcc void @list_address(i64 %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i64 %97, i32 %98)
  br label %121

99:                                               ; preds = %18
  %100 = icmp ugt i64 %7, 8
  br i1 %100, label %101, label %102

101:                                              ; preds = %99
  tail call fastcc void @list_size(i64 %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0), i64 %7)
  br label %121

102:                                              ; preds = %99
  %103 = shl i64 %7, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 63, i64 %103, i1 false)
  %104 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 %103
  store i8 0, i8* %104, align 2
  %105 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #11
  %106 = call i64 @strlen(i8* nonnull %3) #11
  %107 = add i64 %106, %105
  %108 = icmp ugt i64 %107, 18
  br i1 %108, label %109, label %113

109:                                              ; preds = %102
  %110 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #9
  %111 = getelementptr [80 x i8], [80 x i8]* @listdata, i64 0, i64 %110
  %112 = bitcast i8* %111 to i16*
  store i16 45, i16* %112, align 1
  tail call fastcc void @list_emit() #9
  br label %113

113:                                              ; preds = %109, %102
  %114 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %113
  %117 = trunc i64 %9 to i32
  store i32 %117, i32* @listoffset, align 4
  br label %118

118:                                              ; preds = %113, %116
  %119 = call i8* @strcat(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), i8* nonnull %3) #9
  br label %121

120:                                              ; preds = %18
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18, i64 0, i64 0), i32 271) #12
  unreachable

121:                                              ; preds = %65, %25, %70, %93, %95, %69, %32, %118, %101, %29, %1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @list_line(i32, i32, i8*) #2 {
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  %6 = load i8, i8* @user_nolist, align 1
  %7 = icmp eq i8 %6, 0
  %8 = and i1 %5, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  tail call fastcc void @list_emit()
  %10 = icmp sgt i32 %1, -1
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  store i32 %1, i32* @listlineno, align 4
  br label %12

12:                                               ; preds = %11, %9
  store i1 true, i1* @listlinep, align 1
  %13 = tail call i64 @strlcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @listline, i64 0, i64 0), i8* %2, i64 1021) #9
  store i32 3026478, i32* bitcast (i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @listline, i64 0, i64 1020) to i32*), align 4
  %14 = load i32, i32* @listlevel, align 4
  store i32 %14, i32* @listlevel_e, align 4
  br label %15

15:                                               ; preds = %3, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @list_uplevel(i32, i64) #2 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %4 = icmp eq %struct._IO_FILE* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  switch i32 %0, label %19 [
    i32 3, label %6
    i32 4, label %11
    i32 2, label %16
  ]

6:                                                ; preds = %5
  %7 = load i32, i32* @suppress, align 4
  %8 = or i32 %7, 1
  store i32 %8, i32* @suppress, align 4
  %9 = load i32, i32* @listoffset, align 4
  %10 = sext i32 %9 to i64
  tail call fastcc void @list_size(i64 %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0), i64 %1)
  br label %22

11:                                               ; preds = %5
  %12 = load i32, i32* @suppress, align 4
  %13 = or i32 %12, 2
  store i32 %13, i32* @suppress, align 4
  %14 = load i32, i32* @listoffset, align 4
  %15 = sext i32 %14 to i64
  tail call fastcc void @list_size(i64 %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 %1)
  br label %22

16:                                               ; preds = %5
  %17 = load i32, i32* @listlevel, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* @listlevel, align 4
  br label %22

19:                                               ; preds = %5
  %20 = load i32, i32* @listlevel, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* @listlevel, align 4
  br label %22

22:                                               ; preds = %2, %19, %16, %11, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @list_downlevel(i32) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %3 = icmp eq %struct._IO_FILE* %2, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %1
  switch i32 %0, label %11 [
    i32 3, label %5
    i32 4, label %8
  ]

5:                                                ; preds = %4
  %6 = load i32, i32* @suppress, align 4
  %7 = and i32 %6, -2
  store i32 %7, i32* @suppress, align 4
  br label %14

8:                                                ; preds = %4
  %9 = load i32, i32* @suppress, align 4
  %10 = and i32 %9, -3
  store i32 %10, i32* @suppress, align 4
  br label %14

11:                                               ; preds = %4
  %12 = load i32, i32* @listlevel, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* @listlevel, align 4
  br label %14

14:                                               ; preds = %1, %11, %8, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @list_error(i32, i8*, ...) #2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %8 = icmp eq %struct._IO_FILE* %7, null
  br i1 %8, label %34, label %9

9:                                                ; preds = %2
  %10 = load %struct.strlist*, %struct.strlist** @list_errors, align 8
  %11 = icmp eq %struct.strlist* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = tail call noalias %struct.strlist* @strlist_alloc(i1 zeroext false) #9
  store %struct.strlist* %13, %struct.strlist** @list_errors, align 8
  br label %14

14:                                               ; preds = %9, %12
  call void @llvm.va_start(i8* nonnull %4)
  %15 = load %struct.strlist*, %struct.strlist** @list_errors, align 8
  %16 = call %struct.strlist_entry* @strlist_vprintf(%struct.strlist* %15, i8* %1, %struct.__va_list_tag* nonnull %5) #9
  call void @llvm.va_end(i8* nonnull %4)
  %17 = zext i32 %0 to i64
  %18 = load %struct.strlist*, %struct.strlist** @list_errors, align 8
  %19 = icmp eq %struct.strlist* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.strlist, %struct.strlist* %18, i64 0, i32 1
  %22 = load %struct.strlist_entry*, %struct.strlist_entry** %21, align 8
  %23 = icmp eq %struct.strlist_entry* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.strlist, %struct.strlist* %18, i64 0, i32 2
  %26 = bitcast %struct.strlist_entry*** %25 to %struct.strlist_entry**
  %27 = load %struct.strlist_entry*, %struct.strlist_entry** %26, align 8
  br label %28

28:                                               ; preds = %14, %20, %24
  %29 = phi %struct.strlist_entry* [ %27, %24 ], [ null, %20 ], [ null, %14 ]
  %30 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %29, i64 0, i32 3, i32 0
  store i64 %17, i64* %30, align 8
  %31 = and i32 %0, 7
  %32 = icmp ugt i32 %31, 4
  br i1 %32, label %33, label %34

33:                                               ; preds = %28
  call fastcc void @list_emit()
  br label %34

34:                                               ; preds = %28, %33, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @list_set_offset(i64) #3 {
  %2 = trunc i64 %0 to i32
  store i32 %2, i32* @listoffset, align 4
  ret void
}

declare %struct._IO_FILE* @nasm_open_write(i8*, i32) local_unnamed_addr #4

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @list_emit() unnamed_addr #2 {
  %1 = load i1, i1* @listlinep, align 1
  %2 = xor i1 %1, true
  %3 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %4 = icmp eq i8 %3, 0
  %5 = and i1 %4, %2
  br i1 %5, label %40, label %6

6:                                                ; preds = %0
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %8 = load i32, i32* @listlineno, align 4
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %8)
  %10 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %11 = icmp eq i8 %10, 0
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  br i1 %11, label %16, label %13

13:                                               ; preds = %6
  %14 = load i32, i32* @listoffset, align 4
  %15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %14, i32 19, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0))
  br label %18

16:                                               ; preds = %6
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 28, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0))
  br label %18

18:                                               ; preds = %16, %13
  %19 = load i32, i32* @listlevel_e, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %18
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %23 = load i32, i32* @listlevel, align 4
  %24 = icmp slt i32 %23, 10
  %25 = select i1 %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* %25, i32 %19)
  br label %32

27:                                               ; preds = %18
  %28 = load i1, i1* @listlinep, align 1
  br i1 %28, label %29, label %37

29:                                               ; preds = %27
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %30)
  br label %32

32:                                               ; preds = %29, %21
  %33 = load i1, i1* @listlinep, align 1
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %36 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @listline, i64 0, i64 0))
  br label %37

37:                                               ; preds = %27, %34, %32
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %39 = tail call i32 @putc(i32 10, %struct._IO_FILE* %38)
  store i1 false, i1* @listlinep, align 1
  store i8 0, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  br label %40

40:                                               ; preds = %0, %37
  %41 = load %struct.strlist*, %struct.strlist** @list_errors, align 8
  %42 = icmp eq %struct.strlist* %41, null
  br i1 %42, label %112, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.strlist, %struct.strlist* %41, i64 0, i32 1
  %45 = load %struct.strlist_entry*, %struct.strlist_entry** %44, align 8
  %46 = icmp eq %struct.strlist_entry* %45, null
  br i1 %46, label %111, label %47

47:                                               ; preds = %43, %104
  %48 = phi %struct.strlist_entry* [ %109, %104 ], [ %45, %43 ]
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %50 = load i32, i32* @listlineno, align 4
  %51 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i32 %50)
  %52 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %48, i64 0, i32 3, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = and i64 %53, 7
  %55 = getelementptr inbounds [9 x i8], [9 x i8]* @list_emit.fillchars, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %59 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %58)
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %61 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %60)
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %63 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %62)
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %65 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %64)
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %67 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %66)
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %69 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %68)
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %71 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %70)
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %73 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %72)
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %75 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %74)
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %77 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %76)
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %79 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %78)
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %81 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %80)
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %83 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %82)
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %85 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %84)
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %87 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %86)
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %89 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %88)
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %91 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %90)
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %93 = tail call i32 @putc(i32 %57, %struct._IO_FILE* %92)
  %94 = load i32, i32* @listlevel_e, align 4
  %95 = icmp eq i32 %94, 0
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  br i1 %95, label %102, label %97

97:                                               ; preds = %47
  %98 = load i32, i32* @listlevel, align 4
  %99 = icmp slt i32 %98, 10
  %100 = select i1 %99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)
  %101 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* %100, i32 %94)
  br label %104

102:                                              ; preds = %47
  %103 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %96)
  br label %104

104:                                              ; preds = %102, %97
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @listfp, align 8
  %106 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %48, i64 0, i32 4, i64 0
  %107 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i8* %106)
  %108 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %48, i64 0, i32 0
  %109 = load %struct.strlist_entry*, %struct.strlist_entry** %108, align 8
  %110 = icmp eq %struct.strlist_entry* %109, null
  br i1 %110, label %111, label %47

111:                                              ; preds = %104, %43
  tail call void @strlist_free(%struct.strlist** nonnull @list_errors) #9
  br label %112

112:                                              ; preds = %40, %111
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #5

declare void @strlist_free(%struct.strlist**) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @list_size(i64, i8*, i64) unnamed_addr #2 {
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = load i64, i64* @active_list_options, align 8
  %7 = and i64 %6, 8
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i64 0, i64 0)
  %10 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %5, i64 64, i8* %9, i8* %1, i64 %2) #9
  %11 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #11
  %12 = call i64 @strlen(i8* nonnull %5) #11
  %13 = add i64 %12, %11
  %14 = icmp ugt i64 %13, 18
  br i1 %14, label %15, label %19

15:                                               ; preds = %3
  %16 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #9
  %17 = getelementptr [80 x i8], [80 x i8]* @listdata, i64 0, i64 %16
  %18 = bitcast i8* %17 to i16*
  store i16 45, i16* %18, align 1
  tail call fastcc void @list_emit() #9
  br label %19

19:                                               ; preds = %15, %3
  %20 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = trunc i64 %0 to i32
  store i32 %23, i32* @listoffset, align 4
  br label %24

24:                                               ; preds = %19, %22
  %25 = call i8* @strcat(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), i8* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @list_address(i64, i8* nocapture readonly, i64, i32) unnamed_addr #2 {
  %5 = alloca [20 x i8], align 16
  %6 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %6) #9
  %7 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 1
  %8 = icmp sgt i32 %3, 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 20, i1 false)
  br i1 %8, label %9, label %10, !prof !2

9:                                                ; preds = %4
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i64 0, i64 0)) #12
  unreachable

10:                                               ; preds = %4
  %11 = load i8, i8* %1, align 1
  store i8 %11, i8* %6, align 16
  %12 = icmp eq i32 %3, 0
  br i1 %12, label %60, label %13

13:                                               ; preds = %10
  %14 = and i32 %3, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %13
  %17 = add nsw i32 %3, -1
  %18 = lshr i64 %2, 4
  %19 = and i64 %18, 15
  %20 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %7, align 1
  %22 = and i64 %2, 15
  %23 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 2
  store i8 %24, i8* %25, align 2
  %26 = ashr i64 %2, 8
  %27 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 3
  br label %28

28:                                               ; preds = %13, %16
  %29 = phi i8* [ undef, %13 ], [ %27, %16 ]
  %30 = phi i8* [ %7, %13 ], [ %27, %16 ]
  %31 = phi i32 [ %3, %13 ], [ %17, %16 ]
  %32 = phi i64 [ %2, %13 ], [ %26, %16 ]
  %33 = icmp eq i32 %3, 1
  br i1 %33, label %60, label %34

34:                                               ; preds = %28, %34
  %35 = phi i8* [ %58, %34 ], [ %30, %28 ]
  %36 = phi i32 [ %48, %34 ], [ %31, %28 ]
  %37 = phi i64 [ %57, %34 ], [ %32, %28 ]
  %38 = lshr i64 %37, 4
  %39 = and i64 %38, 15
  %40 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %35, align 1
  %42 = and i64 %37, 15
  %43 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %35, i64 1
  store i8 %44, i8* %45, align 1
  %46 = ashr i64 %37, 8
  %47 = getelementptr inbounds i8, i8* %35, i64 2
  %48 = add nsw i32 %36, -2
  %49 = lshr i64 %46, 4
  %50 = and i64 %49, 15
  %51 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %47, align 1
  %53 = and i64 %46, 15
  %54 = getelementptr inbounds [17 x i8], [17 x i8]* @xdigit, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %35, i64 3
  store i8 %55, i8* %56, align 1
  %57 = ashr i64 %37, 16
  %58 = getelementptr inbounds i8, i8* %35, i64 4
  %59 = icmp eq i32 %48, 0
  br i1 %59, label %60, label %34

60:                                               ; preds = %28, %34, %10
  %61 = phi i8* [ %7, %10 ], [ %29, %28 ], [ %58, %34 ]
  %62 = getelementptr inbounds i8, i8* %1, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %63, i8* %61, align 1
  store i8 0, i8* %64, align 1
  %65 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #11
  %66 = call i64 @strlen(i8* nonnull %6) #11
  %67 = add i64 %66, %65
  %68 = icmp ugt i64 %67, 18
  br i1 %68, label %69, label %73

69:                                               ; preds = %60
  %70 = tail call i64 @strlen(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0)) #9
  %71 = getelementptr [80 x i8], [80 x i8]* @listdata, i64 0, i64 %70
  %72 = bitcast i8* %71 to i16*
  store i16 45, i16* %72, align 1
  tail call fastcc void @list_emit() #9
  br label %73

73:                                               ; preds = %69, %60
  %74 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), align 16
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %73
  %77 = trunc i64 %0 to i32
  store i32 %77, i32* @listoffset, align 4
  br label %78

78:                                               ; preds = %73, %76
  %79 = call i8* @strcat(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @listdata, i64 0, i64 0), i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %6) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i8* @strcat(i8* returned, i8* nocapture readonly) local_unnamed_addr #5

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #6

; Function Attrs: nofree
declare i64 @strlcpy(i8*, i8*, i64) local_unnamed_addr #8

declare noalias %struct.strlist* @strlist_alloc(i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #9

declare %struct.strlist_entry* @strlist_vprintf(%struct.strlist*, i8*, %struct.__va_list_tag*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #9

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #10

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nofree nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { cold noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
