; ModuleID = '../../third_party/skia/src/pdf/SkClusterator.cpp'
source_filename = "../../third_party/skia/src/pdf/SkClusterator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkClusterator = type { i32*, i8*, i32, i32, i8, i32 }
%class.SkGlyphRun = type { %class.SkZip, %class.SkSpan, %class.SkSpan.1, %class.SkSpan.2, %class.SkFont }
%class.SkZip = type { %"class.std::__1::tuple", i64 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.0" }
%"class.std::__1::__tuple_leaf" = type { i16* }
%"class.std::__1::__tuple_leaf.0" = type { %struct.SkPoint* }
%struct.SkPoint = type { float, float }
%class.SkSpan = type { i8*, i64 }
%class.SkSpan.1 = type { i32*, i64 }
%class.SkSpan.2 = type { %struct.SkPoint*, i64 }
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%"struct.SkClusterator::Cluster" = type { i8*, i32, i32, i32 }

@_ZN13SkClusteratorC1ERK10SkGlyphRun = hidden unnamed_addr alias void (%class.SkClusterator*, %class.SkGlyphRun*), void (%class.SkClusterator*, %class.SkGlyphRun*)* @_ZN13SkClusteratorC2ERK10SkGlyphRun

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkClusteratorC2ERK10SkGlyphRun(%class.SkClusterator* nocapture, %class.SkGlyphRun* nocapture readonly dereferenceable(96)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkGlyphRun, %class.SkGlyphRun* %1, i64 0, i32 2, i32 0
  %5 = load i32*, i32** %4, align 8
  store i32* %5, i32** %3, align 8
  %6 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.SkGlyphRun, %class.SkGlyphRun* %1, i64 0, i32 1, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.SkGlyphRun, %class.SkGlyphRun* %1, i64 0, i32 1, i32 1
  %11 = bitcast i8** %6 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 2
  %13 = getelementptr inbounds %class.SkGlyphRun, %class.SkGlyphRun* %1, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %12, align 8
  %16 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 3
  %17 = load i64, i64* %10, align 8
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 4
  %20 = icmp eq i32* %5, null
  %21 = icmp ult i32 %15, 2
  %22 = or i1 %20, %21
  br i1 %22, label %43, label %23

23:                                               ; preds = %2
  %24 = load i32, i32* %5, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %43, label %26

26:                                               ; preds = %23
  %27 = add i64 %14, 4294967295
  %28 = and i64 %27, 4294967295
  %29 = getelementptr inbounds i32, i32* %5, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %43

32:                                               ; preds = %26, %36
  %33 = phi i64 [ %42, %36 ], [ 0, %26 ]
  %34 = phi i32 [ %40, %36 ], [ %24, %26 ]
  %35 = icmp eq i64 %33, %28
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = add nuw i64 %33, 1
  %38 = and i64 %37, 4294967295
  %39 = getelementptr inbounds i32, i32* %5, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp ugt i32 %40, %34
  %42 = add nuw nsw i64 %33, 1
  br i1 %41, label %43, label %32

43:                                               ; preds = %36, %32, %26, %23, %2
  %44 = phi i8 [ 0, %2 ], [ 0, %23 ], [ 0, %26 ], [ 0, %36 ], [ 1, %32 ]
  store i8 %44, i8* %19, align 8
  %45 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %0, i64 0, i32 5
  store i32 0, i32* %45, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13SkClusterator4nextEv(%"struct.SkClusterator::Cluster"* noalias nocapture sret, %class.SkClusterator* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %1, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = bitcast %"struct.SkClusterator::Cluster"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false)
  br label %108

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %1, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %1, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %24

18:                                               ; preds = %14, %10
  %19 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 0
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 1
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 2
  %22 = add nuw i32 %4, 1
  store i32 %22, i32* %3, align 4
  store i32 %4, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 3
  store i32 1, i32* %23, align 8
  br label %108

24:                                               ; preds = %14
  %25 = zext i32 %4 to i64
  %26 = getelementptr inbounds i32, i32* %12, i64 %25
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %32, %24
  %29 = phi i32 [ %30, %32 ], [ %4, %24 ]
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  %31 = icmp ult i32 %30, %6
  br i1 %31, label %32, label %37

32:                                               ; preds = %28
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds i32, i32* %12, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %27, %35
  br i1 %36, label %28, label %37

37:                                               ; preds = %32, %28
  %38 = sub i32 %30, %4
  %39 = getelementptr inbounds %class.SkClusterator, %class.SkClusterator* %1, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %6 to i64
  %42 = add nsw i64 %41, -1
  %43 = and i64 %41, 3
  %44 = icmp ult i64 %42, 3
  br i1 %44, label %47, label %45

45:                                               ; preds = %37
  %46 = sub nsw i64 %41, %43
  br label %74

47:                                               ; preds = %74, %37
  %48 = phi i32 [ undef, %37 ], [ %104, %74 ]
  %49 = phi i64 [ 0, %37 ], [ %105, %74 ]
  %50 = phi i32 [ %40, %37 ], [ %104, %74 ]
  %51 = icmp eq i64 %43, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %47, %52
  %53 = phi i64 [ %62, %52 ], [ %49, %47 ]
  %54 = phi i32 [ %61, %52 ], [ %50, %47 ]
  %55 = phi i64 [ %63, %52 ], [ %43, %47 ]
  %56 = getelementptr inbounds i32, i32* %12, i64 %53
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, %27
  %59 = icmp ult i32 %57, %54
  %60 = and i1 %58, %59
  %61 = select i1 %60, i32 %57, i32 %54
  %62 = add nuw nsw i64 %53, 1
  %63 = add i64 %55, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %52, !llvm.loop !2

65:                                               ; preds = %52, %47
  %66 = phi i32 [ %48, %47 ], [ %61, %52 ]
  %67 = sub i32 %66, %27
  %68 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 0
  %69 = zext i32 %27 to i64
  %70 = getelementptr inbounds i8, i8* %16, i64 %69
  store i8* %70, i8** %68, align 8
  %71 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 1
  store i32 %67, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 2
  store i32 %4, i32* %72, align 4
  %73 = getelementptr inbounds %"struct.SkClusterator::Cluster", %"struct.SkClusterator::Cluster"* %0, i64 0, i32 3
  store i32 %38, i32* %73, align 8
  br label %108

74:                                               ; preds = %74, %45
  %75 = phi i64 [ 0, %45 ], [ %105, %74 ]
  %76 = phi i32 [ %40, %45 ], [ %104, %74 ]
  %77 = phi i64 [ %46, %45 ], [ %106, %74 ]
  %78 = getelementptr inbounds i32, i32* %12, i64 %75
  %79 = load i32, i32* %78, align 4
  %80 = icmp ugt i32 %79, %27
  %81 = icmp ult i32 %79, %76
  %82 = and i1 %80, %81
  %83 = select i1 %82, i32 %79, i32 %76
  %84 = or i64 %75, 1
  %85 = getelementptr inbounds i32, i32* %12, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = icmp ugt i32 %86, %27
  %88 = icmp ult i32 %86, %83
  %89 = and i1 %87, %88
  %90 = select i1 %89, i32 %86, i32 %83
  %91 = or i64 %75, 2
  %92 = getelementptr inbounds i32, i32* %12, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = icmp ugt i32 %93, %27
  %95 = icmp ult i32 %93, %90
  %96 = and i1 %94, %95
  %97 = select i1 %96, i32 %93, i32 %90
  %98 = or i64 %75, 3
  %99 = getelementptr inbounds i32, i32* %12, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp ugt i32 %100, %27
  %102 = icmp ult i32 %100, %97
  %103 = and i1 %101, %102
  %104 = select i1 %103, i32 %100, i32 %97
  %105 = add nuw nsw i64 %75, 4
  %106 = add i64 %77, -4
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %47, label %74

108:                                              ; preds = %65, %18, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
