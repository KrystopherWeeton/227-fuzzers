; ModuleID = '../../third_party/skia/src/core/SkRecords.cpp'
source_filename = "../../third_party/skia/src/core/SkRecords.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.SkRecords::PreCachedPath" = type { %class.SkPath.base, i8 }
%class.SkPath.base = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%"struct.SkRecords::TypedMatrix" = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }

@_ZN9SkRecords13PreCachedPathC1ERK6SkPath = hidden unnamed_addr alias void (%"struct.SkRecords::PreCachedPath"*, %class.SkPath*), void (%"struct.SkRecords::PreCachedPath"*, %class.SkPath*)* @_ZN9SkRecords13PreCachedPathC2ERK6SkPath
@_ZN9SkRecords11TypedMatrixC1ERK8SkMatrix = hidden unnamed_addr alias void (%"struct.SkRecords::TypedMatrix"*, %class.SkMatrix*), void (%"struct.SkRecords::TypedMatrix"*, %class.SkMatrix*)* @_ZN9SkRecords11TypedMatrixC2ERK8SkMatrix

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkRecords13PreCachedPathC2ERK6SkPath(%"struct.SkRecords::PreCachedPath"*, %class.SkPath* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.SkRecords::PreCachedPath"* %0 to %class.SkPath*
  tail call void @_ZN6SkPathC2ERKS_(%class.SkPath* %3, %class.SkPath* dereferenceable(16) %1) #3
  %4 = getelementptr inbounds %"struct.SkRecords::PreCachedPath", %"struct.SkRecords::PreCachedPath"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.SkPathRef*, %class.SkPathRef** %4, align 8
  %6 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 9
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 3, i32 0
  %12 = load %struct.SkPoint*, %struct.SkPoint** %11, align 8
  %13 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 3, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %10, %struct.SkPoint* %12, i32 %14) #3
  %16 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 10
  %17 = zext i1 %15 to i8
  store i8 %17, i8* %16, align 1
  store i8 0, i8* %6, align 8
  br label %18

18:                                               ; preds = %2, %9
  %19 = tail call i32 @_ZNK6SkPath15getGenerationIDEv(%class.SkPath* %3) #3
  ret void
}

declare void @_ZN6SkPathC2ERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) unnamed_addr #1

declare i32 @_ZNK6SkPath15getGenerationIDEv(%class.SkPath*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkRecords11TypedMatrixC2ERK8SkMatrix(%"struct.SkRecords::TypedMatrix"*, %class.SkMatrix* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.SkRecords::TypedMatrix"* %0 to i8*
  %4 = bitcast %class.SkMatrix* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 40, i1 false)
  %5 = getelementptr inbounds %"struct.SkRecords::TypedMatrix", %"struct.SkRecords::TypedMatrix"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.SkRecords::TypedMatrix", %"struct.SkRecords::TypedMatrix"* %0, i64 0, i32 0
  %11 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %10) #3
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %5, align 4
  br label %13

13:                                               ; preds = %2, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
