; ModuleID = '../../third_party/skia/src/utils/SkClipStackUtils.cpp'
source_filename = "../../third_party/skia/src/utils/SkClipStackUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkClipStack = type <{ %class.SkDeque, i32, %struct.SkRect, [4 x i8] }>
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%struct.SkRect = type { float, float, float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"class.SkClipStack::Iter" = type { %class.SkClipStack*, %"class.SkDeque::Iter" }
%"class.SkDeque::Iter" = type { %"struct.SkDeque::Block"*, i8*, i64 }
%"class.SkClipStack::Element" = type { %class.SkTLazy, %class.SkRRect, %class.sk_sp.13, i32, i32, i32, i8, i32, %struct.SkRect, i8, i32, %class.GrProxyProvider*, %class.SkTArray }
%class.SkTLazy = type { [16 x i8], %class.SkPath* }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%class.sk_sp.13 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.GrProxyProvider = type opaque
%class.SkTArray = type { %class.GrUniqueKey*, i64 }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.14, i8* }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.sk_sp.14 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.15, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.15 = type { %"struct.std::__1::atomic" }

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z18SkClipStack_AsPathRK11SkClipStackP6SkPath(%class.SkClipStack* dereferenceable(80), %class.SkPath*) local_unnamed_addr #0 {
  %3 = alloca %"class.SkClipStack::Iter", align 8
  %4 = alloca %class.SkPath, align 8
  %5 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %1) #4
  %6 = getelementptr inbounds %class.SkPath, %class.SkPath* %1, i64 0, i32 4
  %7 = load i8, i8* %6, align 2
  %8 = or i8 %7, 3
  store i8 %8, i8* %6, align 2
  %9 = bitcast %"class.SkClipStack::Iter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #4
  %10 = bitcast %"class.SkClipStack::Iter"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  call void @_ZN11SkClipStack4IterC1ERKS_NS0_9IterStartE(%"class.SkClipStack::Iter"* nonnull %3, %class.SkClipStack* dereferenceable(80) %0, i32 0) #4
  %11 = call %"class.SkClipStack::Element"* @_ZN11SkClipStack4Iter4nextEv(%"class.SkClipStack::Iter"* nonnull %3) #4
  %12 = icmp eq %"class.SkClipStack::Element"* %11, null
  br i1 %12, label %37, label %13

13:                                               ; preds = %2
  %14 = bitcast %class.SkPath* %4 to i8*
  %15 = bitcast %class.SkPath* %4 to i8*
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.SkClipStack::Element"* [ %11, %13 ], [ %35, %34 ]
  %18 = getelementptr inbounds %"class.SkClipStack::Element", %"class.SkClipStack::Element"* %17, i64 0, i32 5
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 4
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #4
  %22 = load i32, i32* %18, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  call void @_ZNK11SkClipStack7Element17asDeviceSpacePathEP6SkPath(%"class.SkClipStack::Element"* nonnull %17, %class.SkPath* nonnull %4) #4
  br label %25

25:                                               ; preds = %21, %24
  %26 = getelementptr inbounds %"class.SkClipStack::Element", %"class.SkClipStack::Element"* %17, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 5
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %1, %class.SkPath* nonnull dereferenceable(16) %4) #4
  br label %33

31:                                               ; preds = %25
  %32 = call zeroext i1 @_Z2OpRK6SkPathS1_8SkPathOpPS_(%class.SkPath* dereferenceable(16) %1, %class.SkPath* nonnull dereferenceable(16) %4, i32 %27, %class.SkPath* %1) #4
  br label %33

33:                                               ; preds = %31, %29
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #4
  br label %34

34:                                               ; preds = %33, %16
  %35 = call %"class.SkClipStack::Element"* @_ZN11SkClipStack4Iter4nextEv(%"class.SkClipStack::Iter"* nonnull %3) #4
  %36 = icmp eq %"class.SkClipStack::Element"* %35, null
  br i1 %36, label %37, label %16

37:                                               ; preds = %34, %2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #4
  ret void
}

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN11SkClipStack4IterC1ERKS_NS0_9IterStartE(%"class.SkClipStack::Iter"*, %class.SkClipStack* dereferenceable(80), i32) unnamed_addr #1

declare %"class.SkClipStack::Element"* @_ZN11SkClipStack4Iter4nextEv(%"class.SkClipStack::Iter"*) local_unnamed_addr #1

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

declare void @_ZNK11SkClipStack7Element17asDeviceSpacePathEP6SkPath(%"class.SkClipStack::Element"*, %class.SkPath*) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_Z2OpRK6SkPathS1_8SkPathOpPS_(%class.SkPath* dereferenceable(16), %class.SkPath* dereferenceable(16), i32, %class.SkPath*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
