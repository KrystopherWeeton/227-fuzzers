; ModuleID = '../../native_client/src/shared/platform/posix/nacl_secure_random.c'
source_filename = "../../native_client/src/shared/platform/posix/nacl_secure_random.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.NaClSecureRngIfVtbl = type { void (%struct.NaClSecureRngIf*)*, i8 (%struct.NaClSecureRngIf*)*, i32 (%struct.NaClSecureRngIf*)*, void (%struct.NaClSecureRngIf*, i8*, i64)*, i32 (%struct.NaClSecureRngIf*, i32)* }
%struct.NaClSecureRngIf = type { %struct.NaClSecureRngIfVtbl* }
%struct.NaClSecureRng = type { %struct.NaClSecureRngIf, [1024 x i8], i32 }

@urandom_d = internal unnamed_addr global i32 -1, align 4
@.str = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.1 = private unnamed_addr constant [67 x i8] c"../../native_client/src/shared/platform/posix/nacl_secure_random.c\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"urandom_d == -1\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"/dev/urandom\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"Cannot open system random source %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"NaClSecureRngModuleFini: close() failed with errno %d\0A\00", align 1
@kNaClSecureRngVtbl = internal constant %struct.NaClSecureRngIfVtbl { void (%struct.NaClSecureRngIf*)* @NaClSecureRngDtor, i8 (%struct.NaClSecureRngIf*)* @NaClSecureRngGenByte, i32 (%struct.NaClSecureRngIf*)* @NaClSecureRngDefaultGenUint32, void (%struct.NaClSecureRngIf*, i8*, i64)* @NaClSecureRngDefaultGenBytes, i32 (%struct.NaClSecureRngIf*, i32)* @NaClSecureRngDefaultUniform }, align 8
@.str.6 = private unnamed_addr constant [57 x i8] c"NaClSecureRngGenByte: illegal buffer state, nvalid = %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"-1 != urandom_d\00", align 1
@.str.8 = private unnamed_addr constant [77 x i8] c"NaClSecureRngCtor: random descriptor invalid; module initialization failed?\0A\00", align 1
@.str.9 = private unnamed_addr constant [46 x i8] c"NaClSecureRngFilbuf failed, read returned %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSecureRngModuleSetUrandomFd(i32) local_unnamed_addr #0 {
  %2 = load i32, i32* @urandom_d, align 4
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 43, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %5

5:                                                ; preds = %1, %4
  store i32 %0, i32* @urandom_d, align 4
  ret void
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSecureRngModuleInit() local_unnamed_addr #0 {
  %1 = load i32, i32* @urandom_d, align 4
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %3, label %7

3:                                                ; preds = %0
  %4 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i32 0, i32 0) #7
  store i32 %4, i32* @urandom_d, align 4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %7

7:                                                ; preds = %0, %6, %3
  ret void
}

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSecureRngModuleFini() local_unnamed_addr #0 {
  %1 = load i32, i32* @urandom_d, align 4
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %10, label %3

3:                                                ; preds = %0
  %4 = tail call i32 @close(i32 %1) #7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i32* @__errno_location() #8
  %8 = load i32, i32* %7, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 %8) #7
  br label %9

9:                                                ; preds = %3, %6
  store i32 -1, i32* @urandom_d, align 4
  br label %10

10:                                               ; preds = %0, %9
  ret void
}

declare i32 @close(i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @NaClSecureRngCtor(%struct.NaClSecureRng* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.NaClSecureRng, %struct.NaClSecureRng* %0, i64 0, i32 0, i32 0
  store %struct.NaClSecureRngIfVtbl* @kNaClSecureRngVtbl, %struct.NaClSecureRngIfVtbl** %2, align 8
  %3 = getelementptr inbounds %struct.NaClSecureRng, %struct.NaClSecureRng* %0, i64 0, i32 2
  store i32 0, i32* %3, align 8
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @NaClSecureRngTestingCtor(%struct.NaClSecureRng* nocapture readnone, i8* nocapture readnone, i64) local_unnamed_addr #5 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @NaClSecureRngDtor(%struct.NaClSecureRngIf* nocapture) #0 {
  %2 = bitcast %struct.NaClSecureRngIf* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 1032, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @NaClSecureRngGenByte(%struct.NaClSecureRngIf* nocapture) #0 {
  %2 = getelementptr inbounds %struct.NaClSecureRngIf, %struct.NaClSecureRngIf* %0, i64 129
  %3 = bitcast %struct.NaClSecureRngIf* %2 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0), i32 %4) #7
  %7 = load i32, i32* %3, align 8
  br label %8

8:                                                ; preds = %6, %1
  %9 = phi i32 [ %7, %6 ], [ %4, %1 ]
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %25

11:                                               ; preds = %8
  %12 = load i32, i32* @urandom_d, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0)) #7
  tail call void (i8*, ...) @NaClCheckIntern(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0)) #7
  %15 = load i32, i32* @urandom_d, align 4
  br label %16

16:                                               ; preds = %14, %11
  %17 = phi i32 [ %12, %11 ], [ %15, %14 ]
  %18 = getelementptr inbounds %struct.NaClSecureRngIf, %struct.NaClSecureRngIf* %0, i64 1
  %19 = bitcast %struct.NaClSecureRngIf* %18 to i8*
  %20 = tail call i64 @read(i32 %17, i8* %19, i64 1024) #7
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %3, align 8
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %23, label %25

23:                                               ; preds = %16
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9, i64 0, i64 0), i32 %21) #7
  %24 = load i32, i32* %3, align 8
  br label %25

25:                                               ; preds = %23, %16, %8
  %26 = phi i32 [ %24, %23 ], [ %21, %16 ], [ %9, %8 ]
  %27 = getelementptr inbounds %struct.NaClSecureRngIf, %struct.NaClSecureRngIf* %0, i64 1
  %28 = bitcast %struct.NaClSecureRngIf* %27 to [1024 x i8]*
  %29 = add nsw i32 %26, -1
  store i32 %29, i32* %3, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %28, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  ret i8 %32
}

declare i32 @NaClSecureRngDefaultGenUint32(%struct.NaClSecureRngIf*) #1

declare void @NaClSecureRngDefaultGenBytes(%struct.NaClSecureRngIf*, i8*, i64) #1

declare i32 @NaClSecureRngDefaultUniform(%struct.NaClSecureRngIf*, i32) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

declare void @NaClCheckIntern(i8*, ...) local_unnamed_addr #1

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
