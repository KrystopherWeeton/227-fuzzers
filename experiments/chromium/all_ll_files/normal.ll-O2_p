; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/normal.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/normal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::Normal" = type { i32 (...)**, i32, %"class.webrtc::DecoderDatabase"*, %"class.webrtc::BackgroundNoise"*, %"class.webrtc::Expand"*, i64, i16, %"class.webrtc::StatisticsCalculator"* }
%"class.webrtc::DecoderDatabase" = type { i32 (...)**, %"class.std::__1::map", i32, i32, %"class.std::__1::unique_ptr", %"class.rtc::scoped_refptr", %"class.absl::optional" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.webrtc::ComfortNoiseDecoder"* }
%"class.webrtc::ComfortNoiseDecoder" = type <{ i32, i32, i32, [13 x i16], [13 x i16], [13 x i16], [13 x i16], i16, i16, i16, [2 x i8] }>
%"class.rtc::scoped_refptr" = type { %"class.webrtc::AudioDecoderFactory"* }
%"class.webrtc::AudioDecoderFactory" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::AudioCodecPairId" }
%"class.webrtc::AudioCodecPairId" = type { i64 }
%"class.webrtc::BackgroundNoise" = type <{ i32 (...)**, i64, %"class.std::__1::unique_ptr.7", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.webrtc::BackgroundNoise::ChannelParameters"* }
%"struct.webrtc::BackgroundNoise::ChannelParameters" = type { i32, i32, i32, i32, [8 x i16], [9 x i16], i16, i16, i16 }
%"class.webrtc::Expand" = type { i32 (...)**, %"class.webrtc::RandomVector"*, %"class.webrtc::SyncBuffer"*, i8, i32, i64, i32, %"class.webrtc::BackgroundNoise"*, %"class.webrtc::StatisticsCalculator"*, i64, i64, [3 x i64], i32, i32, i8, i64, %"class.std::__1::unique_ptr.28" }
%"class.webrtc::RandomVector" = type opaque
%"class.webrtc::SyncBuffer" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.webrtc::Expand::ChannelParameters"* }
%"struct.webrtc::Expand::ChannelParameters" = type { i16, [7 x i16], [6 x i16], i16, i16, i16, i16, %"class.webrtc::AudioVector", %"class.webrtc::AudioVector", i8, i32 }
%"class.webrtc::AudioVector" = type { i32 (...)**, %"class.std::__1::unique_ptr.31", i64, i64, i64 }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i16* }
%"class.webrtc::StatisticsCalculator" = type <{ i32 (...)**, %"struct.webrtc::NetEqLifetimeStatistics", %"struct.webrtc::NetEqOperationsAndState", i64, i64, i64, i64, i64, i64, i64, i32, [4 x i8], %"class.std::__1::deque", i32, [4 x i8], i64, %"class.webrtc::StatisticsCalculator::PeriodicUmaCount", %"class.webrtc::StatisticsCalculator::PeriodicUmaAverage", %"class.webrtc::StatisticsCalculator::PeriodicUmaCount", i8, [7 x i8] }>
%"struct.webrtc::NetEqLifetimeStatistics" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32 }
%"struct.webrtc::NetEqOperationsAndState" = type <{ i64, i64, i64, i64, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.18" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i32** }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.webrtc::StatisticsCalculator::PeriodicUmaAverage" = type <{ %"class.webrtc::StatisticsCalculator::PeriodicUmaLogger.base", [4 x i8], double, i32, [4 x i8] }>
%"class.webrtc::StatisticsCalculator::PeriodicUmaLogger.base" = type <{ i32 (...)**, %"class.std::__1::basic_string", i32, i32, i32 }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.24 }
%union.anon.24 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::StatisticsCalculator::PeriodicUmaCount" = type { %"class.webrtc::StatisticsCalculator::PeriodicUmaLogger.base", i32 }
%"class.webrtc::AudioMultiVector" = type { i32 (...)**, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"**, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.webrtc::AudioVector"** }

@WebRtcSpl_MaxAbsValueW16 = external local_unnamed_addr constant i16 (i16*, i64)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc6Normal7ProcessEPKsmNS_5NetEq4ModeEPNS_16AudioMultiVectorE(%"class.webrtc::Normal"* nocapture readonly, i16*, i64, i32, %"class.webrtc::AudioMultiVector"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.webrtc::AudioMultiVector", align 8
  %7 = alloca [48 x i16], align 16
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = bitcast %"class.webrtc::AudioMultiVector"* %4 to void (%"class.webrtc::AudioMultiVector"*)***
  %11 = load void (%"class.webrtc::AudioMultiVector"*)**, void (%"class.webrtc::AudioMultiVector"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.webrtc::AudioMultiVector"*)*, void (%"class.webrtc::AudioMultiVector"*)** %11, i64 2
  %13 = load void (%"class.webrtc::AudioMultiVector"*)*, void (%"class.webrtc::AudioMultiVector"*)** %12, align 8
  tail call void %13(%"class.webrtc::AudioMultiVector"* %4) #7
  br label %378

14:                                               ; preds = %5
  %15 = bitcast %"class.webrtc::AudioMultiVector"* %4 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %16 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %17 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %16, i64 14
  %18 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %17, align 8
  %19 = tail call i64 %18(%"class.webrtc::AudioMultiVector"* %4) #7
  %20 = urem i64 %2, %19
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %14
  %23 = bitcast %"class.webrtc::AudioMultiVector"* %4 to void (%"class.webrtc::AudioMultiVector"*)***
  %24 = load void (%"class.webrtc::AudioMultiVector"*)**, void (%"class.webrtc::AudioMultiVector"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.webrtc::AudioMultiVector"*)*, void (%"class.webrtc::AudioMultiVector"*)** %24, i64 2
  %26 = load void (%"class.webrtc::AudioMultiVector"*)*, void (%"class.webrtc::AudioMultiVector"*)** %25, align 8
  tail call void %26(%"class.webrtc::AudioMultiVector"* %4) #7
  br label %378

27:                                               ; preds = %14
  tail call void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"* %4, i16* %1, i64 %2) #7
  %28 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = sdiv i32 %29, 8000
  %31 = add i32 %29, 7999
  %32 = icmp ult i32 %31, 15999
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = ashr i32 %30, 31
  %35 = xor i32 %34, %30
  %36 = tail call i32 @llvm.ctlz.i32(i32 %35, i1 false) #7, !range !2
  %37 = sub nuw nsw i32 37, %36
  br label %38

38:                                               ; preds = %27, %33
  %39 = phi i32 [ %37, %33 ], [ 36, %27 ]
  switch i32 %3, label %376 [
    i32 11, label %40
    i32 1, label %43
    i32 9, label %295
  ]

40:                                               ; preds = %38
  %41 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 7
  %42 = load %"class.webrtc::StatisticsCalculator"*, %"class.webrtc::StatisticsCalculator"** %41, align 8
  tail call void @_ZN6webrtc20StatisticsCalculator14EndExpandEventEi(%"class.webrtc::StatisticsCalculator"* %42, i32 %29) #7
  br label %376

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 4
  %45 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %44, align 8
  %46 = bitcast %"class.webrtc::Expand"* %45 to void (%"class.webrtc::Expand"*)***
  %47 = load void (%"class.webrtc::Expand"*)**, void (%"class.webrtc::Expand"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %47, i64 4
  %49 = load void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %48, align 8
  tail call void %49(%"class.webrtc::Expand"* %45) #7
  %50 = bitcast %"class.webrtc::AudioMultiVector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %50) #7
  %51 = bitcast %"class.webrtc::AudioMultiVector"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 40, i1 false)
  %52 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %53 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %52, i64 14
  %54 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %53, align 8
  %55 = tail call i64 %54(%"class.webrtc::AudioMultiVector"* %4) #7
  call void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"* nonnull %6, i64 %55) #7
  %56 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %44, align 8
  %57 = bitcast %"class.webrtc::Expand"* %56 to i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)***
  %58 = load i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)**, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*** %57, align 8
  %59 = getelementptr inbounds i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)** %58, i64 3
  %60 = load i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)** %59, align 8
  %61 = call i32 %60(%"class.webrtc::Expand"* %56, %"class.webrtc::AudioMultiVector"* nonnull %6) #7
  %62 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %44, align 8
  %63 = bitcast %"class.webrtc::Expand"* %62 to void (%"class.webrtc::Expand"*)***
  %64 = load void (%"class.webrtc::Expand"*)**, void (%"class.webrtc::Expand"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %64, i64 2
  %66 = load void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %65, align 8
  call void %66(%"class.webrtc::Expand"* %62) #7
  %67 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %68 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %67, i64 14
  %69 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %68, align 8
  %70 = call i64 %69(%"class.webrtc::AudioMultiVector"* %4) #7
  %71 = udiv i64 %2, %70
  %72 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %71, i64 2)
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 -1, i64 %74
  %76 = call i8* @_Znam(i64 %75) #8
  %77 = bitcast i8* %76 to i16*
  %78 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %79 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %78, i64 14
  %80 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %79, align 8
  %81 = call i64 %80(%"class.webrtc::AudioMultiVector"* %4) #7
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %93, label %83

83:                                               ; preds = %43
  %84 = load i16 (i16*, i64)*, i16 (i16*, i64)** @WebRtcSpl_MaxAbsValueW16, align 8
  %85 = shl nsw i32 %30, 6
  %86 = sext i32 %85 to i64
  %87 = icmp ult i64 %71, %86
  %88 = select i1 %87, i64 %71, i64 %86
  %89 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 3
  %90 = icmp ugt i64 %70, %2
  %91 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 5
  %92 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 6
  br label %94

93:                                               ; preds = %231, %43
  call void @_ZdaPv(i8* nonnull %76) #8
  call void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %50) #7
  br label %376

94:                                               ; preds = %83, %231
  %95 = phi i64 [ 0, %83 ], [ %232, %231 ]
  %96 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %44, align 8
  %97 = getelementptr inbounds %"class.webrtc::Expand", %"class.webrtc::Expand"* %96, i64 0, i32 16, i32 0, i32 0, i32 0
  %98 = load %"struct.webrtc::Expand::ChannelParameters"*, %"struct.webrtc::Expand::ChannelParameters"** %97, align 8
  %99 = getelementptr inbounds %"struct.webrtc::Expand::ChannelParameters", %"struct.webrtc::Expand::ChannelParameters"* %98, i64 %95, i32 0
  %100 = load i16, i16* %99, align 8
  %101 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 %95) #7
  %102 = bitcast %"class.webrtc::AudioVector"* %101 to void (%"class.webrtc::AudioVector"*, i64, i64, i16*)***
  %103 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)**, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %103, i64 4
  %105 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %104, align 8
  call void %105(%"class.webrtc::AudioVector"* %101, i64 %71, i64 0, i16* nonnull %77) #7
  %106 = call signext i16 %84(i16* nonnull %77, i64 %71) #7
  %107 = sext i16 %106 to i32
  %108 = mul nsw i32 %107, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %94
  %111 = call i32 @llvm.ctlz.i32(i32 %108, i1 false) #7, !range !2
  %112 = add nsw i32 %111, -1
  br label %113

113:                                              ; preds = %94, %110
  %114 = phi i32 [ %112, %110 ], [ 0, %94 ]
  %115 = sub nsw i32 %39, %114
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = call i32 @WebRtcSpl_DotProductWithScale(i16* nonnull %77, i16* nonnull %77, i64 %88, i32 %117) #7
  %119 = zext i32 %117 to i64
  %120 = lshr i64 %88, %119
  %121 = trunc i64 %120 to i32
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %155

123:                                              ; preds = %113
  %124 = sdiv i32 %118, %121
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %155, label %126

126:                                              ; preds = %123
  %127 = load %"class.webrtc::BackgroundNoise"*, %"class.webrtc::BackgroundNoise"** %89, align 8
  %128 = call i32 @_ZNK6webrtc15BackgroundNoise6EnergyEm(%"class.webrtc::BackgroundNoise"* %127, i64 %95) #7
  %129 = icmp sgt i32 %124, %128
  br i1 %129, label %130, label %155

130:                                              ; preds = %126
  %131 = ashr i32 %124, 31
  %132 = xor i32 %131, %124
  %133 = call i32 @llvm.ctlz.i32(i32 %132, i1 false) #7, !range !2
  %134 = trunc i32 %133 to i16
  %135 = add nsw i32 %133, -17
  %136 = icmp ugt i16 %134, 2
  %137 = load %"class.webrtc::BackgroundNoise"*, %"class.webrtc::BackgroundNoise"** %89, align 8
  %138 = call i32 @_ZNK6webrtc15BackgroundNoise6EnergyEm(%"class.webrtc::BackgroundNoise"* %137, i64 %95) #7
  %139 = add nsw i32 %133, -3
  %140 = shl i32 %138, %139
  %141 = sub nsw i32 3, %133
  %142 = ashr i32 %138, %141
  %143 = select i1 %136, i32 %140, i32 %142
  %144 = icmp sgt i32 %135, -1
  %145 = shl i32 %124, %135
  %146 = sub nsw i32 17, %133
  %147 = ashr i32 %124, %146
  %148 = select i1 %144, i32 %145, i32 %147
  %149 = trunc i32 %148 to i16
  %150 = call i32 @WebRtcSpl_DivW32W16(i32 %143, i16 signext %149) #7
  %151 = shl i32 %150, 14
  %152 = call i32 @WebRtcSpl_SqrtFloor(i32 %151) #7
  %153 = icmp slt i32 %152, 16384
  %154 = select i1 %153, i32 %152, i32 16384
  br label %155

155:                                              ; preds = %113, %123, %130, %126
  %156 = phi i32 [ 16384, %123 ], [ %154, %130 ], [ 16384, %126 ], [ 16384, %113 ]
  %157 = trunc i32 %156 to i16
  %158 = icmp slt i16 %100, %157
  %159 = select i1 %158, i16 %157, i16 %100
  %160 = sext i16 %159 to i64
  %161 = sub nsw i64 16384, %160
  %162 = udiv i64 %161, %71
  %163 = trunc i64 %162 to i32
  %164 = sdiv i32 64, %30
  %165 = icmp slt i32 %164, %163
  %166 = select i1 %165, i32 %163, i32 %164
  br i1 %90, label %167, label %175

167:                                              ; preds = %175, %155
  %168 = load i64, i64* %91, align 8
  %169 = load i16, i16* %92, align 8
  %170 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %171 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %170, i64 15
  %172 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %171, align 8
  %173 = call i64 %172(%"class.webrtc::AudioMultiVector"* %4) #7
  %174 = icmp ugt i64 %168, %173
  br i1 %174, label %215, label %225

175:                                              ; preds = %155, %175
  %176 = phi i64 [ %213, %175 ], [ 0, %155 ]
  %177 = phi i16 [ %212, %175 ], [ %159, %155 ]
  %178 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 %95) #7
  %179 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %178, i64 0, i32 3
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %178, i64 0, i32 2
  %182 = load i64, i64* %181, align 8
  %183 = add i64 %180, %176
  %184 = icmp ult i64 %183, %182
  %185 = select i1 %184, i64 0, i64 %182
  %186 = sub i64 %183, %185
  %187 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %178, i64 0, i32 1, i32 0, i32 0, i32 0
  %188 = load i16*, i16** %187, align 8
  %189 = getelementptr inbounds i16, i16* %188, i64 %186
  %190 = load i16, i16* %189, align 2
  %191 = sext i16 %190 to i32
  %192 = sext i16 %177 to i32
  %193 = mul nsw i32 %191, %192
  %194 = add nsw i32 %193, 8192
  %195 = lshr i32 %194, 14
  %196 = trunc i32 %195 to i16
  %197 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 %95) #7
  %198 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %197, i64 0, i32 3
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %197, i64 0, i32 2
  %201 = load i64, i64* %200, align 8
  %202 = add i64 %199, %176
  %203 = icmp ult i64 %202, %201
  %204 = select i1 %203, i64 0, i64 %201
  %205 = sub i64 %202, %204
  %206 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %197, i64 0, i32 1, i32 0, i32 0, i32 0
  %207 = load i16*, i16** %206, align 8
  %208 = getelementptr inbounds i16, i16* %207, i64 %205
  store i16 %196, i16* %208, align 2
  %209 = add nsw i32 %166, %192
  %210 = icmp slt i32 %209, 16384
  %211 = select i1 %210, i32 %209, i32 16384
  %212 = trunc i32 %211 to i16
  %213 = add nuw i64 %176, 1
  %214 = icmp ult i64 %213, %71
  br i1 %214, label %175, label %167

215:                                              ; preds = %167
  %216 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %217 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %216, i64 15
  %218 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %217, align 8
  %219 = call i64 %218(%"class.webrtc::AudioMultiVector"* %4) #7
  %220 = trunc i64 %219 to i32
  %221 = shl i32 %220, 16
  %222 = ashr exact i32 %221, 16
  %223 = sdiv i32 16384, %222
  %224 = trunc i32 %223 to i16
  br label %225

225:                                              ; preds = %215, %167
  %226 = phi i64 [ %219, %215 ], [ %168, %167 ]
  %227 = phi i16 [ %224, %215 ], [ %169, %167 ]
  %228 = icmp eq i64 %226, 0
  br i1 %228, label %231, label %229

229:                                              ; preds = %225
  %230 = sext i16 %227 to i32
  br label %238

231:                                              ; preds = %238, %225
  %232 = add nuw i64 %95, 1
  %233 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %15, align 8
  %234 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %233, i64 14
  %235 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %234, align 8
  %236 = call i64 %235(%"class.webrtc::AudioMultiVector"* %4) #7
  %237 = icmp ult i64 %232, %236
  br i1 %237, label %94, label %93

238:                                              ; preds = %238, %229
  %239 = phi i64 [ 0, %229 ], [ %293, %238 ]
  %240 = phi i32 [ 0, %229 ], [ %243, %238 ]
  %241 = shl i32 %240, 16
  %242 = ashr exact i32 %241, 16
  %243 = add nsw i32 %242, %230
  %244 = shl i32 %243, 16
  %245 = ashr exact i32 %244, 16
  %246 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 %95) #7
  %247 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %246, i64 0, i32 3
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %246, i64 0, i32 2
  %250 = load i64, i64* %249, align 8
  %251 = add i64 %248, %239
  %252 = icmp ult i64 %251, %250
  %253 = select i1 %252, i64 0, i64 %250
  %254 = sub i64 %251, %253
  %255 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %246, i64 0, i32 1, i32 0, i32 0, i32 0
  %256 = load i16*, i16** %255, align 8
  %257 = getelementptr inbounds i16, i16* %256, i64 %254
  %258 = load i16, i16* %257, align 2
  %259 = sext i16 %258 to i32
  %260 = mul nsw i32 %245, %259
  %261 = sub nsw i32 16384, %245
  %262 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* nonnull %6, i64 %95) #7
  %263 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %262, i64 0, i32 3
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %262, i64 0, i32 2
  %266 = load i64, i64* %265, align 8
  %267 = add i64 %264, %239
  %268 = icmp ult i64 %267, %266
  %269 = select i1 %268, i64 0, i64 %266
  %270 = sub i64 %267, %269
  %271 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %262, i64 0, i32 1, i32 0, i32 0, i32 0
  %272 = load i16*, i16** %271, align 8
  %273 = getelementptr inbounds i16, i16* %272, i64 %270
  %274 = load i16, i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = mul nsw i32 %261, %275
  %277 = add nsw i32 %260, 8192
  %278 = add i32 %277, %276
  %279 = lshr i32 %278, 14
  %280 = trunc i32 %279 to i16
  %281 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 %95) #7
  %282 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %281, i64 0, i32 3
  %283 = load i64, i64* %282, align 8
  %284 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %281, i64 0, i32 2
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %283, %239
  %287 = icmp ult i64 %286, %285
  %288 = select i1 %287, i64 0, i64 %285
  %289 = sub i64 %286, %288
  %290 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %281, i64 0, i32 1, i32 0, i32 0, i32 0
  %291 = load i16*, i16** %290, align 8
  %292 = getelementptr inbounds i16, i16* %291, i64 %289
  store i16 %280, i16* %292, align 2
  %293 = add nuw i64 %239, 1
  %294 = icmp eq i64 %293, %226
  br i1 %294, label %231, label %238

295:                                              ; preds = %38
  %296 = bitcast [48 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %296) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %296, i8 -86, i64 96, i1 false)
  %297 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 2
  %298 = load %"class.webrtc::DecoderDatabase"*, %"class.webrtc::DecoderDatabase"** %297, align 8
  %299 = bitcast %"class.webrtc::DecoderDatabase"* %298 to %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)***
  %300 = load %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)**, %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)*** %299, align 8
  %301 = getelementptr inbounds %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)*, %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)** %300, i64 13
  %302 = load %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)*, %"class.webrtc::ComfortNoiseDecoder"* (%"class.webrtc::DecoderDatabase"*)** %301, align 8
  %303 = tail call %"class.webrtc::ComfortNoiseDecoder"* %302(%"class.webrtc::DecoderDatabase"* %298) #7
  %304 = icmp eq %"class.webrtc::ComfortNoiseDecoder"* %303, null
  br i1 %304, label %309, label %305

305:                                              ; preds = %295
  %306 = getelementptr inbounds [48 x i16], [48 x i16]* %7, i64 0, i64 0
  %307 = call zeroext i1 @_ZN6webrtc19ComfortNoiseDecoder8GenerateEN3rtc9ArrayViewIsLln4711EEEb(%"class.webrtc::ComfortNoiseDecoder"* nonnull %303, i16* nonnull %306, i64 48, i1 zeroext false) #7
  br i1 %307, label %318, label %308

308:                                              ; preds = %305
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %296, i8 0, i64 96, i1 false)
  br label %318

309:                                              ; preds = %295
  %310 = tail call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 0) #7
  %311 = shl nsw i32 %30, 3
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [48 x i16], [48 x i16]* %7, i64 0, i64 0
  %314 = bitcast %"class.webrtc::AudioVector"* %310 to void (%"class.webrtc::AudioVector"*, i64, i64, i16*)***
  %315 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)**, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*** %314, align 8
  %316 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %315, i64 4
  %317 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %316, align 8
  call void %317(%"class.webrtc::AudioVector"* %310, i64 %312, i64 0, i16* nonnull %313) #7
  br label %318

318:                                              ; preds = %305, %308, %309
  %319 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 5
  %320 = load i64, i64* %319, align 8
  %321 = icmp ugt i64 %320, 48
  %322 = select i1 %321, i64 48, i64 %320
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %318
  %325 = getelementptr inbounds %"class.webrtc::Normal", %"class.webrtc::Normal"* %0, i64 0, i32 6
  %326 = load i16, i16* %325, align 8
  %327 = sext i16 %326 to i32
  %328 = select i1 %321, i32 341, i32 %327
  br label %330

329:                                              ; preds = %330, %318
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %296) #7
  br label %376

330:                                              ; preds = %324, %330
  %331 = phi i64 [ 0, %324 ], [ %374, %330 ]
  %332 = phi i32 [ 0, %324 ], [ %335, %330 ]
  %333 = shl i32 %332, 16
  %334 = ashr exact i32 %333, 16
  %335 = add nsw i32 %334, %328
  %336 = shl i32 %335, 16
  %337 = ashr exact i32 %336, 16
  %338 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 0) #7
  %339 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %338, i64 0, i32 3
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %338, i64 0, i32 2
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %340, %331
  %344 = icmp ult i64 %343, %342
  %345 = select i1 %344, i64 0, i64 %342
  %346 = sub i64 %343, %345
  %347 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %338, i64 0, i32 1, i32 0, i32 0, i32 0
  %348 = load i16*, i16** %347, align 8
  %349 = getelementptr inbounds i16, i16* %348, i64 %346
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i32
  %352 = mul nsw i32 %337, %351
  %353 = sub nsw i32 16384, %337
  %354 = getelementptr inbounds [48 x i16], [48 x i16]* %7, i64 0, i64 %331
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = mul nsw i32 %353, %356
  %358 = add nsw i32 %352, 8192
  %359 = add i32 %358, %357
  %360 = lshr i32 %359, 14
  %361 = trunc i32 %360 to i16
  %362 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %4, i64 0) #7
  %363 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %362, i64 0, i32 3
  %364 = load i64, i64* %363, align 8
  %365 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %362, i64 0, i32 2
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %364, %331
  %368 = icmp ult i64 %367, %366
  %369 = select i1 %368, i64 0, i64 %366
  %370 = sub i64 %367, %369
  %371 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %362, i64 0, i32 1, i32 0, i32 0, i32 0
  %372 = load i16*, i16** %371, align 8
  %373 = getelementptr inbounds i16, i16* %372, i64 %370
  store i16 %361, i16* %373, align 2
  %374 = add nuw i64 %331, 1
  %375 = icmp ult i64 %374, %322
  br i1 %375, label %330, label %329

376:                                              ; preds = %40, %38, %329, %93
  %377 = trunc i64 %2 to i32
  br label %378

378:                                              ; preds = %376, %22, %9
  %379 = phi i32 [ 0, %9 ], [ 0, %22 ], [ %377, %376 ]
  ret i32 %379
}

declare void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"*, i16*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN6webrtc20StatisticsCalculator14EndExpandEventEi(%"class.webrtc::StatisticsCalculator"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @WebRtcSpl_DotProductWithScale(i16*, i16*, i64, i32) local_unnamed_addr #1

declare i32 @_ZNK6webrtc15BackgroundNoise6EnergyEm(%"class.webrtc::BackgroundNoise"*, i64) local_unnamed_addr #1

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #1

declare i32 @WebRtcSpl_SqrtFloor(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"*) unnamed_addr #5

declare zeroext i1 @_ZN6webrtc19ComfortNoiseDecoder8GenerateEN3rtc9ArrayViewIsLln4711EEEb(%"class.webrtc::ComfortNoiseDecoder"*, i16*, i64, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
