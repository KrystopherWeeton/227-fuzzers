; ModuleID = '../../third_party/breakpad/breakpad/src/common/linux/file_id.cc'
source_filename = "../../third_party/breakpad/breakpad/src/common/linux/file_id.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.google_breakpad::FileID" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.google_breakpad::wasteful_vector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.google_breakpad::PageStdAllocator" }
%"struct.google_breakpad::PageStdAllocator" = type { %"class.google_breakpad::PageAllocator"*, i8*, i64 }
%"class.google_breakpad::PageAllocator" = type { i64, %"struct.google_breakpad::PageAllocator::PageHeader"*, i8*, i64, i64 }
%"struct.google_breakpad::PageAllocator::PageHeader" = type { %"struct.google_breakpad::PageAllocator::PageHeader"*, i64 }
%"class.google_breakpad::auto_wasteful_vector" = type { %"class.google_breakpad::wasteful_vector.6", [2 x %"struct.google_breakpad::ElfSegment"] }
%"class.google_breakpad::wasteful_vector.6" = type { %"class.std::__1::vector.7" }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"*, %"class.std::__1::__compressed_pair.9" }
%"struct.google_breakpad::ElfSegment" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10", %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.google_breakpad::ElfSegment"* }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.google_breakpad::PageStdAllocator.12" }
%"struct.google_breakpad::PageStdAllocator.12" = type { %"class.google_breakpad::PageAllocator"*, %"struct.google_breakpad::ElfSegment"*, i64 }
%"class.google_breakpad::MemoryMappedFile" = type { %"class.google_breakpad::MemoryRange" }
%"class.google_breakpad::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN15google_breakpad13PageAllocator5AllocEm = comdat any

$_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_ = comdat any

$_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [19 x i8] c".note.gnu.build-id\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1

@_ZN15google_breakpad6FileIDC1EPKc = hidden unnamed_addr alias void (%"class.google_breakpad::FileID"*, i8*), void (%"class.google_breakpad::FileID"*, i8*)* @_ZN15google_breakpad6FileIDC2EPKc

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad6FileIDC2EPKc(%"class.google_breakpad::FileID"*, i8* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #10
  %4 = icmp ugt i64 %3, -17
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = bitcast %"class.google_breakpad::FileID"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %6) #11
  unreachable

7:                                                ; preds = %2
  %8 = icmp ult i64 %3, 23
  br i1 %8, label %17, label %9

9:                                                ; preds = %7
  %10 = add nuw i64 %3, 16
  %11 = and i64 %10, -16
  %12 = tail call i8* @_Znwm(i64 %11) #12
  %13 = getelementptr inbounds %"class.google_breakpad::FileID", %"class.google_breakpad::FileID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = or i64 %11, -9223372036854775808
  %15 = getelementptr inbounds %"class.google_breakpad::FileID", %"class.google_breakpad::FileID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.google_breakpad::FileID", %"class.google_breakpad::FileID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %3, i64* %16, align 8
  br label %23

17:                                               ; preds = %7
  %18 = trunc i64 %3 to i8
  %19 = bitcast %"class.google_breakpad::FileID"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  store i8 %18, i8* %20, align 1
  %21 = bitcast %"class.google_breakpad::FileID"* %0 to i8*
  %22 = icmp eq i64 %3, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %17, %9
  %24 = phi i8* [ %12, %9 ], [ %21, %17 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %1, i64 %3, i1 false) #10
  br label %25

25:                                               ; preds = %17, %23
  %26 = phi i8* [ %21, %17 ], [ %24, %23 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 %3
  store i8 0, i8* %27, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad6FileID31ElfFileIdentifierFromMappedFileEPKvRNS_15wasteful_vectorIhEE(i8*, %"class.google_breakpad::wasteful_vector"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %"class.google_breakpad::PageAllocator", align 8
  %6 = alloca %"class.google_breakpad::auto_wasteful_vector", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast %"class.google_breakpad::PageAllocator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %5, i64 0, i32 0
  %11 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %5, i64 0, i32 1
  %12 = tail call i32 @getpagesize() #13
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %10, align 8
  %14 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #10
  %15 = bitcast %"class.google_breakpad::auto_wasteful_vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 1
  %17 = bitcast [2 x %"struct.google_breakpad::ElfSegment"]* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 32, i1 false) #10
  %18 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  store %"class.google_breakpad::PageAllocator"* %5, %"class.google_breakpad::PageAllocator"** %19, align 8
  %20 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  store %"struct.google_breakpad::ElfSegment"* %18, %"struct.google_breakpad::ElfSegment"** %20, align 8
  %21 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 2
  store i64 32, i64* %21, align 8
  %22 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast %"struct.google_breakpad::ElfSegment"** %22 to i64*
  %24 = bitcast %"class.google_breakpad::auto_wasteful_vector"* %6 to i64*
  %25 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast %"struct.google_breakpad::ElfSegment"** %25 to i64*
  %27 = ptrtoint %"struct.google_breakpad::ElfSegment"* %18 to i64
  %28 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 1, i64 2
  %29 = ptrtoint %"struct.google_breakpad::ElfSegment"* %28 to i64
  store i64 %27, i64* %24, align 8
  store i64 %27, i64* %26, align 8
  store i64 %29, i64* %23, align 8
  %30 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0
  %31 = call zeroext i1 @_ZN15google_breakpad15FindElfSegmentsEPKvjPNS_15wasteful_vectorINS_10ElfSegmentEEE(i8* %0, i32 4, %"class.google_breakpad::wasteful_vector.6"* nonnull %30) #10
  br i1 %31, label %32, label %89

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %33, align 8
  %35 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %25, align 8
  %36 = icmp eq %"struct.google_breakpad::ElfSegment"* %34, %35
  br i1 %36, label %89, label %37

37:                                               ; preds = %32, %72
  %38 = phi %"struct.google_breakpad::ElfSegment"* [ %73, %72 ], [ %34, %32 ]
  %39 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %38, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %38, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = icmp sgt i64 %42, 0
  br i1 %44, label %45, label %72

45:                                               ; preds = %37, %51
  %46 = phi i8* [ %65, %51 ], [ %40, %37 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 8
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 3
  br i1 %50, label %67, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds i8, i8* %46, i64 12
  %53 = bitcast i8* %46 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = add i32 %54, 3
  %56 = and i32 %55, -4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %52, i64 %57
  %59 = getelementptr inbounds i8, i8* %46, i64 4
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, 3
  %63 = and i32 %62, -4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %58, i64 %64
  %66 = icmp ult i8* %65, %43
  br i1 %66, label %45, label %72

67:                                               ; preds = %45
  %68 = getelementptr inbounds i8, i8* %46, i64 4
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %51, %67, %37
  %73 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %38, i64 1
  %74 = icmp eq %"struct.google_breakpad::ElfSegment"* %73, %35
  br i1 %74, label %89, label %37

75:                                               ; preds = %67
  %76 = getelementptr inbounds i8, i8* %46, i64 12
  %77 = bitcast i8* %46 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %78, 3
  %80 = and i32 %79, -4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  %83 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0
  %84 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = zext i32 %70 to i64
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  %88 = call i8* @_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"* %83, i8* %85, i8* %82, i8* %87) #10
  br label %141

89:                                               ; preds = %72, %32, %2
  %90 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %91 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #10
  store i64 -6148914691236517206, i64* %8, align 8
  %92 = call zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 7, i8** nonnull %7, i64* nonnull %8) #10
  br i1 %92, label %93, label %139

93:                                               ; preds = %89
  %94 = load i8*, i8** %7, align 8
  %95 = load i64, i64* %8, align 8
  %96 = getelementptr inbounds i8, i8* %94, i64 %95
  %97 = icmp sgt i64 %95, 0
  br i1 %97, label %98, label %139

98:                                               ; preds = %93, %104
  %99 = phi i8* [ %118, %104 ], [ %94, %93 ]
  %100 = getelementptr inbounds i8, i8* %99, i64 8
  %101 = bitcast i8* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 3
  br i1 %103, label %120, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds i8, i8* %99, i64 12
  %106 = bitcast i8* %99 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = add i32 %107, 3
  %109 = and i32 %108, -4
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %105, i64 %110
  %112 = getelementptr inbounds i8, i8* %99, i64 4
  %113 = bitcast i8* %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = add i32 %114, 3
  %116 = and i32 %115, -4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %111, i64 %117
  %119 = icmp ult i8* %118, %96
  br i1 %119, label %98, label %139

120:                                              ; preds = %98
  %121 = getelementptr inbounds i8, i8* %99, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %139, label %125

125:                                              ; preds = %120
  %126 = getelementptr inbounds i8, i8* %99, i64 12
  %127 = bitcast i8* %99 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, 3
  %130 = and i32 %129, -4
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %126, i64 %131
  %133 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0
  %134 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 1
  %135 = load i8*, i8** %134, align 8
  %136 = zext i32 %123 to i64
  %137 = getelementptr inbounds i8, i8* %132, i64 %136
  %138 = call i8* @_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"* %133, i8* %135, i8* %132, i8* %137) #10
  br label %139

139:                                              ; preds = %104, %125, %120, %93, %89
  %140 = phi i1 [ false, %89 ], [ true, %125 ], [ false, %120 ], [ false, %93 ], [ false, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #10
  br label %141

141:                                              ; preds = %139, %75
  %142 = phi i1 [ %140, %139 ], [ true, %75 ]
  %143 = getelementptr inbounds %"class.google_breakpad::auto_wasteful_vector", %"class.google_breakpad::auto_wasteful_vector"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %144 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %143, align 8
  %145 = icmp eq %"struct.google_breakpad::ElfSegment"* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %141
  %147 = ptrtoint %"struct.google_breakpad::ElfSegment"* %144 to i64
  store i64 %147, i64* %26, align 8
  br label %148

148:                                              ; preds = %146, %141
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %15) #10
  %149 = load %"struct.google_breakpad::PageAllocator::PageHeader"*, %"struct.google_breakpad::PageAllocator::PageHeader"** %11, align 8
  %150 = icmp eq %"struct.google_breakpad::PageAllocator::PageHeader"* %149, null
  br i1 %150, label %168, label %151

151:                                              ; preds = %148, %166
  %152 = phi %"struct.google_breakpad::PageAllocator::PageHeader"* [ %154, %166 ], [ %149, %148 ]
  %153 = getelementptr inbounds %"struct.google_breakpad::PageAllocator::PageHeader", %"struct.google_breakpad::PageAllocator::PageHeader"* %152, i64 0, i32 0
  %154 = load %"struct.google_breakpad::PageAllocator::PageHeader"*, %"struct.google_breakpad::PageAllocator::PageHeader"** %153, align 8
  %155 = getelementptr inbounds %"struct.google_breakpad::PageAllocator::PageHeader", %"struct.google_breakpad::PageAllocator::PageHeader"* %152, i64 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = load i64, i64* %10, align 8
  %158 = mul i64 %157, %156
  %159 = ptrtoint %"struct.google_breakpad::PageAllocator::PageHeader"* %152 to i64
  %160 = call i64 asm sideeffect "syscall\0A", "={ax},0,{di},{si},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 11, i64 %159, i64 %158) #10, !srcloc !2
  %161 = icmp ugt i64 %160, -4096
  br i1 %161, label %162, label %166

162:                                              ; preds = %151
  %163 = trunc i64 %160 to i32
  %164 = sub nsw i32 0, %163
  %165 = tail call i32* @__errno_location() #13
  store i32 %164, i32* %165, align 4
  br label %166

166:                                              ; preds = %162, %151
  %167 = icmp eq %"struct.google_breakpad::PageAllocator::PageHeader"* %154, null
  br i1 %167, label %168, label %151

168:                                              ; preds = %166, %148
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #10
  br i1 %142, label %302, label %169

169:                                              ; preds = %168
  %170 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 1
  %171 = bitcast i8** %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = bitcast %"class.google_breakpad::wasteful_vector"* %1 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = sub i64 %172, %174
  %176 = icmp ult i64 %175, 16
  %177 = inttoptr i64 %174 to i8*
  br i1 %176, label %178, label %181

178:                                              ; preds = %169
  %179 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0
  %180 = sub nuw nsw i64 16, %175
  call void @_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %179, i64 %180) #10
  br label %185

181:                                              ; preds = %169
  %182 = icmp eq i64 %175, 16
  br i1 %182, label %185, label %183

183:                                              ; preds = %181
  %184 = getelementptr inbounds i8, i8* %177, i64 16
  store i8* %184, i8** %170, align 8
  br label %185

185:                                              ; preds = %183, %181, %178
  %186 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %187 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %187) #10
  store i64 -6148914691236517206, i64* %4, align 8
  %188 = call zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 1, i8** nonnull %3, i64* nonnull %4) #10
  %189 = xor i1 %188, true
  %190 = load i64, i64* %4, align 8
  %191 = icmp eq i64 %190, 0
  %192 = or i1 %191, %189
  br i1 %192, label %300, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 0
  %195 = load i8*, i8** %194, align 8
  call void @my_memset(i8* %195, i8 signext 0, i64 16) #10
  %196 = load i8*, i8** %3, align 8
  %197 = load i64, i64* %4, align 8
  %198 = icmp ult i64 %197, 4096
  %199 = select i1 %198, i64 %197, i64 4096
  %200 = getelementptr inbounds i8, i8* %196, i64 %199
  %201 = icmp sgt i64 %199, 0
  br i1 %201, label %202, label %300

202:                                              ; preds = %193, %202
  %203 = phi i8* [ %298, %202 ], [ %196, %193 ]
  %204 = load i8, i8* %203, align 1
  %205 = load i8*, i8** %194, align 8
  %206 = load i8, i8* %205, align 1
  %207 = xor i8 %206, %204
  store i8 %207, i8* %205, align 1
  %208 = getelementptr inbounds i8, i8* %203, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = load i8*, i8** %194, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = xor i8 %212, %209
  store i8 %213, i8* %211, align 1
  %214 = getelementptr inbounds i8, i8* %203, i64 2
  %215 = load i8, i8* %214, align 1
  %216 = load i8*, i8** %194, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 2
  %218 = load i8, i8* %217, align 1
  %219 = xor i8 %218, %215
  store i8 %219, i8* %217, align 1
  %220 = getelementptr inbounds i8, i8* %203, i64 3
  %221 = load i8, i8* %220, align 1
  %222 = load i8*, i8** %194, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 3
  %224 = load i8, i8* %223, align 1
  %225 = xor i8 %224, %221
  store i8 %225, i8* %223, align 1
  %226 = getelementptr inbounds i8, i8* %203, i64 4
  %227 = load i8, i8* %226, align 1
  %228 = load i8*, i8** %194, align 8
  %229 = getelementptr inbounds i8, i8* %228, i64 4
  %230 = load i8, i8* %229, align 1
  %231 = xor i8 %230, %227
  store i8 %231, i8* %229, align 1
  %232 = getelementptr inbounds i8, i8* %203, i64 5
  %233 = load i8, i8* %232, align 1
  %234 = load i8*, i8** %194, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 5
  %236 = load i8, i8* %235, align 1
  %237 = xor i8 %236, %233
  store i8 %237, i8* %235, align 1
  %238 = getelementptr inbounds i8, i8* %203, i64 6
  %239 = load i8, i8* %238, align 1
  %240 = load i8*, i8** %194, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 6
  %242 = load i8, i8* %241, align 1
  %243 = xor i8 %242, %239
  store i8 %243, i8* %241, align 1
  %244 = getelementptr inbounds i8, i8* %203, i64 7
  %245 = load i8, i8* %244, align 1
  %246 = load i8*, i8** %194, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 7
  %248 = load i8, i8* %247, align 1
  %249 = xor i8 %248, %245
  store i8 %249, i8* %247, align 1
  %250 = getelementptr inbounds i8, i8* %203, i64 8
  %251 = load i8, i8* %250, align 1
  %252 = load i8*, i8** %194, align 8
  %253 = getelementptr inbounds i8, i8* %252, i64 8
  %254 = load i8, i8* %253, align 1
  %255 = xor i8 %254, %251
  store i8 %255, i8* %253, align 1
  %256 = getelementptr inbounds i8, i8* %203, i64 9
  %257 = load i8, i8* %256, align 1
  %258 = load i8*, i8** %194, align 8
  %259 = getelementptr inbounds i8, i8* %258, i64 9
  %260 = load i8, i8* %259, align 1
  %261 = xor i8 %260, %257
  store i8 %261, i8* %259, align 1
  %262 = getelementptr inbounds i8, i8* %203, i64 10
  %263 = load i8, i8* %262, align 1
  %264 = load i8*, i8** %194, align 8
  %265 = getelementptr inbounds i8, i8* %264, i64 10
  %266 = load i8, i8* %265, align 1
  %267 = xor i8 %266, %263
  store i8 %267, i8* %265, align 1
  %268 = getelementptr inbounds i8, i8* %203, i64 11
  %269 = load i8, i8* %268, align 1
  %270 = load i8*, i8** %194, align 8
  %271 = getelementptr inbounds i8, i8* %270, i64 11
  %272 = load i8, i8* %271, align 1
  %273 = xor i8 %272, %269
  store i8 %273, i8* %271, align 1
  %274 = getelementptr inbounds i8, i8* %203, i64 12
  %275 = load i8, i8* %274, align 1
  %276 = load i8*, i8** %194, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 12
  %278 = load i8, i8* %277, align 1
  %279 = xor i8 %278, %275
  store i8 %279, i8* %277, align 1
  %280 = getelementptr inbounds i8, i8* %203, i64 13
  %281 = load i8, i8* %280, align 1
  %282 = load i8*, i8** %194, align 8
  %283 = getelementptr inbounds i8, i8* %282, i64 13
  %284 = load i8, i8* %283, align 1
  %285 = xor i8 %284, %281
  store i8 %285, i8* %283, align 1
  %286 = getelementptr inbounds i8, i8* %203, i64 14
  %287 = load i8, i8* %286, align 1
  %288 = load i8*, i8** %194, align 8
  %289 = getelementptr inbounds i8, i8* %288, i64 14
  %290 = load i8, i8* %289, align 1
  %291 = xor i8 %290, %287
  store i8 %291, i8* %289, align 1
  %292 = getelementptr inbounds i8, i8* %203, i64 15
  %293 = load i8, i8* %292, align 1
  %294 = load i8*, i8** %194, align 8
  %295 = getelementptr inbounds i8, i8* %294, i64 15
  %296 = load i8, i8* %295, align 1
  %297 = xor i8 %296, %293
  store i8 %297, i8* %295, align 1
  %298 = getelementptr inbounds i8, i8* %203, i64 16
  %299 = icmp ult i8* %298, %200
  br i1 %299, label %202, label %300

300:                                              ; preds = %202, %185, %193
  %301 = phi i1 [ false, %185 ], [ true, %193 ], [ true, %202 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #10
  br label %302

302:                                              ; preds = %168, %300
  %303 = phi i1 [ %301, %300 ], [ true, %168 ]
  ret i1 %303
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad6FileID17ElfFileIdentifierERNS_15wasteful_vectorIhEE(%"class.google_breakpad::FileID"*, %"class.google_breakpad::wasteful_vector"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.google_breakpad::MemoryMappedFile", align 8
  %4 = bitcast %"class.google_breakpad::MemoryMappedFile"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.google_breakpad::MemoryMappedFile", %"class.google_breakpad::MemoryMappedFile"* %3, i64 0, i32 0, i32 0
  %6 = bitcast %"class.google_breakpad::FileID"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = bitcast %"class.google_breakpad::MemoryMappedFile"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8, i8* %7, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.google_breakpad::FileID", %"class.google_breakpad::FileID"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  br label %16

14:                                               ; preds = %2
  %15 = bitcast %"class.google_breakpad::FileID"* %0 to i8*
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i8* [ %13, %11 ], [ %15, %14 ]
  call void @_ZN15google_breakpad16MemoryMappedFileC1EPKcm(%"class.google_breakpad::MemoryMappedFile"* nonnull %3, i8* %17, i64 0) #10
  %18 = load i8*, i8** %5, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = call zeroext i1 @_ZN15google_breakpad6FileID31ElfFileIdentifierFromMappedFileEPKvRNS_15wasteful_vectorIhEE(i8* nonnull %18, %"class.google_breakpad::wasteful_vector"* dereferenceable(48) %1)
  br label %22

22:                                               ; preds = %16, %20
  %23 = phi i1 [ %21, %20 ], [ false, %16 ]
  call void @_ZN15google_breakpad16MemoryMappedFileD1Ev(%"class.google_breakpad::MemoryMappedFile"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #10
  ret i1 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN15google_breakpad16MemoryMappedFileC1EPKcm(%"class.google_breakpad::MemoryMappedFile"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN15google_breakpad16MemoryMappedFileD1Ev(%"class.google_breakpad::MemoryMappedFile"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad6FileID29ConvertIdentifierToUUIDStringERKNS_15wasteful_vectorIhEE(%"class.std::__1::basic_string"* noalias sret, %"class.google_breakpad::wasteful_vector"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca [3 x i8], align 1
  %4 = alloca [16 x i8], align 16
  %5 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 16, i1 false)
  %6 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = ptrtoint i8* %7 to i64
  %12 = sub i64 %10, %11
  %13 = icmp ult i64 %12, 16
  %14 = select i1 %13, i64 %12, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 1 %7, i64 %14, i1 false)
  %15 = bitcast [16 x i8]* %4 to i32*
  %16 = load i32, i32* %15, align 16
  %17 = tail call i32 @llvm.bswap.i32(i32 %16) #10
  store i32 %17, i32* %15, align 16
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 4
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %19, align 4
  %21 = tail call i16 @llvm.bswap.i16(i16 %20) #10
  store i16 %21, i16* %19, align 4
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 6
  %23 = bitcast i8* %22 to i16*
  %24 = load i16, i16* %23, align 2
  %25 = tail call i16 @llvm.bswap.i16(i16 %24) #10
  store i16 %25, i16* %23, align 2
  %26 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #10, !alias.scope !3
  %27 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 0
  %28 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 1
  %29 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 2
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %27) #10, !noalias !3
  store i8 -86, i8* %27, align 1, !noalias !3
  store i8 -86, i8* %28, align 1, !noalias !3
  store i8 -86, i8* %29, align 1, !noalias !3
  %30 = and i32 %17, 255
  %31 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %27, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %30) #10
  %32 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %27) #10
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %27) #10, !noalias !3
  br label %33

33:                                               ; preds = %2, %33
  %34 = phi i64 [ 1, %2 ], [ %40, %33 ]
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1, !noalias !3
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %27) #10, !noalias !3
  store i8 -86, i8* %27, align 1, !noalias !3
  store i8 -86, i8* %28, align 1, !noalias !3
  store i8 -86, i8* %29, align 1, !noalias !3
  %37 = zext i8 %36 to i32
  %38 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %27, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %37) #10
  %39 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %27) #10
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %27) #10, !noalias !3
  %40 = add nuw nsw i64 %34, 1
  %41 = icmp eq i64 %40, 16
  br i1 %41, label %42, label %33

42:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad6FileID25ConvertIdentifierToStringERKNS_15wasteful_vectorIhEE(%"class.std::__1::basic_string"* noalias sret, %"class.google_breakpad::wasteful_vector"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca [3 x i8], align 1
  %4 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = ptrtoint i8* %5 to i64
  %10 = sub i64 %8, %9
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #10, !alias.scope !6
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %28, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 0
  %15 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 1
  %16 = getelementptr inbounds [3 x i8], [3 x i8]* %3, i64 0, i64 2
  br label %17

17:                                               ; preds = %17, %13
  %18 = phi i64 [ 0, %13 ], [ %26, %17 ]
  %19 = phi i32 [ 0, %13 ], [ %25, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %14) #10, !noalias !6
  store i8 -86, i8* %14, align 1, !noalias !6
  store i8 -86, i8* %15, align 1, !noalias !6
  store i8 -86, i8* %16, align 1, !noalias !6
  %20 = getelementptr inbounds i8, i8* %5, i64 %18
  %21 = load i8, i8* %20, align 1, !noalias !6
  %22 = zext i8 %21 to i32
  %23 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %14, i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %22) #10
  %24 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %14) #10, !noalias !6
  %25 = add i32 %19, 1
  %26 = zext i32 %25 to i64
  %27 = icmp ugt i64 %10, %26
  br i1 %27, label %17, label %28

28:                                               ; preds = %17, %2
  ret void
}

declare zeroext i1 @_ZN15google_breakpad15FindElfSegmentsEPKvjPNS_15wasteful_vectorINS_10ElfSegmentEEE(i8*, i32, %"class.google_breakpad::wasteful_vector.6"*) local_unnamed_addr #2

declare zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8*, i8*, i32, i8**, i64*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32 @getpagesize() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %62, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  br i1 %7, label %21, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %21, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i8, i8* %6, i64 %12
  %17 = add i64 %12, %1
  store i64 %17, i64* %11, align 8
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %19, label %62

19:                                               ; preds = %15
  %20 = bitcast i8** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  br label %62

21:                                               ; preds = %4, %10
  %22 = add i64 %1, 16
  %23 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %24 = add i64 %1, 15
  %25 = add i64 %24, %9
  %26 = udiv i64 %25, %9
  %27 = mul i64 %26, %9
  %28 = tail call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 0, i64 %27, i64 3, i64 34, i64 -1, i64 0) #10, !srcloc !9
  %29 = icmp ugt i64 %28, -4096
  br i1 %29, label %30, label %34

30:                                               ; preds = %21
  %31 = trunc i64 %28 to i32
  %32 = sub nsw i32 0, %31
  %33 = tail call i32* @__errno_location() #13
  store i32 %32, i32* %33, align 4
  br label %62

34:                                               ; preds = %21
  %35 = inttoptr i64 %28 to i8*
  %36 = icmp eq i8* %35, inttoptr (i64 -1 to i8*)
  br i1 %36, label %62, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 1
  %39 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = inttoptr i64 %28 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %35, i64 8
  %43 = bitcast i8* %42 to i64*
  store i64 %26, i64* %43, align 8
  %44 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i8**
  store i8* %35, i8** %44, align 8
  %45 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 4
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, %26
  store i64 %47, i64* %45, align 8
  %48 = icmp eq i64 %28, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %37
  %50 = load i64, i64* %23, align 8
  %51 = mul i64 %50, %26
  %52 = add i64 %50, %22
  %53 = sub i64 %52, %51
  %54 = urem i64 %53, %50
  %55 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  store i64 %54, i64* %55, align 8
  %56 = icmp eq i64 %54, 0
  %57 = add i64 %26, -1
  %58 = mul i64 %50, %57
  %59 = getelementptr inbounds i8, i8* %35, i64 %58
  %60 = select i1 %56, i8* null, i8* %59
  store i8* %60, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %35, i64 16
  br label %62

62:                                               ; preds = %30, %34, %49, %37, %15, %19, %2
  %63 = phi i8* [ null, %2 ], [ %16, %19 ], [ %16, %15 ], [ %61, %49 ], [ null, %37 ], [ null, %34 ], [ null, %30 ]
  ret i8* %63
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %629

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %268, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !10
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !10
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !13, !noalias !10
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !13, !noalias !10
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !10
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !10
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !13, !noalias !10
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !13, !noalias !10
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !10
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !10
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !13, !noalias !10
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !13, !noalias !10
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !10
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !10
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !13, !noalias !10
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !13, !noalias !10
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !15

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !10
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !10
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !13, !noalias !10
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !13, !noalias !10
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !17

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !19

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %629

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !20
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !20
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !23, !noalias !20
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !23, !noalias !20
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !20
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !20
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !23, !noalias !20
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !23, !noalias !20
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !20
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !20
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !23, !noalias !20
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !23, !noalias !20
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !20
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !20
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !23, !noalias !20
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !23, !noalias !20
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !25

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !20
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !20
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !23, !noalias !20
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !23, !noalias !20
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !26

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #10
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !27

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %629, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #10
  br label %629

268:                                              ; preds = %11
  %269 = bitcast %"class.std::__1::vector"* %0 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %17, %270
  %272 = add i64 %271, %9
  %273 = icmp slt i64 %272, 0
  br i1 %273, label %274, label %276

274:                                              ; preds = %268
  %275 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #11
  unreachable

276:                                              ; preds = %268
  %277 = sub i64 %14, %270
  %278 = icmp ult i64 %277, 4611686018427387903
  br i1 %278, label %281, label %279

279:                                              ; preds = %276
  %280 = sub i64 %5, %270
  br label %287

281:                                              ; preds = %276
  %282 = shl i64 %277, 1
  %283 = icmp ult i64 %282, %272
  %284 = select i1 %283, i64 %272, i64 %282
  %285 = sub i64 %5, %270
  %286 = icmp eq i64 %284, 0
  br i1 %286, label %300, label %287

287:                                              ; preds = %279, %281
  %288 = phi i64 [ %280, %279 ], [ %285, %281 ]
  %289 = phi i64 [ 9223372036854775807, %279 ], [ %284, %281 ]
  %290 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %291 = load i64, i64* %290, align 8
  %292 = icmp ult i64 %291, %289
  br i1 %292, label %296, label %293

293:                                              ; preds = %287
  %294 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %295 = load i8*, i8** %294, align 8
  br label %300

296:                                              ; preds = %287
  %297 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %298 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %297, align 8
  %299 = tail call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %298, i64 %289) #10
  br label %300

300:                                              ; preds = %281, %293, %296
  %301 = phi i64 [ %285, %281 ], [ %288, %293 ], [ %288, %296 ]
  %302 = phi i64 [ 0, %281 ], [ %289, %293 ], [ %289, %296 ]
  %303 = phi i8* [ null, %281 ], [ %295, %293 ], [ %299, %296 ]
  %304 = getelementptr inbounds i8, i8* %303, i64 %301
  %305 = getelementptr inbounds i8, i8* %303, i64 %302
  %306 = getelementptr inbounds i8, i8* %304, i64 %9
  %307 = icmp ult i64 %9, 32
  br i1 %307, label %393, label %308

308:                                              ; preds = %300
  %309 = icmp ult i8* %304, %3
  %310 = icmp ugt i8* %306, %2
  %311 = and i1 %309, %310
  br i1 %311, label %393, label %312

312:                                              ; preds = %308
  %313 = and i64 %9, -32
  %314 = getelementptr i8, i8* %304, i64 %313
  %315 = getelementptr i8, i8* %2, i64 %313
  %316 = add i64 %313, -32
  %317 = lshr exact i64 %316, 5
  %318 = add nuw nsw i64 %317, 1
  %319 = and i64 %318, 3
  %320 = icmp ult i64 %316, 96
  br i1 %320, label %372, label %321

321:                                              ; preds = %312
  %322 = sub nsw i64 %318, %319
  br label %323

323:                                              ; preds = %323, %321
  %324 = phi i64 [ 0, %321 ], [ %369, %323 ]
  %325 = phi i64 [ %322, %321 ], [ %370, %323 ]
  %326 = getelementptr i8, i8* %304, i64 %324
  %327 = getelementptr i8, i8* %2, i64 %324
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1, !alias.scope !28
  %330 = getelementptr i8, i8* %327, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !alias.scope !28
  %333 = bitcast i8* %326 to <16 x i8>*
  store <16 x i8> %329, <16 x i8>* %333, align 1, !alias.scope !31, !noalias !28
  %334 = getelementptr i8, i8* %326, i64 16
  %335 = bitcast i8* %334 to <16 x i8>*
  store <16 x i8> %332, <16 x i8>* %335, align 1, !alias.scope !31, !noalias !28
  %336 = or i64 %324, 32
  %337 = getelementptr i8, i8* %304, i64 %336
  %338 = getelementptr i8, i8* %2, i64 %336
  %339 = bitcast i8* %338 to <16 x i8>*
  %340 = load <16 x i8>, <16 x i8>* %339, align 1, !alias.scope !28
  %341 = getelementptr i8, i8* %338, i64 16
  %342 = bitcast i8* %341 to <16 x i8>*
  %343 = load <16 x i8>, <16 x i8>* %342, align 1, !alias.scope !28
  %344 = bitcast i8* %337 to <16 x i8>*
  store <16 x i8> %340, <16 x i8>* %344, align 1, !alias.scope !31, !noalias !28
  %345 = getelementptr i8, i8* %337, i64 16
  %346 = bitcast i8* %345 to <16 x i8>*
  store <16 x i8> %343, <16 x i8>* %346, align 1, !alias.scope !31, !noalias !28
  %347 = or i64 %324, 64
  %348 = getelementptr i8, i8* %304, i64 %347
  %349 = getelementptr i8, i8* %2, i64 %347
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1, !alias.scope !28
  %352 = getelementptr i8, i8* %349, i64 16
  %353 = bitcast i8* %352 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1, !alias.scope !28
  %355 = bitcast i8* %348 to <16 x i8>*
  store <16 x i8> %351, <16 x i8>* %355, align 1, !alias.scope !31, !noalias !28
  %356 = getelementptr i8, i8* %348, i64 16
  %357 = bitcast i8* %356 to <16 x i8>*
  store <16 x i8> %354, <16 x i8>* %357, align 1, !alias.scope !31, !noalias !28
  %358 = or i64 %324, 96
  %359 = getelementptr i8, i8* %304, i64 %358
  %360 = getelementptr i8, i8* %2, i64 %358
  %361 = bitcast i8* %360 to <16 x i8>*
  %362 = load <16 x i8>, <16 x i8>* %361, align 1, !alias.scope !28
  %363 = getelementptr i8, i8* %360, i64 16
  %364 = bitcast i8* %363 to <16 x i8>*
  %365 = load <16 x i8>, <16 x i8>* %364, align 1, !alias.scope !28
  %366 = bitcast i8* %359 to <16 x i8>*
  store <16 x i8> %362, <16 x i8>* %366, align 1, !alias.scope !31, !noalias !28
  %367 = getelementptr i8, i8* %359, i64 16
  %368 = bitcast i8* %367 to <16 x i8>*
  store <16 x i8> %365, <16 x i8>* %368, align 1, !alias.scope !31, !noalias !28
  %369 = add i64 %324, 128
  %370 = add i64 %325, -4
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %372, label %323, !llvm.loop !33

372:                                              ; preds = %323, %312
  %373 = phi i64 [ 0, %312 ], [ %369, %323 ]
  %374 = icmp eq i64 %319, 0
  br i1 %374, label %391, label %375

375:                                              ; preds = %372, %375
  %376 = phi i64 [ %388, %375 ], [ %373, %372 ]
  %377 = phi i64 [ %389, %375 ], [ %319, %372 ]
  %378 = getelementptr i8, i8* %304, i64 %376
  %379 = getelementptr i8, i8* %2, i64 %376
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1, !alias.scope !28
  %382 = getelementptr i8, i8* %379, i64 16
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1, !alias.scope !28
  %385 = bitcast i8* %378 to <16 x i8>*
  store <16 x i8> %381, <16 x i8>* %385, align 1, !alias.scope !31, !noalias !28
  %386 = getelementptr i8, i8* %378, i64 16
  %387 = bitcast i8* %386 to <16 x i8>*
  store <16 x i8> %384, <16 x i8>* %387, align 1, !alias.scope !31, !noalias !28
  %388 = add i64 %376, 32
  %389 = add i64 %377, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %391, label %375, !llvm.loop !34

391:                                              ; preds = %375, %372
  %392 = icmp eq i64 %9, %313
  br i1 %392, label %403, label %393

393:                                              ; preds = %391, %308, %300
  %394 = phi i8* [ %304, %308 ], [ %304, %300 ], [ %314, %391 ]
  %395 = phi i8* [ %2, %308 ], [ %2, %300 ], [ %315, %391 ]
  br label %396

396:                                              ; preds = %393, %396
  %397 = phi i8* [ %400, %396 ], [ %394, %393 ]
  %398 = phi i8* [ %401, %396 ], [ %395, %393 ]
  %399 = load i8, i8* %398, align 1
  store i8 %399, i8* %397, align 1
  %400 = getelementptr inbounds i8, i8* %397, i64 1
  %401 = getelementptr inbounds i8, i8* %398, i64 1
  %402 = icmp eq i8* %306, %400
  br i1 %402, label %403, label %396, !llvm.loop !35

403:                                              ; preds = %396, %391
  %404 = ptrtoint i8* %305 to i64
  %405 = load i8*, i8** %7, align 8
  %406 = icmp eq i8* %405, %1
  br i1 %406, label %516, label %407

407:                                              ; preds = %403
  %408 = ptrtoint i8* %405 to i64
  %409 = ptrtoint i8* %1 to i64
  %410 = sub i64 %409, %408
  %411 = icmp ult i64 %410, 16
  br i1 %411, label %506, label %412

412:                                              ; preds = %407
  %413 = sub i64 %301, %5
  %414 = getelementptr i8, i8* %405, i64 %413
  %415 = ptrtoint i8* %414 to i64
  %416 = getelementptr i8, i8* %303, i64 %415
  %417 = icmp ult i8* %416, %1
  %418 = icmp ult i8* %405, %304
  %419 = and i1 %417, %418
  br i1 %419, label %506, label %420

420:                                              ; preds = %412
  %421 = and i64 %410, -16
  %422 = sub i64 0, %421
  %423 = getelementptr i8, i8* %304, i64 %422
  %424 = sub i64 0, %421
  %425 = getelementptr i8, i8* %1, i64 %424
  %426 = add i64 %421, -16
  %427 = lshr exact i64 %426, 4
  %428 = add nuw nsw i64 %427, 1
  %429 = and i64 %428, 3
  %430 = icmp ult i64 %426, 48
  br i1 %430, label %483, label %431

431:                                              ; preds = %420
  %432 = sub nsw i64 %428, %429
  %433 = getelementptr i8, i8* %304, i64 -1
  %434 = getelementptr inbounds i8, i8* %433, i64 -8
  %435 = getelementptr inbounds i8, i8* %1, i64 -16
  %436 = getelementptr inbounds i8, i8* %434, i64 -7
  %437 = getelementptr i8, i8* %304, i64 -1
  %438 = getelementptr inbounds i8, i8* %437, i64 -8
  %439 = getelementptr inbounds i8, i8* %1, i64 -16
  %440 = getelementptr inbounds i8, i8* %438, i64 -7
  %441 = getelementptr i8, i8* %304, i64 -1
  %442 = getelementptr inbounds i8, i8* %441, i64 -8
  %443 = getelementptr inbounds i8, i8* %1, i64 -16
  %444 = getelementptr inbounds i8, i8* %442, i64 -7
  %445 = getelementptr i8, i8* %304, i64 -1
  %446 = getelementptr inbounds i8, i8* %445, i64 -8
  %447 = getelementptr inbounds i8, i8* %1, i64 -16
  %448 = getelementptr inbounds i8, i8* %446, i64 -7
  br label %449

449:                                              ; preds = %449, %431
  %450 = phi i64 [ 0, %431 ], [ %480, %449 ]
  %451 = phi i64 [ %432, %431 ], [ %481, %449 ]
  %452 = sub i64 0, %450
  %453 = sub i64 0, %450
  %454 = getelementptr inbounds i8, i8* %435, i64 %453
  %455 = bitcast i8* %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 1, !alias.scope !36
  %457 = getelementptr inbounds i8, i8* %436, i64 %452
  %458 = bitcast i8* %457 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %458, align 1, !alias.scope !39, !noalias !36
  %459 = sub nuw nsw i64 -16, %450
  %460 = sub nuw nsw i64 -16, %450
  %461 = getelementptr inbounds i8, i8* %439, i64 %460
  %462 = bitcast i8* %461 to <2 x i64>*
  %463 = load <2 x i64>, <2 x i64>* %462, align 1, !alias.scope !36
  %464 = getelementptr inbounds i8, i8* %440, i64 %459
  %465 = bitcast i8* %464 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %465, align 1, !alias.scope !39, !noalias !36
  %466 = sub nuw nsw i64 -32, %450
  %467 = sub nuw nsw i64 -32, %450
  %468 = getelementptr inbounds i8, i8* %443, i64 %467
  %469 = bitcast i8* %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 1, !alias.scope !36
  %471 = getelementptr inbounds i8, i8* %444, i64 %466
  %472 = bitcast i8* %471 to <2 x i64>*
  store <2 x i64> %470, <2 x i64>* %472, align 1, !alias.scope !39, !noalias !36
  %473 = sub nuw nsw i64 -48, %450
  %474 = sub nuw nsw i64 -48, %450
  %475 = getelementptr inbounds i8, i8* %447, i64 %474
  %476 = bitcast i8* %475 to <2 x i64>*
  %477 = load <2 x i64>, <2 x i64>* %476, align 1, !alias.scope !36
  %478 = getelementptr inbounds i8, i8* %448, i64 %473
  %479 = bitcast i8* %478 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %479, align 1, !alias.scope !39, !noalias !36
  %480 = add i64 %450, 64
  %481 = add i64 %451, -4
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %483, label %449, !llvm.loop !41

483:                                              ; preds = %449, %420
  %484 = phi i64 [ 0, %420 ], [ %480, %449 ]
  %485 = icmp eq i64 %429, 0
  br i1 %485, label %504, label %486

486:                                              ; preds = %483
  %487 = getelementptr i8, i8* %304, i64 -1
  %488 = getelementptr inbounds i8, i8* %487, i64 -8
  %489 = getelementptr inbounds i8, i8* %1, i64 -16
  %490 = getelementptr inbounds i8, i8* %488, i64 -7
  br label %491

491:                                              ; preds = %491, %486
  %492 = phi i64 [ %484, %486 ], [ %501, %491 ]
  %493 = phi i64 [ %429, %486 ], [ %502, %491 ]
  %494 = sub i64 0, %492
  %495 = sub i64 0, %492
  %496 = getelementptr inbounds i8, i8* %489, i64 %495
  %497 = bitcast i8* %496 to <2 x i64>*
  %498 = load <2 x i64>, <2 x i64>* %497, align 1, !alias.scope !36
  %499 = getelementptr inbounds i8, i8* %490, i64 %494
  %500 = bitcast i8* %499 to <2 x i64>*
  store <2 x i64> %498, <2 x i64>* %500, align 1, !alias.scope !39, !noalias !36
  %501 = add i64 %492, 16
  %502 = add i64 %493, -1
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %491, !llvm.loop !42

504:                                              ; preds = %491, %483
  %505 = icmp eq i64 %410, %421
  br i1 %505, label %516, label %506

506:                                              ; preds = %504, %412, %407
  %507 = phi i8* [ %304, %412 ], [ %304, %407 ], [ %423, %504 ]
  %508 = phi i8* [ %1, %412 ], [ %1, %407 ], [ %425, %504 ]
  br label %509

509:                                              ; preds = %506, %509
  %510 = phi i8* [ %512, %509 ], [ %507, %506 ]
  %511 = phi i8* [ %513, %509 ], [ %508, %506 ]
  %512 = getelementptr inbounds i8, i8* %510, i64 -1
  %513 = getelementptr inbounds i8, i8* %511, i64 -1
  %514 = load i8, i8* %513, align 1
  store i8 %514, i8* %512, align 1
  %515 = icmp eq i8* %513, %405
  br i1 %515, label %516, label %509, !llvm.loop !43

516:                                              ; preds = %509, %504, %403
  %517 = phi i8* [ %304, %403 ], [ %423, %504 ], [ %512, %509 ]
  %518 = load i8*, i8** %15, align 8
  %519 = icmp eq i8* %518, %1
  br i1 %519, label %625, label %520

520:                                              ; preds = %516
  %521 = ptrtoint i8* %518 to i64
  %522 = sub i64 %521, %5
  %523 = icmp ult i64 %522, 32
  br i1 %523, label %615, label %524

524:                                              ; preds = %520
  %525 = add i64 %301, %8
  %526 = sub i64 %525, %5
  %527 = sub i64 %526, %6
  %528 = getelementptr i8, i8* %518, i64 %527
  %529 = ptrtoint i8* %528 to i64
  %530 = getelementptr i8, i8* %303, i64 %529
  %531 = icmp ult i8* %306, %518
  %532 = icmp ugt i8* %530, %1
  %533 = and i1 %531, %532
  br i1 %533, label %615, label %534

534:                                              ; preds = %524
  %535 = and i64 %522, -32
  %536 = getelementptr i8, i8* %306, i64 %535
  %537 = getelementptr i8, i8* %1, i64 %535
  %538 = add i64 %535, -32
  %539 = lshr exact i64 %538, 5
  %540 = add nuw nsw i64 %539, 1
  %541 = and i64 %540, 3
  %542 = icmp ult i64 %538, 96
  br i1 %542, label %594, label %543

543:                                              ; preds = %534
  %544 = sub nsw i64 %540, %541
  br label %545

545:                                              ; preds = %545, %543
  %546 = phi i64 [ 0, %543 ], [ %591, %545 ]
  %547 = phi i64 [ %544, %543 ], [ %592, %545 ]
  %548 = getelementptr i8, i8* %306, i64 %546
  %549 = getelementptr i8, i8* %1, i64 %546
  %550 = bitcast i8* %549 to <16 x i8>*
  %551 = load <16 x i8>, <16 x i8>* %550, align 1, !alias.scope !44
  %552 = getelementptr i8, i8* %549, i64 16
  %553 = bitcast i8* %552 to <16 x i8>*
  %554 = load <16 x i8>, <16 x i8>* %553, align 1, !alias.scope !44
  %555 = bitcast i8* %548 to <16 x i8>*
  store <16 x i8> %551, <16 x i8>* %555, align 1, !alias.scope !47, !noalias !44
  %556 = getelementptr i8, i8* %548, i64 16
  %557 = bitcast i8* %556 to <16 x i8>*
  store <16 x i8> %554, <16 x i8>* %557, align 1, !alias.scope !47, !noalias !44
  %558 = or i64 %546, 32
  %559 = getelementptr i8, i8* %306, i64 %558
  %560 = getelementptr i8, i8* %1, i64 %558
  %561 = bitcast i8* %560 to <16 x i8>*
  %562 = load <16 x i8>, <16 x i8>* %561, align 1, !alias.scope !44
  %563 = getelementptr i8, i8* %560, i64 16
  %564 = bitcast i8* %563 to <16 x i8>*
  %565 = load <16 x i8>, <16 x i8>* %564, align 1, !alias.scope !44
  %566 = bitcast i8* %559 to <16 x i8>*
  store <16 x i8> %562, <16 x i8>* %566, align 1, !alias.scope !47, !noalias !44
  %567 = getelementptr i8, i8* %559, i64 16
  %568 = bitcast i8* %567 to <16 x i8>*
  store <16 x i8> %565, <16 x i8>* %568, align 1, !alias.scope !47, !noalias !44
  %569 = or i64 %546, 64
  %570 = getelementptr i8, i8* %306, i64 %569
  %571 = getelementptr i8, i8* %1, i64 %569
  %572 = bitcast i8* %571 to <16 x i8>*
  %573 = load <16 x i8>, <16 x i8>* %572, align 1, !alias.scope !44
  %574 = getelementptr i8, i8* %571, i64 16
  %575 = bitcast i8* %574 to <16 x i8>*
  %576 = load <16 x i8>, <16 x i8>* %575, align 1, !alias.scope !44
  %577 = bitcast i8* %570 to <16 x i8>*
  store <16 x i8> %573, <16 x i8>* %577, align 1, !alias.scope !47, !noalias !44
  %578 = getelementptr i8, i8* %570, i64 16
  %579 = bitcast i8* %578 to <16 x i8>*
  store <16 x i8> %576, <16 x i8>* %579, align 1, !alias.scope !47, !noalias !44
  %580 = or i64 %546, 96
  %581 = getelementptr i8, i8* %306, i64 %580
  %582 = getelementptr i8, i8* %1, i64 %580
  %583 = bitcast i8* %582 to <16 x i8>*
  %584 = load <16 x i8>, <16 x i8>* %583, align 1, !alias.scope !44
  %585 = getelementptr i8, i8* %582, i64 16
  %586 = bitcast i8* %585 to <16 x i8>*
  %587 = load <16 x i8>, <16 x i8>* %586, align 1, !alias.scope !44
  %588 = bitcast i8* %581 to <16 x i8>*
  store <16 x i8> %584, <16 x i8>* %588, align 1, !alias.scope !47, !noalias !44
  %589 = getelementptr i8, i8* %581, i64 16
  %590 = bitcast i8* %589 to <16 x i8>*
  store <16 x i8> %587, <16 x i8>* %590, align 1, !alias.scope !47, !noalias !44
  %591 = add i64 %546, 128
  %592 = add i64 %547, -4
  %593 = icmp eq i64 %592, 0
  br i1 %593, label %594, label %545, !llvm.loop !49

594:                                              ; preds = %545, %534
  %595 = phi i64 [ 0, %534 ], [ %591, %545 ]
  %596 = icmp eq i64 %541, 0
  br i1 %596, label %613, label %597

597:                                              ; preds = %594, %597
  %598 = phi i64 [ %610, %597 ], [ %595, %594 ]
  %599 = phi i64 [ %611, %597 ], [ %541, %594 ]
  %600 = getelementptr i8, i8* %306, i64 %598
  %601 = getelementptr i8, i8* %1, i64 %598
  %602 = bitcast i8* %601 to <16 x i8>*
  %603 = load <16 x i8>, <16 x i8>* %602, align 1, !alias.scope !44
  %604 = getelementptr i8, i8* %601, i64 16
  %605 = bitcast i8* %604 to <16 x i8>*
  %606 = load <16 x i8>, <16 x i8>* %605, align 1, !alias.scope !44
  %607 = bitcast i8* %600 to <16 x i8>*
  store <16 x i8> %603, <16 x i8>* %607, align 1, !alias.scope !47, !noalias !44
  %608 = getelementptr i8, i8* %600, i64 16
  %609 = bitcast i8* %608 to <16 x i8>*
  store <16 x i8> %606, <16 x i8>* %609, align 1, !alias.scope !47, !noalias !44
  %610 = add i64 %598, 32
  %611 = add i64 %599, -1
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %597, !llvm.loop !50

613:                                              ; preds = %597, %594
  %614 = icmp eq i64 %522, %535
  br i1 %614, label %625, label %615

615:                                              ; preds = %613, %524, %520
  %616 = phi i8* [ %306, %524 ], [ %306, %520 ], [ %536, %613 ]
  %617 = phi i8* [ %1, %524 ], [ %1, %520 ], [ %537, %613 ]
  br label %618

618:                                              ; preds = %615, %618
  %619 = phi i8* [ %623, %618 ], [ %616, %615 ]
  %620 = phi i8* [ %622, %618 ], [ %617, %615 ]
  %621 = load i8, i8* %620, align 1
  store i8 %621, i8* %619, align 1
  %622 = getelementptr inbounds i8, i8* %620, i64 1
  %623 = getelementptr inbounds i8, i8* %619, i64 1
  %624 = icmp eq i8* %622, %518
  br i1 %624, label %625, label %618, !llvm.loop !51

625:                                              ; preds = %618, %613, %516
  %626 = phi i8* [ %306, %516 ], [ %536, %613 ], [ %623, %618 ]
  %627 = ptrtoint i8* %517 to i64
  %628 = ptrtoint i8* %626 to i64
  store i64 %627, i64* %269, align 8
  store i64 %628, i64* %20, align 8
  store i64 %404, i64* %13, align 8
  br label %629

629:                                              ; preds = %625, %136, %263, %267, %4
  %630 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %304, %625 ]
  ret i8* %630
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare void @my_memset(i8*, i8 signext, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhN15google_breakpad16PageStdAllocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %182

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %41, %39
  br i1 %42, label %46, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  br label %50

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %48 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %47, align 8
  %49 = tail call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %48, i64 %39) #10
  br label %50

50:                                               ; preds = %46, %43, %33
  %51 = phi i64 [ 0, %33 ], [ %39, %43 ], [ %39, %46 ]
  %52 = phi i8* [ null, %33 ], [ %45, %43 ], [ %49, %46 ]
  %53 = getelementptr inbounds i8, i8* %52, i64 %25
  %54 = ptrtoint i8* %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %51
  %56 = getelementptr inbounds i8, i8* %53, i64 %1
  %57 = sub i64 %1, %54
  %58 = getelementptr i8, i8* %53, i64 %57
  %59 = ptrtoint i8* %58 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 0, i64 %59, i1 false) #10
  %60 = ptrtoint i8* %55 to i64
  %61 = ptrtoint i8* %56 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load i8*, i8** %6, align 8
  %65 = ptrtoint i8* %64 to i64
  %66 = icmp eq i8* %64, %63
  br i1 %66, label %180, label %67

67:                                               ; preds = %50
  %68 = ptrtoint i8* %63 to i64
  %69 = ptrtoint i8* %64 to i64
  %70 = sub i64 %69, %68
  %71 = icmp ult i64 %70, 16
  br i1 %71, label %167, label %72

72:                                               ; preds = %67
  %73 = sub i64 %8, %65
  %74 = sub i64 %73, %24
  %75 = getelementptr i8, i8* %63, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = getelementptr i8, i8* %52, i64 %76
  %78 = icmp ult i8* %77, %64
  %79 = icmp ult i8* %63, %53
  %80 = and i1 %78, %79
  br i1 %80, label %167, label %81

81:                                               ; preds = %72
  %82 = and i64 %70, -16
  %83 = sub i64 0, %82
  %84 = getelementptr i8, i8* %53, i64 %83
  %85 = sub i64 0, %82
  %86 = getelementptr i8, i8* %64, i64 %85
  %87 = add i64 %82, -16
  %88 = lshr exact i64 %87, 4
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 3
  %91 = icmp ult i64 %87, 48
  br i1 %91, label %144, label %92

92:                                               ; preds = %81
  %93 = sub nsw i64 %89, %90
  %94 = getelementptr i8, i8* %53, i64 -1
  %95 = getelementptr inbounds i8, i8* %94, i64 -8
  %96 = getelementptr inbounds i8, i8* %64, i64 -16
  %97 = getelementptr inbounds i8, i8* %95, i64 -7
  %98 = getelementptr i8, i8* %53, i64 -1
  %99 = getelementptr inbounds i8, i8* %98, i64 -8
  %100 = getelementptr inbounds i8, i8* %64, i64 -16
  %101 = getelementptr inbounds i8, i8* %99, i64 -7
  %102 = getelementptr i8, i8* %53, i64 -1
  %103 = getelementptr inbounds i8, i8* %102, i64 -8
  %104 = getelementptr inbounds i8, i8* %64, i64 -16
  %105 = getelementptr inbounds i8, i8* %103, i64 -7
  %106 = getelementptr i8, i8* %53, i64 -1
  %107 = getelementptr inbounds i8, i8* %106, i64 -8
  %108 = getelementptr inbounds i8, i8* %64, i64 -16
  %109 = getelementptr inbounds i8, i8* %107, i64 -7
  br label %110

110:                                              ; preds = %110, %92
  %111 = phi i64 [ 0, %92 ], [ %141, %110 ]
  %112 = phi i64 [ %93, %92 ], [ %142, %110 ]
  %113 = sub i64 0, %111
  %114 = sub i64 0, %111
  %115 = getelementptr inbounds i8, i8* %96, i64 %114
  %116 = bitcast i8* %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 1, !alias.scope !52
  %118 = getelementptr inbounds i8, i8* %97, i64 %113
  %119 = bitcast i8* %118 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %119, align 1, !alias.scope !55, !noalias !52
  %120 = sub nuw nsw i64 -16, %111
  %121 = sub nuw nsw i64 -16, %111
  %122 = getelementptr inbounds i8, i8* %100, i64 %121
  %123 = bitcast i8* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 1, !alias.scope !52
  %125 = getelementptr inbounds i8, i8* %101, i64 %120
  %126 = bitcast i8* %125 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %126, align 1, !alias.scope !55, !noalias !52
  %127 = sub nuw nsw i64 -32, %111
  %128 = sub nuw nsw i64 -32, %111
  %129 = getelementptr inbounds i8, i8* %104, i64 %128
  %130 = bitcast i8* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1, !alias.scope !52
  %132 = getelementptr inbounds i8, i8* %105, i64 %127
  %133 = bitcast i8* %132 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1, !alias.scope !55, !noalias !52
  %134 = sub nuw nsw i64 -48, %111
  %135 = sub nuw nsw i64 -48, %111
  %136 = getelementptr inbounds i8, i8* %108, i64 %135
  %137 = bitcast i8* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1, !alias.scope !52
  %139 = getelementptr inbounds i8, i8* %109, i64 %134
  %140 = bitcast i8* %139 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %140, align 1, !alias.scope !55, !noalias !52
  %141 = add i64 %111, 64
  %142 = add i64 %112, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %110, !llvm.loop !57

144:                                              ; preds = %110, %81
  %145 = phi i64 [ 0, %81 ], [ %141, %110 ]
  %146 = icmp eq i64 %90, 0
  br i1 %146, label %165, label %147

147:                                              ; preds = %144
  %148 = getelementptr i8, i8* %53, i64 -1
  %149 = getelementptr inbounds i8, i8* %148, i64 -8
  %150 = getelementptr inbounds i8, i8* %64, i64 -16
  %151 = getelementptr inbounds i8, i8* %149, i64 -7
  br label %152

152:                                              ; preds = %152, %147
  %153 = phi i64 [ %145, %147 ], [ %162, %152 ]
  %154 = phi i64 [ %90, %147 ], [ %163, %152 ]
  %155 = sub i64 0, %153
  %156 = sub i64 0, %153
  %157 = getelementptr inbounds i8, i8* %150, i64 %156
  %158 = bitcast i8* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 1, !alias.scope !52
  %160 = getelementptr inbounds i8, i8* %151, i64 %155
  %161 = bitcast i8* %160 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %161, align 1, !alias.scope !55, !noalias !52
  %162 = add i64 %153, 16
  %163 = add i64 %154, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %152, !llvm.loop !58

165:                                              ; preds = %152, %144
  %166 = icmp eq i64 %70, %82
  br i1 %166, label %177, label %167

167:                                              ; preds = %165, %72, %67
  %168 = phi i8* [ %53, %72 ], [ %53, %67 ], [ %84, %165 ]
  %169 = phi i8* [ %64, %72 ], [ %64, %67 ], [ %86, %165 ]
  br label %170

170:                                              ; preds = %167, %170
  %171 = phi i8* [ %173, %170 ], [ %168, %167 ]
  %172 = phi i8* [ %174, %170 ], [ %169, %167 ]
  %173 = getelementptr inbounds i8, i8* %171, i64 -1
  %174 = getelementptr inbounds i8, i8* %172, i64 -1
  %175 = load i8, i8* %174, align 1
  store i8 %175, i8* %173, align 1
  %176 = icmp eq i8* %174, %63
  br i1 %176, label %177, label %170, !llvm.loop !59

177:                                              ; preds = %170, %165
  %178 = phi i8* [ %84, %165 ], [ %173, %170 ]
  %179 = ptrtoint i8* %178 to i64
  br label %180

180:                                              ; preds = %177, %50
  %181 = phi i64 [ %54, %50 ], [ %179, %177 ]
  store i64 %181, i64* %23, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  br label %182

182:                                              ; preds = %180, %20
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #6

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2143549598}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN15google_breakpadL19bytes_to_hex_stringEPKhm: argument 0"}
!5 = distinct !{!5, !"_ZN15google_breakpadL19bytes_to_hex_stringEPKhm"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN15google_breakpadL19bytes_to_hex_stringEPKhm: argument 0"}
!8 = distinct !{!8, !"_ZN15google_breakpadL19bytes_to_hex_stringEPKhm"}
!9 = !{i32 -2143425709}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !16}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !18}
!27 = distinct !{!27, !16}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !16}
!34 = distinct !{!34, !18}
!35 = distinct !{!35, !16}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !16}
!42 = distinct !{!42, !18}
!43 = distinct !{!43, !16}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !16}
!50 = distinct !{!50, !18}
!51 = distinct !{!51, !16}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !16}
!58 = distinct !{!58, !18}
!59 = distinct !{!59, !16}
