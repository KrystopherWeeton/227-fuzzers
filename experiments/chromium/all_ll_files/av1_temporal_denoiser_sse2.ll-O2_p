; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_temporal_denoiser_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_temporal_denoiser_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_denoiser_filter_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %10 = alloca [8 x [16 x i8]], align 16
  %11 = alloca [8 x [16 x i8]], align 16
  %12 = alloca [8 x [16 x i8]], align 16
  %13 = alloca [8 x [8 x <2 x i64>]], align 16
  switch i8 %7, label %740 [
    i8 6, label %14
    i8 9, label %14
    i8 12, label %14
    i8 15, label %14
    i8 14, label %14
    i8 13, label %14
    i8 7, label %14
    i8 5, label %14
    i8 8, label %14
    i8 10, label %14
    i8 11, label %14
    i8 3, label %516
    i8 4, label %516
  ]

14:                                               ; preds = %9, %9, %9, %9, %9, %9, %9, %9, %9, %9, %9
  %15 = icmp ne i32 %6, 0
  %16 = icmp slt i32 %8, 25
  %17 = and i1 %15, %16
  %18 = bitcast [8 x [8 x <2 x i64>]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 1024, i1 false) #4
  %19 = select i1 %17, i8 5, i8 4
  %20 = insertelement <16 x i8> undef, i8 %19, i32 0
  %21 = select i1 %17, i8 8, i8 7
  %22 = select i1 %16, i8 %21, i8 6
  %23 = insertelement <16 x i8> undef, i8 %22, i32 0
  %24 = zext i8 %7 to i64
  %25 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %24
  %28 = load i8, i8* %27, align 1
  %29 = lshr i8 %26, 4
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %48, label %31

31:                                               ; preds = %14
  %32 = zext i8 %29 to i64
  %33 = add nsw i64 %32, -1
  %34 = and i64 %32, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %72, label %36

36:                                               ; preds = %31
  %37 = sub nsw i64 %32, %34
  br label %59

38:                                               ; preds = %501, %495
  %39 = phi i64 [ 0, %495 ], [ %511, %501 ]
  %40 = icmp eq i64 %497, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %38, %41
  %42 = phi i64 [ %45, %41 ], [ %39, %38 ]
  %43 = phi i64 [ %46, %41 ], [ %497, %38 ]
  %44 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %42, i64 7
  store <2 x i64> zeroinitializer, <2 x i64>* %44, align 16
  %45 = add nuw nsw i64 %42, 1
  %46 = add i64 %43, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %41, !llvm.loop !2

48:                                               ; preds = %38, %41, %14
  %49 = phi i64 [ 0, %14 ], [ %32, %41 ], [ %32, %38 ]
  %50 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> zeroinitializer
  %51 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> zeroinitializer
  %52 = zext i8 %28 to i32
  %53 = icmp eq i8 %7, 5
  %54 = zext i8 %26 to i64
  %55 = sub nsw i64 0, %54
  %56 = sext i32 %1 to i64
  %57 = sext i32 %3 to i64
  %58 = sext i32 %5 to i64
  br label %88

59:                                               ; preds = %59, %36
  %60 = phi i64 [ 0, %36 ], [ %69, %59 ]
  %61 = phi i64 [ %37, %36 ], [ %70, %59 ]
  %62 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %60, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %62, align 16
  %63 = or i64 %60, 1
  %64 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %63, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %64, align 16
  %65 = or i64 %60, 2
  %66 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %65, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %66, align 16
  %67 = or i64 %60, 3
  %68 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %67, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %68, align 16
  %69 = add nuw nsw i64 %60, 4
  %70 = add i64 %61, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %59

72:                                               ; preds = %59, %31
  %73 = phi i64 [ 0, %31 ], [ %69, %59 ]
  %74 = icmp eq i64 %34, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %79, %75 ], [ %73, %72 ]
  %77 = phi i64 [ %80, %75 ], [ %34, %72 ]
  %78 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %76, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %78, align 16
  %79 = add nuw nsw i64 %76, 1
  %80 = add i64 %77, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %75, !llvm.loop !4

82:                                               ; preds = %75, %72
  %83 = add nsw i64 %32, -1
  %84 = and i64 %32, 3
  %85 = icmp ult i64 %83, 3
  br i1 %85, label %340, label %86

86:                                               ; preds = %82
  %87 = sub nsw i64 %32, %84
  br label %327

88:                                               ; preds = %187, %48
  %89 = phi i32 [ 0, %48 ], [ %188, %187 ]
  %90 = phi i32 [ 0, %48 ], [ %195, %187 ]
  %91 = phi i8* [ %0, %48 ], [ %190, %187 ]
  %92 = phi i8* [ %2, %48 ], [ %192, %187 ]
  %93 = phi i8* [ %4, %48 ], [ %194, %187 ]
  br i1 %30, label %147, label %94

94:                                               ; preds = %88
  %95 = lshr i32 %90, 4
  %96 = zext i32 %95 to i64
  br label %97

97:                                               ; preds = %97, %94
  %98 = phi i64 [ 0, %94 ], [ %145, %97 ]
  %99 = phi i8* [ %91, %94 ], [ %142, %97 ]
  %100 = phi i8* [ %92, %94 ], [ %143, %97 ]
  %101 = phi i8* [ %93, %94 ], [ %144, %97 ]
  %102 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %98, i64 %96
  %103 = bitcast <2 x i64>* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 16
  %105 = bitcast i8* %99 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1
  %107 = bitcast i8* %100 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %108, <16 x i8> %106) #4
  %110 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %106, <16 x i8> %108) #4
  %111 = icmp eq <16 x i8> %109, zeroinitializer
  %112 = sext <16 x i1> %111 to <16 x i8>
  %113 = bitcast <16 x i8> %112 to <2 x i64>
  %114 = or <16 x i8> %110, %109
  %115 = icmp ult <16 x i8> %114, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %116 = select <16 x i1> %115, <16 x i8> %114, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %117 = icmp slt <16 x i8> %116, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %118 = icmp slt <16 x i8> %116, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %119 = icmp sgt <16 x i8> %50, %116
  %120 = sext <16 x i1> %119 to <16 x i8>
  %121 = bitcast <16 x i8> %120 to <2 x i64>
  %122 = and <16 x i8> %116, %120
  %123 = bitcast <16 x i8> %122 to <2 x i64>
  %124 = select <16 x i1> %117, <16 x i8> <i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2>, <16 x i8> zeroinitializer
  %125 = zext <16 x i1> %118 to <16 x i8>
  %126 = sub <16 x i8> %51, %125
  %127 = add <16 x i8> %126, %124
  %128 = bitcast <16 x i8> %127 to <2 x i64>
  %129 = xor <2 x i64> %121, <i64 -1, i64 -1>
  %130 = and <2 x i64> %128, %129
  %131 = or <2 x i64> %130, %123
  %132 = xor <2 x i64> %113, <i64 -1, i64 -1>
  %133 = and <2 x i64> %131, %132
  %134 = and <2 x i64> %131, %113
  %135 = bitcast <2 x i64> %133 to <16 x i8>
  %136 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %106, <16 x i8> %135) #4
  %137 = bitcast <2 x i64> %134 to <16 x i8>
  %138 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %136, <16 x i8> %137) #4
  %139 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %139, align 1
  %140 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %104, <16 x i8> %135) #4
  %141 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %140, <16 x i8> %137) #4
  store <16 x i8> %141, <16 x i8>* %103, align 16
  %142 = getelementptr inbounds i8, i8* %99, i64 16
  %143 = getelementptr inbounds i8, i8* %100, i64 16
  %144 = getelementptr inbounds i8, i8* %101, i64 16
  %145 = add nuw nsw i64 %98, 1
  %146 = icmp eq i64 %145, %49
  br i1 %146, label %147, label %97

147:                                              ; preds = %97, %88
  %148 = phi i8* [ %93, %88 ], [ %144, %97 ]
  %149 = phi i8* [ %92, %88 ], [ %143, %97 ]
  %150 = phi i8* [ %91, %88 ], [ %142, %97 ]
  %151 = and i32 %90, 15
  %152 = icmp eq i32 %151, 15
  %153 = icmp eq i32 %90, 7
  %154 = and i1 %53, %153
  %155 = or i1 %152, %154
  %156 = xor i1 %155, true
  %157 = or i1 %30, %156
  br i1 %157, label %187, label %158

158:                                              ; preds = %147
  %159 = lshr i32 %90, 4
  %160 = zext i32 %159 to i64
  br label %161

161:                                              ; preds = %161, %158
  %162 = phi i64 [ 0, %158 ], [ %185, %161 ]
  %163 = phi i32 [ %89, %158 ], [ %184, %161 ]
  %164 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %162, i64 %160
  %165 = bitcast <2 x i64>* %164 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 16
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = ashr <8 x i16> %168, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %170 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %171 = bitcast <16 x i8> %170 to <8 x i16>
  %172 = ashr <8 x i16> %171, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %173 = add nsw <8 x i16> %172, %169
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %173, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %175 = bitcast <4 x i32> %174 to <16 x i8>
  %176 = shufflevector <16 x i8> %175, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %177 = bitcast <16 x i8> %176 to <4 x i32>
  %178 = add <4 x i32> %174, %177
  %179 = bitcast <4 x i32> %178 to <16 x i8>
  %180 = shufflevector <16 x i8> %179, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = bitcast <16 x i8> %180 to <4 x i32>
  %182 = add <4 x i32> %178, %181
  %183 = extractelement <4 x i32> %182, i32 0
  %184 = add nsw i32 %183, %163
  %185 = add nuw nsw i64 %162, 1
  %186 = icmp eq i64 %185, %49
  br i1 %186, label %187, label %161

187:                                              ; preds = %161, %147
  %188 = phi i32 [ %89, %147 ], [ %184, %161 ]
  %189 = getelementptr inbounds i8, i8* %150, i64 %55
  %190 = getelementptr inbounds i8, i8* %189, i64 %56
  %191 = getelementptr inbounds i8, i8* %149, i64 %55
  %192 = getelementptr inbounds i8, i8* %191, i64 %57
  %193 = getelementptr inbounds i8, i8* %148, i64 %55
  %194 = getelementptr inbounds i8, i8* %193, i64 %58
  %195 = add nuw nsw i32 %90, 1
  %196 = icmp ult i32 %195, %52
  br i1 %196, label %88, label %197

197:                                              ; preds = %187
  %198 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %24
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = icmp eq i32 %6, 0
  %202 = select i1 %201, i32 2, i32 3
  %203 = shl i32 %202, %200
  %204 = icmp slt i32 %188, 0
  %205 = sub nsw i32 0, %188
  %206 = select i1 %204, i32 %205, i32 %188
  %207 = icmp sgt i32 %206, %203
  br i1 %207, label %208, label %326

208:                                              ; preds = %197
  %209 = sub nsw i32 %206, %203
  %210 = ashr i32 %209, %200
  %211 = add nsw i32 %210, 1
  %212 = icmp slt i32 %211, 4
  br i1 %212, label %213, label %514

213:                                              ; preds = %208
  %214 = trunc i32 %211 to i8
  %215 = insertelement <16 x i8> undef, i8 %214, i32 0
  %216 = shufflevector <16 x i8> %215, <16 x i8> undef, <16 x i32> zeroinitializer
  %217 = mul nsw i32 %52, %5
  %218 = sext i32 %217 to i64
  %219 = sub nsw i64 0, %218
  %220 = getelementptr inbounds i8, i8* %194, i64 %219
  %221 = mul nsw i32 %52, %3
  %222 = sext i32 %221 to i64
  %223 = sub nsw i64 0, %222
  %224 = getelementptr inbounds i8, i8* %192, i64 %223
  %225 = mul nsw i32 %52, %1
  %226 = sext i32 %225 to i64
  %227 = sub nsw i64 0, %226
  %228 = getelementptr inbounds i8, i8* %190, i64 %227
  br label %229

229:                                              ; preds = %311, %213
  %230 = phi i32 [ 0, %213 ], [ %312, %311 ]
  %231 = phi i32 [ 0, %213 ], [ %319, %311 ]
  %232 = phi i8* [ %228, %213 ], [ %314, %311 ]
  %233 = phi i8* [ %224, %213 ], [ %316, %311 ]
  %234 = phi i8* [ %220, %213 ], [ %318, %311 ]
  br i1 %30, label %271, label %235

235:                                              ; preds = %229
  %236 = lshr i32 %231, 4
  %237 = zext i32 %236 to i64
  br label %238

238:                                              ; preds = %238, %235
  %239 = phi i64 [ 0, %235 ], [ %269, %238 ]
  %240 = phi i8* [ %232, %235 ], [ %266, %238 ]
  %241 = phi i8* [ %233, %235 ], [ %267, %238 ]
  %242 = phi i8* [ %234, %235 ], [ %268, %238 ]
  %243 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %239, i64 %237
  %244 = bitcast <2 x i64>* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 16
  %246 = bitcast i8* %242 to <16 x i8>*
  %247 = load <16 x i8>, <16 x i8>* %246, align 1
  %248 = bitcast i8* %240 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1
  %250 = bitcast i8* %241 to <16 x i8>*
  %251 = load <16 x i8>, <16 x i8>* %250, align 1
  %252 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %251, <16 x i8> %249) #4
  %253 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %249, <16 x i8> %251) #4
  %254 = icmp eq <16 x i8> %252, zeroinitializer
  %255 = sext <16 x i1> %254 to <16 x i8>
  %256 = or <16 x i8> %253, %252
  %257 = icmp ult <16 x i8> %256, %216
  %258 = select <16 x i1> %257, <16 x i8> %256, <16 x i8> %216
  %259 = and <16 x i8> %258, %255
  %260 = xor <16 x i8> %255, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %261 = and <16 x i8> %258, %260
  %262 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %247, <16 x i8> %261) #4
  %263 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %262, <16 x i8> %259) #4
  store <16 x i8> %263, <16 x i8>* %246, align 1
  %264 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %245, <16 x i8> %261) #4
  %265 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %264, <16 x i8> %259) #4
  store <16 x i8> %265, <16 x i8>* %244, align 16
  %266 = getelementptr inbounds i8, i8* %240, i64 16
  %267 = getelementptr inbounds i8, i8* %241, i64 16
  %268 = getelementptr inbounds i8, i8* %242, i64 16
  %269 = add nuw nsw i64 %239, 1
  %270 = icmp eq i64 %269, %49
  br i1 %270, label %271, label %238

271:                                              ; preds = %238, %229
  %272 = phi i8* [ %234, %229 ], [ %268, %238 ]
  %273 = phi i8* [ %233, %229 ], [ %267, %238 ]
  %274 = phi i8* [ %232, %229 ], [ %266, %238 ]
  %275 = and i32 %231, 15
  %276 = icmp eq i32 %275, 15
  %277 = icmp eq i32 %231, 7
  %278 = and i1 %53, %277
  %279 = or i1 %276, %278
  %280 = xor i1 %279, true
  %281 = or i1 %30, %280
  br i1 %281, label %311, label %282

282:                                              ; preds = %271
  %283 = lshr i32 %231, 4
  %284 = zext i32 %283 to i64
  br label %285

285:                                              ; preds = %285, %282
  %286 = phi i64 [ 0, %282 ], [ %309, %285 ]
  %287 = phi i32 [ %230, %282 ], [ %308, %285 ]
  %288 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %286, i64 %284
  %289 = bitcast <2 x i64>* %288 to <16 x i8>*
  %290 = load <16 x i8>, <16 x i8>* %289, align 16
  %291 = shufflevector <16 x i8> %290, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %292 = bitcast <16 x i8> %291 to <8 x i16>
  %293 = ashr <8 x i16> %292, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %294 = shufflevector <16 x i8> %290, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %295 = bitcast <16 x i8> %294 to <8 x i16>
  %296 = ashr <8 x i16> %295, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %297 = add nsw <8 x i16> %296, %293
  %298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %297, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %299 = bitcast <4 x i32> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %301 = bitcast <16 x i8> %300 to <4 x i32>
  %302 = add <4 x i32> %298, %301
  %303 = bitcast <4 x i32> %302 to <16 x i8>
  %304 = shufflevector <16 x i8> %303, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %305 = bitcast <16 x i8> %304 to <4 x i32>
  %306 = add <4 x i32> %302, %305
  %307 = extractelement <4 x i32> %306, i32 0
  %308 = add nsw i32 %307, %287
  %309 = add nuw nsw i64 %286, 1
  %310 = icmp eq i64 %309, %49
  br i1 %310, label %311, label %285

311:                                              ; preds = %285, %271
  %312 = phi i32 [ %230, %271 ], [ %308, %285 ]
  %313 = getelementptr inbounds i8, i8* %274, i64 %55
  %314 = getelementptr inbounds i8, i8* %313, i64 %56
  %315 = getelementptr inbounds i8, i8* %273, i64 %55
  %316 = getelementptr inbounds i8, i8* %315, i64 %57
  %317 = getelementptr inbounds i8, i8* %272, i64 %55
  %318 = getelementptr inbounds i8, i8* %317, i64 %58
  %319 = add nuw nsw i32 %231, 1
  %320 = icmp ult i32 %319, %52
  br i1 %320, label %229, label %321

321:                                              ; preds = %311
  %322 = icmp slt i32 %312, 0
  %323 = sub nsw i32 0, %312
  %324 = select i1 %322, i32 %323, i32 %312
  %325 = icmp sgt i32 %324, %203
  br i1 %325, label %514, label %326

326:                                              ; preds = %321, %197
  br label %514

327:                                              ; preds = %327, %86
  %328 = phi i64 [ 0, %86 ], [ %337, %327 ]
  %329 = phi i64 [ %87, %86 ], [ %338, %327 ]
  %330 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %328, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %330, align 16
  %331 = or i64 %328, 1
  %332 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %331, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %332, align 16
  %333 = or i64 %328, 2
  %334 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %333, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %334, align 16
  %335 = or i64 %328, 3
  %336 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %335, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %336, align 16
  %337 = add nuw nsw i64 %328, 4
  %338 = add i64 %329, -4
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %327

340:                                              ; preds = %327, %82
  %341 = phi i64 [ 0, %82 ], [ %337, %327 ]
  %342 = icmp eq i64 %84, 0
  br i1 %342, label %350, label %343

343:                                              ; preds = %340, %343
  %344 = phi i64 [ %347, %343 ], [ %341, %340 ]
  %345 = phi i64 [ %348, %343 ], [ %84, %340 ]
  %346 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %344, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %346, align 16
  %347 = add nuw nsw i64 %344, 1
  %348 = add i64 %345, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %343, !llvm.loop !5

350:                                              ; preds = %343, %340
  %351 = add nsw i64 %32, -1
  %352 = and i64 %32, 3
  %353 = icmp ult i64 %351, 3
  br i1 %353, label %369, label %354

354:                                              ; preds = %350
  %355 = sub nsw i64 %32, %352
  br label %356

356:                                              ; preds = %356, %354
  %357 = phi i64 [ 0, %354 ], [ %366, %356 ]
  %358 = phi i64 [ %355, %354 ], [ %367, %356 ]
  %359 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %357, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %359, align 16
  %360 = or i64 %357, 1
  %361 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %360, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %361, align 16
  %362 = or i64 %357, 2
  %363 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %362, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %363, align 16
  %364 = or i64 %357, 3
  %365 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %364, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %365, align 16
  %366 = add nuw nsw i64 %357, 4
  %367 = add i64 %358, -4
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %356

369:                                              ; preds = %356, %350
  %370 = phi i64 [ 0, %350 ], [ %366, %356 ]
  %371 = icmp eq i64 %352, 0
  br i1 %371, label %379, label %372

372:                                              ; preds = %369, %372
  %373 = phi i64 [ %376, %372 ], [ %370, %369 ]
  %374 = phi i64 [ %377, %372 ], [ %352, %369 ]
  %375 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %373, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %375, align 16
  %376 = add nuw nsw i64 %373, 1
  %377 = add i64 %374, -1
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %372, !llvm.loop !6

379:                                              ; preds = %372, %369
  %380 = add nsw i64 %32, -1
  %381 = and i64 %32, 3
  %382 = icmp ult i64 %380, 3
  br i1 %382, label %398, label %383

383:                                              ; preds = %379
  %384 = sub nsw i64 %32, %381
  br label %385

385:                                              ; preds = %385, %383
  %386 = phi i64 [ 0, %383 ], [ %395, %385 ]
  %387 = phi i64 [ %384, %383 ], [ %396, %385 ]
  %388 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %386, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %388, align 16
  %389 = or i64 %386, 1
  %390 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %389, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %390, align 16
  %391 = or i64 %386, 2
  %392 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %391, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %392, align 16
  %393 = or i64 %386, 3
  %394 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %393, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %394, align 16
  %395 = add nuw nsw i64 %386, 4
  %396 = add i64 %387, -4
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %385

398:                                              ; preds = %385, %379
  %399 = phi i64 [ 0, %379 ], [ %395, %385 ]
  %400 = icmp eq i64 %381, 0
  br i1 %400, label %408, label %401

401:                                              ; preds = %398, %401
  %402 = phi i64 [ %405, %401 ], [ %399, %398 ]
  %403 = phi i64 [ %406, %401 ], [ %381, %398 ]
  %404 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %402, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %404, align 16
  %405 = add nuw nsw i64 %402, 1
  %406 = add i64 %403, -1
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %408, label %401, !llvm.loop !7

408:                                              ; preds = %401, %398
  %409 = add nsw i64 %32, -1
  %410 = and i64 %32, 3
  %411 = icmp ult i64 %409, 3
  br i1 %411, label %427, label %412

412:                                              ; preds = %408
  %413 = sub nsw i64 %32, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %424, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %425, %414 ]
  %417 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %415, i64 4
  store <2 x i64> zeroinitializer, <2 x i64>* %417, align 16
  %418 = or i64 %415, 1
  %419 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %418, i64 4
  store <2 x i64> zeroinitializer, <2 x i64>* %419, align 16
  %420 = or i64 %415, 2
  %421 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %420, i64 4
  store <2 x i64> zeroinitializer, <2 x i64>* %421, align 16
  %422 = or i64 %415, 3
  %423 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %422, i64 4
  store <2 x i64> zeroinitializer, <2 x i64>* %423, align 16
  %424 = add nuw nsw i64 %415, 4
  %425 = add i64 %416, -4
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %427, label %414

427:                                              ; preds = %414, %408
  %428 = phi i64 [ 0, %408 ], [ %424, %414 ]
  %429 = icmp eq i64 %410, 0
  br i1 %429, label %437, label %430

430:                                              ; preds = %427, %430
  %431 = phi i64 [ %434, %430 ], [ %428, %427 ]
  %432 = phi i64 [ %435, %430 ], [ %410, %427 ]
  %433 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %431, i64 4
  store <2 x i64> zeroinitializer, <2 x i64>* %433, align 16
  %434 = add nuw nsw i64 %431, 1
  %435 = add i64 %432, -1
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %437, label %430, !llvm.loop !8

437:                                              ; preds = %430, %427
  %438 = add nsw i64 %32, -1
  %439 = and i64 %32, 3
  %440 = icmp ult i64 %438, 3
  br i1 %440, label %456, label %441

441:                                              ; preds = %437
  %442 = sub nsw i64 %32, %439
  br label %443

443:                                              ; preds = %443, %441
  %444 = phi i64 [ 0, %441 ], [ %453, %443 ]
  %445 = phi i64 [ %442, %441 ], [ %454, %443 ]
  %446 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %444, i64 5
  store <2 x i64> zeroinitializer, <2 x i64>* %446, align 16
  %447 = or i64 %444, 1
  %448 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %447, i64 5
  store <2 x i64> zeroinitializer, <2 x i64>* %448, align 16
  %449 = or i64 %444, 2
  %450 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %449, i64 5
  store <2 x i64> zeroinitializer, <2 x i64>* %450, align 16
  %451 = or i64 %444, 3
  %452 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %451, i64 5
  store <2 x i64> zeroinitializer, <2 x i64>* %452, align 16
  %453 = add nuw nsw i64 %444, 4
  %454 = add i64 %445, -4
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %443

456:                                              ; preds = %443, %437
  %457 = phi i64 [ 0, %437 ], [ %453, %443 ]
  %458 = icmp eq i64 %439, 0
  br i1 %458, label %466, label %459

459:                                              ; preds = %456, %459
  %460 = phi i64 [ %463, %459 ], [ %457, %456 ]
  %461 = phi i64 [ %464, %459 ], [ %439, %456 ]
  %462 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %460, i64 5
  store <2 x i64> zeroinitializer, <2 x i64>* %462, align 16
  %463 = add nuw nsw i64 %460, 1
  %464 = add i64 %461, -1
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %459, !llvm.loop !9

466:                                              ; preds = %459, %456
  %467 = add nsw i64 %32, -1
  %468 = and i64 %32, 3
  %469 = icmp ult i64 %467, 3
  br i1 %469, label %485, label %470

470:                                              ; preds = %466
  %471 = sub nsw i64 %32, %468
  br label %472

472:                                              ; preds = %472, %470
  %473 = phi i64 [ 0, %470 ], [ %482, %472 ]
  %474 = phi i64 [ %471, %470 ], [ %483, %472 ]
  %475 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %473, i64 6
  store <2 x i64> zeroinitializer, <2 x i64>* %475, align 16
  %476 = or i64 %473, 1
  %477 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %476, i64 6
  store <2 x i64> zeroinitializer, <2 x i64>* %477, align 16
  %478 = or i64 %473, 2
  %479 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %478, i64 6
  store <2 x i64> zeroinitializer, <2 x i64>* %479, align 16
  %480 = or i64 %473, 3
  %481 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %480, i64 6
  store <2 x i64> zeroinitializer, <2 x i64>* %481, align 16
  %482 = add nuw nsw i64 %473, 4
  %483 = add i64 %474, -4
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %485, label %472

485:                                              ; preds = %472, %466
  %486 = phi i64 [ 0, %466 ], [ %482, %472 ]
  %487 = icmp eq i64 %468, 0
  br i1 %487, label %495, label %488

488:                                              ; preds = %485, %488
  %489 = phi i64 [ %492, %488 ], [ %486, %485 ]
  %490 = phi i64 [ %493, %488 ], [ %468, %485 ]
  %491 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %489, i64 6
  store <2 x i64> zeroinitializer, <2 x i64>* %491, align 16
  %492 = add nuw nsw i64 %489, 1
  %493 = add i64 %490, -1
  %494 = icmp eq i64 %493, 0
  br i1 %494, label %495, label %488, !llvm.loop !10

495:                                              ; preds = %488, %485
  %496 = add nsw i64 %32, -1
  %497 = and i64 %32, 3
  %498 = icmp ult i64 %496, 3
  br i1 %498, label %38, label %499

499:                                              ; preds = %495
  %500 = sub nsw i64 %32, %497
  br label %501

501:                                              ; preds = %501, %499
  %502 = phi i64 [ 0, %499 ], [ %511, %501 ]
  %503 = phi i64 [ %500, %499 ], [ %512, %501 ]
  %504 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %502, i64 7
  store <2 x i64> zeroinitializer, <2 x i64>* %504, align 16
  %505 = or i64 %502, 1
  %506 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %505, i64 7
  store <2 x i64> zeroinitializer, <2 x i64>* %506, align 16
  %507 = or i64 %502, 2
  %508 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %507, i64 7
  store <2 x i64> zeroinitializer, <2 x i64>* %508, align 16
  %509 = or i64 %502, 3
  %510 = getelementptr inbounds [8 x [8 x <2 x i64>]], [8 x [8 x <2 x i64>]]* %13, i64 0, i64 %509, i64 7
  store <2 x i64> zeroinitializer, <2 x i64>* %510, align 16
  %511 = add nuw nsw i64 %502, 4
  %512 = add i64 %503, -4
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %38, label %501

514:                                              ; preds = %208, %321, %326
  %515 = phi i32 [ 1, %326 ], [ 0, %321 ], [ 0, %208 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %18) #4
  br label %740

516:                                              ; preds = %9, %9
  %517 = icmp ne i32 %6, 0
  %518 = icmp slt i32 %8, 25
  %519 = and i1 %517, %518
  %520 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %520) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %520, i8 -86, i64 128, i1 false) #4
  %521 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %521) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %521, i8 -86, i64 128, i1 false) #4
  %522 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %522) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %522, i8 -86, i64 128, i1 false) #4
  %523 = select i1 %519, i8 5, i8 4
  %524 = insertelement <16 x i8> undef, i8 %523, i32 0
  %525 = shufflevector <16 x i8> %524, <16 x i8> undef, <16 x i32> zeroinitializer
  %526 = select i1 %519, i8 8, i8 7
  %527 = select i1 %518, i8 %526, i8 6
  %528 = insertelement <16 x i8> undef, i8 %527, i32 0
  %529 = shufflevector <16 x i8> %528, <16 x i8> undef, <16 x i32> zeroinitializer
  %530 = zext i8 %7 to i64
  %531 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %530
  %532 = load i8, i8* %531, align 1
  %533 = lshr i8 %532, 1
  %534 = icmp eq i8 %533, 0
  br i1 %534, label %624, label %535

535:                                              ; preds = %516
  %536 = sext i32 %1 to i64
  %537 = sext i32 %3 to i64
  %538 = sext i32 %5 to i64
  %539 = shl i32 %1, 1
  %540 = sext i32 %539 to i64
  %541 = shl i32 %3, 1
  %542 = sext i32 %541 to i64
  %543 = shl i32 %5, 1
  %544 = sext i32 %543 to i64
  %545 = zext i8 %533 to i64
  br label %546

546:                                              ; preds = %546, %535
  %547 = phi i64 [ 0, %535 ], [ %622, %546 ]
  %548 = phi <16 x i8> [ zeroinitializer, %535 ], [ %615, %546 ]
  %549 = phi i8* [ %0, %535 ], [ %619, %546 ]
  %550 = phi i8* [ %2, %535 ], [ %620, %546 ]
  %551 = phi i8* [ %4, %535 ], [ %621, %546 ]
  %552 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %547, i64 0
  %553 = bitcast i8* %549 to i64*
  %554 = bitcast i8* %552 to i64*
  %555 = load i64, i64* %553, align 1
  store i64 %555, i64* %554, align 16
  %556 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %547, i64 8
  %557 = getelementptr inbounds i8, i8* %549, i64 %536
  %558 = bitcast i8* %557 to i64*
  %559 = bitcast i8* %556 to i64*
  %560 = load i64, i64* %558, align 1
  store i64 %560, i64* %559, align 8
  %561 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %547, i64 0
  %562 = bitcast i8* %550 to i64*
  %563 = bitcast i8* %561 to i64*
  %564 = load i64, i64* %562, align 1
  store i64 %564, i64* %563, align 16
  %565 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %547, i64 8
  %566 = getelementptr inbounds i8, i8* %550, i64 %537
  %567 = bitcast i8* %566 to i64*
  %568 = bitcast i8* %565 to i64*
  %569 = load i64, i64* %567, align 1
  store i64 %569, i64* %568, align 8
  %570 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %547, i64 0
  %571 = bitcast i8* %551 to i64*
  %572 = bitcast i8* %570 to i64*
  %573 = load i64, i64* %571, align 1
  store i64 %573, i64* %572, align 16
  %574 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %547, i64 8
  %575 = getelementptr inbounds i8, i8* %551, i64 %538
  %576 = bitcast i8* %575 to i64*
  %577 = bitcast i8* %574 to i64*
  %578 = load i64, i64* %576, align 1
  store i64 %578, i64* %577, align 8
  %579 = bitcast i8* %552 to <16 x i8>*
  %580 = load <16 x i8>, <16 x i8>* %579, align 16
  %581 = bitcast i8* %561 to <16 x i8>*
  %582 = load <16 x i8>, <16 x i8>* %581, align 16
  %583 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %582, <16 x i8> %580) #4
  %584 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %580, <16 x i8> %582) #4
  %585 = icmp eq <16 x i8> %583, zeroinitializer
  %586 = sext <16 x i1> %585 to <16 x i8>
  %587 = bitcast <16 x i8> %586 to <2 x i64>
  %588 = or <16 x i8> %584, %583
  %589 = icmp ult <16 x i8> %588, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %590 = select <16 x i1> %589, <16 x i8> %588, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %591 = icmp slt <16 x i8> %590, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %592 = icmp slt <16 x i8> %590, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %593 = icmp sgt <16 x i8> %525, %590
  %594 = sext <16 x i1> %593 to <16 x i8>
  %595 = bitcast <16 x i8> %594 to <2 x i64>
  %596 = and <16 x i8> %590, %594
  %597 = bitcast <16 x i8> %596 to <2 x i64>
  %598 = select <16 x i1> %591, <16 x i8> <i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2>, <16 x i8> zeroinitializer
  %599 = zext <16 x i1> %592 to <16 x i8>
  %600 = sub <16 x i8> %529, %599
  %601 = add <16 x i8> %600, %598
  %602 = bitcast <16 x i8> %601 to <2 x i64>
  %603 = xor <2 x i64> %595, <i64 -1, i64 -1>
  %604 = and <2 x i64> %602, %603
  %605 = or <2 x i64> %604, %597
  %606 = xor <2 x i64> %587, <i64 -1, i64 -1>
  %607 = and <2 x i64> %605, %606
  %608 = and <2 x i64> %605, %587
  %609 = bitcast <2 x i64> %607 to <16 x i8>
  %610 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %580, <16 x i8> %609) #4
  %611 = bitcast <2 x i64> %608 to <16 x i8>
  %612 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %610, <16 x i8> %611) #4
  %613 = bitcast i8* %570 to <16 x i8>*
  store <16 x i8> %612, <16 x i8>* %613, align 16
  %614 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %548, <16 x i8> %609) #4
  %615 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %614, <16 x i8> %611) #4
  %616 = bitcast <16 x i8> %612 to <2 x i64>
  %617 = extractelement <2 x i64> %616, i32 0
  store i64 %617, i64* %571, align 1
  %618 = load i64, i64* %577, align 8
  store i64 %618, i64* %576, align 1
  %619 = getelementptr inbounds i8, i8* %549, i64 %540
  %620 = getelementptr inbounds i8, i8* %550, i64 %542
  %621 = getelementptr inbounds i8, i8* %551, i64 %544
  %622 = add nuw nsw i64 %547, 1
  %623 = icmp eq i64 %622, %545
  br i1 %623, label %624, label %546

624:                                              ; preds = %546, %516
  %625 = phi i8* [ %4, %516 ], [ %621, %546 ]
  %626 = phi <16 x i8> [ zeroinitializer, %516 ], [ %615, %546 ]
  %627 = shufflevector <16 x i8> %626, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %628 = bitcast <16 x i8> %627 to <8 x i16>
  %629 = ashr <8 x i16> %628, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %630 = shufflevector <16 x i8> %626, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %631 = bitcast <16 x i8> %630 to <8 x i16>
  %632 = ashr <8 x i16> %631, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %633 = add nsw <8 x i16> %632, %629
  %634 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %633, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %635 = bitcast <4 x i32> %634 to <16 x i8>
  %636 = shufflevector <16 x i8> %635, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %637 = bitcast <16 x i8> %636 to <4 x i32>
  %638 = add <4 x i32> %634, %637
  %639 = bitcast <4 x i32> %638 to <16 x i8>
  %640 = shufflevector <16 x i8> %639, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %641 = bitcast <16 x i8> %640 to <4 x i32>
  %642 = add <4 x i32> %638, %641
  %643 = extractelement <4 x i32> %642, i32 0
  %644 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %530
  %645 = load i8, i8* %644, align 1
  %646 = zext i8 %645 to i32
  %647 = icmp eq i32 %6, 0
  %648 = select i1 %647, i32 2, i32 3
  %649 = shl i32 %648, %646
  %650 = icmp slt i32 %643, 0
  %651 = sub nsw i32 0, %643
  %652 = select i1 %650, i32 %651, i32 %643
  %653 = icmp sgt i32 %652, %649
  br i1 %653, label %654, label %737

654:                                              ; preds = %624
  %655 = sub nsw i32 %652, %649
  %656 = ashr i32 %655, %646
  %657 = add nsw i32 %656, 1
  %658 = icmp slt i32 %657, 4
  br i1 %658, label %659, label %738

659:                                              ; preds = %654
  %660 = trunc i32 %657 to i8
  %661 = insertelement <16 x i8> undef, i8 %660, i32 0
  %662 = shufflevector <16 x i8> %661, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %534, label %731, label %663

663:                                              ; preds = %659
  %664 = and i8 %532, -2
  %665 = zext i8 %664 to i32
  %666 = mul nsw i32 %665, %5
  %667 = sext i32 %666 to i64
  %668 = sub nsw i64 0, %667
  %669 = getelementptr inbounds i8, i8* %625, i64 %668
  %670 = sext i32 %5 to i64
  %671 = shl i32 %5, 1
  %672 = sext i32 %671 to i64
  %673 = zext i8 %533 to i64
  br label %674

674:                                              ; preds = %674, %663
  %675 = phi i64 [ 0, %663 ], [ %710, %674 ]
  %676 = phi <16 x i8> [ %626, %663 ], [ %700, %674 ]
  %677 = phi i8* [ %669, %663 ], [ %709, %674 ]
  %678 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %675, i64 0
  %679 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %675, i64 0
  %680 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %675, i64 0
  %681 = bitcast i8* %680 to <16 x i8>*
  %682 = load <16 x i8>, <16 x i8>* %681, align 16
  %683 = bitcast i8* %678 to <16 x i8>*
  %684 = load <16 x i8>, <16 x i8>* %683, align 16
  %685 = bitcast i8* %679 to <16 x i8>*
  %686 = load <16 x i8>, <16 x i8>* %685, align 16
  %687 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %686, <16 x i8> %684) #4
  %688 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %684, <16 x i8> %686) #4
  %689 = icmp eq <16 x i8> %687, zeroinitializer
  %690 = sext <16 x i1> %689 to <16 x i8>
  %691 = or <16 x i8> %688, %687
  %692 = icmp ult <16 x i8> %691, %662
  %693 = select <16 x i1> %692, <16 x i8> %691, <16 x i8> %662
  %694 = and <16 x i8> %693, %690
  %695 = xor <16 x i8> %690, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %696 = and <16 x i8> %693, %695
  %697 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %682, <16 x i8> %696) #4
  %698 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %697, <16 x i8> %694) #4
  store <16 x i8> %698, <16 x i8>* %681, align 16
  %699 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %676, <16 x i8> %696) #4
  %700 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %699, <16 x i8> %694) #4
  %701 = bitcast i8* %677 to i64*
  %702 = bitcast <16 x i8> %698 to <2 x i64>
  %703 = extractelement <2 x i64> %702, i32 0
  store i64 %703, i64* %701, align 1
  %704 = getelementptr inbounds i8, i8* %677, i64 %670
  %705 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %675, i64 8
  %706 = bitcast i8* %705 to i64*
  %707 = bitcast i8* %704 to i64*
  %708 = load i64, i64* %706, align 8
  store i64 %708, i64* %707, align 1
  %709 = getelementptr inbounds i8, i8* %677, i64 %672
  %710 = add nuw nsw i64 %675, 1
  %711 = icmp eq i64 %710, %673
  br i1 %711, label %712, label %674

712:                                              ; preds = %674
  %713 = shufflevector <16 x i8> %700, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %714 = bitcast <16 x i8> %713 to <8 x i16>
  %715 = ashr <8 x i16> %714, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %716 = shufflevector <16 x i8> %700, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %717 = bitcast <16 x i8> %716 to <8 x i16>
  %718 = ashr <8 x i16> %717, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %719 = add nsw <8 x i16> %718, %715
  %720 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %719, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %721 = bitcast <4 x i32> %720 to <16 x i8>
  %722 = shufflevector <16 x i8> %721, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %723 = bitcast <16 x i8> %722 to <4 x i32>
  %724 = add <4 x i32> %720, %723
  %725 = bitcast <4 x i32> %724 to <16 x i8>
  %726 = shufflevector <16 x i8> %725, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %727 = bitcast <16 x i8> %726 to <4 x i32>
  %728 = add <4 x i32> %724, %727
  %729 = extractelement <4 x i32> %728, i32 0
  %730 = sub nsw i32 0, %729
  br label %731

731:                                              ; preds = %712, %659
  %732 = phi i32 [ %730, %712 ], [ %651, %659 ]
  %733 = phi i32 [ %729, %712 ], [ %643, %659 ]
  %734 = icmp slt i32 %733, 0
  %735 = select i1 %734, i32 %732, i32 %733
  %736 = icmp sgt i32 %735, %649
  br i1 %736, label %738, label %737

737:                                              ; preds = %731, %624
  br label %738

738:                                              ; preds = %654, %731, %737
  %739 = phi i32 [ 1, %737 ], [ 0, %731 ], [ 0, %654 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %522) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %521) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %520) #4
  br label %740

740:                                              ; preds = %9, %738, %514
  %741 = phi i32 [ %515, %514 ], [ %739, %738 ], [ 0, %9 ]
  ret i32 %741
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
