; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/SamplerGL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/SamplerGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::SamplerGL" = type { %"class.rx::SamplerImpl", %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*, %"class.gl::SamplerState", i32 }
%"class.rx::SamplerImpl" = type { i32 (...)**, %"class.gl::SamplerState"* }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.23, i8, [3 x i8] }>
%union.anon.23 = type { %"struct.angle::Color" }
%"struct.angle::Color" = type { float, float, float, float }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"struct.gl::Version" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::basic_string"* }
%"class.rx::StateManagerGL" = type { %"class.rx::FunctionsGL"*, %"struct.angle::FeaturesGL"*, i32, i32, %"class.std::__1::vector.40", i32, %"struct.rx::VertexArrayStateGL", %"struct.rx::VertexArrayStateGL"*, %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.52", i64, %"class.angle::PackedEnumMap.61", %"struct.std::__1::array.63", %"class.std::__1::vector.64", i32, %"class.rx::TransformFeedbackGL"*, %"class.angle::PackedEnumMap.71", %"class.angle::PackedEnumMap.71", %"struct.gl::ContextID", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.73", i32, i8, %"struct.gl::Rectangle", %"struct.gl::Rectangle", float, float, %"struct.angle::Color", %"class.gl::BlendStateExt", i8, i8, i8, float, i8, i8, %"struct.std::__1::array.80", i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, i8, float, float, i8, float, i8, i32, %"struct.angle::Color", float, i32, i8, i8, i8, i8, i8, i8, i8, i32, i8, i32, %"class.angle::BitSetT.81", i64, %"class.angle::BitSetT.82", %"class.angle::BitSetT.83" }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.31" }
%"class.std::__1::__tree.31" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.43" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.42, i32 }
%union.anon.42 = type { [4 x float] }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"struct.rx::VertexArrayStateGL" = type { i32, %"class.angle::FixedVector", %"class.angle::FixedVector.49" }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.48", i64 }
%"struct.std::__1::array.48" = type { [16 x %"struct.rx::VertexAttributeGL"] }
%"struct.rx::VertexAttributeGL" = type { i8, %"struct.angle::Format"*, i8*, i32, i32 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.angle::FixedVector.49" = type { %"struct.std::__1::array.50", i64 }
%"struct.std::__1::array.50" = type { [16 x %"struct.rx::VertexBindingGL"] }
%"struct.rx::VertexBindingGL" = type <{ i32, i32, i64, i32, [4 x i8] }>
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.51" }
%"struct.std::__1::array.51" = type { [13 x i32] }
%"class.angle::PackedEnumMap.52" = type { %"struct.std::__1::array.53" }
%"struct.std::__1::array.53" = type { [13 x %"class.std::__1::vector.54"] }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"class.std::__1::__compressed_pair.56" }
%"struct.rx::StateManagerGL::IndexedBufferBinding" = type <{ i64, i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"* }
%"class.angle::PackedEnumMap.61" = type { %"struct.std::__1::array.62" }
%"struct.std::__1::array.62" = type { [11 x %"struct.std::__1::array.63"] }
%"struct.std::__1::array.63" = type { [96 x i32] }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"class.std::__1::__compressed_pair.66" }
%"struct.rx::StateManagerGL::ImageUnitBinding" = type { i32, i32, i8, i32, i32, i32 }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"* }
%"class.rx::TransformFeedbackGL" = type opaque
%"class.angle::PackedEnumMap.71" = type { %"struct.std::__1::array.72" }
%"struct.std::__1::array.72" = type { [7 x %"class.rx::QueryGL"*] }
%"class.rx::QueryGL" = type opaque
%"struct.gl::ContextID" = type { i32 }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { i32*, i32*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { i32* }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT", %"class.angle::BitSetT", i64 }
%"class.angle::BitSetT" = type { i8 }
%"struct.std::__1::array.80" = type { [2 x i32] }
%"class.angle::BitSetT.81" = type { i32 }
%"class.angle::BitSetT.82" = type { i64 }
%"class.angle::BitSetT.83" = type { i64 }
%"class.gl::Context" = type opaque

$_ZN2rx11SamplerImpl9onDestroyEPKN2gl7ContextE = comdat any

@_ZTVN2rx9SamplerGLE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::SamplerGL"*)* @_ZN2rx9SamplerGLD2Ev to i8*), i8* bitcast (void (%"class.rx::SamplerGL"*)* @_ZN2rx9SamplerGLD0Ev to i8*), i8* bitcast (void (%"class.rx::SamplerImpl"*, %"class.gl::Context"*)* @_ZN2rx11SamplerImpl9onDestroyEPKN2gl7ContextE to i8*), i8* bitcast (i32 (%"class.rx::SamplerGL"*, %"class.gl::Context"*, i1)* @_ZN2rx9SamplerGL9syncStateEPKN2gl7ContextEb to i8*)] }, align 8

@_ZN2rx9SamplerGLC1ERKN2gl12SamplerStateEPKNS_11FunctionsGLEPNS_14StateManagerGLE = hidden unnamed_addr alias void (%"class.rx::SamplerGL"*, %"class.gl::SamplerState"*, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*), void (%"class.rx::SamplerGL"*, %"class.gl::SamplerState"*, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*)* @_ZN2rx9SamplerGLC2ERKN2gl12SamplerStateEPKNS_11FunctionsGLEPNS_14StateManagerGLE
@_ZN2rx9SamplerGLD1Ev = hidden unnamed_addr alias void (%"class.rx::SamplerGL"*), void (%"class.rx::SamplerGL"*)* @_ZN2rx9SamplerGLD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9SamplerGLC2ERKN2gl12SamplerStateEPKNS_11FunctionsGLEPNS_14StateManagerGLE(%"class.rx::SamplerGL"*, %"class.gl::SamplerState"* dereferenceable(68), %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 0, i32 1
  store %"class.gl::SamplerState"* %1, %"class.gl::SamplerState"** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx9SamplerGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 1
  store %"class.rx::FunctionsGL"* %2, %"class.rx::FunctionsGL"** %7, align 8
  %8 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 2
  store %"class.rx::StateManagerGL"* %3, %"class.rx::StateManagerGL"** %8, align 8
  %9 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3
  tail call void @_ZN2gl12SamplerStateC1Ev(%"class.gl::SamplerState"* %9) #4
  %10 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 4
  store i32 0, i32* %10, align 4
  %11 = bitcast %"class.rx::FunctionsGL"** %7 to %"class.rx::DispatchTableGL"**
  %12 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %11, align 8
  %13 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %12, i64 0, i32 327
  %14 = load void (i32, i32*)*, void (i32, i32*)** %13, align 8
  tail call void %14(i32 1, i32* %10) #4
  ret void
}

declare void @_ZN2gl12SamplerStateC1Ev(%"class.gl::SamplerState"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9SamplerGLD2Ev(%"class.rx::SamplerGL"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx9SamplerGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 2
  %4 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %3, align 8
  %5 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  tail call void @_ZN2rx14StateManagerGL13deleteSamplerEj(%"class.rx::StateManagerGL"* %4, i32 %6) #4
  store i32 0, i32* %5, align 4
  ret void
}

declare void @_ZN2rx14StateManagerGL13deleteSamplerEj(%"class.rx::StateManagerGL"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9SamplerGLD0Ev(%"class.rx::SamplerGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx9SamplerGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 2
  %4 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %3, align 8
  %5 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  tail call void @_ZN2rx14StateManagerGL13deleteSamplerEj(%"class.rx::StateManagerGL"* %4, i32 %6) #4
  %7 = bitcast %"class.rx::SamplerGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx9SamplerGL9syncStateEPKN2gl7ContextEb(%"class.rx::SamplerGL"*, %"class.gl::Context"* nocapture readnone, i1 zeroext) unnamed_addr #0 align 2 {
  br i1 %2, label %4, label %292

4:                                                ; preds = %3
  %5 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 4
  %7 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  %9 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %8, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %4
  %16 = load i32, i32* %6, align 4
  %17 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %18 = tail call zeroext i1 @_ZN2gl12SamplerState12setMinFilterEj(%"class.gl::SamplerState"* %9, i32 %13) #4
  %19 = load i32, i32* %12, align 4
  %20 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %17, i64 0, i32 0, i32 339
  %21 = load void (i32, i32, float)*, void (i32, i32, float)** %20, align 8
  %22 = uitofp i32 %19 to float
  tail call void %21(i32 %16, i32 10241, float %22) #4
  %23 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %24

24:                                               ; preds = %4, %15
  %25 = phi %"class.gl::SamplerState"* [ %8, %4 ], [ %23, %15 ]
  %26 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %25, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %40, label %31

31:                                               ; preds = %24
  %32 = load i32, i32* %6, align 4
  %33 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %34 = tail call zeroext i1 @_ZN2gl12SamplerState12setMagFilterEj(%"class.gl::SamplerState"* %9, i32 %29) #4
  %35 = load i32, i32* %28, align 4
  %36 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %33, i64 0, i32 0, i32 339
  %37 = load void (i32, i32, float)*, void (i32, i32, float)** %36, align 8
  %38 = uitofp i32 %35 to float
  tail call void %37(i32 %32, i32 10240, float %38) #4
  %39 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %40

40:                                               ; preds = %24, %31
  %41 = phi %"class.gl::SamplerState"* [ %25, %24 ], [ %39, %31 ]
  %42 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %41, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %56, label %47

47:                                               ; preds = %40
  %48 = load i32, i32* %6, align 4
  %49 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %50 = tail call zeroext i1 @_ZN2gl12SamplerState8setWrapSEj(%"class.gl::SamplerState"* %9, i32 %45) #4
  %51 = load i32, i32* %44, align 4
  %52 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %49, i64 0, i32 0, i32 339
  %53 = load void (i32, i32, float)*, void (i32, i32, float)** %52, align 8
  %54 = uitofp i32 %51 to float
  tail call void %53(i32 %48, i32 10242, float %54) #4
  %55 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %56

56:                                               ; preds = %40, %47
  %57 = phi %"class.gl::SamplerState"* [ %41, %40 ], [ %55, %47 ]
  %58 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %57, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %72, label %63

63:                                               ; preds = %56
  %64 = load i32, i32* %6, align 4
  %65 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %66 = tail call zeroext i1 @_ZN2gl12SamplerState8setWrapTEj(%"class.gl::SamplerState"* %9, i32 %61) #4
  %67 = load i32, i32* %60, align 4
  %68 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %65, i64 0, i32 0, i32 339
  %69 = load void (i32, i32, float)*, void (i32, i32, float)** %68, align 8
  %70 = uitofp i32 %67 to float
  tail call void %69(i32 %64, i32 10243, float %70) #4
  %71 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %72

72:                                               ; preds = %56, %63
  %73 = phi %"class.gl::SamplerState"* [ %57, %56 ], [ %71, %63 ]
  %74 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 4
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %73, i64 0, i32 4
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %88, label %79

79:                                               ; preds = %72
  %80 = load i32, i32* %6, align 4
  %81 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %82 = tail call zeroext i1 @_ZN2gl12SamplerState8setWrapREj(%"class.gl::SamplerState"* %9, i32 %77) #4
  %83 = load i32, i32* %76, align 4
  %84 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %81, i64 0, i32 0, i32 339
  %85 = load void (i32, i32, float)*, void (i32, i32, float)** %84, align 8
  %86 = uitofp i32 %83 to float
  tail call void %85(i32 %80, i32 32882, float %86) #4
  %87 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %88

88:                                               ; preds = %72, %79
  %89 = phi %"class.gl::SamplerState"* [ %73, %72 ], [ %87, %79 ]
  %90 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 5
  %91 = load float, float* %90, align 4
  %92 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %89, i64 0, i32 5
  %93 = load float, float* %92, align 4
  %94 = fcmp une float %91, %93
  br i1 %94, label %95, label %103

95:                                               ; preds = %88
  %96 = load i32, i32* %6, align 4
  %97 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %98 = tail call zeroext i1 @_ZN2gl12SamplerState16setMaxAnisotropyEf(%"class.gl::SamplerState"* %9, float %93) #4
  %99 = load float, float* %92, align 4
  %100 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %97, i64 0, i32 0, i32 339
  %101 = load void (i32, i32, float)*, void (i32, i32, float)** %100, align 8
  tail call void %101(i32 %96, i32 34046, float %99) #4
  %102 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %103

103:                                              ; preds = %88, %95
  %104 = phi %"class.gl::SamplerState"* [ %89, %88 ], [ %102, %95 ]
  %105 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 6
  %106 = load float, float* %105, align 4
  %107 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %104, i64 0, i32 6
  %108 = load float, float* %107, align 4
  %109 = fcmp une float %106, %108
  br i1 %109, label %110, label %118

110:                                              ; preds = %103
  %111 = load i32, i32* %6, align 4
  %112 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %113 = tail call zeroext i1 @_ZN2gl12SamplerState9setMinLodEf(%"class.gl::SamplerState"* %9, float %108) #4
  %114 = load float, float* %107, align 4
  %115 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %112, i64 0, i32 0, i32 339
  %116 = load void (i32, i32, float)*, void (i32, i32, float)** %115, align 8
  tail call void %116(i32 %111, i32 33082, float %114) #4
  %117 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %118

118:                                              ; preds = %103, %110
  %119 = phi %"class.gl::SamplerState"* [ %104, %103 ], [ %117, %110 ]
  %120 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 7
  %121 = load float, float* %120, align 4
  %122 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %119, i64 0, i32 7
  %123 = load float, float* %122, align 4
  %124 = fcmp une float %121, %123
  br i1 %124, label %125, label %133

125:                                              ; preds = %118
  %126 = load i32, i32* %6, align 4
  %127 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %128 = tail call zeroext i1 @_ZN2gl12SamplerState9setMaxLodEf(%"class.gl::SamplerState"* %9, float %123) #4
  %129 = load float, float* %122, align 4
  %130 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %127, i64 0, i32 0, i32 339
  %131 = load void (i32, i32, float)*, void (i32, i32, float)** %130, align 8
  tail call void %131(i32 %126, i32 33083, float %129) #4
  %132 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %133

133:                                              ; preds = %118, %125
  %134 = phi %"class.gl::SamplerState"* [ %119, %118 ], [ %132, %125 ]
  %135 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 8
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %134, i64 0, i32 8
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %136, %138
  br i1 %139, label %149, label %140

140:                                              ; preds = %133
  %141 = load i32, i32* %6, align 4
  %142 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %143 = tail call zeroext i1 @_ZN2gl12SamplerState14setCompareModeEj(%"class.gl::SamplerState"* %9, i32 %138) #4
  %144 = load i32, i32* %137, align 4
  %145 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %142, i64 0, i32 0, i32 339
  %146 = load void (i32, i32, float)*, void (i32, i32, float)** %145, align 8
  %147 = uitofp i32 %144 to float
  tail call void %146(i32 %141, i32 34892, float %147) #4
  %148 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %149

149:                                              ; preds = %133, %140
  %150 = phi %"class.gl::SamplerState"* [ %134, %133 ], [ %148, %140 ]
  %151 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 9
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %150, i64 0, i32 9
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %152, %154
  br i1 %155, label %165, label %156

156:                                              ; preds = %149
  %157 = load i32, i32* %6, align 4
  %158 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %159 = tail call zeroext i1 @_ZN2gl12SamplerState14setCompareFuncEj(%"class.gl::SamplerState"* %9, i32 %154) #4
  %160 = load i32, i32* %153, align 4
  %161 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %158, i64 0, i32 0, i32 339
  %162 = load void (i32, i32, float)*, void (i32, i32, float)** %161, align 8
  %163 = uitofp i32 %160 to float
  tail call void %162(i32 %157, i32 34893, float %163) #4
  %164 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %165

165:                                              ; preds = %149, %156
  %166 = phi %"class.gl::SamplerState"* [ %150, %149 ], [ %164, %156 ]
  %167 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 10
  %168 = load i32, i32* %167, align 4
  %169 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %166, i64 0, i32 10
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %168, %170
  br i1 %171, label %181, label %172

172:                                              ; preds = %165
  %173 = load i32, i32* %6, align 4
  %174 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %175 = tail call zeroext i1 @_ZN2gl12SamplerState13setSRGBDecodeEj(%"class.gl::SamplerState"* %9, i32 %170) #4
  %176 = load i32, i32* %169, align 4
  %177 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %174, i64 0, i32 0, i32 339
  %178 = load void (i32, i32, float)*, void (i32, i32, float)** %177, align 8
  %179 = uitofp i32 %176 to float
  tail call void %178(i32 %173, i32 35400, float %179) #4
  %180 = load %"class.gl::SamplerState"*, %"class.gl::SamplerState"** %7, align 8
  br label %181

181:                                              ; preds = %165, %172
  %182 = phi %"class.gl::SamplerState"* [ %166, %165 ], [ %180, %172 ]
  %183 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %5, align 8
  %184 = load i32, i32* %6, align 4
  %185 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11
  %186 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11
  %187 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 1
  %188 = load i8, i8* %187, align 4
  %189 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 1
  %190 = load i8, i8* %189, align 4
  %191 = icmp eq i8 %188, %190
  br i1 %191, label %192, label %277

192:                                              ; preds = %181
  switch i8 %188, label %193 [
    i8 2, label %247
    i8 1, label %217
  ]

193:                                              ; preds = %192
  %194 = getelementptr inbounds %"struct.angle::ColorGeneric", %"struct.angle::ColorGeneric"* %185, i64 0, i32 0, i32 0, i32 0
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds %"struct.angle::ColorGeneric", %"struct.angle::ColorGeneric"* %186, i64 0, i32 0, i32 0, i32 0
  %197 = load float, float* %196, align 4
  %198 = fcmp oeq float %195, %197
  br i1 %198, label %199, label %277

199:                                              ; preds = %193
  %200 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 1
  %201 = load float, float* %200, align 4
  %202 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 1
  %203 = load float, float* %202, align 4
  %204 = fcmp oeq float %201, %203
  br i1 %204, label %205, label %277

205:                                              ; preds = %199
  %206 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 2
  %207 = load float, float* %206, align 4
  %208 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 2
  %209 = load float, float* %208, align 4
  %210 = fcmp oeq float %207, %209
  br i1 %210, label %211, label %277

211:                                              ; preds = %205
  %212 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 3
  %213 = load float, float* %212, align 4
  %214 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 3
  %215 = load float, float* %214, align 4
  %216 = fcmp oeq float %213, %215
  br i1 %216, label %292, label %277

217:                                              ; preds = %192
  %218 = bitcast %"struct.angle::ColorGeneric"* %185 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = bitcast %"struct.angle::ColorGeneric"* %186 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %219, %221
  br i1 %222, label %223, label %277

223:                                              ; preds = %217
  %224 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 1
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 1
  %228 = bitcast float* %227 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %226, %229
  br i1 %230, label %231, label %277

231:                                              ; preds = %223
  %232 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 2
  %233 = bitcast float* %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 2
  %236 = bitcast float* %235 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %234, %237
  br i1 %238, label %239, label %277

239:                                              ; preds = %231
  %240 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 3
  %241 = bitcast float* %240 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 3
  %244 = bitcast float* %243 to i32*
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %242, %245
  br i1 %246, label %292, label %277

247:                                              ; preds = %192
  %248 = bitcast %"struct.angle::ColorGeneric"* %185 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = bitcast %"struct.angle::ColorGeneric"* %186 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %249, %251
  br i1 %252, label %253, label %277

253:                                              ; preds = %247
  %254 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 1
  %255 = bitcast float* %254 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 1
  %258 = bitcast float* %257 to i32*
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %256, %259
  br i1 %260, label %261, label %277

261:                                              ; preds = %253
  %262 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 2
  %263 = bitcast float* %262 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 2
  %266 = bitcast float* %265 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %264, %267
  br i1 %268, label %269, label %277

269:                                              ; preds = %261
  %270 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 3, i32 11, i32 0, i32 0, i32 3
  %271 = bitcast float* %270 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %"class.gl::SamplerState", %"class.gl::SamplerState"* %182, i64 0, i32 11, i32 0, i32 0, i32 3
  %274 = bitcast float* %273 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = icmp eq i32 %272, %275
  br i1 %276, label %292, label %277

277:                                              ; preds = %269, %261, %253, %247, %239, %231, %223, %217, %211, %205, %199, %193, %181
  %278 = tail call zeroext i1 @_ZN2gl12SamplerState14setBorderColorERKN5angle12ColorGenericE(%"class.gl::SamplerState"* %9, %"struct.angle::ColorGeneric"* dereferenceable(20) %186) #4
  %279 = load i8, i8* %189, align 4
  switch i8 %279, label %292 [
    i8 0, label %280
    i8 1, label %284
    i8 2, label %288
  ]

280:                                              ; preds = %277
  %281 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %183, i64 0, i32 0, i32 340
  %282 = load void (i32, i32, float*)*, void (i32, i32, float*)** %281, align 8
  %283 = getelementptr inbounds %"struct.angle::ColorGeneric", %"struct.angle::ColorGeneric"* %186, i64 0, i32 0, i32 0, i32 0
  tail call void %282(i32 %184, i32 4100, float* %283) #4
  br label %292

284:                                              ; preds = %277
  %285 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %183, i64 0, i32 0, i32 337
  %286 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %285, align 8
  %287 = bitcast %"struct.angle::ColorGeneric"* %186 to i32*
  tail call void %286(i32 %184, i32 4100, i32* %287) #4
  br label %292

288:                                              ; preds = %277
  %289 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %183, i64 0, i32 0, i32 338
  %290 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %289, align 8
  %291 = bitcast %"struct.angle::ColorGeneric"* %186 to i32*
  tail call void %290(i32 %184, i32 4100, i32* %291) #4
  br label %292

292:                                              ; preds = %288, %284, %280, %277, %269, %239, %211, %3
  ret i32 0
}

declare zeroext i1 @_ZN2gl12SamplerState12setMinFilterEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState12setMagFilterEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState8setWrapSEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState8setWrapTEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState8setWrapREj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState16setMaxAnisotropyEf(%"class.gl::SamplerState"*, float) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState9setMinLodEf(%"class.gl::SamplerState"*, float) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState9setMaxLodEf(%"class.gl::SamplerState"*, float) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState14setCompareModeEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState14setCompareFuncEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState13setSRGBDecodeEj(%"class.gl::SamplerState"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12SamplerState14setBorderColorERKN5angle12ColorGenericE(%"class.gl::SamplerState"*, %"struct.angle::ColorGeneric"* dereferenceable(20)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2rx9SamplerGL12getSamplerIDEv(%"class.rx::SamplerGL"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.rx::SamplerGL", %"class.rx::SamplerGL"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx11SamplerImpl9onDestroyEPKN2gl7ContextE(%"class.rx::SamplerImpl"*, %"class.gl::Context"*) unnamed_addr #0 comdat align 2 {
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
