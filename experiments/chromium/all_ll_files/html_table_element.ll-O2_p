; ModuleID = '../../third_party/blink/renderer/core/html/html_table_element.cc'
source_filename = "../../third_party/blink/renderer/core/html/html_table_element.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<blink::Persistent<blink::CSSPropertyValueSet> >::InstanceStorage" }
%"class.WTF::StaticSingleton<blink::Persistent<blink::CSSPropertyValueSet> >::InstanceStorage" = type { [16 x i8] }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.110", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.110" = type { %"class.base::RefCounted.111" }
%"class.base::RefCounted.111" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.114" }
%"class.blink::HeapHashMap.114" = type { %"class.WTF::HashMap.117" }
%"class.WTF::HashMap.117" = type { %"class.WTF::HashTable.118" }
%"class.WTF::HashTable.118" = type <{ %"struct.WTF::KeyValuePair.120"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.120" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.121" }
%"class.blink::MemberBase.121" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.122", i32, [4 x i8], %"class.std::__1::unique_ptr.258", %"class.std::__1::unique_ptr.258", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.268", %"class.std::__1::unique_ptr.274", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.286", %"class.std::__1::unique_ptr.292", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.299", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.201", %"class.std::__1::unique_ptr.208", %"class.std::__1::unique_ptr.215", %"class.std::__1::unique_ptr.238", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__atomic_base.160" }
%"struct.std::__1::__atomic_base.160" = type { %"struct.std::__1::__cxx_atomic_impl.161" }
%"struct.std::__1::__cxx_atomic_impl.161" = type { %"struct.std::__1::__cxx_atomic_base_impl.162" }
%"struct.std::__1::__cxx_atomic_base_impl.162" = type { i64 }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::Worklist.169"* }
%"class.blink::Worklist.169" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.blink::Worklist.176"* }
%"class.blink::Worklist.176" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::Worklist.183"* }
%"class.blink::Worklist.183" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::Worklist.190"* }
%"class.blink::Worklist.190" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.blink::Worklist.197"* }
%"class.blink::Worklist.197" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"class.blink::Worklist.204"* }
%"class.blink::Worklist.204" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.blink::Worklist.211"* }
%"class.blink::Worklist.211" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.158" }
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.218", %"class.std::__1::__compressed_pair.225", %"class.std::__1::__compressed_pair.230", %"class.std::__1::__compressed_pair.232", [4 x i8] }>
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220", %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { i64 }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { float }
%"class.std::__1::unique_ptr.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.241", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.250" }
%"class.WTF::Vector.250" = type { %"class.WTF::VectorBuffer.251" }
%"class.WTF::VectorBuffer.251" = type { %"class.WTF::VectorBufferBase.252" }
%"class.WTF::VectorBufferBase.252" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.266" }
%"class.WTF::VectorBuffer.266" = type { %"class.WTF::VectorBufferBase.267" }
%"class.WTF::VectorBufferBase.267" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.280" }
%"class.std::__1::unique_ptr.280" = type { %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.169"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.176"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.183"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.190"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.197"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.530" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.286" = type { %"class.std::__1::__compressed_pair.287" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.298 }
%class.scoped_refptr.298 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.299" = type { %"struct.std::__1::__atomic_base.300" }
%"struct.std::__1::__atomic_base.300" = type { %"struct.std::__1::__cxx_atomic_impl.301" }
%"struct.std::__1::__cxx_atomic_impl.301" = type { %"struct.std::__1::__cxx_atomic_base_impl.302" }
%"struct.std::__1::__cxx_atomic_base_impl.302" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.75" }
%"struct.std::__1::atomic.75" = type { %"struct.std::__1::__atomic_base.76" }
%"struct.std::__1::__atomic_base.76" = type { %"struct.std::__1::__atomic_base.77" }
%"struct.std::__1::__atomic_base.77" = type { %"struct.std::__1::__cxx_atomic_impl.78" }
%"struct.std::__1::__cxx_atomic_impl.78" = type { %"struct.std::__1::__cxx_atomic_base_impl.79" }
%"struct.std::__1::__cxx_atomic_base_impl.79" = type { i32 }
%"class.blink::HTMLTableElement" = type { %"class.blink::HTMLElement", i8, i8, i8, i32, i16, %"class.blink::Member.14" }
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.8" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.0", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.2" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.21", %"class.blink::Member.23", %"class.blink::Member.0", %"class.blink::Member.25", %"class.blink::Member.25", %"class.blink::Member.44", %"class.blink::Member.46", %"class.blink::Member.48", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.53", %"class.blink::HeapVector.55" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.21" = type { %"class.blink::MemberBase.22" }
%"class.blink::MemberBase.22" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.23" = type { %"class.blink::MemberBase.24" }
%"class.blink::MemberBase.24" = type { %"class.blink::Document"* }
%"class.blink::Member.25" = type { %"class.blink::MemberBase.26" }
%"class.blink::MemberBase.26" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.32" }
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.36", i32, %"class.blink::HeapVector" }
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::Element"* }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.40" }
%"class.WTF::Vector.40" = type { %"class.WTF::VectorBuffer.41" }
%"class.WTF::VectorBuffer.41" = type { %"class.WTF::VectorBufferBase.42" }
%"class.WTF::VectorBufferBase.42" = type { %"class.blink::Member.36"*, i32, i32 }
%"class.blink::Member.44" = type { %"class.blink::MemberBase.45" }
%"class.blink::MemberBase.45" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.50" }
%"class.blink::Member.50" = type { %"class.blink::MemberBase.51" }
%"class.blink::MemberBase.51" = type { %"class.blink::HeapHashMap.52"* }
%"class.blink::HeapHashMap.52" = type opaque
%"class.blink::Member.53" = type { %"class.blink::MemberBase.54" }
%"class.blink::MemberBase.54" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.55" = type { %"class.WTF::Vector.58" }
%"class.WTF::Vector.58" = type { %"class.WTF::VectorBuffer.59" }
%"class.WTF::VectorBuffer.59" = type { %"class.WTF::VectorBufferBase.60" }
%"class.WTF::VectorBufferBase.60" = type { %"class.blink::Member.61"*, i32, i32 }
%"class.blink::Member.61" = type { %"class.blink::MemberBase.62" }
%"class.blink::MemberBase.62" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.12", %"class.blink::Member.14", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.12" = type { %"class.WTF::SingleThreadedBitField.13" }
%"class.WTF::SingleThreadedBitField.13" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.18 }
%class.scoped_refptr.18 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.19", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.71", %"class.WTF::Vector.71", i8, i32, %"class.blink::Member.82", %"class.blink::Member.84", %"class.blink::Member.86", %"class.blink::Member.88", %"class.blink::Member.90", %"class.blink::Member.92", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.95", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.101", %"class.blink::Member.103", %"class.blink::Member.61", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.106", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.36", %"class.blink::Member.315", %"class.blink::Member.36", %"class.blink::Member.36", %"class.blink::Member.36", %"class.blink::UserActionElementSet", %"class.blink::Member.324", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.331", i16, i8, %"class.blink::Member.338", %"class.blink::Member.340", %"class.blink::Member.342", %"class.blink::Member.344", %"class.blink::TextLinkColors", %"class.blink::Member.346", i8, [7 x i8], %"class.blink::HeapHashMap.348", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.36", %"class.WTF::Vector.355", %"class.blink::Member.360", %"class.blink::Member.362", i8, %"class.blink::Member.36", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.364", %"class.blink::HeapVector.366", %"class.std::__1::unique_ptr.374", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.380", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.393", %"class.WTF::Vector.395", i8, i8, %"class.std::__1::unique_ptr.400", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.406", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.414", i8, i32, %"class.blink::Member.416", %"class.blink::Member.418", %"class.blink::Member.420", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.422", %"class.WTF::HashMap.424", %"class.blink::Member.429", %"class.blink::Member.431", %"class.blink::Member.433", %"class.blink::Member.435", %"class.blink::Member.23", %"class.blink::Member.23", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.437", i8, i32, %"class.blink::Member.444", %"class.blink::Member.446", i32, %"class.blink::Member.448", %"class.blink::Member.450", %"class.blink::Member.452", %"class.std::__1::unique_ptr.454", i64, %"class.std::__1::unique_ptr.460", i32, i32, %"class.blink::Member.466", %"class.blink::Member.468", %"class.blink::Member.470", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.472", %"class.WTF::Vector.474", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.479", %"class.blink::Member.486", %"class.std::__1::unique_ptr.488", %"class.blink::Member.494", i8, i8, %"class.WTF::String", %"class.blink::Member.496", i8, [7 x i8], %"class.blink::HeapHashMap.498", %"class.blink::HeapObserverSet", %"class.blink::Member.512", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.514", i32, i8, i8, %"class.blink::WeakMember.516", %"class.blink::Member.517" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.64" }
%"class.blink::HeapHashMap.64" = type { %"class.WTF::HashMap.67" }
%"class.WTF::HashMap.67" = type { %"class.WTF::HashTable.68" }
%"class.WTF::HashTable.68" = type <{ %"struct.WTF::KeyValuePair.70"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.70" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.71" = type { %"class.WTF::VectorBuffer.72" }
%"class.WTF::VectorBuffer.72" = type { %"class.WTF::VectorBufferBase.73" }
%"class.WTF::VectorBufferBase.73" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.74 }
%class.scoped_refptr.74 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.75" }
%"class.blink::Member.82" = type { %"class.blink::MemberBase.83" }
%"class.blink::MemberBase.83" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.84" = type { %"class.blink::MemberBase.85" }
%"class.blink::MemberBase.85" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.535", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.579", i32, i8, [3 x i8], %"class.blink::HeapVector.581", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.589", %"class.blink::Member.591", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.600", %"class.blink::Member.606", %"class.blink::Member.608", i8, [7 x i8] }>
%"class.blink::Supplementable.535" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.536" }
%"class.blink::HeapHashMap.536" = type { %"class.WTF::HashMap.539" }
%"class.WTF::HashMap.539" = type { %"class.WTF::HashTable.540" }
%"class.WTF::HashTable.540" = type <{ %"struct.WTF::KeyValuePair.542"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.542" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.551" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.543" }
%"class.blink::HeapObserverSet.543" = type { i32, [4 x i8], %"class.blink::HeapHashSet.544" }
%"class.blink::HeapHashSet.544" = type { %"class.WTF::HashSet.547" }
%"class.WTF::HashSet.547" = type { %"class.WTF::HashTable.548" }
%"class.WTF::HashTable.548" = type <{ %"class.blink::WeakMember.550"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.550" = type opaque
%"class.blink::Supplementable.551" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.552" }
%"class.blink::HeapHashMap.552" = type { %"class.WTF::HashMap.555" }
%"class.WTF::HashMap.555" = type { %"class.WTF::HashTable.556" }
%"class.WTF::HashTable.556" = type <{ %"struct.WTF::KeyValuePair.558"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.558" = type { i8*, %"class.blink::Member.710" }
%"class.blink::Member.710" = type { %"class.blink::MemberBase.711" }
%"class.blink::MemberBase.711" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.712" }
%"class.blink::Member.712" = type { %"class.blink::MemberBase.713" }
%"class.blink::MemberBase.713" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.559, %"class.std::__1::unique_ptr.563", %"class.std::__1::unique_ptr.563", %"class.std::__1::unique_ptr.569", %"class.std::__1::unique_ptr.569", %"class.blink::Member.84", i32, [4 x i8], %"class.WTF::HashSet.575", i32, i32 }
%class.scoped_refptr.559 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.560", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.562 }
%"class.WTF::RefCounted.560" = type { %"class.base::RefCounted.561" }
%"class.base::RefCounted.561" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.562 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.563" = type { %"class.std::__1::__compressed_pair.564" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.565" }
%"struct.std::__1::__compressed_pair_elem.565" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.569" = type { %"class.std::__1::__compressed_pair.570" }
%"class.std::__1::__compressed_pair.570" = type { %"struct.std::__1::__compressed_pair_elem.571" }
%"struct.std::__1::__compressed_pair_elem.571" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.575" = type { %"class.WTF::HashTable.576" }
%"class.WTF::HashTable.576" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.579" = type { %"class.blink::MemberBase.580" }
%"class.blink::MemberBase.580" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.581" = type { %"class.WTF::Vector.584" }
%"class.WTF::Vector.584" = type { %"class.WTF::VectorBuffer.585" }
%"class.WTF::VectorBuffer.585" = type { %"class.WTF::VectorBufferBase.586" }
%"class.WTF::VectorBufferBase.586" = type { %"class.blink::Member.587"*, i32, i32 }
%"class.blink::Member.587" = type opaque
%"class.blink::Member.589" = type { %"class.blink::MemberBase.590" }
%"class.blink::MemberBase.590" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.591" = type { %"class.blink::MemberBase.592" }
%"class.blink::MemberBase.592" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.593", i32, i32 }
%"class.blink::HeapHashMap.593" = type { %"class.WTF::HashMap.596" }
%"class.WTF::HashMap.596" = type { %"class.WTF::HashTable.597" }
%"class.WTF::HashTable.597" = type <{ %"struct.WTF::KeyValuePair.599"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.599" = type opaque
%"class.std::__1::unique_ptr.600" = type { %"class.std::__1::__compressed_pair.601" }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.602" }
%"struct.std::__1::__compressed_pair_elem.602" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.606" = type { %"class.blink::MemberBase.607" }
%"class.blink::MemberBase.607" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.608" = type { %"class.blink::MemberBase.609" }
%"class.blink::MemberBase.609" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.86" = type { %"class.blink::MemberBase.87" }
%"class.blink::MemberBase.87" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.88" = type { %"class.blink::MemberBase.89" }
%"class.blink::MemberBase.89" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.90" = type { %"class.blink::MemberBase.91" }
%"class.blink::MemberBase.91" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.92" = type { %"class.blink::MemberBase.93" }
%"class.blink::MemberBase.93" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.101" = type { %"class.blink::MemberBase.102" }
%"class.blink::MemberBase.102" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.103" = type { %"class.blink::MemberBase.104" }
%"class.blink::MemberBase.104" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.105 }
%class.scoped_refptr.105 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.106" = type { %"class.WTF::VectorBuffer.107" }
%"class.WTF::VectorBuffer.107" = type { %"class.WTF::VectorBufferBase.108" }
%"class.WTF::VectorBufferBase.108" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.109 }
%class.scoped_refptr.109 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.315" = type { %"class.blink::MemberBase.316" }
%"class.blink::MemberBase.316" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.317" }
%"class.blink::HeapHashMap.317" = type { %"class.WTF::HashMap.320" }
%"class.WTF::HashMap.320" = type { %"class.WTF::HashTable.321" }
%"class.WTF::HashTable.321" = type <{ %"struct.WTF::KeyValuePair.323"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.323" = type opaque
%"class.blink::Member.324" = type { %"class.blink::MemberBase.325" }
%"class.blink::MemberBase.325" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.328" }
%"class.WTF::HashTable.328" = type <{ %"class.blink::WeakMember.330"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.330" = type opaque
%"class.blink::HeapHashSet.331" = type { %"class.WTF::HashSet.334" }
%"class.WTF::HashSet.334" = type { %"class.WTF::HashTable.335" }
%"class.WTF::HashTable.335" = type <{ %"class.blink::WeakMember.337"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.337" = type opaque
%"class.blink::Member.338" = type { %"class.blink::MemberBase.339" }
%"class.blink::MemberBase.339" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.340" = type { %"class.blink::MemberBase.341" }
%"class.blink::MemberBase.341" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.342" = type { %"class.blink::MemberBase.343" }
%"class.blink::MemberBase.343" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.344" = type { %"class.blink::MemberBase.345" }
%"class.blink::MemberBase.345" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.346" = type { %"class.blink::MemberBase.347" }
%"class.blink::MemberBase.347" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.348" = type { %"class.WTF::HashMap.351" }
%"class.WTF::HashMap.351" = type { %"class.WTF::HashTable.352" }
%"class.WTF::HashTable.352" = type <{ %"struct.WTF::KeyValuePair.354"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.354" = type opaque
%"class.WTF::Vector.355" = type { %"class.WTF::VectorBuffer.356" }
%"class.WTF::VectorBuffer.356" = type { %"class.WTF::VectorBufferBase.357" }
%"class.WTF::VectorBufferBase.357" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.360" = type { %"class.blink::MemberBase.361" }
%"class.blink::MemberBase.361" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.362" = type { %"class.blink::MemberBase.363" }
%"class.blink::MemberBase.363" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.364" = type { %"class.blink::MemberBase.365" }
%"class.blink::MemberBase.365" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.366" = type { %"class.WTF::Vector.369" }
%"class.WTF::Vector.369" = type { %"class.WTF::VectorBuffer.370" }
%"class.WTF::VectorBuffer.370" = type { %"class.WTF::VectorBufferBase.371" }
%"class.WTF::VectorBufferBase.371" = type { %"class.blink::Member.372"*, i32, i32 }
%"class.blink::Member.372" = type opaque
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.380" = type { %"class.WTF::HashSet.383" }
%"class.WTF::HashSet.383" = type { %"class.WTF::HashTable.384" }
%"class.WTF::HashTable.384" = type <{ %"class.blink::WeakMember.386"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.386" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.387", i32, [4 x i8] }>
%"class.WTF::Vector.387" = type { %"class.WTF::VectorBuffer.388" }
%"class.WTF::VectorBuffer.388" = type { %"class.WTF::VectorBufferBase.389" }
%"class.WTF::VectorBufferBase.389" = type { %"struct.std::__1::pair.390"*, i32, i32 }
%"struct.std::__1::pair.390" = type opaque
%"class.blink::Member.393" = type { %"class.blink::MemberBase.394" }
%"class.blink::MemberBase.394" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.395" = type { %"class.WTF::VectorBuffer.396" }
%"class.WTF::VectorBuffer.396" = type { %"class.WTF::VectorBufferBase.397" }
%"class.WTF::VectorBufferBase.397" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.406" = type { %"class.WTF::Vector.409" }
%"class.WTF::Vector.409" = type { %"class.WTF::VectorBuffer.410" }
%"class.WTF::VectorBuffer.410" = type { %"class.WTF::VectorBufferBase.411" }
%"class.WTF::VectorBufferBase.411" = type { %"class.blink::Member.412"*, i32, i32 }
%"class.blink::Member.412" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.23" }
%"class.blink::Member.414" = type { %"class.blink::MemberBase.415" }
%"class.blink::MemberBase.415" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.416" = type { %"class.blink::MemberBase.417" }
%"class.blink::MemberBase.417" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.418" = type { %"class.blink::MemberBase.419" }
%"class.blink::MemberBase.419" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.420" = type { %"class.blink::MemberBase.421" }
%"class.blink::MemberBase.421" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.422" = type { %"class.blink::MemberBase.423" }
%"class.blink::MemberBase.423" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.424" = type { %"class.WTF::HashTable.425" }
%"class.WTF::HashTable.425" = type <{ %"struct.WTF::KeyValuePair.428"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.428" = type opaque
%"class.blink::Member.429" = type { %"class.blink::MemberBase.430" }
%"class.blink::MemberBase.430" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.431" = type { %"class.blink::MemberBase.432" }
%"class.blink::MemberBase.432" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.433" = type { %"class.blink::MemberBase.434" }
%"class.blink::MemberBase.434" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.435" = type { %"class.blink::MemberBase.436" }
%"class.blink::MemberBase.436" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.314", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.305, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.305 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.306" }>
%"class.base::RefCountedThreadSafe.306" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.307 }
%class.scoped_refptr.307 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.308", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.308" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.309" }
%"struct.std::__1::atomic.309" = type { %"struct.std::__1::__atomic_base.310" }
%"struct.std::__1::__atomic_base.310" = type { %"struct.std::__1::__atomic_base.311" }
%"struct.std::__1::__atomic_base.311" = type { %"struct.std::__1::__cxx_atomic_impl.312" }
%"struct.std::__1::__cxx_atomic_impl.312" = type { %"struct.std::__1::__cxx_atomic_base_impl.313" }
%"struct.std::__1::__cxx_atomic_base_impl.313" = type { i8 }
%"class.blink::WeakMember.314" = type { %"class.blink::MemberBase.24" }
%"class.blink::HeapHashSet.437" = type { %"class.WTF::HashSet.440" }
%"class.WTF::HashSet.440" = type { %"class.WTF::HashTable.441" }
%"class.WTF::HashTable.441" = type <{ %"class.blink::Member.443"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.443" = type opaque
%"class.blink::Member.444" = type { %"class.blink::MemberBase.445" }
%"class.blink::MemberBase.445" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.446" = type { %"class.blink::MemberBase.447" }
%"class.blink::MemberBase.447" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.448" = type { %"class.blink::MemberBase.449" }
%"class.blink::MemberBase.449" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.450" = type { %"class.blink::MemberBase.451" }
%"class.blink::MemberBase.451" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.452" = type { %"class.blink::MemberBase.453" }
%"class.blink::MemberBase.453" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.454" = type { %"class.std::__1::__compressed_pair.455" }
%"class.std::__1::__compressed_pair.455" = type { %"struct.std::__1::__compressed_pair_elem.456" }
%"struct.std::__1::__compressed_pair_elem.456" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.460" = type { %"class.std::__1::__compressed_pair.461" }
%"class.std::__1::__compressed_pair.461" = type { %"struct.std::__1::__compressed_pair_elem.462" }
%"struct.std::__1::__compressed_pair_elem.462" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.466" = type { %"class.blink::MemberBase.467" }
%"class.blink::MemberBase.467" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.468" = type { %"class.blink::MemberBase.469" }
%"class.blink::MemberBase.469" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.470" = type { %"class.blink::MemberBase.471" }
%"class.blink::MemberBase.471" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.472" = type { %"class.blink::MemberBase.473" }
%"class.blink::MemberBase.473" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.474" = type { %"class.WTF::VectorBuffer.475" }
%"class.WTF::VectorBuffer.475" = type { %"class.WTF::VectorBufferBase.476" }
%"class.WTF::VectorBufferBase.476" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.479" = type { %"class.WTF::HashMap.482" }
%"class.WTF::HashMap.482" = type { %"class.WTF::HashTable.483" }
%"class.WTF::HashTable.483" = type <{ %"struct.WTF::KeyValuePair.485"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.485" = type opaque
%"class.blink::Member.486" = type { %"class.blink::MemberBase.487" }
%"class.blink::MemberBase.487" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.488" = type { %"class.std::__1::__compressed_pair.489" }
%"class.std::__1::__compressed_pair.489" = type { %"struct.std::__1::__compressed_pair_elem.490" }
%"struct.std::__1::__compressed_pair_elem.490" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.494" = type { %"class.blink::MemberBase.495" }
%"class.blink::MemberBase.495" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.496" = type { %"class.blink::MemberBase.497" }
%"class.blink::MemberBase.497" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.498" = type { %"class.WTF::HashMap.501" }
%"class.WTF::HashMap.501" = type { %"class.WTF::HashTable.502" }
%"class.WTF::HashTable.502" = type <{ %"struct.WTF::KeyValuePair.504"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.504" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.505" }
%"class.blink::HeapHashSet.505" = type { %"class.WTF::HashSet.508" }
%"class.WTF::HashSet.508" = type { %"class.WTF::HashTable.509" }
%"class.WTF::HashTable.509" = type <{ %"class.blink::WeakMember.511"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.511" = type opaque
%"class.blink::Member.512" = type { %"class.blink::MemberBase.513" }
%"class.blink::MemberBase.513" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.514" = type { %"class.blink::MemberBase.515" }
%"class.blink::MemberBase.515" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.23", %"class.blink::HeapHashSet.521", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.528", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.521" = type { %"class.WTF::HashSet.524" }
%"class.WTF::HashSet.524" = type { %"class.WTF::HashTable.525" }
%"class.WTF::HashTable.525" = type <{ %"class.blink::Member.527"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.527" = type opaque
%"class.blink::HeapTaskRunnerTimer.528" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.529", { i64, i64 } }
%"class.blink::WeakMember.529" = type { %"class.blink::MemberBase.515" }
%"class.blink::WeakMember.516" = type { %"class.blink::MemberBase" }
%"class.blink::Member.517" = type { %"class.blink::MemberBase.518" }
%"class.blink::MemberBase.518" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::HTMLTableCaptionElement" = type { %"class.blink::HTMLElement" }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.610" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.610" = type { %"class.v8::TracedReference.611" }
%"class.v8::TracedReference.611" = type { %"class.v8::BasicTracedReference.612" }
%"class.v8::BasicTracedReference.612" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::DummyExceptionStateForTesting" = type { %"class.blink::ExceptionState" }
%"class.blink::HTMLTableSectionElement" = type { %"class.blink::HTMLTablePartElement" }
%"class.blink::HTMLTablePartElement" = type { %"class.blink::HTMLElement" }
%"class.v8::internal::Isolate" = type opaque
%"class.v8::Value" = type { i8 }
%"class.blink::HTMLTableRowElement" = type { %"class.blink::HTMLTablePartElement" }
%"class.WTF::StringAppend.615" = type { %"class.WTF::StringAppend", %"class.WTF::String" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.613", i8* }
%"class.WTF::StringAppend.613" = type { i8*, %"class.WTF::String" }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringAppend.614" = type { %"class.WTF::StringAppend.615", i8* }
%"class.WTF::StringTypeAdapter.742" = type <{ i8*, i32, [4 x i8] }>
%"class.blink::StyleChangeReasonForTracing" = type { i8*, %"class.WTF::AtomicString" }
%"class.blink::MutableCSSPropertyValueSet" = type <{ %"class.blink::CSSPropertyValueSet", [4 x i8], %"class.blink::Member.616", %"class.blink::HeapVector.621", i8, [7 x i8] }>
%"class.blink::Member.616" = type { %"class.blink::MemberBase.617" }
%"class.blink::MemberBase.617" = type { %"class.blink::PropertySetCSSStyleDeclaration"* }
%"class.blink::PropertySetCSSStyleDeclaration" = type { %"class.blink::AbstractPropertySetCSSStyleDeclaration", %"class.blink::Member.619" }
%"class.blink::AbstractPropertySetCSSStyleDeclaration" = type { %"class.blink::CSSStyleDeclaration" }
%"class.blink::CSSStyleDeclaration" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient" }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.618" }
%"class.blink::WeakMember.618" = type { %"class.blink::MemberBase.85" }
%"class.blink::Member.619" = type { %"class.blink::MemberBase.620" }
%"class.blink::MemberBase.620" = type { %"class.blink::MutableCSSPropertyValueSet"* }
%"class.blink::HeapVector.621" = type { %"class.WTF::Vector.624" }
%"class.WTF::Vector.624" = type { %"class.WTF::VectorBuffer.625" }
%"class.WTF::VectorBuffer.625" = type { %"class.WTF::VectorBufferBase.626", [96 x i8] }
%"class.WTF::VectorBufferBase.626" = type { %"class.blink::CSSPropertyValue"*, i32, i32 }
%"class.blink::CSSPropertyValue" = type { %"struct.blink::CSSPropertyValueMetadata", %"class.blink::Member.627" }
%"struct.blink::CSSPropertyValueMetadata" = type <{ %"class.WTF::AtomicString", i16, [6 x i8] }>
%"class.blink::Member.627" = type { %"class.blink::MemberBase.628" }
%"class.blink::MemberBase.628" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"struct.blink::Referrer" = type <{ %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::CSSPropertyName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::CSSImageValue" = type <{ %"class.blink::CSSValue", [5 x i8], %"class.WTF::AtomicString", %"struct.blink::Referrer", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.633", i32, i8, [3 x i8] }>
%"class.blink::Member.633" = type { %"class.blink::MemberBase.634" }
%"class.blink::MemberBase.634" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"struct.blink::Element::AttributeModificationParams" = type <{ %"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i32, [4 x i8] }>
%"class.blink::PersistentBase.640" = type { %"class.blink::CSSPropertyValueSet"*, %"class.blink::PersistentNodePtr" }
%"class.blink::CSSInheritedValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSNumericLiteralValue" = type { %"class.blink::CSSPrimitiveValue", double }
%"class.blink::CSSPrimitiveValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSIdentifierValue" = type { %"class.blink::CSSValue", i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::HTMLTableRowsCollection" = type { %"class.blink::HTMLCollection" }
%"class.blink::HTMLCollection" = type { %"class.blink::ScriptWrappable", %"class.blink::LiveNodeListBase.base", i8, %"class.blink::Member.657", %"class.blink::CollectionItemsCache" }
%"class.blink::LiveNodeListBase.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member.21", i16 }>
%"class.blink::Member.657" = type { %"class.blink::MemberBase.658" }
%"class.blink::MemberBase.658" = type { %"class.blink::HTMLCollection::NamedItemCache"* }
%"class.blink::HTMLCollection::NamedItemCache" = type { %"class.blink::HeapHashMap.661", %"class.blink::HeapHashMap.661" }
%"class.blink::HeapHashMap.661" = type { %"class.WTF::HashMap.664" }
%"class.WTF::HashMap.664" = type { %"class.WTF::HashTable.665" }
%"class.WTF::HashTable.665" = type <{ %"struct.WTF::KeyValuePair.667"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.667" = type { %"class.WTF::StringImpl"*, %"class.blink::Member.668" }
%"class.blink::Member.668" = type { %"class.blink::MemberBase.669" }
%"class.blink::MemberBase.669" = type { %"class.blink::HeapVector"* }
%"class.blink::CollectionItemsCache" = type { %"class.blink::CollectionIndexCache", i8, %"class.blink::HeapVector" }
%"class.blink::CollectionIndexCache" = type { i32 (...)**, %"class.blink::Member.36", i32, i32 }
%"class.blink::NodeListsNodeData" = type { %"class.blink::Member.753", %"class.blink::HeapHashMap.755", %"class.blink::HeapHashMap.765" }
%"class.blink::Member.753" = type { %"class.blink::MemberBase.754" }
%"class.blink::MemberBase.754" = type { %"class.blink::NodeList"* }
%"class.blink::NodeList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.755" = type { %"class.WTF::HashMap.758" }
%"class.WTF::HashMap.758" = type { %"class.WTF::HashTable.759" }
%"class.WTF::HashTable.759" = type <{ %"struct.WTF::KeyValuePair.761"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.761" = type { %"struct.std::__1::pair.762", %"class.blink::Member.763" }
%"struct.std::__1::pair.762" = type { i32, %"class.WTF::AtomicString" }
%"class.blink::Member.763" = type { %"class.blink::MemberBase.764" }
%"class.blink::MemberBase.764" = type { %"class.blink::LiveNodeListBase"* }
%"class.blink::LiveNodeListBase" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member.21", i16, [6 x i8] }>
%"class.blink::HeapHashMap.765" = type { %"class.WTF::HashMap.768" }
%"class.WTF::HashMap.768" = type { %"class.WTF::HashTable.769" }
%"class.WTF::HashTable.769" = type <{ %"struct.WTF::KeyValuePair.771"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.771" = type { %"class.blink::QualifiedName", %"class.blink::Member.772" }
%"class.blink::Member.772" = type { %"class.blink::MemberBase.773" }
%"class.blink::MemberBase.773" = type { %"class.blink::TagCollectionNS"* }
%"class.blink::TagCollectionNS" = type { %"class.blink::HTMLCollection", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.14", %"class.WTF::Vector.715" }
%"class.WTF::Vector.715" = type { %"class.WTF::VectorBuffer.716" }
%"class.WTF::VectorBuffer.716" = type { %"class.WTF::VectorBufferBase.717", [64 x i8] }
%"class.WTF::VectorBufferBase.717" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.695" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.683" }
%"class.blink::HeapVector.683" = type { %"class.WTF::Vector.686" }
%"class.WTF::Vector.686" = type { %"class.WTF::VectorBuffer.687" }
%"class.WTF::VectorBuffer.687" = type { %"class.WTF::VectorBufferBase.688", [32 x i8] }
%"class.WTF::VectorBufferBase.688" = type { %"struct.std::__1::pair.689"*, i32, i32 }
%"struct.std::__1::pair.689" = type { %"class.WTF::AtomicString", %"class.blink::Member.690" }
%"class.blink::Member.690" = type { %"class.blink::MemberBase.691" }
%"class.blink::MemberBase.691" = type { %"class.blink::HeapVector.692"* }
%"class.blink::HeapVector.692" = type opaque
%"class.std::__1::unique_ptr.695" = type { %"class.std::__1::__compressed_pair.696" }
%"class.std::__1::__compressed_pair.696" = type { %"struct.std::__1::__compressed_pair_elem.697" }
%"struct.std::__1::__compressed_pair_elem.697" = type { %"class.WTF::Vector.698"* }
%"class.WTF::Vector.698" = type opaque
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.674, %"class.blink::Member.675", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.674 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.675" = type { %"class.blink::MemberBase.676" }
%"class.blink::MemberBase.676" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.677" }
%"class.blink::Persistent.677" = type { %"class.blink::PersistentBase.678" }
%"class.blink::PersistentBase.678" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.blink::DOMWindow" = type opaque
%"class.blink::MessagePort" = type opaque
%"class.blink::ServiceWorker" = type opaque
%"class.blink::PortalHost" = type opaque
%"class.blink::Event" = type opaque
%"class.blink::EventListener" = type opaque
%"class.blink::AddEventListenerOptionsResolved" = type opaque
%"class.blink::RegisteredEventListener" = type <{ %"class.blink::Member.679", i8, [7 x i8] }>
%"class.blink::Member.679" = type { %"class.blink::MemberBase.680" }
%"class.blink::MemberBase.680" = type { %"class.blink::EventListener"* }
%"class.blink::V8UnionStringOrTrustedScript" = type opaque
%"struct.blink::Node::AttachContext" = type <{ %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, i8, i8, i8, i8, [4 x i8] }>
%"class.blink::LayoutObject" = type opaque
%"class.blink::EventDispatchHandlingState" = type opaque
%"class.blink::LayoutBox" = type opaque
%"class.blink::ComputedStyle" = type opaque
%"struct.blink::ContainerNode::ChildrenChange" = type { i8, i8, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::HeapVector.702", %"class.WTF::String"* }
%"class.blink::HeapVector.702" = type { %"class.WTF::Vector.705" }
%"class.WTF::Vector.705" = type { %"class.WTF::VectorBuffer.706" }
%"class.WTF::VectorBuffer.706" = type { %"class.WTF::VectorBufferBase.707" }
%"class.WTF::VectorBufferBase.707" = type { %"class.blink::Member"*, i32, i32 }
%"class.WTF::HashMap.709" = type opaque
%"class.blink::Image" = type opaque
%"struct.blink::FocusParams" = type opaque
%"class.blink::FocusOptions" = type opaque
%"class.blink::InputDeviceCapabilities" = type opaque
%"class.blink::ShadowRoot" = type opaque
%"class.blink::V8UnionStringTreatNullAsEmptyStringOrTrustedScript" = type opaque
%"class.blink::HTMLFormElement" = type opaque
%"class.blink::FormAssociated" = type opaque
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.738 }
%union.anon.738 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.743" = type { %"class.WTF::StringTypeAdapter.744" }
%"class.WTF::StringTypeAdapter.744" = type { %"class.WTF::StringView" }
%"class.blink::HeapHashTableBacking" = type { i8 }
%"class.blink::NormalPage" = type { %"class.blink::BasePage.base", %"class.blink::NormalPage::CardTable", %"class.blink::PlatformAwareObjectStartBitmap", %"class.WTF::Vector.721", %"class.blink::FreeList", %"class.WTF::Vector.726" }
%"class.blink::BasePage.base" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8 }>
%"class.blink::NormalPage::CardTable" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [256 x i8] }
%"class.WTF::Vector.721" = type { %"class.WTF::VectorBuffer.722" }
%"class.WTF::VectorBuffer.722" = type { %"class.WTF::VectorBufferBase.723" }
%"class.WTF::VectorBufferBase.723" = type { %"struct.blink::NormalPage::ToBeFinalizedObject"*, i32, i32 }
%"struct.blink::NormalPage::ToBeFinalizedObject" = type { %"class.blink::HeapObjectHeader"* }
%"class.WTF::Vector.726" = type { %"class.WTF::VectorBuffer.727" }
%"class.WTF::VectorBuffer.727" = type { %"class.WTF::VectorBufferBase.728" }
%"class.WTF::VectorBufferBase.728" = type { %"struct.blink::NormalPage::FutureFreelistEntry"*, i32, i32 }
%"struct.blink::NormalPage::FutureFreelistEntry" = type { i8*, i64 }

$_ZN5blink29DummyExceptionStateForTestingD2Ev = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev = comdat any

$_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink11EventTarget17HasEventListenersEv = comdat any

$_ZNK5blink16HTMLTableElement18GetWrapperTypeInfoEv = comdat any

$_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE = comdat any

$_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv = comdat any

$_ZNK5blink4Node11GetPseudoIdEv = comdat any

$_ZNK5blink4Node21IsMediaControlElementEv = comdat any

$_ZNK5blink4Node15IsMediaControlsEv = comdat any

$_ZNK5blink4Node14IsMediaElementEv = comdat any

$_ZNK5blink4Node20IsTextTrackContainerEv = comdat any

$_ZNK5blink4Node12IsVTTElementEv = comdat any

$_ZNK5blink4Node15IsAttributeNodeEv = comdat any

$_ZNK5blink4Node19IsCharacterDataNodeEv = comdat any

$_ZNK5blink4Node19IsFrameOwnerElementEv = comdat any

$_ZNK5blink4Node27IsMediaRemotingInterstitialEv = comdat any

$_ZNK5blink4Node30IsPictureInPictureInterstitialEv = comdat any

$_ZNK5blink7Element23CanContainRangeEndPointEv = comdat any

$_ZN5blink4Node11SheetLoadedEv = comdat any

$_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE = comdat any

$_ZN5blink4Node24StartLoadingDynamicSheetEv = comdat any

$_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv = comdat any

$_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE = comdat any

$_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE = comdat any

$_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE = comdat any

$_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv = comdat any

$_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv = comdat any

$_ZN5blink7Element41CollectExtraStyleForPresentationAttributeEPNS_26MutableCSSPropertyValueSetE = comdat any

$_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE = comdat any

$_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE = comdat any

$_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE = comdat any

$_ZNK5blink7Element10IsLiveLinkEv = comdat any

$_ZN5blink7Element13ImageContentsEv = comdat any

$_ZNK5blink7Element14DefaultToolTipEv = comdat any

$_ZNK5blink7Element25MatchesDefaultPseudoClassEv = comdat any

$_ZNK5blink7Element25ShouldAppearIndeterminateEv = comdat any

$_ZNK5blink7Element21IsDateTimeEditElementEv = comdat any

$_ZNK5blink7Element22IsDateTimeFieldElementEv = comdat any

$_ZNK5blink7Element24IsPickerIndicatorElementEv = comdat any

$_ZNK5blink7Element20IsFormControlElementEv = comdat any

$_ZNK5blink7Element19IsSpinButtonElementEv = comdat any

$_ZNK5blink7Element13IsTextControlEv = comdat any

$_ZNK5blink7Element21IsOptionalFormControlEv = comdat any

$_ZNK5blink7Element21IsRequiredFormControlEv = comdat any

$_ZNK5blink7Element9IsInRangeEv = comdat any

$_ZNK5blink7Element12IsOutOfRangeEv = comdat any

$_ZNK5blink7Element20IsClearButtonElementEv = comdat any

$_ZNK5blink7Element15IsScriptElementEv = comdat any

$_ZNK5blink7Element21IsVTTCueBackgroundBoxEv = comdat any

$_ZNK5blink7Element20IsSliderThumbElementEv = comdat any

$_ZNK5blink16HTMLTableElement25HasNonInBodyInsertionModeEv = comdat any

$_ZN5blink7Element20BuildPendingResourceEv = comdat any

$_ZNK5blink7Element11IsAdRelatedEv = comdat any

$_ZNK5blink7Element16GetNamedItemTypeEv = comdat any

$_ZN5blink7Element22ParserDidSetAttributesEv = comdat any

$_ZNK5blink7Element23AreAuthorShadowsAllowedEv = comdat any

$_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE = comdat any

$_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv = comdat any

$_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv = comdat any

$_ZNK5blink11HTMLElement17IsHTMLBodyElementEv = comdat any

$_ZNK5blink11HTMLElement24IsHTMLFencedFrameElementEv = comdat any

$_ZNK5blink11HTMLElement21IsHTMLFrameSetElementEv = comdat any

$_ZNK5blink11HTMLElement19IsHTMLPortalElementEv = comdat any

$_ZNK5blink11HTMLElement20IsHTMLUnknownElementEv = comdat any

$_ZNK5blink11HTMLElement15IsPluginElementEv = comdat any

$_ZNK5blink11HTMLElement7AltTextEv = comdat any

$_ZN5blink11HTMLElement22ToFormAssociatedOrNullEv = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableCaptionElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_19HTMLTableRowElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZN5blink8CSSValue14AllocateObjectINS_13CSSImageValueEEEPvm = comdat any

$_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink17NodeListsNodeData8AddCacheINS_23HTMLTableRowsCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE = comdat any

$_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISJ_SE_SK_EES6_DnEENS_18HashTableAddResultISL_SB_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6ExpandEPSB_ = comdat any

$_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE12ExpandBufferEjPSB_Rb = comdat any

$_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE8RehashToEPSB_jSM_ = comdat any

$_ZN3WTF5MoverINS_12KeyValuePairINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS4_6MemberINS4_16LiveNodeListBaseEEEEENS4_13HeapAllocatorENS_18HashMapValueTraitsINS_10HashTraitsIS7_EENSE_ISA_EEEELb1EE4MoveEOSB_RSB_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS1_12AtomicStringEEENS1_12KeyValuePairIS7_NS_6MemberINS_16LiveNodeListBaseEEEEENS1_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS7_EENSH_ISB_EEEESI_NS_13HeapAllocatorEEEE14AllocateObjectISN_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS3_12AtomicStringEEENS3_12KeyValuePairIS9_NS_6MemberINS_16LiveNodeListBaseEEEEENS3_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS9_EENSJ_ISD_EEEESK_NS_13HeapAllocatorEEEEEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS8_NS5_6MemberINS5_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS5_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv = comdat any

$_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE16LookupForWritingERKS6_ = comdat any

$_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink17NodeListsNodeData8AddCacheINS_14HTMLCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

@_ZN5blink10html_names9kTableTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZTVN5blink16HTMLTableElementE = hidden unnamed_addr constant { [172 x i8*], [3 x i8*] } { [172 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::HTMLTableElement"*)* @_ZN5blink16HTMLTableElementD2Ev to i8*), i8* bitcast (void (%"class.blink::HTMLTableElement"*)* @_ZN5blink16HTMLTableElementD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::HTMLTableElement"*, %"class.blink::Visitor"*)* @_ZNK5blink16HTMLTableElement5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::HTMLTableElement"*)* @_ZNK5blink16HTMLTableElement18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.WTF::AtomicString"* (%"class.blink::Node"*)* @_ZNK5blink4Node13InterfaceNameEv to i8*), i8* bitcast (%"class.blink::ExecutionContext"* (%"class.blink::Node"*)* @_ZNK5blink4Node19GetExecutionContextEv to i8*), i8* bitcast (%"class.blink::Node"* (%"class.blink::Node"*)* @_ZN5blink4Node6ToNodeEv to i8*), i8* bitcast (%"class.blink::DOMWindow"* (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget11ToDOMWindowEv to i8*), i8* bitcast (%"class.blink::LocalDOMWindow"* (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget16ToLocalDOMWindowEv to i8*), i8* bitcast (%"class.blink::LocalDOMWindow"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget16ToLocalDOMWindowEv to i8*), i8* bitcast (%"class.blink::MessagePort"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget13ToMessagePortEv to i8*), i8* bitcast (%"class.blink::ServiceWorker"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget15ToServiceWorkerEv to i8*), i8* bitcast (%"class.blink::PortalHost"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget12ToPortalHostEv to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node23RemoveAllEventListenersEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*, %"class.blink::Event"*)* @_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*, %"class.WTF::AtomicString"*, %"class.blink::EventListener"*, %"class.blink::AddEventListenerOptionsResolved"*)* @_ZN5blink11EventTarget24AddEventListenerInternalERKN3WTF12AtomicStringEPNS_13EventListenerEPKNS_31AddEventListenerOptionsResolvedE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::AtomicString"*, %"class.blink::RegisteredEventListener"*)* @_ZN5blink4Node18AddedEventListenerERKN3WTF12AtomicStringERNS_23RegisteredEventListenerE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::AtomicString"*, %"class.blink::RegisteredEventListener"*)* @_ZN5blink4Node20RemovedEventListenerERKN3WTF12AtomicStringERKNS_23RegisteredEventListenerE to i8*), i8* bitcast (i32 (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node21DispatchEventInternalERNS_5EventE to i8*), i8* bitcast (%"class.blink::EventTargetData"* (%"class.blink::Node"*)* @_ZN5blink4Node18GetEventTargetDataEv to i8*), i8* bitcast (%"class.blink::EventTargetData"* (%"class.blink::Node"*)* @_ZN5blink4Node21EnsureEventTargetDataEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement8nodeNameEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Node"*)* @_ZNK5blink4Node9nodeValueEv to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::String"*)* @_ZN5blink4Node12setNodeValueERKN3WTF6StringE to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element11getNodeTypeEv to i8*), i8* bitcast (%"class.blink::Node"* (%"class.blink::Element"*, %"class.blink::Document"*, i32)* @_ZNK5blink7Element5CloneERNS_8DocumentENS_17CloneChildrenFlagE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::String"*)* @_ZN5blink4Node14setTextContentERKN3WTF6StringE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::V8UnionStringOrTrustedScript"*, %"class.blink::ExceptionState"*)* @_ZN5blink4Node24setTextContentForBindingEPKNS_28V8UnionStringOrTrustedScriptERNS_14ExceptionStateE to i8*), i8* bitcast (i8 (%"class.blink::Node"*)* @_ZNK5blink4Node11GetPseudoIdEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node21IsMediaControlElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node15IsMediaControlsEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node14IsMediaElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node20IsTextTrackContainerEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node12IsVTTElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node15IsAttributeNodeEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node19IsCharacterDataNodeEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node19IsFrameOwnerElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node27IsMediaRemotingInterstitialEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node30IsPictureInPictureInterstitialEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element23CanContainRangeEndPointEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node11SheetLoadedEv to i8*), i8* bitcast (void (%"class.blink::Node"*, i32)* @_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node24StartLoadingDynamicSheetEv to i8*), i8* bitcast (void (%"class.blink::ContainerNode"*, i1, i32)* @_ZN5blink13ContainerNode10SetFocusedEbNS_5mojom9FocusTypeE to i8*), i8* bitcast (void (%"class.blink::ContainerNode"*, i1)* @_ZN5blink13ContainerNode10SetDraggedEb to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node25ShouldHaveFocusAppearanceEv to i8*), i8* bitcast (void ()* @_ZNK5blink13ContainerNode11BoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*, i32)* @_ZNK5blink7Element16ChildTypeAllowedENS_4Node8NodeTypeE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node17CanStartSelectionEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"struct.blink::Node::AttachContext"*)* @_ZN5blink7Element16AttachLayoutTreeERNS_4Node13AttachContextE to i8*), i8* bitcast (void (%"class.blink::Element"*, i1)* @_ZN5blink7Element16DetachLayoutTreeEb to i8*), i8* bitcast (i32 (%"class.blink::HTMLElement"*, %"class.blink::ContainerNode"*)* @_ZN5blink11HTMLElement12InsertedIntoERNS_13ContainerNodeE to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"class.blink::ContainerNode"*)* @_ZN5blink11HTMLElement11RemovedFromERNS_13ContainerNodeE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node28WillRespondToMouseMoveEventsEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node29WillRespondToMouseClickEventsEv to i8*), i8* bitcast (%"class.blink::EventDispatchHandlingState"* (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::Event"*, %"class.blink::EventDispatchHandlingState"*)* @_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node17HandleLocalEventsERNS_5EventE to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"class.blink::Event"*)* @_ZN5blink11HTMLElement19DefaultEventHandlerERNS_5EventE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node21HasActivationBehaviorEv to i8*), i8* bitcast (%"class.blink::LayoutBox"* (%"class.blink::Node"*)* @_ZN5blink4Node13AutoscrollBoxEv to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node14StopAutoscrollEv to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"class.blink::Document"*)* @_ZN5blink11HTMLElement20DidMoveToNewDocumentERNS_8DocumentE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement13DebugNodeNameEv to i8*), i8* bitcast (%"class.blink::ComputedStyle"* (%"class.blink::Element"*, i8, %"class.WTF::AtomicString"*)* @_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"struct.blink::ContainerNode::ChildrenChange"*)* @_ZN5blink11HTMLElement15ChildrenChangedERKNS_13ContainerNode14ChildrenChangeE to i8*), i8* bitcast (i1 (%"class.blink::ContainerNode"*)* @_ZNK5blink13ContainerNode42ChildrenChangedAllChildrenRemovedNeedsListEv to i8*), i8* bitcast (i1 (%"class.blink::ContainerNode"*)* @_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv to i8*), i8* bitcast (%"class.blink::LayoutBox"* (%"class.blink::Element"*)* @_ZNK5blink7Element24GetLayoutBoxForScrollingEv to i8*), i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*)* @_ZN5blink7Element18GetAnimationTargetEv to i8*), i8* bitcast (%"class.WTF::HashMap.709"* (%"class.blink::Element"*)* @_ZNK5blink7Element24GetCheckedAttributeTypesEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZN5blink7Element11scrollWidthEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZN5blink7Element12scrollHeightEv to i8*), i8* bitcast (%"class.blink::CSSPropertyValueSet"* (%"class.blink::HTMLTableElement"*)* @_ZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"*)* @_ZNK5blink16HTMLTableElement23IsPresentationAttributeERKNS_13QualifiedNameE to i8*), i8* bitcast (void (%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.blink::MutableCSSPropertyValueSet"*)* @_ZN5blink16HTMLTableElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::MutableCSSPropertyValueSet"*)* @_ZN5blink7Element41CollectExtraStyleForPresentationAttributeEPNS_26MutableCSSPropertyValueSetE to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"struct.blink::Element::AttributeModificationParams"*)* @_ZN5blink11HTMLElement16AttributeChangedERKNS_7Element27AttributeModificationParamsE to i8*), i8* bitcast (void (%"class.blink::HTMLTableElement"*, %"struct.blink::Element::AttributeModificationParams"*)* @_ZN5blink16HTMLTableElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE to i8*), i8* bitcast (i1 (%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"*)* @_ZNK5blink16HTMLTableElement21HasLegalLinkAttributeERKNS_13QualifiedNameE to i8*), i8* bitcast (%"class.blink::QualifiedName"* (%"class.blink::HTMLTableElement"*)* @_ZNK5blink16HTMLTableElement24SubResourceAttributeNameEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32)* @_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE to i8*), i8* bitcast (%"class.blink::LayoutObject"* (%"class.blink::Element"*, %"class.blink::ComputedStyle"*, i32)* @_ZN5blink7Element18CreateLayoutObjectERKNS_13ComputedStyleENS_12LegacyLayoutE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::ComputedStyle"*)* @_ZNK5blink7Element20LayoutObjectIsNeededERKNS_13ComputedStyleE to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, i32)* @_ZN5blink11HTMLElement15AccessKeyActionENS_27SimulatedClickCreationScopeE to i8*), i8* bitcast (i1 (%"class.blink::HTMLTableElement"*, %"class.blink::Attribute"*)* @_ZNK5blink16HTMLTableElement14IsURLAttributeERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element10IsLiveLinkEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Element"*)* @_ZNK5blink7Element14ImageSourceURLEv to i8*), i8* bitcast (%"class.blink::Image"* (%"class.blink::Element"*)* @_ZN5blink7Element13ImageContentsEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"struct.blink::FocusParams"*)* @_ZN5blink7Element5focusERKNS_11FocusParamsE to i8*), i8* bitcast (void (%"class.blink::Element"*, i32, %"class.blink::FocusOptions"*)* @_ZN5blink7Element32UpdateFocusAppearanceWithOptionsENS_24SelectionBehaviorOnFocusEPKNS_12FocusOptionsE to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element4blurEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement13SupportsFocusEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element19IsKeyboardFocusableEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element16IsMouseFocusableEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element18DispatchFocusEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element17DispatchBlurEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.WTF::AtomicString"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element20DispatchFocusInEventERKN3WTF12AtomicStringEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement5titleEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Element"*)* @_ZNK5blink7Element14DefaultToolTipEv to i8*), i8* bitcast (%"class.WTF::AtomicString"* (%"class.blink::Element"*)* @_ZNK5blink7Element14ShadowPseudoIdEv to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*)* @_ZN5blink11HTMLElement21FinishParsingChildrenEv to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*)* @_ZN5blink11HTMLElement20BeginParsingChildrenEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*, i8)* @_ZNK5blink7Element24CanGeneratePseudoElementENS_8PseudoIdE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25MatchesDefaultPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement25MatchesEnabledPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement26MatchesReadOnlyPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement27MatchesReadWritePseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement28MatchesValidityPseudoClassesEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25MayTriggerVirtualKeyboardEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25ShouldAppearIndeterminateEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsDateTimeEditElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element22IsDateTimeFieldElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element24IsPickerIndicatorElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsFormControlElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element19IsSpinButtonElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element13IsTextControlEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsOptionalFormControlEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsRequiredFormControlEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement12willValidateEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZN5blink11HTMLElement14IsValidElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element9IsInRangeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element12IsOutOfRangeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsClearButtonElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element15IsScriptElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsVTTCueBackgroundBoxEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsSliderThumbElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLTableElement"*)* @_ZNK5blink16HTMLTableElement25HasNonInBodyInsertionModeEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement21IsDisabledFormControlEv to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element20BuildPendingResourceEv to i8*), i8* bitcast (void (%"class.blink::Element"*, i1)* @_ZN5blink7Element9SetActiveEb to i8*), i8* bitcast (void (%"class.blink::Element"*, i1)* @_ZN5blink7Element10SetHoveredEb to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element11IsAdRelatedEv to i8*), i8* bitcast (void (%"class.blink::Element"*, i64)* @_ZN5blink7Element15WillRecalcStyleENS_17StyleRecalcChangeE to i8*), i8* bitcast (void (%"class.blink::Element"*, i64)* @_ZN5blink7Element14DidRecalcStyleENS_17StyleRecalcChangeE to i8*), i8* bitcast (void ()* @_ZN5blink7Element26CustomStyleForLayoutObjectERKNS_18StyleRecalcContextE to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element16GetNamedItemTypeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element16IsFocusableStyleEv to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element22ParserDidSetAttributesEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element23AreAuthorShadowsAllowedEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::ShadowRoot"*)* @_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element15DefaultTabIndexEv to i8*), i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*, %"class.blink::Document"*)* @_ZNK5blink7Element33CloneWithoutAttributesAndChildrenERNS_8DocumentE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv to i8*), i8* bitcast (void (%"class.blink::HTMLElement"*, %"class.blink::V8UnionStringTreatNullAsEmptyStringOrTrustedScript"*, %"class.blink::ExceptionState"*)* @_ZN5blink11HTMLElement22setInnerTextForBindingEPKNS_50V8UnionStringTreatNullAsEmptyStringOrTrustedScriptERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement19HasCustomFocusLogicEv to i8*), i8* bitcast (%"class.WTF::AtomicString"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement14autocapitalizeEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement9draggableEv to i8*), i8* bitcast (%"class.blink::HTMLFormElement"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement9formOwnerEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement17IsHTMLBodyElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement24IsHTMLFencedFrameElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement21IsHTMLFrameSetElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement19IsHTMLPortalElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement20IsHTMLUnknownElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement15IsPluginElementEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement11IsLabelableEv to i8*), i8* bitcast (i1 (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement20IsInteractiveContentEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::HTMLElement"*)* @_ZNK5blink11HTMLElement7AltTextEv to i8*), i8* bitcast (%"class.blink::FormAssociated"* (%"class.blink::HTMLElement"*)* @_ZN5blink11HTMLElement22ToFormAssociatedOrNullEv to i8*)], [3 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*)* @_ZThn80_N5blink7Element18GetAnimationTargetEv to i8*)] }, align 8
@_ZN5blink10html_names9kTheadTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str = private unnamed_addr constant [21 x i8] c"Not a thead element.\00", align 1
@_ZN5blink10html_names11kCaptionTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names12kColgroupTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kTfootTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.1 = private unnamed_addr constant [21 x i8] c"Not a tfoot element.\00", align 1
@_ZN5blink10html_names9kTbodyTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"The index provided (\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c") is less than -1.\00", align 1
@.str.4 = private unnamed_addr constant [52 x i8] c") is greater than the number of rows in the table (\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c").\00", align 1
@_ZN5blink10html_names10kRulesAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names10kWidthAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names11kHeightAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names11kBorderAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names16kBordercolorAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names12kBgcolorAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names15kBackgroundAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names11kValignAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names16kCellspacingAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names10kAlignAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.6 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@_ZN5blink10html_names10kFrameAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names11kVspaceAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names11kHspaceAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.7 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"groups\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"rows\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"cols\00", align 1
@_ZN5blink10html_names16kCellpaddingAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names9kColsAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style = internal global i64 0, align 8
@_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 = internal global i64 0, align 8
@_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style = internal global i64 0, align 8
@_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style = internal global i64 0, align 8
@_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style = internal global i64 0, align 8
@_ZN5blink10html_names12kSummaryAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZTVN5blink7ElementE = external unnamed_addr constant { [157 x i8*], [3 x i8*] }, align 8
@_ZTVN5blink29DummyExceptionStateForTestingE = external unnamed_addr constant { [9 x i8*] }, align 8
@_ZTVN5blink14ExceptionStateE = external unnamed_addr constant { [9 x i8*] }, align 8
@_ZN5blink19style_change_reason10kAttributeE = external constant [0 x i8], align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.12 = private unnamed_addr constant [6 x i8] c"above\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"below\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"hsides\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"vsides\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"border\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16HTMLTableElement18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@_ZN5blink11ThreadState26main_thread_state_storage_E = external local_unnamed_addr global [0 x i8], align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.23 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.24 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.25 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.26 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@_ZN5blink10html_names6kTdTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kThTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.27 = private unnamed_addr constant [16 x i8] c"blink::CSSValue\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.28 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSPropertyValueSetEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSPropertyValueSet]\00", align 1
@_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.29 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.30 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.31 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.33 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS3_12AtomicStringEEENS3_12KeyValuePairIS9_NS_6MemberINS_16LiveNodeListBaseEEEEENS3_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS9_EENSJ_ISD_EEEESK_NS_13HeapAllocatorEEEEEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINSt3__14pairINS1_14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS8_NS1_6MemberINS1_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS1_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS1_13HeapAllocatorEEEEEEEPKcv = private unnamed_addr constant [616 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashTableBacking<WTF::HashTable<std::__1::pair<blink::CollectionType, WTF::AtomicString>, WTF::KeyValuePair<std::__1::pair<blink::CollectionType, WTF::AtomicString>, blink::Member<blink::LiveNodeListBase> >, WTF::KeyValuePairKeyExtractor, blink::NodeListsNodeData::NodeListAtomicCacheMapEntryHash, WTF::HashMapValueTraits<WTF::HashTraits<std::__1::pair<blink::CollectionType, WTF::AtomicString> >, WTF::HashTraits<blink::Member<blink::LiveNodeListBase> > >, WTF::HashTraits<std::__1::pair<blink::CollectionType, WTF::AtomicString> >, blink::HeapAllocator> >]\00", align 1
@_ZN3WTF11g_star_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ScriptWrappable]\00", align 1

@_ZN5blink16HTMLTableElementC1ERNS_8DocumentE = hidden unnamed_addr alias void (%"class.blink::HTMLTableElement"*, %"class.blink::Document"*), void (%"class.blink::HTMLTableElement"*, %"class.blink::Document"*)* @_ZN5blink16HTMLTableElementC2ERNS_8DocumentE
@_ZN5blink16HTMLTableElementD1Ev = hidden unnamed_addr alias void (%"class.blink::HTMLTableElement"*), void (%"class.blink::HTMLTableElement"*)* @_ZN5blink16HTMLTableElementD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElementC2ERNS_8DocumentE(%"class.blink::HTMLTableElement"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #0 align 2 {
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTableTagE to %"class.blink::QualifiedName"**), align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink7ElementC2ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"* %4, %"class.blink::QualifiedName"* dereferenceable(8) %3, %"class.blink::Document"* %1, i32 1026) #10
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink16HTMLTableElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink16HTMLTableElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 3
  store i8 0, i8* %9, align 2
  %10 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 5
  store i16 1, i16* %11, align 8
  %12 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.blink::CSSPropertyValueSet"* null, %"class.blink::CSSPropertyValueSet"** %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElementD2Ev(%"class.blink::HTMLTableElement"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [157 x i8*], [3 x i8*] }, { [157 x i8*], [3 x i8*] }* @_ZTVN5blink7ElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [157 x i8*], [3 x i8*] }, { [157 x i8*], [3 x i8*] }* @_ZTVN5blink7ElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 2
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %4) #10
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNodeD2Ev(%"class.blink::ContainerNode"* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElementD0Ev(%"class.blink::HTMLTableElement"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [157 x i8*], [3 x i8*] }, { [157 x i8*], [3 x i8*] }* @_ZTVN5blink7ElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [157 x i8*], [3 x i8*] }, { [157 x i8*], [3 x i8*] }* @_ZTVN5blink7ElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 2
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %4) #10
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNodeD2Ev(%"class.blink::ContainerNode"* %5) #10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::HTMLTableCaptionElement"* @_ZNK5blink16HTMLTableElement7captionEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %1
  %6 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %7 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %6, i64 0, i32 0, i32 0, i32 0
  br label %8

8:                                                ; preds = %24, %5
  %9 = phi %"class.blink::Node"* [ %3, %5 ], [ %26, %24 ]
  %10 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 48
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %24

14:                                               ; preds = %8
  %15 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %7, align 8
  %16 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 1, i32 2
  %17 = bitcast %"class.blink::Member"* %16 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %15, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %14, %8
  %25 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 5, i32 0, i32 0
  %26 = load %"class.blink::Node"*, %"class.blink::Node"** %25, align 8
  %27 = icmp eq %"class.blink::Node"* %26, null
  br i1 %27, label %28, label %8

28:                                               ; preds = %14, %24, %1
  %29 = phi %"class.blink::Node"* [ null, %1 ], [ %9, %14 ], [ null, %24 ]
  %30 = bitcast %"class.blink::Node"* %29 to %"class.blink::HTMLTableCaptionElement"*
  ret %"class.blink::HTMLTableCaptionElement"* %30
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement10setCaptionEPNS_23HTMLTableCaptionElementERNS_14ExceptionStateE(%"class.blink::HTMLTableElement"*, %"class.blink::HTMLTableCaptionElement"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %7 = load %"class.blink::Node"*, %"class.blink::Node"** %6, align 8
  %8 = icmp eq %"class.blink::Node"* %7, null
  br i1 %8, label %32, label %9

9:                                                ; preds = %3
  %10 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %10, i64 0, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %28, %9
  %13 = phi %"class.blink::Node"* [ %7, %9 ], [ %30, %28 ]
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 48
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %28

18:                                               ; preds = %12
  %19 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %20 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 1, i32 2
  %21 = bitcast %"class.blink::Member"* %20 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %22 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %22, i64 0, i32 3, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %19, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %24, %26
  br i1 %27, label %32, label %28

28:                                               ; preds = %18, %12
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 0, i32 5, i32 0, i32 0
  %30 = load %"class.blink::Node"*, %"class.blink::Node"** %29, align 8
  %31 = icmp eq %"class.blink::Node"* %30, null
  br i1 %31, label %32, label %12

32:                                               ; preds = %18, %28, %3
  %33 = phi %"class.blink::Node"* [ null, %3 ], [ %13, %18 ], [ null, %28 ]
  %34 = bitcast %"class.blink::DummyExceptionStateForTesting"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %36, align 8
  %37 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %37, align 2
  %38 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 2
  %39 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  %40 = bitcast %"class.WTF::StringImpl"** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 16, i1 false) #10
  %41 = bitcast i8** %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %42 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0
  %43 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %5, %"class.blink::Node"* %33, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %42) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %34) #10
  %44 = icmp eq %"class.blink::HTMLTableCaptionElement"* %1, null
  br i1 %44, label %49, label %45

45:                                               ; preds = %32
  %46 = getelementptr inbounds %"class.blink::HTMLTableCaptionElement", %"class.blink::HTMLTableCaptionElement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %"class.blink::Node"*, %"class.blink::Node"** %6, align 8
  %48 = call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %5, %"class.blink::Node"* %46, %"class.blink::Node"* %47, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %49

49:                                               ; preds = %32, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement13deleteCaptionEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %9 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %8, i64 0, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %26, %7
  %11 = phi %"class.blink::Node"* [ %5, %7 ], [ %28, %26 ]
  %12 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 48
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %10
  %17 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %18 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 1, i32 2
  %19 = bitcast %"class.blink::Member"* %18 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %20, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %17, i64 0, i32 3, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %22, %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %16, %10
  %27 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 5, i32 0, i32 0
  %28 = load %"class.blink::Node"*, %"class.blink::Node"** %27, align 8
  %29 = icmp eq %"class.blink::Node"* %28, null
  br i1 %29, label %30, label %10

30:                                               ; preds = %16, %26, %1
  %31 = phi %"class.blink::Node"* [ null, %1 ], [ null, %26 ], [ %11, %16 ]
  %32 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %32) #10
  %33 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %34, align 8
  %35 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %35, align 2
  %36 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %37 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %38 = bitcast %"class.WTF::StringImpl"** %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false) #10
  %39 = bitcast i8** %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %40 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  %41 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %3, %"class.blink::Node"* %31, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %40) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %32) #10
  ret void
}

declare %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZNK5blink16HTMLTableElement5tHeadEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTheadTagE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = icmp eq %"class.blink::Node"* %4, null
  br i1 %5, label %48, label %6

6:                                                ; preds = %1, %12
  %7 = phi %"class.blink::Node"* [ %14, %12 ], [ %4, %1 ]
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 48
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 5, i32 0, i32 0
  %14 = load %"class.blink::Node"*, %"class.blink::Node"** %13, align 8
  %15 = icmp eq %"class.blink::Node"* %14, null
  br i1 %15, label %48, label %6

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = bitcast %"class.blink::Node"* %7 to %"class.blink::HTMLElement"*
  %22 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 1, i32 2
  %23 = bitcast %"class.blink::Member"* %22 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, %20
  br i1 %27, label %48, label %35

28:                                               ; preds = %40
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 1, i32 2
  %30 = bitcast %"class.blink::Member"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %20
  br i1 %34, label %46, label %45

35:                                               ; preds = %16, %45
  %36 = phi %"class.blink::Node"* [ %38, %45 ], [ %7, %16 ]
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %36, i64 0, i32 5, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %40, %28
  br label %35

46:                                               ; preds = %28
  %47 = bitcast %"class.blink::Node"* %38 to %"class.blink::HTMLElement"*
  br label %48

48:                                               ; preds = %12, %35, %16, %46, %1
  %49 = phi %"class.blink::HTMLElement"* [ null, %1 ], [ %47, %46 ], [ %21, %16 ], [ null, %35 ], [ null, %12 ]
  %50 = bitcast %"class.blink::HTMLElement"* %49 to %"class.blink::HTMLTableSectionElement"*
  ret %"class.blink::HTMLTableSectionElement"* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement8setTHeadEPNS_23HTMLTableSectionElementERNS_14ExceptionStateE(%"class.blink::HTMLTableElement"*, %"class.blink::HTMLTableSectionElement"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %5 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %6 = icmp eq %"class.blink::HTMLTableSectionElement"* %1, null
  br i1 %6, label %123, label %7

7:                                                ; preds = %3
  %8 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTheadTagE, align 8
  %9 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %12, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %10, i64 0, i32 3, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %14, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %7
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0)) #10
  br label %184

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %23 = icmp eq %"class.blink::Node"* %22, null
  br i1 %23, label %62, label %24

24:                                               ; preds = %19, %30
  %25 = phi %"class.blink::Node"* [ %32, %30 ], [ %22, %19 ]
  %26 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 48
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 0, i32 5, i32 0, i32 0
  %32 = load %"class.blink::Node"*, %"class.blink::Node"** %31, align 8
  %33 = icmp eq %"class.blink::Node"* %32, null
  br i1 %33, label %62, label %24

34:                                               ; preds = %24
  %35 = bitcast %"class.blink::Node"* %25 to %"class.blink::HTMLElement"*
  %36 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 1, i32 2
  %37 = bitcast %"class.blink::Member"* %36 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %38 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 3, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, %14
  br i1 %41, label %62, label %49

42:                                               ; preds = %54
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %52, i64 1, i32 2
  %44 = bitcast %"class.blink::Member"* %43 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %45 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %45, i64 0, i32 3, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, %14
  br i1 %48, label %60, label %59

49:                                               ; preds = %34, %59
  %50 = phi %"class.blink::Node"* [ %52, %59 ], [ %25, %34 ]
  %51 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %50, i64 0, i32 5, i32 0, i32 0
  %52 = load %"class.blink::Node"*, %"class.blink::Node"** %51, align 8
  %53 = icmp eq %"class.blink::Node"* %52, null
  br i1 %53, label %62, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %52, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 48
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %42, label %59

59:                                               ; preds = %54, %42
  br label %49

60:                                               ; preds = %42
  %61 = bitcast %"class.blink::Node"* %52 to %"class.blink::HTMLElement"*
  br label %62

62:                                               ; preds = %30, %49, %60, %34, %19
  %63 = phi %"class.blink::HTMLElement"* [ null, %19 ], [ %61, %60 ], [ %35, %34 ], [ null, %49 ], [ null, %30 ]
  %64 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.blink::DummyExceptionStateForTesting"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %65) #10
  %66 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %67, align 8
  %68 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %68, align 2
  %69 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 2
  %70 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  %71 = bitcast %"class.WTF::StringImpl"** %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 16, i1 false) #10
  %72 = bitcast i8** %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %73 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0
  %74 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %20, %"class.blink::Node"* %64, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %73) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %65) #10
  %75 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %76 = icmp eq %"class.blink::Node"* %75, null
  br i1 %76, label %119, label %77

77:                                               ; preds = %62, %83
  %78 = phi %"class.blink::Node"* [ %85, %83 ], [ %75, %62 ]
  %79 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %78, i64 0, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = and i32 %80, 48
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %78, i64 0, i32 5, i32 0, i32 0
  %85 = load %"class.blink::Node"*, %"class.blink::Node"** %84, align 8
  %86 = icmp eq %"class.blink::Node"* %85, null
  br i1 %86, label %119, label %77

87:                                               ; preds = %77
  %88 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %89 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %88, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %89, align 8
  %91 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %90, i64 0, i32 3, i32 0, i32 0, i32 0
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %93 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kColgroupTagE, align 8
  %94 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %93, i64 0, i32 0, i32 0, i32 0
  br label %95

95:                                               ; preds = %114, %87
  %96 = phi %"class.blink::Node"* [ %78, %87 ], [ %112, %114 ]
  %97 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %96, i64 1, i32 2
  %98 = bitcast %"class.blink::Member"* %97 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %99 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %98, align 8
  %100 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %99, i64 0, i32 3, i32 0, i32 0, i32 0
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %100, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %101, %92
  br i1 %102, label %108, label %103

103:                                              ; preds = %95
  %104 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %94, align 8
  %105 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %104, i64 0, i32 3, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %101, %106
  br i1 %107, label %108, label %119

108:                                              ; preds = %95, %103
  br label %109

109:                                              ; preds = %108, %114
  %110 = phi %"class.blink::Node"* [ %112, %114 ], [ %96, %108 ]
  %111 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %110, i64 0, i32 5, i32 0, i32 0
  %112 = load %"class.blink::Node"*, %"class.blink::Node"** %111, align 8
  %113 = icmp eq %"class.blink::Node"* %112, null
  br i1 %113, label %119, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %112, i64 0, i32 1
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, 48
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %95, label %109

119:                                              ; preds = %83, %103, %109, %62
  %120 = phi %"class.blink::Node"* [ null, %62 ], [ null, %109 ], [ %96, %103 ], [ null, %83 ]
  %121 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %20, %"class.blink::Node"* %121, %"class.blink::Node"* %120, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %184

123:                                              ; preds = %3
  %124 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %125 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTheadTagE, align 8
  %126 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %127 = load %"class.blink::Node"*, %"class.blink::Node"** %126, align 8
  %128 = icmp eq %"class.blink::Node"* %127, null
  br i1 %128, label %171, label %129

129:                                              ; preds = %123, %135
  %130 = phi %"class.blink::Node"* [ %137, %135 ], [ %127, %123 ]
  %131 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %130, i64 0, i32 1
  %132 = load i32, i32* %131, align 8
  %133 = and i32 %132, 48
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %130, i64 0, i32 5, i32 0, i32 0
  %137 = load %"class.blink::Node"*, %"class.blink::Node"** %136, align 8
  %138 = icmp eq %"class.blink::Node"* %137, null
  br i1 %138, label %171, label %129

139:                                              ; preds = %129
  %140 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %125, i64 0, i32 0, i32 0, i32 0
  %141 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %140, align 8
  %142 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %141, i64 0, i32 3, i32 0, i32 0, i32 0
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  %144 = bitcast %"class.blink::Node"* %130 to %"class.blink::HTMLElement"*
  %145 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %130, i64 1, i32 2
  %146 = bitcast %"class.blink::Member"* %145 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %147 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %146, align 8
  %148 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %147, i64 0, i32 3, i32 0, i32 0, i32 0
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, %143
  br i1 %150, label %171, label %158

151:                                              ; preds = %163
  %152 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %161, i64 1, i32 2
  %153 = bitcast %"class.blink::Member"* %152 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %154 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %153, align 8
  %155 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %154, i64 0, i32 3, i32 0, i32 0, i32 0
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = icmp eq %"class.WTF::StringImpl"* %156, %143
  br i1 %157, label %169, label %168

158:                                              ; preds = %139, %168
  %159 = phi %"class.blink::Node"* [ %161, %168 ], [ %130, %139 ]
  %160 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %159, i64 0, i32 5, i32 0, i32 0
  %161 = load %"class.blink::Node"*, %"class.blink::Node"** %160, align 8
  %162 = icmp eq %"class.blink::Node"* %161, null
  br i1 %162, label %171, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %161, i64 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = and i32 %165, 48
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %151, label %168

168:                                              ; preds = %163, %151
  br label %158

169:                                              ; preds = %151
  %170 = bitcast %"class.blink::Node"* %161 to %"class.blink::HTMLElement"*
  br label %171

171:                                              ; preds = %135, %158, %123, %139, %169
  %172 = phi %"class.blink::HTMLElement"* [ null, %123 ], [ %170, %169 ], [ %144, %139 ], [ null, %158 ], [ null, %135 ]
  %173 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %172, i64 0, i32 0, i32 0, i32 0
  %174 = bitcast %"class.blink::DummyExceptionStateForTesting"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %174) #10
  %175 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 0
  %176 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %176, align 8
  %177 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %177, align 2
  %178 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 2
  %179 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 5, i32 0, i32 0
  %180 = bitcast %"class.WTF::StringImpl"** %179 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 16, i1 false) #10
  %181 = bitcast i8** %178 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %181, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %175, align 8
  %182 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0
  %183 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %124, %"class.blink::Node"* %173, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %182) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %174) #10
  br label %184

184:                                              ; preds = %171, %119, %18
  ret void
}

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement11deleteTHeadEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTheadTagE, align 8
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %6 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %7 = icmp eq %"class.blink::Node"* %6, null
  br i1 %7, label %50, label %8

8:                                                ; preds = %1, %14
  %9 = phi %"class.blink::Node"* [ %16, %14 ], [ %6, %1 ]
  %10 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 48
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 5, i32 0, i32 0
  %16 = load %"class.blink::Node"*, %"class.blink::Node"** %15, align 8
  %17 = icmp eq %"class.blink::Node"* %16, null
  br i1 %17, label %50, label %8

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %4, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %20, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = bitcast %"class.blink::Node"* %9 to %"class.blink::HTMLElement"*
  %24 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 1, i32 2
  %25 = bitcast %"class.blink::Member"* %24 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %26 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %26, i64 0, i32 3, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, %22
  br i1 %29, label %50, label %37

30:                                               ; preds = %42
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %40, i64 1, i32 2
  %32 = bitcast %"class.blink::Member"* %31 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %33 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %33, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, %22
  br i1 %36, label %48, label %47

37:                                               ; preds = %18, %47
  %38 = phi %"class.blink::Node"* [ %40, %47 ], [ %9, %18 ]
  %39 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 5, i32 0, i32 0
  %40 = load %"class.blink::Node"*, %"class.blink::Node"** %39, align 8
  %41 = icmp eq %"class.blink::Node"* %40, null
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %40, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 48
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %30, label %47

47:                                               ; preds = %42, %30
  br label %37

48:                                               ; preds = %30
  %49 = bitcast %"class.blink::Node"* %40 to %"class.blink::HTMLElement"*
  br label %50

50:                                               ; preds = %14, %37, %1, %18, %48
  %51 = phi %"class.blink::HTMLElement"* [ null, %1 ], [ %49, %48 ], [ %23, %18 ], [ null, %37 ], [ null, %14 ]
  %52 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %53) #10
  %54 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %55, align 8
  %56 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %56, align 2
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %59 = bitcast %"class.WTF::StringImpl"** %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #10
  %60 = bitcast i8** %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %61 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  %62 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %3, %"class.blink::Node"* %52, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %61) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %53) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZNK5blink16HTMLTableElement5tFootEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTfootTagE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = icmp eq %"class.blink::Node"* %4, null
  br i1 %5, label %48, label %6

6:                                                ; preds = %1, %12
  %7 = phi %"class.blink::Node"* [ %14, %12 ], [ %4, %1 ]
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 48
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 5, i32 0, i32 0
  %14 = load %"class.blink::Node"*, %"class.blink::Node"** %13, align 8
  %15 = icmp eq %"class.blink::Node"* %14, null
  br i1 %15, label %48, label %6

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = bitcast %"class.blink::Node"* %7 to %"class.blink::HTMLElement"*
  %22 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 1, i32 2
  %23 = bitcast %"class.blink::Member"* %22 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, %20
  br i1 %27, label %48, label %35

28:                                               ; preds = %40
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 1, i32 2
  %30 = bitcast %"class.blink::Member"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %20
  br i1 %34, label %46, label %45

35:                                               ; preds = %16, %45
  %36 = phi %"class.blink::Node"* [ %38, %45 ], [ %7, %16 ]
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %36, i64 0, i32 5, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %40, %28
  br label %35

46:                                               ; preds = %28
  %47 = bitcast %"class.blink::Node"* %38 to %"class.blink::HTMLElement"*
  br label %48

48:                                               ; preds = %12, %35, %16, %46, %1
  %49 = phi %"class.blink::HTMLElement"* [ null, %1 ], [ %47, %46 ], [ %21, %16 ], [ null, %35 ], [ null, %12 ]
  %50 = bitcast %"class.blink::HTMLElement"* %49 to %"class.blink::HTMLTableSectionElement"*
  ret %"class.blink::HTMLTableSectionElement"* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement8setTFootEPNS_23HTMLTableSectionElementERNS_14ExceptionStateE(%"class.blink::HTMLTableElement"*, %"class.blink::HTMLTableSectionElement"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %5 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %6 = icmp eq %"class.blink::HTMLTableSectionElement"* %1, null
  br i1 %6, label %77, label %7

7:                                                ; preds = %3
  %8 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTfootTagE, align 8
  %9 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %12, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %10, i64 0, i32 3, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %14, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %7
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #10
  br label %138

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %23 = icmp eq %"class.blink::Node"* %22, null
  br i1 %23, label %62, label %24

24:                                               ; preds = %19, %30
  %25 = phi %"class.blink::Node"* [ %32, %30 ], [ %22, %19 ]
  %26 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 48
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 0, i32 5, i32 0, i32 0
  %32 = load %"class.blink::Node"*, %"class.blink::Node"** %31, align 8
  %33 = icmp eq %"class.blink::Node"* %32, null
  br i1 %33, label %62, label %24

34:                                               ; preds = %24
  %35 = bitcast %"class.blink::Node"* %25 to %"class.blink::HTMLElement"*
  %36 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 1, i32 2
  %37 = bitcast %"class.blink::Member"* %36 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %38 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 3, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, %14
  br i1 %41, label %62, label %49

42:                                               ; preds = %54
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %52, i64 1, i32 2
  %44 = bitcast %"class.blink::Member"* %43 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %45 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %45, i64 0, i32 3, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, %14
  br i1 %48, label %60, label %59

49:                                               ; preds = %34, %59
  %50 = phi %"class.blink::Node"* [ %52, %59 ], [ %25, %34 ]
  %51 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %50, i64 0, i32 5, i32 0, i32 0
  %52 = load %"class.blink::Node"*, %"class.blink::Node"** %51, align 8
  %53 = icmp eq %"class.blink::Node"* %52, null
  br i1 %53, label %62, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %52, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 48
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %42, label %59

59:                                               ; preds = %54, %42
  br label %49

60:                                               ; preds = %42
  %61 = bitcast %"class.blink::Node"* %52 to %"class.blink::HTMLElement"*
  br label %62

62:                                               ; preds = %30, %49, %60, %34, %19
  %63 = phi %"class.blink::HTMLElement"* [ null, %19 ], [ %61, %60 ], [ %35, %34 ], [ null, %49 ], [ null, %30 ]
  %64 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.blink::DummyExceptionStateForTesting"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %65) #10
  %66 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %67, align 8
  %68 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %68, align 2
  %69 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 2
  %70 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  %71 = bitcast %"class.WTF::StringImpl"** %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 16, i1 false) #10
  %72 = bitcast i8** %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %73 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0
  %74 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %20, %"class.blink::Node"* %64, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %73) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %65) #10
  %75 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11AppendChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %20, %"class.blink::Node"* %75, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %138

77:                                               ; preds = %3
  %78 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %79 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTfootTagE, align 8
  %80 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %81 = load %"class.blink::Node"*, %"class.blink::Node"** %80, align 8
  %82 = icmp eq %"class.blink::Node"* %81, null
  br i1 %82, label %125, label %83

83:                                               ; preds = %77, %89
  %84 = phi %"class.blink::Node"* [ %91, %89 ], [ %81, %77 ]
  %85 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %84, i64 0, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 48
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %84, i64 0, i32 5, i32 0, i32 0
  %91 = load %"class.blink::Node"*, %"class.blink::Node"** %90, align 8
  %92 = icmp eq %"class.blink::Node"* %91, null
  br i1 %92, label %125, label %83

93:                                               ; preds = %83
  %94 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %79, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %94, align 8
  %96 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %95, i64 0, i32 3, i32 0, i32 0, i32 0
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %98 = bitcast %"class.blink::Node"* %84 to %"class.blink::HTMLElement"*
  %99 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %84, i64 1, i32 2
  %100 = bitcast %"class.blink::Member"* %99 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %101 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %100, align 8
  %102 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %101, i64 0, i32 3, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, %97
  br i1 %104, label %125, label %112

105:                                              ; preds = %117
  %106 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %115, i64 1, i32 2
  %107 = bitcast %"class.blink::Member"* %106 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %108 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %107, align 8
  %109 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %108, i64 0, i32 3, i32 0, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, %97
  br i1 %111, label %123, label %122

112:                                              ; preds = %93, %122
  %113 = phi %"class.blink::Node"* [ %115, %122 ], [ %84, %93 ]
  %114 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %113, i64 0, i32 5, i32 0, i32 0
  %115 = load %"class.blink::Node"*, %"class.blink::Node"** %114, align 8
  %116 = icmp eq %"class.blink::Node"* %115, null
  br i1 %116, label %125, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %115, i64 0, i32 1
  %119 = load i32, i32* %118, align 8
  %120 = and i32 %119, 48
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %105, label %122

122:                                              ; preds = %117, %105
  br label %112

123:                                              ; preds = %105
  %124 = bitcast %"class.blink::Node"* %115 to %"class.blink::HTMLElement"*
  br label %125

125:                                              ; preds = %89, %112, %77, %93, %123
  %126 = phi %"class.blink::HTMLElement"* [ null, %77 ], [ %124, %123 ], [ %98, %93 ], [ null, %112 ], [ null, %89 ]
  %127 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %126, i64 0, i32 0, i32 0, i32 0
  %128 = bitcast %"class.blink::DummyExceptionStateForTesting"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %128) #10
  %129 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 0
  %130 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %130, align 8
  %131 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %131, align 2
  %132 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 1, i32 2
  %133 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0, i32 5, i32 0, i32 0
  %134 = bitcast %"class.WTF::StringImpl"** %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 16, i1 false) #10
  %135 = bitcast i8** %132 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %135, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %129, align 8
  %136 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %5, i64 0, i32 0
  %137 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %78, %"class.blink::Node"* %127, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %136) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %128) #10
  br label %138

138:                                              ; preds = %125, %18, %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement11deleteTFootEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTfootTagE, align 8
  %5 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %6 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %7 = icmp eq %"class.blink::Node"* %6, null
  br i1 %7, label %50, label %8

8:                                                ; preds = %1, %14
  %9 = phi %"class.blink::Node"* [ %16, %14 ], [ %6, %1 ]
  %10 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 48
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 0, i32 5, i32 0, i32 0
  %16 = load %"class.blink::Node"*, %"class.blink::Node"** %15, align 8
  %17 = icmp eq %"class.blink::Node"* %16, null
  br i1 %17, label %50, label %8

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %4, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %20, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = bitcast %"class.blink::Node"* %9 to %"class.blink::HTMLElement"*
  %24 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %9, i64 1, i32 2
  %25 = bitcast %"class.blink::Member"* %24 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %26 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %26, i64 0, i32 3, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, %22
  br i1 %29, label %50, label %37

30:                                               ; preds = %42
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %40, i64 1, i32 2
  %32 = bitcast %"class.blink::Member"* %31 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %33 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %33, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, %22
  br i1 %36, label %48, label %47

37:                                               ; preds = %18, %47
  %38 = phi %"class.blink::Node"* [ %40, %47 ], [ %9, %18 ]
  %39 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 5, i32 0, i32 0
  %40 = load %"class.blink::Node"*, %"class.blink::Node"** %39, align 8
  %41 = icmp eq %"class.blink::Node"* %40, null
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %40, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 48
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %30, label %47

47:                                               ; preds = %42, %30
  br label %37

48:                                               ; preds = %30
  %49 = bitcast %"class.blink::Node"* %40 to %"class.blink::HTMLElement"*
  br label %50

50:                                               ; preds = %14, %37, %1, %18, %48
  %51 = phi %"class.blink::HTMLElement"* [ null, %1 ], [ %49, %48 ], [ %23, %18 ], [ null, %37 ], [ null, %14 ]
  %52 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %53) #10
  %54 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %55, align 8
  %56 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %56, align 2
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %59 = bitcast %"class.WTF::StringImpl"** %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #10
  %60 = bitcast i8** %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %61 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  %62 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %3, %"class.blink::Node"* %52, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %61) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %53) #10
  ret void
}

declare %"class.blink::Node"* @_ZN5blink13ContainerNode11AppendChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZN5blink16HTMLTableElement11createTHeadEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTheadTagE, align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %50, label %7

7:                                                ; preds = %1, %13
  %8 = phi %"class.blink::Node"* [ %15, %13 ], [ %5, %1 ]
  %9 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 48
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 5, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %50, label %7

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %3, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %19, i64 0, i32 3, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 1, i32 2
  %23 = bitcast %"class.blink::Member"* %22 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, %21
  br i1 %27, label %46, label %35

28:                                               ; preds = %40
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 1, i32 2
  %30 = bitcast %"class.blink::Member"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %21
  br i1 %34, label %46, label %45

35:                                               ; preds = %17, %45
  %36 = phi %"class.blink::Node"* [ %38, %45 ], [ %8, %17 ]
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %36, i64 0, i32 5, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %40, %28
  br label %35

46:                                               ; preds = %28, %17
  %47 = phi %"class.blink::Node"* [ %8, %17 ], [ %38, %28 ]
  %48 = bitcast %"class.blink::Node"* %47 to %"class.blink::HTMLTableSectionElement"*
  %49 = icmp eq %"class.blink::Node"* %47, null
  br i1 %49, label %50, label %65

50:                                               ; preds = %13, %35, %1, %46
  %51 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %52 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %52, i64 0, i32 2, i32 0, i32 0
  %54 = load %"class.blink::Document"*, %"class.blink::Document"** %53, align 8
  %55 = tail call %"class.blink::HTMLTableSectionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8) %3, %"class.blink::Document"* dereferenceable(2848) %54) #10
  %56 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %56) #10
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %58, align 8
  %59 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %59, align 2
  %60 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %61 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %62 = bitcast %"class.WTF::StringImpl"** %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #10
  %63 = bitcast i8** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %64 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  call void @_ZN5blink16HTMLTableElement8setTHeadEPNS_23HTMLTableSectionElementERNS_14ExceptionStateE(%"class.blink::HTMLTableElement"* %0, %"class.blink::HTMLTableSectionElement"* %55, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %64)
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %56) #10
  br label %65

65:                                               ; preds = %46, %50
  %66 = phi %"class.blink::HTMLTableSectionElement"* [ %55, %50 ], [ %48, %46 ]
  ret %"class.blink::HTMLTableSectionElement"* %66
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0
  tail call void @_ZN5blink14ExceptionState14ClearExceptionEv(%"class.blink::ExceptionState"* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %9 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %10 = load i64*, i64** %9, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0, i32 3
  %14 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %13, align 8
  %15 = bitcast %"class.v8::Isolate"* %14 to %"class.v8::internal::Isolate"*
  %16 = load i64, i64* %10, align 8
  %17 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %15, i64 %16) #10
  %18 = tail call zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"* %14) #10
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = bitcast i64* %17 to %"class.v8::Value"*
  %21 = tail call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %14, %"class.v8::Value"* %20) #10
  br label %22

22:                                               ; preds = %19, %12, %8
  %23 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %39, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %35

33:                                               ; preds = %26
  %34 = add i32 %32, -1
  store i32 %34, i32* %31, align 4
  br label %35

35:                                               ; preds = %33, %26
  %36 = phi i32 [ %34, %33 ], [ %32, %26 ]
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %39

39:                                               ; preds = %22, %35, %38
  ret void
}

declare %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZN5blink16HTMLTableElement11createTFootEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTfootTagE, align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %50, label %7

7:                                                ; preds = %1, %13
  %8 = phi %"class.blink::Node"* [ %15, %13 ], [ %5, %1 ]
  %9 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 48
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 5, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %50, label %7

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %3, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %19, i64 0, i32 3, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 1, i32 2
  %23 = bitcast %"class.blink::Member"* %22 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, %21
  br i1 %27, label %46, label %35

28:                                               ; preds = %40
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 1, i32 2
  %30 = bitcast %"class.blink::Member"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %21
  br i1 %34, label %46, label %45

35:                                               ; preds = %17, %45
  %36 = phi %"class.blink::Node"* [ %38, %45 ], [ %8, %17 ]
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %36, i64 0, i32 5, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %40, %28
  br label %35

46:                                               ; preds = %28, %17
  %47 = phi %"class.blink::Node"* [ %8, %17 ], [ %38, %28 ]
  %48 = bitcast %"class.blink::Node"* %47 to %"class.blink::HTMLTableSectionElement"*
  %49 = icmp eq %"class.blink::Node"* %47, null
  br i1 %49, label %50, label %65

50:                                               ; preds = %13, %35, %1, %46
  %51 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %52 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %52, i64 0, i32 2, i32 0, i32 0
  %54 = load %"class.blink::Document"*, %"class.blink::Document"** %53, align 8
  %55 = tail call %"class.blink::HTMLTableSectionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8) %3, %"class.blink::Document"* dereferenceable(2848) %54) #10
  %56 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %56) #10
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %58, align 8
  %59 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %59, align 2
  %60 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %61 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %62 = bitcast %"class.WTF::StringImpl"** %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #10
  %63 = bitcast i8** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %64 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  call void @_ZN5blink16HTMLTableElement8setTFootEPNS_23HTMLTableSectionElementERNS_14ExceptionStateE(%"class.blink::HTMLTableElement"* %0, %"class.blink::HTMLTableSectionElement"* %55, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %64)
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %56) #10
  br label %65

65:                                               ; preds = %46, %50
  %66 = phi %"class.blink::HTMLTableSectionElement"* [ %55, %50 ], [ %48, %46 ]
  ret %"class.blink::HTMLTableSectionElement"* %66
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZN5blink16HTMLTableElement11createTBodyEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTbodyTagE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %4, i64 0, i32 2, i32 0, i32 0
  %6 = load %"class.blink::Document"*, %"class.blink::Document"** %5, align 8
  %7 = tail call %"class.blink::HTMLTableSectionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8) %2, %"class.blink::Document"* dereferenceable(2848) %6) #10
  %8 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load %"class.blink::Node"*, %"class.blink::Node"** %8, align 8
  %10 = icmp eq %"class.blink::Node"* %9, null
  br i1 %10, label %100, label %11

11:                                               ; preds = %1, %17
  %12 = phi %"class.blink::Node"* [ %19, %17 ], [ %9, %1 ]
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %12, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 48
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %12, i64 0, i32 4, i32 0, i32 0
  %19 = load %"class.blink::Node"*, %"class.blink::Node"** %18, align 8
  %20 = icmp eq %"class.blink::Node"* %19, null
  br i1 %20, label %100, label %11

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %2, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %23, i64 0, i32 3, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %12, i64 1, i32 2
  %27 = bitcast %"class.blink::Member"* %26 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %28 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %28, i64 0, i32 3, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, %25
  br i1 %31, label %50, label %39

32:                                               ; preds = %44
  %33 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %42, i64 1, i32 2
  %34 = bitcast %"class.blink::Member"* %33 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %35 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %35, i64 0, i32 3, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, %25
  br i1 %38, label %50, label %49

39:                                               ; preds = %21, %49
  %40 = phi %"class.blink::Node"* [ %42, %49 ], [ %12, %21 ]
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %40, i64 0, i32 4, i32 0, i32 0
  %42 = load %"class.blink::Node"*, %"class.blink::Node"** %41, align 8
  %43 = icmp eq %"class.blink::Node"* %42, null
  br i1 %43, label %100, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %42, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 48
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %32, label %49

49:                                               ; preds = %44, %32
  br label %39

50:                                               ; preds = %32, %21
  %51 = phi %"class.blink::Node"* [ %12, %21 ], [ %42, %32 ]
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %100, label %53

53:                                               ; preds = %50
  br i1 %10, label %96, label %54

54:                                               ; preds = %53, %60
  %55 = phi %"class.blink::Node"* [ %62, %60 ], [ %9, %53 ]
  %56 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %55, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = and i32 %57, 48
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %55, i64 0, i32 4, i32 0, i32 0
  %62 = load %"class.blink::Node"*, %"class.blink::Node"** %61, align 8
  %63 = icmp eq %"class.blink::Node"* %62, null
  br i1 %63, label %96, label %54

64:                                               ; preds = %54
  %65 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %2, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %66, i64 0, i32 3, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = bitcast %"class.blink::Node"* %55 to %"class.blink::HTMLElement"*
  %70 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %55, i64 1, i32 2
  %71 = bitcast %"class.blink::Member"* %70 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %72 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %71, align 8
  %73 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %72, i64 0, i32 3, i32 0, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, %68
  br i1 %75, label %96, label %83

76:                                               ; preds = %88
  %77 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %86, i64 1, i32 2
  %78 = bitcast %"class.blink::Member"* %77 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %79 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %78, align 8
  %80 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %79, i64 0, i32 3, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, %68
  br i1 %82, label %94, label %93

83:                                               ; preds = %64, %93
  %84 = phi %"class.blink::Node"* [ %86, %93 ], [ %55, %64 ]
  %85 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %84, i64 0, i32 4, i32 0, i32 0
  %86 = load %"class.blink::Node"*, %"class.blink::Node"** %85, align 8
  %87 = icmp eq %"class.blink::Node"* %86, null
  br i1 %87, label %96, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %86, i64 0, i32 1
  %90 = load i32, i32* %89, align 8
  %91 = and i32 %90, 48
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %76, label %93

93:                                               ; preds = %88, %76
  br label %83

94:                                               ; preds = %76
  %95 = bitcast %"class.blink::Node"* %86 to %"class.blink::HTMLElement"*
  br label %96

96:                                               ; preds = %60, %83, %53, %64, %94
  %97 = phi %"class.blink::HTMLElement"* [ null, %53 ], [ %95, %94 ], [ %69, %64 ], [ null, %83 ], [ null, %60 ]
  %98 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %97, i64 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %99 = load %"class.blink::Node"*, %"class.blink::Node"** %98, align 8
  br label %100

100:                                              ; preds = %17, %39, %1, %50, %96
  %101 = phi %"class.blink::Node"* [ %99, %96 ], [ null, %50 ], [ null, %1 ], [ null, %39 ], [ null, %17 ]
  %102 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %103 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = tail call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_(%"class.blink::ContainerNode"* %102, %"class.blink::Node"* %103, %"class.blink::Node"* %101) #10
  ret %"class.blink::HTMLTableSectionElement"* %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::HTMLTableSectionElement"* @_ZNK5blink16HTMLTableElement8LastBodyEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTbodyTagE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = icmp eq %"class.blink::Node"* %4, null
  br i1 %5, label %48, label %6

6:                                                ; preds = %1, %12
  %7 = phi %"class.blink::Node"* [ %14, %12 ], [ %4, %1 ]
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 48
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 4, i32 0, i32 0
  %14 = load %"class.blink::Node"*, %"class.blink::Node"** %13, align 8
  %15 = icmp eq %"class.blink::Node"* %14, null
  br i1 %15, label %48, label %6

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = bitcast %"class.blink::Node"* %7 to %"class.blink::HTMLElement"*
  %22 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 1, i32 2
  %23 = bitcast %"class.blink::Member"* %22 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %24 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, %20
  br i1 %27, label %48, label %35

28:                                               ; preds = %40
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 1, i32 2
  %30 = bitcast %"class.blink::Member"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %20
  br i1 %34, label %46, label %45

35:                                               ; preds = %16, %45
  %36 = phi %"class.blink::Node"* [ %38, %45 ], [ %7, %16 ]
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %36, i64 0, i32 4, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 48
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %40, %28
  br label %35

46:                                               ; preds = %28
  %47 = bitcast %"class.blink::Node"* %38 to %"class.blink::HTMLElement"*
  br label %48

48:                                               ; preds = %12, %35, %16, %46, %1
  %49 = phi %"class.blink::HTMLElement"* [ null, %1 ], [ %47, %46 ], [ %21, %16 ], [ null, %35 ], [ null, %12 ]
  %50 = bitcast %"class.blink::HTMLElement"* %49 to %"class.blink::HTMLTableSectionElement"*
  ret %"class.blink::HTMLTableSectionElement"* %50
}

declare %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::Node"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableCaptionElement"* @_ZN5blink16HTMLTableElement13createCaptionEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %3 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %32, label %7

7:                                                ; preds = %1
  %8 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %9 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %8, i64 0, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %26, %7
  %11 = phi %"class.blink::Node"* [ %5, %7 ], [ %28, %26 ]
  %12 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 48
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %10
  %17 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %18 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 1, i32 2
  %19 = bitcast %"class.blink::Member"* %18 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %20, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %17, i64 0, i32 3, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %22, %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %16, %10
  %27 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 5, i32 0, i32 0
  %28 = load %"class.blink::Node"*, %"class.blink::Node"** %27, align 8
  %29 = icmp eq %"class.blink::Node"* %28, null
  br i1 %29, label %32, label %10

30:                                               ; preds = %16
  %31 = bitcast %"class.blink::Node"* %11 to %"class.blink::HTMLTableCaptionElement"*
  br label %91

32:                                               ; preds = %26, %1
  %33 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %34 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %34, i64 0, i32 2, i32 0, i32 0
  %36 = load %"class.blink::Document"*, %"class.blink::Document"** %35, align 8
  %37 = tail call %"class.blink::HTMLTableCaptionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableCaptionElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848) %36) #10
  %38 = bitcast %"class.blink::DummyExceptionStateForTesting"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %38) #10
  %39 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %40, align 8
  %41 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %41, align 2
  %42 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0, i32 1, i32 2
  %43 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0, i32 5, i32 0, i32 0
  %44 = bitcast %"class.WTF::StringImpl"** %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 16, i1 false) #10
  %45 = bitcast i8** %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %39, align 8
  %46 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %3, i64 0, i32 0
  %47 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %48 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %49 = icmp eq %"class.blink::Node"* %48, null
  br i1 %49, label %73, label %50

50:                                               ; preds = %32
  %51 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kCaptionTagE, align 8
  %52 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %51, i64 0, i32 0, i32 0, i32 0
  br label %53

53:                                               ; preds = %69, %50
  %54 = phi %"class.blink::Node"* [ %48, %50 ], [ %71, %69 ]
  %55 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %54, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 48
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %69

59:                                               ; preds = %53
  %60 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %52, align 8
  %61 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %54, i64 1, i32 2
  %62 = bitcast %"class.blink::Member"* %61 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %63 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %63, i64 0, i32 3, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %60, i64 0, i32 3, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %65, %67
  br i1 %68, label %73, label %69

69:                                               ; preds = %59, %53
  %70 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %54, i64 0, i32 5, i32 0, i32 0
  %71 = load %"class.blink::Node"*, %"class.blink::Node"** %70, align 8
  %72 = icmp eq %"class.blink::Node"* %71, null
  br i1 %72, label %73, label %53

73:                                               ; preds = %69, %59, %32
  %74 = phi %"class.blink::Node"* [ null, %32 ], [ null, %69 ], [ %54, %59 ]
  %75 = bitcast %"class.blink::DummyExceptionStateForTesting"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %75) #10
  %76 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %77, align 8
  %78 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %78, align 2
  %79 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 1, i32 2
  %80 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  %81 = bitcast %"class.WTF::StringImpl"** %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 16, i1 false) #10
  %82 = bitcast i8** %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 36, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %76, align 8
  %83 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %2, i64 0, i32 0
  %84 = call %"class.blink::Node"* @_ZN5blink13ContainerNode11RemoveChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %47, %"class.blink::Node"* %74, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %83) #10
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %75) #10
  %85 = icmp eq %"class.blink::HTMLTableCaptionElement"* %37, null
  br i1 %85, label %90, label %86

86:                                               ; preds = %73
  %87 = getelementptr inbounds %"class.blink::HTMLTableCaptionElement", %"class.blink::HTMLTableCaptionElement"* %37, i64 0, i32 0, i32 0, i32 0, i32 0
  %88 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %89 = call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %47, %"class.blink::Node"* %87, %"class.blink::Node"* %88, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %46) #10
  br label %90

90:                                               ; preds = %73, %86
  call void @_ZN5blink29DummyExceptionStateForTestingD2Ev(%"class.blink::DummyExceptionStateForTesting"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %38) #10
  br label %91

91:                                               ; preds = %30, %90
  %92 = phi %"class.blink::HTMLTableCaptionElement"* [ %37, %90 ], [ %31, %30 ]
  ret %"class.blink::HTMLTableCaptionElement"* %92
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableRowElement"* @_ZN5blink16HTMLTableElement9insertRowEiRNS_14ExceptionStateE(%"class.blink::HTMLTableElement"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringAppend.615", align 8
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %7 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::StringAppend.614", align 8
  %12 = alloca %"class.WTF::StringAppend.615", align 8
  %13 = alloca %"class.WTF::StringAppend", align 8
  %14 = icmp slt i32 %1, -1
  br i1 %14, label %15, label %212

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 12
  %20 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 2
  %21 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 3
  %22 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 13
  %23 = sub i32 0, %1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 32, i1 false) #10
  store i8* %19, i8** %20, align 8
  %24 = urem i32 %23, 10
  %25 = udiv i32 %23, 10
  %26 = trunc i32 %24 to i8
  %27 = or i8 %26, 48
  store i8 %27, i8* %19, align 4
  %28 = icmp ugt i32 %23, 9
  br i1 %28, label %29, label %45

29:                                               ; preds = %15
  %30 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 11
  store i8* %30, i8** %20, align 8
  %31 = urem i32 %25, 10
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, 48
  store i8 %33, i8* %30, align 1
  %34 = icmp ugt i32 %23, 99
  br i1 %34, label %35, label %45

35:                                               ; preds = %29, %35
  %36 = phi i8* [ %44, %35 ], [ %30, %29 ]
  %37 = phi i32 [ %38, %35 ], [ %25, %29 ]
  %38 = udiv i32 %37, 10
  %39 = getelementptr inbounds i8, i8* %36, i64 -1
  store i8* %39, i8** %20, align 8
  %40 = urem i32 %38, 10
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, 48
  store i8 %42, i8* %39, align 1
  %43 = icmp ugt i32 %37, 99
  %44 = load i8*, i8** %20, align 8
  br i1 %43, label %35, label %45

45:                                               ; preds = %35, %29, %15
  %46 = phi i8* [ %30, %29 ], [ %19, %15 ], [ %44, %35 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  store i8* %47, i8** %20, align 8
  store i8 45, i8* %47, align 1
  %48 = bitcast i8** %20 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = ptrtoint i8* %22 to i64
  %51 = sub i64 %50, %49
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %21, align 8
  %53 = inttoptr i64 %49 to i8*
  %54 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %53, i32 %52) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #10
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %131, label %56

56:                                               ; preds = %45
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %73

63:                                               ; preds = %56
  %64 = zext i32 %62 to i33
  %65 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #10
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !2

70:                                               ; preds = %63
  call void @llvm.trap() #10
  unreachable

71:                                               ; preds = %63
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %61, align 4
  br label %73

73:                                               ; preds = %71, %56
  %74 = phi i32 [ %72, %71 ], [ %62, %56 ]
  %75 = load atomic i32, i32* %57 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %88

78:                                               ; preds = %73
  %79 = zext i32 %74 to i33
  %80 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %79, i33 1) #10
  %81 = extractvalue { i33, i1 } %80, 1
  %82 = extractvalue { i33, i1 } %80, 0
  %83 = icmp slt i33 %82, 0
  %84 = or i1 %81, %83
  br i1 %84, label %85, label %86, !prof !2

85:                                               ; preds = %78
  call void @llvm.trap() #10
  unreachable

86:                                               ; preds = %78
  %87 = trunc i33 %82 to i32
  store i32 %87, i32* %61, align 4
  br label %88

88:                                               ; preds = %86, %73
  %89 = phi i32 [ %87, %86 ], [ %74, %73 ]
  %90 = load atomic i32, i32* %57 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = add i32 %89, -1
  store i32 %94, i32* %61, align 4
  br label %95

95:                                               ; preds = %93, %88
  %96 = phi i32 [ %94, %93 ], [ %89, %88 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %99

99:                                               ; preds = %95, %98
  %100 = load atomic i32, i32* %57 monotonic, align 4, !noalias !3
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = load i32, i32* %61, align 4
  br i1 %102, label %104, label %114

104:                                              ; preds = %99
  %105 = zext i32 %103 to i33
  %106 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %105, i33 1) #10
  %107 = extractvalue { i33, i1 } %106, 1
  %108 = extractvalue { i33, i1 } %106, 0
  %109 = icmp slt i33 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %111, label %112, !prof !2

111:                                              ; preds = %104
  call void @llvm.trap() #10, !noalias !3
  unreachable

112:                                              ; preds = %104
  %113 = trunc i33 %108 to i32
  store i32 %113, i32* %61, align 4, !noalias !3
  br label %114

114:                                              ; preds = %99, %112
  %115 = phi i32 [ %113, %112 ], [ %103, %99 ]
  %116 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %116, align 8, !alias.scope !3
  %117 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %117, align 8, !alias.scope !3
  %118 = load atomic i32, i32* %57 monotonic, align 4, !noalias !3
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %135

121:                                              ; preds = %114
  %122 = zext i32 %115 to i33
  %123 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %122, i33 1) #10
  %124 = extractvalue { i33, i1 } %123, 1
  %125 = extractvalue { i33, i1 } %123, 0
  %126 = icmp slt i33 %125, 0
  %127 = or i1 %124, %126
  br i1 %127, label %128, label %129, !prof !2

128:                                              ; preds = %121
  call void @llvm.trap() #10, !noalias !3
  unreachable

129:                                              ; preds = %121
  %130 = trunc i33 %125 to i32
  store i32 %130, i32* %61, align 4, !noalias !3
  br label %135

131:                                              ; preds = %45
  %132 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %132, align 8, !alias.scope !3
  %133 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %133, align 8, !alias.scope !3
  %134 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8** %134, align 8, !alias.scope !3
  br label %147

135:                                              ; preds = %129, %114
  %136 = phi i32 [ %130, %129 ], [ %115, %114 ]
  %137 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8** %137, align 8, !alias.scope !3
  %138 = load atomic i32, i32* %57 monotonic, align 4, !noalias !3
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %143

141:                                              ; preds = %135
  %142 = add i32 %136, -1
  store i32 %142, i32* %61, align 4, !noalias !3
  br label %143

143:                                              ; preds = %141, %135
  %144 = phi i32 [ %142, %141 ], [ %136, %135 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10, !noalias !3
  br label %147

147:                                              ; preds = %131, %143, %146
  %148 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %9)
  %149 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %148, %"class.WTF::StringImpl"** %149, align 8
  %150 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %151 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %150, align 8
  %152 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %151, align 8
  call void %152(%"class.blink::ExceptionState"* %2, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %8) #10
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %149, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %168, label %155

155:                                              ; preds = %147
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  br i1 %159, label %162, label %164

162:                                              ; preds = %155
  %163 = add i32 %161, -1
  store i32 %163, i32* %160, align 4
  br label %164

164:                                              ; preds = %162, %155
  %165 = phi i32 [ %163, %162 ], [ %161, %155 ]
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %164
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #10
  br label %168

168:                                              ; preds = %147, %164, %167
  %169 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #10
  br label %185

185:                                              ; preds = %168, %181, %184
  br i1 %55, label %211, label %186

186:                                              ; preds = %185
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %188 = load atomic i32, i32* %187 monotonic, align 4
  %189 = and i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  br i1 %190, label %193, label %195

193:                                              ; preds = %186
  %194 = add i32 %192, -1
  store i32 %194, i32* %191, align 4
  br label %195

195:                                              ; preds = %193, %186
  %196 = phi i32 [ %194, %193 ], [ %192, %186 ]
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %195
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  %199 = load i32, i32* %191, align 4
  br label %200

200:                                              ; preds = %195, %198
  %201 = phi i32 [ %196, %195 ], [ %199, %198 ]
  %202 = load atomic i32, i32* %187 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %207

205:                                              ; preds = %200
  %206 = add i32 %201, -1
  store i32 %206, i32* %191, align 4
  br label %207

207:                                              ; preds = %205, %200
  %208 = phi i32 [ %206, %205 ], [ %201, %200 ]
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %211

210:                                              ; preds = %207
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %211

211:                                              ; preds = %185, %207, %210
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %674

212:                                              ; preds = %3
  %213 = icmp eq i32 %1, -1
  br i1 %213, label %214, label %216

214:                                              ; preds = %212
  %215 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection7LastRowERNS_16HTMLTableElementE(%"class.blink::HTMLTableElement"* dereferenceable(128) %0) #10
  br label %591

216:                                              ; preds = %212, %587
  %217 = phi %"class.blink::HTMLTableRowElement"* [ %219, %587 ], [ null, %212 ]
  %218 = phi i32 [ %588, %587 ], [ 0, %212 ]
  %219 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection8RowAfterERNS_16HTMLTableElementEPNS_19HTMLTableRowElementE(%"class.blink::HTMLTableElement"* dereferenceable(128) %0, %"class.blink::HTMLTableRowElement"* %217) #10
  %220 = icmp eq %"class.blink::HTMLTableRowElement"* %219, null
  br i1 %220, label %221, label %587

221:                                              ; preds = %216
  %222 = icmp eq i32 %218, %1
  br i1 %222, label %591, label %223

223:                                              ; preds = %221
  %224 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #10
  %225 = bitcast %"class.WTF::StringAppend.614"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %225) #10
  %226 = bitcast %"class.WTF::StringAppend.615"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %226) #10
  %227 = bitcast %"class.WTF::StringAppend"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %227) #10
  %228 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %228) #10
  %229 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 12
  %230 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 2
  %231 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 3
  %232 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %228, i8 -86, i64 32, i1 false) #10
  store i8* %229, i8** %230, align 8
  %233 = urem i32 %1, 10
  %234 = udiv i32 %1, 10
  %235 = trunc i32 %233 to i8
  %236 = or i8 %235, 48
  store i8 %236, i8* %229, align 4
  %237 = icmp ugt i32 %1, 9
  br i1 %237, label %238, label %260

238:                                              ; preds = %223
  %239 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 11
  store i8* %239, i8** %230, align 8
  %240 = urem i32 %234, 10
  %241 = trunc i32 %240 to i8
  %242 = or i8 %241, 48
  store i8 %242, i8* %239, align 1
  %243 = icmp ugt i32 %1, 99
  br i1 %243, label %244, label %260

244:                                              ; preds = %238
  %245 = udiv i32 %1, 100
  %246 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 10
  store i8* %246, i8** %230, align 8
  %247 = urem i32 %245, 10
  %248 = trunc i32 %247 to i8
  %249 = or i8 %248, 48
  store i8 %249, i8* %246, align 2
  %250 = icmp ugt i32 %1, 999
  br i1 %250, label %251, label %260

251:                                              ; preds = %244, %251
  %252 = phi i32 [ %254, %251 ], [ %245, %244 ]
  %253 = load i8*, i8** %230, align 8
  %254 = udiv i32 %252, 10
  %255 = getelementptr inbounds i8, i8* %253, i64 -1
  store i8* %255, i8** %230, align 8
  %256 = urem i32 %254, 10
  %257 = trunc i32 %256 to i8
  %258 = or i8 %257, 48
  store i8 %258, i8* %255, align 1
  %259 = icmp ugt i32 %252, 99
  br i1 %259, label %251, label %260

260:                                              ; preds = %251, %244, %238, %223
  %261 = bitcast i8** %230 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = ptrtoint i8* %232 to i64
  %264 = sub i64 %263, %262
  %265 = trunc i64 %264 to i32
  store i32 %265, i32* %231, align 8
  %266 = inttoptr i64 %262 to i8*
  %267 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %266, i32 %265) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %228) #10
  %268 = icmp eq %"class.WTF::StringImpl"* %267, null
  br i1 %268, label %344, label %269

269:                                              ; preds = %260
  %270 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %271 = load atomic i32, i32* %270 monotonic, align 4
  %272 = and i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 0
  %275 = load i32, i32* %274, align 4
  br i1 %273, label %276, label %286

276:                                              ; preds = %269
  %277 = zext i32 %275 to i33
  %278 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %277, i33 1) #10
  %279 = extractvalue { i33, i1 } %278, 1
  %280 = extractvalue { i33, i1 } %278, 0
  %281 = icmp slt i33 %280, 0
  %282 = or i1 %279, %281
  br i1 %282, label %283, label %284, !prof !2

283:                                              ; preds = %276
  call void @llvm.trap() #10
  unreachable

284:                                              ; preds = %276
  %285 = trunc i33 %280 to i32
  store i32 %285, i32* %274, align 4
  br label %286

286:                                              ; preds = %284, %269
  %287 = phi i32 [ %285, %284 ], [ %275, %269 ]
  %288 = load atomic i32, i32* %270 monotonic, align 4
  %289 = and i32 %288, 2
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %301

291:                                              ; preds = %286
  %292 = zext i32 %287 to i33
  %293 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %292, i33 1) #10
  %294 = extractvalue { i33, i1 } %293, 1
  %295 = extractvalue { i33, i1 } %293, 0
  %296 = icmp slt i33 %295, 0
  %297 = or i1 %294, %296
  br i1 %297, label %298, label %299, !prof !2

298:                                              ; preds = %291
  call void @llvm.trap() #10
  unreachable

299:                                              ; preds = %291
  %300 = trunc i33 %295 to i32
  store i32 %300, i32* %274, align 4
  br label %301

301:                                              ; preds = %299, %286
  %302 = phi i32 [ %300, %299 ], [ %287, %286 ]
  %303 = load atomic i32, i32* %270 monotonic, align 4
  %304 = and i32 %303, 2
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %308

306:                                              ; preds = %301
  %307 = add i32 %302, -1
  store i32 %307, i32* %274, align 4
  br label %308

308:                                              ; preds = %306, %301
  %309 = phi i32 [ %307, %306 ], [ %302, %301 ]
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %312

311:                                              ; preds = %308
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #10
  br label %312

312:                                              ; preds = %308, %311
  %313 = load atomic i32, i32* %270 monotonic, align 4, !noalias !6
  %314 = and i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = load i32, i32* %274, align 4
  br i1 %315, label %317, label %327

317:                                              ; preds = %312
  %318 = zext i32 %316 to i33
  %319 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %318, i33 1) #10
  %320 = extractvalue { i33, i1 } %319, 1
  %321 = extractvalue { i33, i1 } %319, 0
  %322 = icmp slt i33 %321, 0
  %323 = or i1 %320, %322
  br i1 %323, label %324, label %325, !prof !2

324:                                              ; preds = %317
  call void @llvm.trap() #10, !noalias !6
  unreachable

325:                                              ; preds = %317
  %326 = trunc i33 %321 to i32
  store i32 %326, i32* %274, align 4, !noalias !6
  br label %327

327:                                              ; preds = %312, %325
  %328 = phi i32 [ %326, %325 ], [ %316, %312 ]
  %329 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %329, align 8, !alias.scope !6
  %330 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %267, %"class.WTF::StringImpl"** %330, align 8, !alias.scope !6
  %331 = load atomic i32, i32* %270 monotonic, align 4, !noalias !6
  %332 = and i32 %331, 2
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %348

334:                                              ; preds = %327
  %335 = zext i32 %328 to i33
  %336 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %335, i33 1) #10
  %337 = extractvalue { i33, i1 } %336, 1
  %338 = extractvalue { i33, i1 } %336, 0
  %339 = icmp slt i33 %338, 0
  %340 = or i1 %337, %339
  br i1 %340, label %341, label %342, !prof !2

341:                                              ; preds = %334
  call void @llvm.trap() #10, !noalias !6
  unreachable

342:                                              ; preds = %334
  %343 = trunc i33 %338 to i32
  store i32 %343, i32* %274, align 4, !noalias !6
  br label %348

344:                                              ; preds = %260
  %345 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %345, align 8, !alias.scope !6
  %346 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %346, align 8, !alias.scope !6
  %347 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i64 0, i64 0), i8** %347, align 8, !alias.scope !6
  br label %360

348:                                              ; preds = %342, %327
  %349 = phi i32 [ %343, %342 ], [ %328, %327 ]
  %350 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i64 0, i64 0), i8** %350, align 8, !alias.scope !6
  %351 = load atomic i32, i32* %270 monotonic, align 4, !noalias !6
  %352 = and i32 %351, 2
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %356

354:                                              ; preds = %348
  %355 = add i32 %349, -1
  store i32 %355, i32* %274, align 4, !noalias !6
  br label %356

356:                                              ; preds = %354, %348
  %357 = phi i32 [ %355, %354 ], [ %349, %348 ]
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %360

359:                                              ; preds = %356
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #10, !noalias !6
  br label %360

360:                                              ; preds = %344, %356, %359
  %361 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %361) #10
  %362 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  %363 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %364 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %365 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %361, i8 -86, i64 32, i1 false) #10
  store i8* %362, i8** %363, align 8
  %366 = urem i32 %218, 10
  %367 = udiv i32 %218, 10
  %368 = trunc i32 %366 to i8
  %369 = or i8 %368, 48
  store i8 %369, i8* %362, align 4
  %370 = icmp ugt i32 %218, 9
  %371 = ptrtoint i8* %362 to i64
  br i1 %370, label %372, label %398

372:                                              ; preds = %360
  %373 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  store i8* %373, i8** %363, align 8
  %374 = urem i32 %367, 10
  %375 = trunc i32 %374 to i8
  %376 = or i8 %375, 48
  store i8 %376, i8* %373, align 1
  %377 = icmp ugt i32 %218, 99
  %378 = ptrtoint i8* %373 to i64
  br i1 %377, label %379, label %398

379:                                              ; preds = %372
  %380 = udiv i32 %218, 100
  %381 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  store i8* %381, i8** %363, align 8
  %382 = urem i32 %380, 10
  %383 = trunc i32 %382 to i8
  %384 = or i8 %383, 48
  store i8 %384, i8* %381, align 2
  %385 = icmp ugt i32 %218, 999
  br i1 %385, label %386, label %395

386:                                              ; preds = %379, %386
  %387 = phi i32 [ %389, %386 ], [ %380, %379 ]
  %388 = load i8*, i8** %363, align 8
  %389 = udiv i32 %387, 10
  %390 = getelementptr inbounds i8, i8* %388, i64 -1
  store i8* %390, i8** %363, align 8
  %391 = urem i32 %389, 10
  %392 = trunc i32 %391 to i8
  %393 = or i8 %392, 48
  store i8 %393, i8* %390, align 1
  %394 = icmp ugt i32 %387, 99
  br i1 %394, label %386, label %395

395:                                              ; preds = %386, %379
  %396 = bitcast i8** %363 to i64*
  %397 = load i64, i64* %396, align 8
  br label %398

398:                                              ; preds = %395, %372, %360
  %399 = phi i64 [ %397, %395 ], [ %378, %372 ], [ %371, %360 ]
  %400 = ptrtoint i8* %365 to i64
  %401 = sub i64 %400, %399
  %402 = trunc i64 %401 to i32
  store i32 %402, i32* %364, align 8
  %403 = inttoptr i64 %399 to i8*
  %404 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %403, i32 %402) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %361) #10
  call void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.615"* nonnull sret %12, %"class.WTF::StringAppend"* nonnull dereferenceable(24) %13, %"class.WTF::StringImpl"* %404)
  %405 = bitcast %"class.WTF::StringAppend.615"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %405)
  %406 = bitcast %"class.WTF::StringAppend.615"* %12 to i64*
  %407 = load i64, i64* %406, align 8, !noalias !9
  %408 = bitcast %"class.WTF::StringAppend.615"* %4 to i64*
  store i64 %407, i64* %408, align 8, !noalias !9
  %409 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %409, align 8, !noalias !9
  %411 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %410, %"class.WTF::StringImpl"** %411, align 8, !noalias !9
  %412 = icmp eq %"class.WTF::StringImpl"* %410, null
  br i1 %412, label %430, label %413

413:                                              ; preds = %398
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = load atomic i32, i32* %414 monotonic, align 4
  %416 = and i32 %415, 2
  %417 = icmp eq i32 %416, 0
  br i1 %417, label %418, label %430

418:                                              ; preds = %413
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i33
  %422 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %421, i33 1) #10
  %423 = extractvalue { i33, i1 } %422, 1
  %424 = extractvalue { i33, i1 } %422, 0
  %425 = icmp slt i33 %424, 0
  %426 = or i1 %423, %425
  br i1 %426, label %427, label %428, !prof !2

427:                                              ; preds = %418
  call void @llvm.trap() #10
  unreachable

428:                                              ; preds = %418
  %429 = trunc i33 %424 to i32
  store i32 %429, i32* %419, align 4
  br label %430

430:                                              ; preds = %428, %413, %398
  %431 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 0, i32 1
  %432 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 0, i32 1
  %433 = bitcast i8** %432 to i64*
  %434 = load i64, i64* %433, align 8, !noalias !9
  %435 = bitcast i8** %431 to i64*
  store i64 %434, i64* %435, align 8, !noalias !9
  %436 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 1, i32 0, i32 0
  %437 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %436, align 8, !noalias !9
  %438 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %437, %"class.WTF::StringImpl"** %438, align 8, !noalias !9
  %439 = icmp eq %"class.WTF::StringImpl"* %437, null
  br i1 %439, label %457, label %440

440:                                              ; preds = %430
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %437, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %442 = load atomic i32, i32* %441 monotonic, align 4
  %443 = and i32 %442, 2
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %457

445:                                              ; preds = %440
  %446 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %437, i64 0, i32 0
  %447 = load i32, i32* %446, align 4
  %448 = zext i32 %447 to i33
  %449 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %448, i33 1) #10
  %450 = extractvalue { i33, i1 } %449, 1
  %451 = extractvalue { i33, i1 } %449, 0
  %452 = icmp slt i33 %451, 0
  %453 = or i1 %450, %452
  br i1 %453, label %454, label %455, !prof !2

454:                                              ; preds = %445
  call void @llvm.trap() #10
  unreachable

455:                                              ; preds = %445
  %456 = trunc i33 %451 to i32
  store i32 %456, i32* %446, align 4
  br label %457

457:                                              ; preds = %430, %440, %455
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.614"* nonnull %11, %"class.WTF::StringAppend.615"* nonnull byval(%"class.WTF::StringAppend.615") align 8 %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %405)
  %458 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev(%"class.WTF::StringAppend.614"* nonnull %11)
  %459 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %458, %"class.WTF::StringImpl"** %459, align 8
  %460 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %461 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %460, align 8
  %462 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %461, align 8
  call void %462(%"class.blink::ExceptionState"* %2, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %10) #10
  %463 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %459, align 8
  %464 = icmp eq %"class.WTF::StringImpl"* %463, null
  br i1 %464, label %478, label %465

465:                                              ; preds = %457
  %466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %463, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %467 = load atomic i32, i32* %466 monotonic, align 4
  %468 = and i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %463, i64 0, i32 0
  %471 = load i32, i32* %470, align 4
  br i1 %469, label %472, label %474

472:                                              ; preds = %465
  %473 = add i32 %471, -1
  store i32 %473, i32* %470, align 4
  br label %474

474:                                              ; preds = %472, %465
  %475 = phi i32 [ %473, %472 ], [ %471, %465 ]
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %474
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %463) #10
  br label %478

478:                                              ; preds = %457, %474, %477
  %479 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %11, i64 0, i32 0, i32 1, i32 0, i32 0
  %480 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %479, align 8
  %481 = icmp eq %"class.WTF::StringImpl"* %480, null
  br i1 %481, label %495, label %482

482:                                              ; preds = %478
  %483 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %484 = load atomic i32, i32* %483 monotonic, align 4
  %485 = and i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 0
  %488 = load i32, i32* %487, align 4
  br i1 %486, label %489, label %491

489:                                              ; preds = %482
  %490 = add i32 %488, -1
  store i32 %490, i32* %487, align 4
  br label %491

491:                                              ; preds = %489, %482
  %492 = phi i32 [ %490, %489 ], [ %488, %482 ]
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %494, label %495

494:                                              ; preds = %491
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %480) #10
  br label %495

495:                                              ; preds = %494, %491, %478
  %496 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %497 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %496, align 8
  %498 = icmp eq %"class.WTF::StringImpl"* %497, null
  br i1 %498, label %512, label %499

499:                                              ; preds = %495
  %500 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %497, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %501 = load atomic i32, i32* %500 monotonic, align 4
  %502 = and i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %497, i64 0, i32 0
  %505 = load i32, i32* %504, align 4
  br i1 %503, label %506, label %508

506:                                              ; preds = %499
  %507 = add i32 %505, -1
  store i32 %507, i32* %504, align 4
  br label %508

508:                                              ; preds = %506, %499
  %509 = phi i32 [ %507, %506 ], [ %505, %499 ]
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %512

511:                                              ; preds = %508
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %497) #10
  br label %512

512:                                              ; preds = %495, %508, %511
  %513 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %436, align 8
  %514 = icmp eq %"class.WTF::StringImpl"* %513, null
  br i1 %514, label %528, label %515

515:                                              ; preds = %512
  %516 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %513, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %517 = load atomic i32, i32* %516 monotonic, align 4
  %518 = and i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %513, i64 0, i32 0
  %521 = load i32, i32* %520, align 4
  br i1 %519, label %522, label %524

522:                                              ; preds = %515
  %523 = add i32 %521, -1
  store i32 %523, i32* %520, align 4
  br label %524

524:                                              ; preds = %522, %515
  %525 = phi i32 [ %523, %522 ], [ %521, %515 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %528

527:                                              ; preds = %524
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %513) #10
  br label %528

528:                                              ; preds = %527, %524, %512
  %529 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %409, align 8
  %530 = icmp eq %"class.WTF::StringImpl"* %529, null
  br i1 %530, label %544, label %531

531:                                              ; preds = %528
  %532 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %529, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %533 = load atomic i32, i32* %532 monotonic, align 4
  %534 = and i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %529, i64 0, i32 0
  %537 = load i32, i32* %536, align 4
  br i1 %535, label %538, label %540

538:                                              ; preds = %531
  %539 = add i32 %537, -1
  store i32 %539, i32* %536, align 4
  br label %540

540:                                              ; preds = %538, %531
  %541 = phi i32 [ %539, %538 ], [ %537, %531 ]
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %544

543:                                              ; preds = %540
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %529) #10
  br label %544

544:                                              ; preds = %528, %540, %543
  %545 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  %546 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %545, align 8
  %547 = icmp eq %"class.WTF::StringImpl"* %546, null
  br i1 %547, label %561, label %548

548:                                              ; preds = %544
  %549 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %546, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %550 = load atomic i32, i32* %549 monotonic, align 4
  %551 = and i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %546, i64 0, i32 0
  %554 = load i32, i32* %553, align 4
  br i1 %552, label %555, label %557

555:                                              ; preds = %548
  %556 = add i32 %554, -1
  store i32 %556, i32* %553, align 4
  br label %557

557:                                              ; preds = %555, %548
  %558 = phi i32 [ %556, %555 ], [ %554, %548 ]
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %560, label %561

560:                                              ; preds = %557
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %546) #10
  br label %561

561:                                              ; preds = %544, %557, %560
  br i1 %268, label %590, label %562

562:                                              ; preds = %561
  %563 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %564 = load atomic i32, i32* %563 monotonic, align 4
  %565 = and i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 0
  %568 = load i32, i32* %567, align 4
  br i1 %566, label %569, label %571

569:                                              ; preds = %562
  %570 = add i32 %568, -1
  store i32 %570, i32* %567, align 4
  br label %571

571:                                              ; preds = %569, %562
  %572 = phi i32 [ %570, %569 ], [ %568, %562 ]
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %576

574:                                              ; preds = %571
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #10
  %575 = load i32, i32* %567, align 4
  br label %576

576:                                              ; preds = %571, %574
  %577 = phi i32 [ %572, %571 ], [ %575, %574 ]
  %578 = load atomic i32, i32* %563 monotonic, align 4
  %579 = and i32 %578, 2
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %581, label %583

581:                                              ; preds = %576
  %582 = add i32 %577, -1
  store i32 %582, i32* %567, align 4
  br label %583

583:                                              ; preds = %581, %576
  %584 = phi i32 [ %582, %581 ], [ %577, %576 ]
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %590

586:                                              ; preds = %583
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #10
  br label %590

587:                                              ; preds = %216
  %588 = add nuw i32 %218, 1
  %589 = icmp eq i32 %218, %1
  br i1 %589, label %658, label %216

590:                                              ; preds = %586, %583, %561
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %227) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %226) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %225) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #10
  br label %674

591:                                              ; preds = %221, %214
  %592 = phi %"class.blink::HTMLTableRowElement"* [ %215, %214 ], [ %217, %221 ]
  %593 = icmp eq %"class.blink::HTMLTableRowElement"* %592, null
  br i1 %593, label %594, label %658

594:                                              ; preds = %591
  %595 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTbodyTagE, align 8
  %596 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %597 = load %"class.blink::Node"*, %"class.blink::Node"** %596, align 8
  %598 = icmp eq %"class.blink::Node"* %597, null
  br i1 %598, label %642, label %599

599:                                              ; preds = %594, %605
  %600 = phi %"class.blink::Node"* [ %607, %605 ], [ %597, %594 ]
  %601 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %600, i64 0, i32 1
  %602 = load i32, i32* %601, align 8
  %603 = and i32 %602, 48
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %609, label %605

605:                                              ; preds = %599
  %606 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %600, i64 0, i32 4, i32 0, i32 0
  %607 = load %"class.blink::Node"*, %"class.blink::Node"** %606, align 8
  %608 = icmp eq %"class.blink::Node"* %607, null
  br i1 %608, label %642, label %599

609:                                              ; preds = %599
  %610 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %595, i64 0, i32 0, i32 0, i32 0
  %611 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %610, align 8
  %612 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %611, i64 0, i32 3, i32 0, i32 0, i32 0
  %613 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %612, align 8
  %614 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %600, i64 1, i32 2
  %615 = bitcast %"class.blink::Member"* %614 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %616 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %615, align 8
  %617 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %616, i64 0, i32 3, i32 0, i32 0, i32 0
  %618 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %617, align 8
  %619 = icmp eq %"class.WTF::StringImpl"* %618, %613
  br i1 %619, label %638, label %627

620:                                              ; preds = %632
  %621 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %630, i64 1, i32 2
  %622 = bitcast %"class.blink::Member"* %621 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %623 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %622, align 8
  %624 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %623, i64 0, i32 3, i32 0, i32 0, i32 0
  %625 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %624, align 8
  %626 = icmp eq %"class.WTF::StringImpl"* %625, %613
  br i1 %626, label %638, label %637

627:                                              ; preds = %609, %637
  %628 = phi %"class.blink::Node"* [ %630, %637 ], [ %600, %609 ]
  %629 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %628, i64 0, i32 4, i32 0, i32 0
  %630 = load %"class.blink::Node"*, %"class.blink::Node"** %629, align 8
  %631 = icmp eq %"class.blink::Node"* %630, null
  br i1 %631, label %642, label %632

632:                                              ; preds = %627
  %633 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %630, i64 0, i32 1
  %634 = load i32, i32* %633, align 8
  %635 = and i32 %634, 48
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %620, label %637

637:                                              ; preds = %632, %620
  br label %627

638:                                              ; preds = %620, %609
  %639 = phi %"class.blink::Node"* [ %600, %609 ], [ %630, %620 ]
  %640 = bitcast %"class.blink::Node"* %639 to %"class.blink::ContainerNode"*
  %641 = icmp eq %"class.blink::Node"* %639, null
  br i1 %641, label %642, label %663

642:                                              ; preds = %605, %627, %594, %638
  %643 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %644 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %643, align 8
  %645 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %644, i64 0, i32 2, i32 0, i32 0
  %646 = load %"class.blink::Document"*, %"class.blink::Document"** %645, align 8
  %647 = tail call %"class.blink::HTMLTableSectionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8) %595, %"class.blink::Document"* dereferenceable(2848) %646) #10
  %648 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %643, align 8
  %649 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %648, i64 0, i32 2, i32 0, i32 0
  %650 = load %"class.blink::Document"*, %"class.blink::Document"** %649, align 8
  %651 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_19HTMLTableRowElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848) %650) #10
  %652 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %647, i64 0, i32 0, i32 0, i32 0, i32 0
  %653 = getelementptr inbounds %"class.blink::HTMLTableRowElement", %"class.blink::HTMLTableRowElement"* %651, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %654 = tail call %"class.blink::Node"* @_ZN5blink13ContainerNode11AppendChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %652, %"class.blink::Node"* %653, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  %655 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %656 = getelementptr inbounds %"class.blink::HTMLTableSectionElement", %"class.blink::HTMLTableSectionElement"* %647, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %657 = tail call %"class.blink::Node"* @_ZN5blink13ContainerNode11AppendChildEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::ContainerNode"* %655, %"class.blink::Node"* %656, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %674

658:                                              ; preds = %587, %591
  %659 = phi %"class.blink::HTMLTableRowElement"* [ %592, %591 ], [ %219, %587 ]
  %660 = phi %"class.blink::HTMLTableRowElement"* [ null, %591 ], [ %219, %587 ]
  %661 = getelementptr inbounds %"class.blink::HTMLTableRowElement", %"class.blink::HTMLTableRowElement"* %659, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %662 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %661) #10
  br label %663

663:                                              ; preds = %658, %638
  %664 = phi %"class.blink::HTMLTableRowElement"* [ null, %638 ], [ %660, %658 ]
  %665 = phi %"class.blink::ContainerNode"* [ %640, %638 ], [ %662, %658 ]
  %666 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %667 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %666, align 8
  %668 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %667, i64 0, i32 2, i32 0, i32 0
  %669 = load %"class.blink::Document"*, %"class.blink::Document"** %668, align 8
  %670 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_19HTMLTableRowElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848) %669) #10
  %671 = getelementptr inbounds %"class.blink::HTMLTableRowElement", %"class.blink::HTMLTableRowElement"* %670, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %672 = getelementptr inbounds %"class.blink::HTMLTableRowElement", %"class.blink::HTMLTableRowElement"* %664, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %673 = tail call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %665, %"class.blink::Node"* %671, %"class.blink::Node"* %672, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %674

674:                                              ; preds = %590, %663, %642, %211
  %675 = phi %"class.blink::HTMLTableRowElement"* [ null, %211 ], [ null, %590 ], [ %670, %663 ], [ %651, %642 ]
  ret %"class.blink::HTMLTableRowElement"* %675
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.742"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #10
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i8* %8) #10
  %9 = bitcast %"class.WTF::StringTypeAdapter.742"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #10
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %2, i8* %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #10
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #10
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %34
  call void @llvm.trap() #10
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #10
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #10
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %70
  call void @llvm.trap() #10
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

declare %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection7LastRowERNS_16HTMLTableElementE(%"class.blink::HTMLTableElement"* dereferenceable(128)) local_unnamed_addr #2

declare %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection8RowAfterERNS_16HTMLTableElementEPNS_19HTMLTableRowElementE(%"class.blink::HTMLTableElement"* dereferenceable(128), %"class.blink::HTMLTableRowElement"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.615"* noalias sret, %"class.WTF::StringAppend"* dereferenceable(24), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend", align 8
  %5 = bitcast %"class.WTF::StringAppend"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %3, %12, %27
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #10
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %41
  tail call void @llvm.trap() #10
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %54

53:                                               ; preds = %29
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.615"* %0, %"class.WTF::StringAppend"* nonnull byval(%"class.WTF::StringAppend") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %66

54:                                               ; preds = %36, %51
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.615"* %0, %"class.WTF::StringAppend"* nonnull byval(%"class.WTF::StringAppend") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %54
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i32 [ %61, %60 ], [ %59, %54 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %66

66:                                               ; preds = %53, %62, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev(%"class.WTF::StringAppend.614"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i16*, align 8
  %7 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false) #10
  %9 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = bitcast %"class.WTF::StringTypeAdapter.742"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false) #10
  %15 = load i8*, i8** %14, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i8* %15) #10
  %16 = bitcast %"class.WTF::StringTypeAdapter.742"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false) #10
  %18 = load i8*, i8** %17, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %2, i8* %18) #10
  %19 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %23 = select i1 %21, %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"* %20
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  br i1 %27, label %28, label %29

28:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  br label %72

29:                                               ; preds = %1
  %30 = icmp eq %"class.WTF::StringImpl"* %11, null
  %31 = select i1 %30, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %11
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  br i1 %35, label %72, label %36

36:                                               ; preds = %29
  %37 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %38 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.614"* %0)
  %39 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %38, i8** nonnull dereferenceable(8) %5) #10
  %40 = load i8*, i8** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.614"* %0, i8* %40)
  %41 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %41, label %108, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %59

49:                                               ; preds = %42
  %50 = zext i32 %48 to i33
  %51 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #10
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %49
  call void @llvm.trap() #10
  unreachable

57:                                               ; preds = %49
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %47, align 4
  br label %59

59:                                               ; preds = %42, %57
  %60 = phi i32 [ %58, %57 ], [ %48, %42 ]
  %61 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  %62 = load atomic i32, i32* %43 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %67 = add i32 %60, -1
  store i32 %67, i32* %66, align 4
  br label %68

68:                                               ; preds = %65, %59
  %69 = phi i32 [ %67, %65 ], [ %60, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %108

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #10
  br label %108

72:                                               ; preds = %29, %28
  %73 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %6, align 8
  %74 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.614"* %0)
  %75 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %74, i16** nonnull dereferenceable(8) %6) #10
  %76 = load i16*, i16** %6, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.614"* %0, i16* %76)
  %77 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %77, label %108, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %95

85:                                               ; preds = %78
  %86 = zext i32 %84 to i33
  %87 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #10
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !2

92:                                               ; preds = %85
  call void @llvm.trap() #10
  unreachable

93:                                               ; preds = %85
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %83, align 4
  br label %95

95:                                               ; preds = %78, %93
  %96 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %97 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %98 = load atomic i32, i32* %79 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %95
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %103 = add i32 %96, -1
  store i32 %103, i32* %102, align 4
  br label %104

104:                                              ; preds = %101, %95
  %105 = phi i32 [ %103, %101 ], [ %96, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #10
  br label %108

108:                                              ; preds = %107, %104, %72, %71, %68, %36
  %109 = phi i8* [ %37, %36 ], [ %37, %68 ], [ %37, %71 ], [ %73, %72 ], [ %73, %104 ], [ %73, %107 ]
  %110 = phi i64 [ 0, %36 ], [ %61, %68 ], [ %61, %71 ], [ 0, %72 ], [ %97, %104 ], [ %97, %107 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #10
  %111 = inttoptr i64 %110 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %111
}

declare %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement9deleteRowEiRNS_14ExceptionStateE(%"class.blink::HTMLTableElement"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringAppend.615", align 8
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %7 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::StringAppend.614", align 8
  %12 = alloca %"class.WTF::StringAppend.615", align 8
  %13 = alloca %"class.WTF::StringAppend", align 8
  %14 = icmp slt i32 %1, -1
  br i1 %14, label %15, label %212

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 12
  %20 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 2
  %21 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 3
  %22 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 13
  %23 = sub i32 0, %1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 32, i1 false) #10
  store i8* %19, i8** %20, align 8
  %24 = urem i32 %23, 10
  %25 = udiv i32 %23, 10
  %26 = trunc i32 %24 to i8
  %27 = or i8 %26, 48
  store i8 %27, i8* %19, align 4
  %28 = icmp ugt i32 %23, 9
  br i1 %28, label %29, label %45

29:                                               ; preds = %15
  %30 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 11
  store i8* %30, i8** %20, align 8
  %31 = urem i32 %25, 10
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, 48
  store i8 %33, i8* %30, align 1
  %34 = icmp ugt i32 %23, 99
  br i1 %34, label %35, label %45

35:                                               ; preds = %29, %35
  %36 = phi i8* [ %44, %35 ], [ %30, %29 ]
  %37 = phi i32 [ %38, %35 ], [ %25, %29 ]
  %38 = udiv i32 %37, 10
  %39 = getelementptr inbounds i8, i8* %36, i64 -1
  store i8* %39, i8** %20, align 8
  %40 = urem i32 %38, 10
  %41 = trunc i32 %40 to i8
  %42 = or i8 %41, 48
  store i8 %42, i8* %39, align 1
  %43 = icmp ugt i32 %37, 99
  %44 = load i8*, i8** %20, align 8
  br i1 %43, label %35, label %45

45:                                               ; preds = %35, %29, %15
  %46 = phi i8* [ %30, %29 ], [ %19, %15 ], [ %44, %35 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  store i8* %47, i8** %20, align 8
  store i8 45, i8* %47, align 1
  %48 = bitcast i8** %20 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = ptrtoint i8* %22 to i64
  %51 = sub i64 %50, %49
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %21, align 8
  %53 = inttoptr i64 %49 to i8*
  %54 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %53, i32 %52) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #10
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %131, label %56

56:                                               ; preds = %45
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %73

63:                                               ; preds = %56
  %64 = zext i32 %62 to i33
  %65 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #10
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !2

70:                                               ; preds = %63
  call void @llvm.trap() #10
  unreachable

71:                                               ; preds = %63
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %61, align 4
  br label %73

73:                                               ; preds = %71, %56
  %74 = phi i32 [ %72, %71 ], [ %62, %56 ]
  %75 = load atomic i32, i32* %57 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %88

78:                                               ; preds = %73
  %79 = zext i32 %74 to i33
  %80 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %79, i33 1) #10
  %81 = extractvalue { i33, i1 } %80, 1
  %82 = extractvalue { i33, i1 } %80, 0
  %83 = icmp slt i33 %82, 0
  %84 = or i1 %81, %83
  br i1 %84, label %85, label %86, !prof !2

85:                                               ; preds = %78
  call void @llvm.trap() #10
  unreachable

86:                                               ; preds = %78
  %87 = trunc i33 %82 to i32
  store i32 %87, i32* %61, align 4
  br label %88

88:                                               ; preds = %86, %73
  %89 = phi i32 [ %87, %86 ], [ %74, %73 ]
  %90 = load atomic i32, i32* %57 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = add i32 %89, -1
  store i32 %94, i32* %61, align 4
  br label %95

95:                                               ; preds = %93, %88
  %96 = phi i32 [ %94, %93 ], [ %89, %88 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %99

99:                                               ; preds = %95, %98
  %100 = load atomic i32, i32* %57 monotonic, align 4, !noalias !12
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = load i32, i32* %61, align 4
  br i1 %102, label %104, label %114

104:                                              ; preds = %99
  %105 = zext i32 %103 to i33
  %106 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %105, i33 1) #10
  %107 = extractvalue { i33, i1 } %106, 1
  %108 = extractvalue { i33, i1 } %106, 0
  %109 = icmp slt i33 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %111, label %112, !prof !2

111:                                              ; preds = %104
  call void @llvm.trap() #10, !noalias !12
  unreachable

112:                                              ; preds = %104
  %113 = trunc i33 %108 to i32
  store i32 %113, i32* %61, align 4, !noalias !12
  br label %114

114:                                              ; preds = %99, %112
  %115 = phi i32 [ %113, %112 ], [ %103, %99 ]
  %116 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %116, align 8, !alias.scope !12
  %117 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %117, align 8, !alias.scope !12
  %118 = load atomic i32, i32* %57 monotonic, align 4, !noalias !12
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %135

121:                                              ; preds = %114
  %122 = zext i32 %115 to i33
  %123 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %122, i33 1) #10
  %124 = extractvalue { i33, i1 } %123, 1
  %125 = extractvalue { i33, i1 } %123, 0
  %126 = icmp slt i33 %125, 0
  %127 = or i1 %124, %126
  br i1 %127, label %128, label %129, !prof !2

128:                                              ; preds = %121
  call void @llvm.trap() #10, !noalias !12
  unreachable

129:                                              ; preds = %121
  %130 = trunc i33 %125 to i32
  store i32 %130, i32* %61, align 4, !noalias !12
  br label %135

131:                                              ; preds = %45
  %132 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %132, align 8, !alias.scope !12
  %133 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %133, align 8, !alias.scope !12
  %134 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8** %134, align 8, !alias.scope !12
  br label %147

135:                                              ; preds = %129, %114
  %136 = phi i32 [ %130, %129 ], [ %115, %114 ]
  %137 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8** %137, align 8, !alias.scope !12
  %138 = load atomic i32, i32* %57 monotonic, align 4, !noalias !12
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %143

141:                                              ; preds = %135
  %142 = add i32 %136, -1
  store i32 %142, i32* %61, align 4, !noalias !12
  br label %143

143:                                              ; preds = %141, %135
  %144 = phi i32 [ %142, %141 ], [ %136, %135 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10, !noalias !12
  br label %147

147:                                              ; preds = %131, %143, %146
  %148 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %9)
  %149 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %148, %"class.WTF::StringImpl"** %149, align 8
  %150 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %151 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %150, align 8
  %152 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %151, align 8
  call void %152(%"class.blink::ExceptionState"* %2, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %8) #10
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %149, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %168, label %155

155:                                              ; preds = %147
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  br i1 %159, label %162, label %164

162:                                              ; preds = %155
  %163 = add i32 %161, -1
  store i32 %163, i32* %160, align 4
  br label %164

164:                                              ; preds = %162, %155
  %165 = phi i32 [ %163, %162 ], [ %161, %155 ]
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %164
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #10
  br label %168

168:                                              ; preds = %147, %164, %167
  %169 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #10
  br label %185

185:                                              ; preds = %168, %181, %184
  br i1 %55, label %211, label %186

186:                                              ; preds = %185
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %188 = load atomic i32, i32* %187 monotonic, align 4
  %189 = and i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  br i1 %190, label %193, label %195

193:                                              ; preds = %186
  %194 = add i32 %192, -1
  store i32 %194, i32* %191, align 4
  br label %195

195:                                              ; preds = %193, %186
  %196 = phi i32 [ %194, %193 ], [ %192, %186 ]
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %195
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  %199 = load i32, i32* %191, align 4
  br label %200

200:                                              ; preds = %195, %198
  %201 = phi i32 [ %196, %195 ], [ %199, %198 ]
  %202 = load atomic i32, i32* %187 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %207

205:                                              ; preds = %200
  %206 = add i32 %201, -1
  store i32 %206, i32* %191, align 4
  br label %207

207:                                              ; preds = %205, %200
  %208 = phi i32 [ %206, %205 ], [ %201, %200 ]
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %211

210:                                              ; preds = %207
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %211

211:                                              ; preds = %185, %207, %210
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %593

212:                                              ; preds = %3
  %213 = icmp eq i32 %1, -1
  br i1 %213, label %214, label %217

214:                                              ; preds = %212
  %215 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection7LastRowERNS_16HTMLTableElementE(%"class.blink::HTMLTableElement"* dereferenceable(128) %0) #10
  %216 = icmp eq %"class.blink::HTMLTableRowElement"* %215, null
  br i1 %216, label %593, label %590

217:                                              ; preds = %212, %222
  %218 = phi %"class.blink::HTMLTableRowElement"* [ %220, %222 ], [ null, %212 ]
  %219 = phi i32 [ %223, %222 ], [ 0, %212 ]
  %220 = tail call %"class.blink::HTMLTableRowElement"* @_ZN5blink23HTMLTableRowsCollection8RowAfterERNS_16HTMLTableElementEPNS_19HTMLTableRowElementE(%"class.blink::HTMLTableElement"* dereferenceable(128) %0, %"class.blink::HTMLTableRowElement"* %218) #10
  %221 = icmp eq %"class.blink::HTMLTableRowElement"* %220, null
  br i1 %221, label %225, label %222

222:                                              ; preds = %217
  %223 = add nuw i32 %219, 1
  %224 = icmp eq i32 %219, %1
  br i1 %224, label %590, label %217

225:                                              ; preds = %217
  %226 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %226) #10
  %227 = bitcast %"class.WTF::StringAppend.614"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %227) #10
  %228 = bitcast %"class.WTF::StringAppend.615"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %228) #10
  %229 = bitcast %"class.WTF::StringAppend"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %229) #10
  %230 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %230) #10
  %231 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 12
  %232 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 2
  %233 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 3
  %234 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 -86, i64 32, i1 false) #10
  store i8* %231, i8** %232, align 8
  %235 = urem i32 %1, 10
  %236 = udiv i32 %1, 10
  %237 = trunc i32 %235 to i8
  %238 = or i8 %237, 48
  store i8 %238, i8* %231, align 4
  %239 = icmp ugt i32 %1, 9
  br i1 %239, label %240, label %262

240:                                              ; preds = %225
  %241 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 11
  store i8* %241, i8** %232, align 8
  %242 = urem i32 %236, 10
  %243 = trunc i32 %242 to i8
  %244 = or i8 %243, 48
  store i8 %244, i8* %241, align 1
  %245 = icmp ugt i32 %1, 99
  br i1 %245, label %246, label %262

246:                                              ; preds = %240
  %247 = udiv i32 %1, 100
  %248 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 10
  store i8* %248, i8** %232, align 8
  %249 = urem i32 %247, 10
  %250 = trunc i32 %249 to i8
  %251 = or i8 %250, 48
  store i8 %251, i8* %248, align 2
  %252 = icmp ugt i32 %1, 999
  br i1 %252, label %253, label %262

253:                                              ; preds = %246, %253
  %254 = phi i32 [ %256, %253 ], [ %247, %246 ]
  %255 = load i8*, i8** %232, align 8
  %256 = udiv i32 %254, 10
  %257 = getelementptr inbounds i8, i8* %255, i64 -1
  store i8* %257, i8** %232, align 8
  %258 = urem i32 %256, 10
  %259 = trunc i32 %258 to i8
  %260 = or i8 %259, 48
  store i8 %260, i8* %257, align 1
  %261 = icmp ugt i32 %254, 99
  br i1 %261, label %253, label %262

262:                                              ; preds = %253, %246, %225, %240
  %263 = bitcast i8** %232 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = ptrtoint i8* %234 to i64
  %266 = sub i64 %265, %264
  %267 = trunc i64 %266 to i32
  store i32 %267, i32* %233, align 8
  %268 = inttoptr i64 %264 to i8*
  %269 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %268, i32 %267) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %230) #10
  %270 = icmp eq %"class.WTF::StringImpl"* %269, null
  br i1 %270, label %346, label %271

271:                                              ; preds = %262
  %272 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = load atomic i32, i32* %272 monotonic, align 4
  %274 = and i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 0
  %277 = load i32, i32* %276, align 4
  br i1 %275, label %278, label %288

278:                                              ; preds = %271
  %279 = zext i32 %277 to i33
  %280 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %279, i33 1) #10
  %281 = extractvalue { i33, i1 } %280, 1
  %282 = extractvalue { i33, i1 } %280, 0
  %283 = icmp slt i33 %282, 0
  %284 = or i1 %281, %283
  br i1 %284, label %285, label %286, !prof !2

285:                                              ; preds = %278
  call void @llvm.trap() #10
  unreachable

286:                                              ; preds = %278
  %287 = trunc i33 %282 to i32
  store i32 %287, i32* %276, align 4
  br label %288

288:                                              ; preds = %286, %271
  %289 = phi i32 [ %287, %286 ], [ %277, %271 ]
  %290 = load atomic i32, i32* %272 monotonic, align 4
  %291 = and i32 %290, 2
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %303

293:                                              ; preds = %288
  %294 = zext i32 %289 to i33
  %295 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %294, i33 1) #10
  %296 = extractvalue { i33, i1 } %295, 1
  %297 = extractvalue { i33, i1 } %295, 0
  %298 = icmp slt i33 %297, 0
  %299 = or i1 %296, %298
  br i1 %299, label %300, label %301, !prof !2

300:                                              ; preds = %293
  call void @llvm.trap() #10
  unreachable

301:                                              ; preds = %293
  %302 = trunc i33 %297 to i32
  store i32 %302, i32* %276, align 4
  br label %303

303:                                              ; preds = %301, %288
  %304 = phi i32 [ %302, %301 ], [ %289, %288 ]
  %305 = load atomic i32, i32* %272 monotonic, align 4
  %306 = and i32 %305, 2
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %310

308:                                              ; preds = %303
  %309 = add i32 %304, -1
  store i32 %309, i32* %276, align 4
  br label %310

310:                                              ; preds = %308, %303
  %311 = phi i32 [ %309, %308 ], [ %304, %303 ]
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %314

313:                                              ; preds = %310
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #10
  br label %314

314:                                              ; preds = %310, %313
  %315 = load atomic i32, i32* %272 monotonic, align 4, !noalias !15
  %316 = and i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = load i32, i32* %276, align 4
  br i1 %317, label %319, label %329

319:                                              ; preds = %314
  %320 = zext i32 %318 to i33
  %321 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %320, i33 1) #10
  %322 = extractvalue { i33, i1 } %321, 1
  %323 = extractvalue { i33, i1 } %321, 0
  %324 = icmp slt i33 %323, 0
  %325 = or i1 %322, %324
  br i1 %325, label %326, label %327, !prof !2

326:                                              ; preds = %319
  call void @llvm.trap() #10, !noalias !15
  unreachable

327:                                              ; preds = %319
  %328 = trunc i33 %323 to i32
  store i32 %328, i32* %276, align 4, !noalias !15
  br label %329

329:                                              ; preds = %314, %327
  %330 = phi i32 [ %328, %327 ], [ %318, %314 ]
  %331 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %331, align 8, !alias.scope !15
  %332 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %269, %"class.WTF::StringImpl"** %332, align 8, !alias.scope !15
  %333 = load atomic i32, i32* %272 monotonic, align 4, !noalias !15
  %334 = and i32 %333, 2
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %336, label %350

336:                                              ; preds = %329
  %337 = zext i32 %330 to i33
  %338 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %337, i33 1) #10
  %339 = extractvalue { i33, i1 } %338, 1
  %340 = extractvalue { i33, i1 } %338, 0
  %341 = icmp slt i33 %340, 0
  %342 = or i1 %339, %341
  br i1 %342, label %343, label %344, !prof !2

343:                                              ; preds = %336
  call void @llvm.trap() #10, !noalias !15
  unreachable

344:                                              ; preds = %336
  %345 = trunc i33 %340 to i32
  store i32 %345, i32* %276, align 4, !noalias !15
  br label %350

346:                                              ; preds = %262
  %347 = bitcast %"class.WTF::StringAppend"* %13 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.2 to i64), i64* %347, align 8, !alias.scope !15
  %348 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %348, align 8, !alias.scope !15
  %349 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i64 0, i64 0), i8** %349, align 8, !alias.scope !15
  br label %362

350:                                              ; preds = %344, %329
  %351 = phi i32 [ %345, %344 ], [ %330, %329 ]
  %352 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i64 0, i64 0), i8** %352, align 8, !alias.scope !15
  %353 = load atomic i32, i32* %272 monotonic, align 4, !noalias !15
  %354 = and i32 %353, 2
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %356, label %358

356:                                              ; preds = %350
  %357 = add i32 %351, -1
  store i32 %357, i32* %276, align 4, !noalias !15
  br label %358

358:                                              ; preds = %356, %350
  %359 = phi i32 [ %357, %356 ], [ %351, %350 ]
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %358
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #10, !noalias !15
  br label %362

362:                                              ; preds = %346, %358, %361
  %363 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %363) #10
  %364 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  %365 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %366 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %367 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %363, i8 -86, i64 32, i1 false) #10
  store i8* %364, i8** %365, align 8
  %368 = urem i32 %219, 10
  %369 = udiv i32 %219, 10
  %370 = trunc i32 %368 to i8
  %371 = or i8 %370, 48
  store i8 %371, i8* %364, align 4
  %372 = icmp ugt i32 %219, 9
  %373 = ptrtoint i8* %364 to i64
  br i1 %372, label %374, label %400

374:                                              ; preds = %362
  %375 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  store i8* %375, i8** %365, align 8
  %376 = urem i32 %369, 10
  %377 = trunc i32 %376 to i8
  %378 = or i8 %377, 48
  store i8 %378, i8* %375, align 1
  %379 = icmp ugt i32 %219, 99
  %380 = ptrtoint i8* %375 to i64
  br i1 %379, label %381, label %400

381:                                              ; preds = %374
  %382 = udiv i32 %219, 100
  %383 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  store i8* %383, i8** %365, align 8
  %384 = urem i32 %382, 10
  %385 = trunc i32 %384 to i8
  %386 = or i8 %385, 48
  store i8 %386, i8* %383, align 2
  %387 = icmp ugt i32 %219, 999
  br i1 %387, label %388, label %397

388:                                              ; preds = %381, %388
  %389 = phi i32 [ %391, %388 ], [ %382, %381 ]
  %390 = load i8*, i8** %365, align 8
  %391 = udiv i32 %389, 10
  %392 = getelementptr inbounds i8, i8* %390, i64 -1
  store i8* %392, i8** %365, align 8
  %393 = urem i32 %391, 10
  %394 = trunc i32 %393 to i8
  %395 = or i8 %394, 48
  store i8 %395, i8* %392, align 1
  %396 = icmp ugt i32 %389, 99
  br i1 %396, label %388, label %397

397:                                              ; preds = %388, %381
  %398 = bitcast i8** %365 to i64*
  %399 = load i64, i64* %398, align 8
  br label %400

400:                                              ; preds = %397, %374, %362
  %401 = phi i64 [ %399, %397 ], [ %380, %374 ], [ %373, %362 ]
  %402 = ptrtoint i8* %367 to i64
  %403 = sub i64 %402, %401
  %404 = trunc i64 %403 to i32
  store i32 %404, i32* %366, align 8
  %405 = inttoptr i64 %401 to i8*
  %406 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %405, i32 %404) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %363) #10
  call void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.615"* nonnull sret %12, %"class.WTF::StringAppend"* nonnull dereferenceable(24) %13, %"class.WTF::StringImpl"* %406)
  %407 = bitcast %"class.WTF::StringAppend.615"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %407)
  %408 = bitcast %"class.WTF::StringAppend.615"* %12 to i64*
  %409 = load i64, i64* %408, align 8, !noalias !18
  %410 = bitcast %"class.WTF::StringAppend.615"* %4 to i64*
  store i64 %409, i64* %410, align 8, !noalias !18
  %411 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %412 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %411, align 8, !noalias !18
  %413 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %412, %"class.WTF::StringImpl"** %413, align 8, !noalias !18
  %414 = icmp eq %"class.WTF::StringImpl"* %412, null
  br i1 %414, label %432, label %415

415:                                              ; preds = %400
  %416 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %417 = load atomic i32, i32* %416 monotonic, align 4
  %418 = and i32 %417, 2
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %432

420:                                              ; preds = %415
  %421 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 0
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i33
  %424 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %423, i33 1) #10
  %425 = extractvalue { i33, i1 } %424, 1
  %426 = extractvalue { i33, i1 } %424, 0
  %427 = icmp slt i33 %426, 0
  %428 = or i1 %425, %427
  br i1 %428, label %429, label %430, !prof !2

429:                                              ; preds = %420
  call void @llvm.trap() #10
  unreachable

430:                                              ; preds = %420
  %431 = trunc i33 %426 to i32
  store i32 %431, i32* %421, align 4
  br label %432

432:                                              ; preds = %430, %415, %400
  %433 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 0, i32 1
  %434 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 0, i32 1
  %435 = bitcast i8** %434 to i64*
  %436 = load i64, i64* %435, align 8, !noalias !18
  %437 = bitcast i8** %433 to i64*
  store i64 %436, i64* %437, align 8, !noalias !18
  %438 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %12, i64 0, i32 1, i32 0, i32 0
  %439 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %438, align 8, !noalias !18
  %440 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %439, %"class.WTF::StringImpl"** %440, align 8, !noalias !18
  %441 = icmp eq %"class.WTF::StringImpl"* %439, null
  br i1 %441, label %459, label %442

442:                                              ; preds = %432
  %443 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %439, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %444 = load atomic i32, i32* %443 monotonic, align 4
  %445 = and i32 %444, 2
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %459

447:                                              ; preds = %442
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %439, i64 0, i32 0
  %449 = load i32, i32* %448, align 4
  %450 = zext i32 %449 to i33
  %451 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %450, i33 1) #10
  %452 = extractvalue { i33, i1 } %451, 1
  %453 = extractvalue { i33, i1 } %451, 0
  %454 = icmp slt i33 %453, 0
  %455 = or i1 %452, %454
  br i1 %455, label %456, label %457, !prof !2

456:                                              ; preds = %447
  call void @llvm.trap() #10
  unreachable

457:                                              ; preds = %447
  %458 = trunc i33 %453 to i32
  store i32 %458, i32* %448, align 4
  br label %459

459:                                              ; preds = %432, %442, %457
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.614"* nonnull %11, %"class.WTF::StringAppend.615"* nonnull byval(%"class.WTF::StringAppend.615") align 8 %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %407)
  %460 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev(%"class.WTF::StringAppend.614"* nonnull %11)
  %461 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %460, %"class.WTF::StringImpl"** %461, align 8
  %462 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %463 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %462, align 8
  %464 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %463, align 8
  call void %464(%"class.blink::ExceptionState"* %2, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %10) #10
  %465 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %461, align 8
  %466 = icmp eq %"class.WTF::StringImpl"* %465, null
  br i1 %466, label %480, label %467

467:                                              ; preds = %459
  %468 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %465, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %469 = load atomic i32, i32* %468 monotonic, align 4
  %470 = and i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %465, i64 0, i32 0
  %473 = load i32, i32* %472, align 4
  br i1 %471, label %474, label %476

474:                                              ; preds = %467
  %475 = add i32 %473, -1
  store i32 %475, i32* %472, align 4
  br label %476

476:                                              ; preds = %474, %467
  %477 = phi i32 [ %475, %474 ], [ %473, %467 ]
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %480

479:                                              ; preds = %476
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %465) #10
  br label %480

480:                                              ; preds = %459, %476, %479
  %481 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %11, i64 0, i32 0, i32 1, i32 0, i32 0
  %482 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %481, align 8
  %483 = icmp eq %"class.WTF::StringImpl"* %482, null
  br i1 %483, label %497, label %484

484:                                              ; preds = %480
  %485 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %482, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %486 = load atomic i32, i32* %485 monotonic, align 4
  %487 = and i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %482, i64 0, i32 0
  %490 = load i32, i32* %489, align 4
  br i1 %488, label %491, label %493

491:                                              ; preds = %484
  %492 = add i32 %490, -1
  store i32 %492, i32* %489, align 4
  br label %493

493:                                              ; preds = %491, %484
  %494 = phi i32 [ %492, %491 ], [ %490, %484 ]
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %496, label %497

496:                                              ; preds = %493
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %482) #10
  br label %497

497:                                              ; preds = %496, %493, %480
  %498 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %499 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %498, align 8
  %500 = icmp eq %"class.WTF::StringImpl"* %499, null
  br i1 %500, label %514, label %501

501:                                              ; preds = %497
  %502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %503 = load atomic i32, i32* %502 monotonic, align 4
  %504 = and i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 0
  %507 = load i32, i32* %506, align 4
  br i1 %505, label %508, label %510

508:                                              ; preds = %501
  %509 = add i32 %507, -1
  store i32 %509, i32* %506, align 4
  br label %510

510:                                              ; preds = %508, %501
  %511 = phi i32 [ %509, %508 ], [ %507, %501 ]
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %514

513:                                              ; preds = %510
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %499) #10
  br label %514

514:                                              ; preds = %497, %510, %513
  %515 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %438, align 8
  %516 = icmp eq %"class.WTF::StringImpl"* %515, null
  br i1 %516, label %530, label %517

517:                                              ; preds = %514
  %518 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %515, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %519 = load atomic i32, i32* %518 monotonic, align 4
  %520 = and i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %515, i64 0, i32 0
  %523 = load i32, i32* %522, align 4
  br i1 %521, label %524, label %526

524:                                              ; preds = %517
  %525 = add i32 %523, -1
  store i32 %525, i32* %522, align 4
  br label %526

526:                                              ; preds = %524, %517
  %527 = phi i32 [ %525, %524 ], [ %523, %517 ]
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %529, label %530

529:                                              ; preds = %526
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %515) #10
  br label %530

530:                                              ; preds = %529, %526, %514
  %531 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %411, align 8
  %532 = icmp eq %"class.WTF::StringImpl"* %531, null
  br i1 %532, label %546, label %533

533:                                              ; preds = %530
  %534 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %531, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %535 = load atomic i32, i32* %534 monotonic, align 4
  %536 = and i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %531, i64 0, i32 0
  %539 = load i32, i32* %538, align 4
  br i1 %537, label %540, label %542

540:                                              ; preds = %533
  %541 = add i32 %539, -1
  store i32 %541, i32* %538, align 4
  br label %542

542:                                              ; preds = %540, %533
  %543 = phi i32 [ %541, %540 ], [ %539, %533 ]
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %545, label %546

545:                                              ; preds = %542
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %531) #10
  br label %546

546:                                              ; preds = %530, %542, %545
  %547 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 1, i32 0, i32 0
  %548 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %547, align 8
  %549 = icmp eq %"class.WTF::StringImpl"* %548, null
  br i1 %549, label %563, label %550

550:                                              ; preds = %546
  %551 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %552 = load atomic i32, i32* %551 monotonic, align 4
  %553 = and i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 0
  %556 = load i32, i32* %555, align 4
  br i1 %554, label %557, label %559

557:                                              ; preds = %550
  %558 = add i32 %556, -1
  store i32 %558, i32* %555, align 4
  br label %559

559:                                              ; preds = %557, %550
  %560 = phi i32 [ %558, %557 ], [ %556, %550 ]
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %562, label %563

562:                                              ; preds = %559
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %548) #10
  br label %563

563:                                              ; preds = %546, %559, %562
  br i1 %270, label %589, label %564

564:                                              ; preds = %563
  %565 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %566 = load atomic i32, i32* %565 monotonic, align 4
  %567 = and i32 %566, 2
  %568 = icmp eq i32 %567, 0
  %569 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 0
  %570 = load i32, i32* %569, align 4
  br i1 %568, label %571, label %573

571:                                              ; preds = %564
  %572 = add i32 %570, -1
  store i32 %572, i32* %569, align 4
  br label %573

573:                                              ; preds = %571, %564
  %574 = phi i32 [ %572, %571 ], [ %570, %564 ]
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %576, label %578

576:                                              ; preds = %573
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #10
  %577 = load i32, i32* %569, align 4
  br label %578

578:                                              ; preds = %573, %576
  %579 = phi i32 [ %574, %573 ], [ %577, %576 ]
  %580 = load atomic i32, i32* %565 monotonic, align 4
  %581 = and i32 %580, 2
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %585

583:                                              ; preds = %578
  %584 = add i32 %579, -1
  store i32 %584, i32* %569, align 4
  br label %585

585:                                              ; preds = %583, %578
  %586 = phi i32 [ %584, %583 ], [ %579, %578 ]
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %588, label %589

588:                                              ; preds = %585
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #10
  br label %589

589:                                              ; preds = %563, %585, %588
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %229) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %228) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %227) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #10
  br label %593

590:                                              ; preds = %222, %214
  %591 = phi %"class.blink::HTMLTableRowElement"* [ %215, %214 ], [ %220, %222 ]
  %592 = getelementptr inbounds %"class.blink::HTMLTableRowElement", %"class.blink::HTMLTableRowElement"* %591, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN5blink4Node6removeERNS_14ExceptionStateE(%"class.blink::Node"* %592, %"class.blink::ExceptionState"* dereferenceable(72) %2) #10
  br label %593

593:                                              ; preds = %589, %590, %214, %211
  ret void
}

declare void @_ZN5blink4Node6removeERNS_14ExceptionStateE(%"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink16HTMLTableElement24SetNeedsTableStyleRecalcEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::StyleChangeReasonForTracing", align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %156, label %7

7:                                                ; preds = %1, %21
  %8 = phi %"class.blink::Node"* [ %22, %21 ], [ %5, %1 ]
  %9 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %7
  %14 = icmp eq %"class.blink::Node"* %8, %3
  br i1 %14, label %156, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %8, i64 0, i32 5, i32 0, i32 0
  %17 = load %"class.blink::Node"*, %"class.blink::Node"** %16, align 8
  %18 = icmp eq %"class.blink::Node"* %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  %20 = tail call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %8, %"class.blink::Node"* %3) #10
  br label %21

21:                                               ; preds = %19, %15
  %22 = phi %"class.blink::Node"* [ %20, %19 ], [ %17, %15 ]
  %23 = icmp eq %"class.blink::Node"* %22, null
  br i1 %23, label %156, label %7

24:                                               ; preds = %7
  %25 = bitcast %"class.blink::StyleChangeReasonForTracing"* %2 to i8*
  %26 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kRulesAttrE, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %26, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.blink::StyleChangeReasonForTracing", %"class.blink::StyleChangeReasonForTracing"* %2, i64 0, i32 0
  %29 = getelementptr inbounds %"class.blink::StyleChangeReasonForTracing", %"class.blink::StyleChangeReasonForTracing"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %30 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kTdTagE, align 8
  %31 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kThTagE, align 8
  %33 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %32, i64 0, i32 0, i32 0, i32 0
  br label %36

34:                                               ; preds = %139, %106
  %35 = phi %"class.blink::Node"* [ %107, %106 ], [ %140, %139 ]
  br label %36

36:                                               ; preds = %34, %24
  %37 = phi %"class.blink::Node"* [ %8, %24 ], [ %35, %34 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #10
  %38 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %27, align 8
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 3, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %59, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i33
  %51 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #10
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %47
  call void @llvm.trap() #10
  unreachable

57:                                               ; preds = %47
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %48, align 4
  br label %59

59:                                               ; preds = %36, %42, %57
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink19style_change_reason10kAttributeE, i64 0, i64 0), i8** %28, align 8
  store %"class.WTF::StringImpl"* %40, %"class.WTF::StringImpl"** %29, align 8
  call void @_ZN5blink4Node19SetNeedsStyleRecalcENS_15StyleChangeTypeERKNS_27StyleChangeReasonForTracingE(%"class.blink::Node"* nonnull %37, i32 32768, %"class.blink::StyleChangeReasonForTracing"* nonnull dereferenceable(16) %2) #10
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %75

75:                                               ; preds = %59, %71, %74
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #10
  %76 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %37, i64 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, 48
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %123

80:                                               ; preds = %75
  %81 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %31, align 8
  %82 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %37, i64 1, i32 2
  %83 = bitcast %"class.blink::Member"* %82 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %84 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %84, i64 0, i32 3, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %81, i64 0, i32 3, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %86, %88
  br i1 %89, label %95, label %90

90:                                               ; preds = %80
  %91 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %33, align 8
  %92 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %91, i64 0, i32 3, i32 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %86, %93
  br i1 %94, label %95, label %123

95:                                               ; preds = %80, %90
  %96 = icmp eq %"class.blink::Node"* %37, %3
  br i1 %96, label %156, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %37, i64 0, i32 5, i32 0, i32 0
  %99 = load %"class.blink::Node"*, %"class.blink::Node"** %98, align 8
  %100 = icmp eq %"class.blink::Node"* %99, null
  br i1 %100, label %101, label %104

101:                                              ; preds = %97
  %102 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %37, %"class.blink::Node"* %3) #10
  %103 = icmp eq %"class.blink::Node"* %102, null
  br i1 %103, label %156, label %104

104:                                              ; preds = %101, %97
  %105 = phi %"class.blink::Node"* [ %99, %97 ], [ %102, %101 ]
  br label %106

106:                                              ; preds = %104, %120
  %107 = phi %"class.blink::Node"* [ %121, %120 ], [ %105, %104 ]
  %108 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %107, i64 0, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = and i32 %109, 12
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %34, label %112

112:                                              ; preds = %106
  %113 = icmp eq %"class.blink::Node"* %107, %3
  br i1 %113, label %156, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %107, i64 0, i32 5, i32 0, i32 0
  %116 = load %"class.blink::Node"*, %"class.blink::Node"** %115, align 8
  %117 = icmp eq %"class.blink::Node"* %116, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %107, %"class.blink::Node"* %3) #10
  br label %120

120:                                              ; preds = %118, %114
  %121 = phi %"class.blink::Node"* [ %119, %118 ], [ %116, %114 ]
  %122 = icmp eq %"class.blink::Node"* %121, null
  br i1 %122, label %156, label %106

123:                                              ; preds = %75, %90
  %124 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %37, i64 1
  %125 = bitcast %"class.blink::Node"* %124 to %"class.blink::Node"**
  %126 = load %"class.blink::Node"*, %"class.blink::Node"** %125, align 8
  %127 = icmp eq %"class.blink::Node"* %126, null
  br i1 %127, label %128, label %137

128:                                              ; preds = %123
  %129 = icmp eq %"class.blink::Node"* %37, %3
  br i1 %129, label %156, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %37, i64 0, i32 5, i32 0, i32 0
  %132 = load %"class.blink::Node"*, %"class.blink::Node"** %131, align 8
  %133 = icmp eq %"class.blink::Node"* %132, null
  br i1 %133, label %134, label %137

134:                                              ; preds = %130
  %135 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %37, %"class.blink::Node"* %3) #10
  %136 = icmp eq %"class.blink::Node"* %135, null
  br i1 %136, label %156, label %137

137:                                              ; preds = %134, %130, %123
  %138 = phi %"class.blink::Node"* [ %126, %123 ], [ %132, %130 ], [ %135, %134 ]
  br label %139

139:                                              ; preds = %137, %153
  %140 = phi %"class.blink::Node"* [ %154, %153 ], [ %138, %137 ]
  %141 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %140, i64 0, i32 1
  %142 = load i32, i32* %141, align 8
  %143 = and i32 %142, 12
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %34, label %145

145:                                              ; preds = %139
  %146 = icmp eq %"class.blink::Node"* %140, %3
  br i1 %146, label %156, label %147

147:                                              ; preds = %145
  %148 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %140, i64 0, i32 5, i32 0, i32 0
  %149 = load %"class.blink::Node"*, %"class.blink::Node"** %148, align 8
  %150 = icmp eq %"class.blink::Node"* %149, null
  br i1 %150, label %151, label %153

151:                                              ; preds = %147
  %152 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %140, %"class.blink::Node"* %3) #10
  br label %153

153:                                              ; preds = %151, %147
  %154 = phi %"class.blink::Node"* [ %152, %151 ], [ %149, %147 ]
  %155 = icmp eq %"class.blink::Node"* %154, null
  br i1 %155, label %156, label %139

156:                                              ; preds = %13, %21, %128, %134, %95, %101, %145, %153, %120, %112, %1
  ret void
}

declare void @_ZN5blink4Node19SetNeedsStyleRecalcENS_15StyleChangeTypeERKNS_27StyleChangeReasonForTracingE(%"class.blink::Node"*, i32, %"class.blink::StyleChangeReasonForTracing"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE(%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::MutableCSSPropertyValueSet"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::AtomicString", align 8
  %7 = alloca %"class.blink::KURL", align 8
  %8 = alloca %"struct.blink::Referrer", align 8
  %9 = alloca %"class.blink::CSSPropertyValue", align 8
  %10 = alloca %"class.blink::CSSPropertyName", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kWidthAttrE, align 8
  %17 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %16, i64 0, i32 0, i32 0
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %20
  br i1 %21, label %22, label %25

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement20AddHTMLLengthToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringENS0_15AllowPercentageENS0_9AllowZeroE(%"class.blink::HTMLElement"* %23, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 438, %"class.WTF::String"* dereferenceable(8) %24, i32 1, i32 0) #10
  br label %359

25:                                               ; preds = %4
  %26 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kHeightAttrE, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %26, i64 0, i32 0, i32 0
  %28 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %27, align 8
  %29 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %32 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement20AddHTMLLengthToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringENS0_15AllowPercentageENS0_9AllowZeroE(%"class.blink::HTMLElement"* %31, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 165, %"class.WTF::String"* dereferenceable(8) %32, i32 1, i32 1) #10
  br label %359

33:                                               ; preds = %25
  %34 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kBorderAttrE, align 8
  %35 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %34, i64 0, i32 0, i32 0
  %36 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %35, align 8
  %37 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %36
  br i1 %37, label %38, label %43

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %41 = tail call i32 @_ZNK5blink11HTMLElement25ParseBorderWidthAttributeERKN3WTF12AtomicStringE(%"class.blink::HTMLElement"* %40, %"class.WTF::AtomicString"* dereferenceable(8) %2) #10
  %42 = uitofp i32 %41 to double
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDEdNS_17CSSPrimitiveValue8UnitTypeE(%"class.blink::Element"* %39, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 471, double %42, i32 5) #10
  br label %359

43:                                               ; preds = %33
  %44 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kBordercolorAttrE, align 8
  %45 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %44, i64 0, i32 0, i32 0
  %46 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %45, align 8
  %47 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %46
  br i1 %47, label %48, label %59

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %51 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %51, label %359, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %359, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement19AddHTMLColorToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::HTMLElement"* %57, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 457, %"class.WTF::String"* dereferenceable(8) %58) #10
  br label %359

59:                                               ; preds = %43
  %60 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names12kBgcolorAttrE, align 8
  %61 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %60, i64 0, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %62
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement19AddHTMLColorToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::HTMLElement"* %65, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 52, %"class.WTF::String"* dereferenceable(8) %66) #10
  br label %359

67:                                               ; preds = %59
  %68 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kBackgroundAttrE, align 8
  %69 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %68, i64 0, i32 0, i32 0
  %70 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %69, align 8
  %71 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %70
  br i1 %71, label %72, label %266

72:                                               ; preds = %67
  %73 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %76 = tail call %"class.WTF::StringImpl"* @_ZN5blink33StripLeadingAndTrailingHTMLSpacesERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %75) #10
  store %"class.WTF::StringImpl"* %76, %"class.WTF::StringImpl"** %74, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %265, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %251, label %82

82:                                               ; preds = %78
  %83 = bitcast %"class.WTF::AtomicString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #10
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 acquire, align 4
  %86 = and i32 %85, 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %104, label %88

88:                                               ; preds = %82
  %89 = load atomic i32, i32* %84 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %106

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #10
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %92
  tail call void @llvm.trap() #10
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4
  br label %106

104:                                              ; preds = %82
  %105 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %76) #10
  br label %106

106:                                              ; preds = %88, %102, %104
  %107 = phi %"class.WTF::StringImpl"* [ %105, %104 ], [ %76, %88 ], [ %76, %102 ]
  %108 = ptrtoint %"class.WTF::StringImpl"* %107 to i64
  %109 = bitcast %"class.WTF::AtomicString"* %6 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %110) #10
  %111 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %112 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %113 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %112, align 8
  %114 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %113, i64 0, i32 2, i32 0, i32 0
  %115 = load %"class.blink::Document"*, %"class.blink::Document"** %114, align 8
  call void @_ZNK5blink8Document11CompleteURLERKN3WTF6StringE(%"class.blink::KURL"* nonnull sret %7, %"class.blink::Document"* %115, %"class.WTF::String"* nonnull dereferenceable(8) %5) #10
  %116 = bitcast %"struct.blink::Referrer"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %116) #10
  %117 = call %"class.blink::ExecutionContext"* @_ZNK5blink4Node19GetExecutionContextEv(%"class.blink::Node"* %111) #10
  %118 = bitcast %"class.blink::ExecutionContext"* %117 to %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)***
  %119 = load %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)**, %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)*** %118, align 8
  %120 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)*, %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)** %119, i64 34
  %121 = load %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)*, %"class.WTF::StringImpl"* (%"class.blink::ExecutionContext"*)** %120, align 8
  %122 = call %"class.WTF::StringImpl"* %121(%"class.blink::ExecutionContext"* %117) #10
  %123 = call %"class.blink::ExecutionContext"* @_ZNK5blink4Node19GetExecutionContextEv(%"class.blink::Node"* %111) #10
  %124 = call i32 @_ZNK5blink16ExecutionContext17GetReferrerPolicyEv(%"class.blink::ExecutionContext"* %123) #10
  %125 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %125, label %149, label %126

126:                                              ; preds = %106
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 acquire, align 4
  %129 = and i32 %128, 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %147, label %131

131:                                              ; preds = %126
  %132 = load atomic i32, i32* %127 monotonic, align 4
  %133 = and i32 %132, 2
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %149

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i33
  %139 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %138, i33 1) #10
  %140 = extractvalue { i33, i1 } %139, 1
  %141 = extractvalue { i33, i1 } %139, 0
  %142 = icmp slt i33 %141, 0
  %143 = or i1 %140, %142
  br i1 %143, label %144, label %145, !prof !2

144:                                              ; preds = %135
  call void @llvm.trap() #10
  unreachable

145:                                              ; preds = %135
  %146 = trunc i33 %141 to i32
  store i32 %146, i32* %136, align 4
  br label %149

147:                                              ; preds = %126
  %148 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %122) #10
  br label %149

149:                                              ; preds = %106, %131, %145, %147
  %150 = phi %"class.WTF::StringImpl"* [ %148, %147 ], [ %122, %131 ], [ %122, %145 ], [ null, %106 ]
  %151 = ptrtoint %"class.WTF::StringImpl"* %150 to i64
  %152 = bitcast %"struct.blink::Referrer"* %8 to i64*
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds %"struct.blink::Referrer", %"struct.blink::Referrer"* %8, i64 0, i32 1
  store i32 %124, i32* %153, align 8
  %154 = call i8* @_ZN5blink8CSSValue14AllocateObjectINS_13CSSImageValueEEEPvm(i64 64) #10
  %155 = bitcast i8* %154 to %"class.blink::CSSImageValue"*
  call void @_ZN5blink13CSSImageValueC1ERKN3WTF12AtomicStringERKNS_4KURLERKNS_8ReferrerENS_11OriginCleanEbPNS_10StyleImageE(%"class.blink::CSSImageValue"* %155, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, %"class.blink::KURL"* nonnull dereferenceable(112) %7, %"struct.blink::Referrer"* nonnull dereferenceable(16) %8, i32 1, i1 zeroext false, %"class.blink::StyleImage"* null) #10
  %156 = getelementptr inbounds i8, i8* %154, i64 -4
  %157 = bitcast i8* %156 to i16*
  %158 = load atomic i16, i16* %157 monotonic, align 2
  %159 = or i16 %158, 1
  store atomic i16 %159, i16* %157 release, align 2
  %160 = getelementptr inbounds %"struct.blink::Referrer", %"struct.blink::Referrer"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %160, align 8
  %162 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %162, label %176, label %163

163:                                              ; preds = %149
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  br i1 %167, label %170, label %172

170:                                              ; preds = %163
  %171 = add i32 %169, -1
  store i32 %171, i32* %168, align 4
  br label %172

172:                                              ; preds = %170, %163
  %173 = phi i32 [ %171, %170 ], [ %169, %163 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %161) #10
  br label %176

176:                                              ; preds = %149, %172, %175
  br i1 %125, label %190, label %177

177:                                              ; preds = %176
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %177
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %177
  %187 = phi i32 [ %185, %184 ], [ %183, %177 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %122) #10
  br label %190

190:                                              ; preds = %176, %186, %189
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %116) #10
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %110) #10
  %191 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %192 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %191, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %192, null
  br i1 %193, label %207, label %194

194:                                              ; preds = %190
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 0
  %200 = load i32, i32* %199, align 4
  br i1 %198, label %201, label %203

201:                                              ; preds = %194
  %202 = add i32 %200, -1
  store i32 %202, i32* %199, align 4
  br label %203

203:                                              ; preds = %201, %194
  %204 = phi i32 [ %202, %201 ], [ %200, %194 ]
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %207

206:                                              ; preds = %203
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %192) #10
  br label %207

207:                                              ; preds = %190, %203, %206
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #10
  %208 = bitcast %"class.blink::CSSPropertyValue"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %208) #10
  %209 = bitcast %"class.blink::CSSPropertyName"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %209) #10
  %210 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %10, i64 0, i32 0
  store i32 53, i32* %210, align 8
  %211 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %10, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %211, align 8
  %212 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %9, i64 0, i32 0
  call void @_ZN5blink24CSSPropertyValueMetadataC1ERKNS_15CSSPropertyNameEbibb(%"struct.blink::CSSPropertyValueMetadata"* nonnull %212, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %10, i1 zeroext false, i32 0, i1 zeroext false, i1 zeroext false) #10
  %213 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %9, i64 0, i32 1, i32 0, i32 0
  %214 = bitcast %"class.blink::CSSValue"** %213 to i8**
  store i8* %154, i8** %214, align 8
  %215 = call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyERKNS_16CSSPropertyValueEPS1_(%"class.blink::MutableCSSPropertyValueSet"* %3, %"class.blink::CSSPropertyValue"* nonnull dereferenceable(24) %9, %"class.blink::CSSPropertyValue"* null) #10
  %216 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %216, align 8
  %218 = icmp eq %"class.WTF::StringImpl"* %217, null
  br i1 %218, label %232, label %219

219:                                              ; preds = %207
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %221 = load atomic i32, i32* %220 monotonic, align 4
  %222 = and i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 0
  %225 = load i32, i32* %224, align 4
  br i1 %223, label %226, label %228

226:                                              ; preds = %219
  %227 = add i32 %225, -1
  store i32 %227, i32* %224, align 4
  br label %228

228:                                              ; preds = %226, %219
  %229 = phi i32 [ %227, %226 ], [ %225, %219 ]
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %232

231:                                              ; preds = %228
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %217) #10
  br label %232

232:                                              ; preds = %207, %228, %231
  %233 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %211, align 8
  %234 = icmp eq %"class.WTF::StringImpl"* %233, null
  br i1 %234, label %248, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %233, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %237 = load atomic i32, i32* %236 monotonic, align 4
  %238 = and i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %233, i64 0, i32 0
  %241 = load i32, i32* %240, align 4
  br i1 %239, label %242, label %244

242:                                              ; preds = %235
  %243 = add i32 %241, -1
  store i32 %243, i32* %240, align 4
  br label %244

244:                                              ; preds = %242, %235
  %245 = phi i32 [ %243, %242 ], [ %241, %235 ]
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %248

247:                                              ; preds = %244
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %233) #10
  br label %248

248:                                              ; preds = %247, %244, %232
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %209) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %208) #10
  %249 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %250 = icmp eq %"class.WTF::StringImpl"* %249, null
  br i1 %250, label %265, label %251

251:                                              ; preds = %78, %248
  %252 = phi %"class.WTF::StringImpl"* [ %249, %248 ], [ %76, %78 ]
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load atomic i32, i32* %253 monotonic, align 4
  %255 = and i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 0
  %258 = load i32, i32* %257, align 4
  br i1 %256, label %259, label %261

259:                                              ; preds = %251
  %260 = add i32 %258, -1
  store i32 %260, i32* %257, align 4
  br label %261

261:                                              ; preds = %259, %251
  %262 = phi i32 [ %260, %259 ], [ %258, %251 ]
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %265

264:                                              ; preds = %261
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %252) #10
  br label %265

265:                                              ; preds = %72, %248, %261, %264
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #10
  br label %359

266:                                              ; preds = %67
  %267 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kValignAttrE, align 8
  %268 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %267, i64 0, i32 0, i32 0
  %269 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %268, align 8
  %270 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %269
  br i1 %270, label %271, label %282

271:                                              ; preds = %266
  %272 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %273 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %272, align 8
  %274 = icmp eq %"class.WTF::StringImpl"* %273, null
  br i1 %274, label %359, label %275

275:                                              ; preds = %271
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %273, i64 0, i32 1
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %359, label %279

279:                                              ; preds = %275
  %280 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  %281 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::Element"* %280, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 383, %"class.WTF::String"* dereferenceable(8) %281) #10
  br label %359

282:                                              ; preds = %266
  %283 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kCellspacingAttrE, align 8
  %284 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %283, i64 0, i32 0, i32 0
  %285 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %284, align 8
  %286 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %285
  br i1 %286, label %287, label %298

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %289 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %288, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %289, null
  br i1 %290, label %359, label %291

291:                                              ; preds = %287
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %359, label %295

295:                                              ; preds = %291
  %296 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %297 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement20AddHTMLLengthToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringENS0_15AllowPercentageENS0_9AllowZeroE(%"class.blink::HTMLElement"* %296, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 468, %"class.WTF::String"* dereferenceable(8) %297, i32 0, i32 1) #10
  br label %359

298:                                              ; preds = %282
  %299 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kAlignAttrE, align 8
  %300 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %299, i64 0, i32 0, i32 0
  %301 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %300, align 8
  %302 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %301
  br i1 %302, label %303, label %324

303:                                              ; preds = %298
  %304 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %305 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %304, align 8
  %306 = icmp eq %"class.WTF::StringImpl"* %305, null
  br i1 %306, label %359, label %307

307:                                              ; preds = %303
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %305, i64 0, i32 1
  %309 = load i32, i32* %308, align 4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %359, label %311

311:                                              ; preds = %307
  %312 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %312) #10
  %313 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %305, %"class.WTF::StringImpl"** %313, align 8
  %314 = load i32, i32* %308, align 4
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %305, i64 1
  %316 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %317 = bitcast i8** %316 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %315, %"class.WTF::StringImpl"** %317, align 8
  %318 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %314, i32* %318, align 8
  %319 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, [7 x i8]* nonnull dereferenceable(7) @.str.6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %312) #10
  %320 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  br i1 %319, label %321, label %322

321:                                              ; preds = %311
  call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %320, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 220, i32 405) #10
  call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %320, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 219, i32 405) #10
  br label %359

322:                                              ; preds = %311
  %323 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::Element"* %320, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 151, %"class.WTF::String"* dereferenceable(8) %323) #10
  br label %359

324:                                              ; preds = %298
  %325 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kRulesAttrE, align 8
  %326 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %325, i64 0, i32 0, i32 0
  %327 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %326, align 8
  %328 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %327
  br i1 %328, label %329, label %335

329:                                              ; preds = %324
  %330 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %359, label %333

333:                                              ; preds = %329
  %334 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %334, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 73, i32 450) #10
  br label %359

335:                                              ; preds = %324
  %336 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kFrameAttrE, align 8
  %337 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %336, i64 0, i32 0, i32 0
  %338 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %337, align 8
  %339 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %338
  br i1 %339, label %340, label %357

340:                                              ; preds = %335
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #10
  store i8 -86, i8* %12, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #10
  store i8 -86, i8* %13, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #10
  store i8 -86, i8* %14, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #10
  store i8 -86, i8* %15, align 1
  %341 = call fastcc zeroext i1 @_ZN5blinkL33GetBordersFromFrameAttributeValueERKN3WTF12AtomicStringERbS4_S4_S4_(%"class.WTF::AtomicString"* dereferenceable(8) %2, i8* nonnull dereferenceable(1) %12, i8* nonnull dereferenceable(1) %13, i8* nonnull dereferenceable(1) %14, i8* nonnull dereferenceable(1) %15)
  br i1 %341, label %342, label %356

342:                                              ; preds = %340
  %343 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %343, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 471, i32 500) #10
  %344 = load i8, i8* %12, align 1, !range !21
  %345 = icmp eq i8 %344, 0
  %346 = select i1 %345, i32 4, i32 11
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %343, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 98, i32 %346) #10
  %347 = load i8, i8* %14, align 1, !range !21
  %348 = icmp eq i8 %347, 0
  %349 = select i1 %348, i32 4, i32 11
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %343, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 71, i32 %349) #10
  %350 = load i8, i8* %15, align 1, !range !21
  %351 = icmp eq i8 %350, 0
  %352 = select i1 %351, i32 4, i32 11
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %343, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 88, i32 %352) #10
  %353 = load i8, i8* %13, align 1, !range !21
  %354 = icmp eq i8 %353, 0
  %355 = select i1 %354, i32 4, i32 11
  tail call void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"* %343, %"class.blink::MutableCSSPropertyValueSet"* %3, i32 91, i32 %355) #10
  br label %356

356:                                              ; preds = %342, %340
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10
  br label %359

357:                                              ; preds = %335
  %358 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE(%"class.blink::HTMLElement"* %358, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.blink::MutableCSSPropertyValueSet"* %3) #10
  br label %359

359:                                              ; preds = %303, %287, %271, %48, %329, %30, %56, %52, %265, %295, %291, %333, %357, %356, %307, %322, %321, %275, %279, %64, %38, %22
  ret void
}

declare void @_ZN5blink11HTMLElement20AddHTMLLengthToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringENS0_15AllowPercentageENS0_9AllowZeroE(%"class.blink::HTMLElement"*, %"class.blink::MutableCSSPropertyValueSet"*, i32, %"class.WTF::String"* dereferenceable(8), i32, i32) local_unnamed_addr #2

declare void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDEdNS_17CSSPrimitiveValue8UnitTypeE(%"class.blink::Element"*, %"class.blink::MutableCSSPropertyValueSet"*, i32, double, i32) local_unnamed_addr #2

declare i32 @_ZNK5blink11HTMLElement25ParseBorderWidthAttributeERKN3WTF12AtomicStringE(%"class.blink::HTMLElement"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink11HTMLElement19AddHTMLColorToStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::HTMLElement"*, %"class.blink::MutableCSSPropertyValueSet"*, i32, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink33StripLeadingAndTrailingHTMLSpacesERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK5blink8Document11CompleteURLERKN3WTF6StringE(%"class.blink::KURL"* sret, %"class.blink::Document"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare %"class.blink::ExecutionContext"* @_ZNK5blink4Node19GetExecutionContextEv(%"class.blink::Node"*) unnamed_addr #2

declare i32 @_ZNK5blink16ExecutionContext17GetReferrerPolicyEv(%"class.blink::ExecutionContext"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #4

declare zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyERKNS_16CSSPropertyValueEPS1_(%"class.blink::MutableCSSPropertyValueSet"*, %"class.blink::CSSPropertyValue"* dereferenceable(24), %"class.blink::CSSPropertyValue"*) local_unnamed_addr #2

declare void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDERKN3WTF6StringE(%"class.blink::Element"*, %"class.blink::MutableCSSPropertyValueSet"*, i32, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [7 x i8]* dereferenceable(7)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %141, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %183, %14, %28, %141, %155, %169, %42, %59, %77, %93, %109, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %14 ], [ false, %28 ], [ false, %141 ], [ false, %155 ], [ false, %169 ], [ %196, %183 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  ret i1 %140

141:                                              ; preds = %28
  %142 = getelementptr inbounds i8, i8* %15, i64 2
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %147, %153
  br i1 %154, label %155, label %75

155:                                              ; preds = %141
  %156 = getelementptr inbounds i8, i8* %15, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = icmp eq i32 %161, %167
  br i1 %168, label %169, label %75

169:                                              ; preds = %155
  %170 = getelementptr inbounds i8, i8* %15, i64 4
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  %182 = icmp eq i32 %175, %181
  br i1 %182, label %183, label %75

183:                                              ; preds = %169
  %184 = getelementptr inbounds i8, i8* %15, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %189, %195
  br label %75
}

declare void @_ZN5blink7Element39AddPropertyToPresentationAttributeStyleEPNS_26MutableCSSPropertyValueSetENS_13CSSPropertyIDENS_10CSSValueIDE(%"class.blink::Element"*, %"class.blink::MutableCSSPropertyValueSet"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL33GetBordersFromFrameAttributeValueERKN3WTF12AtomicStringERbS4_S4_S4_(%"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1)) unnamed_addr #0 {
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  store i8 0, i8* %1, align 1
  store i8 0, i8* %2, align 1
  store i8 0, i8* %3, align 1
  store i8 0, i8* %4, align 1
  %12 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %17, align 8
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %19 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %18, i64* %19, align 8
  br label %27

20:                                               ; preds = %5
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %21, align 8
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 1
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %26 = bitcast i8** %25 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %26, align 8
  br label %27

27:                                               ; preds = %16, %20
  %28 = phi i32 [ %23, %20 ], [ 0, %16 ]
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %28, i32* %29, align 8
  %30 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %6, [6 x i8]* nonnull dereferenceable(6) @.str.12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10
  br i1 %30, label %354, label %31

31:                                               ; preds = %27
  %32 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #10
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %35, label %39

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %36, align 8
  %37 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %38 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %37, i64* %38, align 8
  br label %46

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %40, align 8
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  %44 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %45 = bitcast i8** %44 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %45, align 8
  br label %46

46:                                               ; preds = %35, %39
  %47 = phi i32 [ %42, %39 ], [ 0, %35 ]
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %47, i32* %48, align 8
  %49 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %7, [6 x i8]* nonnull dereferenceable(6) @.str.13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #10
  br i1 %49, label %354, label %50

50:                                               ; preds = %46
  %51 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #10
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %58

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %55, align 8
  %56 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %57 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %56, i64* %57, align 8
  br label %65

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"** %59, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %63 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %64 = bitcast i8** %63 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %64, align 8
  br label %65

65:                                               ; preds = %54, %58
  %66 = phi i32 [ %61, %58 ], [ 0, %54 ]
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %66, i32* %67, align 8
  %68 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, [7 x i8]* nonnull dereferenceable(7) @.str.14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #10
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  store i8 1, i8* %3, align 1
  br label %354

70:                                               ; preds = %65
  %71 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #10
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %73, label %74, label %78

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %75, align 8
  %76 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %77 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %76, i64* %77, align 8
  br label %85

78:                                               ; preds = %70
  %79 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %72, %"class.WTF::StringImpl"** %79, align 8
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 1
  %83 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %84 = bitcast i8** %83 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %82, %"class.WTF::StringImpl"** %84, align 8
  br label %85

85:                                               ; preds = %74, %78
  %86 = phi i32 [ %81, %78 ], [ 0, %74 ]
  %87 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %86, i32* %87, align 8
  %88 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %9, [7 x i8]* nonnull dereferenceable(7) @.str.15)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #10
  br i1 %88, label %89, label %90

89:                                               ; preds = %85
  store i8 1, i8* %2, align 1
  br label %354

90:                                               ; preds = %85
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %316, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1
  %97 = bitcast %"class.WTF::StringImpl"* %96 to i8*
  %98 = icmp eq i32 %95, 3
  br i1 %98, label %99, label %314

99:                                               ; preds = %93
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %123, label %104

104:                                              ; preds = %99
  %105 = load i8, i8* %97, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %111 = sext i8 %110 to i32
  %112 = icmp eq i32 %109, %111
  br i1 %112, label %113, label %170

113:                                              ; preds = %104
  %114 = getelementptr inbounds i8, i8* %97, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 104), align 8
  %121 = sext i8 %120 to i32
  %122 = icmp eq i32 %119, %121
  br i1 %122, label %160, label %170

123:                                              ; preds = %99
  %124 = bitcast %"class.WTF::StringImpl"* %96 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = add i16 %125, -65
  %127 = icmp ult i16 %126, 26
  %128 = zext i1 %127 to i16
  %129 = shl nuw nsw i16 %128, 5
  %130 = or i16 %129, %125
  %131 = zext i16 %130 to i32
  %132 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %133 = sext i8 %132 to i32
  %134 = icmp eq i32 %131, %133
  br i1 %134, label %135, label %170

135:                                              ; preds = %123
  %136 = getelementptr inbounds i16, i16* %124, i64 1
  %137 = load i16, i16* %136, align 2
  %138 = add i16 %137, -65
  %139 = icmp ult i16 %138, 26
  %140 = zext i1 %139 to i16
  %141 = shl nuw nsw i16 %140, 5
  %142 = or i16 %141, %137
  %143 = zext i16 %142 to i32
  %144 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 104), align 8
  %145 = sext i8 %144 to i32
  %146 = icmp eq i32 %143, %145
  br i1 %146, label %147, label %170

147:                                              ; preds = %135
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1, i32 1
  %149 = bitcast i32* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = add i16 %150, -65
  %152 = icmp ult i16 %151, 26
  %153 = zext i1 %152 to i16
  %154 = shl nuw nsw i16 %153, 5
  %155 = or i16 %154, %150
  %156 = zext i16 %155 to i32
  %157 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 115), align 1
  %158 = sext i8 %157 to i32
  %159 = icmp eq i32 %156, %158
  br i1 %159, label %354, label %170

160:                                              ; preds = %113
  %161 = getelementptr inbounds i8, i8* %97, i64 2
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i64
  %164 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 115), align 1
  %168 = sext i8 %167 to i32
  %169 = icmp eq i32 %166, %168
  br i1 %169, label %354, label %170

170:                                              ; preds = %113, %104, %135, %123, %160, %147
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load atomic i32, i32* %171 monotonic, align 4
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %170
  %176 = load i8, i8* %97, align 1
  %177 = zext i8 %176 to i64
  %178 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 114), align 2
  %182 = sext i8 %181 to i32
  %183 = icmp eq i32 %180, %182
  br i1 %183, label %184, label %241

184:                                              ; preds = %175
  %185 = getelementptr inbounds i8, i8* %97, i64 1
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i64
  %188 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 104), align 8
  %192 = sext i8 %191 to i32
  %193 = icmp eq i32 %190, %192
  br i1 %193, label %231, label %241

194:                                              ; preds = %170
  %195 = bitcast %"class.WTF::StringImpl"* %96 to i16*
  %196 = load i16, i16* %195, align 2
  %197 = add i16 %196, -65
  %198 = icmp ult i16 %197, 26
  %199 = zext i1 %198 to i16
  %200 = shl nuw nsw i16 %199, 5
  %201 = or i16 %200, %196
  %202 = zext i16 %201 to i32
  %203 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 114), align 2
  %204 = sext i8 %203 to i32
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %206, label %241

206:                                              ; preds = %194
  %207 = getelementptr inbounds i16, i16* %195, i64 1
  %208 = load i16, i16* %207, align 2
  %209 = add i16 %208, -65
  %210 = icmp ult i16 %209, 26
  %211 = zext i1 %210 to i16
  %212 = shl nuw nsw i16 %211, 5
  %213 = or i16 %212, %208
  %214 = zext i16 %213 to i32
  %215 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 104), align 8
  %216 = sext i8 %215 to i32
  %217 = icmp eq i32 %214, %216
  br i1 %217, label %218, label %241

218:                                              ; preds = %206
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1, i32 1
  %220 = bitcast i32* %219 to i16*
  %221 = load i16, i16* %220, align 2
  %222 = add i16 %221, -65
  %223 = icmp ult i16 %222, 26
  %224 = zext i1 %223 to i16
  %225 = shl nuw nsw i16 %224, 5
  %226 = or i16 %225, %221
  %227 = zext i16 %226 to i32
  %228 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 115), align 1
  %229 = sext i8 %228 to i32
  %230 = icmp eq i32 %227, %229
  br i1 %230, label %354, label %241

231:                                              ; preds = %184
  %232 = getelementptr inbounds i8, i8* %97, i64 2
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 115), align 1
  %239 = sext i8 %238 to i32
  %240 = icmp eq i32 %237, %239
  br i1 %240, label %354, label %241

241:                                              ; preds = %184, %175, %206, %194, %231, %218
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load atomic i32, i32* %242 monotonic, align 4
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %265, label %246

246:                                              ; preds = %241
  %247 = load i8, i8* %97, align 1
  %248 = zext i8 %247 to i64
  %249 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 98), align 2
  %253 = sext i8 %252 to i32
  %254 = icmp eq i32 %251, %253
  br i1 %254, label %255, label %314

255:                                              ; preds = %246
  %256 = getelementptr inbounds i8, i8* %97, i64 1
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 111), align 1
  %263 = sext i8 %262 to i32
  %264 = icmp eq i32 %261, %263
  br i1 %264, label %303, label %314

265:                                              ; preds = %241
  %266 = bitcast %"class.WTF::StringImpl"* %96 to i16*
  %267 = load i16, i16* %266, align 2
  %268 = add i16 %267, -65
  %269 = icmp ult i16 %268, 26
  %270 = zext i1 %269 to i16
  %271 = shl nuw nsw i16 %270, 5
  %272 = or i16 %271, %267
  %273 = zext i16 %272 to i32
  %274 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 98), align 2
  %275 = sext i8 %274 to i32
  %276 = icmp eq i32 %273, %275
  br i1 %276, label %277, label %314

277:                                              ; preds = %265
  %278 = getelementptr inbounds i16, i16* %266, i64 1
  %279 = load i16, i16* %278, align 2
  %280 = add i16 %279, -65
  %281 = icmp ult i16 %280, 26
  %282 = zext i1 %281 to i16
  %283 = shl nuw nsw i16 %282, 5
  %284 = or i16 %283, %279
  %285 = zext i16 %284 to i32
  %286 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 111), align 1
  %287 = sext i8 %286 to i32
  %288 = icmp eq i32 %285, %287
  br i1 %288, label %289, label %314

289:                                              ; preds = %277
  %290 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1, i32 1
  %291 = bitcast i32* %290 to i16*
  %292 = load i16, i16* %291, align 2
  %293 = add i16 %292, -65
  %294 = icmp ult i16 %293, 26
  %295 = zext i1 %294 to i16
  %296 = shl nuw nsw i16 %295, 5
  %297 = or i16 %296, %292
  %298 = zext i16 %297 to i32
  %299 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 120), align 8
  %300 = sext i8 %299 to i32
  %301 = icmp eq i32 %298, %300
  %302 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %302) #10
  br i1 %301, label %332, label %321

303:                                              ; preds = %255
  %304 = getelementptr inbounds i8, i8* %97, i64 2
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i64
  %307 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 120), align 8
  %311 = sext i8 %310 to i32
  %312 = icmp eq i32 %309, %311
  %313 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %313) #10
  br i1 %312, label %332, label %321

314:                                              ; preds = %93, %265, %277, %246, %255
  %315 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %315) #10
  br label %321

316:                                              ; preds = %90
  %317 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %317) #10
  %318 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %318, align 8
  %319 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %320 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %319, i64* %320, align 8
  br label %327

321:                                              ; preds = %303, %289, %314
  %322 = phi i8* [ %315, %314 ], [ %302, %289 ], [ %313, %303 ]
  %323 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %91, %"class.WTF::StringImpl"** %323, align 8
  %324 = load i32, i32* %94, align 4
  %325 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %326 = bitcast i8** %325 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %326, align 8
  br label %327

327:                                              ; preds = %316, %321
  %328 = phi i8* [ %322, %321 ], [ %317, %316 ]
  %329 = phi i32 [ %324, %321 ], [ 0, %316 ]
  %330 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %329, i32* %330, align 8
  %331 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, [7 x i8]* nonnull dereferenceable(7) @.str.19)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %328) #10
  br i1 %331, label %334, label %335

332:                                              ; preds = %289, %303
  %333 = phi i8* [ %302, %289 ], [ %313, %303 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %333) #10
  br label %334

334:                                              ; preds = %332, %327
  store i8 1, i8* %2, align 1
  store i8 1, i8* %4, align 1
  store i8 1, i8* %3, align 1
  br label %354

335:                                              ; preds = %327
  %336 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %336) #10
  %337 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %338 = icmp eq %"class.WTF::StringImpl"* %337, null
  br i1 %338, label %339, label %343

339:                                              ; preds = %335
  %340 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %340, align 8
  %341 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %342 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %341, i64* %342, align 8
  br label %350

343:                                              ; preds = %335
  %344 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %337, %"class.WTF::StringImpl"** %344, align 8
  %345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %337, i64 0, i32 1
  %346 = load i32, i32* %345, align 4
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %337, i64 1
  %348 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %349 = bitcast i8** %348 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %347, %"class.WTF::StringImpl"** %349, align 8
  br label %350

350:                                              ; preds = %339, %343
  %351 = phi i32 [ %346, %343 ], [ 0, %339 ]
  %352 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %351, i32* %352, align 8
  %353 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, [5 x i8]* nonnull dereferenceable(5) @.str.20)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %336) #10
  br i1 %353, label %356, label %357

354:                                              ; preds = %231, %218, %160, %147, %46, %27, %69, %334, %89
  %355 = phi i8* [ %4, %89 ], [ %1, %334 ], [ %1, %69 ], [ %1, %27 ], [ %3, %46 ], [ %4, %147 ], [ %4, %160 ], [ %2, %218 ], [ %2, %231 ]
  store i8 1, i8* %355, align 1
  br label %356

356:                                              ; preds = %354, %350
  br label %357

357:                                              ; preds = %350, %356
  %358 = phi i1 [ true, %356 ], [ false, %350 ]
  ret i1 %358
}

declare void @_ZN5blink11HTMLElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE(%"class.blink::HTMLElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::MutableCSSPropertyValueSet"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16HTMLTableElement23IsPresentationAttributeERKNS_13QualifiedNameE(%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kWidthAttrE, align 8
  %4 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %3, i64 0, i32 0, i32 0
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %8 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %7
  br i1 %8, label %72, label %9

9:                                                ; preds = %2
  %10 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kHeightAttrE, align 8
  %11 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %13 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %12
  br i1 %13, label %72, label %14

14:                                               ; preds = %9
  %15 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names12kBgcolorAttrE, align 8
  %16 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  %17 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %16, align 8
  %18 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %17
  br i1 %18, label %72, label %19

19:                                               ; preds = %14
  %20 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kBackgroundAttrE, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %20, i64 0, i32 0, i32 0
  %22 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %21, align 8
  %23 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %22
  br i1 %23, label %72, label %24

24:                                               ; preds = %19
  %25 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kValignAttrE, align 8
  %26 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %25, i64 0, i32 0, i32 0
  %27 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %26, align 8
  %28 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %27
  br i1 %28, label %72, label %29

29:                                               ; preds = %24
  %30 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kVspaceAttrE, align 8
  %31 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %30, i64 0, i32 0, i32 0
  %32 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %31, align 8
  %33 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %32
  br i1 %33, label %72, label %34

34:                                               ; preds = %29
  %35 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kHspaceAttrE, align 8
  %36 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %35, i64 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %37
  br i1 %38, label %72, label %39

39:                                               ; preds = %34
  %40 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kAlignAttrE, align 8
  %41 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %40, i64 0, i32 0, i32 0
  %42 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %41, align 8
  %43 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %42
  br i1 %43, label %72, label %44

44:                                               ; preds = %39
  %45 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kCellspacingAttrE, align 8
  %46 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %45, i64 0, i32 0, i32 0
  %47 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %46, align 8
  %48 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %47
  br i1 %48, label %72, label %49

49:                                               ; preds = %44
  %50 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kBorderAttrE, align 8
  %51 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %51, align 8
  %53 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %52
  br i1 %53, label %72, label %54

54:                                               ; preds = %49
  %55 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kBordercolorAttrE, align 8
  %56 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %55, i64 0, i32 0, i32 0
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %56, align 8
  %58 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %57
  br i1 %58, label %72, label %59

59:                                               ; preds = %54
  %60 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kFrameAttrE, align 8
  %61 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %60, i64 0, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %62
  br i1 %63, label %72, label %64

64:                                               ; preds = %59
  %65 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kRulesAttrE, align 8
  %66 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %65, i64 0, i32 0, i32 0
  %67 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %66, align 8
  %68 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %67
  br i1 %68, label %72, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %71 = tail call zeroext i1 @_ZNK5blink11HTMLElement23IsPresentationAttributeERKNS_13QualifiedNameE(%"class.blink::HTMLElement"* %70, %"class.blink::QualifiedName"* dereferenceable(8) %1) #10
  br label %72

72:                                               ; preds = %2, %9, %14, %19, %24, %29, %34, %39, %44, %49, %54, %59, %64, %69
  %73 = phi i1 [ %71, %69 ], [ true, %64 ], [ true, %59 ], [ true, %54 ], [ true, %49 ], [ true, %44 ], [ true, %39 ], [ true, %34 ], [ true, %29 ], [ true, %24 ], [ true, %19 ], [ true, %14 ], [ true, %9 ], [ true, %2 ]
  ret i1 %73
}

declare zeroext i1 @_ZNK5blink11HTMLElement23IsPresentationAttributeERKNS_13QualifiedNameE(%"class.blink::HTMLElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HTMLTableElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::HTMLTableElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 0
  %12 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  switch i32 %14, label %27 [
    i32 0, label %18
    i32 3, label %17
    i32 5, label %15
    i32 4, label %16
  ]

15:                                               ; preds = %2
  br label %27

16:                                               ; preds = %2
  br label %27

17:                                               ; preds = %2
  br label %27

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %20 = load i8, i8* %19, align 8, !range !21
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  %24 = load i8, i8* %23, align 1, !range !21
  %25 = icmp eq i8 %24, 0
  %26 = select i1 %25, i32 2, i32 1
  br label %27

27:                                               ; preds = %2, %15, %16, %17, %18, %22
  %28 = phi i32 [ 4, %17 ], [ 3, %16 ], [ 1, %15 ], [ 0, %18 ], [ %26, %22 ], [ 0, %2 ]
  %29 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 5
  %30 = load i16, i16* %29, align 8
  %31 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names11kBorderAttrE, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %12, i64 0, i32 0, i32 0
  %33 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %31, i64 0, i32 0, i32 0
  %35 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %34, align 8
  %36 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %35
  br i1 %36, label %37, label %45

37:                                               ; preds = %27
  %38 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  %39 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %40 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %39, align 8
  %41 = tail call i32 @_ZNK5blink11HTMLElement25ParseBorderWidthAttributeERKN3WTF12AtomicStringE(%"class.blink::HTMLElement"* %38, %"class.WTF::AtomicString"* dereferenceable(8) %40) #10
  %42 = icmp ne i32 %41, 0
  %43 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %44 = zext i1 %42 to i8
  store i8 %44, i8* %43, align 8
  br label %277

45:                                               ; preds = %27
  %46 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kBordercolorAttrE, align 8
  %47 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %46, i64 0, i32 0, i32 0
  %48 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %47, align 8
  %49 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %48
  br i1 %49, label %50, label %64

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %52 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %51, align 8
  %53 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %52, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = icmp ne i32 %58, 0
  %60 = zext i1 %59 to i8
  br label %61

61:                                               ; preds = %50, %56
  %62 = phi i8 [ 0, %50 ], [ %60, %56 ]
  %63 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  store i8 %62, i8* %63, align 1
  br label %277

64:                                               ; preds = %45
  %65 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kFrameAttrE, align 8
  %66 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %65, i64 0, i32 0, i32 0
  %67 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %66, align 8
  %68 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %67
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #10
  store i8 -86, i8* %3, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 -86, i8* %5, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #10
  store i8 -86, i8* %6, align 1
  %70 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %71 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %70, align 8
  %72 = call fastcc zeroext i1 @_ZN5blinkL33GetBordersFromFrameAttributeValueERKN3WTF12AtomicStringERbS4_S4_S4_(%"class.WTF::AtomicString"* dereferenceable(8) %71, i8* nonnull dereferenceable(1) %3, i8* nonnull dereferenceable(1) %4, i8* nonnull dereferenceable(1) %5, i8* nonnull dereferenceable(1) %6)
  %73 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 3
  %74 = zext i1 %72 to i8
  store i8 %74, i8* %73, align 2
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #10
  br label %277

75:                                               ; preds = %64
  %76 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kRulesAttrE, align 8
  %77 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %76, i64 0, i32 0, i32 0
  %78 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %77, align 8
  %79 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %78
  br i1 %79, label %80, label %246

80:                                               ; preds = %75
  store i32 0, i32* %13, align 4
  %81 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #10
  %82 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %83 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %82, align 8
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %83, i64 0, i32 0, i32 0, i32 0
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %86, label %87, label %91

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %88, align 8
  %89 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %90 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %89, i64* %90, align 8
  br label %98

91:                                               ; preds = %80
  %92 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %85, %"class.WTF::StringImpl"** %92, align 8
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 1
  %96 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %97 = bitcast i8** %96 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %95, %"class.WTF::StringImpl"** %97, align 8
  br label %98

98:                                               ; preds = %87, %91
  %99 = phi i32 [ %94, %91 ], [ 0, %87 ]
  %100 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %99, i32* %100, align 8
  %101 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %7, [5 x i8]* nonnull dereferenceable(5) @.str.7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #10
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  store i32 1, i32* %13, align 4
  br label %291

103:                                              ; preds = %98
  %104 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #10
  %105 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %82, align 8
  %106 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %105, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %109, label %113

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %110, align 8
  %111 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %112 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %111, i64* %112, align 8
  br label %120

113:                                              ; preds = %103
  %114 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %107, %"class.WTF::StringImpl"** %114, align 8
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 1
  %118 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %119 = bitcast i8** %118 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %119, align 8
  br label %120

120:                                              ; preds = %109, %113
  %121 = phi i32 [ %116, %113 ], [ 0, %109 ]
  %122 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %121, i32* %122, align 8
  %123 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, [7 x i8]* nonnull dereferenceable(7) @.str.8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #10
  br i1 %123, label %124, label %125

124:                                              ; preds = %120
  store i32 2, i32* %13, align 4
  br label %291

125:                                              ; preds = %120
  %126 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %126) #10
  %127 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %82, align 8
  %128 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %127, i64 0, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %131, label %135

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %132, align 8
  %133 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %134 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %133, i64* %134, align 8
  br label %142

135:                                              ; preds = %125
  %136 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %129, %"class.WTF::StringImpl"** %136, align 8
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 1
  %140 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %141 = bitcast i8** %140 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %139, %"class.WTF::StringImpl"** %141, align 8
  br label %142

142:                                              ; preds = %131, %135
  %143 = phi i32 [ %138, %135 ], [ 0, %131 ]
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %143, i32* %144, align 8
  %145 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %9, [5 x i8]* nonnull dereferenceable(5) @.str.9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %126) #10
  br i1 %145, label %146, label %147

146:                                              ; preds = %142
  store i32 3, i32* %13, align 4
  br label %281

147:                                              ; preds = %142
  %148 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #10
  %149 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %82, align 8
  %150 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %149, i64 0, i32 0, i32 0, i32 0
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %150, align 8
  %152 = icmp eq %"class.WTF::StringImpl"* %151, null
  br i1 %152, label %153, label %157

153:                                              ; preds = %147
  %154 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %154, align 8
  %155 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %156 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %155, i64* %156, align 8
  br label %164

157:                                              ; preds = %147
  %158 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %151, %"class.WTF::StringImpl"** %158, align 8
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 1
  %162 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %163 = bitcast i8** %162 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %163, align 8
  br label %164

164:                                              ; preds = %153, %157
  %165 = phi i32 [ %160, %157 ], [ 0, %153 ]
  %166 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %165, i32* %166, align 8
  %167 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, [5 x i8]* nonnull dereferenceable(5) @.str.10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #10
  br i1 %167, label %168, label %169

168:                                              ; preds = %164
  store i32 4, i32* %13, align 4
  br label %280

169:                                              ; preds = %164
  %170 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %82, align 8
  %171 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %170, i64 0, i32 0, i32 0, i32 0
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %171, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %277, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 1
  %178 = bitcast %"class.WTF::StringImpl"* %177 to i8*
  %179 = icmp eq i32 %176, 3
  br i1 %179, label %180, label %277

180:                                              ; preds = %174
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %204, label %185

185:                                              ; preds = %180
  %186 = load i8, i8* %178, align 1
  %187 = zext i8 %186 to i64
  %188 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 97), align 1
  %192 = sext i8 %191 to i32
  %193 = icmp eq i32 %190, %192
  br i1 %193, label %194, label %277

194:                                              ; preds = %185
  %195 = getelementptr inbounds i8, i8* %178, i64 1
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %202 = sext i8 %201 to i32
  %203 = icmp eq i32 %200, %202
  br i1 %203, label %238, label %277

204:                                              ; preds = %180
  %205 = bitcast %"class.WTF::StringImpl"* %177 to i16*
  %206 = load i16, i16* %205, align 2
  %207 = add i16 %206, -65
  %208 = icmp ult i16 %207, 26
  %209 = zext i1 %208 to i16
  %210 = shl nuw nsw i16 %209, 5
  %211 = or i16 %210, %206
  %212 = zext i16 %211 to i32
  %213 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 97), align 1
  %214 = sext i8 %213 to i32
  %215 = icmp eq i32 %212, %214
  br i1 %215, label %216, label %277

216:                                              ; preds = %204
  %217 = getelementptr inbounds i16, i16* %205, i64 1
  %218 = load i16, i16* %217, align 2
  %219 = add i16 %218, -65
  %220 = icmp ult i16 %219, 26
  %221 = zext i1 %220 to i16
  %222 = shl nuw nsw i16 %221, 5
  %223 = or i16 %222, %218
  %224 = zext i16 %223 to i32
  %225 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %226 = sext i8 %225 to i32
  %227 = icmp eq i32 %224, %226
  br i1 %227, label %228, label %277

228:                                              ; preds = %216
  %229 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 1, i32 1
  %230 = bitcast i32* %229 to i16*
  %231 = load i16, i16* %230, align 2
  %232 = add i16 %231, -65
  %233 = icmp ult i16 %232, 26
  %234 = zext i1 %233 to i16
  %235 = shl nuw nsw i16 %234, 5
  %236 = or i16 %235, %231
  %237 = icmp eq i16 %236, %223
  br i1 %237, label %245, label %277

238:                                              ; preds = %194
  %239 = getelementptr inbounds i8, i8* %178, i64 2
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, %199
  br i1 %244, label %245, label %277

245:                                              ; preds = %238, %228
  store i32 5, i32* %13, align 4
  br label %279

246:                                              ; preds = %75
  %247 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names16kCellpaddingAttrE, align 8
  %248 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %248, align 8
  %250 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %249
  br i1 %250, label %251, label %270

251:                                              ; preds = %246
  %252 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %253 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %252, align 8
  %254 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %253, i64 0, i32 0, i32 0, i32 0
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %254, align 8
  %256 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %256, label %269, label %257

257:                                              ; preds = %251
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 1
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %269, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %253, i64 0, i32 0
  %263 = tail call i32 @_ZNK3WTF6String5ToIntEPb(%"class.WTF::String"* %262, i8* null) #10
  %264 = icmp slt i32 %263, 65535
  %265 = select i1 %264, i32 %263, i32 65535
  %266 = icmp sgt i32 %265, 0
  %267 = select i1 %266, i32 %265, i32 0
  %268 = trunc i32 %267 to i16
  store i16 %268, i16* %29, align 8
  br label %277

269:                                              ; preds = %251, %257
  store i16 1, i16* %29, align 8
  br label %277

270:                                              ; preds = %246
  %271 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kColsAttrE, align 8
  %272 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %271, i64 0, i32 0, i32 0
  %273 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %272, align 8
  %274 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %33, %273
  br i1 %274, label %277, label %275

275:                                              ; preds = %270
  %276 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0
  tail call void @_ZN5blink11HTMLElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::HTMLElement"* %276, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32) %1) #10
  br label %277

277:                                              ; preds = %169, %194, %185, %216, %204, %174, %228, %61, %238, %275, %270, %261, %269, %69, %37
  %278 = load i32, i32* %13, align 4
  switch i32 %278, label %291 [
    i32 0, label %282
    i32 3, label %281
    i32 5, label %279
    i32 4, label %280
  ]

279:                                              ; preds = %245, %277
  br label %291

280:                                              ; preds = %168, %277
  br label %291

281:                                              ; preds = %146, %277
  br label %291

282:                                              ; preds = %277
  %283 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %284 = load i8, i8* %283, align 8, !range !21
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %291, label %286

286:                                              ; preds = %282
  %287 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  %288 = load i8, i8* %287, align 1, !range !21
  %289 = icmp eq i8 %288, 0
  %290 = select i1 %289, i32 2, i32 1
  br label %291

291:                                              ; preds = %102, %124, %277, %279, %280, %281, %282, %286
  %292 = phi i32 [ 4, %281 ], [ 3, %280 ], [ 1, %279 ], [ 0, %282 ], [ %290, %286 ], [ 0, %277 ], [ 0, %124 ], [ 0, %102 ]
  %293 = icmp eq i32 %28, %292
  br i1 %293, label %294, label %297

294:                                              ; preds = %291
  %295 = load i16, i16* %29, align 8
  %296 = icmp eq i16 %30, %295
  br i1 %296, label %300, label %297

297:                                              ; preds = %294, %291
  %298 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 6
  %299 = bitcast %"class.blink::Member.14"* %298 to i64*
  store atomic i64 0, i64* %299 monotonic, align 8
  call void @_ZNK5blink16HTMLTableElement24SetNeedsTableStyleRecalcEv(%"class.blink::HTMLTableElement"* %0)
  br label %300

300:                                              ; preds = %294, %297
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink16HTMLTableElement14GetCellBordersEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %16 [
    i32 0, label %7
    i32 3, label %6
    i32 5, label %4
    i32 4, label %5
  ]

4:                                                ; preds = %1
  br label %16

5:                                                ; preds = %1
  br label %16

6:                                                ; preds = %1
  br label %16

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 8, !range !21
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 1, !range !21
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i32 2, i32 1
  br label %16

16:                                               ; preds = %1, %11, %7, %6, %5, %4
  %17 = phi i32 [ 4, %6 ], [ 3, %5 ], [ 1, %4 ], [ 0, %7 ], [ %15, %11 ], [ 0, %1 ]
  ret i32 %17
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [5 x i8]* dereferenceable(5)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 4
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %109, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %123, %14, %28, %109, %42, %59, %77, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %14 ], [ false, %28 ], [ false, %109 ], [ %136, %123 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  ret i1 %108

109:                                              ; preds = %28
  %110 = getelementptr inbounds i8, i8* %15, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 2
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp eq i32 %115, %121
  br i1 %122, label %123, label %75

123:                                              ; preds = %109
  %124 = getelementptr inbounds i8, i8* %15, i64 3
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i64
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = sext i8 %134 to i32
  %136 = icmp eq i32 %129, %135
  br label %75
}

declare void @_ZN5blink11HTMLElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::HTMLElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSPropertyValueSet"* @_ZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEv(%"class.blink::HTMLTableElement"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 2, !range !21
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %159

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !21
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  %10 = load i8, i8* %9, align 1, !range !21
  %11 = icmp eq i8 %10, 0
  br i1 %8, label %12, label %64

12:                                               ; preds = %5
  br i1 %11, label %13, label %65

13:                                               ; preds = %12
  %14 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %159, label %17

17:                                               ; preds = %13
  %18 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style to i8*) acquire, align 8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %62, !prof !22

20:                                               ; preds = %17
  %21 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style) #10
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %62, label %23

23:                                               ; preds = %20
  %24 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %25 = bitcast i8* %24 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %25, i8 zeroext 1) #10
  %26 = getelementptr inbounds i8, i8* %24, i64 -4
  %27 = bitcast i8* %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = or i16 %28, 1
  store atomic i16 %29, i16* %27 release, align 2
  %30 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %25, i32 98, i32 4, i1 zeroext false) #10
  %31 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %25, i32 71, i32 4, i1 zeroext false) #10
  %32 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %25, i32 88, i32 4, i1 zeroext false) #10
  %33 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %25, i32 91, i32 4, i1 zeroext false) #10
  store i8* %24, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %34 = ptrtoint i8* %24 to i64
  switch i64 %34, label %35 [
    i64 0, label %61
    i64 -1, label %61
  ]

35:                                               ; preds = %23
  %36 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %37 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %36, i64 0, i32 1
  %38 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %37) #10
  %39 = icmp eq i8* %38, null
  br i1 %39, label %40, label %42, !prof !2

40:                                               ; preds = %35
  %41 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %37, i8* %41) #10
  br label %42

42:                                               ; preds = %40, %35
  %43 = phi i8* [ %41, %40 ], [ %38, %35 ]
  %44 = bitcast i8* %43 to %"class.blink::ThreadState"**
  %45 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %45, i64 0, i32 3, i32 0, i32 0, i32 0
  %47 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %47, i64 0, i32 0, i32 0
  %49 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %48, align 8
  %50 = icmp eq %"class.blink::PersistentNode"* %49, null
  br i1 %50, label %51, label %54, !prof !2

51:                                               ; preds = %42
  %52 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %47, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %52) #10
  %53 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %48, align 8
  br label %54

54:                                               ; preds = %51, %42
  %55 = phi %"class.blink::PersistentNode"* [ %53, %51 ], [ %49, %42 ]
  %56 = bitcast %"class.blink::PersistentNode"* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.blink::PersistentRegion"* %47 to i64*
  store i64 %57, i64* %58, align 8
  %59 = bitcast %"class.blink::PersistentNode"* %55 to %"class.blink::PersistentBase.640"**
  store %"class.blink::PersistentBase.640"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style to %"class.blink::PersistentBase.640"*), %"class.blink::PersistentBase.640"** %59, align 8
  %60 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %55, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %60, align 8
  store %"class.blink::PersistentNode"* %55, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %61

61:                                               ; preds = %23, %23, %54
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style) #10
  br label %62

62:                                               ; preds = %20, %61, %17
  %63 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style to %"class.blink::CSSPropertyValueSet"**), align 8
  br label %159

64:                                               ; preds = %5
  br i1 %11, label %112, label %65

65:                                               ; preds = %12, %64
  %66 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 to i8*) acquire, align 8
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %110, !prof !22

68:                                               ; preds = %65
  %69 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0) #10
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %110, label %71

71:                                               ; preds = %68
  %72 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %73 = bitcast i8* %72 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %73, i8 zeroext 1) #10
  %74 = getelementptr inbounds i8, i8* %72, i64 -4
  %75 = bitcast i8* %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = or i16 %76, 1
  store atomic i16 %77, i16* %75 release, align 2
  %78 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %73, i32 98, i32 11, i1 zeroext false) #10
  %79 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %73, i32 71, i32 11, i1 zeroext false) #10
  %80 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %73, i32 88, i32 11, i1 zeroext false) #10
  %81 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %73, i32 91, i32 11, i1 zeroext false) #10
  store i8* %72, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %82 = ptrtoint i8* %72 to i64
  switch i64 %82, label %83 [
    i64 0, label %109
    i64 -1, label %109
  ]

83:                                               ; preds = %71
  %84 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %85 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %84, i64 0, i32 1
  %86 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %85) #10
  %87 = icmp eq i8* %86, null
  br i1 %87, label %88, label %90, !prof !2

88:                                               ; preds = %83
  %89 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %85, i8* %89) #10
  br label %90

90:                                               ; preds = %88, %83
  %91 = phi i8* [ %89, %88 ], [ %86, %83 ]
  %92 = bitcast i8* %91 to %"class.blink::ThreadState"**
  %93 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %92, align 8
  %94 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %93, i64 0, i32 3, i32 0, i32 0, i32 0
  %95 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %94, align 8
  %96 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %95, i64 0, i32 0, i32 0
  %97 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %96, align 8
  %98 = icmp eq %"class.blink::PersistentNode"* %97, null
  br i1 %98, label %99, label %102, !prof !2

99:                                               ; preds = %90
  %100 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %95, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %100) #10
  %101 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %96, align 8
  br label %102

102:                                              ; preds = %99, %90
  %103 = phi %"class.blink::PersistentNode"* [ %101, %99 ], [ %97, %90 ]
  %104 = bitcast %"class.blink::PersistentNode"* %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.blink::PersistentRegion"* %95 to i64*
  store i64 %105, i64* %106, align 8
  %107 = bitcast %"class.blink::PersistentNode"* %103 to %"class.blink::PersistentBase.640"**
  store %"class.blink::PersistentBase.640"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 to %"class.blink::PersistentBase.640"*), %"class.blink::PersistentBase.640"** %107, align 8
  %108 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %103, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %108, align 8
  store %"class.blink::PersistentNode"* %103, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %109

109:                                              ; preds = %71, %71, %102
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0) #10
  br label %110

110:                                              ; preds = %68, %109, %65
  %111 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE20s_solid_border_style_0 to %"class.blink::CSSPropertyValueSet"**), align 8
  br label %159

112:                                              ; preds = %64
  %113 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style to i8*) acquire, align 8
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %115, label %157, !prof !22

115:                                              ; preds = %112
  %116 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style) #10
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %157, label %118

118:                                              ; preds = %115
  %119 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %120 = bitcast i8* %119 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %120, i8 zeroext 1) #10
  %121 = getelementptr inbounds i8, i8* %119, i64 -4
  %122 = bitcast i8* %121 to i16*
  %123 = load atomic i16, i16* %122 monotonic, align 2
  %124 = or i16 %123, 1
  store atomic i16 %124, i16* %122 release, align 2
  %125 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %120, i32 98, i32 7, i1 zeroext false) #10
  %126 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %120, i32 71, i32 7, i1 zeroext false) #10
  %127 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %120, i32 88, i32 7, i1 zeroext false) #10
  %128 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %120, i32 91, i32 7, i1 zeroext false) #10
  store i8* %119, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %129 = ptrtoint i8* %119 to i64
  switch i64 %129, label %130 [
    i64 0, label %156
    i64 -1, label %156
  ]

130:                                              ; preds = %118
  %131 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %132 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %131, i64 0, i32 1
  %133 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %132) #10
  %134 = icmp eq i8* %133, null
  br i1 %134, label %135, label %137, !prof !2

135:                                              ; preds = %130
  %136 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %132, i8* %136) #10
  br label %137

137:                                              ; preds = %135, %130
  %138 = phi i8* [ %136, %135 ], [ %133, %130 ]
  %139 = bitcast i8* %138 to %"class.blink::ThreadState"**
  %140 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %139, align 8
  %141 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %140, i64 0, i32 3, i32 0, i32 0, i32 0
  %142 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %141, align 8
  %143 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %142, i64 0, i32 0, i32 0
  %144 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %143, align 8
  %145 = icmp eq %"class.blink::PersistentNode"* %144, null
  br i1 %145, label %146, label %149, !prof !2

146:                                              ; preds = %137
  %147 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %142, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %147) #10
  %148 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %143, align 8
  br label %149

149:                                              ; preds = %146, %137
  %150 = phi %"class.blink::PersistentNode"* [ %148, %146 ], [ %144, %137 ]
  %151 = bitcast %"class.blink::PersistentNode"* %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = bitcast %"class.blink::PersistentRegion"* %142 to i64*
  store i64 %152, i64* %153, align 8
  %154 = bitcast %"class.blink::PersistentNode"* %150 to %"class.blink::PersistentBase.640"**
  store %"class.blink::PersistentBase.640"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style to %"class.blink::PersistentBase.640"*), %"class.blink::PersistentBase.640"** %154, align 8
  %155 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %150, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %155, align 8
  store %"class.blink::PersistentNode"* %150, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %156

156:                                              ; preds = %118, %118, %149
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style) #10
  br label %157

157:                                              ; preds = %115, %156, %112
  %158 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement36AdditionalPresentationAttributeStyleEvE21s_outset_border_style to %"class.blink::CSSPropertyValueSet"**), align 8
  br label %159

159:                                              ; preds = %13, %1, %157, %110, %62
  %160 = phi %"class.blink::CSSPropertyValueSet"* [ %111, %110 ], [ %158, %157 ], [ %63, %62 ], [ null, %1 ], [ null, %13 ]
  ret %"class.blink::CSSPropertyValueSet"* %160
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSPropertyValueSet"* @_ZN5blink16HTMLTableElement21CreateSharedCellStyleEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %3 = bitcast i8* %2 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %3, i8 zeroext 1) #10
  %4 = getelementptr inbounds i8, i8* %2, i64 -4
  %5 = bitcast i8* %4 to i16*
  %6 = load atomic i16, i16* %5 monotonic, align 2
  %7 = or i16 %6, 1
  store atomic i16 %7, i16* %5 release, align 2
  %8 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  switch i32 %9, label %46 [
    i32 0, label %10
    i32 3, label %25
    i32 5, label %32
    i32 4, label %18
  ]

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 1
  %12 = load i8, i8* %11, align 8, !range !21
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %46, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 1, !range !21
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %39, label %32

18:                                               ; preds = %1
  %19 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 89, i32 500, i1 zeroext false) #10
  %20 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 92, i32 500, i1 zeroext false) #10
  %21 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 88, i32 11, i1 zeroext false) #10
  %22 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 91, i32 11, i1 zeroext false) #10
  %23 = tail call %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() #10
  %24 = getelementptr inbounds %"class.blink::CSSInheritedValue", %"class.blink::CSSInheritedValue"* %23, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 457, %"class.blink::CSSValue"* dereferenceable(3) %24, i1 zeroext false) #10
  br label %46

25:                                               ; preds = %1
  %26 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 99, i32 500, i1 zeroext false) #10
  %27 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 72, i32 500, i1 zeroext false) #10
  %28 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 98, i32 11, i1 zeroext false) #10
  %29 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 71, i32 11, i1 zeroext false) #10
  %30 = tail call %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() #10
  %31 = getelementptr inbounds %"class.blink::CSSInheritedValue", %"class.blink::CSSInheritedValue"* %30, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 457, %"class.blink::CSSValue"* dereferenceable(3) %31, i1 zeroext false) #10
  br label %46

32:                                               ; preds = %1, %14
  %33 = tail call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double 1.000000e+00, i32 5) #10
  %34 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %33, i64 0, i32 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 471, %"class.blink::CSSValue"* dereferenceable(3) %34, i1 zeroext false) #10
  %35 = tail call %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32 11) #10
  %36 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %35, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 469, %"class.blink::CSSValue"* dereferenceable(3) %36, i1 zeroext false) #10
  %37 = tail call %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() #10
  %38 = getelementptr inbounds %"class.blink::CSSInheritedValue", %"class.blink::CSSInheritedValue"* %37, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 457, %"class.blink::CSSValue"* dereferenceable(3) %38, i1 zeroext false) #10
  br label %46

39:                                               ; preds = %14
  %40 = tail call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double 1.000000e+00, i32 5) #10
  %41 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %40, i64 0, i32 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 471, %"class.blink::CSSValue"* dereferenceable(3) %41, i1 zeroext false) #10
  %42 = tail call %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32 5) #10
  %43 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %42, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 469, %"class.blink::CSSValue"* dereferenceable(3) %43, i1 zeroext false) #10
  %44 = tail call %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() #10
  %45 = getelementptr inbounds %"class.blink::CSSInheritedValue", %"class.blink::CSSInheritedValue"* %44, i64 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 457, %"class.blink::CSSValue"* dereferenceable(3) %45, i1 zeroext false) #10
  br label %46

46:                                               ; preds = %1, %10, %39, %32, %25, %18
  %47 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 5
  %48 = load i16, i16* %47, align 8
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = uitofp i16 %48 to double
  %52 = tail call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %51, i32 5) #10
  %53 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %52, i64 0, i32 0, i32 0
  tail call void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"* %3, i32 499, %"class.blink::CSSValue"* dereferenceable(3) %53, i1 zeroext false) #10
  br label %54

54:                                               ; preds = %46, %50
  %55 = bitcast i8* %2 to %"class.blink::CSSPropertyValueSet"*
  ret %"class.blink::CSSPropertyValueSet"* %55
}

declare zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"*, i32, i32, i1 zeroext) local_unnamed_addr #2

declare void @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDERKNS_8CSSValueEb(%"class.blink::MutableCSSPropertyValueSet"*, i32, %"class.blink::CSSValue"* dereferenceable(3), i1 zeroext) local_unnamed_addr #2

declare %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() local_unnamed_addr #2

declare %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double, i32) local_unnamed_addr #2

declare %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSPropertyValueSet"* @_ZN5blink16HTMLTableElement19AdditionalCellStyleEv(%"class.blink::HTMLTableElement"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 6
  %3 = getelementptr inbounds %"class.blink::Member.14", %"class.blink::Member.14"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** %3, align 8
  %5 = icmp eq %"class.blink::CSSPropertyValueSet"* %4, null
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = tail call %"class.blink::CSSPropertyValueSet"* @_ZN5blink16HTMLTableElement21CreateSharedCellStyleEv(%"class.blink::HTMLTableElement"* %0)
  %8 = ptrtoint %"class.blink::CSSPropertyValueSet"* %7 to i64
  %9 = bitcast %"class.blink::Member.14"* %2 to i64*
  store atomic i64 %8, i64* %9 monotonic, align 8
  %10 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.blink::CSSPropertyValueSet"* %7 to i8*
  %14 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %13) #10
  %15 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** %3, align 8
  br label %16

16:                                               ; preds = %1, %12, %6
  %17 = phi %"class.blink::CSSPropertyValueSet"* [ %4, %1 ], [ %15, %12 ], [ %7, %6 ]
  ret %"class.blink::CSSPropertyValueSet"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSPropertyValueSet"* @_ZN5blink16HTMLTableElement20AdditionalGroupStyleEb(%"class.blink::HTMLTableElement"* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %101

6:                                                ; preds = %2
  br i1 %1, label %7, label %54

7:                                                ; preds = %6
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %52, !prof !22

10:                                               ; preds = %7
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style) #10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %52, label %13

13:                                               ; preds = %10
  %14 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %15 = bitcast i8* %14 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %15, i8 zeroext 1) #10
  %16 = getelementptr inbounds i8, i8* %14, i64 -4
  %17 = bitcast i8* %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = or i16 %18, 1
  store atomic i16 %19, i16* %17 release, align 2
  %20 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %15, i32 99, i32 500, i1 zeroext false) #10
  %21 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %15, i32 72, i32 500, i1 zeroext false) #10
  %22 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %15, i32 98, i32 11, i1 zeroext false) #10
  %23 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %15, i32 71, i32 11, i1 zeroext false) #10
  store i8* %14, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %24 = ptrtoint i8* %14 to i64
  switch i64 %24, label %25 [
    i64 0, label %51
    i64 -1, label %51
  ]

25:                                               ; preds = %13
  %26 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %27 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %26, i64 0, i32 1
  %28 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %27) #10
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %25
  %31 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %27, i8* %31) #10
  br label %32

32:                                               ; preds = %30, %25
  %33 = phi i8* [ %31, %30 ], [ %28, %25 ]
  %34 = bitcast i8* %33 to %"class.blink::ThreadState"**
  %35 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %35, i64 0, i32 3, i32 0, i32 0, i32 0
  %37 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %37, i64 0, i32 0, i32 0
  %39 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %38, align 8
  %40 = icmp eq %"class.blink::PersistentNode"* %39, null
  br i1 %40, label %41, label %44, !prof !2

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %37, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %42) #10
  %43 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %38, align 8
  br label %44

44:                                               ; preds = %41, %32
  %45 = phi %"class.blink::PersistentNode"* [ %43, %41 ], [ %39, %32 ]
  %46 = bitcast %"class.blink::PersistentNode"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.blink::PersistentRegion"* %37 to i64*
  store i64 %47, i64* %48, align 8
  %49 = bitcast %"class.blink::PersistentNode"* %45 to %"class.blink::PersistentBase.640"**
  store %"class.blink::PersistentBase.640"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style to %"class.blink::PersistentBase.640"*), %"class.blink::PersistentBase.640"** %49, align 8
  %50 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %45, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %50, align 8
  store %"class.blink::PersistentNode"* %45, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %51

51:                                               ; preds = %13, %13, %44
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style) #10
  br label %52

52:                                               ; preds = %10, %51, %7
  %53 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE18s_row_border_style to %"class.blink::CSSPropertyValueSet"**), align 8
  br label %101

54:                                               ; preds = %6
  %55 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style to i8*) acquire, align 8
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %99, !prof !22

57:                                               ; preds = %54
  %58 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style) #10
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %99, label %60

60:                                               ; preds = %57
  %61 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %62 = bitcast i8* %61 to %"class.blink::MutableCSSPropertyValueSet"*
  tail call void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"* %62, i8 zeroext 1) #10
  %63 = getelementptr inbounds i8, i8* %61, i64 -4
  %64 = bitcast i8* %63 to i16*
  %65 = load atomic i16, i16* %64 monotonic, align 2
  %66 = or i16 %65, 1
  store atomic i16 %66, i16* %64 release, align 2
  %67 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %62, i32 89, i32 500, i1 zeroext false) #10
  %68 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %62, i32 92, i32 500, i1 zeroext false) #10
  %69 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %62, i32 88, i32 11, i1 zeroext false) #10
  %70 = tail call zeroext i1 @_ZN5blink26MutableCSSPropertyValueSet11SetPropertyENS_13CSSPropertyIDENS_10CSSValueIDEb(%"class.blink::MutableCSSPropertyValueSet"* %62, i32 91, i32 11, i1 zeroext false) #10
  store i8* %61, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %71 = ptrtoint i8* %61 to i64
  switch i64 %71, label %72 [
    i64 0, label %98
    i64 -1, label %98
  ]

72:                                               ; preds = %60
  %73 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %74 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %73, i64 0, i32 1
  %75 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %74) #10
  %76 = icmp eq i8* %75, null
  br i1 %76, label %77, label %79, !prof !2

77:                                               ; preds = %72
  %78 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %74, i8* %78) #10
  br label %79

79:                                               ; preds = %77, %72
  %80 = phi i8* [ %78, %77 ], [ %75, %72 ]
  %81 = bitcast i8* %80 to %"class.blink::ThreadState"**
  %82 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %81, align 8
  %83 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %82, i64 0, i32 3, i32 0, i32 0, i32 0
  %84 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %84, i64 0, i32 0, i32 0
  %86 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %85, align 8
  %87 = icmp eq %"class.blink::PersistentNode"* %86, null
  br i1 %87, label %88, label %91, !prof !2

88:                                               ; preds = %79
  %89 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %84, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %89) #10
  %90 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %85, align 8
  br label %91

91:                                               ; preds = %88, %79
  %92 = phi %"class.blink::PersistentNode"* [ %90, %88 ], [ %86, %79 ]
  %93 = bitcast %"class.blink::PersistentNode"* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.blink::PersistentRegion"* %84 to i64*
  store i64 %94, i64* %95, align 8
  %96 = bitcast %"class.blink::PersistentNode"* %92 to %"class.blink::PersistentBase.640"**
  store %"class.blink::PersistentBase.640"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style to %"class.blink::PersistentBase.640"*), %"class.blink::PersistentBase.640"** %96, align 8
  %97 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %92, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %97, align 8
  store %"class.blink::PersistentNode"* %92, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %98

98:                                               ; preds = %60, %60, %91
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style) #10
  br label %99

99:                                               ; preds = %57, %98, %54
  %100 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink16HTMLTableElement20AdditionalGroupStyleEbE21s_column_border_style to %"class.blink::CSSPropertyValueSet"**), align 8
  br label %101

101:                                              ; preds = %2, %99, %52
  %102 = phi %"class.blink::CSSPropertyValueSet"* [ %53, %52 ], [ %100, %99 ], [ null, %2 ]
  ret %"class.blink::CSSPropertyValueSet"* %102
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink16HTMLTableElement14IsURLAttributeERKNS_9AttributeE(%"class.blink::HTMLTableElement"* nocapture readnone, %"class.blink::Attribute"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kBackgroundAttrE, align 8
  %4 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %3, i64 0, i32 0, i32 0
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %8 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %7
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16HTMLTableElement21HasLegalLinkAttributeERKNS_13QualifiedNameE(%"class.blink::HTMLTableElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kBackgroundAttrE, align 8
  %4 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %3, i64 0, i32 0, i32 0
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %8 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %5, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  %11 = tail call zeroext i1 @_ZNK5blink7Element21HasLegalLinkAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %10, %"class.blink::QualifiedName"* dereferenceable(8) %1) #10
  br label %12

12:                                               ; preds = %9, %2
  %13 = phi i1 [ true, %2 ], [ %11, %9 ]
  ret i1 %13
}

declare zeroext i1 @_ZNK5blink7Element21HasLegalLinkAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(8) %"class.blink::QualifiedName"* @_ZNK5blink16HTMLTableElement24SubResourceAttributeNameEv(%"class.blink::HTMLTableElement"* nocapture readnone) unnamed_addr #7 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kBackgroundAttrE, align 8
  ret %"class.blink::QualifiedName"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLTableRowsCollection"* @_ZN5blink16HTMLTableElement4rowsEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = tail call dereferenceable(56) %"class.blink::NodeListsNodeData"* @_ZN5blink13ContainerNode15EnsureNodeListsEv(%"class.blink::ContainerNode"* %2) #10
  %4 = tail call %"class.blink::HTMLTableRowsCollection"* @_ZN5blink17NodeListsNodeData8AddCacheINS_23HTMLTableRowsCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::NodeListsNodeData"* %3, %"class.blink::ContainerNode"* dereferenceable(80) %2, i32 11) #10
  ret %"class.blink::HTMLTableRowsCollection"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLCollection"* @_ZN5blink16HTMLTableElement7tBodiesEv(%"class.blink::HTMLTableElement"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = tail call dereferenceable(56) %"class.blink::NodeListsNodeData"* @_ZN5blink13ContainerNode15EnsureNodeListsEv(%"class.blink::ContainerNode"* %2) #10
  %4 = tail call %"class.blink::HTMLCollection"* @_ZN5blink17NodeListsNodeData8AddCacheINS_14HTMLCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::NodeListsNodeData"* %3, %"class.blink::ContainerNode"* dereferenceable(80) %2, i32 9) #10
  ret %"class.blink::HTMLCollection"* %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16HTMLTableElement5RulesEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kRulesAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %14 = bitcast %"class.blink::Member.14"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %23

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %20 = bitcast %"class.blink::ElementData"* %19 to %"class.blink::Attribute"*
  %21 = lshr i32 %8, 1
  %22 = and i32 %21, 268435455
  br label %23

23:                                               ; preds = %18, %11
  %24 = phi %"class.blink::Attribute"* [ %20, %18 ], [ %15, %11 ]
  %25 = phi i32 [ %22, %18 ], [ %17, %11 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %49, %29
  %35 = phi %"class.blink::Attribute"* [ %24, %29 ], [ %50, %49 ]
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %37, %31
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 1
  %51 = icmp eq %"class.blink::Attribute"* %50, %27
  br i1 %51, label %56, label %34

52:                                               ; preds = %44, %34
  %53 = icmp eq %"class.blink::Attribute"* %35, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 1
  br label %58

56:                                               ; preds = %49, %52, %23, %1
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi %"class.WTF::AtomicString"* [ %57, %56 ], [ %55, %54 ]
  ret %"class.WTF::AtomicString"* %59
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16HTMLTableElement7SummaryEv(%"class.blink::HTMLTableElement"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names12kSummaryAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %14 = bitcast %"class.blink::Member.14"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %23

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %20 = bitcast %"class.blink::ElementData"* %19 to %"class.blink::Attribute"*
  %21 = lshr i32 %8, 1
  %22 = and i32 %21, 268435455
  br label %23

23:                                               ; preds = %18, %11
  %24 = phi %"class.blink::Attribute"* [ %20, %18 ], [ %15, %11 ]
  %25 = phi i32 [ %22, %18 ], [ %17, %11 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %49, %29
  %35 = phi %"class.blink::Attribute"* [ %24, %29 ], [ %50, %49 ]
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %37, %31
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 1
  %51 = icmp eq %"class.blink::Attribute"* %50, %27
  br i1 %51, label %56, label %34

52:                                               ; preds = %44, %34
  %53 = icmp eq %"class.blink::Attribute"* %35, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 1
  br label %58

56:                                               ; preds = %49, %52, %23, %1
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi %"class.WTF::AtomicString"* [ %57, %56 ], [ %55, %54 ]
  ret %"class.WTF::AtomicString"* %59
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink16HTMLTableElement5TraceEPNS_7VisitorE(%"class.blink::HTMLTableElement"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 6
  %4 = bitcast %"class.blink::Member.14"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::HTMLTableElement", %"class.blink::HTMLTableElement"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNK5blink7Element5TraceEPNS_7VisitorE(%"class.blink::Element"* %14, %"class.blink::Visitor"* %1) #10
  ret void
}

declare void @_ZNK5blink7Element5TraceEPNS_7VisitorE(%"class.blink::Element"*, %"class.blink::Visitor"*) unnamed_addr #2

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget17HasEventListenersEv(%"class.blink::EventTarget"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.blink::EventTarget"* %0 to %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)***
  %3 = load %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)**, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)** %3, i64 25
  %5 = load %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)** %4, align 8
  %6 = tail call %"class.blink::EventTargetData"* %5(%"class.blink::EventTarget"* %0) #10
  %7 = icmp eq %"class.blink::EventTargetData"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::EventTargetData", %"class.blink::EventTargetData"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  br label %12

12:                                               ; preds = %1, %8
  %13 = phi i1 [ %11, %8 ], [ false, %1 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink16HTMLTableElement18GetWrapperTypeInfoEv(%"class.blink::HTMLTableElement"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink16HTMLTableElement18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #2

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #2

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Node13InterfaceNameEv(%"class.blink::Node"*) unnamed_addr #2

declare %"class.blink::Node"* @_ZN5blink4Node6ToNodeEv(%"class.blink::Node"*) unnamed_addr #2

declare %"class.blink::DOMWindow"* @_ZNK5blink11EventTarget11ToDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare %"class.blink::LocalDOMWindow"* @_ZNK5blink11EventTarget16ToLocalDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare %"class.blink::LocalDOMWindow"* @_ZN5blink11EventTarget16ToLocalDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare %"class.blink::MessagePort"* @_ZN5blink11EventTarget13ToMessagePortEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare %"class.blink::ServiceWorker"* @_ZN5blink11EventTarget15ToServiceWorkerEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare %"class.blink::PortalHost"* @_ZN5blink11EventTarget12ToPortalHostEv(%"class.blink::EventTarget"*) unnamed_addr #2

declare void @_ZN5blink4Node23RemoveAllEventListenersEv(%"class.blink::Node"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE(%"class.blink::EventTarget"*, %"class.blink::Event"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv(%"class.blink::EventTarget"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZN5blink11EventTarget24AddEventListenerInternalERKN3WTF12AtomicStringEPNS_13EventListenerEPKNS_31AddEventListenerOptionsResolvedE(%"class.blink::EventTarget"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::EventListener"*, %"class.blink::AddEventListenerOptionsResolved"*) unnamed_addr #2

declare void @_ZN5blink4Node18AddedEventListenerERKN3WTF12AtomicStringERNS_23RegisteredEventListenerE(%"class.blink::Node"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::RegisteredEventListener"* dereferenceable(16)) unnamed_addr #2

declare void @_ZN5blink4Node20RemovedEventListenerERKN3WTF12AtomicStringERKNS_23RegisteredEventListenerE(%"class.blink::Node"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::RegisteredEventListener"* dereferenceable(16)) unnamed_addr #2

declare i32 @_ZN5blink4Node21DispatchEventInternalERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #2

declare %"class.blink::EventTargetData"* @_ZN5blink4Node18GetEventTargetDataEv(%"class.blink::Node"*) unnamed_addr #2

declare dereferenceable(56) %"class.blink::EventTargetData"* @_ZN5blink4Node21EnsureEventTargetDataEv(%"class.blink::Node"*) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink11HTMLElement8nodeNameEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink4Node9nodeValueEv(%"class.blink::Node"*) unnamed_addr #2

declare void @_ZN5blink4Node12setNodeValueERKN3WTF6StringE(%"class.blink::Node"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

declare i32 @_ZNK5blink7Element11getNodeTypeEv(%"class.blink::Element"*) unnamed_addr #2

declare %"class.blink::Node"* @_ZNK5blink7Element5CloneERNS_8DocumentENS_17CloneChildrenFlagE(%"class.blink::Element"*, %"class.blink::Document"* dereferenceable(2848), i32) unnamed_addr #2

declare void @_ZN5blink4Node14setTextContentERKN3WTF6StringE(%"class.blink::Node"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

declare void @_ZN5blink4Node24setTextContentForBindingEPKNS_28V8UnionStringOrTrustedScriptERNS_14ExceptionStateE(%"class.blink::Node"*, %"class.blink::V8UnionStringOrTrustedScript"*, %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK5blink4Node11GetPseudoIdEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i8 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node21IsMediaControlElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node15IsMediaControlsEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node14IsMediaElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node20IsTextTrackContainerEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node12IsVTTElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node15IsAttributeNodeEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node19IsCharacterDataNodeEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node19IsFrameOwnerElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node27IsMediaRemotingInterstitialEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node30IsPictureInPictureInterstitialEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element23CanContainRangeEndPointEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink4Node11SheetLoadedEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE(%"class.blink::Node"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node24StartLoadingDynamicSheetEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink13ContainerNode10SetFocusedEbNS_5mojom9FocusTypeE(%"class.blink::ContainerNode"*, i1 zeroext, i32) unnamed_addr #2

declare void @_ZN5blink13ContainerNode10SetDraggedEb(%"class.blink::ContainerNode"*, i1 zeroext) unnamed_addr #2

declare zeroext i1 @_ZNK5blink4Node25ShouldHaveFocusAppearanceEv(%"class.blink::Node"*) unnamed_addr #2

declare void @_ZNK5blink13ContainerNode11BoundingBoxEv() unnamed_addr

declare zeroext i1 @_ZNK5blink7Element16ChildTypeAllowedENS_4Node8NodeTypeE(%"class.blink::Element"*, i32) unnamed_addr #2

declare zeroext i1 @_ZNK5blink4Node17CanStartSelectionEv(%"class.blink::Node"*) unnamed_addr #2

declare void @_ZN5blink7Element16AttachLayoutTreeERNS_4Node13AttachContextE(%"class.blink::Element"*, %"struct.blink::Node::AttachContext"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN5blink7Element16DetachLayoutTreeEb(%"class.blink::Element"*, i1 zeroext) unnamed_addr #2

declare i32 @_ZN5blink11HTMLElement12InsertedIntoERNS_13ContainerNodeE(%"class.blink::HTMLElement"*, %"class.blink::ContainerNode"* dereferenceable(80)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink11HTMLElement11RemovedFromERNS_13ContainerNodeE(%"class.blink::HTMLElement"*, %"class.blink::ContainerNode"* dereferenceable(80)) unnamed_addr #2

declare zeroext i1 @_ZN5blink4Node28WillRespondToMouseMoveEventsEv(%"class.blink::Node"*) unnamed_addr #2

declare zeroext i1 @_ZN5blink4Node29WillRespondToMouseClickEventsEv(%"class.blink::Node"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::EventDispatchHandlingState"* @_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::EventDispatchHandlingState"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE(%"class.blink::Node"*, %"class.blink::Event"*, %"class.blink::EventDispatchHandlingState"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink4Node17HandleLocalEventsERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #2

declare void @_ZN5blink11HTMLElement19DefaultEventHandlerERNS_5EventE(%"class.blink::HTMLElement"*, %"class.blink::Event"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink4Node21HasActivationBehaviorEv(%"class.blink::Node"*) unnamed_addr #2

declare %"class.blink::LayoutBox"* @_ZN5blink4Node13AutoscrollBoxEv(%"class.blink::Node"*) unnamed_addr #2

declare void @_ZN5blink4Node14StopAutoscrollEv(%"class.blink::Node"*) unnamed_addr #2

declare void @_ZN5blink11HTMLElement20DidMoveToNewDocumentERNS_8DocumentE(%"class.blink::HTMLElement"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink11HTMLElement13DebugNodeNameEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ComputedStyle"* @_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"*, i8 zeroext, %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %4 = tail call %"class.blink::ComputedStyle"* @_ZN5blink7Element19EnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"* %0, i8 zeroext %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #10
  ret %"class.blink::ComputedStyle"* %4
}

declare void @_ZN5blink11HTMLElement15ChildrenChangedERKNS_13ContainerNode14ChildrenChangeE(%"class.blink::HTMLElement"*, %"struct.blink::ContainerNode::ChildrenChange"* dereferenceable(56)) unnamed_addr #2

declare zeroext i1 @_ZNK5blink13ContainerNode42ChildrenChangedAllChildrenRemovedNeedsListEv(%"class.blink::ContainerNode"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv(%"class.blink::ContainerNode"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare %"class.blink::LayoutBox"* @_ZNK5blink7Element24GetLayoutBoxForScrollingEv(%"class.blink::Element"*) unnamed_addr #2

declare %"class.blink::Element"* @_ZN5blink7Element18GetAnimationTargetEv(%"class.blink::Element"*) unnamed_addr #2

declare %"class.WTF::HashMap.709"* @_ZNK5blink7Element24GetCheckedAttributeTypesEv(%"class.blink::Element"*) unnamed_addr #2

declare i32 @_ZN5blink7Element11scrollWidthEv(%"class.blink::Element"*) unnamed_addr #2

declare i32 @_ZN5blink7Element12scrollHeightEv(%"class.blink::Element"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element41CollectExtraStyleForPresentationAttributeEPNS_26MutableCSSPropertyValueSetE(%"class.blink::Element"*, %"class.blink::MutableCSSPropertyValueSet"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink11HTMLElement16AttributeChangedERKNS_7Element27AttributeModificationParamsE(%"class.blink::HTMLElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE(%"class.blink::Element"*, %"class.blink::Element"* dereferenceable(104), i32) unnamed_addr #0 comdat align 2 {
  ret void
}

declare %"class.blink::LayoutObject"* @_ZN5blink7Element18CreateLayoutObjectERKNS_13ComputedStyleENS_12LegacyLayoutE(%"class.blink::Element"*, %"class.blink::ComputedStyle"*, i32) unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element20LayoutObjectIsNeededERKNS_13ComputedStyleE(%"class.blink::Element"*, %"class.blink::ComputedStyle"*) unnamed_addr #2

declare void @_ZN5blink11HTMLElement15AccessKeyActionENS_27SimulatedClickCreationScopeE(%"class.blink::HTMLElement"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE(%"class.blink::Element"*, %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE(%"class.blink::Element"*, %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element10IsLiveLinkEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element14ImageSourceURLEv(%"class.blink::Element"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Image"* @_ZN5blink7Element13ImageContentsEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::Image"* null
}

declare void @_ZN5blink7Element5focusERKNS_11FocusParamsE(%"class.blink::Element"*, %"struct.blink::FocusParams"*) unnamed_addr #2

declare void @_ZN5blink7Element32UpdateFocusAppearanceWithOptionsENS_24SelectionBehaviorOnFocusEPKNS_12FocusOptionsE(%"class.blink::Element"*, i32, %"class.blink::FocusOptions"*) unnamed_addr #2

declare void @_ZN5blink7Element4blurEv(%"class.blink::Element"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement13SupportsFocusEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element19IsKeyboardFocusableEv(%"class.blink::Element"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element16IsMouseFocusableEv(%"class.blink::Element"*) unnamed_addr #2

declare void @_ZN5blink7Element18DispatchFocusEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #2

declare void @_ZN5blink7Element17DispatchBlurEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #2

declare void @_ZN5blink7Element20DispatchFocusInEventERKN3WTF12AtomicStringEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink11HTMLElement5titleEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink7Element14DefaultToolTipEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret %"class.WTF::StringImpl"* null
}

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element14ShadowPseudoIdEv(%"class.blink::Element"*) unnamed_addr #2

declare void @_ZN5blink11HTMLElement21FinishParsingChildrenEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare void @_ZN5blink11HTMLElement20BeginParsingChildrenEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element24CanGeneratePseudoElementENS_8PseudoIdE(%"class.blink::Element"*, i8 zeroext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25MatchesDefaultPseudoClassEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZNK5blink11HTMLElement25MatchesEnabledPseudoClassEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement26MatchesReadOnlyPseudoClassEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement27MatchesReadWritePseudoClassEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement28MatchesValidityPseudoClassesEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element25MayTriggerVirtualKeyboardEv(%"class.blink::Element"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25ShouldAppearIndeterminateEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsDateTimeEditElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element22IsDateTimeFieldElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element24IsPickerIndicatorElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsFormControlElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element19IsSpinButtonElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element13IsTextControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsOptionalFormControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsRequiredFormControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZNK5blink11HTMLElement12willValidateEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZN5blink11HTMLElement14IsValidElementEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element9IsInRangeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element12IsOutOfRangeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsClearButtonElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element15IsScriptElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsVTTCueBackgroundBoxEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsSliderThumbElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink16HTMLTableElement25HasNonInBodyInsertionModeEv(%"class.blink::HTMLTableElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare zeroext i1 @_ZNK5blink11HTMLElement21IsDisabledFormControlEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element20BuildPendingResourceEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink7Element9SetActiveEb(%"class.blink::Element"*, i1 zeroext) unnamed_addr #2

declare void @_ZN5blink7Element10SetHoveredEb(%"class.blink::Element"*, i1 zeroext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element11IsAdRelatedEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink7Element15WillRecalcStyleENS_17StyleRecalcChangeE(%"class.blink::Element"*, i64) unnamed_addr #2

declare void @_ZN5blink7Element14DidRecalcStyleENS_17StyleRecalcChangeE(%"class.blink::Element"*, i64) unnamed_addr #2

declare void @_ZN5blink7Element26CustomStyleForLayoutObjectERKNS_18StyleRecalcContextE() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink7Element16GetNamedItemTypeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

declare zeroext i1 @_ZNK5blink7Element16IsFocusableStyleEv(%"class.blink::Element"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element22ParserDidSetAttributesEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element23AreAuthorShadowsAllowedEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE(%"class.blink::Element"*, %"class.blink::ShadowRoot"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare i32 @_ZNK5blink7Element15DefaultTabIndexEv(%"class.blink::Element"*) unnamed_addr #2

declare dereferenceable(104) %"class.blink::Element"* @_ZNK5blink7Element33CloneWithoutAttributesAndChildrenERNS_8DocumentE(%"class.blink::Element"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink11HTMLElement22setInnerTextForBindingEPKNS_50V8UnionStringTreatNullAsEmptyStringOrTrustedScriptERNS_14ExceptionStateE(%"class.blink::HTMLElement"*, %"class.blink::V8UnionStringTreatNullAsEmptyStringOrTrustedScript"*, %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement19HasCustomFocusLogicEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink11HTMLElement14autocapitalizeEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement9draggableEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare %"class.blink::HTMLFormElement"* @_ZNK5blink11HTMLElement9formOwnerEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement17IsHTMLBodyElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement24IsHTMLFencedFrameElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement21IsHTMLFrameSetElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement19IsHTMLPortalElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement20IsHTMLUnknownElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11HTMLElement15IsPluginElementEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZNK5blink11HTMLElement11IsLabelableEv(%"class.blink::HTMLElement"*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink11HTMLElement20IsInteractiveContentEv(%"class.blink::HTMLElement"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink11HTMLElement7AltTextEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret %"class.WTF::StringImpl"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::FormAssociated"* @_ZN5blink11HTMLElement22ToFormAssociatedOrNullEv(%"class.blink::HTMLElement"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::FormAssociated"* null
}

; Function Attrs: nounwind ssp uwtable
declare %"class.blink::Element"* @_ZThn80_N5blink7Element18GetAnimationTargetEv(%"class.blink::Element"*) unnamed_addr #0 align 2

declare void @_ZN5blink7ElementC2ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink13ContainerNodeD2Ev(%"class.blink::ContainerNode"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN5blink14ExceptionState14ClearExceptionEv(%"class.blink::ExceptionState"*) unnamed_addr #2

declare zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"*, %"class.v8::Value"*) local_unnamed_addr #2

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN5blink24CSSPropertyValueMetadataC1ERKNS_15CSSPropertyNameEbibb(%"struct.blink::CSSPropertyValueMetadata"*, %"class.blink::CSSPropertyName"* dereferenceable(16), i1 zeroext, i32, i1 zeroext, i1 zeroext) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm6EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [6 x i8]* dereferenceable(6)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 5
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %125, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %153, %14, %28, %125, %139, %42, %59, %77, %93, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %14 ], [ false, %28 ], [ false, %125 ], [ false, %139 ], [ %166, %153 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  ret i1 %124

125:                                              ; preds = %28
  %126 = getelementptr inbounds i8, i8* %15, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %131, %137
  br i1 %138, label %139, label %75

139:                                              ; preds = %125
  %140 = getelementptr inbounds i8, i8* %15, i64 3
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 3
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = icmp eq i32 %145, %151
  br i1 %152, label %153, label %75

153:                                              ; preds = %139
  %154 = getelementptr inbounds i8, i8* %15, i64 4
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 4
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = icmp eq i32 %159, %165
  br label %75
}

declare i32 @_ZNK3WTF6String5ToIntEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #2

declare %"class.blink::ComputedStyle"* @_ZN5blink7Element19EnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"*, i8 zeroext, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLTableSectionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableSectionElementEE4CallIJRKNS_17HTMLQualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 comdat align 2 {
  %3 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %4 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %8 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %7, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %4, %2 ], [ %8, %6 ]
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %3, i64 0, i32 19, i64 6
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, 112
  br i1 %16, label %47, label %17, !prof !2

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 112
  store i8* %20, i8** %18, align 8
  %21 = add i64 %15, -112
  store i64 %21, i64* %14, align 8
  %22 = bitcast i8* %19 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %19, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = trunc i32 %10 to i16
  %26 = shl i16 %25, 2
  store atomic i16 %26, i16* %24 monotonic, align 2
  %27 = getelementptr inbounds i8, i8* %19, i64 6
  %28 = bitcast i8* %27 to i16*
  store i16 56, i16* %28, align 2
  %29 = ptrtoint i8* %19 to i64
  %30 = and i64 %29, -131072
  %31 = inttoptr i64 %30 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 4400
  %33 = bitcast i8* %32 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = sub i64 %29, %35
  %37 = lshr i64 %36, 3
  %38 = lshr i64 %36, 6
  %39 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %33, i64 0, i32 0, i32 1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 7
  %43 = shl i32 1, %42
  %44 = trunc i32 %43 to i8
  %45 = or i8 %40, %44
  store atomic i8 %45, i8* %39 release, align 1
  %46 = getelementptr inbounds i8, i8* %19, i64 8
  br label %50

47:                                               ; preds = %9
  %48 = zext i32 %10 to i64
  %49 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 112, i64 %48) #10
  br label %50

50:                                               ; preds = %17, %47
  %51 = phi i8* [ %46, %17 ], [ %49, %47 ]
  %52 = bitcast i8* %51 to %"class.blink::HTMLTableSectionElement"*
  %53 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %0, i64 0, i32 0
  tail call void @_ZN5blink23HTMLTableSectionElementC1ERKNS_13QualifiedNameERNS_8DocumentE(%"class.blink::HTMLTableSectionElement"* %52, %"class.blink::QualifiedName"* dereferenceable(8) %53, %"class.blink::Document"* dereferenceable(2848) %1) #10
  %54 = getelementptr inbounds i8, i8* %51, i64 -4
  %55 = bitcast i8* %54 to i16*
  %56 = load atomic i16, i16* %55 monotonic, align 2
  %57 = or i16 %56, 1
  store atomic i16 %57, i16* %55 release, align 2
  ret %"class.blink::HTMLTableSectionElement"* %52
}

declare void @_ZN5blink23HTMLTableSectionElementC1ERKNS_13QualifiedNameERNS_8DocumentE(%"class.blink::HTMLTableSectionElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #5 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #10
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0), i8* %21, i8* %22) #10
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.23, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #10
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #10
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #10
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLTableCaptionElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_23HTMLTableCaptionElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %3 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %7 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %6, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %3, %1 ], [ %7, %5 ]
  %10 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %2, i64 0, i32 19, i64 6
  %11 = bitcast %"class.blink::BaseArena"** %10 to %"class.blink::NormalPageArena"**
  %12 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %12, i64 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 112
  br i1 %15, label %46, label %16, !prof !2

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %12, i64 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 112
  store i8* %19, i8** %17, align 8
  %20 = add i64 %14, -112
  store i64 %20, i64* %13, align 8
  %21 = bitcast i8* %18 to i32*
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %18, i64 4
  %23 = bitcast i8* %22 to i16*
  %24 = trunc i32 %9 to i16
  %25 = shl i16 %24, 2
  store atomic i16 %25, i16* %23 monotonic, align 2
  %26 = getelementptr inbounds i8, i8* %18, i64 6
  %27 = bitcast i8* %26 to i16*
  store i16 56, i16* %27, align 2
  %28 = ptrtoint i8* %18 to i64
  %29 = and i64 %28, -131072
  %30 = inttoptr i64 %29 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 4400
  %32 = bitcast i8* %31 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %33 = bitcast i8* %31 to i64*
  %34 = load i64, i64* %33, align 16
  %35 = sub i64 %28, %34
  %36 = lshr i64 %35, 3
  %37 = lshr i64 %35, 6
  %38 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %32, i64 0, i32 0, i32 1, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 7
  %42 = shl i32 1, %41
  %43 = trunc i32 %42 to i8
  %44 = or i8 %39, %43
  store atomic i8 %44, i8* %38 release, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 8
  br label %49

46:                                               ; preds = %8
  %47 = zext i32 %9 to i64
  %48 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %12, i64 112, i64 %47) #10
  br label %49

49:                                               ; preds = %16, %46
  %50 = phi i8* [ %45, %16 ], [ %48, %46 ]
  %51 = bitcast i8* %50 to %"class.blink::HTMLTableCaptionElement"*
  tail call void @_ZN5blink23HTMLTableCaptionElementC1ERNS_8DocumentE(%"class.blink::HTMLTableCaptionElement"* %51, %"class.blink::Document"* dereferenceable(2848) %0) #10
  %52 = getelementptr inbounds i8, i8* %50, i64 -4
  %53 = bitcast i8* %52 to i16*
  %54 = load atomic i16, i16* %53 monotonic, align 2
  %55 = or i16 %54, 1
  store atomic i16 %55, i16* %53 release, align 2
  ret %"class.blink::HTMLTableCaptionElement"* %51
}

declare void @_ZN5blink23HTMLTableCaptionElementC1ERNS_8DocumentE(%"class.blink::HTMLTableCaptionElement"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.742", %"class.WTF::StringTypeAdapter.742"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %14) #10
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.613"* %9) #10
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.613"* %9) #10
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.743", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.742"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.742"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.742"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.742", %"class.WTF::StringTypeAdapter.742"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.743"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.743"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i8* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.744"* nonnull %34, i8* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.613"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.742"* nonnull %5, i8* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.743", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.742"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.742"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.742"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.742", %"class.WTF::StringTypeAdapter.742"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.743"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.743"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.742"* nonnull %3, i16* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.744"* nonnull %34, i16* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.613"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.742"* nonnull %5, i16* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.613"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.742", %"class.WTF::StringTypeAdapter.742"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.613", %"class.WTF::StringAppend.613"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %30, i8* %31) #10
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %45, i8* %46) #10
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #10
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  ret i32 %23
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.742"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.744"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.742"*, i16*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.744"*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.615"*, %"class.WTF::StringAppend"* byval(%"class.WTF::StringAppend") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.615"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %0, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %65, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %53

43:                                               ; preds = %36
  %44 = zext i32 %42 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #10
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %43
  tail call void @llvm.trap() #10
  unreachable

51:                                               ; preds = %43
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %41, align 4
  br label %53

53:                                               ; preds = %36, %51
  %54 = phi i32 [ %52, %51 ], [ %42, %36 ]
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %60 = add i32 %54, -1
  store i32 %60, i32* %59, align 4
  br label %61

61:                                               ; preds = %58, %53
  %62 = phi i32 [ %60, %58 ], [ %54, %53 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %65

65:                                               ; preds = %28, %61, %64
  br i1 %10, label %79, label %66

66:                                               ; preds = %65
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %79

79:                                               ; preds = %65, %75, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.614"*, %"class.WTF::StringAppend.615"* byval(%"class.WTF::StringAppend.615") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.615"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.614"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %1, i64 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %1, i64 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %57

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #10
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  tail call void @llvm.trap() #10
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %57

55:                                               ; preds = %28
  %56 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  store i8* %2, i8** %56, align 8
  br label %70

57:                                               ; preds = %38, %53
  %58 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  store i8* %2, i8** %58, align 8
  %59 = load atomic i32, i32* %39 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #10
  br label %70

70:                                               ; preds = %55, %69, %66
  br i1 %10, label %84, label %71

71:                                               ; preds = %70
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %84

84:                                               ; preds = %70, %80, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.614"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.742", %"class.WTF::StringTypeAdapter.742"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %14) #10
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.615"* %9) #10
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.615"* %9) #10
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.614"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.743", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.743"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #10
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.743"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %10, i8* %1) #10
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %10) #10
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.744"* nonnull %30, i8* %33) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.615"* %5) #10
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %36) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.614"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.743", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.742", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.742"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.743"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.614", %"class.WTF::StringAppend.614"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #10
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.743"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %10, i16* %1) #10
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.743", %"class.WTF::StringTypeAdapter.743"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %10) #10
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.744"* nonnull %30, i16* %33) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.615"* %5) #10
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.742"* nonnull %4, i16* %36) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.615"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.615", %"class.WTF::StringAppend.615"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %8) #10
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %8) #10
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %26, i8* %27) #10
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #10
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLTableRowElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_19HTMLTableRowElementEE4CallIJRNS_8DocumentEEEEPS1_DpOT_(%"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %3 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %7 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %6, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %3, %1 ], [ %7, %5 ]
  %10 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %2, i64 0, i32 19, i64 6
  %11 = bitcast %"class.blink::BaseArena"** %10 to %"class.blink::NormalPageArena"**
  %12 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %12, i64 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 112
  br i1 %15, label %46, label %16, !prof !2

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %12, i64 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 112
  store i8* %19, i8** %17, align 8
  %20 = add i64 %14, -112
  store i64 %20, i64* %13, align 8
  %21 = bitcast i8* %18 to i32*
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %18, i64 4
  %23 = bitcast i8* %22 to i16*
  %24 = trunc i32 %9 to i16
  %25 = shl i16 %24, 2
  store atomic i16 %25, i16* %23 monotonic, align 2
  %26 = getelementptr inbounds i8, i8* %18, i64 6
  %27 = bitcast i8* %26 to i16*
  store i16 56, i16* %27, align 2
  %28 = ptrtoint i8* %18 to i64
  %29 = and i64 %28, -131072
  %30 = inttoptr i64 %29 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 4400
  %32 = bitcast i8* %31 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %33 = bitcast i8* %31 to i64*
  %34 = load i64, i64* %33, align 16
  %35 = sub i64 %28, %34
  %36 = lshr i64 %35, 3
  %37 = lshr i64 %35, 6
  %38 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %32, i64 0, i32 0, i32 1, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 7
  %42 = shl i32 1, %41
  %43 = trunc i32 %42 to i8
  %44 = or i8 %39, %43
  store atomic i8 %44, i8* %38 release, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 8
  br label %49

46:                                               ; preds = %8
  %47 = zext i32 %9 to i64
  %48 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %12, i64 112, i64 %47) #10
  br label %49

49:                                               ; preds = %16, %46
  %50 = phi i8* [ %45, %16 ], [ %48, %46 ]
  %51 = bitcast i8* %50 to %"class.blink::HTMLTableRowElement"*
  tail call void @_ZN5blink19HTMLTableRowElementC1ERNS_8DocumentE(%"class.blink::HTMLTableRowElement"* %51, %"class.blink::Document"* dereferenceable(2848) %0) #10
  %52 = getelementptr inbounds i8, i8* %50, i64 -4
  %53 = bitcast i8* %52 to i16*
  %54 = load atomic i16, i16* %53 monotonic, align 2
  %55 = or i16 %54, 1
  store atomic i16 %55, i16* %53 release, align 2
  ret %"class.blink::HTMLTableRowElement"* %51
}

declare void @_ZN5blink19HTMLTableRowElementC1ERNS_8DocumentE(%"class.blink::HTMLTableRowElement"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #2

declare %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64), %"class.blink::Node"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink8CSSValue14AllocateObjectINS_13CSSImageValueEEEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8CSSValueEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 7, i32 %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0))
  ret i8* %21
}

declare void @_ZN5blink13CSSImageValueC1ERKN3WTF12AtomicStringERKNS_4KURLERKNS_8ReferrerENS_11OriginCleanEbPNS_10StyleImageE(%"class.blink::CSSImageValue"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112), %"struct.blink::Referrer"* dereferenceable(16), i32, i1 zeroext, %"class.blink::StyleImage"*) unnamed_addr #2

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSValue"*
  tail call void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8CSSValueEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::CSSValue"*
  tail call void @_ZN5blink8CSSValue30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8CSSValueEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0), i8 1 }
}

declare void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"*, %"class.blink::Visitor"*) local_unnamed_addr #2

declare void @_ZN5blink8CSSValue30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSValue"*) local_unnamed_addr #2

declare void @_ZN5blink26MutableCSSPropertyValueSetC1ENS_13CSSParserModeE(%"class.blink::MutableCSSPropertyValueSet"*, i8 zeroext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSPropertyValueSetEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSPropertyValueSet"*
  tail call void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::CSSPropertyValueSet"*
  tail call void @_ZN5blink19CSSPropertyValueSet30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSPropertyValueSet"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0), i8 1 }
}

declare void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"*, %"class.blink::Visitor"*) local_unnamed_addr #2

declare void @_ZN5blink19CSSPropertyValueSet30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSPropertyValueSet"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_19CSSPropertyValueSetELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::CSSPropertyValueSet"**
  %5 = load %"class.blink::CSSPropertyValueSet"*, %"class.blink::CSSPropertyValueSet"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #10
  %7 = icmp eq %"class.blink::CSSPropertyValueSet"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::CSSPropertyValueSet"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #10
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void
}

declare void @_ZN4base8LocationC1Ev(%"class.base::Location"*) unnamed_addr #2

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

declare dereferenceable(56) %"class.blink::NodeListsNodeData"* @_ZN5blink13ContainerNode15EnsureNodeListsEv(%"class.blink::ContainerNode"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLTableRowsCollection"* @_ZN5blink17NodeListsNodeData8AddCacheINS_23HTMLTableRowsCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::NodeListsNodeData"*, %"class.blink::ContainerNode"* dereferenceable(80), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair.762", align 8
  %5 = alloca i8*, align 8
  %6 = bitcast %"struct.std::__1::pair.762"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %8 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %4, i64 0, i32 0
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #10
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #10
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %3, %13, %28
  %31 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  store i8* null, i8** %5, align 8
  %32 = getelementptr inbounds %"class.blink::NodeListsNodeData", %"class.blink::NodeListsNodeData"* %0, i64 0, i32 1, i32 0, i32 0
  %33 = call { %"struct.WTF::KeyValuePair.761"*, i8 } @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISJ_SE_SK_EES6_DnEENS_18HashTableAddResultISL_SB_EEOT0_OT1_(%"class.WTF::HashTable.759"* %32, %"struct.std::__1::pair.762"* nonnull dereferenceable(16) %4, i8** nonnull dereferenceable(8) %5) #10
  %34 = extractvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %33, 0
  %35 = extractvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %33, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #10
  br label %51

51:                                               ; preds = %30, %47, %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  %52 = and i8 %35, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %34, i64 0, i32 1, i32 0, i32 0
  %56 = load %"class.blink::LiveNodeListBase"*, %"class.blink::LiveNodeListBase"** %55, align 8
  %57 = icmp eq %"class.blink::LiveNodeListBase"* %56, null
  %58 = getelementptr inbounds %"class.blink::LiveNodeListBase", %"class.blink::LiveNodeListBase"* %56, i64 -1, i32 1
  %59 = bitcast %"class.blink::Member.21"* %58 to %"class.blink::HTMLTableRowsCollection"*
  %60 = select i1 %57, %"class.blink::HTMLTableRowsCollection"* null, %"class.blink::HTMLTableRowsCollection"* %59
  br label %79

61:                                               ; preds = %51
  %62 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 96) #10
  %63 = bitcast i8* %62 to %"class.blink::HTMLTableRowsCollection"*
  call void @_ZN5blink23HTMLTableRowsCollectionC1ERNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::HTMLTableRowsCollection"* %63, %"class.blink::ContainerNode"* dereferenceable(80) %1, i32 %2) #10
  %64 = getelementptr inbounds i8, i8* %62, i64 -4
  %65 = bitcast i8* %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = or i16 %66, 1
  store atomic i16 %67, i16* %65 release, align 2
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %34, i64 0, i32 1
  %69 = icmp eq i8* %62, null
  %70 = getelementptr inbounds i8, i8* %62, i64 16
  %71 = ptrtoint i8* %70 to i64
  %72 = select i1 %69, i64 0, i64 %71
  %73 = bitcast %"class.blink::Member.763"* %68 to i64*
  store atomic i64 %72, i64* %73 monotonic, align 8
  %74 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %61
  %77 = inttoptr i64 %72 to i8*
  %78 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %77) #10
  br label %79

79:                                               ; preds = %76, %61, %54
  %80 = phi %"class.blink::HTMLTableRowsCollection"* [ %60, %54 ], [ %63, %61 ], [ %63, %76 ]
  ret %"class.blink::HTMLTableRowsCollection"* %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.761"*, i8 } @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISJ_SE_SK_EES6_DnEENS_18HashTableAddResultISL_SB_EEOT0_OT1_(%"class.WTF::HashTable.759"*, %"struct.std::__1::pair.762"* dereferenceable(16), i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.761"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable.759"* %0, %"struct.WTF::KeyValuePair.761"* null)
  %9 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.761"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %1, i64 0, i32 1
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %19, %21
  %23 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_star_atomE, align 8
  %24 = select i1 %22, %"class.WTF::AtomicString"* %23, %"class.WTF::AtomicString"* %16
  %25 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = lshr i32 %28, 8
  %30 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %1, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = add i32 %29, %31
  %33 = and i32 %32, %14
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %11, i64 %34
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %35, i64 0, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, -128
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %11, i64 %34, i32 0, i32 1, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  %42 = and i1 %38, %41
  br i1 %42, label %118, label %43

43:                                               ; preds = %10
  %44 = xor i32 %32, -1
  %45 = lshr i32 %32, 23
  %46 = add i32 %45, %44
  %47 = shl i32 %46, 12
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = xor i32 %49, %48
  %51 = shl i32 %50, 2
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 20
  %54 = xor i32 %53, %52
  %55 = or i32 %54, 1
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %43, %69
  %58 = phi %"class.WTF::StringImpl"* [ %40, %43 ], [ %80, %69 ]
  %59 = phi i32 [ %37, %43 ], [ %77, %69 ]
  %60 = phi %"struct.WTF::KeyValuePair.761"* [ %35, %43 ], [ %75, %69 ]
  %61 = phi %"struct.WTF::KeyValuePair.761"* [ null, %43 ], [ %70, %69 ]
  %62 = phi i64 [ %34, %43 ], [ %74, %69 ]
  %63 = phi i64 [ 0, %43 ], [ %72, %69 ]
  %64 = icmp eq i32 %59, -127
  br i1 %64, label %69, label %65

65:                                               ; preds = %57
  %66 = icmp eq i32 %59, %31
  %67 = icmp eq %"class.WTF::StringImpl"* %58, %19
  %68 = and i1 %66, %67
  br i1 %68, label %156, label %69

69:                                               ; preds = %57, %65
  %70 = phi %"struct.WTF::KeyValuePair.761"* [ %60, %57 ], [ %61, %65 ]
  %71 = icmp eq i64 %63, 0
  %72 = select i1 %71, i64 %56, i64 %63
  %73 = add i64 %72, %62
  %74 = and i64 %73, %15
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %11, i64 %74
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %75, i64 0, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, -128
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %11, i64 %74, i32 0, i32 1, i32 0, i32 0, i32 0
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  %82 = and i1 %78, %81
  br i1 %82, label %83, label %57

83:                                               ; preds = %69
  %84 = icmp eq %"struct.WTF::KeyValuePair.761"* %70, null
  br i1 %84, label %118, label %85

85:                                               ; preds = %83
  %86 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %86, label %104, label %87

87:                                               ; preds = %85
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4, !noalias !23
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %94 = load i32, i32* %93, align 4, !noalias !23
  %95 = zext i32 %94 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #10
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %92
  tail call void @llvm.trap() #10, !noalias !23
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4, !noalias !23
  br label %104

104:                                              ; preds = %85, %87, %102
  %105 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %70, i64 0, i32 0, i32 0
  store i32 -128, i32* %106, align 8
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %70, i64 0, i32 0, i32 1
  %108 = bitcast %"class.WTF::AtomicString"* %107 to i64*
  store i64 %105, i64* %108, align 8
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %70, i64 0, i32 1
  %110 = bitcast %"class.blink::Member.763"* %109 to i64*
  store i64 0, i64* %110, align 8
  tail call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* nonnull %70) #10
  %111 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 3
  %112 = load i32, i32* %111, align 8
  %113 = add i32 %112, 2147483647
  %114 = and i32 %113, 2147483647
  %115 = and i32 %112, -2147483648
  %116 = or i32 %114, %115
  store i32 %116, i32* %111, align 8
  %117 = load i32, i32* %30, align 4
  br label %118

118:                                              ; preds = %10, %83, %104
  %119 = phi i32 [ %117, %104 ], [ %31, %83 ], [ %31, %10 ]
  %120 = phi %"struct.WTF::KeyValuePair.761"* [ %70, %104 ], [ %75, %83 ], [ %35, %10 ]
  %121 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %120, i64 0, i32 0, i32 0
  store i32 %119, i32* %121, align 8
  %122 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %120, i64 0, i32 0, i32 1
  %123 = bitcast %"class.WTF::AtomicString"* %16 to i64*
  %124 = load i64, i64* %123, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %18, align 8
  %125 = bitcast %"class.WTF::AtomicString"* %122 to i64*
  %126 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %122, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %126, align 8
  store i64 %124, i64* %125, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %142, label %129

129:                                              ; preds = %118
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  br i1 %133, label %136, label %138

136:                                              ; preds = %129
  %137 = add i32 %135, -1
  store i32 %137, i32* %134, align 4
  br label %138

138:                                              ; preds = %136, %129
  %139 = phi i32 [ %137, %136 ], [ %135, %129 ]
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %127) #10
  br label %142

142:                                              ; preds = %118, %138, %141
  %143 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %120, i64 0, i32 1
  %144 = bitcast %"class.blink::Member.763"* %143 to i64*
  store atomic i64 0, i64* %144 monotonic, align 8
  tail call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* %120) #10
  %145 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %145, align 4
  %148 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 3
  %149 = load i32, i32* %148, align 8
  %150 = add i32 %149, %147
  %151 = shl i32 %150, 1
  %152 = load i32, i32* %12, align 8
  %153 = icmp ult i32 %151, %152
  br i1 %153, label %156, label %154

154:                                              ; preds = %142
  %155 = tail call %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable.759"* %0, %"struct.WTF::KeyValuePair.761"* %120)
  br label %156

156:                                              ; preds = %65, %142, %154
  %157 = phi i8 [ 1, %142 ], [ 1, %154 ], [ 0, %65 ]
  %158 = phi %"struct.WTF::KeyValuePair.761"* [ %120, %142 ], [ %155, %154 ], [ %60, %65 ]
  %159 = insertvalue { %"struct.WTF::KeyValuePair.761"*, i8 } undef, %"struct.WTF::KeyValuePair.761"* %158, 0
  %160 = insertvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %159, i8 %157, 1
  ret { %"struct.WTF::KeyValuePair.761"*, i8 } %160
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable.759"*, %"struct.WTF::KeyValuePair.761"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %44, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0), i8* %23, i8* %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.30, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #10
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %36 = call %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE12ExpandBufferEjPSB_Rb(%"class.WTF::HashTable.759"* %0, i32 %35, %"struct.WTF::KeyValuePair.761"* %1, i8* nonnull dereferenceable(1) %4) #10
  %37 = load i8, i8* %4, align 1, !range !21
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br i1 %38, label %44, label %90

39:                                               ; preds = %31
  %40 = zext i32 %14 to i64
  %41 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE4CallEm(i64 %40) #10
  %42 = bitcast %"class.blink::HeapHashTableBacking"* %41 to %"struct.WTF::KeyValuePair.761"*
  %43 = icmp eq i32 %14, 0
  br i1 %43, label %86, label %49

44:                                               ; preds = %34, %10
  %45 = phi i32 [ %8, %10 ], [ %35, %34 ]
  %46 = zext i32 %45 to i64
  %47 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE4CallEm(i64 %46) #10
  %48 = bitcast %"class.blink::HeapHashTableBacking"* %47 to %"struct.WTF::KeyValuePair.761"*
  br label %49

49:                                               ; preds = %44, %39
  %50 = phi i32 [ %14, %39 ], [ %45, %44 ]
  %51 = phi %"struct.WTF::KeyValuePair.761"* [ %42, %39 ], [ %48, %44 ]
  %52 = phi i64 [ %40, %39 ], [ %46, %44 ]
  %53 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !26
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 0, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %77, %49
  %56 = phi i64 [ 0, %49 ], [ %84, %77 ]
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %51, i64 %56
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8, !noalias !26
  %59 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %59, label %77, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4, !noalias !26
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %77

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %67 = load i32, i32* %66, align 4, !noalias !26
  %68 = zext i32 %67 to i33
  %69 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %68, i33 1) #10
  %70 = extractvalue { i33, i1 } %69, 1
  %71 = extractvalue { i33, i1 } %69, 0
  %72 = icmp slt i33 %71, 0
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75, !prof !2

74:                                               ; preds = %65
  call void @llvm.trap() #10, !noalias !26
  unreachable

75:                                               ; preds = %65
  %76 = trunc i33 %71 to i32
  store i32 %76, i32* %66, align 4, !noalias !26
  br label %77

77:                                               ; preds = %75, %60, %55
  %78 = ptrtoint %"class.WTF::StringImpl"* %58 to i64
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %57, i64 0, i32 0, i32 0
  store i32 -128, i32* %79, align 8
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %51, i64 %56, i32 0, i32 1
  %81 = bitcast %"class.WTF::AtomicString"* %80 to i64*
  store i64 %78, i64* %81, align 8
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %51, i64 %56, i32 1
  %83 = bitcast %"class.blink::Member.763"* %82 to i64*
  store i64 0, i64* %83, align 8
  call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* %57) #10
  %84 = add nuw nsw i64 %56, 1
  %85 = icmp eq i64 %84, %52
  br i1 %85, label %86, label %55

86:                                               ; preds = %77, %39
  %87 = phi i32 [ 0, %39 ], [ %50, %77 ]
  %88 = phi %"struct.WTF::KeyValuePair.761"* [ %42, %39 ], [ %51, %77 ]
  %89 = call %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE8RehashToEPSB_jSM_(%"class.WTF::HashTable.759"* %0, %"struct.WTF::KeyValuePair.761"* %88, i32 %87, %"struct.WTF::KeyValuePair.761"* %1) #10
  br label %90

90:                                               ; preds = %34, %86
  %91 = phi %"struct.WTF::KeyValuePair.761"* [ %89, %86 ], [ %36, %34 ]
  ret %"struct.WTF::KeyValuePair.761"* %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE12ExpandBufferEjPSB_Rb(%"class.WTF::HashTable.759"*, i32, %"struct.WTF::KeyValuePair.761"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #10
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !2

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #10
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !21
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.30, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.31, i64 0, i64 0)) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 0
  %32 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %31, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair.761"* %32, null
  br i1 %33, label %196, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = mul nuw nsw i64 %35, 24
  %37 = bitcast %"struct.WTF::KeyValuePair.761"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #10
  br i1 %38, label %39, label %196

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #10
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"struct.WTF::KeyValuePair.761"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %85, label %47

47:                                               ; preds = %39
  %48 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !29
  %49 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %48, i64 0, i32 0, i32 0, i32 0
  br label %50

50:                                               ; preds = %72, %47
  %51 = phi i64 [ 0, %47 ], [ %79, %72 ]
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %51
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8, !noalias !29
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %72, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4, !noalias !29
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !29
  %63 = zext i32 %62 to i33
  %64 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %63, i33 1) #10
  %65 = extractvalue { i33, i1 } %64, 1
  %66 = extractvalue { i33, i1 } %64, 0
  %67 = icmp slt i33 %66, 0
  %68 = or i1 %65, %67
  br i1 %68, label %69, label %70, !prof !2

69:                                               ; preds = %60
  call void @llvm.trap() #10, !noalias !29
  unreachable

70:                                               ; preds = %60
  %71 = trunc i33 %66 to i32
  store i32 %71, i32* %61, align 4, !noalias !29
  br label %72

72:                                               ; preds = %70, %55, %50
  %73 = ptrtoint %"class.WTF::StringImpl"* %53 to i64
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %52, i64 0, i32 0, i32 0
  store i32 -128, i32* %74, align 8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %51, i32 0, i32 1
  %76 = bitcast %"class.WTF::AtomicString"* %75 to i64*
  store i64 %73, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %51, i32 1
  %78 = bitcast %"class.blink::Member.763"* %77 to i64*
  store i64 0, i64* %78, align 8
  call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* %52) #10
  %79 = add nuw nsw i64 %51, 1
  %80 = icmp eq i64 %79, %43
  br i1 %80, label %81, label %50

81:                                               ; preds = %72
  br i1 %46, label %85, label %82

82:                                               ; preds = %81
  %83 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %83, i64 0, i32 0, i32 0, i32 0
  br label %98

85:                                               ; preds = %160, %39, %81
  %86 = phi %"struct.WTF::KeyValuePair.761"* [ null, %81 ], [ null, %39 ], [ %105, %160 ]
  %87 = bitcast %"class.WTF::HashTable.759"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %87, align 8
  %88 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %92 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %91) #10
  br label %93

93:                                               ; preds = %85, %90
  %94 = icmp eq i32 %1, 0
  br i1 %94, label %163, label %95

95:                                               ; preds = %93
  %96 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !32
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %96, i64 0, i32 0, i32 0, i32 0
  br label %165

98:                                               ; preds = %160, %82
  %99 = phi i64 [ 0, %82 ], [ %161, %160 ]
  %100 = phi %"struct.WTF::KeyValuePair.761"* [ null, %82 ], [ %105, %160 ]
  %101 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %31, align 8
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %101, i64 %99
  %103 = icmp eq %"struct.WTF::KeyValuePair.761"* %102, %2
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %99
  %105 = select i1 %103, %"struct.WTF::KeyValuePair.761"* %104, %"struct.WTF::KeyValuePair.761"* %100
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %102, i64 0, i32 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, -128
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %101, i64 %99, i32 0, i32 1, i32 0, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  %112 = and i1 %108, %111
  %113 = icmp eq i32 %107, -127
  %114 = or i1 %113, %112
  br i1 %114, label %115, label %142

115:                                              ; preds = %98
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8, !noalias !35
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %135, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4, !noalias !35
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %135

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 0
  %125 = load i32, i32* %124, align 4, !noalias !35
  %126 = zext i32 %125 to i33
  %127 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %126, i33 1) #10
  %128 = extractvalue { i33, i1 } %127, 1
  %129 = extractvalue { i33, i1 } %127, 0
  %130 = icmp slt i33 %129, 0
  %131 = or i1 %128, %130
  br i1 %131, label %132, label %133, !prof !2

132:                                              ; preds = %123
  call void @llvm.trap() #10, !noalias !35
  unreachable

133:                                              ; preds = %123
  %134 = trunc i33 %129 to i32
  store i32 %134, i32* %124, align 4, !noalias !35
  br label %135

135:                                              ; preds = %115, %118, %133
  %136 = ptrtoint %"class.WTF::StringImpl"* %116 to i64
  %137 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %104, i64 0, i32 0, i32 0
  store i32 -128, i32* %137, align 8
  %138 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %99, i32 0, i32 1
  %139 = bitcast %"class.WTF::AtomicString"* %138 to i64*
  store i64 %136, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %45, i64 %99, i32 1
  %141 = bitcast %"class.blink::Member.763"* %140 to i64*
  store i64 0, i64* %141, align 8
  call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* %104) #10
  br label %160

142:                                              ; preds = %98
  call void @_ZN3WTF5MoverINS_12KeyValuePairINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS4_6MemberINS4_16LiveNodeListBaseEEEEENS4_13HeapAllocatorENS_18HashMapValueTraitsINS_10HashTraitsIS7_EENSE_ISA_EEEELb1EE4MoveEOSB_RSB_(%"struct.WTF::KeyValuePair.761"* dereferenceable(24) %102, %"struct.WTF::KeyValuePair.761"* dereferenceable(24) %104)
  %143 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %31, align 8
  %144 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %143, i64 %99, i32 0, i32 1, i32 0, i32 0, i32 0
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %146 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %146, label %160, label %147

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %145) #10
  br label %160

160:                                              ; preds = %159, %156, %142, %135
  %161 = add nuw nsw i64 %99, 1
  %162 = icmp eq i64 %161, %43
  br i1 %162, label %85, label %98

163:                                              ; preds = %187, %93
  %164 = call %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE8RehashToEPSB_jSM_(%"class.WTF::HashTable.759"* %0, %"struct.WTF::KeyValuePair.761"* %42, i32 %1, %"struct.WTF::KeyValuePair.761"* %86)
  br label %196

165:                                              ; preds = %187, %95
  %166 = phi i64 [ 0, %95 ], [ %194, %187 ]
  %167 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %42, i64 %166
  %168 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8, !noalias !32
  %169 = icmp eq %"class.WTF::StringImpl"* %168, null
  br i1 %169, label %187, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load atomic i32, i32* %171 monotonic, align 4, !noalias !32
  %173 = and i32 %172, 2
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 0
  %177 = load i32, i32* %176, align 4, !noalias !32
  %178 = zext i32 %177 to i33
  %179 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %178, i33 1) #10
  %180 = extractvalue { i33, i1 } %179, 1
  %181 = extractvalue { i33, i1 } %179, 0
  %182 = icmp slt i33 %181, 0
  %183 = or i1 %180, %182
  br i1 %183, label %184, label %185, !prof !2

184:                                              ; preds = %175
  call void @llvm.trap() #10, !noalias !32
  unreachable

185:                                              ; preds = %175
  %186 = trunc i33 %181 to i32
  store i32 %186, i32* %176, align 4, !noalias !32
  br label %187

187:                                              ; preds = %165, %170, %185
  %188 = ptrtoint %"class.WTF::StringImpl"* %168 to i64
  %189 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %167, i64 0, i32 0, i32 0
  store i32 -128, i32* %189, align 8
  %190 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %42, i64 %166, i32 0, i32 1
  %191 = bitcast %"class.WTF::AtomicString"* %190 to i64*
  store i64 %188, i64* %191, align 8
  %192 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %42, i64 %166, i32 1
  %193 = bitcast %"class.blink::Member.763"* %192 to i64*
  store i64 0, i64* %193, align 8
  call void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"* %167) #10
  %194 = add nuw nsw i64 %166, 1
  %195 = icmp eq i64 %194, %35
  br i1 %195, label %163, label %165

196:                                              ; preds = %34, %30, %163
  %197 = phi %"struct.WTF::KeyValuePair.761"* [ %164, %163 ], [ null, %30 ], [ null, %34 ]
  ret %"struct.WTF::KeyValuePair.761"* %197
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.761"* @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE8RehashToEPSB_jSM_(%"class.WTF::HashTable.759"*, %"struct.WTF::KeyValuePair.761"*, i32, %"struct.WTF::KeyValuePair.761"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.759", align 8
  %6 = bitcast %"class.WTF::HashTable.759"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.759"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.761"* %1, %"struct.WTF::KeyValuePair.761"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = ptrtoint %"struct.WTF::KeyValuePair.761"* %1 to i64
  %17 = bitcast %"struct.WTF::KeyValuePair.761"* %1 to i8*
  br label %25

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 0
  %20 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %19, align 8
  br label %95

21:                                               ; preds = %120
  %22 = bitcast %"class.WTF::HashTable.759"* %5 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = ptrtoint i8* %23 to i64
  br label %25

25:                                               ; preds = %15, %21
  %26 = phi i64 [ %16, %15 ], [ %24, %21 ]
  %27 = phi i32 [ 0, %15 ], [ %121, %21 ]
  %28 = phi i8* [ %17, %15 ], [ %23, %21 ]
  %29 = phi %"struct.WTF::KeyValuePair.761"* [ null, %15 ], [ %123, %21 ]
  %30 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %25
  %33 = bitcast %"class.WTF::HashTable.759"* %5 to i64*
  br label %38

34:                                               ; preds = %25
  call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %28) #10
  %35 = load i32, i32* %12, align 8
  %36 = bitcast %"class.WTF::HashTable.759"* %5 to i64*
  %37 = load i64, i64* %36, align 8
  br label %38

38:                                               ; preds = %32, %34
  %39 = phi i64* [ %33, %32 ], [ %36, %34 ]
  %40 = phi i64 [ %26, %32 ], [ %37, %34 ]
  %41 = phi i32 [ %27, %32 ], [ %35, %34 ]
  %42 = bitcast %"class.WTF::HashTable.759"* %0 to i64*
  %43 = load i64, i64* %42, align 8
  store atomic i64 %40, i64* %42 monotonic, align 8
  %44 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = inttoptr i64 %40 to i8*
  %48 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %47) #10
  br label %49

49:                                               ; preds = %38, %46
  store i32 %2, i32* %12, align 8
  store i64 %43, i64* %39, align 8
  store i32 %41, i32* %8, align 8
  %50 = inttoptr i64 %43 to %"struct.WTF::KeyValuePair.761"*
  %51 = icmp eq i64 %43, 0
  br i1 %51, label %91, label %52

52:                                               ; preds = %49
  %53 = icmp eq i32 %41, 0
  br i1 %53, label %89, label %54

54:                                               ; preds = %52
  %55 = zext i32 %41 to i64
  br label %56

56:                                               ; preds = %86, %54
  %57 = phi i64 [ 0, %54 ], [ %87, %86 ]
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %50, i64 %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, -128
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %50, i64 %57, i32 0, i32 1, i32 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  %64 = and i1 %60, %63
  %65 = icmp eq i32 %59, -127
  %66 = or i1 %65, %64
  br i1 %66, label %86, label %67

67:                                               ; preds = %56
  br i1 %63, label %81, label %68

68:                                               ; preds = %67
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #10
  br label %81

81:                                               ; preds = %80, %77, %67
  store i32 -127, i32* %58, align 4
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %50, i64 %57, i32 0, i32 1
  %83 = bitcast %"class.WTF::AtomicString"* %82 to i64*
  store i64 0, i64* %83, align 1
  %84 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %50, i64 %57, i32 1
  %85 = bitcast %"class.blink::Member.763"* %84 to i64*
  store atomic i64 0, i64* %85 monotonic, align 8
  br label %86

86:                                               ; preds = %81, %56
  %87 = add nuw nsw i64 %57, 1
  %88 = icmp eq i64 %87, %55
  br i1 %88, label %89, label %56

89:                                               ; preds = %86, %52
  %90 = inttoptr i64 %43 to i8*
  call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %90) #10
  store atomic i64 0, i64* %39 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %91

91:                                               ; preds = %49, %89
  %92 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 3
  %93 = load i32, i32* %92, align 8
  %94 = and i32 %93, -2147483648
  store i32 %94, i32* %92, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"struct.WTF::KeyValuePair.761"* %29

95:                                               ; preds = %18, %120
  %96 = phi i32 [ %13, %18 ], [ %121, %120 ]
  %97 = phi %"struct.WTF::KeyValuePair.761"* [ %20, %18 ], [ %122, %120 ]
  %98 = phi %"struct.WTF::KeyValuePair.761"* [ null, %18 ], [ %123, %120 ]
  %99 = phi i32 [ 0, %18 ], [ %124, %120 ]
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %97, i64 %100
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %101, i64 0, i32 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, -128
  %105 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %97, i64 %100, i32 0, i32 1, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  %108 = and i1 %104, %107
  %109 = icmp eq i32 %103, -127
  %110 = or i1 %109, %108
  br i1 %110, label %120, label %111

111:                                              ; preds = %95
  %112 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %101, i64 0, i32 0
  %113 = call { %"struct.WTF::KeyValuePair.761"*, i8 } @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE16LookupForWritingERKS6_(%"class.WTF::HashTable.759"* nonnull %5, %"struct.std::__1::pair.762"* dereferenceable(16) %112) #10
  %114 = extractvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %113, 0
  call void @_ZN3WTF5MoverINS_12KeyValuePairINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS4_6MemberINS4_16LiveNodeListBaseEEEEENS4_13HeapAllocatorENS_18HashMapValueTraitsINS_10HashTraitsIS7_EENSE_ISA_EEEELb1EE4MoveEOSB_RSB_(%"struct.WTF::KeyValuePair.761"* dereferenceable(24) %101, %"struct.WTF::KeyValuePair.761"* dereferenceable(24) %114) #10
  %115 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %19, align 8
  %116 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %115, i64 %100
  %117 = icmp eq %"struct.WTF::KeyValuePair.761"* %116, %3
  %118 = select i1 %117, %"struct.WTF::KeyValuePair.761"* %114, %"struct.WTF::KeyValuePair.761"* %98
  %119 = load i32, i32* %12, align 8
  br label %120

120:                                              ; preds = %95, %111
  %121 = phi i32 [ %96, %95 ], [ %119, %111 ]
  %122 = phi %"struct.WTF::KeyValuePair.761"* [ %97, %95 ], [ %115, %111 ]
  %123 = phi %"struct.WTF::KeyValuePair.761"* [ %98, %95 ], [ %118, %111 ]
  %124 = add i32 %99, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %21, label %95
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5MoverINS_12KeyValuePairINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS4_6MemberINS4_16LiveNodeListBaseEEEEENS4_13HeapAllocatorENS_18HashMapValueTraitsINS_10HashTraitsIS7_EENSE_ISA_EEEELb1EE4MoveEOSB_RSB_(%"struct.WTF::KeyValuePair.761"* dereferenceable(24), %"struct.WTF::KeyValuePair.761"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %4 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %3, i64 0, i32 1
  %5 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %4) #10
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %9, !prof !2

7:                                                ; preds = %2
  %8 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %4, i8* %8) #10
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi i8* [ %8, %7 ], [ %5, %2 ]
  %11 = bitcast i8* %10 to %"class.blink::ThreadState"**
  %12 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %12, i64 0, i32 14
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %32, label %19

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  br i1 %23, label %26, label %28

26:                                               ; preds = %19
  %27 = add i32 %25, -1
  store i32 %27, i32* %24, align 4
  br label %28

28:                                               ; preds = %26, %19
  %29 = phi i32 [ %27, %26 ], [ %25, %19 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %17) #10
  br label %32

32:                                               ; preds = %9, %28, %31
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %1, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %0, i64 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %1, i64 0, i32 0, i32 1
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %0, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = bitcast %"class.WTF::AtomicString"* %37 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.WTF::AtomicString"* %36 to i64*
  store i64 %40, i64* %41, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %38, align 8
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %1, i64 0, i32 1
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %0, i64 0, i32 1
  %44 = bitcast %"class.blink::Member.763"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.blink::Member.763"* %42 to i64*
  store i64 %45, i64* %46, align 8
  %47 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %48 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %47, i64 0, i32 1
  %49 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %48) #10
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %53, !prof !2

51:                                               ; preds = %32
  %52 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %48, i8* %52) #10
  br label %53

53:                                               ; preds = %32, %51
  %54 = phi i8* [ %52, %51 ], [ %49, %32 ]
  %55 = bitcast i8* %54 to %"class.blink::ThreadState"**
  %56 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %55, align 8
  %57 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %56, i64 0, i32 14
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, -1
  store i64 %59, i64* %57, align 8
  ret void
}

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.33, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 24
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS1_12AtomicStringEEENS1_12KeyValuePairIS7_NS_6MemberINS_16LiveNodeListBaseEEEEENS1_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS7_EENSH_ISB_EEEESI_NS_13HeapAllocatorEEEE14AllocateObjectISN_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS1_12AtomicStringEEENS1_12KeyValuePairIS7_NS_6MemberINS_16LiveNodeListBaseEEEEENS1_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS7_EENSH_ISB_EEEESI_NS_13HeapAllocatorEEEE14AllocateObjectISN_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 5, i32 %20, i8* getelementptr inbounds ([616 x i8], [616 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINSt3__14pairINS1_14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS8_NS1_6MemberINS1_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS1_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS1_13HeapAllocatorEEEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 -2
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ult i16 %7, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %22

17:                                               ; preds = %4
  %18 = load atomic i16, i16* %6 monotonic, align 2
  %19 = lshr i16 %18, 2
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 3
  br label %22

22:                                               ; preds = %9, %17
  %23 = phi i64 [ %16, %9 ], [ %21, %17 ]
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)***
  %25 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)**, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %25, i64 4
  %27 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0, i8* nonnull %1, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, i64 %23) #10
  br i1 %28, label %30, label %29

29:                                               ; preds = %2, %22
  tail call void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS8_NS5_6MemberINS5_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS5_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"* %0, i8* %1) #10
  br label %30

30:                                               ; preds = %22, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS3_12AtomicStringEEENS3_12KeyValuePairIS9_NS_6MemberINS_16LiveNodeListBaseEEEEENS3_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS9_EENSJ_ISD_EEEESK_NS_13HeapAllocatorEEEEEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -2
  %3 = bitcast i8* %2 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = lshr i16 %4, 2
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %15, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 -8
  %9 = ptrtoint i8* %8 to i64
  %10 = and i64 %9, -131072
  %11 = inttoptr i64 %10 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4144
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 16
  br label %18

15:                                               ; preds = %1
  %16 = zext i16 %5 to i64
  %17 = shl nuw nsw i64 %16, 3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i64 [ %14, %7 ], [ %17, %15 ]
  %20 = add i64 %19, -8
  %21 = udiv i64 %20, 24
  %22 = bitcast i8* %0 to %"struct.WTF::KeyValuePair.761"*
  %23 = icmp ugt i64 %20, 23
  br i1 %23, label %24, label %51

24:                                               ; preds = %18, %47
  %25 = phi i64 [ %49, %47 ], [ 0, %18 ]
  %26 = phi i32 [ %48, %47 ], [ 0, %18 ]
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %22, i64 %25, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %22, i64 %25, i32 0, i32 1, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  %32 = icmp eq i32 %28, -127
  %33 = or i1 %32, %31
  br i1 %33, label %47, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #10
  br label %47

47:                                               ; preds = %46, %43, %24
  %48 = add i32 %26, 1
  %49 = zext i32 %48 to i64
  %50 = icmp ugt i64 %21, %49
  br i1 %50, label %24, label %51

51:                                               ; preds = %47, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS2_12KeyValuePairIS8_NS_6MemberINS_16LiveNodeListBaseEEEEENS2_24KeyValuePairKeyExtractorENS_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS8_NS5_6MemberINS5_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS5_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS8_EENSI_ISC_EEEESJ_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"struct.WTF::KeyValuePair.761"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %9, %17
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = udiv i64 %22, 24
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #10
  %29 = icmp ugt i64 %22, 23
  br i1 %29, label %30, label %32

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %33

32:                                               ; preds = %198, %20
  ret void

33:                                               ; preds = %30, %198
  %34 = phi i64 [ 0, %30 ], [ %199, %198 ]
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %3, i64 %34
  br i1 %28, label %36, label %118

36:                                               ; preds = %33
  %37 = bitcast %"struct.WTF::KeyValuePair.761"* %35 to i64*
  %38 = load atomic i64, i64* %37 monotonic, align 8
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %3, i64 %34, i32 0, i32 1
  %41 = bitcast %"class.WTF::AtomicString"* %40 to i64*
  %42 = load atomic i64, i64* %41 monotonic, align 8
  %43 = icmp eq i32 %39, -128
  %44 = icmp eq i64 %42, 0
  %45 = and i1 %44, %43
  %46 = icmp eq i32 %39, -127
  %47 = or i1 %46, %45
  br i1 %47, label %198, label %48

48:                                               ; preds = %36
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %3, i64 %34, i32 1
  %50 = bitcast %"class.blink::Member.763"* %49 to i64*
  %51 = load atomic i64, i64* %50 monotonic, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %198, label %53

53:                                               ; preds = %48
  %54 = inttoptr i64 %51 to i8*
  %55 = and i64 %51, -131072
  %56 = inttoptr i64 %55 to i8*
  %57 = getelementptr inbounds i8, i8* %56, i64 4138
  %58 = load i8, i8* %57, align 2
  %59 = icmp eq i8 %58, 1
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = getelementptr inbounds i8, i8* %56, i64 4160
  br label %100

62:                                               ; preds = %53
  %63 = getelementptr inbounds i8, i8* %56, i64 4096
  %64 = bitcast i8* %63 to %"class.blink::NormalPage"*
  %65 = getelementptr inbounds i8, i8* %56, i64 4400
  %66 = bitcast i8* %65 to i8**
  %67 = bitcast i8* %65 to i64*
  %68 = load i64, i64* %67, align 16
  %69 = sub i64 %51, %68
  %70 = lshr i64 %69, 3
  %71 = lshr i64 %69, 6
  %72 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %64, i64 0, i32 2, i32 0, i32 1, i64 %71
  %73 = load atomic i8, i8* %72 acquire, align 1
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 7
  %76 = shl i32 2, %75
  %77 = trunc i32 %76 to i8
  %78 = add i8 %77, -1
  %79 = and i8 %78, %73
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %87

81:                                               ; preds = %62, %81
  %82 = phi i64 [ %83, %81 ], [ %71, %62 ]
  %83 = add i64 %82, -1
  %84 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %64, i64 0, i32 2, i32 0, i32 1, i64 %83
  %85 = load atomic i8, i8* %84 acquire, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %81, label %87

87:                                               ; preds = %81, %62
  %88 = phi i64 [ %71, %62 ], [ %83, %81 ]
  %89 = phi i8 [ %79, %62 ], [ %85, %81 ]
  %90 = zext i8 %89 to i32
  %91 = tail call i32 @llvm.ctlz.i32(i32 %90, i1 true) #10, !range !38
  %92 = add nsw i32 %91, -24
  %93 = shl i64 %88, 3
  %94 = or i64 %93, 7
  %95 = sext i32 %92 to i64
  %96 = sub i64 %94, %95
  %97 = shl i64 %96, 3
  %98 = load i8*, i8** %66, align 16
  %99 = getelementptr inbounds i8, i8* %98, i64 %97
  br label %100

100:                                              ; preds = %87, %60
  %101 = phi i8* [ %61, %60 ], [ %99, %87 ]
  %102 = getelementptr inbounds i8, i8* %101, i64 8
  %103 = getelementptr inbounds i8, i8* %101, i64 4
  %104 = bitcast i8* %103 to i16*
  %105 = load atomic i16, i16* %104 acquire, align 2
  %106 = lshr i16 %105, 2
  %107 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %108 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %107, i64 0, i32 0
  %109 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %108, align 8
  %110 = zext i16 %106 to i64
  %111 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %109, i64 %110
  %112 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %111, align 8
  %113 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %112, i64 0, i32 0
  %114 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %113, align 8
  %115 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %116 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %115, i64 5
  %117 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %116, align 8
  tail call void %117(%"class.blink::Visitor"* %0, i8* nonnull %54, i8* %102, void (%"class.blink::Visitor"*, i8*)* %114) #10
  br label %198

118:                                              ; preds = %33
  %119 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %35, i64 0, i32 0, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, -128
  %122 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %3, i64 %34, i32 0, i32 1, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  %125 = and i1 %121, %124
  %126 = icmp eq i32 %120, -127
  %127 = or i1 %126, %125
  br i1 %127, label %198, label %128

128:                                              ; preds = %118
  %129 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %3, i64 %34, i32 1
  %130 = bitcast %"class.blink::Member.763"* %129 to i64*
  %131 = load atomic i64, i64* %130 monotonic, align 8
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %198, label %133

133:                                              ; preds = %128
  %134 = inttoptr i64 %131 to i8*
  %135 = and i64 %131, -131072
  %136 = inttoptr i64 %135 to i8*
  %137 = getelementptr inbounds i8, i8* %136, i64 4138
  %138 = load i8, i8* %137, align 2
  %139 = icmp eq i8 %138, 1
  br i1 %139, label %140, label %142

140:                                              ; preds = %133
  %141 = getelementptr inbounds i8, i8* %136, i64 4160
  br label %180

142:                                              ; preds = %133
  %143 = getelementptr inbounds i8, i8* %136, i64 4096
  %144 = bitcast i8* %143 to %"class.blink::NormalPage"*
  %145 = getelementptr inbounds i8, i8* %136, i64 4400
  %146 = bitcast i8* %145 to i8**
  %147 = bitcast i8* %145 to i64*
  %148 = load i64, i64* %147, align 16
  %149 = sub i64 %131, %148
  %150 = lshr i64 %149, 3
  %151 = lshr i64 %149, 6
  %152 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %144, i64 0, i32 2, i32 0, i32 1, i64 %151
  %153 = load atomic i8, i8* %152 acquire, align 1
  %154 = trunc i64 %150 to i32
  %155 = and i32 %154, 7
  %156 = shl i32 2, %155
  %157 = trunc i32 %156 to i8
  %158 = add i8 %157, -1
  %159 = and i8 %158, %153
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %167

161:                                              ; preds = %142, %161
  %162 = phi i64 [ %163, %161 ], [ %151, %142 ]
  %163 = add i64 %162, -1
  %164 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %144, i64 0, i32 2, i32 0, i32 1, i64 %163
  %165 = load atomic i8, i8* %164 acquire, align 1
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %161, label %167

167:                                              ; preds = %161, %142
  %168 = phi i64 [ %151, %142 ], [ %163, %161 ]
  %169 = phi i8 [ %159, %142 ], [ %165, %161 ]
  %170 = zext i8 %169 to i32
  %171 = tail call i32 @llvm.ctlz.i32(i32 %170, i1 true) #10, !range !38
  %172 = add nsw i32 %171, -24
  %173 = shl i64 %168, 3
  %174 = or i64 %173, 7
  %175 = sext i32 %172 to i64
  %176 = sub i64 %174, %175
  %177 = shl i64 %176, 3
  %178 = load i8*, i8** %146, align 16
  %179 = getelementptr inbounds i8, i8* %178, i64 %177
  br label %180

180:                                              ; preds = %167, %140
  %181 = phi i8* [ %141, %140 ], [ %179, %167 ]
  %182 = getelementptr inbounds i8, i8* %181, i64 8
  %183 = getelementptr inbounds i8, i8* %181, i64 4
  %184 = bitcast i8* %183 to i16*
  %185 = load atomic i16, i16* %184 acquire, align 2
  %186 = lshr i16 %185, 2
  %187 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %188 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %187, i64 0, i32 0
  %189 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %188, align 8
  %190 = zext i16 %186 to i64
  %191 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %189, i64 %190
  %192 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %191, align 8
  %193 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %192, i64 0, i32 0
  %194 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %193, align 8
  %195 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %196 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %195, i64 5
  %197 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %196, align 8
  tail call void %197(%"class.blink::Visitor"* %0, i8* nonnull %134, i8* %182, void (%"class.blink::Visitor"*, i8*)* %194) #10
  br label %198

198:                                              ; preds = %180, %128, %36, %48, %100, %118
  %199 = add nuw nsw i64 %34, 1
  %200 = icmp ult i64 %199, %23
  br i1 %200, label %33, label %32
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.761"*, i8 } @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE16LookupForWritingERKS6_(%"class.WTF::HashTable.759"*, %"struct.std::__1::pair.762"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.761"*, %"struct.WTF::KeyValuePair.761"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.759", %"class.WTF::HashTable.759"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %1, i64 0, i32 1
  %10 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %10, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %12, %14
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_star_atomE, align 8
  %17 = select i1 %15, %"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %9
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = lshr i32 %21, 8
  %23 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %1, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %22, %24
  %26 = and i32 %25, %7
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %4, i64 %27
  %29 = ptrtoint %"struct.WTF::KeyValuePair.761"* %28 to i64
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %28, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, -128
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %4, i64 %27, i32 0, i32 1, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  %36 = and i1 %32, %35
  br i1 %36, label %53, label %37

37:                                               ; preds = %2
  %38 = xor i32 %25, -1
  %39 = lshr i32 %25, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %59

51:                                               ; preds = %72
  %52 = ptrtoint %"struct.WTF::KeyValuePair.761"* %78 to i64
  br label %53

53:                                               ; preds = %51, %2
  %54 = phi i64 [ %29, %2 ], [ %52, %51 ]
  %55 = phi %"struct.WTF::KeyValuePair.761"* [ null, %2 ], [ %73, %51 ]
  %56 = icmp eq %"struct.WTF::KeyValuePair.761"* %55, null
  %57 = ptrtoint %"struct.WTF::KeyValuePair.761"* %55 to i64
  %58 = select i1 %56, i64 %54, i64 %57
  br label %87

59:                                               ; preds = %72, %37
  %60 = phi %"class.WTF::StringImpl"* [ %34, %37 ], [ %84, %72 ]
  %61 = phi %"struct.WTF::KeyValuePair.761"* [ null, %37 ], [ %73, %72 ]
  %62 = phi i32 [ %31, %37 ], [ %81, %72 ]
  %63 = phi i64 [ %29, %37 ], [ %79, %72 ]
  %64 = phi %"struct.WTF::KeyValuePair.761"* [ %28, %37 ], [ %78, %72 ]
  %65 = phi i64 [ %27, %37 ], [ %77, %72 ]
  %66 = phi i64 [ 0, %37 ], [ %75, %72 ]
  %67 = icmp eq i32 %62, -127
  br i1 %67, label %72, label %68

68:                                               ; preds = %59
  %69 = icmp eq i32 %62, %24
  %70 = icmp eq %"class.WTF::StringImpl"* %60, %12
  %71 = and i1 %70, %69
  br i1 %71, label %87, label %72

72:                                               ; preds = %68, %59
  %73 = phi %"struct.WTF::KeyValuePair.761"* [ %61, %68 ], [ %64, %59 ]
  %74 = icmp eq i64 %66, 0
  %75 = select i1 %74, i64 %50, i64 %66
  %76 = add i64 %75, %65
  %77 = and i64 %76, %8
  %78 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %4, i64 %77
  %79 = ptrtoint %"struct.WTF::KeyValuePair.761"* %78 to i64
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %78, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, -128
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %4, i64 %77, i32 0, i32 1, i32 0, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  %86 = and i1 %82, %85
  br i1 %86, label %51, label %59

87:                                               ; preds = %68, %53
  %88 = phi i64 [ %58, %53 ], [ %63, %68 ]
  %89 = phi i8 [ 0, %53 ], [ 1, %68 ]
  %90 = inttoptr i64 %88 to %"struct.WTF::KeyValuePair.761"*
  %91 = insertvalue { %"struct.WTF::KeyValuePair.761"*, i8 } undef, %"struct.WTF::KeyValuePair.761"* %90, 0
  %92 = insertvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %91, i8 %89, 1
  ret { %"struct.WTF::KeyValuePair.761"*, i8 } %92
}

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #2

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13HeapAllocator15NotifyNewObjectIN3WTF12KeyValuePairINSt3__14pairINS_14CollectionTypeENS2_12AtomicStringEEENS_6MemberINS_16LiveNodeListBaseEEEEENS2_18HashMapValueTraitsINS2_10HashTraitsIS8_EENSE_ISB_EEEEEEvPT_(%"struct.WTF::KeyValuePair.761"*) local_unnamed_addr #0 comdat align 2 {
  %2 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %98, label %4

4:                                                ; preds = %1
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #10
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %4
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #10
  br label %11

11:                                               ; preds = %4, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %4 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 9
  %16 = load i8, i8* %15, align 1, !range !21
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %98, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 13
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %19, align 8
  %22 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %23 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %23, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %0, i64 0, i32 1
  %26 = bitcast %"class.blink::Member.763"* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %95, label %29

29:                                               ; preds = %18
  %30 = inttoptr i64 %27 to i8*
  %31 = and i64 %27, -131072
  %32 = inttoptr i64 %31 to i8*
  %33 = getelementptr inbounds i8, i8* %32, i64 4138
  %34 = load i8, i8* %33, align 2
  %35 = icmp eq i8 %34, 1
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = getelementptr inbounds i8, i8* %32, i64 4160
  br label %75

38:                                               ; preds = %29
  %39 = getelementptr inbounds i8, i8* %32, i64 4400
  %40 = bitcast i8* %39 to %"class.blink::ObjectStartBitmap"*
  %41 = bitcast i8* %39 to i8**
  %42 = bitcast i8* %39 to i64*
  %43 = load i64, i64* %42, align 16
  %44 = sub i64 %27, %43
  %45 = lshr i64 %44, 3
  %46 = lshr i64 %44, 6
  %47 = getelementptr inbounds %"class.blink::ObjectStartBitmap", %"class.blink::ObjectStartBitmap"* %40, i64 0, i32 1, i64 %46
  %48 = load atomic i8, i8* %47 acquire, align 1
  %49 = trunc i64 %45 to i32
  %50 = and i32 %49, 7
  %51 = shl i32 2, %50
  %52 = trunc i32 %51 to i8
  %53 = add i8 %52, -1
  %54 = and i8 %53, %48
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %38, %56
  %57 = phi i64 [ %58, %56 ], [ %46, %38 ]
  %58 = add i64 %57, -1
  %59 = getelementptr inbounds %"class.blink::ObjectStartBitmap", %"class.blink::ObjectStartBitmap"* %40, i64 0, i32 1, i64 %58
  %60 = load atomic i8, i8* %59 acquire, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %56, label %62

62:                                               ; preds = %56, %38
  %63 = phi i64 [ %46, %38 ], [ %58, %56 ]
  %64 = phi i8 [ %54, %38 ], [ %60, %56 ]
  %65 = zext i8 %64 to i32
  %66 = tail call i32 @llvm.ctlz.i32(i32 %65, i1 true) #10, !range !38
  %67 = add nsw i32 %66, -24
  %68 = shl i64 %63, 3
  %69 = or i64 %68, 7
  %70 = sext i32 %67 to i64
  %71 = sub i64 %69, %70
  %72 = shl i64 %71, 3
  %73 = load i8*, i8** %41, align 16
  %74 = getelementptr inbounds i8, i8* %73, i64 %72
  br label %75

75:                                               ; preds = %36, %62
  %76 = phi i8* [ %37, %36 ], [ %74, %62 ]
  %77 = getelementptr inbounds i8, i8* %76, i64 8
  %78 = getelementptr inbounds i8, i8* %76, i64 4
  %79 = bitcast i8* %78 to i16*
  %80 = load atomic i16, i16* %79 acquire, align 2
  %81 = lshr i16 %80, 2
  %82 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %83 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %82, i64 0, i32 0
  %84 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %83, align 8
  %85 = zext i16 %81 to i64
  %86 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %84, i64 %85
  %87 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %86, align 8
  %88 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %87, i64 0, i32 0
  %89 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %88, align 8
  %90 = bitcast %"class.blink::MarkingVisitor"* %23 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %91 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %90, align 8
  %92 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %91, i64 5
  %93 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %92, align 8
  tail call void %93(%"class.blink::Visitor"* %24, i8* nonnull %30, i8* %77, void (%"class.blink::Visitor"*, i8*)* %89) #10
  %94 = load i64, i64* %19, align 8
  br label %95

95:                                               ; preds = %18, %75
  %96 = phi i64 [ %21, %18 ], [ %94, %75 ]
  %97 = add i64 %96, -1
  store i64 %97, i64* %19, align 8
  br label %98

98:                                               ; preds = %1, %11, %95
  ret void
}

declare void @_ZN5blink23HTMLTableRowsCollectionC1ERNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::HTMLTableRowsCollection"*, %"class.blink::ContainerNode"* dereferenceable(80), i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLCollection"* @_ZN5blink17NodeListsNodeData8AddCacheINS_14HTMLCollectionEEEPT_RNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::NodeListsNodeData"*, %"class.blink::ContainerNode"* dereferenceable(80), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair.762", align 8
  %5 = alloca i8*, align 8
  %6 = bitcast %"struct.std::__1::pair.762"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %8 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %4, i64 0, i32 0
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"struct.std::__1::pair.762", %"struct.std::__1::pair.762"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #10
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #10
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %3, %13, %28
  %31 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  store i8* null, i8** %5, align 8
  %32 = getelementptr inbounds %"class.blink::NodeListsNodeData", %"class.blink::NodeListsNodeData"* %0, i64 0, i32 1, i32 0, i32 0
  %33 = call { %"struct.WTF::KeyValuePair.761"*, i8 } @_ZN3WTF9HashTableINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEENS_12KeyValuePairIS6_NS3_6MemberINS3_16LiveNodeListBaseEEEEENS_24KeyValuePairKeyExtractorENS3_17NodeListsNodeData31NodeListAtomicCacheMapEntryHashENS_18HashMapValueTraitsINS_10HashTraitsIS6_EENSG_ISA_EEEESH_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISJ_SE_SK_EES6_DnEENS_18HashTableAddResultISL_SB_EEOT0_OT1_(%"class.WTF::HashTable.759"* %32, %"struct.std::__1::pair.762"* nonnull dereferenceable(16) %4, i8** nonnull dereferenceable(8) %5) #10
  %34 = extractvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %33, 0
  %35 = extractvalue { %"struct.WTF::KeyValuePair.761"*, i8 } %33, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #10
  br label %51

51:                                               ; preds = %30, %47, %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  %52 = and i8 %35, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %34, i64 0, i32 1, i32 0, i32 0
  %56 = load %"class.blink::LiveNodeListBase"*, %"class.blink::LiveNodeListBase"** %55, align 8
  %57 = icmp eq %"class.blink::LiveNodeListBase"* %56, null
  %58 = getelementptr inbounds %"class.blink::LiveNodeListBase", %"class.blink::LiveNodeListBase"* %56, i64 -1, i32 1
  %59 = bitcast %"class.blink::Member.21"* %58 to %"class.blink::HTMLCollection"*
  %60 = select i1 %57, %"class.blink::HTMLCollection"* null, %"class.blink::HTMLCollection"* %59
  br label %79

61:                                               ; preds = %51
  %62 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 96) #10
  %63 = bitcast i8* %62 to %"class.blink::HTMLCollection"*
  call void @_ZN5blink14HTMLCollectionC1ERNS_13ContainerNodeENS_14CollectionTypeENS0_21ItemAfterOverrideTypeE(%"class.blink::HTMLCollection"* %63, %"class.blink::ContainerNode"* dereferenceable(80) %1, i32 %2, i32 1) #10
  %64 = getelementptr inbounds i8, i8* %62, i64 -4
  %65 = bitcast i8* %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = or i16 %66, 1
  store atomic i16 %67, i16* %65 release, align 2
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.761", %"struct.WTF::KeyValuePair.761"* %34, i64 0, i32 1
  %69 = icmp eq i8* %62, null
  %70 = getelementptr inbounds i8, i8* %62, i64 16
  %71 = ptrtoint i8* %70 to i64
  %72 = select i1 %69, i64 0, i64 %71
  %73 = bitcast %"class.blink::Member.763"* %68 to i64*
  store atomic i64 %72, i64* %73 monotonic, align 8
  %74 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %61
  %77 = inttoptr i64 %72 to i8*
  %78 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %77) #10
  br label %79

79:                                               ; preds = %76, %61, %54
  %80 = phi %"class.blink::HTMLCollection"* [ %60, %54 ], [ %63, %61 ], [ %63, %76 ]
  ret %"class.blink::HTMLCollection"* %80
}

declare void @_ZN5blink14HTMLCollectionC1ERNS_13ContainerNodeENS_14CollectionTypeENS0_21ItemAfterOverrideTypeE(%"class.blink::HTMLCollection"*, %"class.blink::ContainerNode"* dereferenceable(80), i32, i32) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!5 = distinct !{!5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!8 = distinct !{!8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_: argument 0"}
!11 = distinct !{!11, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!14 = distinct !{!14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!17 = distinct !{!17, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_: argument 0"}
!20 = distinct !{!20, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_"}
!21 = !{i8 0, i8 2}
!22 = !{!"branch_weights", i32 1, i32 1048575}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv: argument 0"}
!25 = distinct !{!25, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv: argument 0"}
!28 = distinct !{!28, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv: argument 0"}
!31 = distinct !{!31, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv: argument 0"}
!34 = distinct !{!34, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv: argument 0"}
!37 = distinct !{!37, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINSt3__14pairIN5blink14CollectionTypeENS_12AtomicStringEEEEENS1_INS4_6MemberINS4_16LiveNodeListBaseEEEEEE10EmptyValueEv"}
!38 = !{i32 24, i32 33}
