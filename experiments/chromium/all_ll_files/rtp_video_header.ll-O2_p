; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/rtp_video_header.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/rtp_video_header.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.15", %"class.absl::optional.25", %"class.absl::variant" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.8", %"class.std::__1::bitset" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.1" = type { %"class.absl::inlined_vector_internal::Storage.2" }
%"class.absl::inlined_vector_internal::Storage.2" = type { %"class.absl::container_internal::CompressedTuple.3", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.3" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.absl::InlinedVector.8" = type { %"class.absl::inlined_vector_internal::Storage.9" }
%"class.absl::inlined_vector_internal::Storage.9" = type { %"class.absl::container_internal::CompressedTuple.10", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.10" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.20" }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.25" = type { %"class.absl::optional_internal::optional_data.26" }
%"class.absl::optional_internal::optional_data.26" = type { %"class.absl::optional_internal::optional_data_base.27" }
%"class.absl::optional_internal::optional_data_base.27" = type { %"class.absl::optional_internal::optional_data_dtor_base.28" }
%"class.absl::optional_internal::optional_data_dtor_base.28" = type { i8, %union.anon.29 }
%union.anon.29 = type { i16 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.30" }
%"union.absl::variant_internal::Union.30" = type { %"union.absl::variant_internal::Union.31" }
%"union.absl::variant_internal::Union.31" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE8InitFromERKS5_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_ = comdat any

@_ZN6webrtc14RTPVideoHeaderC1Ev = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader"*), void (%"struct.webrtc::RTPVideoHeader"*)* @_ZN6webrtc14RTPVideoHeaderC2Ev
@_ZN6webrtc14RTPVideoHeaderC1ERKS0_ = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader"*, %"struct.webrtc::RTPVideoHeader"*), void (%"struct.webrtc::RTPVideoHeader"*, %"struct.webrtc::RTPVideoHeader"*)* @_ZN6webrtc14RTPVideoHeaderC2ERKS0_
@_ZN6webrtc14RTPVideoHeaderD1Ev = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader"*), void (%"struct.webrtc::RTPVideoHeader"*)* @_ZN6webrtc14RTPVideoHeaderD2Ev
@_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*), void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*)* @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC2Ev
@_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1ERKS1_ = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*), void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*)* @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC2ERKS1_
@_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev = hidden unnamed_addr alias void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*), void (%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*)* @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RTPVideoHeaderC2Ev(%"struct.webrtc::RTPVideoHeader"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 8
  %5 = bitcast %union.anon* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 159, i1 false)
  store i8 1, i8* %4, align 1
  %6 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 9
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 10
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 11, i32 0
  store i32 -1, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 11, i32 1
  store i32 -1, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 12
  %11 = bitcast %"struct.webrtc::VideoSendTiming"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 14, i1 false)
  %12 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 1
  store i64 0, i64* %14, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 69, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RTPVideoHeaderC2ERKS0_(%"struct.webrtc::RTPVideoHeader"*, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 152, i1 false) #8
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC2ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %9, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* dereferenceable(144) %8) #8
  store i8 1, i8* %3, align 8
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 1
  %13 = bitcast i32* %11 to i8*
  %14 = bitcast i32* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 46, i1 false)
  %15 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 72, i1 false) #8
  %17 = load i8, i8* %16, align 4, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %22 = bitcast i8* %20 to %"class.webrtc::ColorSpace"*
  tail call void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"* %22, %"class.webrtc::ColorSpace"* dereferenceable(68) %21) #8
  store i8 1, i8* %15, align 4
  br label %23

23:                                               ; preds = %10, %19
  %24 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 1656, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RTPVideoHeaderD2Ev(%"struct.webrtc::RTPVideoHeader"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %33, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #9
  br label %14

14:                                               ; preds = %10, %5
  %15 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %21 = bitcast i64** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #9
  br label %23

23:                                               ; preds = %19, %14
  %24 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %30 = bitcast i32** %29 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @_ZdlPv(i8* %31) #9
  br label %32

32:                                               ; preds = %28, %23
  store i8 0, i8* %2, align 8
  br label %33

33:                                               ; preds = %1, %32
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC2Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %5 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false)
  store i64 4294967295, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC2ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0 to i8*
  %4 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 3
  %7 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %6, i64 0, i32 0
  %8 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0
  %9 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, 2
  br i1 %12, label %22, label %13

13:                                               ; preds = %2
  %14 = and i64 %11, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  store i64 %11, i64* %9, align 8
  %17 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 3, i32 0, i32 1
  %18 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 3, i32 0, i32 1
  %19 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %18 to i8*
  %20 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 40, i1 false) #8
  br label %22

21:                                               ; preds = %13
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage"* %8, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(48) %7) #8
  br label %22

22:                                               ; preds = %2, %16, %21
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 4
  %25 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %24, i64 0, i32 0
  %26 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %23, i64 0, i32 0
  %27 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %29, 2
  br i1 %30, label %40, label %31

31:                                               ; preds = %22
  %32 = and i64 %29, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %31
  store i64 %29, i64* %27, align 8
  %35 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 4, i32 0, i32 1
  %36 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 1
  %37 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %36 to i8*
  %38 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 40, i1 false) #8
  br label %40

39:                                               ; preds = %31
  tail call void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.2"* %26, %"class.absl::inlined_vector_internal::Storage.2"* dereferenceable(48) %25) #8
  br label %40

40:                                               ; preds = %22, %34, %39
  %41 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5
  %42 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 5
  %43 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %42, i64 0, i32 0
  %44 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %41, i64 0, i32 0
  %45 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %45, align 8
  %46 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %47, 2
  br i1 %48, label %58, label %49

49:                                               ; preds = %40
  %50 = and i64 %47, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %57

52:                                               ; preds = %49
  store i64 %47, i64* %45, align 8
  %53 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 5, i32 0, i32 1
  %54 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 1
  %55 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %54 to i8*
  %56 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 16, i1 false) #8
  br label %58

57:                                               ; preds = %49
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.9"* %44, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(24) %43) #8
  br label %58

58:                                               ; preds = %40, %52, %57
  %59 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %1, i64 0, i32 6, i32 0, i32 0
  %60 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %61 = load i64, i64* %59, align 8
  store i64 %61, i64* %60, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD2Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast i32** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %17 = bitcast i64** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #9
  br label %19

19:                                               ; preds = %10, %15
  %20 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %26 = bitcast i32** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %24
  ret void
}

declare void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage"*, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(48)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 20
  %15 = select i1 %14, i64 %5, i64 20
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #10
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #9
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #8
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.2"*, %"class.absl::inlined_vector_internal::Storage.2"* dereferenceable(48)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %9 to i64*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %11 to i64*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 10
  %15 = select i1 %14, i64 %5, i64 10
  %16 = icmp ugt i64 %15, 2305843009213693951
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #10
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 3
  %20 = tail call i8* @_Znwm(i64 %19) #9
  %21 = bitcast i8* %20 to i64*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i64** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i64* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i64* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i64* %29 to i8*
  %31 = bitcast i64* %28 to i8*
  %32 = shl i64 %5, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #8
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.9"*, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #10
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #9
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #8
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
