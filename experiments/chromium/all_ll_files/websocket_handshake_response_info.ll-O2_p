; ModuleID = '../../net/websockets/websocket_handshake_response_info.cc'
source_filename = "../../net/websockets/websocket_handshake_response_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::WebSocketHandshakeResponseInfo" = type { %class.GURL, %class.scoped_refptr, %"class.net::IPEndPoint", %"class.base::Time" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%class.scoped_refptr = type { %"class.net::HttpResponseHeaders"* }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::HttpResponseHeaders" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::vector", %"class.std::__1::basic_string", i32, %"class.net::HttpVersion" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::HttpResponseHeaders::ParsedHeader"*, %"struct.net::HttpResponseHeaders::ParsedHeader"*, %"class.std::__1::__compressed_pair.5" }
%"struct.net::HttpResponseHeaders::ParsedHeader" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.net::HttpResponseHeaders::ParsedHeader"* }
%"class.net::HttpVersion" = type { i32 }

@_ZN3net30WebSocketHandshakeResponseInfoC1ERK4GURL13scoped_refptrINS_19HttpResponseHeadersEERKNS_10IPEndPointEN4base4TimeE = hidden unnamed_addr alias void (%"struct.net::WebSocketHandshakeResponseInfo"*, %class.GURL*, %"class.net::HttpResponseHeaders"*, %"class.net::IPEndPoint"*, i64), void (%"struct.net::WebSocketHandshakeResponseInfo"*, %class.GURL*, %"class.net::HttpResponseHeaders"*, %"class.net::IPEndPoint"*, i64)* @_ZN3net30WebSocketHandshakeResponseInfoC2ERK4GURL13scoped_refptrINS_19HttpResponseHeadersEERKNS_10IPEndPointEN4base4TimeE
@_ZN3net30WebSocketHandshakeResponseInfoD1Ev = hidden unnamed_addr alias void (%"struct.net::WebSocketHandshakeResponseInfo"*), void (%"struct.net::WebSocketHandshakeResponseInfo"*)* @_ZN3net30WebSocketHandshakeResponseInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net30WebSocketHandshakeResponseInfoC2ERK4GURL13scoped_refptrINS_19HttpResponseHeadersEERKNS_10IPEndPointEN4base4TimeE(%"struct.net::WebSocketHandshakeResponseInfo"*, %class.GURL* dereferenceable(120), %"class.net::HttpResponseHeaders"*, %"class.net::IPEndPoint"* dereferenceable(20), i64) unnamed_addr #0 align 2 {
  %6 = ptrtoint %"class.net::HttpResponseHeaders"* %2 to i64
  %7 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 0
  tail call void @_ZN4GURLC1ERKS_(%class.GURL* %7, %class.GURL* dereferenceable(120) %1) #4
  %8 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 1
  %9 = bitcast %class.scoped_refptr* %8 to i64*
  store i64 %6, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 2
  tail call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %10, %"class.net::IPEndPoint"* dereferenceable(20) %3) #4
  %11 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %4, i64* %11, align 8
  ret void
}

declare void @_ZN4GURLC1ERKS_(%class.GURL*, %class.GURL* dereferenceable(120)) unnamed_addr #1

declare void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net30WebSocketHandshakeResponseInfoD2Ev(%"struct.net::WebSocketHandshakeResponseInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 2
  tail call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %2) #4
  %3 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.net::HttpResponseHeaders"*, %"class.net::HttpResponseHeaders"** %3, align 8
  %5 = icmp eq %"class.net::HttpResponseHeaders"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::HttpResponseHeaders", %"class.net::HttpResponseHeaders"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  tail call void @_ZN3net19HttpResponseHeadersD1Ev(%"class.net::HttpResponseHeaders"* nonnull %4) #4
  %11 = bitcast %"class.net::HttpResponseHeaders"* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #5
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %"struct.net::WebSocketHandshakeResponseInfo", %"struct.net::WebSocketHandshakeResponseInfo"* %0, i64 0, i32 0
  tail call void @_ZN4GURLD1Ev(%class.GURL* %13) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net19HttpResponseHeadersD1Ev(%"class.net::HttpResponseHeaders"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
