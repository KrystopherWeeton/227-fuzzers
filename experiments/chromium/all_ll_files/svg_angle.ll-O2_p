; ModuleID = '../../third_party/blink/renderer/core/svg/svg_angle.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_angle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::SVGEnumerationMap::Entry" = type { i16, i8* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.174" }
%"struct.std::__1::atomic.174" = type { %"struct.std::__1::__atomic_base.175" }
%"struct.std::__1::__atomic_base.175" = type { %"struct.std::__1::__atomic_base.176" }
%"struct.std::__1::__atomic_base.176" = type { %"struct.std::__1::__cxx_atomic_impl.177" }
%"struct.std::__1::__cxx_atomic_impl.177" = type { %"struct.std::__1::__cxx_atomic_base_impl.178" }
%"struct.std::__1::__cxx_atomic_base_impl.178" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.124", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.140", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.158", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.164", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.109", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.33" }
%"struct.std::__1::__atomic_base.33" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::Worklist.40"* }
%"class.blink::Worklist.40" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::Worklist.47"* }
%"class.blink::Worklist.47" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::Worklist.54"* }
%"class.blink::Worklist.54" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.89", %"class.std::__1::__compressed_pair.96", %"class.std::__1::__compressed_pair.101", %"class.std::__1::__compressed_pair.103", [4 x i8] }>
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91", %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i64 }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { float }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.112", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.132" }
%"class.WTF::VectorBuffer.132" = type { %"class.WTF::VectorBufferBase.133" }
%"class.WTF::VectorBufferBase.133" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.146" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.40"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.47"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.54"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.168" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.164" = type { %"struct.std::__1::__atomic_base.165" }
%"struct.std::__1::__atomic_base.165" = type { %"struct.std::__1::__cxx_atomic_impl.166" }
%"struct.std::__1::__cxx_atomic_impl.166" = type { %"struct.std::__1::__cxx_atomic_base_impl.167" }
%"struct.std::__1::__cxx_atomic_base_impl.167" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SVGAngle" = type { %"class.blink::SVGPropertyHelper", i32, float, %"class.blink::Member" }
%"class.blink::SVGPropertyHelper" = type { %"class.blink::SVGPropertyBase" }
%"class.blink::SVGPropertyBase" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::SVGEnumeration"* }
%"class.blink::SVGEnumeration" = type { %"class.blink::SVGPropertyBase", i16, %"class.blink::SVGEnumerationMap"* }
%"class.blink::SVGEnumerationMap" = type <{ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr.173 }
%class.scoped_refptr.173 = type { %"class.WTF::StringImpl"* }
%union.anon = type { %"class.WTF::Vector.179" }
%"class.WTF::Vector.179" = type { %"class.WTF::VectorBuffer.180" }
%"class.WTF::VectorBuffer.180" = type { %"class.WTF::VectorBufferBase.181", [16 x i8] }
%"class.WTF::VectorBufferBase.181" = type { i8*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::SVGElement" = type opaque
%"struct.blink::SMILAnimationEffectParameters" = type { i8, i8, i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.211 }
%union.anon.211 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration" = type { %"class.blink::SVGEnumeration", %"class.blink::Member.0" }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::SVGAngle"* }

$_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE17CloneForAnimationERKN3WTF6StringE = comdat any

$_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE7GetTypeEv = comdat any

$_ZN5blink15SVGPropertyBaseD2Ev = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv = comdat any

$_ZNK5blink14SVGEnumeration7GetTypeEv = comdat any

$_ZN5blink10TraceTraitINS_8SVGAngleEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_14SVGEnumerationEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = comdat any

@_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE10enum_items = internal constant [3 x %"struct.blink::SVGEnumerationMap::Entry"] [%"struct.blink::SVGEnumerationMap::Entry" { i16 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0) }, %"struct.blink::SVGEnumerationMap::Entry" { i16 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0) }, %"struct.blink::SVGEnumerationMap::Entry" { i16 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"angle\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"auto-start-reverse\00", align 1
@_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries = internal constant { %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 } { %"struct.blink::SVGEnumerationMap::Entry"* getelementptr inbounds ([3 x %"struct.blink::SVGEnumerationMap::Entry"], [3 x %"struct.blink::SVGEnumerationMap::Entry"]* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE10enum_items, i32 0, i32 0), i16 3, i16 2 }, align 8
@_ZTVN5blink8SVGAngleE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGAngle"*)* @_ZN5blink8SVGAngleD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGAngle"*)* @_ZN5blink8SVGAngleD0Ev to i8*), i8* bitcast (%"class.blink::SVGPropertyBase"* (%"class.blink::SVGPropertyHelper"*, %"class.WTF::String"*)* @_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE17CloneForAnimationERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGAngle"*)* @_ZNK5blink8SVGAngle13ValueAsStringEv to i8*), i8* bitcast (void (%"class.blink::SVGAngle"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink8SVGAngle3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (void (%"class.blink::SVGAngle"*, %"struct.blink::SMILAnimationEffectParameters"*, float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink8SVGAngle22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE to i8*), i8* bitcast (float (%"class.blink::SVGAngle"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZNK5blink8SVGAngle17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (i32 (%"class.blink::SVGPropertyHelper"*)* @_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE7GetTypeEv to i8*), i8* bitcast (void (%"class.blink::SVGAngle"*, %"class.blink::Visitor"*)* @_ZNK5blink8SVGAngle5TraceEPNS_7VisitorE to i8*)] }, align 8
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"deg\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"rad\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"grad\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"turn\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.9 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.10 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZTVN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationE = internal unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGPropertyBase"*)* @_ZN5blink15SVGPropertyBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"*)* @_ZN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationD0Ev to i8*), i8* bitcast (%"class.blink::SVGPropertyBase"* (%"class.blink::SVGEnumeration"*, %"class.WTF::String"*)* @_ZNK5blink14SVGEnumeration17CloneForAnimationERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGEnumeration"*)* @_ZNK5blink14SVGEnumeration13ValueAsStringEv to i8*), i8* bitcast (void (%"class.blink::SVGEnumeration"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink14SVGEnumeration3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (void (%"class.blink::SVGEnumeration"*, %"struct.blink::SMILAnimationEffectParameters"*, float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink14SVGEnumeration22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE to i8*), i8* bitcast (float (%"class.blink::SVGEnumeration"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZNK5blink14SVGEnumeration17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (i32 (%"class.blink::SVGEnumeration"*)* @_ZNK5blink14SVGEnumeration7GetTypeEv to i8*), i8* bitcast (void (%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"*, %"class.blink::Visitor"*)* @_ZNK5blink12_GLOBAL__N_126SVGMarkerOrientEnumeration5TraceEPNS_7VisitorE to i8*), i8* bitcast (void (%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"*)* @_ZN5blink12_GLOBAL__N_126SVGMarkerOrientEnumeration12NotifyChangeEv to i8*)] }, align 8
@switch.table._ZNK5blink8SVGAngle13ValueAsStringEv = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)], align 8

@_ZN5blink8SVGAngleC1Ev = hidden unnamed_addr alias void (%"class.blink::SVGAngle"*), void (%"class.blink::SVGAngle"*)* @_ZN5blink8SVGAngleC2Ev
@_ZN5blink8SVGAngleC1ENS0_12SVGAngleTypeEfNS_19SVGMarkerOrientTypeE = hidden unnamed_addr alias void (%"class.blink::SVGAngle"*, i32, float, i32), void (%"class.blink::SVGAngle"*, i32, float, i32)* @_ZN5blink8SVGAngleC2ENS0_12SVGAngleTypeEfNS_19SVGMarkerOrientTypeE
@_ZN5blink8SVGAngleD1Ev = hidden unnamed_addr alias void (%"class.blink::SVGAngle"*), void (%"class.blink::SVGAngle"*)* @_ZN5blink8SVGAngleD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(16) %"class.blink::SVGEnumerationMap"* @_ZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEv() local_unnamed_addr #0 {
  ret %"class.blink::SVGEnumerationMap"* bitcast ({ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 }* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries to %"class.blink::SVGEnumerationMap"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngleC2Ev(%"class.blink::SVGAngle"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8SVGAngleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %4, align 4
  %5 = ptrtoint %"class.blink::SVGAngle"* %0 to i64
  %6 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 32) #11
  %7 = bitcast i8* %6 to i32 (...)***
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  %9 = bitcast i8* %8 to i16*
  store i16 2, i16* %9, align 8
  %10 = getelementptr inbounds i8, i8* %6, i64 16
  %11 = bitcast i8* %10 to %"class.blink::SVGEnumerationMap"**
  store %"class.blink::SVGEnumerationMap"* bitcast ({ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 }* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries to %"class.blink::SVGEnumerationMap"*), %"class.blink::SVGEnumerationMap"** %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 24
  %13 = bitcast i8* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 -4
  %15 = bitcast i8* %14 to i16*
  %16 = load atomic i16, i16* %15 monotonic, align 2
  %17 = or i16 %16, 1
  store atomic i16 %17, i16* %15 release, align 2
  %18 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %19 = bitcast %"class.blink::SVGEnumeration"** %18 to i8**
  store i8* %6, i8** %19, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngleC2ENS0_12SVGAngleTypeEfNS_19SVGMarkerOrientTypeE(%"class.blink::SVGAngle"*, i32, float, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8SVGAngleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3
  %9 = ptrtoint %"class.blink::SVGAngle"* %0 to i64
  %10 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 32) #11
  %11 = bitcast i8* %10 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = bitcast i8* %12 to i16*
  store i16 2, i16* %13, align 8
  %14 = getelementptr inbounds i8, i8* %10, i64 16
  %15 = bitcast i8* %14 to %"class.blink::SVGEnumerationMap"**
  store %"class.blink::SVGEnumerationMap"* bitcast ({ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 }* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries to %"class.blink::SVGEnumerationMap"*), %"class.blink::SVGEnumerationMap"** %15, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %16 = getelementptr inbounds i8, i8* %10, i64 24
  %17 = bitcast i8* %16 to i64*
  store i64 %9, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 -4
  %19 = bitcast i8* %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = or i16 %20, 1
  store atomic i16 %21, i16* %19 release, align 2
  %22 = bitcast %"class.blink::Member"* %8 to i8**
  store i8* %10, i8** %22, align 8
  %23 = bitcast i8* %10 to %"class.blink::SVGEnumeration"*
  %24 = trunc i32 %3 to i16
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %23, i16 zeroext %24) #11
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink8SVGAngleD2Ev(%"class.blink::SVGAngle"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink8SVGAngleD0Ev(%"class.blink::SVGAngle"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink8SVGAngle5TraceEPNS_7VisitorE(%"class.blink::SVGAngle"* nocapture readonly, %"class.blink::Visitor"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14SVGEnumerationEE5TraceEPNS_7VisitorEPKv) #11
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGAngle"* @_ZNK5blink8SVGAngle5CloneEv(%"class.blink::SVGAngle"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %5, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 24) #11
  %9 = bitcast i8* %8 to %"class.blink::SVGAngle"*
  %10 = load i32, i32* %2, align 4
  %11 = bitcast float* %3 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8SVGAngleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 %10, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 %12, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %8, i64 16
  %19 = ptrtoint i8* %8 to i64
  %20 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 32) #11
  %21 = bitcast i8* %20 to i32 (...)***
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  %23 = bitcast i8* %22 to i16*
  store i16 2, i16* %23, align 8
  %24 = getelementptr inbounds i8, i8* %20, i64 16
  %25 = bitcast i8* %24 to %"class.blink::SVGEnumerationMap"**
  store %"class.blink::SVGEnumerationMap"* bitcast ({ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 }* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries to %"class.blink::SVGEnumerationMap"*), %"class.blink::SVGEnumerationMap"** %25, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %26 = getelementptr inbounds i8, i8* %20, i64 24
  %27 = bitcast i8* %26 to i64*
  store i64 %19, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %20, i64 -4
  %29 = bitcast i8* %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = or i16 %30, 1
  store atomic i16 %31, i16* %29 release, align 2
  %32 = bitcast i8* %18 to i8**
  store i8* %20, i8** %32, align 8
  %33 = bitcast i8* %20 to %"class.blink::SVGEnumeration"*
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %33, i16 zeroext %7) #11
  %34 = getelementptr inbounds i8, i8* %8, i64 -4
  %35 = bitcast i8* %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = or i16 %36, 1
  store atomic i16 %37, i16* %35 release, align 2
  ret %"class.blink::SVGAngle"* %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink8SVGAngle15OrientTypeValueEv(%"class.blink::SVGAngle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %3, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  ret i32 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK5blink8SVGAngle5ValueEv(%"class.blink::SVGAngle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %19 [
    i32 4, label %4
    i32 3, label %8
    i32 5, label %12
    i32 1, label %16
    i32 0, label %16
    i32 2, label %16
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, 0x3FECCCCCC0000000
  br label %19

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 0x404CA5DC00000000
  br label %19

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 3.600000e+02
  br label %19

16:                                               ; preds = %1, %1, %1
  %17 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %18 = load float, float* %17, align 4
  br label %19

19:                                               ; preds = %1, %16, %12, %8, %4
  %20 = phi float [ %18, %16 ], [ %15, %12 ], [ %11, %8 ], [ %7, %4 ], [ 0.000000e+00, %1 ]
  ret float %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle8SetValueEf(%"class.blink::SVGAngle"* nocapture, float) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %14 [
    i32 4, label %5
    i32 3, label %7
    i32 5, label %9
    i32 1, label %11
    i32 0, label %11
    i32 2, label %11
  ]

5:                                                ; preds = %2
  %6 = fmul float %1, 0x3FF1C71C80000000
  br label %11

7:                                                ; preds = %2
  %8 = fmul float %1, 0x3F91DF46A0000000
  br label %11

9:                                                ; preds = %2
  %10 = fmul float %1, 0x3F66C16C20000000
  br label %11

11:                                               ; preds = %2, %2, %2, %5, %7, %9
  %12 = phi float [ %10, %9 ], [ %8, %7 ], [ %6, %5 ], [ %1, %2 ], [ %1, %2 ], [ %1, %2 ]
  %13 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float %12, float* %13, align 4
  br label %14

14:                                               ; preds = %11, %2
  %15 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %16 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %15, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %16, i16 zeroext 2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink8SVGAngle13ValueAsStringEv(%"class.blink::SVGAngle"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::StringBuilder", align 8
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, -2
  %6 = icmp ult i32 %5, 4
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table._ZNK5blink8SVGAngle13ValueAsStringEv, i64 0, i64 %8
  %10 = load i8*, i8** %9, align 8
  br label %11

11:                                               ; preds = %7, %1
  %12 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), %1 ], [ %10, %7 ]
  %13 = bitcast %"class.WTF::StringBuilder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 48, i1 false)
  %14 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %14, align 8
  %15 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to i8*
  store i8 0, i8* %16, align 8
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 2
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 3
  store i8 1, i8* %18, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 4
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %21 = load float, float* %20, align 4
  call void @_ZN3WTF13StringBuilder12AppendNumberEf(%"class.WTF::StringBuilder"* nonnull %2, float %21) #11
  %22 = call i64 @strlen(i8* nonnull %12) #12
  %23 = trunc i64 %22 to i32
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %2, i8* nonnull %12, i32 %23) #11
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #11
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %2) #11
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %40, label %27

27:                                               ; preds = %11
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %36

34:                                               ; preds = %27
  %35 = add i32 %33, -1
  store i32 %35, i32* %32, align 4
  br label %36

36:                                               ; preds = %34, %27
  %37 = phi i32 [ %35, %34 ], [ %33, %27 ]
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %25) #11
  br label %40

40:                                               ; preds = %11, %36, %39
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #11
  ret %"class.WTF::StringImpl"* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3WTF13StringBuilder12AppendNumberEf(%"class.WTF::StringBuilder"*, float) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink8SVGAngle16SetValueAsStringERKN3WTF6StringE(%"class.blink::SVGAngle"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca float, align 4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %2, %13
  %18 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %19 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %18, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %19, i16 zeroext 2) #11
  %20 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 1, i32* %20, align 8
  %21 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %21, align 4
  br label %361

22:                                               ; preds = %13
  %23 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #11
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"** %24, align 8
  %25 = load i32, i32* %14, align 4
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %28 = bitcast i8** %27 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %25, i32* %29, align 8
  %30 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #11
  %31 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %32 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 4, i32* %34, align 8
  %35 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #11
  br i1 %35, label %36, label %42

36:                                               ; preds = %22
  %37 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %38 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %37, align 8
  call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %38, i16 zeroext 2) #11
  %39 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 1, i32* %39, align 8
  %40 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %40, align 4
  %41 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %37, align 8
  call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %41, i16 zeroext 1) #11
  br label %361

42:                                               ; preds = %22
  %43 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #11
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %46, label %50

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %47, align 8
  %48 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %49 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %48, i64* %49, align 8
  br label %58

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %51, align 8
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %56 = bitcast i8** %55 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %56, align 8
  %57 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %58

58:                                               ; preds = %50, %46
  %59 = phi i64 [ %57, %50 ], [ %48, %46 ]
  %60 = phi i32 [ %53, %50 ], [ 0, %46 ]
  %61 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %60, i32* %61, align 8
  %62 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #11
  %63 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %59, i64* %63, align 8
  %64 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8** %64, align 8
  %65 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 18, i32* %65, align 8
  %66 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #11
  br i1 %66, label %67, label %73

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %69 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %68, align 8
  call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %69, i16 zeroext 2) #11
  %70 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 1, i32* %70, align 8
  %71 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %71, align 4
  %72 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %68, align 8
  call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %72, i16 zeroext 3) #11
  br label %361

73:                                               ; preds = %58
  %74 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %74) #11
  store float 0.000000e+00, float* %9, align 4
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp eq %"class.WTF::StringImpl"* %75, null
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 1
  br i1 %79, label %215, label %82

82:                                               ; preds = %73
  %83 = bitcast %"class.WTF::StringImpl"* %81 to i8*
  %84 = select i1 %80, i8* null, i8* %83
  br i1 %80, label %88, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  br label %88

88:                                               ; preds = %85, %82
  %89 = phi i32 [ %87, %85 ], [ 0, %82 ]
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %84, i64 %90
  %92 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #11
  store i8* %84, i8** %7, align 8
  %93 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %7, i8* %91, float* nonnull dereferenceable(4) %9, i32 1) #11
  br i1 %93, label %104, label %94

94:                                               ; preds = %88
  %95 = bitcast i8** %7 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = ptrtoint i8* %84 to i64
  %98 = sub i64 %96, %97
  %99 = icmp ult i64 %98, 16777215
  %100 = select i1 %99, i64 %98, i64 16777215
  %101 = trunc i64 %100 to i32
  %102 = shl nuw i32 %101, 8
  %103 = or i32 %102, 2
  br label %345

104:                                              ; preds = %88
  %105 = load i8*, i8** %7, align 8
  %106 = icmp eq i8* %105, %91
  %107 = ptrtoint i8* %105 to i64
  br i1 %106, label %345, label %108

108:                                              ; preds = %104
  %109 = load i8, i8* %105, align 1
  %110 = icmp ult i8 %109, 33
  br i1 %110, label %111, label %115

111:                                              ; preds = %108
  switch i8 %109, label %115 [
    i8 32, label %112
    i8 10, label %112
    i8 9, label %112
    i8 13, label %112
    i8 12, label %112
  ]

112:                                              ; preds = %111, %111, %111, %111, %111
  %113 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %113, i8** %7, align 8
  %114 = ptrtoint i8* %113 to i64
  br label %175

115:                                              ; preds = %111, %108
  %116 = ptrtoint i8* %91 to i64
  %117 = sub i64 %116, %107
  %118 = icmp sgt i64 %117, 2
  br i1 %118, label %119, label %175

119:                                              ; preds = %115
  switch i8 %109, label %142 [
    i8 100, label %120
    i8 114, label %131
  ]

120:                                              ; preds = %119
  %121 = getelementptr inbounds i8, i8* %105, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 101
  br i1 %123, label %124, label %142

124:                                              ; preds = %120
  %125 = getelementptr inbounds i8, i8* %105, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 103
  br i1 %127, label %128, label %142

128:                                              ; preds = %124
  %129 = getelementptr inbounds i8, i8* %105, i64 3
  store i8* %129, i8** %7, align 8
  %130 = ptrtoint i8* %129 to i64
  br label %175

131:                                              ; preds = %119
  %132 = getelementptr inbounds i8, i8* %105, i64 1
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 97
  br i1 %134, label %135, label %142

135:                                              ; preds = %131
  %136 = getelementptr inbounds i8, i8* %105, i64 2
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 100
  br i1 %138, label %139, label %142

139:                                              ; preds = %135
  %140 = getelementptr inbounds i8, i8* %105, i64 3
  store i8* %140, i8** %7, align 8
  %141 = ptrtoint i8* %140 to i64
  br label %175

142:                                              ; preds = %135, %131, %124, %120, %119
  %143 = icmp sgt i64 %117, 3
  br i1 %143, label %144, label %175

144:                                              ; preds = %142
  switch i8 %109, label %175 [
    i8 103, label %145
    i8 116, label %160
  ]

145:                                              ; preds = %144
  %146 = getelementptr inbounds i8, i8* %105, i64 1
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 114
  br i1 %148, label %149, label %175

149:                                              ; preds = %145
  %150 = getelementptr inbounds i8, i8* %105, i64 2
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 97
  br i1 %152, label %153, label %175

153:                                              ; preds = %149
  %154 = getelementptr inbounds i8, i8* %105, i64 3
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 100
  br i1 %156, label %157, label %175

157:                                              ; preds = %153
  %158 = getelementptr inbounds i8, i8* %105, i64 4
  store i8* %158, i8** %7, align 8
  %159 = ptrtoint i8* %158 to i64
  br label %175

160:                                              ; preds = %144
  %161 = getelementptr inbounds i8, i8* %105, i64 1
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 117
  br i1 %163, label %164, label %175

164:                                              ; preds = %160
  %165 = getelementptr inbounds i8, i8* %105, i64 2
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 114
  br i1 %167, label %168, label %175

168:                                              ; preds = %164
  %169 = getelementptr inbounds i8, i8* %105, i64 3
  %170 = load i8, i8* %169, align 1
  %171 = icmp eq i8 %170, 110
  br i1 %171, label %172, label %175

172:                                              ; preds = %168
  %173 = getelementptr inbounds i8, i8* %105, i64 4
  store i8* %173, i8** %7, align 8
  %174 = ptrtoint i8* %173 to i64
  br label %175

175:                                              ; preds = %172, %168, %164, %160, %157, %153, %149, %145, %144, %142, %139, %128, %115, %112
  %176 = phi i64 [ %114, %112 ], [ %130, %128 ], [ %141, %139 ], [ %159, %157 ], [ %174, %172 ], [ %107, %168 ], [ %107, %164 ], [ %107, %160 ], [ %107, %142 ], [ %107, %115 ], [ %107, %153 ], [ %107, %149 ], [ %107, %145 ], [ %107, %144 ]
  %177 = phi i8* [ %113, %112 ], [ %129, %128 ], [ %140, %139 ], [ %158, %157 ], [ %173, %172 ], [ %105, %168 ], [ %105, %164 ], [ %105, %160 ], [ %105, %142 ], [ %105, %115 ], [ %105, %153 ], [ %105, %149 ], [ %105, %145 ], [ %105, %144 ]
  %178 = phi i32 [ 1, %112 ], [ 2, %128 ], [ 3, %139 ], [ 4, %157 ], [ 5, %172 ], [ 0, %168 ], [ 0, %164 ], [ 0, %160 ], [ 0, %142 ], [ 0, %115 ], [ 0, %153 ], [ 0, %149 ], [ 0, %145 ], [ 0, %144 ]
  %179 = icmp ult i8* %177, %91
  br i1 %179, label %180, label %203

180:                                              ; preds = %175
  %181 = load i8, i8* %177, align 1
  %182 = icmp ult i8 %181, 33
  br i1 %182, label %187, label %206

183:                                              ; preds = %192
  %184 = ptrtoint i8* %193 to i64
  %185 = load i8, i8* %193, align 1
  %186 = icmp ult i8 %185, 33
  br i1 %186, label %187, label %196

187:                                              ; preds = %180, %183
  %188 = phi i64 [ %184, %183 ], [ %176, %180 ]
  %189 = phi i8 [ %185, %183 ], [ %181, %180 ]
  %190 = phi i8* [ %193, %183 ], [ %177, %180 ]
  %191 = phi i1 [ %194, %183 ], [ true, %180 ]
  switch i8 %189, label %198 [
    i8 32, label %192
    i8 10, label %192
    i8 9, label %192
    i8 13, label %192
    i8 12, label %192
  ]

192:                                              ; preds = %187, %187, %187, %187, %187
  %193 = getelementptr inbounds i8, i8* %190, i64 1
  store i8* %193, i8** %7, align 8
  %194 = icmp ult i8* %193, %91
  %195 = icmp eq i8* %193, %91
  br i1 %195, label %201, label %183

196:                                              ; preds = %183
  %197 = ptrtoint i8* %193 to i64
  br label %198

198:                                              ; preds = %187, %196
  %199 = phi i64 [ %197, %196 ], [ %188, %187 ]
  %200 = phi i1 [ %194, %196 ], [ %191, %187 ]
  br i1 %200, label %206, label %203

201:                                              ; preds = %192
  %202 = ptrtoint i8* %91 to i64
  br label %203

203:                                              ; preds = %201, %198, %175
  %204 = phi i64 [ %176, %175 ], [ %199, %198 ], [ %202, %201 ]
  %205 = icmp eq i32 %178, 0
  br i1 %205, label %206, label %345

206:                                              ; preds = %180, %198, %203
  %207 = phi i64 [ %204, %203 ], [ %176, %180 ], [ %199, %198 ]
  %208 = ptrtoint i8* %84 to i64
  %209 = sub i64 %207, %208
  %210 = icmp ult i64 %209, 16777215
  %211 = select i1 %210, i64 %209, i64 16777215
  %212 = trunc i64 %211 to i32
  %213 = shl nuw i32 %212, 8
  %214 = or i32 %213, 2
  br label %345

215:                                              ; preds = %73
  %216 = bitcast %"class.WTF::StringImpl"* %81 to i16*
  %217 = select i1 %80, i16* null, i16* %216
  br i1 %80, label %221, label %218

218:                                              ; preds = %215
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 1
  %220 = load i32, i32* %219, align 4
  br label %221

221:                                              ; preds = %218, %215
  %222 = phi i32 [ %220, %218 ], [ 0, %215 ]
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds i16, i16* %217, i64 %223
  %225 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #11
  store i16* %217, i16** %8, align 8
  %226 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %8, i16* %224, float* nonnull dereferenceable(4) %9, i32 1) #11
  br i1 %226, label %238, label %227

227:                                              ; preds = %221
  %228 = bitcast i16** %8 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = ptrtoint i16* %217 to i64
  %231 = sub i64 %229, %230
  %232 = ashr exact i64 %231, 1
  %233 = icmp ult i64 %232, 16777215
  %234 = select i1 %233, i64 %232, i64 16777215
  %235 = trunc i64 %234 to i32
  %236 = shl nuw i32 %235, 8
  %237 = or i32 %236, 2
  br label %345

238:                                              ; preds = %221
  %239 = load i16*, i16** %8, align 8
  %240 = icmp eq i16* %239, %224
  %241 = ptrtoint i16* %239 to i64
  br i1 %240, label %345, label %242

242:                                              ; preds = %238
  %243 = load i16, i16* %239, align 2
  %244 = icmp ult i16 %243, 33
  br i1 %244, label %245, label %249

245:                                              ; preds = %242
  switch i16 %243, label %249 [
    i16 32, label %246
    i16 10, label %246
    i16 9, label %246
    i16 13, label %246
    i16 12, label %246
  ]

246:                                              ; preds = %245, %245, %245, %245, %245
  %247 = getelementptr inbounds i16, i16* %239, i64 1
  store i16* %247, i16** %8, align 8
  %248 = ptrtoint i16* %247 to i64
  br label %309

249:                                              ; preds = %245, %242
  %250 = ptrtoint i16* %224 to i64
  %251 = sub i64 %250, %241
  %252 = icmp sgt i64 %251, 4
  br i1 %252, label %253, label %309

253:                                              ; preds = %249
  switch i16 %243, label %276 [
    i16 100, label %254
    i16 114, label %265
  ]

254:                                              ; preds = %253
  %255 = getelementptr inbounds i16, i16* %239, i64 1
  %256 = load i16, i16* %255, align 2
  %257 = icmp eq i16 %256, 101
  br i1 %257, label %258, label %276

258:                                              ; preds = %254
  %259 = getelementptr inbounds i16, i16* %239, i64 2
  %260 = load i16, i16* %259, align 2
  %261 = icmp eq i16 %260, 103
  br i1 %261, label %262, label %276

262:                                              ; preds = %258
  %263 = getelementptr inbounds i16, i16* %239, i64 3
  store i16* %263, i16** %8, align 8
  %264 = ptrtoint i16* %263 to i64
  br label %309

265:                                              ; preds = %253
  %266 = getelementptr inbounds i16, i16* %239, i64 1
  %267 = load i16, i16* %266, align 2
  %268 = icmp eq i16 %267, 97
  br i1 %268, label %269, label %276

269:                                              ; preds = %265
  %270 = getelementptr inbounds i16, i16* %239, i64 2
  %271 = load i16, i16* %270, align 2
  %272 = icmp eq i16 %271, 100
  br i1 %272, label %273, label %276

273:                                              ; preds = %269
  %274 = getelementptr inbounds i16, i16* %239, i64 3
  store i16* %274, i16** %8, align 8
  %275 = ptrtoint i16* %274 to i64
  br label %309

276:                                              ; preds = %269, %265, %258, %254, %253
  %277 = icmp sgt i64 %251, 6
  br i1 %277, label %278, label %309

278:                                              ; preds = %276
  switch i16 %243, label %309 [
    i16 103, label %279
    i16 116, label %294
  ]

279:                                              ; preds = %278
  %280 = getelementptr inbounds i16, i16* %239, i64 1
  %281 = load i16, i16* %280, align 2
  %282 = icmp eq i16 %281, 114
  br i1 %282, label %283, label %309

283:                                              ; preds = %279
  %284 = getelementptr inbounds i16, i16* %239, i64 2
  %285 = load i16, i16* %284, align 2
  %286 = icmp eq i16 %285, 97
  br i1 %286, label %287, label %309

287:                                              ; preds = %283
  %288 = getelementptr inbounds i16, i16* %239, i64 3
  %289 = load i16, i16* %288, align 2
  %290 = icmp eq i16 %289, 100
  br i1 %290, label %291, label %309

291:                                              ; preds = %287
  %292 = getelementptr inbounds i16, i16* %239, i64 4
  store i16* %292, i16** %8, align 8
  %293 = ptrtoint i16* %292 to i64
  br label %309

294:                                              ; preds = %278
  %295 = getelementptr inbounds i16, i16* %239, i64 1
  %296 = load i16, i16* %295, align 2
  %297 = icmp eq i16 %296, 117
  br i1 %297, label %298, label %309

298:                                              ; preds = %294
  %299 = getelementptr inbounds i16, i16* %239, i64 2
  %300 = load i16, i16* %299, align 2
  %301 = icmp eq i16 %300, 114
  br i1 %301, label %302, label %309

302:                                              ; preds = %298
  %303 = getelementptr inbounds i16, i16* %239, i64 3
  %304 = load i16, i16* %303, align 2
  %305 = icmp eq i16 %304, 110
  br i1 %305, label %306, label %309

306:                                              ; preds = %302
  %307 = getelementptr inbounds i16, i16* %239, i64 4
  store i16* %307, i16** %8, align 8
  %308 = ptrtoint i16* %307 to i64
  br label %309

309:                                              ; preds = %306, %302, %298, %294, %291, %287, %283, %279, %278, %276, %273, %262, %249, %246
  %310 = phi i64 [ %248, %246 ], [ %264, %262 ], [ %275, %273 ], [ %293, %291 ], [ %308, %306 ], [ %241, %302 ], [ %241, %298 ], [ %241, %294 ], [ %241, %276 ], [ %241, %249 ], [ %241, %287 ], [ %241, %283 ], [ %241, %279 ], [ %241, %278 ]
  %311 = phi i16* [ %247, %246 ], [ %263, %262 ], [ %274, %273 ], [ %292, %291 ], [ %307, %306 ], [ %239, %302 ], [ %239, %298 ], [ %239, %294 ], [ %239, %276 ], [ %239, %249 ], [ %239, %287 ], [ %239, %283 ], [ %239, %279 ], [ %239, %278 ]
  %312 = phi i32 [ 1, %246 ], [ 2, %262 ], [ 3, %273 ], [ 4, %291 ], [ 5, %306 ], [ 0, %302 ], [ 0, %298 ], [ 0, %294 ], [ 0, %276 ], [ 0, %249 ], [ 0, %287 ], [ 0, %283 ], [ 0, %279 ], [ 0, %278 ]
  %313 = icmp ult i16* %311, %224
  br i1 %313, label %314, label %330

314:                                              ; preds = %309
  %315 = load i16, i16* %311, align 2
  %316 = icmp ult i16 %315, 33
  br i1 %316, label %320, label %335

317:                                              ; preds = %324
  %318 = load i16, i16* %325, align 2
  %319 = icmp ult i16 %318, 33
  br i1 %319, label %320, label %333

320:                                              ; preds = %314, %317
  %321 = phi i16 [ %318, %317 ], [ %315, %314 ]
  %322 = phi i16* [ %325, %317 ], [ %311, %314 ]
  %323 = phi i64 [ %327, %317 ], [ %310, %314 ]
  switch i16 %321, label %335 [
    i16 32, label %324
    i16 10, label %324
    i16 9, label %324
    i16 13, label %324
    i16 12, label %324
  ]

324:                                              ; preds = %320, %320, %320, %320, %320
  %325 = getelementptr inbounds i16, i16* %322, i64 1
  store i16* %325, i16** %8, align 8
  %326 = icmp ult i16* %325, %224
  %327 = ptrtoint i16* %325 to i64
  br i1 %326, label %317, label %328

328:                                              ; preds = %324
  %329 = ptrtoint i16* %325 to i64
  br label %330

330:                                              ; preds = %328, %309
  %331 = phi i64 [ %310, %309 ], [ %329, %328 ]
  %332 = icmp eq i32 %312, 0
  br i1 %332, label %335, label %345

333:                                              ; preds = %317
  %334 = ptrtoint i16* %325 to i64
  br label %335

335:                                              ; preds = %320, %333, %314, %330
  %336 = phi i64 [ %331, %330 ], [ %310, %314 ], [ %334, %333 ], [ %323, %320 ]
  %337 = ptrtoint i16* %217 to i64
  %338 = sub i64 %336, %337
  %339 = ashr exact i64 %338, 1
  %340 = icmp ult i64 %339, 16777215
  %341 = select i1 %340, i64 %339, i64 16777215
  %342 = trunc i64 %341 to i32
  %343 = shl nuw i32 %342, 8
  %344 = or i32 %343, 2
  br label %345

345:                                              ; preds = %227, %330, %335, %238, %94, %203, %206, %104
  %346 = phi i8* [ %92, %104 ], [ %92, %206 ], [ %92, %203 ], [ %92, %94 ], [ %225, %238 ], [ %225, %335 ], [ %225, %330 ], [ %225, %227 ]
  %347 = phi i32 [ 1, %104 ], [ 0, %206 ], [ %178, %203 ], [ 0, %94 ], [ 1, %238 ], [ 0, %335 ], [ %312, %330 ], [ 0, %227 ]
  %348 = phi i32 [ 0, %104 ], [ %214, %206 ], [ 0, %203 ], [ %103, %94 ], [ 0, %238 ], [ %344, %335 ], [ 0, %330 ], [ %237, %227 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %346) #11
  %349 = and i32 %348, 255
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %359

351:                                              ; preds = %345
  %352 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %353 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %352, align 8
  call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %353, i16 zeroext 2) #11
  %354 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 %347, i32* %354, align 8
  %355 = bitcast float* %9 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %358 = bitcast float* %357 to i32*
  store i32 %356, i32* %358, align 4
  br label %359

359:                                              ; preds = %345, %351
  %360 = phi i32 [ 0, %351 ], [ %348, %345 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #11
  br label %361

361:                                              ; preds = %359, %67, %36, %17
  %362 = phi i32 [ 0, %17 ], [ 0, %36 ], [ 0, %67 ], [ %360, %359 ]
  ret i32 %362
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle22NewValueSpecifiedUnitsENS0_12SVGAngleTypeEf(%"class.blink::SVGAngle"* nocapture, i32, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %4, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %5, i16 zeroext 2) #11
  %6 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float %2, float* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle23ConvertToSpecifiedUnitsENS0_12SVGAngleTypeE(%"class.blink::SVGAngle"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %64, label %6

6:                                                ; preds = %2
  switch i32 %4, label %61 [
    i32 5, label %7
    i32 3, label %21
    i32 4, label %35
    i32 1, label %48
    i32 2, label %48
  ]

7:                                                ; preds = %6
  switch i32 %1, label %61 [
    i32 4, label %8
    i32 1, label %12
    i32 2, label %12
    i32 3, label %16
  ]

8:                                                ; preds = %7
  %9 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 4.000000e+02
  store float %11, float* %9, align 4
  br label %61

12:                                               ; preds = %7, %7
  %13 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 3.600000e+02
  store float %15, float* %13, align 4
  br label %61

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, 3.600000e+02
  %20 = fmul float %19, 0x3F91DF46A0000000
  store float %20, float* %17, align 4
  br label %61

21:                                               ; preds = %6
  switch i32 %1, label %61 [
    i32 4, label %22
    i32 1, label %26
    i32 2, label %26
    i32 5, label %30
  ]

22:                                               ; preds = %21
  %23 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, 0x404FD4BBA0000000
  store float %25, float* %23, align 4
  br label %61

26:                                               ; preds = %21, %21
  %27 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %28 = load float, float* %27, align 4
  %29 = fmul float %28, 0x404CA5DC00000000
  store float %29, float* %27, align 4
  br label %61

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %32 = load float, float* %31, align 4
  %33 = fmul float %32, 0x404CA5DC00000000
  %34 = fmul float %33, 0x3F66C16C20000000
  store float %34, float* %31, align 4
  br label %61

35:                                               ; preds = %6
  switch i32 %1, label %61 [
    i32 3, label %36
    i32 1, label %40
    i32 2, label %40
    i32 5, label %44
  ]

36:                                               ; preds = %35
  %37 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %38 = load float, float* %37, align 4
  %39 = fmul float %38, 0x3F9015BFA0000000
  store float %39, float* %37, align 4
  br label %61

40:                                               ; preds = %35, %35
  %41 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, 0x3FECCCCCC0000000
  store float %43, float* %41, align 4
  br label %61

44:                                               ; preds = %35
  %45 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %46 = load float, float* %45, align 4
  %47 = fmul float %46, 0x3F647AE140000000
  store float %47, float* %45, align 4
  br label %61

48:                                               ; preds = %6, %6
  switch i32 %1, label %61 [
    i32 3, label %49
    i32 4, label %53
    i32 5, label %57
  ]

49:                                               ; preds = %48
  %50 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %51 = load float, float* %50, align 4
  %52 = fmul float %51, 0x3F91DF46A0000000
  store float %52, float* %50, align 4
  br label %61

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %55 = load float, float* %54, align 4
  %56 = fmul float %55, 0x3FF1C71C80000000
  store float %56, float* %54, align 4
  br label %61

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 0x3F66C16C20000000
  store float %60, float* %58, align 4
  br label %61

61:                                               ; preds = %49, %53, %57, %48, %36, %40, %44, %35, %22, %26, %30, %21, %8, %12, %16, %7, %6
  store i32 %1, i32* %3, align 8
  %62 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %63 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %62, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %63, i16 zeroext 2) #11
  br label %64

64:                                               ; preds = %2, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGAngle"* nocapture, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #1 align 2 {
  %4 = bitcast %"class.blink::SVGPropertyBase"* %1 to %"class.blink::SVGAngle"*
  %5 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %6, i64 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %68

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %1, i64 2
  %12 = bitcast %"class.blink::SVGPropertyBase"* %11 to %"class.blink::SVGEnumeration"**
  %13 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %13, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = icmp eq i16 %15, 2
  br i1 %16, label %17, label %68

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %35 [
    i32 4, label %20
    i32 3, label %24
    i32 5, label %28
    i32 1, label %32
    i32 0, label %32
    i32 2, label %32
  ]

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 0x3FECCCCCC0000000
  br label %35

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 0x404CA5DC00000000
  br label %35

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, 3.600000e+02
  br label %35

32:                                               ; preds = %17, %17, %17
  %33 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %34 = load float, float* %33, align 4
  br label %35

35:                                               ; preds = %17, %20, %24, %28, %32
  %36 = phi float [ %34, %32 ], [ %31, %28 ], [ %27, %24 ], [ %23, %20 ], [ 0.000000e+00, %17 ]
  %37 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %1, i64 1
  %38 = bitcast %"class.blink::SVGPropertyBase"* %37 to i32*
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %55 [
    i32 4, label %40
    i32 3, label %44
    i32 5, label %48
    i32 1, label %52
    i32 0, label %52
    i32 2, label %52
  ]

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %4, i64 0, i32 2
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, 0x3FECCCCCC0000000
  br label %55

44:                                               ; preds = %35
  %45 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %4, i64 0, i32 2
  %46 = load float, float* %45, align 4
  %47 = fmul float %46, 0x404CA5DC00000000
  br label %55

48:                                               ; preds = %35
  %49 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %4, i64 0, i32 2
  %50 = load float, float* %49, align 4
  %51 = fmul float %50, 3.600000e+02
  br label %55

52:                                               ; preds = %35, %35, %35
  %53 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %4, i64 0, i32 2
  %54 = load float, float* %53, align 4
  br label %55

55:                                               ; preds = %35, %40, %44, %48, %52
  %56 = phi float [ %54, %52 ], [ %51, %48 ], [ %47, %44 ], [ %43, %40 ], [ 0.000000e+00, %35 ]
  %57 = fadd float %36, %56
  switch i32 %19, label %67 [
    i32 4, label %58
    i32 3, label %60
    i32 5, label %62
    i32 1, label %64
    i32 0, label %64
    i32 2, label %64
  ]

58:                                               ; preds = %55
  %59 = fmul float %57, 0x3FF1C71C80000000
  br label %64

60:                                               ; preds = %55
  %61 = fmul float %57, 0x3F91DF46A0000000
  br label %64

62:                                               ; preds = %55
  %63 = fmul float %57, 0x3F66C16C20000000
  br label %64

64:                                               ; preds = %55, %55, %55, %62, %60, %58
  %65 = phi float [ %59, %58 ], [ %61, %60 ], [ %63, %62 ], [ %57, %55 ], [ %57, %55 ], [ %57, %55 ]
  %66 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float %65, float* %66, align 4
  br label %67

67:                                               ; preds = %64, %55
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %6, i16 zeroext 2) #11
  br label %68

68:                                               ; preds = %3, %10, %67
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink8SVGAngle9IsNumericEv(%"class.blink::SVGAngle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %3, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 2
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle6AssignERKS0_(%"class.blink::SVGAngle"* nocapture, %"class.blink::SVGAngle"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %4, i64 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 2
  br i1 %7, label %8, label %19

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %1, i64 0, i32 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %15 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %14, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %15, i16 zeroext 2) #11
  %16 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 %10, i32* %16, align 8
  %17 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %18 = bitcast float* %17 to i32*
  store i32 %13, i32* %18, align 4
  br label %26

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %22 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %21, align 8
  %23 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %3, align 8
  %24 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %23, i64 0, i32 1
  %25 = load i16, i16* %24, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %22, i16 zeroext %25) #11
  br label %26

26:                                               ; preds = %19, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE(%"class.blink::SVGAngle"* nocapture, %"struct.blink::SMILAnimationEffectParameters"* nocapture readonly dereferenceable(3), float, i32, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #1 align 2 {
  %9 = bitcast %"class.blink::SVGPropertyBase"* %4 to %"class.blink::SVGAngle"*
  %10 = bitcast %"class.blink::SVGPropertyBase"* %5 to %"class.blink::SVGAngle"*
  %11 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %4, i64 2
  %12 = bitcast %"class.blink::SVGPropertyBase"* %11 to %"class.blink::SVGEnumeration"**
  %13 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %13, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = icmp eq i16 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %5, i64 2
  %19 = bitcast %"class.blink::SVGPropertyBase"* %18 to %"class.blink::SVGEnumeration"**
  %20 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %20, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = icmp eq i16 %22, 2
  br i1 %23, label %50, label %24

24:                                               ; preds = %17, %8
  %25 = fcmp olt float %2, 5.000000e-01
  %26 = select i1 %25, %"class.blink::SVGAngle"* %9, %"class.blink::SVGAngle"* %10
  %27 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %26, i64 0, i32 3, i32 0, i32 0
  %28 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %28, i64 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = icmp eq i16 %30, 2
  br i1 %31, label %32, label %43

32:                                               ; preds = %24
  %33 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %26, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %26, i64 0, i32 2
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %39 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %38, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %39, i16 zeroext 2) #11
  %40 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 %34, i32* %40, align 8
  %41 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %42 = bitcast float* %41 to i32*
  store i32 %37, i32* %42, align 4
  br label %176

43:                                               ; preds = %24
  %44 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %44, align 4
  %45 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %46 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %45, align 8
  %47 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %27, align 8
  %48 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %47, i64 0, i32 1
  %49 = load i16, i16* %48, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %46, i16 zeroext %49) #11
  br label %176

50:                                               ; preds = %17
  %51 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %4, i64 1
  %52 = bitcast %"class.blink::SVGPropertyBase"* %51 to i32*
  %53 = load i32, i32* %52, align 8
  switch i32 %53, label %69 [
    i32 4, label %54
    i32 3, label %58
    i32 5, label %62
    i32 1, label %66
    i32 0, label %66
    i32 2, label %66
  ]

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %9, i64 0, i32 2
  %56 = load float, float* %55, align 4
  %57 = fmul float %56, 0x3FECCCCCC0000000
  br label %69

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %9, i64 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = fmul float %60, 0x404CA5DC00000000
  br label %69

62:                                               ; preds = %50
  %63 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %9, i64 0, i32 2
  %64 = load float, float* %63, align 4
  %65 = fmul float %64, 3.600000e+02
  br label %69

66:                                               ; preds = %50, %50, %50
  %67 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %9, i64 0, i32 2
  %68 = load float, float* %67, align 4
  br label %69

69:                                               ; preds = %50, %54, %58, %62, %66
  %70 = phi float [ %68, %66 ], [ %65, %62 ], [ %61, %58 ], [ %57, %54 ], [ 0.000000e+00, %50 ]
  %71 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %5, i64 1
  %72 = bitcast %"class.blink::SVGPropertyBase"* %71 to i32*
  %73 = load i32, i32* %72, align 8
  switch i32 %73, label %89 [
    i32 4, label %74
    i32 3, label %78
    i32 5, label %82
    i32 1, label %86
    i32 0, label %86
    i32 2, label %86
  ]

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %10, i64 0, i32 2
  %76 = load float, float* %75, align 4
  %77 = fmul float %76, 0x3FECCCCCC0000000
  br label %89

78:                                               ; preds = %69
  %79 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %10, i64 0, i32 2
  %80 = load float, float* %79, align 4
  %81 = fmul float %80, 0x404CA5DC00000000
  br label %89

82:                                               ; preds = %69
  %83 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %10, i64 0, i32 2
  %84 = load float, float* %83, align 4
  %85 = fmul float %84, 3.600000e+02
  br label %89

86:                                               ; preds = %69, %69, %69
  %87 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %10, i64 0, i32 2
  %88 = load float, float* %87, align 4
  br label %89

89:                                               ; preds = %69, %74, %78, %82, %86
  %90 = phi float [ %88, %86 ], [ %85, %82 ], [ %81, %78 ], [ %77, %74 ], [ 0.000000e+00, %69 ]
  %91 = bitcast %"class.blink::SVGPropertyBase"* %6 to %"class.blink::SVGAngle"*
  %92 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %6, i64 1
  %93 = bitcast %"class.blink::SVGPropertyBase"* %92 to i32*
  %94 = load i32, i32* %93, align 8
  switch i32 %94, label %110 [
    i32 4, label %95
    i32 3, label %99
    i32 5, label %103
    i32 1, label %107
    i32 0, label %107
    i32 2, label %107
  ]

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %91, i64 0, i32 2
  %97 = load float, float* %96, align 4
  %98 = fmul float %97, 0x3FECCCCCC0000000
  br label %110

99:                                               ; preds = %89
  %100 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %91, i64 0, i32 2
  %101 = load float, float* %100, align 4
  %102 = fmul float %101, 0x404CA5DC00000000
  br label %110

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %91, i64 0, i32 2
  %105 = load float, float* %104, align 4
  %106 = fmul float %105, 3.600000e+02
  br label %110

107:                                              ; preds = %89, %89, %89
  %108 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %91, i64 0, i32 2
  %109 = load float, float* %108, align 4
  br label %110

110:                                              ; preds = %89, %95, %99, %103, %107
  %111 = phi float [ %109, %107 ], [ %106, %103 ], [ %102, %99 ], [ %98, %95 ], [ 0.000000e+00, %89 ]
  %112 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 0
  %113 = load i8, i8* %112, align 1, !range !2
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %110
  %116 = fcmp olt float %2, 5.000000e-01
  %117 = select i1 %116, float %70, float %90
  br label %122

118:                                              ; preds = %110
  %119 = fsub float %90, %70
  %120 = fmul float %119, %2
  %121 = fadd float %70, %120
  br label %122

122:                                              ; preds = %118, %115
  %123 = phi float [ %117, %115 ], [ %121, %118 ]
  %124 = icmp eq i32 %3, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 2
  %127 = load i8, i8* %126, align 1, !range !2
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %133, label %129

129:                                              ; preds = %125
  %130 = uitofp i32 %3 to float
  %131 = fmul float %111, %130
  %132 = fadd float %131, %123
  br label %133

133:                                              ; preds = %122, %125, %129
  %134 = phi float [ %132, %129 ], [ %123, %125 ], [ %123, %122 ]
  %135 = getelementptr inbounds %"struct.blink::SMILAnimationEffectParameters", %"struct.blink::SMILAnimationEffectParameters"* %1, i64 0, i32 1
  %136 = load i8, i8* %135, align 1, !range !2
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %159, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %140 = load i32, i32* %139, align 8
  switch i32 %140, label %156 [
    i32 4, label %141
    i32 3, label %145
    i32 5, label %149
    i32 1, label %153
    i32 0, label %153
    i32 2, label %153
  ]

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %143 = load float, float* %142, align 4
  %144 = fmul float %143, 0x3FECCCCCC0000000
  br label %156

145:                                              ; preds = %138
  %146 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %147 = load float, float* %146, align 4
  %148 = fmul float %147, 0x404CA5DC00000000
  br label %156

149:                                              ; preds = %138
  %150 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %151 = load float, float* %150, align 4
  %152 = fmul float %151, 3.600000e+02
  br label %156

153:                                              ; preds = %138, %138, %138
  %154 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %155 = load float, float* %154, align 4
  br label %156

156:                                              ; preds = %138, %141, %145, %149, %153
  %157 = phi float [ %155, %153 ], [ %152, %149 ], [ %148, %145 ], [ %144, %141 ], [ 0.000000e+00, %138 ]
  %158 = fadd float %134, %157
  br label %159

159:                                              ; preds = %133, %156
  %160 = phi float [ %158, %156 ], [ %134, %133 ]
  %161 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %162 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %161, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %162, i16 zeroext 2) #11
  %163 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %164 = load i32, i32* %163, align 8
  switch i32 %164, label %174 [
    i32 4, label %165
    i32 3, label %167
    i32 5, label %169
    i32 1, label %171
    i32 0, label %171
    i32 2, label %171
  ]

165:                                              ; preds = %159
  %166 = fmul float %160, 0x3FF1C71C80000000
  br label %171

167:                                              ; preds = %159
  %168 = fmul float %160, 0x3F91DF46A0000000
  br label %171

169:                                              ; preds = %159
  %170 = fmul float %160, 0x3F66C16C20000000
  br label %171

171:                                              ; preds = %159, %159, %159, %169, %167, %165
  %172 = phi float [ %166, %165 ], [ %168, %167 ], [ %170, %169 ], [ %160, %159 ], [ %160, %159 ], [ %160, %159 ]
  %173 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float %172, float* %173, align 4
  br label %174

174:                                              ; preds = %171, %159
  %175 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %161, align 8
  tail call void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"* %175, i16 zeroext 2) #11
  br label %176

176:                                              ; preds = %43, %32, %174
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZNK5blink8SVGAngle17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGAngle"* nocapture readonly, %"class.blink::SVGPropertyBase"* nocapture readonly, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %21 [
    i32 4, label %6
    i32 3, label %10
    i32 5, label %14
    i32 1, label %18
    i32 0, label %18
    i32 2, label %18
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, 0x3FECCCCCC0000000
  br label %21

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 0x404CA5DC00000000
  br label %21

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, 3.600000e+02
  br label %21

18:                                               ; preds = %3, %3, %3
  %19 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  %20 = load float, float* %19, align 4
  br label %21

21:                                               ; preds = %3, %6, %10, %14, %18
  %22 = phi float [ %20, %18 ], [ %17, %14 ], [ %13, %10 ], [ %9, %6 ], [ 0.000000e+00, %3 ]
  %23 = bitcast %"class.blink::SVGPropertyBase"* %1 to %"class.blink::SVGAngle"*
  %24 = getelementptr inbounds %"class.blink::SVGPropertyBase", %"class.blink::SVGPropertyBase"* %1, i64 1
  %25 = bitcast %"class.blink::SVGPropertyBase"* %24 to i32*
  %26 = load i32, i32* %25, align 8
  switch i32 %26, label %42 [
    i32 4, label %27
    i32 3, label %31
    i32 5, label %35
    i32 1, label %39
    i32 0, label %39
    i32 2, label %39
  ]

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %23, i64 0, i32 2
  %29 = load float, float* %28, align 4
  %30 = fmul float %29, 0x3FECCCCCC0000000
  br label %42

31:                                               ; preds = %21
  %32 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %23, i64 0, i32 2
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, 0x404CA5DC00000000
  br label %42

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %23, i64 0, i32 2
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, 3.600000e+02
  br label %42

39:                                               ; preds = %21, %21, %21
  %40 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %23, i64 0, i32 2
  %41 = load float, float* %40, align 4
  br label %42

42:                                               ; preds = %21, %27, %31, %35, %39
  %43 = phi float [ %41, %39 ], [ %38, %35 ], [ %34, %31 ], [ %30, %27 ], [ 0.000000e+00, %21 ]
  %44 = fsub float %22, %43
  %45 = tail call float @llvm.fabs.f32(float %44)
  ret float %45
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink8SVGAngle17OrientTypeChangedEv(%"class.blink::SVGAngle"* nocapture) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %3, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 2
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 1
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %9, align 4
  br label %10

10:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::SVGPropertyBase"* @_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE17CloneForAnimationERKN3WTF6StringE(%"class.blink::SVGPropertyHelper"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1 comdat align 2 {
  %3 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 24) #11
  %4 = bitcast i8* %3 to %"class.blink::SVGAngle"*
  %5 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8SVGAngleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i32*
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 12
  %9 = bitcast i8* %8 to float*
  store float 0.000000e+00, float* %9, align 4
  %10 = ptrtoint i8* %3 to i64
  %11 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 32) #11
  %12 = bitcast i8* %11 to i32 (...)***
  %13 = getelementptr inbounds i8, i8* %11, i64 8
  %14 = bitcast i8* %13 to i16*
  store i16 2, i16* %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 16
  %16 = bitcast i8* %15 to %"class.blink::SVGEnumerationMap"**
  store %"class.blink::SVGEnumerationMap"* bitcast ({ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16 }* @_ZZN5blink17GetEnumerationMapINS_19SVGMarkerOrientTypeEEERKNS_17SVGEnumerationMapEvE7entries to %"class.blink::SVGEnumerationMap"*), %"class.blink::SVGEnumerationMap"** %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %17 = getelementptr inbounds i8, i8* %11, i64 24
  %18 = bitcast i8* %17 to i64*
  store i64 %10, i64* %18, align 8
  %19 = getelementptr inbounds i8, i8* %11, i64 -4
  %20 = bitcast i8* %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = or i16 %21, 1
  store atomic i16 %22, i16* %20 release, align 2
  %23 = getelementptr inbounds i8, i8* %3, i64 16
  %24 = bitcast i8* %23 to i8**
  store i8* %11, i8** %24, align 8
  %25 = getelementptr inbounds i8, i8* %3, i64 -4
  %26 = bitcast i8* %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = or i16 %27, 1
  store atomic i16 %28, i16* %26 release, align 2
  %29 = tail call i32 @_ZN5blink8SVGAngle16SetValueAsStringERKN3WTF6StringE(%"class.blink::SVGAngle"* %4, %"class.WTF::String"* dereferenceable(8) %1)
  %30 = bitcast i8* %3 to %"class.blink::SVGPropertyBase"*
  ret %"class.blink::SVGPropertyBase"* %30
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink17SVGPropertyHelperINS_8SVGAngleEE7GetTypeEv(%"class.blink::SVGPropertyHelper"*) unnamed_addr #1 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15SVGPropertyBaseD2Ev(%"class.blink::SVGPropertyBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #4

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** dereferenceable(8), i8*, float* dereferenceable(4), i32) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** dereferenceable(8), i16*, float* dereferenceable(4), i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.174"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.174"*)) #11
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #11
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #11
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* %40, i8* %41) #11
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #11
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #11
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #11
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #9

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SVGPropertyBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %5, i64 8
  %7 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SVGPropertyBase"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv(i8*) #1 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::SVGPropertyBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::SVGPropertyBase"*)***
  %4 = load void (%"class.blink::SVGPropertyBase"*)**, void (%"class.blink::SVGPropertyBase"*)*** %3, align 8
  %5 = load void (%"class.blink::SVGPropertyBase"*)*, void (%"class.blink::SVGPropertyBase"*)** %4, align 8
  tail call void %5(%"class.blink::SVGPropertyBase"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv(i8*) #1 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.174"*) local_unnamed_addr #4

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_126SVGMarkerOrientEnumerationD0Ev(%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"* nocapture) unnamed_addr #10 align 2 {
  ret void
}

declare %"class.blink::SVGPropertyBase"* @_ZNK5blink14SVGEnumeration17CloneForAnimationERKN3WTF6StringE(%"class.blink::SVGEnumeration"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink14SVGEnumeration13ValueAsStringEv(%"class.blink::SVGEnumeration"*) unnamed_addr #4

declare void @_ZN5blink14SVGEnumeration3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGEnumeration"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*) unnamed_addr #4

declare void @_ZN5blink14SVGEnumeration22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE(%"class.blink::SVGEnumeration"*, %"struct.blink::SMILAnimationEffectParameters"* dereferenceable(3), float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*) unnamed_addr #4

declare float @_ZNK5blink14SVGEnumeration17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGEnumeration"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink14SVGEnumeration7GetTypeEv(%"class.blink::SVGEnumeration"*) unnamed_addr #1 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK5blink12_GLOBAL__N_126SVGMarkerOrientEnumeration5TraceEPNS_7VisitorE(%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"* nocapture readonly, %"class.blink::Visitor"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration", %"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member.0"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8SVGAngleEE5TraceEPNS_7VisitorEPKv) #11
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_126SVGMarkerOrientEnumeration12NotifyChangeEv(%"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration", %"class.blink::(anonymous namespace)::SVGMarkerOrientEnumeration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::SVGAngle"*, %"class.blink::SVGAngle"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %3, i64 0, i32 3, i32 0, i32 0
  %5 = load %"class.blink::SVGEnumeration"*, %"class.blink::SVGEnumeration"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::SVGEnumeration", %"class.blink::SVGEnumeration"* %5, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = icmp eq i16 %7, 2
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %3, i64 0, i32 1
  store i32 1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::SVGAngle", %"class.blink::SVGAngle"* %3, i64 0, i32 2
  store float 0.000000e+00, float* %11, align 4
  br label %12

12:                                               ; preds = %1, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8SVGAngleEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %0, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14SVGEnumerationEE5TraceEPNS_7VisitorEPKv) #11
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

declare void @_ZN5blink14SVGEnumeration8SetValueEt(%"class.blink::SVGEnumeration"*, i16 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_14SVGEnumerationEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SVGPropertyBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %5, i64 8
  %7 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SVGPropertyBase"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
