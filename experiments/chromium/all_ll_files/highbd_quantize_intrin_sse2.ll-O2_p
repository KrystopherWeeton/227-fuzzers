; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_quantize_intrin_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_quantize_intrin_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_quantize_b_sse2(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = alloca [2 x <2 x i64>], align 16
  %15 = alloca [2 x <2 x i64>], align 16
  %16 = trunc i64 %1 to i32
  %17 = sdiv i32 %16, 4
  %18 = bitcast [2 x <2 x i64>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #2
  %19 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %14, i64 0, i64 1
  %20 = bitcast [2 x <2 x i64>]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #2
  %21 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %15, i64 0, i64 1
  %22 = getelementptr inbounds i16, i16* %3, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = load i16, i16* %3, align 2
  %26 = sext i16 %25 to i32
  %27 = insertelement <4 x i32> undef, i32 %26, i32 0
  %28 = insertelement <4 x i32> %27, i32 %24, i32 1
  %29 = insertelement <4 x i32> %28, i32 %24, i32 2
  %30 = insertelement <4 x i32> %29, i32 %24, i32 3
  %31 = bitcast [2 x <2 x i64>]* %14 to <4 x i32>*
  store <4 x i32> %30, <4 x i32>* %31, align 16
  %32 = insertelement <4 x i32> undef, i32 %24, i32 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> zeroinitializer
  %34 = bitcast <2 x i64>* %19 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 16
  %35 = sub <4 x i32> zeroinitializer, %30
  %36 = bitcast [2 x <2 x i64>]* %15 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 16
  %37 = sub <4 x i32> zeroinitializer, %33
  %38 = bitcast <2 x i64>* %21 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 16
  %39 = bitcast i32* %7 to i8*
  %40 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 %40, i1 false)
  %41 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 %40, i1 false)
  %42 = sext i32 %17 to i64
  br label %43

43:                                               ; preds = %48, %13
  %44 = phi i64 [ %46, %48 ], [ %42, %13 ]
  %45 = phi i32 [ %49, %48 ], [ %17, %13 ]
  %46 = add nsw i64 %44, -1
  %47 = icmp sgt i64 %44, 0
  br i1 %47, label %48, label %75

48:                                               ; preds = %43
  %49 = add nsw i32 %45, -1
  %50 = trunc i64 %46 to i32
  %51 = shl nsw i32 %50, 2
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %0, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 16
  %56 = icmp ne i64 %46, 0
  %57 = zext i1 %56 to i64
  %58 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %14, i64 0, i64 %57
  %59 = bitcast <2 x i64>* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 16
  %61 = icmp sgt <4 x i32> %60, %55
  %62 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %15, i64 0, i64 %57
  %63 = bitcast <2 x i64>* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = icmp sgt <4 x i32> %55, %64
  %66 = and <4 x i1> %65, %61
  %67 = sext <4 x i1> %66 to <4 x i32>
  %68 = bitcast <4 x i32> %67 to <16 x i8>
  %69 = icmp slt <16 x i8> %68, zeroinitializer
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, -1
  br i1 %71, label %43, label %72

72:                                               ; preds = %48
  %73 = zext i1 %71 to i32
  %74 = sub i32 %45, %73
  br label %75

75:                                               ; preds = %43, %72
  %76 = phi i32 [ %74, %72 ], [ %45, %43 ]
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %164

78:                                               ; preds = %75
  %79 = zext i32 %76 to i64
  %80 = getelementptr inbounds i16, i16* %4, i64 1
  %81 = getelementptr inbounds i16, i16* %5, i64 1
  %82 = getelementptr inbounds i16, i16* %6, i64 1
  %83 = getelementptr inbounds i16, i16* %9, i64 1
  %84 = getelementptr inbounds i16, i16* %4, i64 1
  %85 = getelementptr inbounds i16, i16* %5, i64 1
  %86 = getelementptr inbounds i16, i16* %6, i64 1
  %87 = getelementptr inbounds i16, i16* %9, i64 1
  %88 = getelementptr inbounds i16, i16* %4, i64 1
  %89 = getelementptr inbounds i16, i16* %5, i64 1
  %90 = getelementptr inbounds i16, i16* %6, i64 1
  %91 = getelementptr inbounds i16, i16* %9, i64 1
  br label %92

92:                                               ; preds = %266, %78
  %93 = phi i64 [ 0, %78 ], [ %268, %266 ]
  %94 = phi i32 [ -1, %78 ], [ %267, %266 ]
  %95 = shl nsw i64 %93, 2
  %96 = getelementptr inbounds i32, i32* %0, i64 %95
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 16
  %99 = ashr <4 x i32> %98, <i32 31, i32 31, i32 31, i32 31>
  %100 = xor <4 x i32> %99, %98
  %101 = sub <4 x i32> %100, %99
  %102 = icmp ne i64 %93, 0
  %103 = zext i1 %102 to i64
  %104 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %14, i64 0, i64 %103
  %105 = bitcast <2 x i64>* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16
  %107 = icmp sge <4 x i32> %101, %106
  %108 = sext <4 x i1> %107 to <4 x i32>
  %109 = bitcast <4 x i32> %108 to <16 x i8>
  %110 = icmp slt <16 x i8> %109, zeroinitializer
  %111 = bitcast <16 x i1> %110 to i16
  %112 = zext i16 %111 to i32
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = extractelement <4 x i32> %99, i32 0
  %116 = extractelement <4 x i32> %101, i32 1
  %117 = extractelement <4 x i32> %99, i32 1
  %118 = extractelement <4 x i32> %101, i32 2
  %119 = extractelement <4 x i32> %99, i32 2
  %120 = extractelement <4 x i32> %101, i32 3
  %121 = extractelement <4 x i32> %99, i32 3
  br i1 %114, label %160, label %122

122:                                              ; preds = %92
  %123 = bitcast <4 x i32> %101 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 0
  %125 = icmp ne i64 %93, 0
  %126 = zext i1 %125 to i64
  %127 = getelementptr inbounds i16, i16* %4, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i64
  %130 = add i64 %124, %129
  %131 = shl i64 %130, 32
  %132 = ashr exact i64 %131, 32
  %133 = getelementptr inbounds i16, i16* %5, i64 %126
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i64
  %136 = mul nsw i64 %132, %135
  %137 = ashr i64 %136, 16
  %138 = add nsw i64 %137, %132
  %139 = getelementptr inbounds i16, i16* %6, i64 %126
  %140 = load i16, i16* %139, align 2
  %141 = sext i16 %140 to i64
  %142 = mul nsw i64 %138, %141
  %143 = lshr i64 %142, 16
  %144 = trunc i64 %143 to i32
  %145 = xor i32 %115, %144
  %146 = sub nsw i32 %145, %115
  %147 = getelementptr inbounds i32, i32* %7, i64 %95
  store i32 %146, i32* %147, align 4
  %148 = getelementptr inbounds i16, i16* %9, i64 %126
  %149 = load i16, i16* %148, align 2
  %150 = sext i16 %149 to i32
  %151 = mul nsw i32 %146, %150
  %152 = getelementptr inbounds i32, i32* %8, i64 %95
  store i32 %151, i32* %152, align 4
  %153 = icmp eq i32 %144, 0
  br i1 %153, label %160, label %154

154:                                              ; preds = %122
  %155 = getelementptr inbounds i16, i16* %12, i64 %95
  %156 = load i16, i16* %155, align 2
  %157 = sext i16 %156 to i32
  %158 = icmp slt i32 %94, %157
  %159 = select i1 %158, i32 %157, i32 %94
  br label %160

160:                                              ; preds = %154, %122, %92
  %161 = phi i32 [ %94, %92 ], [ %159, %154 ], [ %94, %122 ]
  %162 = and i32 %112, 16
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %198, label %168

164:                                              ; preds = %266, %75
  %165 = phi i32 [ -1, %75 ], [ %267, %266 ]
  %166 = trunc i32 %165 to i16
  %167 = add i16 %166, 1
  store i16 %167, i16* %10, align 2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #2
  ret void

168:                                              ; preds = %160
  %169 = or i64 %95, 1
  %170 = load i16, i16* %80, align 2
  %171 = sext i16 %170 to i32
  %172 = add nsw i32 %116, %171
  %173 = sext i32 %172 to i64
  %174 = load i16, i16* %81, align 2
  %175 = sext i16 %174 to i64
  %176 = mul nsw i64 %173, %175
  %177 = ashr i64 %176, 16
  %178 = add nsw i64 %177, %173
  %179 = load i16, i16* %82, align 2
  %180 = sext i16 %179 to i64
  %181 = mul nsw i64 %178, %180
  %182 = lshr i64 %181, 16
  %183 = trunc i64 %182 to i32
  %184 = xor i32 %117, %183
  %185 = sub nsw i32 %184, %117
  %186 = getelementptr inbounds i32, i32* %7, i64 %169
  store i32 %185, i32* %186, align 4
  %187 = load i16, i16* %83, align 2
  %188 = sext i16 %187 to i32
  %189 = mul nsw i32 %185, %188
  %190 = getelementptr inbounds i32, i32* %8, i64 %169
  store i32 %189, i32* %190, align 4
  %191 = icmp eq i32 %183, 0
  br i1 %191, label %198, label %192

192:                                              ; preds = %168
  %193 = getelementptr inbounds i16, i16* %12, i64 %169
  %194 = load i16, i16* %193, align 2
  %195 = sext i16 %194 to i32
  %196 = icmp slt i32 %161, %195
  %197 = select i1 %196, i32 %195, i32 %161
  br label %198

198:                                              ; preds = %192, %168, %160
  %199 = phi i32 [ %161, %160 ], [ %197, %192 ], [ %161, %168 ]
  %200 = and i32 %112, 256
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %232, label %202

202:                                              ; preds = %198
  %203 = or i64 %95, 2
  %204 = load i16, i16* %84, align 2
  %205 = sext i16 %204 to i32
  %206 = add nsw i32 %118, %205
  %207 = sext i32 %206 to i64
  %208 = load i16, i16* %85, align 2
  %209 = sext i16 %208 to i64
  %210 = mul nsw i64 %207, %209
  %211 = ashr i64 %210, 16
  %212 = add nsw i64 %211, %207
  %213 = load i16, i16* %86, align 2
  %214 = sext i16 %213 to i64
  %215 = mul nsw i64 %212, %214
  %216 = lshr i64 %215, 16
  %217 = trunc i64 %216 to i32
  %218 = xor i32 %119, %217
  %219 = sub nsw i32 %218, %119
  %220 = getelementptr inbounds i32, i32* %7, i64 %203
  store i32 %219, i32* %220, align 4
  %221 = load i16, i16* %87, align 2
  %222 = sext i16 %221 to i32
  %223 = mul nsw i32 %219, %222
  %224 = getelementptr inbounds i32, i32* %8, i64 %203
  store i32 %223, i32* %224, align 4
  %225 = icmp eq i32 %217, 0
  br i1 %225, label %232, label %226

226:                                              ; preds = %202
  %227 = getelementptr inbounds i16, i16* %12, i64 %203
  %228 = load i16, i16* %227, align 2
  %229 = sext i16 %228 to i32
  %230 = icmp slt i32 %199, %229
  %231 = select i1 %230, i32 %229, i32 %199
  br label %232

232:                                              ; preds = %226, %202, %198
  %233 = phi i32 [ %199, %198 ], [ %231, %226 ], [ %199, %202 ]
  %234 = and i32 %112, 4096
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %266, label %236

236:                                              ; preds = %232
  %237 = or i64 %95, 3
  %238 = load i16, i16* %88, align 2
  %239 = sext i16 %238 to i32
  %240 = add nsw i32 %120, %239
  %241 = sext i32 %240 to i64
  %242 = load i16, i16* %89, align 2
  %243 = sext i16 %242 to i64
  %244 = mul nsw i64 %241, %243
  %245 = ashr i64 %244, 16
  %246 = add nsw i64 %245, %241
  %247 = load i16, i16* %90, align 2
  %248 = sext i16 %247 to i64
  %249 = mul nsw i64 %246, %248
  %250 = lshr i64 %249, 16
  %251 = trunc i64 %250 to i32
  %252 = xor i32 %121, %251
  %253 = sub nsw i32 %252, %121
  %254 = getelementptr inbounds i32, i32* %7, i64 %237
  store i32 %253, i32* %254, align 4
  %255 = load i16, i16* %91, align 2
  %256 = sext i16 %255 to i32
  %257 = mul nsw i32 %253, %256
  %258 = getelementptr inbounds i32, i32* %8, i64 %237
  store i32 %257, i32* %258, align 4
  %259 = icmp eq i32 %251, 0
  br i1 %259, label %266, label %260

260:                                              ; preds = %236
  %261 = getelementptr inbounds i16, i16* %12, i64 %237
  %262 = load i16, i16* %261, align 2
  %263 = sext i16 %262 to i32
  %264 = icmp slt i32 %233, %263
  %265 = select i1 %264, i32 %263, i32 %233
  br label %266

266:                                              ; preds = %260, %236, %232
  %267 = phi i32 [ %233, %232 ], [ %265, %260 ], [ %233, %236 ]
  %268 = add nuw nsw i64 %93, 1
  %269 = icmp eq i64 %268, %79
  br i1 %269, label %164, label %92
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_quantize_b_32x32_sse2(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = alloca [2 x <2 x i64>], align 16
  %15 = alloca [2 x <2 x i64>], align 16
  %16 = alloca [1024 x i32], align 16
  %17 = bitcast [2 x <2 x i64>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #2
  %18 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %14, i64 0, i64 1
  %19 = bitcast [2 x <2 x i64>]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #2
  %20 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %15, i64 0, i64 1
  %21 = bitcast [1024 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %21) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 4096, i1 false)
  %22 = bitcast i16* %3 to <2 x i16>*
  %23 = load <2 x i16>, <2 x i16>* %22, align 2
  %24 = sext <2 x i16> %23 to <2 x i32>
  %25 = add nsw <2 x i32> %24, <i32 1, i32 1>
  %26 = ashr <2 x i32> %25, <i32 1, i32 1>
  %27 = shufflevector <2 x i32> %26, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %28 = bitcast [2 x <2 x i64>]* %14 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %28, align 16
  %29 = shufflevector <2 x i32> %26, <2 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <2 x i64>* %18 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 16
  %31 = sub nsw <4 x i32> zeroinitializer, %27
  %32 = bitcast [2 x <2 x i64>]* %15 to <4 x i32>*
  store <4 x i32> %31, <4 x i32>* %32, align 16
  %33 = sub nsw <4 x i32> zeroinitializer, %29
  %34 = bitcast <2 x i64>* %20 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 16
  %35 = bitcast i32* %7 to i8*
  %36 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 %36, i1 false)
  %37 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 %36, i1 false)
  %38 = sdiv i64 %1, 4
  %39 = icmp sgt i64 %1, 3
  br i1 %39, label %44, label %159

40:                                               ; preds = %102
  %41 = icmp sgt i32 %103, 0
  br i1 %41, label %42, label %159

42:                                               ; preds = %40
  %43 = zext i32 %103 to i64
  br label %106

44:                                               ; preds = %13, %102
  %45 = phi i64 [ %104, %102 ], [ 0, %13 ]
  %46 = phi i32 [ %103, %102 ], [ 0, %13 ]
  %47 = trunc i64 %45 to i32
  %48 = shl nsw i32 %47, 2
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %0, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16
  %53 = icmp ne i64 %45, 0
  %54 = zext i1 %53 to i64
  %55 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %14, i64 0, i64 %54
  %56 = bitcast <2 x i64>* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = icmp sgt <4 x i32> %57, %52
  %59 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %15, i64 0, i64 %54
  %60 = bitcast <2 x i64>* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = icmp sgt <4 x i32> %52, %61
  %63 = and <4 x i1> %62, %58
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <16 x i8>
  %66 = icmp slt <16 x i8> %65, zeroinitializer
  %67 = bitcast <16 x i1> %66 to i16
  %68 = zext i16 %67 to i32
  %69 = and i32 %68, 15
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %75

71:                                               ; preds = %44
  %72 = add nsw i32 %46, 1
  %73 = sext i32 %46 to i64
  %74 = getelementptr inbounds [1024 x i32], [1024 x i32]* %16, i64 0, i64 %73
  store i32 %48, i32* %74, align 4
  br label %75

75:                                               ; preds = %44, %71
  %76 = phi i32 [ %46, %44 ], [ %72, %71 ]
  %77 = and i32 %68, 240
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %84

79:                                               ; preds = %75
  %80 = or i32 %48, 1
  %81 = add nsw i32 %76, 1
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds [1024 x i32], [1024 x i32]* %16, i64 0, i64 %82
  store i32 %80, i32* %83, align 4
  br label %84

84:                                               ; preds = %75, %79
  %85 = phi i32 [ %76, %75 ], [ %81, %79 ]
  %86 = and i32 %68, 3840
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %93

88:                                               ; preds = %84
  %89 = or i32 %48, 2
  %90 = add nsw i32 %85, 1
  %91 = sext i32 %85 to i64
  %92 = getelementptr inbounds [1024 x i32], [1024 x i32]* %16, i64 0, i64 %91
  store i32 %89, i32* %92, align 4
  br label %93

93:                                               ; preds = %84, %88
  %94 = phi i32 [ %85, %84 ], [ %90, %88 ]
  %95 = and i32 %68, 61440
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %102

97:                                               ; preds = %93
  %98 = or i32 %48, 3
  %99 = add nsw i32 %94, 1
  %100 = sext i32 %94 to i64
  %101 = getelementptr inbounds [1024 x i32], [1024 x i32]* %16, i64 0, i64 %100
  store i32 %98, i32* %101, align 4
  br label %102

102:                                              ; preds = %93, %97
  %103 = phi i32 [ %94, %93 ], [ %99, %97 ]
  %104 = add nuw nsw i64 %45, 1
  %105 = icmp eq i64 %104, %38
  br i1 %105, label %40, label %44

106:                                              ; preds = %155, %42
  %107 = phi i64 [ 0, %42 ], [ %157, %155 ]
  %108 = phi i32 [ -1, %42 ], [ %156, %155 ]
  %109 = getelementptr inbounds [1024 x i32], [1024 x i32]* %16, i64 0, i64 %107
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %0, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = ashr i32 %113, 31
  %115 = xor i32 %114, %113
  %116 = lshr i32 %113, 31
  %117 = add i32 %115, %116
  %118 = icmp ne i32 %110, 0
  %119 = zext i1 %118 to i64
  %120 = getelementptr inbounds i16, i16* %4, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = add nsw i32 %122, 1
  %124 = ashr i32 %123, 1
  %125 = add nsw i32 %117, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i16, i16* %5, i64 %119
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i64
  %130 = mul nsw i64 %126, %129
  %131 = ashr i64 %130, 16
  %132 = add nsw i64 %131, %126
  %133 = getelementptr inbounds i16, i16* %6, i64 %119
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i64
  %136 = mul nsw i64 %132, %135
  %137 = lshr i64 %136, 15
  %138 = trunc i64 %137 to i32
  %139 = xor i32 %114, %138
  %140 = sub nsw i32 %139, %114
  %141 = getelementptr inbounds i32, i32* %7, i64 %111
  store i32 %140, i32* %141, align 4
  %142 = getelementptr inbounds i16, i16* %9, i64 %119
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = mul nsw i32 %140, %144
  %146 = sdiv i32 %145, 2
  %147 = getelementptr inbounds i32, i32* %8, i64 %111
  store i32 %146, i32* %147, align 4
  %148 = icmp eq i32 %138, 0
  br i1 %148, label %155, label %149

149:                                              ; preds = %106
  %150 = getelementptr inbounds i16, i16* %12, i64 %111
  %151 = load i16, i16* %150, align 2
  %152 = sext i16 %151 to i32
  %153 = icmp slt i32 %108, %152
  %154 = select i1 %153, i32 %152, i32 %108
  br label %155

155:                                              ; preds = %106, %149
  %156 = phi i32 [ %154, %149 ], [ %108, %106 ]
  %157 = add nuw nsw i64 %107, 1
  %158 = icmp eq i64 %157, %43
  br i1 %158, label %159, label %106

159:                                              ; preds = %155, %13, %40
  %160 = phi i32 [ -1, %40 ], [ -1, %13 ], [ %156, %155 ]
  %161 = trunc i32 %160 to i16
  %162 = add i16 %161, 1
  store i16 %162, i16* %10, align 2
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %21) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
