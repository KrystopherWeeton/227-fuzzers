; ModuleID = '../../third_party/abseil-cpp/absl/status/status_payload_printer.cc'
source_filename = "../../third_party/abseil-cpp/absl/status/status_payload_printer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::Cord" = type { %"class.absl::Cord::InlineRep" }
%"class.absl::Cord::InlineRep" = type { %"class.absl::cord_internal::InlineData" }
%"class.absl::cord_internal::InlineData" = type { %union.anon.2 }
%union.anon.2 = type { %"struct.absl::cord_internal::InlineData::AsTree" }
%"struct.absl::cord_internal::InlineData::AsTree" = type { %union.anon.3, i64 }
%union.anon.3 = type { %"struct.absl::cord_internal::CordRep"* }
%"struct.absl::cord_internal::CordRep" = type <{ i64, %"class.absl::cord_internal::Refcount", i8, [1 x i8], [2 x i8] }>
%"class.absl::cord_internal::Refcount" = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i32 }

$_ZN4absl13base_internal10AtomicHookIPFNS_8optionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEEE13DummyFunctionESB_SE_ = comdat any

@_ZN4absl15status_internalL7storageE = internal global { { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } { { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } } { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* @_ZN4absl13base_internal10AtomicHookIPFNS_8optionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEEE13DummyFunctionESB_SE_ } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* @_ZN4absl13base_internal10AtomicHookIPFNS_8optionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEEE13DummyFunctionESB_SE_ }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4absl15status_internal23SetStatusPayloadPrinterEPFNS_8optionalINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEE({}*) local_unnamed_addr #0 {
  %2 = load i64, i64* bitcast (void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)** getelementptr inbounds ({ { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* }, { { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* }* @_ZN4absl15status_internalL7storageE, i64 0, i32 1) to i64*), align 8
  %3 = ptrtoint {}* %0 to i64
  %4 = cmpxchg i64* bitcast ({ { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* }* @_ZN4absl15status_internalL7storageE to i64*), i64 %2, i64 %3 acq_rel acquire
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden {}* @_ZN4absl15status_internal23GetStatusPayloadPrinterEv() local_unnamed_addr #0 {
  %1 = load atomic i64, i64* bitcast ({ { { void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* } }, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* }* @_ZN4absl15status_internalL7storageE to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)*
  %3 = icmp eq void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* %2, @_ZN4absl13base_internal10AtomicHookIPFNS_8optionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEEE13DummyFunctionESB_SE_
  %4 = select i1 %3, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* null, void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* %2
  %5 = bitcast void (%"class.absl::optional"*, i8*, i64, %"class.absl::Cord"*)* %4 to {}*
  ret {}* %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl13base_internal10AtomicHookIPFNS_8optionalINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEENS_11string_viewERKNS_4CordEEE13DummyFunctionESB_SE_(%"class.absl::optional"* noalias sret, i8*, i64, %"class.absl::Cord"* dereferenceable(16)) #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %union.anon* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
