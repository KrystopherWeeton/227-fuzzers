; ModuleID = '../../base/third_party/symbolize/symbolize.cc'
source_filename = "../../base/third_party/symbolize/symbolize.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.Elf64_Shdr = type { i32, i32, i64, i64, i64, i64, i32, i32, i64, i64 }
%struct.Elf64_Ehdr = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%struct.Elf64_Phdr = type { i32, i32, i64, i64, i64, i64, i64, i64 }
%struct.Elf64_Sym = type { i32, i8, i8, i16, i64, i64 }

@_ZN6googleL20g_symbolize_callbackE = internal unnamed_addr global i32 (i32, i8*, i8*, i64, i64)* null, align 8
@_ZN6googleL37g_symbolize_open_object_file_callbackE = internal unnamed_addr global i32 (i64, i64*, i64*, i8*, i32)* null, align 8
@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"+0x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"/proc/self/maps\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"/proc/self/mem\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6google24InstallSymbolizeCallbackEPFiiPvPcmmE(i32 (i32, i8*, i8*, i64, i64)*) local_unnamed_addr #0 {
  store i32 (i32, i8*, i8*, i64, i64)* %0, i32 (i32, i8*, i8*, i64, i64)** @_ZN6googleL20g_symbolize_callbackE, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6google38InstallSymbolizeOpenObjectFileCallbackEPFimRmS0_PciE(i32 (i64, i64*, i64*, i8*, i32)*) local_unnamed_addr #0 {
  store i32 (i64, i64*, i64*, i8*, i32)* %0, i32 (i64, i64*, i64*, i8*, i32)** @_ZN6googleL37g_symbolize_open_object_file_callbackE, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6google22GetSectionHeaderByNameEiPKcmP10Elf64_Shdr(i32, i8* nocapture readonly, i64, %struct.Elf64_Shdr*) local_unnamed_addr #1 {
  %5 = alloca %struct.Elf64_Ehdr, align 8
  %6 = alloca %struct.Elf64_Shdr, align 8
  %7 = alloca [64 x i8], align 16
  %8 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 64, i1 false)
  %9 = icmp sgt i32 %0, -1
  br i1 %9, label %11, label %10

10:                                               ; preds = %4
  tail call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

11:                                               ; preds = %4, %24
  %12 = phi i64 [ %26, %24 ], [ 0, %4 ]
  %13 = icmp ult i64 %12, 64
  br i1 %13, label %14, label %27

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 0, i64 %12
  %16 = sub nuw nsw i64 64, %12
  br label %17

17:                                               ; preds = %20, %14
  %18 = call i64 @pread64(i32 %0, i8* %15, i64 %16, i64 %12) #13
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = tail call i32* @__errno_location() #14
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 4
  br i1 %23, label %17, label %148

24:                                               ; preds = %17
  %25 = icmp eq i64 %18, 0
  %26 = add nsw i64 %18, %12
  br i1 %25, label %27, label %11

27:                                               ; preds = %24, %11
  %28 = icmp ugt i64 %12, 64
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

30:                                               ; preds = %27
  %31 = icmp eq i64 %12, 64
  br i1 %31, label %32, label %148

32:                                               ; preds = %30
  %33 = bitcast %struct.Elf64_Shdr* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %33) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 64, i1 false)
  %34 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 6
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 11
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 13
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i64
  %42 = mul nuw nsw i64 %41, %38
  %43 = add i64 %42, %35
  br label %44

44:                                               ; preds = %58, %32
  %45 = phi i64 [ %60, %58 ], [ 0, %32 ]
  %46 = icmp ult i64 %45, 64
  br i1 %46, label %47, label %61

47:                                               ; preds = %44
  %48 = getelementptr inbounds i8, i8* %33, i64 %45
  %49 = sub nuw nsw i64 64, %45
  %50 = add nsw i64 %43, %45
  br label %51

51:                                               ; preds = %54, %47
  %52 = call i64 @pread64(i32 %0, i8* %48, i64 %49, i64 %50) #13
  %53 = icmp slt i64 %52, 0
  br i1 %53, label %54, label %58

54:                                               ; preds = %51
  %55 = tail call i32* @__errno_location() #14
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 4
  br i1 %57, label %51, label %146

58:                                               ; preds = %51
  %59 = icmp eq i64 %52, 0
  %60 = add nsw i64 %52, %45
  br i1 %59, label %61, label %44

61:                                               ; preds = %58, %44
  %62 = icmp ugt i64 %45, 64
  br i1 %62, label %63, label %64

63:                                               ; preds = %61
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

64:                                               ; preds = %61
  %65 = icmp eq i64 %45, 64
  br i1 %65, label %66, label %146

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %5, i64 0, i32 12
  %68 = load i16, i16* %67, align 4
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %146, label %70

70:                                               ; preds = %66
  %71 = bitcast %struct.Elf64_Shdr* %3 to i8*
  %72 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  %73 = icmp ugt i64 %2, 64
  %74 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %6, i64 0, i32 4
  %75 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %3, i64 0, i32 0
  br label %76

76:                                               ; preds = %70, %141
  %77 = phi i32 [ 0, %70 ], [ %142, %141 ]
  %78 = load i64, i64* %34, align 8
  %79 = load i16, i16* %36, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nsw i32 %77, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %78, %82
  br label %84

84:                                               ; preds = %98, %76
  %85 = phi i64 [ %100, %98 ], [ 0, %76 ]
  %86 = icmp ult i64 %85, 64
  br i1 %86, label %87, label %101

87:                                               ; preds = %84
  %88 = getelementptr inbounds i8, i8* %71, i64 %85
  %89 = sub nuw nsw i64 64, %85
  %90 = add nsw i64 %83, %85
  br label %91

91:                                               ; preds = %94, %87
  %92 = call i64 @pread64(i32 %0, i8* %88, i64 %89, i64 %90) #13
  %93 = icmp slt i64 %92, 0
  br i1 %93, label %94, label %98

94:                                               ; preds = %91
  %95 = tail call i32* @__errno_location() #14
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 4
  br i1 %97, label %91, label %146

98:                                               ; preds = %91
  %99 = icmp eq i64 %92, 0
  %100 = add nsw i64 %92, %85
  br i1 %99, label %101, label %84

101:                                              ; preds = %98, %84
  %102 = icmp ugt i64 %85, 64
  br i1 %102, label %103, label %104

103:                                              ; preds = %101
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

104:                                              ; preds = %101
  %105 = icmp eq i64 %85, 64
  br i1 %105, label %106, label %146

106:                                              ; preds = %104
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %72) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 64, i1 false)
  br i1 %73, label %139, label %107

107:                                              ; preds = %106
  %108 = load i64, i64* %74, align 8
  %109 = load i32, i32* %75, align 8
  %110 = zext i32 %109 to i64
  %111 = add i64 %108, %110
  br label %112

112:                                              ; preds = %107, %126
  %113 = phi i64 [ %128, %126 ], [ 0, %107 ]
  %114 = icmp ult i64 %113, %2
  br i1 %114, label %115, label %129

115:                                              ; preds = %112
  %116 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 %113
  %117 = sub i64 %2, %113
  %118 = add nsw i64 %111, %113
  br label %119

119:                                              ; preds = %122, %115
  %120 = call i64 @pread64(i32 %0, i8* %116, i64 %117, i64 %118) #13
  %121 = icmp slt i64 %120, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %119
  %123 = tail call i32* @__errno_location() #14
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 4
  br i1 %125, label %119, label %139

126:                                              ; preds = %119
  %127 = icmp eq i64 %120, 0
  %128 = add nsw i64 %120, %113
  br i1 %127, label %129, label %112

129:                                              ; preds = %126, %112
  %130 = icmp ugt i64 %113, %2
  br i1 %130, label %131, label %132

131:                                              ; preds = %129
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

132:                                              ; preds = %129
  %133 = icmp eq i64 %113, -1
  br i1 %133, label %139, label %134

134:                                              ; preds = %132
  %135 = icmp eq i64 %113, %2
  br i1 %135, label %136, label %141

136:                                              ; preds = %134
  %137 = call i32 @bcmp(i8* nonnull %72, i8* %1, i64 %2)
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %106, %132, %136, %122
  %140 = phi i1 [ false, %122 ], [ true, %136 ], [ false, %106 ], [ false, %132 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %72) #13
  br label %146

141:                                              ; preds = %134, %136
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %72) #13
  %142 = add nuw nsw i32 %77, 1
  %143 = load i16, i16* %67, align 4
  %144 = zext i16 %143 to i32
  %145 = icmp ult i32 %142, %144
  br i1 %145, label %76, label %146

146:                                              ; preds = %54, %141, %104, %94, %66, %139, %64
  %147 = phi i1 [ false, %64 ], [ %140, %139 ], [ false, %66 ], [ false, %94 ], [ false, %104 ], [ false, %141 ], [ false, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %33) #13
  br label %148

148:                                              ; preds = %20, %30, %146
  %149 = phi i1 [ %147, %146 ], [ false, %30 ], [ false, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #13
  ret i1 %149
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6google9SymbolizeEPvPci(i8*, i8*, i32) local_unnamed_addr #1 {
  %4 = icmp sgt i32 %2, -1
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

6:                                                ; preds = %3
  %7 = tail call fastcc zeroext i1 @_ZN6googleL20SymbolizeAndDemangleEPvPci(i8* %0, i8* %1, i32 %2)
  ret i1 %7
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @_ZN6googleL10AssertFailEv() unnamed_addr #3 {
  tail call void @abort() #15
  unreachable
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN6googleL20SymbolizeAndDemangleEPvPci(i8*, i8*, i32) unnamed_addr #4 {
  %4 = alloca %struct.Elf64_Ehdr, align 8
  %5 = alloca %struct.Elf64_Shdr, align 8
  %6 = alloca %struct.Elf64_Shdr, align 8
  %7 = alloca %struct.Elf64_Ehdr, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = ptrtoint i8* %0 to i64
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  store i64 0, i64* %8, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  store i64 0, i64* %9, align 8
  %13 = icmp slt i32 %2, 1
  br i1 %13, label %269, label %14

14:                                               ; preds = %3
  store i8 0, i8* %1, align 1
  %15 = tail call i64 @strlen(i8* %1) #16
  %16 = trunc i64 %15 to i32
  %17 = icmp slt i32 %16, %2
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

19:                                               ; preds = %14
  %20 = shl i64 %15, 32
  %21 = ashr exact i64 %20, 32
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  %23 = sub nsw i32 %2, %16
  %24 = sext i32 %23 to i64
  %25 = tail call i8* @strncpy(i8* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 %24) #13
  %26 = add nsw i32 %23, -1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %22, i64 %27
  store i8 0, i8* %28, align 1
  %29 = load i32 (i64, i64*, i64*, i8*, i32)*, i32 (i64, i64*, i64*, i8*, i32)** @_ZN6googleL37g_symbolize_open_object_file_callbackE, align 8
  %30 = icmp eq i32 (i64, i64*, i64*, i8*, i32)* %29, null
  %31 = getelementptr inbounds i8, i8* %1, i64 1
  %32 = add nsw i32 %2, -1
  br i1 %30, label %35, label %33

33:                                               ; preds = %19
  %34 = call i32 %29(i64 %10, i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %9, i8* %31, i32 %32) #13
  br label %37

35:                                               ; preds = %19
  %36 = call fastcc i32 @_ZN6googleL44OpenObjectFileContainingPcAndGetStartAddressEmRmS0_Pci(i64 %10, i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %9, i8* %31, i32 %32)
  br label %37

37:                                               ; preds = %35, %33
  %38 = phi i32 [ %34, %33 ], [ %36, %35 ]
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %76

40:                                               ; preds = %37
  %41 = load i8, i8* %31, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %269, label %43

43:                                               ; preds = %40
  %44 = sext i32 %32 to i64
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  store i8 0, i8* %45, align 1
  %46 = call i64 @strlen(i8* %1) #16
  %47 = trunc i64 %46 to i32
  %48 = icmp slt i32 %47, %2
  br i1 %48, label %50, label %49

49:                                               ; preds = %43
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

50:                                               ; preds = %43
  %51 = shl i64 %46, 32
  %52 = ashr exact i64 %51, 32
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = sub nsw i32 %2, %47
  %55 = sext i32 %54 to i64
  %56 = call i8* @strncpy(i8* %53, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %55) #13
  %57 = add nsw i32 %54, -1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %53, i64 %58
  store i8 0, i8* %59, align 1
  %60 = load i64, i64* %9, align 8
  %61 = sub i64 %10, %60
  call fastcc void @_ZN6googleL19SafeAppendHexNumberEmPci(i64 %61, i8* %1, i32 %2)
  %62 = call i64 @strlen(i8* %1) #16
  %63 = trunc i64 %62 to i32
  %64 = icmp slt i32 %63, %2
  br i1 %64, label %66, label %65

65:                                               ; preds = %50
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

66:                                               ; preds = %50
  %67 = shl i64 %62, 32
  %68 = ashr exact i64 %67, 32
  %69 = getelementptr inbounds i8, i8* %1, i64 %68
  %70 = sub nsw i32 %2, %63
  %71 = sext i32 %70 to i64
  %72 = call i8* @strncpy(i8* %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 %71) #13
  %73 = add nsw i32 %70, -1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %69, i64 %74
  store i8 0, i8* %75, align 1
  br label %269

76:                                               ; preds = %37
  %77 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %77) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %77, i8 -86, i64 64, i1 false) #13
  br label %78

78:                                               ; preds = %76, %91
  %79 = phi i64 [ %93, %91 ], [ 0, %76 ]
  %80 = icmp ult i64 %79, 64
  br i1 %80, label %81, label %94

81:                                               ; preds = %78
  %82 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 0, i64 %79
  %83 = sub nuw nsw i64 64, %79
  br label %84

84:                                               ; preds = %87, %81
  %85 = call i64 @pread64(i32 %38, i8* %82, i64 %83, i64 %79) #13
  %86 = icmp slt i64 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %84
  %88 = tail call i32* @__errno_location() #14
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 4
  br i1 %90, label %84, label %103

91:                                               ; preds = %84
  %92 = icmp eq i64 %85, 0
  %93 = add nsw i64 %85, %79
  br i1 %92, label %94, label %78

94:                                               ; preds = %91, %78
  %95 = icmp ugt i64 %79, 64
  br i1 %95, label %96, label %97

96:                                               ; preds = %94
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

97:                                               ; preds = %94
  %98 = icmp eq i64 %79, 64
  br i1 %98, label %99, label %103

99:                                               ; preds = %97
  %100 = bitcast %struct.Elf64_Ehdr* %7 to i32*
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 1179403647
  br i1 %102, label %104, label %103

103:                                              ; preds = %87, %97, %99
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %77) #13
  br label %264

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %7, i64 0, i32 1
  %106 = load i16, i16* %105, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %77) #13
  %107 = load i32 (i32, i8*, i8*, i64, i64)*, i32 (i32, i8*, i8*, i64, i64)** @_ZN6googleL20g_symbolize_callbackE, align 8
  %108 = icmp eq i32 (i32, i8*, i8*, i64, i64)* %107, null
  br i1 %108, label %121, label %109

109:                                              ; preds = %104
  %110 = icmp eq i16 %106, 3
  %111 = load i64, i64* %8, align 8
  %112 = select i1 %110, i64 %111, i64 0
  %113 = sext i32 %2 to i64
  %114 = call i32 %107(i32 %38, i8* %0, i8* %1, i64 %113, i64 %112) #13
  %115 = icmp sgt i32 %114, 0
  %116 = sext i32 %114 to i64
  %117 = getelementptr inbounds i8, i8* %1, i64 %116
  %118 = select i1 %115, i8* %117, i8* %1
  %119 = select i1 %115, i32 %114, i32 0
  %120 = sub nsw i32 %2, %119
  br label %121

121:                                              ; preds = %109, %104
  %122 = phi i8* [ %1, %104 ], [ %118, %109 ]
  %123 = phi i32 [ %2, %104 ], [ %120, %109 ]
  %124 = load i64, i64* %9, align 8
  %125 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %125) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 -86, i64 64, i1 false) #13
  br label %126

126:                                              ; preds = %121, %139
  %127 = phi i64 [ %141, %139 ], [ 0, %121 ]
  %128 = icmp ult i64 %127, 64
  br i1 %128, label %129, label %142

129:                                              ; preds = %126
  %130 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %4, i64 0, i32 0, i64 %127
  %131 = sub nuw nsw i64 64, %127
  br label %132

132:                                              ; preds = %135, %129
  %133 = call i64 @pread64(i32 %38, i8* %130, i64 %131, i64 %127) #13
  %134 = icmp slt i64 %133, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %132
  %136 = tail call i32* @__errno_location() #14
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 4
  br i1 %138, label %132, label %222

139:                                              ; preds = %132
  %140 = icmp eq i64 %133, 0
  %141 = add nsw i64 %133, %127
  br i1 %140, label %142, label %126

142:                                              ; preds = %139, %126
  %143 = icmp ugt i64 %127, 64
  br i1 %143, label %144, label %145

144:                                              ; preds = %142
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

145:                                              ; preds = %142
  %146 = icmp eq i64 %127, 64
  br i1 %146, label %147, label %222

147:                                              ; preds = %145
  %148 = bitcast %struct.Elf64_Shdr* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %148) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %148, i8 -86, i64 64, i1 false) #13
  %149 = bitcast %struct.Elf64_Shdr* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %149) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 -86, i64 64, i1 false) #13
  %150 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %4, i64 0, i32 12
  %151 = load i16, i16* %150, align 4
  %152 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %4, i64 0, i32 6
  %153 = load i64, i64* %152, align 8
  %154 = call fastcc zeroext i1 @_ZN6googleL22GetSectionHeaderByTypeEitljP10Elf64_Shdr(i32 %38, i16 zeroext %151, i64 %153, i32 2, %struct.Elf64_Shdr* nonnull %5) #13
  br i1 %154, label %155, label %186

155:                                              ; preds = %147
  %156 = load i64, i64* %152, align 8
  %157 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %5, i64 0, i32 6
  %158 = load i32, i32* %157, align 8
  %159 = zext i32 %158 to i64
  %160 = shl nuw nsw i64 %159, 6
  %161 = add i64 %160, %156
  br label %162

162:                                              ; preds = %176, %155
  %163 = phi i64 [ %178, %176 ], [ 0, %155 ]
  %164 = icmp ult i64 %163, 64
  br i1 %164, label %165, label %179

165:                                              ; preds = %162
  %166 = getelementptr inbounds i8, i8* %149, i64 %163
  %167 = sub nuw nsw i64 64, %163
  %168 = add nsw i64 %161, %163
  br label %169

169:                                              ; preds = %172, %165
  %170 = call i64 @pread64(i32 %38, i8* %166, i64 %167, i64 %168) #13
  %171 = icmp slt i64 %170, 0
  br i1 %171, label %172, label %176

172:                                              ; preds = %169
  %173 = tail call i32* @__errno_location() #14
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 4
  br i1 %175, label %169, label %221

176:                                              ; preds = %169
  %177 = icmp eq i64 %170, 0
  %178 = add nsw i64 %170, %163
  br i1 %177, label %179, label %162

179:                                              ; preds = %176, %162
  %180 = icmp ugt i64 %163, 64
  br i1 %180, label %181, label %182

181:                                              ; preds = %179
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

182:                                              ; preds = %179
  %183 = icmp eq i64 %163, 64
  br i1 %183, label %184, label %221

184:                                              ; preds = %182
  %185 = call fastcc zeroext i1 @_ZN6googleL10FindSymbolEmiPcimPK10Elf64_ShdrS3_(i64 %10, i32 %38, i8* %122, i32 %123, i64 %124, %struct.Elf64_Shdr* nonnull %6, %struct.Elf64_Shdr* nonnull %5) #13
  br i1 %185, label %263, label %186

186:                                              ; preds = %184, %147
  %187 = load i16, i16* %150, align 4
  %188 = load i64, i64* %152, align 8
  %189 = call fastcc zeroext i1 @_ZN6googleL22GetSectionHeaderByTypeEitljP10Elf64_Shdr(i32 %38, i16 zeroext %187, i64 %188, i32 11, %struct.Elf64_Shdr* nonnull %5) #13
  br i1 %189, label %190, label %221

190:                                              ; preds = %186
  %191 = load i64, i64* %152, align 8
  %192 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %5, i64 0, i32 6
  %193 = load i32, i32* %192, align 8
  %194 = zext i32 %193 to i64
  %195 = shl nuw nsw i64 %194, 6
  %196 = add i64 %195, %191
  br label %197

197:                                              ; preds = %211, %190
  %198 = phi i64 [ %213, %211 ], [ 0, %190 ]
  %199 = icmp ult i64 %198, 64
  br i1 %199, label %200, label %214

200:                                              ; preds = %197
  %201 = getelementptr inbounds i8, i8* %149, i64 %198
  %202 = sub nuw nsw i64 64, %198
  %203 = add nsw i64 %196, %198
  br label %204

204:                                              ; preds = %207, %200
  %205 = call i64 @pread64(i32 %38, i8* %201, i64 %202, i64 %203) #13
  %206 = icmp slt i64 %205, 0
  br i1 %206, label %207, label %211

207:                                              ; preds = %204
  %208 = tail call i32* @__errno_location() #14
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %209, 4
  br i1 %210, label %204, label %221

211:                                              ; preds = %204
  %212 = icmp eq i64 %205, 0
  %213 = add nsw i64 %205, %198
  br i1 %212, label %214, label %197

214:                                              ; preds = %211, %197
  %215 = icmp ugt i64 %198, 64
  br i1 %215, label %216, label %217

216:                                              ; preds = %214
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

217:                                              ; preds = %214
  %218 = icmp eq i64 %198, 64
  br i1 %218, label %219, label %221

219:                                              ; preds = %217
  %220 = call fastcc zeroext i1 @_ZN6googleL10FindSymbolEmiPcimPK10Elf64_ShdrS3_(i64 %10, i32 %38, i8* %122, i32 %123, i64 %124, %struct.Elf64_Shdr* nonnull %6, %struct.Elf64_Shdr* nonnull %5) #13
  br i1 %220, label %263, label %221

221:                                              ; preds = %172, %207, %182, %217, %219, %186
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %149) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %148) #13
  br label %222

222:                                              ; preds = %135, %145, %221
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %125) #13
  %223 = getelementptr inbounds i8, i8* %122, i64 1
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  %226 = load i32 (i32, i8*, i8*, i64, i64)*, i32 (i32, i8*, i8*, i64, i64)** @_ZN6googleL20g_symbolize_callbackE, align 8
  %227 = icmp ne i32 (i32, i8*, i8*, i64, i64)* %226, null
  %228 = or i1 %225, %227
  br i1 %228, label %264, label %229

229:                                              ; preds = %222
  %230 = add nsw i32 %123, -1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %122, i64 %231
  store i8 0, i8* %232, align 1
  %233 = call i64 @strlen(i8* %122) #16
  %234 = trunc i64 %233 to i32
  %235 = icmp sgt i32 %123, %234
  br i1 %235, label %237, label %236

236:                                              ; preds = %229
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

237:                                              ; preds = %229
  %238 = shl i64 %233, 32
  %239 = ashr exact i64 %238, 32
  %240 = getelementptr inbounds i8, i8* %122, i64 %239
  %241 = sub nsw i32 %123, %234
  %242 = sext i32 %241 to i64
  %243 = call i8* @strncpy(i8* %240, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %242) #13
  %244 = add nsw i32 %241, -1
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %240, i64 %245
  store i8 0, i8* %246, align 1
  %247 = load i64, i64* %9, align 8
  %248 = sub i64 %10, %247
  call fastcc void @_ZN6googleL19SafeAppendHexNumberEmPci(i64 %248, i8* %122, i32 %123)
  %249 = call i64 @strlen(i8* %122) #16
  %250 = trunc i64 %249 to i32
  %251 = icmp sgt i32 %123, %250
  br i1 %251, label %253, label %252

252:                                              ; preds = %237
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

253:                                              ; preds = %237
  %254 = shl i64 %249, 32
  %255 = ashr exact i64 %254, 32
  %256 = getelementptr inbounds i8, i8* %122, i64 %255
  %257 = sub nsw i32 %123, %250
  %258 = sext i32 %257 to i64
  %259 = call i8* @strncpy(i8* %256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 %258) #13
  %260 = add nsw i32 %257, -1
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %256, i64 %261
  store i8 0, i8* %262, align 1
  br label %264

263:                                              ; preds = %219, %184
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %149) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %148) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %125) #13
  call fastcc void @_ZN6googleL15DemangleInplaceEPci(i8* %122, i32 %123)
  br label %264

264:                                              ; preds = %103, %253, %263, %222
  %265 = phi i1 [ true, %263 ], [ true, %253 ], [ false, %222 ], [ false, %103 ]
  %266 = icmp sgt i32 %38, -1
  br i1 %266, label %267, label %269

267:                                              ; preds = %264
  %268 = call i32 @close(i32 %38) #13
  br label %269

269:                                              ; preds = %66, %40, %267, %264, %3
  %270 = phi i1 [ false, %3 ], [ %265, %264 ], [ %265, %267 ], [ false, %40 ], [ true, %66 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  ret i1 %270
}

declare i64 @pread64(i32, i8*, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @_ZN6googleL44OpenObjectFileContainingPcAndGetStartAddressEmRmS0_Pci(i64, i64* nocapture dereferenceable(8), i64* nocapture dereferenceable(8), i8*, i32) unnamed_addr #4 {
  %6 = alloca [1024 x i8], align 16
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %8 = alloca %struct.Elf64_Ehdr, align 8
  %9 = alloca %struct.Elf64_Phdr, align 8
  br label %10

10:                                               ; preds = %13, %5
  %11 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 0) #13
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %10
  %14 = tail call i32* @__errno_location() #14
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 4
  br i1 %16, label %10, label %367

17:                                               ; preds = %10, %20
  %18 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 0) #13
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = tail call i32* @__errno_location() #14
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 4
  br i1 %23, label %17, label %362

24:                                               ; preds = %17
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 1024, i1 false)
  %25 = ptrtoint [1024 x i8]* %6 to i64
  %26 = icmp sgt i32 %11, -1
  %27 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %8, i64 0, i32 0, i64 0
  %28 = bitcast %struct.Elf64_Ehdr* %8 to i32*
  %29 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %8, i64 0, i32 1
  %30 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %8, i64 0, i32 10
  %31 = bitcast %struct.Elf64_Phdr* %9 to i8*
  %32 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %8, i64 0, i32 5
  %33 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %9, i64 0, i32 0
  %34 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %9, i64 0, i32 2
  %35 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %9, i64 0, i32 3
  br label %36

36:                                               ; preds = %356, %24
  %37 = phi i64 [ 0, %24 ], [ %119, %356 ]
  %38 = phi i8* [ %7, %24 ], [ %125, %356 ]
  %39 = phi i64 [ 0, %24 ], [ %121, %356 ]
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %39
  %41 = icmp eq i64 %39, 0
  %42 = ptrtoint i8* %40 to i64
  br i1 %41, label %43, label %71

43:                                               ; preds = %36
  br i1 %26, label %45, label %44

44:                                               ; preds = %43
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

45:                                               ; preds = %43, %59
  %46 = phi i64 [ %61, %59 ], [ 0, %43 ]
  %47 = icmp ult i64 %46, 1024
  br i1 %47, label %48, label %62

48:                                               ; preds = %45
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %46
  %50 = sub nuw nsw i64 1024, %46
  %51 = add nsw i64 %46, %37
  br label %52

52:                                               ; preds = %55, %48
  %53 = call i64 @pread64(i32 %11, i8* %49, i64 %50, i64 %51) #13
  %54 = icmp slt i64 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %52
  %56 = tail call i32* @__errno_location() #14
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 4
  br i1 %58, label %52, label %357

59:                                               ; preds = %52
  %60 = icmp eq i64 %53, 0
  %61 = add nsw i64 %53, %46
  br i1 %60, label %62, label %45

62:                                               ; preds = %59, %45
  %63 = icmp ugt i64 %46, 1024
  br i1 %63, label %64, label %65

64:                                               ; preds = %62
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

65:                                               ; preds = %62
  %66 = icmp eq i64 %46, 0
  br i1 %66, label %357, label %67

67:                                               ; preds = %65
  %68 = add nsw i64 %46, %37
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %46
  %70 = ptrtoint i8* %69 to i64
  br label %118

71:                                               ; preds = %36
  %72 = getelementptr inbounds i8, i8* %38, i64 1
  %73 = ptrtoint i8* %72 to i64
  %74 = icmp ugt i8* %72, %40
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

76:                                               ; preds = %71
  %77 = sub i64 %42, %73
  %78 = call i8* @memchr(i8* %72, i32 10, i64 %77) #16
  %79 = icmp eq i8* %78, null
  br i1 %79, label %80, label %118

80:                                               ; preds = %76
  %81 = shl i64 %77, 32
  %82 = ashr exact i64 %81, 32
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 16 %7, i8* align 1 %72, i64 %82, i1 false) #13
  %83 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %82
  %84 = sub i64 4398046511104, %81
  %85 = ashr exact i64 %84, 32
  br i1 %26, label %87, label %86

86:                                               ; preds = %80
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

87:                                               ; preds = %80
  %88 = trunc i64 %77 to i32
  %89 = icmp sgt i32 %88, 1024
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

91:                                               ; preds = %87, %105
  %92 = phi i64 [ %107, %105 ], [ 0, %87 ]
  %93 = icmp ugt i64 %85, %92
  br i1 %93, label %94, label %108

94:                                               ; preds = %91
  %95 = getelementptr inbounds i8, i8* %83, i64 %92
  %96 = sub i64 %85, %92
  %97 = add nsw i64 %92, %37
  br label %98

98:                                               ; preds = %101, %94
  %99 = call i64 @pread64(i32 %11, i8* %95, i64 %96, i64 %97) #13
  %100 = icmp slt i64 %99, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %98
  %102 = tail call i32* @__errno_location() #14
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 4
  br i1 %104, label %98, label %357

105:                                              ; preds = %98
  %106 = icmp eq i64 %99, 0
  %107 = add nsw i64 %99, %92
  br i1 %106, label %108, label %91

108:                                              ; preds = %105, %91
  %109 = icmp ult i64 %85, %92
  br i1 %109, label %110, label %111

110:                                              ; preds = %108
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

111:                                              ; preds = %108
  %112 = icmp slt i64 %92, 1
  br i1 %112, label %357, label %113

113:                                              ; preds = %111
  %114 = add nsw i64 %92, %37
  %115 = add nsw i64 %92, %82
  %116 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %115
  %117 = ptrtoint i8* %116 to i64
  br label %118

118:                                              ; preds = %113, %76, %67
  %119 = phi i64 [ %68, %67 ], [ %114, %113 ], [ %37, %76 ]
  %120 = phi i64 [ %25, %67 ], [ %25, %113 ], [ %73, %76 ]
  %121 = phi i64 [ %46, %67 ], [ %115, %113 ], [ %39, %76 ]
  %122 = phi i64 [ %70, %67 ], [ %117, %113 ], [ %42, %76 ]
  %123 = phi i8* [ %7, %67 ], [ %7, %113 ], [ %72, %76 ]
  %124 = sub i64 %122, %120
  %125 = call i8* @memchr(i8* %123, i32 10, i64 %124) #16
  %126 = icmp eq i8* %125, null
  br i1 %126, label %357, label %127

127:                                              ; preds = %118
  store i8 0, i8* %125, align 1
  %128 = inttoptr i64 %120 to i8*
  store i64 0, i64* %1, align 8
  %129 = icmp ugt i8* %125, %128
  br i1 %129, label %130, label %149

130:                                              ; preds = %127, %138
  %131 = phi i64 [ %146, %138 ], [ 0, %127 ]
  %132 = phi i8* [ %147, %138 ], [ %128, %127 ]
  %133 = load i8, i8* %132, align 1
  %134 = sext i8 %133 to i32
  %135 = add i8 %133, -48
  %136 = icmp ult i8 %135, 10
  br i1 %136, label %138, label %137

137:                                              ; preds = %130
  switch i8 %133, label %149 [
    i8 102, label %138
    i8 101, label %138
    i8 100, label %138
    i8 99, label %138
    i8 98, label %138
    i8 97, label %138
    i8 70, label %138
    i8 69, label %138
    i8 68, label %138
    i8 67, label %138
    i8 66, label %138
    i8 65, label %138
  ]

138:                                              ; preds = %137, %137, %137, %137, %137, %137, %137, %137, %137, %137, %137, %137, %130
  %139 = shl i64 %131, 4
  %140 = icmp slt i8 %133, 65
  %141 = add nsw i32 %134, -48
  %142 = and i32 %134, 15
  %143 = add nuw nsw i32 %142, 9
  %144 = select i1 %140, i32 %141, i32 %143
  %145 = sext i32 %144 to i64
  %146 = or i64 %139, %145
  store i64 %146, i64* %1, align 8
  %147 = getelementptr inbounds i8, i8* %132, i64 1
  %148 = icmp eq i8* %147, %125
  br i1 %148, label %357, label %130

149:                                              ; preds = %137, %127
  %150 = phi i64 [ 0, %127 ], [ %131, %137 ]
  %151 = phi i8* [ %128, %127 ], [ %132, %137 ]
  %152 = icmp ugt i8* %151, %125
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

154:                                              ; preds = %149
  %155 = icmp eq i8* %151, %125
  br i1 %155, label %357, label %156

156:                                              ; preds = %154
  %157 = load i8, i8* %151, align 1
  %158 = icmp eq i8 %157, 45
  br i1 %158, label %159, label %357

159:                                              ; preds = %156
  %160 = getelementptr inbounds i8, i8* %151, i64 1
  %161 = icmp ult i8* %160, %125
  br i1 %161, label %162, label %181

162:                                              ; preds = %159, %170
  %163 = phi i64 [ %178, %170 ], [ 0, %159 ]
  %164 = phi i8* [ %179, %170 ], [ %160, %159 ]
  %165 = load i8, i8* %164, align 1
  %166 = sext i8 %165 to i32
  %167 = add i8 %165, -48
  %168 = icmp ult i8 %167, 10
  br i1 %168, label %170, label %169

169:                                              ; preds = %162
  switch i8 %165, label %181 [
    i8 102, label %170
    i8 101, label %170
    i8 100, label %170
    i8 99, label %170
    i8 98, label %170
    i8 97, label %170
    i8 70, label %170
    i8 69, label %170
    i8 68, label %170
    i8 67, label %170
    i8 66, label %170
    i8 65, label %170
  ]

170:                                              ; preds = %169, %169, %169, %169, %169, %169, %169, %169, %169, %169, %169, %169, %162
  %171 = shl i64 %163, 4
  %172 = icmp slt i8 %165, 65
  %173 = add nsw i32 %166, -48
  %174 = and i32 %166, 15
  %175 = add nuw nsw i32 %174, 9
  %176 = select i1 %172, i32 %173, i32 %175
  %177 = sext i32 %176 to i64
  %178 = or i64 %171, %177
  %179 = getelementptr inbounds i8, i8* %164, i64 1
  %180 = icmp eq i8* %179, %125
  br i1 %180, label %357, label %162

181:                                              ; preds = %169, %159
  %182 = phi i64 [ 0, %159 ], [ %163, %169 ]
  %183 = phi i8* [ %160, %159 ], [ %164, %169 ]
  %184 = icmp ugt i8* %183, %125
  br i1 %184, label %185, label %186

185:                                              ; preds = %181
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

186:                                              ; preds = %181
  %187 = icmp eq i8* %183, %125
  br i1 %187, label %357, label %188

188:                                              ; preds = %186
  %189 = load i8, i8* %183, align 1
  %190 = icmp eq i8 %189, 32
  br i1 %190, label %191, label %357

191:                                              ; preds = %188
  %192 = getelementptr inbounds i8, i8* %183, i64 1
  %193 = icmp ult i8* %192, %125
  br i1 %193, label %194, label %357

194:                                              ; preds = %191, %199
  %195 = phi i8* [ %201, %199 ], [ %192, %191 ]
  %196 = phi i64 [ %200, %199 ], [ 1, %191 ]
  %197 = load i8, i8* %195, align 1
  %198 = icmp eq i8 %197, 32
  br i1 %198, label %203, label %199

199:                                              ; preds = %194
  %200 = add nuw nsw i64 %196, 1
  %201 = getelementptr inbounds i8, i8* %183, i64 %200
  %202 = icmp ult i8* %201, %125
  br i1 %202, label %194, label %203

203:                                              ; preds = %199, %194
  %204 = phi i64 [ %200, %199 ], [ %196, %194 ]
  %205 = phi i8* [ %201, %199 ], [ %195, %194 ]
  %206 = icmp eq i8* %205, %125
  %207 = icmp ult i64 %204, 5
  %208 = or i1 %207, %206
  br i1 %208, label %357, label %209

209:                                              ; preds = %203
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 64, i1 false)
  %210 = load i8, i8* %192, align 1
  %211 = icmp eq i8 %210, 114
  br i1 %211, label %212, label %289

212:                                              ; preds = %209, %226
  %213 = phi i64 [ %228, %226 ], [ 0, %209 ]
  %214 = icmp ult i64 %213, 64
  br i1 %214, label %215, label %229

215:                                              ; preds = %212
  %216 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %8, i64 0, i32 0, i64 %213
  %217 = sub nuw nsw i64 64, %213
  %218 = add nsw i64 %213, %150
  br label %219

219:                                              ; preds = %222, %215
  %220 = call i64 @pread64(i32 %18, i8* %216, i64 %217, i64 %218) #13
  %221 = icmp slt i64 %220, 0
  br i1 %221, label %222, label %226

222:                                              ; preds = %219
  %223 = tail call i32* @__errno_location() #14
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 4
  br i1 %225, label %219, label %289

226:                                              ; preds = %219
  %227 = icmp eq i64 %220, 0
  %228 = add nsw i64 %220, %213
  br i1 %227, label %229, label %212

229:                                              ; preds = %226, %212
  %230 = icmp ugt i64 %213, 64
  br i1 %230, label %231, label %232

231:                                              ; preds = %229
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

232:                                              ; preds = %229
  %233 = icmp eq i64 %213, 64
  %234 = load i32, i32* %28, align 8
  %235 = icmp eq i32 %234, 1179403647
  %236 = and i1 %233, %235
  br i1 %236, label %237, label %289

237:                                              ; preds = %232
  %238 = load i16, i16* %29, align 8
  switch i16 %238, label %289 [
    i16 2, label %239
    i16 3, label %240
  ]

239:                                              ; preds = %237
  store i64 0, i64* %2, align 8
  br label %289

240:                                              ; preds = %237
  %241 = load i64, i64* %1, align 8
  store i64 %241, i64* %2, align 8
  %242 = load i16, i16* %30, align 8
  %243 = icmp eq i16 %242, 0
  br i1 %243, label %289, label %244

244:                                              ; preds = %240, %284
  %245 = phi i32 [ %285, %284 ], [ 0, %240 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %31) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 56, i1 false)
  %246 = load i64, i64* %1, align 8
  %247 = load i64, i64* %32, align 8
  %248 = zext i32 %245 to i64
  %249 = mul nuw nsw i64 %248, 56
  %250 = add i64 %246, %249
  %251 = add i64 %250, %247
  br label %252

252:                                              ; preds = %266, %244
  %253 = phi i64 [ %268, %266 ], [ 0, %244 ]
  %254 = icmp ult i64 %253, 56
  br i1 %254, label %255, label %269

255:                                              ; preds = %252
  %256 = getelementptr inbounds i8, i8* %31, i64 %253
  %257 = sub nuw nsw i64 56, %253
  %258 = add i64 %251, %253
  br label %259

259:                                              ; preds = %262, %255
  %260 = call i64 @pread64(i32 %18, i8* %256, i64 %257, i64 %258) #13
  %261 = icmp slt i64 %260, 0
  br i1 %261, label %262, label %266

262:                                              ; preds = %259
  %263 = tail call i32* @__errno_location() #14
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 4
  br i1 %265, label %259, label %284

266:                                              ; preds = %259
  %267 = icmp eq i64 %260, 0
  %268 = add nsw i64 %260, %253
  br i1 %267, label %269, label %252

269:                                              ; preds = %266, %252
  %270 = icmp ugt i64 %253, 56
  br i1 %270, label %271, label %272

271:                                              ; preds = %269
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

272:                                              ; preds = %269
  %273 = icmp eq i64 %253, 56
  %274 = load i32, i32* %33, align 8
  %275 = icmp eq i32 %274, 1
  %276 = and i1 %273, %275
  %277 = load i64, i64* %34, align 8
  %278 = icmp eq i64 %277, 0
  %279 = and i1 %276, %278
  br i1 %279, label %280, label %284

280:                                              ; preds = %272
  %281 = load i64, i64* %1, align 8
  %282 = load i64, i64* %35, align 8
  %283 = sub i64 %281, %282
  store i64 %283, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %31) #13
  br label %289

284:                                              ; preds = %262, %272
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %31) #13
  %285 = add i32 %245, 1
  %286 = load i16, i16* %30, align 8
  %287 = zext i16 %286 to i32
  %288 = icmp eq i32 %285, %287
  br i1 %288, label %289, label %244

289:                                              ; preds = %284, %222, %240, %280, %239, %237, %232, %209
  %290 = load i64, i64* %1, align 8
  %291 = icmp ule i64 %290, %0
  %292 = icmp ugt i64 %182, %0
  %293 = and i1 %292, %291
  br i1 %293, label %294, label %356

294:                                              ; preds = %289
  %295 = load i8, i8* %192, align 1
  %296 = icmp eq i8 %295, 114
  br i1 %296, label %297, label %356

297:                                              ; preds = %294
  %298 = getelementptr inbounds i8, i8* %183, i64 3
  %299 = load i8, i8* %298, align 1
  %300 = icmp eq i8 %299, 120
  br i1 %300, label %301, label %356

301:                                              ; preds = %297
  %302 = getelementptr inbounds i8, i8* %205, i64 1
  %303 = icmp ult i8* %302, %125
  br i1 %303, label %304, label %313

304:                                              ; preds = %301, %310
  %305 = phi i8* [ %311, %310 ], [ %302, %301 ]
  %306 = load i8, i8* %305, align 1
  %307 = add i8 %306, -48
  %308 = icmp ult i8 %307, 10
  br i1 %308, label %310, label %309

309:                                              ; preds = %304
  switch i8 %306, label %313 [
    i8 102, label %310
    i8 101, label %310
    i8 100, label %310
    i8 99, label %310
    i8 98, label %310
    i8 97, label %310
    i8 70, label %310
    i8 69, label %310
    i8 68, label %310
    i8 67, label %310
    i8 66, label %310
    i8 65, label %310
  ]

310:                                              ; preds = %309, %309, %309, %309, %309, %309, %309, %309, %309, %309, %309, %309, %304
  %311 = getelementptr inbounds i8, i8* %305, i64 1
  %312 = icmp eq i8* %311, %125
  br i1 %312, label %354, label %304

313:                                              ; preds = %309, %301
  %314 = phi i8* [ %302, %301 ], [ %305, %309 ]
  %315 = icmp ugt i8* %314, %125
  br i1 %315, label %316, label %317

316:                                              ; preds = %313
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

317:                                              ; preds = %313
  %318 = icmp eq i8* %314, %125
  br i1 %318, label %354, label %319

319:                                              ; preds = %317
  %320 = load i8, i8* %314, align 1
  %321 = icmp eq i8 %320, 32
  br i1 %321, label %322, label %354

322:                                              ; preds = %319
  %323 = getelementptr inbounds i8, i8* %314, i64 1
  %324 = icmp ult i8* %323, %125
  br i1 %324, label %325, label %338

325:                                              ; preds = %322, %334
  %326 = phi i8* [ %336, %334 ], [ %323, %322 ]
  %327 = phi i32 [ %335, %334 ], [ 0, %322 ]
  %328 = load i8, i8* %326, align 1
  %329 = icmp eq i8 %328, 32
  br i1 %329, label %330, label %332

330:                                              ; preds = %325
  %331 = add nsw i32 %327, 1
  br label %334

332:                                              ; preds = %325
  %333 = icmp sgt i32 %327, 1
  br i1 %333, label %338, label %334

334:                                              ; preds = %332, %330
  %335 = phi i32 [ %331, %330 ], [ %327, %332 ]
  %336 = getelementptr inbounds i8, i8* %326, i64 1
  %337 = icmp eq i8* %336, %125
  br i1 %337, label %354, label %325

338:                                              ; preds = %332, %322
  %339 = phi i8* [ %323, %322 ], [ %326, %332 ]
  %340 = icmp eq i8* %339, %125
  br i1 %340, label %354, label %341

341:                                              ; preds = %338, %344
  %342 = call i32 (i8*, i32, ...) @open64(i8* %339, i32 0) #13
  %343 = icmp slt i32 %342, 0
  br i1 %343, label %344, label %354

344:                                              ; preds = %341
  %345 = tail call i32* @__errno_location() #14
  %346 = load i32, i32* %345, align 4
  %347 = icmp eq i32 %346, 4
  br i1 %347, label %341, label %348

348:                                              ; preds = %344
  %349 = sext i32 %4 to i64
  %350 = call i8* @strncpy(i8* %3, i8* %339, i64 %349) #13
  %351 = add nsw i32 %4, -1
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %3, i64 %352
  store i8 0, i8* %353, align 1
  br label %354

354:                                              ; preds = %310, %334, %341, %348, %338, %317, %319
  %355 = phi i32 [ -1, %338 ], [ -1, %348 ], [ -1, %317 ], [ -1, %319 ], [ %342, %341 ], [ -1, %334 ], [ -1, %310 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #13
  br label %357

356:                                              ; preds = %289, %297, %294
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #13
  br label %36

357:                                              ; preds = %191, %118, %111, %65, %203, %186, %188, %154, %156, %138, %170, %101, %55, %354
  %358 = phi i32 [ %355, %354 ], [ -1, %55 ], [ -1, %101 ], [ -1, %170 ], [ -1, %138 ], [ -1, %156 ], [ -1, %154 ], [ -1, %188 ], [ -1, %186 ], [ -1, %203 ], [ -1, %65 ], [ -1, %111 ], [ -1, %118 ], [ -1, %191 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #13
  %359 = icmp sgt i32 %18, -1
  br i1 %359, label %360, label %362

360:                                              ; preds = %357
  %361 = call i32 @close(i32 %18) #13
  br label %362

362:                                              ; preds = %20, %360, %357
  %363 = phi i32 [ %358, %357 ], [ %358, %360 ], [ -1, %20 ]
  %364 = icmp sgt i32 %11, -1
  br i1 %364, label %365, label %367

365:                                              ; preds = %362
  %366 = call i32 @close(i32 %11) #13
  br label %367

367:                                              ; preds = %13, %362, %365
  %368 = phi i32 [ %363, %362 ], [ %363, %365 ], [ -1, %13 ]
  ret i32 %368
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6googleL19SafeAppendHexNumberEmPci(i64, i8*, i32) unnamed_addr #1 {
  %4 = alloca [17 x i8], align 16
  %5 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %5) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 17, i1 false)
  br label %6

6:                                                ; preds = %13, %3
  %7 = phi i64 [ 1, %3 ], [ %14, %13 ]
  %8 = phi i64 [ %0, %3 ], [ %19, %13 ]
  %9 = phi i64 [ 0, %3 ], [ %18, %13 ]
  %10 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 %9
  %11 = icmp eq i64 %7, 17
  br i1 %11, label %12, label %13

12:                                               ; preds = %6
  store i8 0, i8* %5, align 16
  br label %37

13:                                               ; preds = %6
  %14 = add nuw nsw i64 %7, 1
  %15 = and i64 %8, 15
  %16 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = add nuw nsw i64 %9, 1
  store i8 %17, i8* %10, align 1
  %19 = lshr i64 %8, 4
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %6

21:                                               ; preds = %13
  %22 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 %18
  store i8 0, i8* %22, align 1
  %23 = icmp eq i64 %9, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %21
  %25 = load i8, i8* %5, align 16
  store i8 %25, i8* %10, align 1
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 1
  store i8 %17, i8* %5, align 16
  %27 = getelementptr inbounds i8, i8* %10, i64 -1
  %28 = icmp ugt i8* %27, %26
  br i1 %28, label %29, label %37

29:                                               ; preds = %24, %29
  %30 = phi i8* [ %35, %29 ], [ %27, %24 ]
  %31 = phi i8* [ %34, %29 ], [ %26, %24 ]
  %32 = load i8, i8* %30, align 1
  %33 = load i8, i8* %31, align 1
  store i8 %33, i8* %30, align 1
  %34 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 %32, i8* %31, align 1
  %35 = getelementptr inbounds i8, i8* %30, i64 -1
  %36 = icmp ugt i8* %35, %34
  br i1 %36, label %29, label %37

37:                                               ; preds = %29, %24, %21, %12
  %38 = phi i8* [ null, %12 ], [ %5, %21 ], [ %5, %24 ], [ %5, %29 ]
  %39 = call i64 @strlen(i8* %1) #16
  %40 = trunc i64 %39 to i32
  %41 = icmp slt i32 %40, %2
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

43:                                               ; preds = %37
  %44 = shl i64 %39, 32
  %45 = ashr exact i64 %44, 32
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = sub nsw i32 %2, %40
  %48 = sext i32 %47 to i64
  %49 = call i8* @strncpy(i8* %46, i8* %38, i64 %48) #13
  %50 = add nsw i32 %47, -1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %46, i64 %51
  store i8 0, i8* %52, align 1
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %5) #13
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN6googleL15DemangleInplaceEPci(i8*, i32) unnamed_addr #4 {
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 256, i1 false)
  %5 = call zeroext i1 @_ZN6google8DemangleEPKcPci(i8* %0, i8* nonnull %4, i32 256) #13
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = call i64 @strlen(i8* nonnull %4) #16
  %8 = add i64 %7, 1
  %9 = sext i32 %1 to i64
  %10 = icmp ugt i64 %8, %9
  br i1 %10, label %15, label %11

11:                                               ; preds = %6
  %12 = icmp ult i64 %7, 256
  br i1 %12, label %14, label %13

13:                                               ; preds = %11
  call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

14:                                               ; preds = %11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* nonnull align 16 %4, i64 %8, i1 false)
  br label %15

15:                                               ; preds = %14, %6, %2
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %4) #13
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #9

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #11

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN6googleL22GetSectionHeaderByTypeEitljP10Elf64_Shdr(i32, i16 zeroext, i64, i32, %struct.Elf64_Shdr* nocapture) unnamed_addr #4 {
  %6 = alloca [16 x %struct.Elf64_Shdr], align 16
  %7 = bitcast [16 x %struct.Elf64_Shdr]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 1024, i1 false)
  %8 = zext i16 %1 to i32
  %9 = icmp eq i16 %1, 0
  br i1 %9, label %71, label %10

10:                                               ; preds = %5
  %11 = icmp sgt i32 %0, -1
  br i1 %11, label %12, label %22

12:                                               ; preds = %10, %67
  %13 = phi i32 [ %69, %67 ], [ 0, %10 ]
  %14 = sub nsw i32 %8, %13
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 6
  %17 = icmp ult i64 %16, 1024
  %18 = select i1 %17, i64 %16, i64 1024
  %19 = sext i32 %13 to i64
  %20 = shl nsw i64 %19, 6
  %21 = add i64 %20, %2
  br label %23

22:                                               ; preds = %10
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

23:                                               ; preds = %12, %37
  %24 = phi i64 [ %39, %37 ], [ 0, %12 ]
  %25 = icmp ugt i64 %18, %24
  br i1 %25, label %26, label %40

26:                                               ; preds = %23
  %27 = getelementptr inbounds i8, i8* %7, i64 %24
  %28 = sub i64 %18, %24
  %29 = add nsw i64 %21, %24
  br label %30

30:                                               ; preds = %33, %26
  %31 = call i64 @pread64(i32 %0, i8* %27, i64 %28, i64 %29) #13
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %30
  %34 = tail call i32* @__errno_location() #14
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 4
  br i1 %36, label %30, label %71

37:                                               ; preds = %30
  %38 = icmp eq i64 %31, 0
  %39 = add nsw i64 %31, %24
  br i1 %38, label %40, label %23

40:                                               ; preds = %37, %23
  %41 = icmp ult i64 %18, %24
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

43:                                               ; preds = %40
  %44 = icmp eq i64 %24, -1
  br i1 %44, label %71, label %45

45:                                               ; preds = %43
  %46 = and i64 %24, 63
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

49:                                               ; preds = %45
  %50 = lshr i64 %24, 6
  %51 = icmp ult i64 %24, 1088
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = icmp eq i64 %50, 0
  br i1 %53, label %67, label %57

54:                                               ; preds = %49
  call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

55:                                               ; preds = %57
  %56 = icmp eq i64 %62, %50
  br i1 %56, label %67, label %57

57:                                               ; preds = %52, %55
  %58 = phi i64 [ %62, %55 ], [ 0, %52 ]
  %59 = getelementptr inbounds [16 x %struct.Elf64_Shdr], [16 x %struct.Elf64_Shdr]* %6, i64 0, i64 %58, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, %3
  %62 = add nuw nsw i64 %58, 1
  br i1 %61, label %63, label %55

63:                                               ; preds = %57
  %64 = getelementptr inbounds [16 x %struct.Elf64_Shdr], [16 x %struct.Elf64_Shdr]* %6, i64 0, i64 %58
  %65 = bitcast %struct.Elf64_Shdr* %4 to i8*
  %66 = bitcast %struct.Elf64_Shdr* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 16 %66, i64 64, i1 false)
  br label %71

67:                                               ; preds = %55, %52
  %68 = trunc i64 %50 to i32
  %69 = add i32 %13, %68
  %70 = icmp slt i32 %69, %8
  br i1 %70, label %12, label %71

71:                                               ; preds = %43, %67, %33, %5, %63
  %72 = phi i1 [ true, %63 ], [ false, %5 ], [ false, %33 ], [ false, %67 ], [ false, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #13
  ret i1 %72
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN6googleL10FindSymbolEmiPcimPK10Elf64_ShdrS3_(i64, i32, i8*, i32, i64, %struct.Elf64_Shdr* nocapture readonly, %struct.Elf64_Shdr* readonly) unnamed_addr #4 {
  %8 = alloca [32 x %struct.Elf64_Sym], align 16
  %9 = icmp eq %struct.Elf64_Shdr* %6, null
  br i1 %9, label %129, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %6, i64 0, i32 5
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %6, i64 0, i32 9
  %14 = load i64, i64* %13, align 8
  %15 = udiv i64 %12, %14
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %6, i64 0, i32 4
  %18 = bitcast [32 x %struct.Elf64_Sym]* %8 to i8*
  %19 = icmp sgt i32 %1, -1
  %20 = sext i32 %3 to i64
  %21 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %5, i64 0, i32 4
  %22 = icmp slt i32 %3, 0
  %23 = icmp sgt i32 %16, 0
  br i1 %23, label %24, label %129

24:                                               ; preds = %10, %125
  %25 = phi i32 [ %127, %125 ], [ 0, %10 ]
  %26 = load i64, i64* %17, align 8
  %27 = sext i32 %25 to i64
  %28 = load i64, i64* %13, align 8
  %29 = mul i64 %28, %27
  %30 = add i64 %29, %26
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %18) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 768, i1 false)
  %31 = sub nsw i32 %16, %25
  %32 = icmp slt i32 %31, 32
  %33 = select i1 %32, i32 %31, i32 32
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %34, 24
  br i1 %19, label %37, label %36

36:                                               ; preds = %24
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

37:                                               ; preds = %24
  %38 = icmp slt i32 %33, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

40:                                               ; preds = %37, %54
  %41 = phi i64 [ %56, %54 ], [ 0, %37 ]
  %42 = icmp ugt i64 %35, %41
  br i1 %42, label %43, label %57

43:                                               ; preds = %40
  %44 = getelementptr inbounds i8, i8* %18, i64 %41
  %45 = sub i64 %35, %41
  %46 = add nsw i64 %30, %41
  br label %47

47:                                               ; preds = %50, %43
  %48 = call i64 @pread64(i32 %1, i8* %44, i64 %45, i64 %46) #13
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = tail call i32* @__errno_location() #14
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 4
  br i1 %53, label %47, label %64

54:                                               ; preds = %47
  %55 = icmp eq i64 %48, 0
  %56 = add nsw i64 %48, %41
  br i1 %55, label %57, label %40

57:                                               ; preds = %54, %40
  %58 = icmp ult i64 %35, %41
  br i1 %58, label %59, label %60

59:                                               ; preds = %57
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

60:                                               ; preds = %57
  %61 = urem i64 %41, 24
  %62 = udiv i64 %41, 24
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %60, %50
  call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

65:                                               ; preds = %60
  %66 = icmp sgt i64 %62, %34
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = icmp ugt i64 %41, 23
  br i1 %68, label %70, label %125

69:                                               ; preds = %65
  call fastcc void @_ZN6googleL10AssertFailEv()
  unreachable

70:                                               ; preds = %67, %120
  %71 = phi i64 [ %121, %120 ], [ 0, %67 ]
  %72 = getelementptr inbounds [32 x %struct.Elf64_Sym], [32 x %struct.Elf64_Sym]* %8, i64 0, i64 %71, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, %4
  %75 = icmp eq i64 %73, 0
  br i1 %75, label %120, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds [32 x %struct.Elf64_Sym], [32 x %struct.Elf64_Sym]* %8, i64 0, i64 %71, i32 5
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, %74
  %80 = getelementptr inbounds [32 x %struct.Elf64_Sym], [32 x %struct.Elf64_Sym]* %8, i64 0, i64 %71, i32 3
  %81 = load i16, i16* %80, align 2
  %82 = icmp ne i16 %81, 0
  %83 = icmp ule i64 %74, %0
  %84 = and i1 %83, %82
  %85 = icmp ugt i64 %79, %0
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %120

87:                                               ; preds = %76
  %88 = load i64, i64* %21, align 8
  %89 = getelementptr inbounds [32 x %struct.Elf64_Sym], [32 x %struct.Elf64_Sym]* %8, i64 0, i64 %71, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = zext i32 %90 to i64
  %92 = add i64 %88, %91
  br i1 %22, label %93, label %94

93:                                               ; preds = %87
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

94:                                               ; preds = %87, %108
  %95 = phi i64 [ %110, %108 ], [ 0, %87 ]
  %96 = icmp ult i64 %95, %20
  br i1 %96, label %97, label %111

97:                                               ; preds = %94
  %98 = getelementptr inbounds i8, i8* %2, i64 %95
  %99 = sub i64 %20, %95
  %100 = add nsw i64 %92, %95
  br label %101

101:                                              ; preds = %104, %97
  %102 = call i64 @pread64(i32 %1, i8* %98, i64 %99, i64 %100) #13
  %103 = icmp slt i64 %102, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %101
  %105 = tail call i32* @__errno_location() #14
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 4
  br i1 %107, label %101, label %119

108:                                              ; preds = %101
  %109 = icmp eq i64 %102, 0
  %110 = add nsw i64 %102, %95
  br i1 %109, label %111, label %94

111:                                              ; preds = %108, %94
  %112 = icmp ugt i64 %95, %20
  br i1 %112, label %113, label %114

113:                                              ; preds = %111
  call fastcc void @_ZN6googleL10AssertFailEv() #13
  unreachable

114:                                              ; preds = %111
  %115 = icmp slt i64 %95, 1
  br i1 %115, label %119, label %116

116:                                              ; preds = %114
  %117 = call i8* @memchr(i8* %2, i32 0, i64 %20) #16
  %118 = icmp eq i8* %117, null
  br i1 %118, label %119, label %123

119:                                              ; preds = %104, %116, %114
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %20, i1 false)
  br label %123

120:                                              ; preds = %76, %70
  %121 = add nuw nsw i64 %71, 1
  %122 = icmp ugt i64 %62, %121
  br i1 %122, label %70, label %125

123:                                              ; preds = %119, %116
  %124 = phi i1 [ true, %116 ], [ false, %119 ]
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %18) #13
  br label %129

125:                                              ; preds = %120, %67
  %126 = trunc i64 %62 to i32
  %127 = add i32 %25, %126
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %18) #13
  %128 = icmp slt i32 %127, %16
  br i1 %128, label %24, label %129

129:                                              ; preds = %125, %10, %123, %7
  %130 = phi i1 [ false, %7 ], [ %124, %123 ], [ false, %10 ], [ false, %125 ]
  ret i1 %130
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZN6google8DemangleEPKcPci(i8*, i8*, i32) local_unnamed_addr #5

declare i32 @close(i32) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
