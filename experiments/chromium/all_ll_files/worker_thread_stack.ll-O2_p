; ModuleID = '../../base/task/thread_pool/worker_thread_stack.cc'
source_filename = "../../base/task/thread_pool/worker_thread_stack.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::WorkerThreadStack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"**, %"class.std::__1::__compressed_pair.12" }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe", [4 x i8], %class.scoped_refptr, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.1, i8, [7 x i8] }>
%class.scoped_refptr.1 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.2", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%"class.base::internal::TaskTracker" = type opaque
%"class.base::internal::TrackedRefFactory" = type opaque
%"class.base::WorkerThreadObserver" = type opaque
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.base::internal::WorkerThread"** }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN4base8internal17WorkerThreadStackC1Ev = hidden unnamed_addr alias void (%"class.base::internal::WorkerThreadStack"*), void (%"class.base::internal::WorkerThreadStack"*)* @_ZN4base8internal17WorkerThreadStackC2Ev
@_ZN4base8internal17WorkerThreadStackD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WorkerThreadStack"*), void (%"class.base::internal::WorkerThreadStack"*)* @_ZN4base8internal17WorkerThreadStackD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal17WorkerThreadStackC2Ev(%"class.base::internal::WorkerThreadStack"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.base::internal::WorkerThreadStack"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal17WorkerThreadStackD2Ev(%"class.base::internal::WorkerThreadStack"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %2, align 8
  %4 = icmp eq %"class.base::internal::WorkerThread"** %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.base::internal::WorkerThread"** %3 to i64
  %7 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.base::internal::WorkerThread"*** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.base::internal::WorkerThread"** %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal17WorkerThreadStack4PushEPNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.base::internal::WorkerThread"* %1 to i64
  %4 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %6, align 8
  %8 = icmp eq %"class.base::internal::WorkerThread"** %5, %7
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %7, i64 -1
  %11 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %10, align 8
  tail call void @_ZN4base8internal12WorkerThread17BeginUnusedPeriodEv(%"class.base::internal::WorkerThread"* %11) #8
  %12 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %6, align 8
  br label %13

13:                                               ; preds = %9, %2
  %14 = phi %"class.base::internal::WorkerThread"** [ %12, %9 ], [ %5, %2 ]
  %15 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %15, align 8
  %17 = icmp eq %"class.base::internal::WorkerThread"** %14, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = bitcast %"class.base::internal::WorkerThread"** %14 to i64*
  store i64 %3, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %14, i64 1
  %21 = ptrtoint %"class.base::internal::WorkerThread"** %20 to i64
  %22 = bitcast %"class.base::internal::WorkerThread"*** %6 to i64*
  store i64 %21, i64* %22, align 8
  br label %77

23:                                               ; preds = %13
  %24 = ptrtoint %"class.base::internal::WorkerThread"** %16 to i64
  %25 = bitcast %"class.base::internal::WorkerThread"*** %6 to i64*
  %26 = bitcast %"class.base::internal::WorkerThreadStack"* %0 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %24, %27
  %29 = ashr exact i64 %28, 3
  %30 = add nsw i64 %29, 1
  %31 = icmp ugt i64 %30, 2305843009213693951
  br i1 %31, label %32, label %34

32:                                               ; preds = %23
  %33 = bitcast %"class.base::internal::WorkerThreadStack"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %33) #10
  unreachable

34:                                               ; preds = %23
  %35 = bitcast %"class.base::internal::WorkerThread"*** %15 to i64*
  %36 = icmp ult i64 %29, 1152921504606846975
  br i1 %36, label %37, label %45

37:                                               ; preds = %34
  %38 = ashr exact i64 %28, 2
  %39 = icmp ult i64 %38, %30
  %40 = select i1 %39, i64 %30, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = icmp ugt i64 %40, 2305843009213693951
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #10
  unreachable

45:                                               ; preds = %42, %34
  %46 = phi i64 [ %40, %42 ], [ 2305843009213693951, %34 ]
  %47 = shl i64 %46, 3
  %48 = tail call i8* @_Znwm(i64 %47) #9
  %49 = bitcast i8* %48 to %"class.base::internal::WorkerThread"**
  br label %50

50:                                               ; preds = %45, %37
  %51 = phi i64 [ %46, %45 ], [ 0, %37 ]
  %52 = phi %"class.base::internal::WorkerThread"** [ %49, %45 ], [ null, %37 ]
  %53 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %52, i64 %29
  %54 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %52, i64 %51
  %55 = ptrtoint %"class.base::internal::WorkerThread"** %54 to i64
  %56 = bitcast %"class.base::internal::WorkerThread"** %53 to i64*
  store i64 %3, i64* %56, align 8
  %57 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %53, i64 1
  %58 = ptrtoint %"class.base::internal::WorkerThread"** %57 to i64
  %59 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %4, align 8
  %60 = load i64, i64* %25, align 8
  %61 = ptrtoint %"class.base::internal::WorkerThread"** %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 3
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %53, i64 %64
  %66 = ptrtoint %"class.base::internal::WorkerThread"** %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %50
  %69 = bitcast %"class.base::internal::WorkerThread"** %65 to i8*
  %70 = bitcast %"class.base::internal::WorkerThread"** %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 %62, i1 false) #8
  %71 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %4, align 8
  br label %72

72:                                               ; preds = %68, %50
  %73 = phi %"class.base::internal::WorkerThread"** [ %59, %50 ], [ %71, %68 ]
  store i64 %66, i64* %26, align 8
  store i64 %58, i64* %25, align 8
  store i64 %55, i64* %35, align 8
  %74 = icmp eq %"class.base::internal::WorkerThread"** %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.base::internal::WorkerThread"** %73 to i8*
  tail call void @_ZdlPv(i8* %76) #9
  br label %77

77:                                               ; preds = %18, %72, %75
  ret void
}

declare void @_ZN4base8internal12WorkerThread17BeginUnusedPeriodEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::internal::WorkerThread"* @_ZN4base8internal17WorkerThreadStack3PopEv(%"class.base::internal::WorkerThreadStack"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %4, align 8
  %6 = icmp eq %"class.base::internal::WorkerThread"** %3, %5
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %5, i64 -1
  %9 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %8, align 8
  store %"class.base::internal::WorkerThread"** %8, %"class.base::internal::WorkerThread"*** %4, align 8
  %10 = icmp eq %"class.base::internal::WorkerThread"** %3, %8
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %5, i64 -2
  %13 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %12, align 8
  tail call void @_ZN4base8internal12WorkerThread15EndUnusedPeriodEv(%"class.base::internal::WorkerThread"* %13) #8
  br label %14

14:                                               ; preds = %7, %11, %1
  %15 = phi %"class.base::internal::WorkerThread"* [ null, %1 ], [ %9, %11 ], [ %9, %7 ]
  ret %"class.base::internal::WorkerThread"* %15
}

declare void @_ZN4base8internal12WorkerThread15EndUnusedPeriodEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.base::internal::WorkerThread"* @_ZNK4base8internal17WorkerThreadStack4PeekEv(%"class.base::internal::WorkerThreadStack"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %4, align 8
  %6 = icmp eq %"class.base::internal::WorkerThread"** %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %5, i64 -1
  %9 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %8, align 8
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi %"class.base::internal::WorkerThread"* [ %9, %7 ], [ null, %1 ]
  ret %"class.base::internal::WorkerThread"* %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal17WorkerThreadStack8ContainsEPKNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* nocapture readonly, %"class.base::internal::WorkerThread"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %5, align 8
  %7 = icmp eq %"class.base::internal::WorkerThread"** %4, %6
  br i1 %7, label %15, label %8

8:                                                ; preds = %2, %12
  %9 = phi %"class.base::internal::WorkerThread"** [ %13, %12 ], [ %4, %2 ]
  %10 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %9, align 8
  %11 = icmp eq %"class.base::internal::WorkerThread"* %10, %1
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %9, i64 1
  %14 = icmp eq %"class.base::internal::WorkerThread"** %13, %6
  br i1 %14, label %15, label %8

15:                                               ; preds = %8, %12, %2
  %16 = phi %"class.base::internal::WorkerThread"** [ %4, %2 ], [ %6, %12 ], [ %9, %8 ]
  %17 = icmp ne %"class.base::internal::WorkerThread"** %16, %6
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal17WorkerThreadStack6RemoveEPKNS0_12WorkerThreadE(%"class.base::internal::WorkerThreadStack"* nocapture, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WorkerThreadStack", %"class.base::internal::WorkerThreadStack"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.base::internal::WorkerThread"**, %"class.base::internal::WorkerThread"*** %5, align 8
  %7 = icmp eq %"class.base::internal::WorkerThread"** %4, %6
  %8 = ptrtoint %"class.base::internal::WorkerThread"** %6 to i64
  br i1 %7, label %16, label %9

9:                                                ; preds = %2, %13
  %10 = phi %"class.base::internal::WorkerThread"** [ %14, %13 ], [ %4, %2 ]
  %11 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %10, align 8
  %12 = icmp eq %"class.base::internal::WorkerThread"* %11, %1
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %10, i64 1
  %15 = icmp eq %"class.base::internal::WorkerThread"** %14, %6
  br i1 %15, label %16, label %9

16:                                               ; preds = %9, %13, %2
  %17 = phi %"class.base::internal::WorkerThread"** [ %4, %2 ], [ %6, %13 ], [ %10, %9 ]
  %18 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %17, i64 1
  %19 = ptrtoint %"class.base::internal::WorkerThread"** %18 to i64
  %20 = sub i64 %8, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = bitcast %"class.base::internal::WorkerThread"** %17 to i8*
  %25 = bitcast %"class.base::internal::WorkerThread"** %18 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 %20, i1 false) #8
  br label %26

26:                                               ; preds = %16, %23
  %27 = getelementptr inbounds %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %17, i64 %21
  store %"class.base::internal::WorkerThread"** %27, %"class.base::internal::WorkerThread"*** %5, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
