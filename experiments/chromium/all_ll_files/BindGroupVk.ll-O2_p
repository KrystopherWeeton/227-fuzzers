; ModuleID = '../../third_party/dawn/src/dawn_native/vulkan/BindGroupVk.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/vulkan/BindGroupVk.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dawn_native::vulkan::BindGroup" = type { %"class.dawn_native::BindGroupBase", %"struct.dawn_native::vulkan::DescriptorSetAllocation" }
%"class.dawn_native::BindGroupBase" = type { %"class.dawn_native::ObjectBase", %class.Ref.8, %"struct.dawn_native::BindGroupLayoutBase::BindingDataPointers" }
%"class.dawn_native::ObjectBase" = type { %class.RefCounted, %"class.dawn_native::DeviceBase"* }
%class.RefCounted = type { i32 (...)**, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.dawn_native::DeviceBase" = type { %class.RefCounted, i64, i64, i64, void (i32, i8*, i8*)*, i8*, void (i8*, i8*)*, i8*, %"class.std::__1::unique_ptr", %class.Ref, %"class.dawn_native::AdapterBase"*, %"class.std::__1::unique_ptr.2", %class.Ref.8, %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", %class.Ref.33, %"class.std::__1::unique_ptr.35", i32, %"struct.std::__1::array.41", %"struct.dawn_native::TogglesSet", %"struct.dawn_native::TogglesSet", i64, %"struct.dawn_native::ExtensionsSet", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.51" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dawn_native::ErrorScopeStack"* }
%"class.dawn_native::ErrorScopeStack" = type opaque
%class.Ref = type { %class.RefBase }
%class.RefBase = type { %"class.dawn_native::InstanceBase"* }
%"class.dawn_native::InstanceBase" = type opaque
%"class.dawn_native::AdapterBase" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dawn_native::DeviceBase::Caches"* }
%"struct.dawn_native::DeviceBase::Caches" = type opaque
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.dawn_native::DynamicUploader"* }
%"class.dawn_native::DynamicUploader" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.dawn_native::CallbackTaskManager"* }
%"class.dawn_native::CallbackTaskManager" = type opaque
%class.Ref.33 = type { %class.RefBase.34 }
%class.RefBase.34 = type { %"class.dawn_native::QueueBase"* }
%"class.dawn_native::QueueBase" = type opaque
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.dawn_native::DeviceBase::DeprecationWarnings"* }
%"struct.dawn_native::DeviceBase::DeprecationWarnings" = type opaque
%"struct.std::__1::array.41" = type { [55 x %"struct.dawn_native::Format"] }
%"struct.dawn_native::Format" = type { i32, i8, i8, i8, i8, i8, %"struct.std::__1::array.42" }
%"struct.std::__1::array.42" = type { [3 x %"struct.dawn_native::AspectInfo"] }
%"struct.dawn_native::AspectInfo" = type { %"struct.dawn_native::TexelBlockInfo", i32, i8, i32 }
%"struct.dawn_native::TexelBlockInfo" = type { i32, i32, i32 }
%"struct.dawn_native::TogglesSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.dawn_native::ExtensionsSet" = type { %"class.std::__1::bitset.43" }
%"class.std::__1::bitset.43" = type { %"class.std::__1::__bitset.44" }
%"class.std::__1::__bitset.44" = type { i64 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.dawn_native::InternalPipelineStore"* }
%"struct.dawn_native::InternalPipelineStore" = type opaque
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.dawn_native::PersistentCache"* }
%"class.dawn_native::PersistentCache" = type opaque
%class.Ref.8 = type { %class.RefBase.9 }
%class.RefBase.9 = type { %"class.dawn_native::BindGroupLayoutBase"* }
%"class.dawn_native::BindGroupLayoutBase" = type { %"class.dawn_native::CachedObject.base", %"struct.dawn_native::BindingCounts", %"class.ityp::vector", %"class.std::__1::map" }
%"class.dawn_native::CachedObject.base" = type <{ %"class.dawn_native::ObjectBase", i8, [7 x i8], i64, i8 }>
%"struct.dawn_native::BindingCounts" = type { i32, i32, i32, i32, i32, %"class.dawn_native::PerStage" }
%"class.dawn_native::PerStage" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [3 x %"struct.dawn_native::PerStageBindingCounts"] }
%"struct.dawn_native::PerStageBindingCounts" = type { i32, i32, i32, i32, i32 }
%"class.ityp::vector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.dawn_native::BindingInfo"*, %"struct.dawn_native::BindingInfo"*, %"class.std::__1::__compressed_pair.10" }
%"struct.dawn_native::BindingInfo" = type { i32, i32, i32, %"struct.dawn_native::BufferBindingLayout", %"struct.dawn_native::SamplerBindingLayout", %"struct.dawn_native::TextureBindingLayout", %"struct.dawn_native::StorageTextureBindingLayout" }
%"struct.dawn_native::BufferBindingLayout" = type { %"struct.dawn_native::ChainedStruct"*, i32, i8, i64 }
%"struct.dawn_native::ChainedStruct" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, [4 x i8] }>
%"struct.dawn_native::SamplerBindingLayout" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, [4 x i8] }>
%"struct.dawn_native::TextureBindingLayout" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, i32, i8, [7 x i8] }>
%"struct.dawn_native::StorageTextureBindingLayout" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.dawn_native::BindingInfo"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.13", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i64 }
%"struct.dawn_native::BindGroupLayoutBase::BindingDataPointers" = type { %"class.ityp::span", %"class.ityp::span.345", %"class.ityp::span.349" }
%"class.ityp::span" = type <{ %"struct.dawn_native::BindGroupLayoutBase::BufferBindingData"*, i32, [4 x i8] }>
%"struct.dawn_native::BindGroupLayoutBase::BufferBindingData" = type { i64, i64 }
%"class.ityp::span.345" = type <{ %class.Ref.346*, i32, [4 x i8] }>
%class.Ref.346 = type { %class.RefBase.347 }
%class.RefBase.347 = type { %"class.dawn_native::ObjectBase"* }
%"class.ityp::span.349" = type <{ i64*, i32, [4 x i8] }>
%"struct.dawn_native::vulkan::DescriptorSetAllocation" = type <{ %"class.dawn_native::vulkan::detail::VkHandle.351", i32, i16, [2 x i8] }>
%"class.dawn_native::vulkan::detail::VkHandle.351" = type { %struct.VkDescriptorSet_T* }
%"class.dawn_native::vulkan::Device" = type { %"class.dawn_native::DeviceBase", %"struct.dawn_native::vulkan::VulkanFunctions", %"struct.dawn_native::vulkan::VulkanDeviceInfo", %struct.VkDevice_T*, i32, %struct.VkQueue_T*, i32, %class.SerialQueue, %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.250", %"class.std::__1::unique_ptr.256", %"class.std::__1::unique_ptr.262", %"class.std::__1::unique_ptr.268", %"class.std::__1::queue", %"class.std::__1::vector.284", %class.SerialQueue.291, %"class.std::__1::vector.301", %"struct.dawn_native::vulkan::CommandRecordingContext" }
%"struct.dawn_native::vulkan::VulkanFunctions" = type { void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i32*, %struct.VkLayerProperties*)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, i32 (i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, void ()* (%struct.VkDevice_T*, i8*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkQueue_T*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectNameInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectTagInfoEXT*)*, void (%struct.VkInstance_T*, i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, i32 (%struct.VkInstance_T*, %struct.VkXlibSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct._XDisplay*, i64)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)*, void (%struct.VkCommandBuffer_T*, float*)*, void (%struct.VkCommandBuffer_T*, float, float, float)*, void (%struct.VkCommandBuffer_T*, float, float)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, float)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)*, i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*)*, i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)*, void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkFence_T*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)*, i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*)*, i32 (%struct.VkCommandBuffer_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)*, i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryGetFdInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, i32, i32, %struct.VkMemoryFdPropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkImportSemaphoreFdInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreGetFdInfoKHR*, i32*)* }
%struct.VkInstance_T = type opaque
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkFormatProperties = type { i32, i32, i32 }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%struct.VkCommandBuffer_T = type opaque
%struct.VkDebugUtilsLabelEXT = type { i32, i8*, i8*, [4 x float] }
%struct.VkDebugUtilsMessengerCreateInfoEXT = type { i32, i8*, i32, i32, i32, i32 (i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*, i8*)*, i8* }
%struct.VkDebugUtilsMessengerCallbackDataEXT = type { i32, i8*, i32, i8*, i32, i8*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsObjectNameInfoEXT* }
%struct.VkDebugUtilsObjectNameInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkDebugUtilsMessengerEXT_T = type opaque
%struct.VkDebugUtilsObjectTagInfoEXT = type { i32, i8*, i32, i64, i64, i64, i8* }
%struct.VkSurfaceKHR_T = type opaque
%struct.VkSurfaceCapabilitiesKHR = type { i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkSurfaceFormatKHR = type { i32, i32 }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%struct.VkPhysicalDeviceExternalSemaphoreInfo = type { i32, i8*, i32 }
%struct.VkExternalSemaphoreProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%struct.VkXlibSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct._XDisplay*, i64 }
%struct._XDisplay = type opaque
%struct.VkXcbSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.xcb_connection_t*, i32 }
%struct.xcb_connection_t = type opaque
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorPool_T = type opaque
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%struct.VkRenderPass_T = type opaque
%struct.VkFramebuffer_T = type opaque
%struct.VkBuffer_T = type opaque
%struct.VkImage_T = type opaque
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%union.VkClearValue = type { %union.VkClearColorValue }
%union.VkClearColorValue = type { [4 x float] }
%struct.VkPipelineLayout_T = type opaque
%struct.VkPipeline_T = type opaque
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkClearDepthStencilValue = type { float, i32 }
%struct.VkBufferCopy = type { i64, i64, i64 }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkQueryPool_T = type opaque
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkEvent_T = type opaque
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineCache_T = type opaque
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkShaderModule_T = type opaque
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%struct.VkSampler_T = type opaque
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%struct.VkFence_T = type opaque
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkPushConstantRange = type { i32, i32, i32 }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%struct.VkSemaphore_T = type opaque
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%struct.VkSwapchainCreateInfoKHR = type { i32, i8*, i32, %struct.VkSurfaceKHR_T*, i32, i32, i32, %struct.VkExtent2D, i32, i32, i32, i32, i32*, i32, i32, i32, i32, %struct.VkSwapchainKHR_T* }
%struct.VkSwapchainKHR_T = type opaque
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%struct.VkMemoryGetFdInfoKHR = type { i32, i8*, %struct.VkDeviceMemory_T*, i32 }
%struct.VkMemoryFdPropertiesKHR = type { i32, i8*, i32 }
%struct.VkImportSemaphoreFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32, i32, i32 }
%struct.VkSemaphoreGetFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32 }
%"struct.dawn_native::vulkan::VulkanDeviceInfo" = type { %"struct.dawn_native::vulkan::VulkanDeviceKnobs", %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceDriverProperties, %struct.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, %"class.std::__1::vector.59", %"class.std::__1::vector.66", %"class.std::__1::vector.73", %"class.std::__1::vector.80" }
%"struct.dawn_native::vulkan::VulkanDeviceKnobs" = type { %struct.VkPhysicalDeviceFeatures, %struct.VkPhysicalDeviceShaderFloat16Int8Features, %struct.VkPhysicalDevice16BitStorageFeatures, %struct.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, %"class.ityp::bitset" }
%struct.VkPhysicalDeviceShaderFloat16Int8Features = type { i32, i8*, i32, i32 }
%struct.VkPhysicalDevice16BitStorageFeatures = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = type { i32, i8*, i32, i32 }
%"class.ityp::bitset" = type { %"class.std::__1::bitset.57" }
%"class.std::__1::bitset.57" = type { %"class.std::__1::__bitset.58" }
%"class.std::__1::__bitset.58" = type { i64 }
%struct.VkPhysicalDeviceDriverProperties = type { i32, i8*, i32, [256 x i8], [256 x i8], %struct.VkConformanceVersion }
%struct.VkConformanceVersion = type { i8, i8, i8, i8 }
%struct.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = type { i32, i8*, i32, i32, i32, i32 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %struct.VkQueueFamilyProperties* }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %struct.VkMemoryType*, %struct.VkMemoryType*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %struct.VkMemoryType* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %struct.VkMemoryHeap*, %struct.VkMemoryHeap*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %struct.VkMemoryHeap* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %struct.VkLayerProperties*, %struct.VkLayerProperties*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %struct.VkLayerProperties* }
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%class.SerialQueue = type { %class.SerialStorage }
%class.SerialStorage = type { %"class.std::__1::vector.87" }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.89" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.dawn_native::vulkan::FencedDeleter"* }
%"class.dawn_native::vulkan::FencedDeleter" = type { %"class.dawn_native::vulkan::Device"*, %class.SerialQueue.97, %class.SerialQueue.107, %class.SerialQueue.117, %class.SerialQueue.127, %class.SerialQueue.137, %class.SerialQueue.147, %class.SerialQueue.157, %class.SerialQueue.167, %class.SerialQueue.177, %class.SerialQueue.187, %class.SerialQueue.197, %class.SerialQueue.207, %class.SerialQueue.217, %class.SerialQueue.227, %class.SerialQueue.237 }
%class.SerialQueue.97 = type { %class.SerialStorage.98 }
%class.SerialStorage.98 = type { %"class.std::__1::vector.99" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"struct.std::__1::pair.101"*, %"struct.std::__1::pair.101"*, %"class.std::__1::__compressed_pair.102" }
%"struct.std::__1::pair.101" = type opaque
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.std::__1::pair.101"* }
%class.SerialQueue.107 = type { %class.SerialStorage.108 }
%class.SerialStorage.108 = type { %"class.std::__1::vector.109" }
%"class.std::__1::vector.109" = type { %"class.std::__1::__vector_base.110" }
%"class.std::__1::__vector_base.110" = type { %"struct.std::__1::pair.111"*, %"struct.std::__1::pair.111"*, %"class.std::__1::__compressed_pair.112" }
%"struct.std::__1::pair.111" = type opaque
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::pair.111"* }
%class.SerialQueue.117 = type { %class.SerialStorage.118 }
%class.SerialStorage.118 = type { %"class.std::__1::vector.119" }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { %"struct.std::__1::pair.121"*, %"struct.std::__1::pair.121"*, %"class.std::__1::__compressed_pair.122" }
%"struct.std::__1::pair.121" = type opaque
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"struct.std::__1::pair.121"* }
%class.SerialQueue.127 = type { %class.SerialStorage.128 }
%class.SerialStorage.128 = type { %"class.std::__1::vector.129" }
%"class.std::__1::vector.129" = type { %"class.std::__1::__vector_base.130" }
%"class.std::__1::__vector_base.130" = type { %"struct.std::__1::pair.131"*, %"struct.std::__1::pair.131"*, %"class.std::__1::__compressed_pair.132" }
%"struct.std::__1::pair.131" = type opaque
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.std::__1::pair.131"* }
%class.SerialQueue.137 = type { %class.SerialStorage.138 }
%class.SerialStorage.138 = type { %"class.std::__1::vector.139" }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.std::__1::pair.141"*, %"struct.std::__1::pair.141"*, %"class.std::__1::__compressed_pair.142" }
%"struct.std::__1::pair.141" = type opaque
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.std::__1::pair.141"* }
%class.SerialQueue.147 = type { %class.SerialStorage.148 }
%class.SerialStorage.148 = type { %"class.std::__1::vector.149" }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.std::__1::pair.151"*, %"struct.std::__1::pair.151"*, %"class.std::__1::__compressed_pair.152" }
%"struct.std::__1::pair.151" = type opaque
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.std::__1::pair.151"* }
%class.SerialQueue.157 = type { %class.SerialStorage.158 }
%class.SerialStorage.158 = type { %"class.std::__1::vector.159" }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { %"struct.std::__1::pair.161"*, %"struct.std::__1::pair.161"*, %"class.std::__1::__compressed_pair.162" }
%"struct.std::__1::pair.161" = type opaque
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"struct.std::__1::pair.161"* }
%class.SerialQueue.167 = type { %class.SerialStorage.168 }
%class.SerialStorage.168 = type { %"class.std::__1::vector.169" }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"struct.std::__1::pair.171"*, %"struct.std::__1::pair.171"*, %"class.std::__1::__compressed_pair.172" }
%"struct.std::__1::pair.171" = type opaque
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"struct.std::__1::pair.171"* }
%class.SerialQueue.177 = type { %class.SerialStorage.178 }
%class.SerialStorage.178 = type { %"class.std::__1::vector.179" }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.std::__1::pair.181"*, %"struct.std::__1::pair.181"*, %"class.std::__1::__compressed_pair.182" }
%"struct.std::__1::pair.181" = type opaque
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.std::__1::pair.181"* }
%class.SerialQueue.187 = type { %class.SerialStorage.188 }
%class.SerialStorage.188 = type { %"class.std::__1::vector.189" }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"struct.std::__1::pair.191"*, %"struct.std::__1::pair.191"*, %"class.std::__1::__compressed_pair.192" }
%"struct.std::__1::pair.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.std::__1::pair.191"* }
%class.SerialQueue.197 = type { %class.SerialStorage.198 }
%class.SerialStorage.198 = type { %"class.std::__1::vector.199" }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.std::__1::pair.201"*, %"struct.std::__1::pair.201"*, %"class.std::__1::__compressed_pair.202" }
%"struct.std::__1::pair.201" = type opaque
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.std::__1::pair.201"* }
%class.SerialQueue.207 = type { %class.SerialStorage.208 }
%class.SerialStorage.208 = type { %"class.std::__1::vector.209" }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.std::__1::pair.211"*, %"struct.std::__1::pair.211"*, %"class.std::__1::__compressed_pair.212" }
%"struct.std::__1::pair.211" = type opaque
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"struct.std::__1::pair.211"* }
%class.SerialQueue.217 = type { %class.SerialStorage.218 }
%class.SerialStorage.218 = type { %"class.std::__1::vector.219" }
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"struct.std::__1::pair.221"*, %"struct.std::__1::pair.221"*, %"class.std::__1::__compressed_pair.222" }
%"struct.std::__1::pair.221" = type opaque
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.std::__1::pair.221"* }
%class.SerialQueue.227 = type { %class.SerialStorage.228 }
%class.SerialStorage.228 = type { %"class.std::__1::vector.229" }
%"class.std::__1::vector.229" = type { %"class.std::__1::__vector_base.230" }
%"class.std::__1::__vector_base.230" = type { %"struct.std::__1::pair.231"*, %"struct.std::__1::pair.231"*, %"class.std::__1::__compressed_pair.232" }
%"struct.std::__1::pair.231" = type opaque
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::pair.231"* }
%class.SerialQueue.237 = type { %class.SerialStorage.238 }
%class.SerialStorage.238 = type { %"class.std::__1::vector.239" }
%"class.std::__1::vector.239" = type { %"class.std::__1::__vector_base.240" }
%"class.std::__1::__vector_base.240" = type { %"struct.std::__1::pair.241"*, %"struct.std::__1::pair.241"*, %"class.std::__1::__compressed_pair.242" }
%"struct.std::__1::pair.241" = type opaque
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.std::__1::pair.241"* }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.dawn_native::vulkan::ResourceMemoryAllocator"* }
%"class.dawn_native::vulkan::ResourceMemoryAllocator" = type opaque
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.dawn_native::vulkan::RenderPassCache"* }
%"class.dawn_native::vulkan::RenderPassCache" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.dawn_native::vulkan::external_memory::Service"* }
%"class.dawn_native::vulkan::external_memory::Service" = type <{ %"class.dawn_native::vulkan::Device"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.dawn_native::vulkan::external_semaphore::Service"* }
%"class.dawn_native::vulkan::external_semaphore::Service" = type <{ %"class.dawn_native::vulkan::Device"*, i8, [7 x i8] }>
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.280" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.274"**, %"struct.std::__1::pair.274"**, %"struct.std::__1::pair.274"**, %"class.std::__1::__compressed_pair.275" }
%"struct.std::__1::pair.274" = type opaque
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.std::__1::pair.274"** }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector.284" = type { %"class.std::__1::__vector_base.285" }
%"class.std::__1::__vector_base.285" = type { %"class.dawn_native::vulkan::detail::VkHandle"*, %"class.dawn_native::vulkan::detail::VkHandle"*, %"class.std::__1::__compressed_pair.286" }
%"class.dawn_native::vulkan::detail::VkHandle" = type { %struct.VkFence_T* }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"class.dawn_native::vulkan::detail::VkHandle"* }
%class.SerialQueue.291 = type { %class.SerialStorage.292 }
%class.SerialStorage.292 = type { %"class.std::__1::vector.293" }
%"class.std::__1::vector.293" = type { %"class.std::__1::__vector_base.294" }
%"class.std::__1::__vector_base.294" = type { %"struct.std::__1::pair.295"*, %"struct.std::__1::pair.295"*, %"class.std::__1::__compressed_pair.296" }
%"struct.std::__1::pair.295" = type opaque
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"struct.std::__1::pair.295"* }
%"class.std::__1::vector.301" = type { %"class.std::__1::__vector_base.302" }
%"class.std::__1::__vector_base.302" = type { %"struct.dawn_native::vulkan::Device::CommandPoolAndBuffer"*, %"struct.dawn_native::vulkan::Device::CommandPoolAndBuffer"*, %"class.std::__1::__compressed_pair.304" }
%"struct.dawn_native::vulkan::Device::CommandPoolAndBuffer" = type { %"class.dawn_native::vulkan::detail::VkHandle.303", %struct.VkCommandBuffer_T* }
%"class.dawn_native::vulkan::detail::VkHandle.303" = type { %struct.VkCommandPool_T* }
%"class.std::__1::__compressed_pair.304" = type { %"struct.std::__1::__compressed_pair_elem.305" }
%"struct.std::__1::__compressed_pair_elem.305" = type { %"struct.dawn_native::vulkan::Device::CommandPoolAndBuffer"* }
%"struct.dawn_native::vulkan::CommandRecordingContext" = type <{ %struct.VkCommandBuffer_T*, %"class.std::__1::vector.309", %"class.std::__1::vector.309", %"class.std::__1::vector.317", %"class.dawn_native::vulkan::detail::VkHandle.303", i8, [7 x i8] }>
%"class.std::__1::vector.309" = type { %"class.std::__1::__vector_base.310" }
%"class.std::__1::__vector_base.310" = type { %"class.dawn_native::vulkan::detail::VkHandle.311"*, %"class.dawn_native::vulkan::detail::VkHandle.311"*, %"class.std::__1::__compressed_pair.312" }
%"class.dawn_native::vulkan::detail::VkHandle.311" = type { %struct.VkSemaphore_T* }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { %"class.dawn_native::vulkan::detail::VkHandle.311"* }
%"class.std::__1::vector.317" = type { %"class.std::__1::__vector_base.318" }
%"class.std::__1::__vector_base.318" = type { %class.Ref.319*, %class.Ref.319*, %"class.std::__1::__compressed_pair.320" }
%class.Ref.319 = type opaque
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %class.Ref.319* }
%"struct.dawn_native::BindGroupDescriptor" = type { %"struct.dawn_native::ChainedStruct"*, i8*, %"class.dawn_native::BindGroupLayoutBase"*, i32, %"struct.dawn_native::BindGroupEntry"* }
%"struct.dawn_native::BindGroupEntry" = type { i32, %"class.dawn_native::BufferBase"*, i64, i64, %"class.dawn_native::SamplerBase"*, %"class.dawn_native::TextureViewBase"* }
%"class.dawn_native::BufferBase" = type { %"class.dawn_native::ObjectBase", i64, i32, i32, i8, %"class.std::__1::unique_ptr.325", void (i32, i8*)*, i8*, i64, i32, i64, i64 }
%"class.std::__1::unique_ptr.325" = type { %"class.std::__1::__compressed_pair.326" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.dawn_native::StagingBufferBase"* }
%"class.dawn_native::StagingBufferBase" = type opaque
%"class.dawn_native::SamplerBase" = type <{ %"class.dawn_native::CachedObject.base", [3 x i8], i32, i32, i32, i32, i32, i32, float, float, i32, i16, [6 x i8] }>
%"class.dawn_native::TextureViewBase" = type { %"class.dawn_native::ObjectBase", %class.Ref.331, %"struct.dawn_native::Format"*, i32, %"struct.dawn_native::SubresourceRange" }
%class.Ref.331 = type { %class.RefBase.332 }
%class.RefBase.332 = type { %"class.dawn_native::TextureBase"* }
%"class.dawn_native::TextureBase" = type { %"class.dawn_native::ObjectBase", i32, %"struct.dawn_native::Format"*, %"struct.dawn_native::Extent3D", i32, i32, i32, i32, %"class.std::__1::vector.333" }
%"struct.dawn_native::Extent3D" = type { i32, i32, i32 }
%"class.std::__1::vector.333" = type { i64*, i64, %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.dawn_native::SubresourceRange" = type { i8, i32, i32, i32, i32 }
%struct.VkDescriptorSet_T = type opaque
%class.Result = type { i64 }
%"class.dawn_native::vulkan::BindGroupLayout" = type { %"class.dawn_native::BindGroupLayoutBase", %"class.dawn_native::vulkan::detail::VkHandle.338", %class.SlabAllocator, %"class.std::__1::unique_ptr.339" }
%"class.dawn_native::vulkan::detail::VkHandle.338" = type { %struct.VkDescriptorSetLayout_T* }
%class.SlabAllocator = type { %class.SlabAllocatorImpl }
%class.SlabAllocatorImpl = type { i32, i32, i32, i32, i16, i64, %"struct.SlabAllocatorImpl::SentinelSlab", %"struct.SlabAllocatorImpl::SentinelSlab", %"struct.SlabAllocatorImpl::SentinelSlab" }
%"struct.SlabAllocatorImpl::SentinelSlab" = type { %"struct.SlabAllocatorImpl::Slab.base", [6 x i8] }
%"struct.SlabAllocatorImpl::Slab.base" = type <{ i8*, %"struct.SlabAllocatorImpl::IndexLinkNode"*, %"struct.SlabAllocatorImpl::Slab"*, %"struct.SlabAllocatorImpl::Slab"*, i16 }>
%"struct.SlabAllocatorImpl::IndexLinkNode" = type { i16, i16 }
%"struct.SlabAllocatorImpl::Slab" = type <{ i8*, %"struct.SlabAllocatorImpl::IndexLinkNode"*, %"struct.SlabAllocatorImpl::Slab"*, %"struct.SlabAllocatorImpl::Slab"*, i16, [6 x i8] }>
%"class.std::__1::unique_ptr.339" = type { %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"class.dawn_native::vulkan::DescriptorSetAllocator"* }
%"class.dawn_native::vulkan::DescriptorSetAllocator" = type opaque
%"class.ityp::stack_vec" = type { %class.StackVector }
%class.StackVector = type { %class.StackContainer }
%class.StackContainer = type { %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source", %class.StackAllocator, %"class.std::__1::vector.354" }
%"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source" = type { [2048 x i8], i8, [7 x i8] }
%class.StackAllocator = type { %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* }
%"class.std::__1::vector.354" = type { %"class.std::__1::__vector_base.355" }
%"class.std::__1::__vector_base.355" = type { %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet*, %"class.std::__1::__compressed_pair.356" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357", %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.357" = type { %struct.VkWriteDescriptorSet* }
%"struct.std::__1::__compressed_pair_elem.358" = type { %class.StackAllocator }
%"class.ityp::stack_vec.359" = type { %class.StackVector.360 }
%class.StackVector.360 = type { %class.StackContainer.361 }
%class.StackContainer.361 = type { %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source", %class.StackAllocator.362, %"class.std::__1::vector.365" }
%"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source" = type { [768 x i8], i8, [7 x i8] }
%class.StackAllocator.362 = type { %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* }
%"class.std::__1::vector.365" = type { %"class.std::__1::__vector_base.366" }
%"class.std::__1::__vector_base.366" = type { %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo*, %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368", %"struct.std::__1::__compressed_pair_elem.369" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %struct.VkDescriptorBufferInfo* }
%"struct.std::__1::__compressed_pair_elem.369" = type { %class.StackAllocator.362 }
%"class.ityp::stack_vec.370" = type { %class.StackVector.371 }
%class.StackVector.371 = type { %class.StackContainer.372 }
%class.StackContainer.372 = type { %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source", %class.StackAllocator.373, %"class.std::__1::vector.376" }
%"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source" = type { [768 x i8], i8, [7 x i8] }
%class.StackAllocator.373 = type { %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* }
%"class.std::__1::vector.376" = type { %"class.std::__1::__vector_base.377" }
%"class.std::__1::__vector_base.377" = type { %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo*, %"class.std::__1::__compressed_pair.378" }
%"class.std::__1::__compressed_pair.378" = type { %"struct.std::__1::__compressed_pair_elem.379", %"struct.std::__1::__compressed_pair_elem.380" }
%"struct.std::__1::__compressed_pair_elem.379" = type { %struct.VkDescriptorImageInfo* }
%"struct.std::__1::__compressed_pair_elem.380" = type { %class.StackAllocator.373 }
%"struct.dawn_native::BufferBinding" = type { %"class.dawn_native::BufferBase"*, i64, i64 }
%"class.dawn_native::vulkan::Buffer" = type <{ %"class.dawn_native::BufferBase", %"class.dawn_native::vulkan::detail::VkHandle.382", %"class.dawn_native::ResourceMemoryAllocation", i32, [4 x i8] }>
%"class.dawn_native::vulkan::detail::VkHandle.382" = type { %struct.VkBuffer_T* }
%"class.dawn_native::ResourceMemoryAllocation" = type { i32 (...)**, %"struct.dawn_native::AllocationInfo", i64, %"class.dawn_native::ResourceHeapBase"*, i8* }
%"struct.dawn_native::AllocationInfo" = type <{ i64, i32, [4 x i8] }>
%"class.dawn_native::ResourceHeapBase" = type opaque
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type", [4 x i8] }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.381" }
%"struct.std::__1::pair.381" = type { i32, i32 }
%"class.dawn_native::vulkan::Sampler" = type { %"class.dawn_native::SamplerBase.base", %"class.dawn_native::vulkan::detail::VkHandle.383" }
%"class.dawn_native::SamplerBase.base" = type <{ %"class.dawn_native::CachedObject.base", [3 x i8], i32, i32, i32, i32, i32, i32, float, float, i32, i16 }>
%"class.dawn_native::vulkan::detail::VkHandle.383" = type { %struct.VkSampler_T* }
%"class.dawn_native::vulkan::TextureView" = type { %"class.dawn_native::TextureViewBase", %"class.dawn_native::vulkan::detail::VkHandle.384" }
%"class.dawn_native::vulkan::detail::VkHandle.384" = type { %struct.VkImageView_T* }
%"class.dawn_native::vulkan::Texture" = type { %"class.dawn_native::TextureBase", %"class.dawn_native::vulkan::detail::VkHandle.385", %"class.dawn_native::ResourceMemoryAllocation", %"class.dawn_native::vulkan::detail::VkHandle.386", i32, i32, i32, i32, %"class.dawn_native::vulkan::detail::VkHandle.311", %"class.std::__1::vector.309", %"class.dawn_native::SubresourceStorage" }
%"class.dawn_native::vulkan::detail::VkHandle.385" = type { %struct.VkImage_T* }
%"class.dawn_native::vulkan::detail::VkHandle.386" = type { %struct.VkDeviceMemory_T* }
%"class.dawn_native::SubresourceStorage" = type { i8, i8, i16, %"struct.std::__1::array.387", %"struct.std::__1::array.388", %"class.std::__1::unique_ptr.389", %"class.std::__1::unique_ptr.395" }
%"struct.std::__1::array.387" = type { [2 x i8] }
%"struct.std::__1::array.388" = type { [2 x i32] }
%"class.std::__1::unique_ptr.389" = type { %"class.std::__1::__compressed_pair.390" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.391" }
%"struct.std::__1::__compressed_pair_elem.391" = type { i8* }
%"class.std::__1::unique_ptr.395" = type { %"class.std::__1::__compressed_pair.396" }
%"class.std::__1::__compressed_pair.396" = type { %"struct.std::__1::__compressed_pair_elem.397" }
%"struct.std::__1::__compressed_pair_elem.397" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI20VkWriteDescriptorSet14StackAllocatorIS1_Lm32EEE8__appendEm = comdat any

$_ZNSt3__16vectorI22VkDescriptorBufferInfo14StackAllocatorIS1_Lm32EEE8__appendEm = comdat any

$_ZNSt3__16vectorI21VkDescriptorImageInfo14StackAllocatorIS1_Lm32EEE8__appendEm = comdat any

@_ZTVN11dawn_native6vulkan9BindGroupE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dawn_native::vulkan::BindGroup"*)* @_ZN11dawn_native6vulkan9BindGroupD2Ev to i8*), i8* bitcast (void (%"class.dawn_native::vulkan::BindGroup"*)* @_ZN11dawn_native6vulkan9BindGroupD0Ev to i8*), i8* bitcast (void (%"class.dawn_native::BindGroupBase"*)* @_ZN11dawn_native13BindGroupBase10DeleteThisEv to i8*)] }, align 8

@_ZN11dawn_native6vulkan9BindGroupC1EPNS0_6DeviceEPKNS_19BindGroupDescriptorENS0_23DescriptorSetAllocationE = hidden unnamed_addr alias void (%"class.dawn_native::vulkan::BindGroup"*, %"class.dawn_native::vulkan::Device"*, %"struct.dawn_native::BindGroupDescriptor"*, %struct.VkDescriptorSet_T*, i64), void (%"class.dawn_native::vulkan::BindGroup"*, %"class.dawn_native::vulkan::Device"*, %"struct.dawn_native::BindGroupDescriptor"*, %struct.VkDescriptorSet_T*, i64)* @_ZN11dawn_native6vulkan9BindGroupC2EPNS0_6DeviceEPKNS_19BindGroupDescriptorENS0_23DescriptorSetAllocationE
@_ZN11dawn_native6vulkan9BindGroupD1Ev = hidden unnamed_addr alias void (%"class.dawn_native::vulkan::BindGroup"*), void (%"class.dawn_native::vulkan::BindGroup"*)* @_ZN11dawn_native6vulkan9BindGroupD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6vulkan9BindGroup6CreateEPNS0_6DeviceEPKNS_19BindGroupDescriptorE(%class.Result* noalias nocapture sret, %"class.dawn_native::vulkan::Device"*, %"struct.dawn_native::BindGroupDescriptor"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.Result, align 8
  %5 = bitcast %class.Result* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"struct.dawn_native::BindGroupDescriptor", %"struct.dawn_native::BindGroupDescriptor"* %2, i64 0, i32 2
  %7 = bitcast %"class.dawn_native::BindGroupLayoutBase"** %6 to %"class.dawn_native::vulkan::BindGroupLayout"**
  %8 = load %"class.dawn_native::vulkan::BindGroupLayout"*, %"class.dawn_native::vulkan::BindGroupLayout"** %7, align 8
  call void @_ZN11dawn_native6vulkan15BindGroupLayout17AllocateBindGroupEPNS0_6DeviceEPKNS_19BindGroupDescriptorE(%class.Result* nonnull sret %4, %"class.dawn_native::vulkan::BindGroupLayout"* %8, %"class.dawn_native::vulkan::Device"* %1, %"struct.dawn_native::BindGroupDescriptor"* %2) #9
  %9 = getelementptr inbounds %class.Result, %class.Result* %0, i64 0, i32 0
  %10 = getelementptr inbounds %class.Result, %class.Result* %4, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN11dawn_native6vulkan15BindGroupLayout17AllocateBindGroupEPNS0_6DeviceEPKNS_19BindGroupDescriptorE(%class.Result* sret, %"class.dawn_native::vulkan::BindGroupLayout"*, %"class.dawn_native::vulkan::Device"*, %"struct.dawn_native::BindGroupDescriptor"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6vulkan9BindGroupC2EPNS0_6DeviceEPKNS_19BindGroupDescriptorENS0_23DescriptorSetAllocationE(%"class.dawn_native::vulkan::BindGroup"*, %"class.dawn_native::vulkan::Device"*, %"struct.dawn_native::BindGroupDescriptor"*, %struct.VkDescriptorSet_T*, i64) unnamed_addr #0 align 2 {
  %6 = alloca %"class.ityp::stack_vec", align 8
  %7 = alloca %"class.ityp::stack_vec.359", align 8
  %8 = alloca %"class.ityp::stack_vec.370", align 8
  %9 = alloca %"struct.dawn_native::BufferBinding", align 8
  %10 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN11dawn_native6vulkan9BindGroupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.dawn_native::vulkan::Device", %"class.dawn_native::vulkan::Device"* %1, i64 0, i32 0
  %13 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 1
  %14 = ptrtoint %"class.dawn_native::vulkan::BindGroup"* %13 to i64
  %15 = add i64 %14, 7
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i8*
  tail call void @_ZN11dawn_native13BindGroupBaseC2EPNS_10DeviceBaseEPKNS_19BindGroupDescriptorEPv(%"class.dawn_native::BindGroupBase"* %11, %"class.dawn_native::DeviceBase"* %12, %"struct.dawn_native::BindGroupDescriptor"* %2, i8* %17) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN11dawn_native6vulkan9BindGroupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %18 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 1, i32 0, i32 0
  store %struct.VkDescriptorSet_T* %3, %struct.VkDescriptorSet_T** %18, align 8
  %19 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 1, i32 1
  %20 = bitcast i32* %19 to i64*
  store i64 %4, i64* %20, align 8
  %21 = tail call %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"* %11) #9
  %22 = tail call i32 @_ZNK11dawn_native19BindGroupLayoutBase15GetBindingCountEv(%"class.dawn_native::BindGroupLayoutBase"* %21) #9
  %23 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2096, i8* nonnull %23) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 2056, i1 false)
  %24 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %24, %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"** %26, align 8
  %27 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2
  %28 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %29 = ptrtoint %"class.ityp::stack_vec"* %6 to i64
  %30 = bitcast %"struct.std::__1::__compressed_pair_elem.358"* %28 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %32 = bitcast %struct.VkWriteDescriptorSet** %31 to i64*
  %33 = bitcast %"class.std::__1::vector.354"* %27 to i64*
  %34 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %35 = bitcast %struct.VkWriteDescriptorSet** %34 to i64*
  store i8 1, i8* %25, align 8
  %36 = ptrtoint i8* %25 to i64
  store i64 %29, i64* %33, align 8
  store i64 %29, i64* %35, align 8
  store i64 %36, i64* %32, align 8
  %37 = icmp eq i32 %22, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %5
  %39 = zext i32 %22 to i64
  call void @_ZNSt3__16vectorI20VkWriteDescriptorSet14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.354"* %27, i64 %39) #9
  br label %40

40:                                               ; preds = %5, %38
  %41 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 816, i8* nonnull %41) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 776, i1 false)
  %42 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 0
  %43 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %42, %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"** %44, align 8
  %45 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2
  %46 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %47 = ptrtoint %"class.ityp::stack_vec.359"* %7 to i64
  %48 = bitcast %"struct.std::__1::__compressed_pair_elem.369"* %46 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %struct.VkDescriptorBufferInfo** %49 to i64*
  %51 = bitcast %"class.std::__1::vector.365"* %45 to i64*
  %52 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %53 = bitcast %struct.VkDescriptorBufferInfo** %52 to i64*
  store i8 1, i8* %43, align 8
  %54 = ptrtoint i8* %43 to i64
  store i64 %47, i64* %51, align 8
  store i64 %47, i64* %53, align 8
  store i64 %54, i64* %50, align 8
  br i1 %37, label %57, label %55

55:                                               ; preds = %40
  %56 = zext i32 %22 to i64
  call void @_ZNSt3__16vectorI22VkDescriptorBufferInfo14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.365"* %45, i64 %56) #9
  br label %57

57:                                               ; preds = %40, %55
  %58 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 816, i8* nonnull %58) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 776, i1 false)
  %59 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 0, i32 1
  %61 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %59, %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"** %61, align 8
  %62 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2
  %63 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %64 = ptrtoint %"class.ityp::stack_vec.370"* %8 to i64
  %65 = bitcast %"struct.std::__1::__compressed_pair_elem.380"* %63 to i64*
  store i64 %64, i64* %65, align 8
  %66 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %67 = bitcast %struct.VkDescriptorImageInfo** %66 to i64*
  %68 = bitcast %"class.std::__1::vector.376"* %62 to i64*
  %69 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %70 = bitcast %struct.VkDescriptorImageInfo** %69 to i64*
  store i8 1, i8* %60, align 8
  %71 = ptrtoint i8* %60 to i64
  store i64 %64, i64* %68, align 8
  store i64 %64, i64* %70, align 8
  store i64 %71, i64* %67, align 8
  br i1 %37, label %74, label %72

72:                                               ; preds = %57
  %73 = zext i32 %22 to i64
  call void @_ZNSt3__16vectorI21VkDescriptorImageInfo14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.376"* %62, i64 %73) #9
  br label %74

74:                                               ; preds = %57, %72
  %75 = call zeroext i1 @_ZNK11dawn_native10DeviceBase15IsToggleEnabledENS_6ToggleE(%"class.dawn_native::DeviceBase"* %12, i32 24) #9
  %76 = call %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"* %11) #9
  %77 = call dereferenceable(24) %"class.std::__1::map"* @_ZNK11dawn_native19BindGroupLayoutBase13GetBindingMapEv(%"class.dawn_native::BindGroupLayoutBase"* %76) #9
  %78 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %77, i64 0, i32 0, i32 0
  %79 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %78, align 8
  %80 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %77, i64 0, i32 0, i32 1, i32 0, i32 0
  %81 = icmp eq %"class.std::__1::__tree_end_node"* %79, %80
  br i1 %81, label %92, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast %struct.VkDescriptorSet_T** %18 to i64*
  %85 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast %"struct.dawn_native::BufferBinding"* %9 to i8*
  %87 = getelementptr inbounds %"struct.dawn_native::BufferBinding", %"struct.dawn_native::BufferBinding"* %9, i64 0, i32 1
  %88 = getelementptr inbounds %"struct.dawn_native::BufferBinding", %"struct.dawn_native::BufferBinding"* %9, i64 0, i32 2
  %89 = bitcast %"struct.dawn_native::BufferBinding"* %9 to %"class.dawn_native::vulkan::Buffer"**
  %90 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.dawn_native::BufferBinding"* %9 to i8*
  br label %146

92:                                               ; preds = %257, %74
  %93 = phi i32 [ 0, %74 ], [ %229, %257 ]
  %94 = getelementptr inbounds %"class.dawn_native::vulkan::Device", %"class.dawn_native::vulkan::Device"* %1, i64 0, i32 1, i32 165
  %95 = load void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)*, void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)** %94, align 8
  %96 = call %struct.VkDevice_T* @_ZNK11dawn_native6vulkan6Device11GetVkDeviceEv(%"class.dawn_native::vulkan::Device"* %1) #9
  %97 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %98 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %97, align 8
  call void %95(%struct.VkDevice_T* %96, i32 %93, %struct.VkWriteDescriptorSet* %98, i32 0, %struct.VkCopyDescriptorSet* null) #9
  %99 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %100 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %99, align 8
  %101 = icmp eq %struct.VkDescriptorImageInfo* %100, null
  br i1 %101, label %114, label %102

102:                                              ; preds = %92
  %103 = ptrtoint %struct.VkDescriptorImageInfo* %100 to i64
  store i64 %103, i64* %70, align 8
  %104 = getelementptr inbounds %"class.ityp::stack_vec.370", %"class.ityp::stack_vec.370"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %105 = load %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"** %104, align 8
  %106 = icmp ne %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %105, null
  %107 = bitcast %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %105 to %struct.VkDescriptorImageInfo*
  %108 = icmp eq %struct.VkDescriptorImageInfo* %100, %107
  %109 = and i1 %106, %108
  br i1 %109, label %110, label %112

110:                                              ; preds = %102
  %111 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %105, i64 0, i32 1
  store i8 0, i8* %111, align 8
  br label %114

112:                                              ; preds = %102
  %113 = bitcast %struct.VkDescriptorImageInfo* %100 to i8*
  call void @_ZdlPv(i8* %113) #10
  br label %114

114:                                              ; preds = %92, %110, %112
  call void @llvm.lifetime.end.p0i8(i64 816, i8* nonnull %58) #9
  %115 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %116 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %115, align 8
  %117 = icmp eq %struct.VkDescriptorBufferInfo* %116, null
  br i1 %117, label %130, label %118

118:                                              ; preds = %114
  %119 = ptrtoint %struct.VkDescriptorBufferInfo* %116 to i64
  store i64 %119, i64* %53, align 8
  %120 = getelementptr inbounds %"class.ityp::stack_vec.359", %"class.ityp::stack_vec.359"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %121 = load %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"** %120, align 8
  %122 = icmp ne %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %121, null
  %123 = bitcast %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %121 to %struct.VkDescriptorBufferInfo*
  %124 = icmp eq %struct.VkDescriptorBufferInfo* %116, %123
  %125 = and i1 %122, %124
  br i1 %125, label %126, label %128

126:                                              ; preds = %118
  %127 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %121, i64 0, i32 1
  store i8 0, i8* %127, align 8
  br label %130

128:                                              ; preds = %118
  %129 = bitcast %struct.VkDescriptorBufferInfo* %116 to i8*
  call void @_ZdlPv(i8* %129) #10
  br label %130

130:                                              ; preds = %114, %126, %128
  call void @llvm.lifetime.end.p0i8(i64 816, i8* nonnull %41) #9
  %131 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %97, align 8
  %132 = icmp eq %struct.VkWriteDescriptorSet* %131, null
  br i1 %132, label %145, label %133

133:                                              ; preds = %130
  %134 = ptrtoint %struct.VkWriteDescriptorSet* %131 to i64
  store i64 %134, i64* %35, align 8
  %135 = getelementptr inbounds %"class.ityp::stack_vec", %"class.ityp::stack_vec"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %136 = load %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"*, %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"** %135, align 8
  %137 = icmp ne %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %136, null
  %138 = bitcast %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %136 to %struct.VkWriteDescriptorSet*
  %139 = icmp eq %struct.VkWriteDescriptorSet* %131, %138
  %140 = and i1 %137, %139
  br i1 %140, label %141, label %143

141:                                              ; preds = %133
  %142 = getelementptr inbounds %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source", %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %136, i64 0, i32 1
  store i8 0, i8* %142, align 8
  br label %145

143:                                              ; preds = %133
  %144 = bitcast %struct.VkWriteDescriptorSet* %131 to i8*
  call void @_ZdlPv(i8* %144) #10
  br label %145

145:                                              ; preds = %130, %141, %143
  call void @llvm.lifetime.end.p0i8(i64 2096, i8* nonnull %23) #9
  ret void

146:                                              ; preds = %82, %257
  %147 = phi i32 [ 0, %82 ], [ %229, %257 ]
  %148 = phi %"class.std::__1::__tree_end_node"* [ %79, %82 ], [ %258, %257 ]
  %149 = bitcast %"class.std::__1::__tree_end_node"* %148 to %"class.std::__1::__tree_node"*
  %150 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %149, i64 0, i32 1, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %148, i64 4
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = call %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"* %11) #9
  %156 = zext i32 %154 to i64
  %157 = getelementptr inbounds %"class.dawn_native::BindGroupLayoutBase", %"class.dawn_native::BindGroupLayoutBase"* %155, i64 0, i32 2, i32 0, i32 0, i32 0
  %158 = load %"struct.dawn_native::BindingInfo"*, %"struct.dawn_native::BindingInfo"** %157, align 8
  %159 = getelementptr inbounds %"struct.dawn_native::BindingInfo", %"struct.dawn_native::BindingInfo"* %158, i64 %156
  %160 = zext i32 %147 to i64
  %161 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %83, align 8
  %162 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 0
  store i32 35, i32* %162, align 8
  %163 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 1
  store i8* null, i8** %163, align 8
  %164 = load i64, i64* %84, align 8
  %165 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 2
  %166 = bitcast %struct.VkDescriptorSet_T** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = select i1 %75, i32 %154, i32 %151
  %168 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 3
  store i32 %167, i32* %168, align 8
  %169 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 4
  store i32 0, i32* %169, align 4
  %170 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 5
  store i32 1, i32* %170, align 8
  %171 = call i32 @_ZN11dawn_native6vulkan20VulkanDescriptorTypeERKNS_11BindingInfoE(%"struct.dawn_native::BindingInfo"* dereferenceable(104) %159) #9
  %172 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 6
  store i32 %171, i32* %172, align 4
  %173 = getelementptr inbounds %"struct.dawn_native::BindingInfo", %"struct.dawn_native::BindingInfo"* %158, i64 %156, i32 2
  %174 = load i32, i32* %173, align 8
  switch i32 %174, label %226 [
    i32 0, label %175
    i32 1, label %192
    i32 2, label %201
    i32 3, label %215
  ]

175:                                              ; preds = %146
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 -86, i64 24, i1 false)
  call void @_ZN11dawn_native13BindGroupBase25GetBindingAsBufferBindingEj(%"struct.dawn_native::BufferBinding"* nonnull sret %9, %"class.dawn_native::BindGroupBase"* %11, i32 %154) #9
  %176 = load %"class.dawn_native::vulkan::Buffer"*, %"class.dawn_native::vulkan::Buffer"** %89, align 8
  %177 = call %struct.VkBuffer_T* @_ZNK11dawn_native6vulkan6Buffer9GetHandleEv(%"class.dawn_native::vulkan::Buffer"* %176) #9
  %178 = icmp eq %struct.VkBuffer_T* %177, null
  br i1 %178, label %191, label %179

179:                                              ; preds = %175
  %180 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %90, align 8
  %181 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %180, i64 %160, i32 0
  store %struct.VkBuffer_T* %177, %struct.VkBuffer_T** %181, align 8
  %182 = load i64, i64* %87, align 8
  %183 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %90, align 8
  %184 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %183, i64 %160, i32 1
  store i64 %182, i64* %184, align 8
  %185 = load i64, i64* %88, align 8
  %186 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %90, align 8
  %187 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %186, i64 %160, i32 2
  store i64 %185, i64* %187, align 8
  %188 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %90, align 8
  %189 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %188, i64 %160
  %190 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 8
  store %struct.VkDescriptorBufferInfo* %189, %struct.VkDescriptorBufferInfo** %190, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #9
  br label %226

191:                                              ; preds = %175
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #9
  br label %228

192:                                              ; preds = %146
  %193 = call %"class.dawn_native::SamplerBase"* @_ZNK11dawn_native13BindGroupBase19GetBindingAsSamplerEj(%"class.dawn_native::BindGroupBase"* %11, i32 %154) #9
  %194 = bitcast %"class.dawn_native::SamplerBase"* %193 to %"class.dawn_native::vulkan::Sampler"*
  %195 = call %struct.VkSampler_T* @_ZNK11dawn_native6vulkan7Sampler9GetHandleEv(%"class.dawn_native::vulkan::Sampler"* %194) #9
  %196 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %197 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %196, i64 %160, i32 0
  store %struct.VkSampler_T* %195, %struct.VkSampler_T** %197, align 8
  %198 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %199 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %198, i64 %160
  %200 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 7
  store %struct.VkDescriptorImageInfo* %199, %struct.VkDescriptorImageInfo** %200, align 8
  br label %226

201:                                              ; preds = %146
  %202 = call %"class.dawn_native::TextureViewBase"* @_ZN11dawn_native13BindGroupBase23GetBindingAsTextureViewEj(%"class.dawn_native::BindGroupBase"* %11, i32 %154) #9
  %203 = bitcast %"class.dawn_native::TextureViewBase"* %202 to %"class.dawn_native::vulkan::TextureView"*
  %204 = call %struct.VkImageView_T* @_ZNK11dawn_native6vulkan11TextureView9GetHandleEv(%"class.dawn_native::vulkan::TextureView"* %203) #9
  %205 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %206 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %205, i64 %160, i32 1
  store %struct.VkImageView_T* %204, %struct.VkImageView_T** %206, align 8
  %207 = call %"class.dawn_native::TextureBase"* @_ZN11dawn_native15TextureViewBase10GetTextureEv(%"class.dawn_native::TextureViewBase"* %202) #9
  %208 = bitcast %"class.dawn_native::TextureBase"* %207 to %"class.dawn_native::vulkan::Texture"*
  %209 = call i32 @_ZN11dawn_native6vulkan17VulkanImageLayoutEPKNS0_7TextureEN4wgpu12TextureUsageE(%"class.dawn_native::vulkan::Texture"* %208, i32 4) #9
  %210 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %211 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %210, i64 %160, i32 2
  store i32 %209, i32* %211, align 8
  %212 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %213 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %212, i64 %160
  %214 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 7
  store %struct.VkDescriptorImageInfo* %213, %struct.VkDescriptorImageInfo** %214, align 8
  br label %226

215:                                              ; preds = %146
  %216 = call %"class.dawn_native::TextureViewBase"* @_ZN11dawn_native13BindGroupBase23GetBindingAsTextureViewEj(%"class.dawn_native::BindGroupBase"* %11, i32 %154) #9
  %217 = bitcast %"class.dawn_native::TextureViewBase"* %216 to %"class.dawn_native::vulkan::TextureView"*
  %218 = call %struct.VkImageView_T* @_ZNK11dawn_native6vulkan11TextureView9GetHandleEv(%"class.dawn_native::vulkan::TextureView"* %217) #9
  %219 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %220 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %219, i64 %160, i32 1
  store %struct.VkImageView_T* %218, %struct.VkImageView_T** %220, align 8
  %221 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %222 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %221, i64 %160, i32 2
  store i32 1, i32* %222, align 8
  %223 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %85, align 8
  %224 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %223, i64 %160
  %225 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %161, i64 %160, i32 7
  store %struct.VkDescriptorImageInfo* %224, %struct.VkDescriptorImageInfo** %225, align 8
  br label %226

226:                                              ; preds = %179, %146, %215, %201, %192
  %227 = add i32 %147, 1
  br label %228

228:                                              ; preds = %191, %226
  %229 = phi i32 [ %227, %226 ], [ %147, %191 ]
  %230 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %148, i64 1, i32 0
  %231 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %230, align 8
  %232 = icmp eq %"class.std::__1::__tree_node_base"* %231, null
  br i1 %232, label %233, label %241

233:                                              ; preds = %228
  %234 = bitcast %"class.std::__1::__tree_end_node"* %148 to %"class.std::__1::__tree_node_base"*
  %235 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %148, i64 2
  %236 = bitcast %"class.std::__1::__tree_end_node"* %235 to %"class.std::__1::__tree_end_node"**
  %237 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %236, align 8
  %238 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %237, i64 0, i32 0
  %239 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %238, align 8
  %240 = icmp eq %"class.std::__1::__tree_node_base"* %239, %234
  br i1 %240, label %257, label %248

241:                                              ; preds = %228, %241
  %242 = phi %"class.std::__1::__tree_node_base"* [ %244, %241 ], [ %231, %228 ]
  %243 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %242, i64 0, i32 0, i32 0
  %244 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %243, align 8
  %245 = icmp eq %"class.std::__1::__tree_node_base"* %244, null
  br i1 %245, label %246, label %241

246:                                              ; preds = %241
  %247 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %242, i64 0, i32 0
  br label %257

248:                                              ; preds = %233, %248
  %249 = phi %"class.std::__1::__tree_end_node"** [ %252, %248 ], [ %236, %233 ]
  %250 = bitcast %"class.std::__1::__tree_end_node"** %249 to %"class.std::__1::__tree_node_base"**
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  %252 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  %253 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %252, align 8
  %254 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %253, i64 0, i32 0
  %255 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %254, align 8
  %256 = icmp eq %"class.std::__1::__tree_node_base"* %255, %251
  br i1 %256, label %257, label %248

257:                                              ; preds = %248, %233, %246
  %258 = phi %"class.std::__1::__tree_end_node"* [ %247, %246 ], [ %237, %233 ], [ %253, %248 ]
  %259 = icmp eq %"class.std::__1::__tree_end_node"* %258, %80
  br i1 %259, label %92, label %146
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"*) local_unnamed_addr #2

declare i32 @_ZNK11dawn_native19BindGroupLayoutBase15GetBindingCountEv(%"class.dawn_native::BindGroupLayoutBase"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK11dawn_native10DeviceBase15IsToggleEnabledENS_6ToggleE(%"class.dawn_native::DeviceBase"*, i32) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::map"* @_ZNK11dawn_native19BindGroupLayoutBase13GetBindingMapEv(%"class.dawn_native::BindGroupLayoutBase"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.VkDescriptorSet_T* @_ZNK11dawn_native6vulkan9BindGroup9GetHandleEv(%"class.dawn_native::vulkan::BindGroup"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %struct.VkDescriptorSet_T*, %struct.VkDescriptorSet_T** %2, align 8
  ret %struct.VkDescriptorSet_T* %3
}

declare i32 @_ZN11dawn_native6vulkan20VulkanDescriptorTypeERKNS_11BindingInfoE(%"struct.dawn_native::BindingInfo"* dereferenceable(104)) local_unnamed_addr #2

declare void @_ZN11dawn_native13BindGroupBase25GetBindingAsBufferBindingEj(%"struct.dawn_native::BufferBinding"* sret, %"class.dawn_native::BindGroupBase"*, i32) local_unnamed_addr #2

declare %struct.VkBuffer_T* @_ZNK11dawn_native6vulkan6Buffer9GetHandleEv(%"class.dawn_native::vulkan::Buffer"*) local_unnamed_addr #2

declare %"class.dawn_native::SamplerBase"* @_ZNK11dawn_native13BindGroupBase19GetBindingAsSamplerEj(%"class.dawn_native::BindGroupBase"*, i32) local_unnamed_addr #2

declare %struct.VkSampler_T* @_ZNK11dawn_native6vulkan7Sampler9GetHandleEv(%"class.dawn_native::vulkan::Sampler"*) local_unnamed_addr #2

declare %"class.dawn_native::TextureViewBase"* @_ZN11dawn_native13BindGroupBase23GetBindingAsTextureViewEj(%"class.dawn_native::BindGroupBase"*, i32) local_unnamed_addr #2

declare %struct.VkImageView_T* @_ZNK11dawn_native6vulkan11TextureView9GetHandleEv(%"class.dawn_native::vulkan::TextureView"*) local_unnamed_addr #2

declare i32 @_ZN11dawn_native6vulkan17VulkanImageLayoutEPKNS0_7TextureEN4wgpu12TextureUsageE(%"class.dawn_native::vulkan::Texture"*, i32) local_unnamed_addr #2

declare %"class.dawn_native::TextureBase"* @_ZN11dawn_native15TextureViewBase10GetTextureEv(%"class.dawn_native::TextureViewBase"*) local_unnamed_addr #2

declare %struct.VkDevice_T* @_ZNK11dawn_native6vulkan6Device11GetVkDeviceEv(%"class.dawn_native::vulkan::Device"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6vulkan9BindGroupD2Ev(%"class.dawn_native::vulkan::BindGroup"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN11dawn_native6vulkan9BindGroupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0
  %4 = tail call %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"* %3) #9
  %5 = bitcast %"class.dawn_native::BindGroupLayoutBase"* %4 to %"class.dawn_native::vulkan::BindGroupLayout"*
  %6 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6vulkan15BindGroupLayout19DeallocateBindGroupEPNS0_9BindGroupEPNS0_23DescriptorSetAllocationE(%"class.dawn_native::vulkan::BindGroupLayout"* %5, %"class.dawn_native::vulkan::BindGroup"* %0, %"struct.dawn_native::vulkan::DescriptorSetAllocation"* %6) #9
  tail call void @_ZN11dawn_native13BindGroupBaseD2Ev(%"class.dawn_native::BindGroupBase"* %3) #9
  ret void
}

declare void @_ZN11dawn_native6vulkan15BindGroupLayout19DeallocateBindGroupEPNS0_9BindGroupEPNS0_23DescriptorSetAllocationE(%"class.dawn_native::vulkan::BindGroupLayout"*, %"class.dawn_native::vulkan::BindGroup"*, %"struct.dawn_native::vulkan::DescriptorSetAllocation"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN11dawn_native13BindGroupBaseD2Ev(%"class.dawn_native::BindGroupBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6vulkan9BindGroupD0Ev(%"class.dawn_native::vulkan::BindGroup"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN11dawn_native6vulkan9BindGroupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 0
  %4 = tail call %"class.dawn_native::BindGroupLayoutBase"* @_ZN11dawn_native13BindGroupBase9GetLayoutEv(%"class.dawn_native::BindGroupBase"* %3) #9
  %5 = bitcast %"class.dawn_native::BindGroupLayoutBase"* %4 to %"class.dawn_native::vulkan::BindGroupLayout"*
  %6 = getelementptr inbounds %"class.dawn_native::vulkan::BindGroup", %"class.dawn_native::vulkan::BindGroup"* %0, i64 0, i32 1
  tail call void @_ZN11dawn_native6vulkan15BindGroupLayout19DeallocateBindGroupEPNS0_9BindGroupEPNS0_23DescriptorSetAllocationE(%"class.dawn_native::vulkan::BindGroupLayout"* %5, %"class.dawn_native::vulkan::BindGroup"* %0, %"struct.dawn_native::vulkan::DescriptorSetAllocation"* %6) #9
  tail call void @_ZN11dawn_native13BindGroupBaseD2Ev(%"class.dawn_native::BindGroupBase"* %3) #9
  ret void
}

declare void @_ZN11dawn_native13BindGroupBase10DeleteThisEv(%"class.dawn_native::BindGroupBase"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN11dawn_native13BindGroupBaseC2EPNS_10DeviceBaseEPKNS_19BindGroupDescriptorEPv(%"class.dawn_native::BindGroupBase"*, %"class.dawn_native::DeviceBase"*, %"struct.dawn_native::BindGroupDescriptor"*, i8*) unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI20VkWriteDescriptorSet14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.354"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.354", %"class.std::__1::vector.354"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkWriteDescriptorSet** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.354", %"class.std::__1::vector.354"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkWriteDescriptorSet** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 6
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkWriteDescriptorSet*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 64
  %25 = and i64 %24, -64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %struct.VkWriteDescriptorSet* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %189

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.std::__1::vector.354", %"class.std::__1::vector.354"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %31 = bitcast %"class.std::__1::vector.354"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = ashr exact i64 %33, 6
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 288230376151711743
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = bitcast %"class.std::__1::vector.354"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %29
  %40 = sub i64 %5, %32
  %41 = ashr exact i64 %40, 6
  %42 = icmp ult i64 %41, 144115188075855871
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = ashr exact i64 %40, 5
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %69, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 288230376151711743, %39 ]
  %50 = getelementptr inbounds %class.StackAllocator, %class.StackAllocator* %30, i64 0, i32 0
  %51 = load %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"*, %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"** %50, align 8
  %52 = icmp eq %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %51, null
  br i1 %52, label %62, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source", %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %51, i64 0, i32 1
  %55 = load i8, i8* %54, align 8, !range !2
  %56 = icmp eq i8 %55, 0
  %57 = icmp ult i64 %49, 33
  %58 = and i1 %57, %56
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  store i8 1, i8* %54, align 8
  %60 = bitcast %class.StackAllocator* %30 to %struct.VkWriteDescriptorSet**
  %61 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %60, align 8
  br label %69

62:                                               ; preds = %53, %48
  %63 = icmp ugt i64 %49, 288230376151711743
  br i1 %63, label %64, label %65

64:                                               ; preds = %62
  tail call void @abort() #11
  unreachable

65:                                               ; preds = %62
  %66 = shl i64 %49, 6
  %67 = tail call i8* @_Znwm(i64 %66) #10
  %68 = bitcast i8* %67 to %struct.VkWriteDescriptorSet*
  br label %69

69:                                               ; preds = %43, %59, %65
  %70 = phi i64 [ 0, %43 ], [ %49, %59 ], [ %49, %65 ]
  %71 = phi %struct.VkWriteDescriptorSet* [ null, %43 ], [ %61, %59 ], [ %68, %65 ]
  %72 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %71, i64 %34
  %73 = ptrtoint %struct.VkWriteDescriptorSet* %72 to i64
  %74 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %71, i64 %70
  %75 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %72, i64 %1
  %76 = shl nsw i64 %1, 6
  %77 = add i64 %76, -64
  %78 = lshr exact i64 %77, 6
  %79 = add nuw nsw i64 %78, 1
  %80 = and i64 %79, 7
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %93, label %82

82:                                               ; preds = %69, %82
  %83 = phi %struct.VkWriteDescriptorSet* [ %87, %82 ], [ %72, %69 ]
  %84 = phi i64 [ %88, %82 ], [ %73, %69 ]
  %85 = phi i64 [ %89, %82 ], [ %80, %69 ]
  %86 = inttoptr i64 %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 64, i1 false) #9
  %87 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %83, i64 1
  %88 = ptrtoint %struct.VkWriteDescriptorSet* %87 to i64
  %89 = add i64 %85, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %82, !llvm.loop !3

91:                                               ; preds = %82
  %92 = ptrtoint %struct.VkWriteDescriptorSet* %87 to i64
  br label %93

93:                                               ; preds = %69, %91
  %94 = phi %struct.VkWriteDescriptorSet* [ %72, %69 ], [ %87, %91 ]
  %95 = phi i64 [ %73, %69 ], [ %92, %91 ]
  %96 = icmp ult i64 %77, 448
  br i1 %96, label %118, label %97

97:                                               ; preds = %93, %97
  %98 = phi %struct.VkWriteDescriptorSet* [ %115, %97 ], [ %94, %93 ]
  %99 = phi i64 [ %116, %97 ], [ %95, %93 ]
  %100 = inttoptr i64 %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 64, i1 false) #9
  %101 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 1
  %102 = bitcast %struct.VkWriteDescriptorSet* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 64, i1 false) #9
  %103 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 2
  %104 = bitcast %struct.VkWriteDescriptorSet* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 64, i1 false) #9
  %105 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 3
  %106 = bitcast %struct.VkWriteDescriptorSet* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 64, i1 false) #9
  %107 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 4
  %108 = bitcast %struct.VkWriteDescriptorSet* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 64, i1 false) #9
  %109 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 5
  %110 = bitcast %struct.VkWriteDescriptorSet* %109 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 64, i1 false) #9
  %111 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 6
  %112 = bitcast %struct.VkWriteDescriptorSet* %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 64, i1 false) #9
  %113 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 7
  %114 = bitcast %struct.VkWriteDescriptorSet* %113 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 64, i1 false) #9
  %115 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %98, i64 8
  %116 = ptrtoint %struct.VkWriteDescriptorSet* %115 to i64
  %117 = icmp eq %struct.VkWriteDescriptorSet* %75, %115
  br i1 %117, label %118, label %97

118:                                              ; preds = %97, %93
  %119 = ptrtoint %struct.VkWriteDescriptorSet* %74 to i64
  %120 = ptrtoint %struct.VkWriteDescriptorSet* %75 to i64
  %121 = getelementptr inbounds %"class.std::__1::vector.354", %"class.std::__1::vector.354"* %0, i64 0, i32 0, i32 0
  %122 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %121, align 8
  %123 = ptrtoint %struct.VkWriteDescriptorSet* %122 to i64
  %124 = load %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet** %6, align 8
  %125 = icmp eq %struct.VkWriteDescriptorSet* %124, %122
  br i1 %125, label %173, label %126

126:                                              ; preds = %118
  %127 = getelementptr %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %124, i64 -1, i32 0
  %128 = ptrtoint i32* %127 to i64
  %129 = sub i64 %128, %123
  %130 = lshr i64 %129, 6
  %131 = add nuw nsw i64 %130, 1
  %132 = and i64 %131, 3
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %126, %134
  %135 = phi %struct.VkWriteDescriptorSet* [ %138, %134 ], [ %72, %126 ]
  %136 = phi %struct.VkWriteDescriptorSet* [ %139, %134 ], [ %124, %126 ]
  %137 = phi i64 [ %142, %134 ], [ %132, %126 ]
  %138 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %135, i64 -1
  %139 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %136, i64 -1
  %140 = bitcast %struct.VkWriteDescriptorSet* %138 to i8*
  %141 = bitcast %struct.VkWriteDescriptorSet* %139 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %141, i64 64, i1 false) #9
  %142 = add i64 %137, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %134, !llvm.loop !5

144:                                              ; preds = %134, %126
  %145 = phi %struct.VkWriteDescriptorSet* [ undef, %126 ], [ %138, %134 ]
  %146 = phi %struct.VkWriteDescriptorSet* [ %72, %126 ], [ %138, %134 ]
  %147 = phi %struct.VkWriteDescriptorSet* [ %124, %126 ], [ %139, %134 ]
  %148 = icmp ult i64 %129, 192
  br i1 %148, label %169, label %149

149:                                              ; preds = %144, %149
  %150 = phi %struct.VkWriteDescriptorSet* [ %164, %149 ], [ %146, %144 ]
  %151 = phi %struct.VkWriteDescriptorSet* [ %165, %149 ], [ %147, %144 ]
  %152 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %150, i64 -1
  %153 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %151, i64 -1
  %154 = bitcast %struct.VkWriteDescriptorSet* %152 to i8*
  %155 = bitcast %struct.VkWriteDescriptorSet* %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 64, i1 false) #9
  %156 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %150, i64 -2
  %157 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %151, i64 -2
  %158 = bitcast %struct.VkWriteDescriptorSet* %156 to i8*
  %159 = bitcast %struct.VkWriteDescriptorSet* %157 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 64, i1 false) #9
  %160 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %150, i64 -3
  %161 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %151, i64 -3
  %162 = bitcast %struct.VkWriteDescriptorSet* %160 to i8*
  %163 = bitcast %struct.VkWriteDescriptorSet* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 8 %163, i64 64, i1 false) #9
  %164 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %150, i64 -4
  %165 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %151, i64 -4
  %166 = bitcast %struct.VkWriteDescriptorSet* %164 to i8*
  %167 = bitcast %struct.VkWriteDescriptorSet* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %166, i8* align 8 %167, i64 64, i1 false) #9
  %168 = icmp eq %struct.VkWriteDescriptorSet* %165, %122
  br i1 %168, label %169, label %149

169:                                              ; preds = %149, %144
  %170 = phi %struct.VkWriteDescriptorSet* [ %145, %144 ], [ %164, %149 ]
  %171 = ptrtoint %struct.VkWriteDescriptorSet* %170 to i64
  %172 = load i64, i64* %31, align 8
  br label %173

173:                                              ; preds = %118, %169
  %174 = phi i64 [ %171, %169 ], [ %73, %118 ]
  %175 = phi i64 [ %172, %169 ], [ %123, %118 ]
  store i64 %174, i64* %31, align 8
  store i64 %120, i64* %7, align 8
  store i64 %119, i64* %4, align 8
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %189, label %177

177:                                              ; preds = %173
  %178 = inttoptr i64 %175 to %struct.VkWriteDescriptorSet*
  %179 = getelementptr inbounds %class.StackAllocator, %class.StackAllocator* %30, i64 0, i32 0
  %180 = load %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"*, %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"** %179, align 8
  %181 = icmp ne %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %180, null
  %182 = bitcast %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %180 to %struct.VkWriteDescriptorSet*
  %183 = icmp eq %struct.VkWriteDescriptorSet* %178, %182
  %184 = and i1 %181, %183
  br i1 %184, label %185, label %187

185:                                              ; preds = %177
  %186 = getelementptr inbounds %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source", %"struct.StackAllocator<VkWriteDescriptorSet, 32>::Source"* %180, i64 0, i32 1
  store i8 0, i8* %186, align 8
  br label %189

187:                                              ; preds = %177
  %188 = inttoptr i64 %175 to i8*
  tail call void @_ZdlPv(i8* %188) #10
  br label %189

189:                                              ; preds = %187, %185, %173, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI22VkDescriptorBufferInfo14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.365"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.365", %"class.std::__1::vector.365"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkDescriptorBufferInfo** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.365", %"class.std::__1::vector.365"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkDescriptorBufferInfo** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkDescriptorBufferInfo*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %13, i64 %18, i32 0
  %20 = bitcast %struct.VkBuffer_T** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %struct.VkDescriptorBufferInfo* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %117

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.std::__1::vector.365", %"class.std::__1::vector.365"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %32 = bitcast %"class.std::__1::vector.365"* %0 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %8, %33
  %35 = sdiv exact i64 %34, 24
  %36 = add i64 %35, %1
  %37 = icmp ugt i64 %36, 768614336404564650
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = bitcast %"class.std::__1::vector.365"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #11
  unreachable

40:                                               ; preds = %30
  %41 = sub i64 %5, %33
  %42 = sdiv exact i64 %41, 24
  %43 = icmp ult i64 %42, 384307168202282325
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = shl nsw i64 %42, 1
  %46 = icmp ult i64 %45, %36
  %47 = select i1 %46, i64 %36, i64 %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %67, label %49

49:                                               ; preds = %40, %44
  %50 = phi i64 [ %47, %44 ], [ 768614336404564650, %40 ]
  %51 = getelementptr inbounds %class.StackAllocator.362, %class.StackAllocator.362* %31, i64 0, i32 0
  %52 = load %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"** %51, align 8
  %53 = icmp eq %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %52, null
  br i1 %53, label %63, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %52, i64 0, i32 1
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = icmp ult i64 %50, 33
  %59 = and i1 %58, %57
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  store i8 1, i8* %55, align 8
  %61 = bitcast %class.StackAllocator.362* %31 to %struct.VkDescriptorBufferInfo**
  %62 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %61, align 8
  br label %67

63:                                               ; preds = %49, %54
  %64 = mul i64 %50, 24
  %65 = tail call i8* @_Znwm(i64 %64) #10
  %66 = bitcast i8* %65 to %struct.VkDescriptorBufferInfo*
  br label %67

67:                                               ; preds = %44, %60, %63
  %68 = phi i64 [ 0, %44 ], [ %50, %60 ], [ %50, %63 ]
  %69 = phi %struct.VkDescriptorBufferInfo* [ null, %44 ], [ %62, %60 ], [ %66, %63 ]
  %70 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %69, i64 %35
  %71 = ptrtoint %struct.VkDescriptorBufferInfo* %70 to i64
  %72 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %69, i64 %68
  %73 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %70, i64 %1
  br label %74

74:                                               ; preds = %67, %74
  %75 = phi %struct.VkDescriptorBufferInfo* [ %78, %74 ], [ %70, %67 ]
  %76 = phi i64 [ %79, %74 ], [ %71, %67 ]
  %77 = inttoptr i64 %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #9
  %78 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %75, i64 1
  %79 = ptrtoint %struct.VkDescriptorBufferInfo* %78 to i64
  %80 = icmp eq %struct.VkDescriptorBufferInfo* %73, %78
  br i1 %80, label %81, label %74

81:                                               ; preds = %74
  %82 = ptrtoint %struct.VkDescriptorBufferInfo* %72 to i64
  %83 = ptrtoint %struct.VkDescriptorBufferInfo* %73 to i64
  %84 = getelementptr inbounds %"class.std::__1::vector.365", %"class.std::__1::vector.365"* %0, i64 0, i32 0, i32 0
  %85 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %84, align 8
  %86 = load %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo** %6, align 8
  %87 = icmp eq %struct.VkDescriptorBufferInfo* %86, %85
  br i1 %87, label %88, label %90

88:                                               ; preds = %81
  %89 = ptrtoint %struct.VkDescriptorBufferInfo* %85 to i64
  br label %101

90:                                               ; preds = %81, %90
  %91 = phi %struct.VkDescriptorBufferInfo* [ %93, %90 ], [ %70, %81 ]
  %92 = phi %struct.VkDescriptorBufferInfo* [ %94, %90 ], [ %86, %81 ]
  %93 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %91, i64 -1
  %94 = getelementptr inbounds %struct.VkDescriptorBufferInfo, %struct.VkDescriptorBufferInfo* %92, i64 -1
  %95 = bitcast %struct.VkDescriptorBufferInfo* %93 to i8*
  %96 = bitcast %struct.VkDescriptorBufferInfo* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 24, i1 false) #9
  %97 = icmp eq %struct.VkDescriptorBufferInfo* %94, %85
  br i1 %97, label %98, label %90

98:                                               ; preds = %90
  %99 = ptrtoint %struct.VkDescriptorBufferInfo* %93 to i64
  %100 = load i64, i64* %32, align 8
  br label %101

101:                                              ; preds = %88, %98
  %102 = phi i64 [ %71, %88 ], [ %99, %98 ]
  %103 = phi i64 [ %89, %88 ], [ %100, %98 ]
  store i64 %102, i64* %32, align 8
  store i64 %83, i64* %7, align 8
  store i64 %82, i64* %4, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %101
  %106 = inttoptr i64 %103 to %struct.VkDescriptorBufferInfo*
  %107 = getelementptr inbounds %class.StackAllocator.362, %class.StackAllocator.362* %31, i64 0, i32 0
  %108 = load %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"** %107, align 8
  %109 = icmp ne %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %108, null
  %110 = bitcast %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %108 to %struct.VkDescriptorBufferInfo*
  %111 = icmp eq %struct.VkDescriptorBufferInfo* %106, %110
  %112 = and i1 %109, %111
  br i1 %112, label %113, label %115

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorBufferInfo, 32>::Source"* %108, i64 0, i32 1
  store i8 0, i8* %114, align 8
  br label %117

115:                                              ; preds = %105
  %116 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %116) #10
  br label %117

117:                                              ; preds = %115, %113, %101, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI21VkDescriptorImageInfo14StackAllocatorIS1_Lm32EEE8__appendEm(%"class.std::__1::vector.376"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.376", %"class.std::__1::vector.376"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.VkDescriptorImageInfo** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.376", %"class.std::__1::vector.376"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.VkDescriptorImageInfo** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.VkDescriptorImageInfo*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %13, i64 %18, i32 0
  %20 = bitcast %struct.VkSampler_T** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %struct.VkDescriptorImageInfo* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %117

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.std::__1::vector.376", %"class.std::__1::vector.376"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %32 = bitcast %"class.std::__1::vector.376"* %0 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %8, %33
  %35 = sdiv exact i64 %34, 24
  %36 = add i64 %35, %1
  %37 = icmp ugt i64 %36, 768614336404564650
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = bitcast %"class.std::__1::vector.376"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #11
  unreachable

40:                                               ; preds = %30
  %41 = sub i64 %5, %33
  %42 = sdiv exact i64 %41, 24
  %43 = icmp ult i64 %42, 384307168202282325
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = shl nsw i64 %42, 1
  %46 = icmp ult i64 %45, %36
  %47 = select i1 %46, i64 %36, i64 %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %67, label %49

49:                                               ; preds = %40, %44
  %50 = phi i64 [ %47, %44 ], [ 768614336404564650, %40 ]
  %51 = getelementptr inbounds %class.StackAllocator.373, %class.StackAllocator.373* %31, i64 0, i32 0
  %52 = load %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"** %51, align 8
  %53 = icmp eq %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %52, null
  br i1 %53, label %63, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %52, i64 0, i32 1
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = icmp ult i64 %50, 33
  %59 = and i1 %58, %57
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  store i8 1, i8* %55, align 8
  %61 = bitcast %class.StackAllocator.373* %31 to %struct.VkDescriptorImageInfo**
  %62 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %61, align 8
  br label %67

63:                                               ; preds = %49, %54
  %64 = mul i64 %50, 24
  %65 = tail call i8* @_Znwm(i64 %64) #10
  %66 = bitcast i8* %65 to %struct.VkDescriptorImageInfo*
  br label %67

67:                                               ; preds = %44, %60, %63
  %68 = phi i64 [ 0, %44 ], [ %50, %60 ], [ %50, %63 ]
  %69 = phi %struct.VkDescriptorImageInfo* [ null, %44 ], [ %62, %60 ], [ %66, %63 ]
  %70 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %69, i64 %35
  %71 = ptrtoint %struct.VkDescriptorImageInfo* %70 to i64
  %72 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %69, i64 %68
  %73 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %70, i64 %1
  br label %74

74:                                               ; preds = %67, %74
  %75 = phi %struct.VkDescriptorImageInfo* [ %78, %74 ], [ %70, %67 ]
  %76 = phi i64 [ %79, %74 ], [ %71, %67 ]
  %77 = inttoptr i64 %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #9
  %78 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %75, i64 1
  %79 = ptrtoint %struct.VkDescriptorImageInfo* %78 to i64
  %80 = icmp eq %struct.VkDescriptorImageInfo* %73, %78
  br i1 %80, label %81, label %74

81:                                               ; preds = %74
  %82 = ptrtoint %struct.VkDescriptorImageInfo* %72 to i64
  %83 = ptrtoint %struct.VkDescriptorImageInfo* %73 to i64
  %84 = getelementptr inbounds %"class.std::__1::vector.376", %"class.std::__1::vector.376"* %0, i64 0, i32 0, i32 0
  %85 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %84, align 8
  %86 = load %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo** %6, align 8
  %87 = icmp eq %struct.VkDescriptorImageInfo* %86, %85
  br i1 %87, label %88, label %90

88:                                               ; preds = %81
  %89 = ptrtoint %struct.VkDescriptorImageInfo* %85 to i64
  br label %101

90:                                               ; preds = %81, %90
  %91 = phi %struct.VkDescriptorImageInfo* [ %93, %90 ], [ %70, %81 ]
  %92 = phi %struct.VkDescriptorImageInfo* [ %94, %90 ], [ %86, %81 ]
  %93 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %91, i64 -1
  %94 = getelementptr inbounds %struct.VkDescriptorImageInfo, %struct.VkDescriptorImageInfo* %92, i64 -1
  %95 = bitcast %struct.VkDescriptorImageInfo* %93 to i8*
  %96 = bitcast %struct.VkDescriptorImageInfo* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 24, i1 false) #9
  %97 = icmp eq %struct.VkDescriptorImageInfo* %94, %85
  br i1 %97, label %98, label %90

98:                                               ; preds = %90
  %99 = ptrtoint %struct.VkDescriptorImageInfo* %93 to i64
  %100 = load i64, i64* %32, align 8
  br label %101

101:                                              ; preds = %88, %98
  %102 = phi i64 [ %71, %88 ], [ %99, %98 ]
  %103 = phi i64 [ %89, %88 ], [ %100, %98 ]
  store i64 %102, i64* %32, align 8
  store i64 %83, i64* %7, align 8
  store i64 %82, i64* %4, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %101
  %106 = inttoptr i64 %103 to %struct.VkDescriptorImageInfo*
  %107 = getelementptr inbounds %class.StackAllocator.373, %class.StackAllocator.373* %31, i64 0, i32 0
  %108 = load %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"*, %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"** %107, align 8
  %109 = icmp ne %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %108, null
  %110 = bitcast %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %108 to %struct.VkDescriptorImageInfo*
  %111 = icmp eq %struct.VkDescriptorImageInfo* %106, %110
  %112 = and i1 %109, %111
  br i1 %112, label %113, label %115

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source", %"struct.StackAllocator<VkDescriptorImageInfo, 32>::Source"* %108, i64 0, i32 1
  store i8 0, i8* %114, align 8
  br label %117

115:                                              ; preds = %105
  %116 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %116) #10
  br label %117

117:                                              ; preds = %115, %113, %101, %28
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
