; ModuleID = '../../components/webcrypto/algorithm_implementation.cc'
source_filename = "../../components/webcrypto/algorithm_implementation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webcrypto::AlgorithmImplementation" = type { i32 (...)** }
%"class.webcrypto::Status" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.blink::WebCryptoAlgorithm" = type { %"class.blink::WebPrivatePtr" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.blink::WebCryptoKey" = type { %"class.blink::WebPrivatePtr.0" }
%"class.blink::WebPrivatePtr.0" = type { i8* }
%"class.webcrypto::CryptoData" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.webcrypto::GenerateKeyResult" = type opaque
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.blink::WebCryptoKeyAlgorithm" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

@_ZTVN9webcrypto23AlgorithmImplementationE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webcrypto::AlgorithmImplementation"*)* @_ZN9webcrypto23AlgorithmImplementationD2Ev to i8*), i8* bitcast (void (%"class.webcrypto::AlgorithmImplementation"*)* @_ZN9webcrypto23AlgorithmImplementationD0Ev to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation7EncryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation7DecryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation4SignERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.webcrypto::CryptoData"*, i8*)* @_ZNK9webcrypto23AlgorithmImplementation6VerifyERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataESA_Pb to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation6DigestERKN5blink18WebCryptoAlgorithmERKNS_10CryptoDataEPNSt3__16vectorIhNS8_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, i1, i32, %"class.webcrypto::GenerateKeyResult"*)* @_ZNK9webcrypto23AlgorithmImplementation11GenerateKeyERKN5blink18WebCryptoAlgorithmEbiPNS_17GenerateKeyResultE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, i1, i32, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation10DeriveBitsERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyEbjPNSt3__16vectorIhNS8_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, i8*, i32*)* @_ZNK9webcrypto23AlgorithmImplementation12GetKeyLengthERKN5blink18WebCryptoAlgorithmEPbPj to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, i32, %"class.webcrypto::CryptoData"*, %"class.blink::WebCryptoAlgorithm"*, i1, i32, %"class.blink::WebCryptoKey"*)* @_ZNK9webcrypto23AlgorithmImplementation9ImportKeyEN5blink18WebCryptoKeyFormatERKNS_10CryptoDataERKNS1_18WebCryptoAlgorithmEbiPNS1_12WebCryptoKeyE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, i32, %"class.blink::WebCryptoKey"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation9ExportKeyEN5blink18WebCryptoKeyFormatERKNS1_12WebCryptoKeyEPNSt3__16vectorIhNS6_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoKeyAlgorithm"*, i32, i1, i32, %"class.webcrypto::CryptoData"*, %"class.blink::WebCryptoKey"*)* @_ZNK9webcrypto23AlgorithmImplementation22DeserializeKeyForCloneERKN5blink21WebCryptoKeyAlgorithmENS1_16WebCryptoKeyTypeEbiRKNS_10CryptoDataEPNS1_12WebCryptoKeyE to i8*)] }, align 8

@_ZN9webcrypto23AlgorithmImplementationD1Ev = hidden unnamed_addr alias void (%"class.webcrypto::AlgorithmImplementation"*), void (%"class.webcrypto::AlgorithmImplementation"*)* @_ZN9webcrypto23AlgorithmImplementationD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN9webcrypto23AlgorithmImplementationD2Ev(%"class.webcrypto::AlgorithmImplementation"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9webcrypto23AlgorithmImplementationD0Ev(%"class.webcrypto::AlgorithmImplementation"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.webcrypto::AlgorithmImplementation"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation7EncryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), %"class.webcrypto::CryptoData"* nocapture readnone, %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

declare void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation7DecryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), %"class.webcrypto::CryptoData"* nocapture readnone, %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation4SignERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), %"class.webcrypto::CryptoData"* nocapture readnone, %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation6VerifyERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataESA_Pb(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), %"class.webcrypto::CryptoData"* nocapture readnone, %"class.webcrypto::CryptoData"* nocapture readnone, i8* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation6DigestERKN5blink18WebCryptoAlgorithmERKNS_10CryptoDataEPNSt3__16vectorIhNS8_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.webcrypto::CryptoData"* nocapture readnone, %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation11GenerateKeyERKN5blink18WebCryptoAlgorithmEbiPNS_17GenerateKeyResultE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), i1 zeroext, i32, %"class.webcrypto::GenerateKeyResult"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation10DeriveBitsERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyEbjPNSt3__16vectorIhNS8_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), i1 zeroext, i32, %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation12GetKeyLengthERKN5blink18WebCryptoAlgorithmEPbPj(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), i8* nocapture readnone, i32* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation9ImportKeyEN5blink18WebCryptoKeyFormatERKNS_10CryptoDataERKNS1_18WebCryptoAlgorithmEbiPNS1_12WebCryptoKeyE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, i32, %"class.webcrypto::CryptoData"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* nocapture readnone dereferenceable(8), i1 zeroext, i32, %"class.blink::WebCryptoKey"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation9ExportKeyEN5blink18WebCryptoKeyFormatERKNS1_12WebCryptoKeyEPNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, i32, %"class.blink::WebCryptoKey"* nocapture readnone dereferenceable(8), %"class.std::__1::vector"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation20SerializeKeyForCloneERKN5blink12WebCryptoKeyEPNS1_9WebVectorIhEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.blink::WebVector"*) local_unnamed_addr #1 align 2 {
  %5 = tail call dereferenceable(24) %"class.std::__1::vector"* @_ZN9webcrypto20GetSerializedKeyDataERKN5blink12WebCryptoKeyE(%"class.blink::WebCryptoKey"* dereferenceable(8) %2) #8
  %6 = bitcast %"class.std::__1::vector"* %5 to %"class.blink::WebVector"*
  %7 = icmp eq %"class.blink::WebVector"* %6, %3
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %3, i64 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"* %9, i8* %11, i8* %13) #8
  br label %14

14:                                               ; preds = %4, %8
  tail call void @_ZN9webcrypto6Status7SuccessEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

declare dereferenceable(24) %"class.std::__1::vector"* @_ZN9webcrypto20GetSerializedKeyDataERKN5blink12WebCryptoKeyE(%"class.blink::WebCryptoKey"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN9webcrypto6Status7SuccessEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9webcrypto23AlgorithmImplementation22DeserializeKeyForCloneERKN5blink21WebCryptoKeyAlgorithmENS1_16WebCryptoKeyTypeEbiRKNS_10CryptoDataEPNS1_12WebCryptoKeyE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::AlgorithmImplementation"* nocapture readnone, %"class.blink::WebCryptoKeyAlgorithm"* nocapture readnone, i32, i1 zeroext, i32, %"class.webcrypto::CryptoData"* nocapture readnone, %"class.blink::WebCryptoKey"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @_ZN9webcrypto6Status16ErrorUnsupportedEv(%"class.webcrypto::Status"* sret %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %5, %4
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %145, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #8
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %143

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = icmp eq i8* %22, %2
  br i1 %30, label %141, label %31

31:                                               ; preds = %28
  %32 = inttoptr i64 %29 to i8*
  %33 = sub i64 %11, %4
  %34 = sub i64 %33, %18
  %35 = getelementptr i8, i8* %2, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 32 to i8*)
  br i1 %37, label %128, label %38

38:                                               ; preds = %31
  %39 = sub i64 %11, %4
  %40 = sub i64 %39, %18
  %41 = getelementptr i8, i8* %2, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr i8, i8* %32, i64 %42
  %44 = icmp ult i8* %32, %2
  %45 = icmp ult i8* %21, %43
  %46 = and i1 %44, %45
  br i1 %46, label %128, label %47

47:                                               ; preds = %38
  %48 = and i64 %36, -32
  %49 = getelementptr i8, i8* %32, i64 %48
  %50 = getelementptr i8, i8* %21, i64 %48
  %51 = add i64 %48, -32
  %52 = lshr exact i64 %51, 5
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp ult i64 %51, 96
  br i1 %55, label %107, label %56

56:                                               ; preds = %47
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %104, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %105, %58 ]
  %61 = getelementptr i8, i8* %32, i64 %59
  %62 = getelementptr i8, i8* %21, i64 %59
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !2
  %65 = getelementptr i8, i8* %62, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !2
  %68 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %68, align 1, !alias.scope !5, !noalias !2
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !5, !noalias !2
  %71 = or i64 %59, 32
  %72 = getelementptr i8, i8* %32, i64 %71
  %73 = getelementptr i8, i8* %21, i64 %71
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !2
  %76 = getelementptr i8, i8* %73, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !2
  %79 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %79, align 1, !alias.scope !5, !noalias !2
  %80 = getelementptr i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %81, align 1, !alias.scope !5, !noalias !2
  %82 = or i64 %59, 64
  %83 = getelementptr i8, i8* %32, i64 %82
  %84 = getelementptr i8, i8* %21, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !2
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !2
  %90 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !alias.scope !5, !noalias !2
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !5, !noalias !2
  %93 = or i64 %59, 96
  %94 = getelementptr i8, i8* %32, i64 %93
  %95 = getelementptr i8, i8* %21, i64 %93
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !2
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !2
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !5, !noalias !2
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !5, !noalias !2
  %104 = add i64 %59, 128
  %105 = add i64 %60, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %58, !llvm.loop !7

107:                                              ; preds = %58, %47
  %108 = phi i64 [ 0, %47 ], [ %104, %58 ]
  %109 = icmp eq i64 %54, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %123, %110 ], [ %108, %107 ]
  %112 = phi i64 [ %124, %110 ], [ %54, %107 ]
  %113 = getelementptr i8, i8* %32, i64 %111
  %114 = getelementptr i8, i8* %21, i64 %111
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1, !alias.scope !2
  %117 = getelementptr i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !2
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1, !alias.scope !5, !noalias !2
  %121 = getelementptr i8, i8* %113, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1, !alias.scope !5, !noalias !2
  %123 = add i64 %111, 32
  %124 = add i64 %112, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %110, !llvm.loop !9

126:                                              ; preds = %110, %107
  %127 = icmp eq i64 %48, %36
  br i1 %127, label %138, label %128

128:                                              ; preds = %126, %38, %31
  %129 = phi i8* [ %32, %38 ], [ %32, %31 ], [ %49, %126 ]
  %130 = phi i8* [ %21, %38 ], [ %21, %31 ], [ %50, %126 ]
  br label %131

131:                                              ; preds = %128, %131
  %132 = phi i8* [ %136, %131 ], [ %129, %128 ]
  %133 = phi i8* [ %135, %131 ], [ %130, %128 ]
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %132, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = getelementptr inbounds i8, i8* %132, i64 1
  %137 = icmp eq i8* %135, %2
  br i1 %137, label %138, label %131, !llvm.loop !11

138:                                              ; preds = %131, %126
  %139 = phi i8* [ %49, %126 ], [ %136, %131 ]
  %140 = ptrtoint i8* %139 to i64
  br label %141

141:                                              ; preds = %28, %138
  %142 = phi i64 [ %29, %28 ], [ %140, %138 ]
  store i64 %142, i64* %17, align 8
  br label %268

143:                                              ; preds = %27
  %144 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %144, i8** %16, align 8
  br label %268

145:                                              ; preds = %3
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %147 = icmp eq i64 %11, 0
  br i1 %147, label %152, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %150 = bitcast i8** %149 to i64*
  store i64 %11, i64* %150, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #7
  %151 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %151, i8 0, i64 24, i1 false) #8
  br label %152

152:                                              ; preds = %145, %148
  %153 = phi i64 [ %9, %145 ], [ 0, %148 ]
  %154 = icmp slt i64 %6, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %156) #9
  unreachable

157:                                              ; preds = %152
  %158 = icmp ult i64 %153, 4611686018427387903
  br i1 %158, label %159, label %163

159:                                              ; preds = %157
  %160 = shl i64 %153, 1
  %161 = icmp ult i64 %160, %6
  %162 = select i1 %161, i64 %6, i64 %160
  br label %163

163:                                              ; preds = %159, %157
  %164 = phi i64 [ %162, %159 ], [ 9223372036854775807, %157 ]
  %165 = tail call i8* @_Znwm(i64 %164) #7
  %166 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  store i8* %165, i8** %166, align 8
  store i8* %165, i8** %146, align 8
  %167 = getelementptr inbounds i8, i8* %165, i64 %164
  store i8* %167, i8** %7, align 8
  %168 = bitcast i8** %166 to i64*
  %169 = icmp eq i8* %1, %2
  br i1 %169, label %265, label %170

170:                                              ; preds = %163
  %171 = ptrtoint i8* %2 to i64
  %172 = sub i64 %171, %4
  %173 = icmp ult i64 %172, 32
  br i1 %173, label %255, label %174

174:                                              ; preds = %170
  %175 = and i64 %172, -32
  %176 = getelementptr i8, i8* %165, i64 %175
  %177 = getelementptr i8, i8* %1, i64 %175
  %178 = add i64 %175, -32
  %179 = lshr exact i64 %178, 5
  %180 = add nuw nsw i64 %179, 1
  %181 = and i64 %180, 3
  %182 = icmp ult i64 %178, 96
  br i1 %182, label %234, label %183

183:                                              ; preds = %174
  %184 = sub nsw i64 %180, %181
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 0, %183 ], [ %231, %185 ]
  %187 = phi i64 [ %184, %183 ], [ %232, %185 ]
  %188 = getelementptr i8, i8* %165, i64 %186
  %189 = getelementptr i8, i8* %1, i64 %186
  %190 = bitcast i8* %189 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1
  %192 = getelementptr i8, i8* %189, i64 16
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1
  %195 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %195, align 1
  %196 = getelementptr i8, i8* %188, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %197, align 1
  %198 = or i64 %186, 32
  %199 = getelementptr i8, i8* %165, i64 %198
  %200 = getelementptr i8, i8* %1, i64 %198
  %201 = bitcast i8* %200 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1
  %203 = getelementptr i8, i8* %200, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1
  %206 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %202, <16 x i8>* %206, align 1
  %207 = getelementptr i8, i8* %199, i64 16
  %208 = bitcast i8* %207 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %208, align 1
  %209 = or i64 %186, 64
  %210 = getelementptr i8, i8* %165, i64 %209
  %211 = getelementptr i8, i8* %1, i64 %209
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1
  %214 = getelementptr i8, i8* %211, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %217, align 1
  %218 = getelementptr i8, i8* %210, i64 16
  %219 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %219, align 1
  %220 = or i64 %186, 96
  %221 = getelementptr i8, i8* %165, i64 %220
  %222 = getelementptr i8, i8* %1, i64 %220
  %223 = bitcast i8* %222 to <16 x i8>*
  %224 = load <16 x i8>, <16 x i8>* %223, align 1
  %225 = getelementptr i8, i8* %222, i64 16
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1
  %228 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %228, align 1
  %229 = getelementptr i8, i8* %221, i64 16
  %230 = bitcast i8* %229 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %230, align 1
  %231 = add i64 %186, 128
  %232 = add i64 %187, -4
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %185, !llvm.loop !12

234:                                              ; preds = %185, %174
  %235 = phi i64 [ 0, %174 ], [ %231, %185 ]
  %236 = icmp eq i64 %181, 0
  br i1 %236, label %253, label %237

237:                                              ; preds = %234, %237
  %238 = phi i64 [ %250, %237 ], [ %235, %234 ]
  %239 = phi i64 [ %251, %237 ], [ %181, %234 ]
  %240 = getelementptr i8, i8* %165, i64 %238
  %241 = getelementptr i8, i8* %1, i64 %238
  %242 = bitcast i8* %241 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1
  %244 = getelementptr i8, i8* %241, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %243, <16 x i8>* %247, align 1
  %248 = getelementptr i8, i8* %240, i64 16
  %249 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %249, align 1
  %250 = add i64 %238, 32
  %251 = add i64 %239, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %237, !llvm.loop !13

253:                                              ; preds = %237, %234
  %254 = icmp eq i64 %172, %175
  br i1 %254, label %265, label %255

255:                                              ; preds = %253, %170
  %256 = phi i8* [ %165, %170 ], [ %176, %253 ]
  %257 = phi i8* [ %1, %170 ], [ %177, %253 ]
  br label %258

258:                                              ; preds = %255, %258
  %259 = phi i8* [ %263, %258 ], [ %256, %255 ]
  %260 = phi i8* [ %262, %258 ], [ %257, %255 ]
  %261 = load i8, i8* %260, align 1
  store i8 %261, i8* %259, align 1
  %262 = getelementptr inbounds i8, i8* %260, i64 1
  %263 = getelementptr inbounds i8, i8* %259, i64 1
  %264 = icmp eq i8* %262, %2
  br i1 %264, label %265, label %258, !llvm.loop !14

265:                                              ; preds = %258, %253, %163
  %266 = phi i8* [ %165, %163 ], [ %176, %253 ], [ %263, %258 ]
  %267 = ptrtoint i8* %266 to i64
  store i64 %267, i64* %168, align 8
  br label %268

268:                                              ; preds = %141, %143, %265
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !15, !8}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
