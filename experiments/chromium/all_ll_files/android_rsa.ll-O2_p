; ModuleID = '../../chrome/browser/devtools/device/usb/android_rsa.cc'
source_filename = "../../chrome/browser/devtools/device/usb/android_rsa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::RSAPrivateKey" = type { %"class.std::__1::unique_ptr.0" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type opaque
%class.Profile = type { %"class.content::BrowserContext", %"class.std::__1::unique_ptr.17", i8, i8, i32, %"class.base::ObserverList", %"class.std::__1::unique_ptr.34" }
%"class.content::BrowserContext" = type { %"class.base::SupportsUserData.base", %"class.std::__1::unique_ptr.11" }
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.content::BrowserContext::Impl"* }
%"class.content::BrowserContext::Impl" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.content::ResourceContext"* }
%"class.content::ResourceContext" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.29" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i8 }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.variations::VariationsClient"* }
%"class.variations::VariationsClient" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { i8*, i8*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { i8* }
%class.PrefService = type { i32 (...)**, %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.51", %class.scoped_refptr.77, %"class.base::RepeatingCallback.78", %class.scoped_refptr.79, %"class.std::__1::unordered_map.107" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %class.PrefNotifierImpl* }
%class.PrefNotifierImpl = type opaque
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %class.PrefValueStore* }
%class.PrefValueStore = type { i32 (...)**, [7 x %"class.PrefValueStore::PrefStoreKeeper"], %"class.base::RepeatingCallback", %class.PrefNotifier*, %"class.std::__1::map.57", i8, %"class.std::__1::unique_ptr.68" }
%"class.PrefValueStore::PrefStoreKeeper" = type <{ %"class.PrefStore::Observer", %class.PrefValueStore*, %class.scoped_refptr.54, i32, [4 x i8] }>
%"class.PrefStore::Observer" = type { i32 (...)** }
%class.scoped_refptr.54 = type { %class.PrefStore* }
%class.PrefStore = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.55 }
%class.scoped_refptr.55 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.56", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.56" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.PrefNotifier = type opaque
%"class.std::__1::map.57" = type { %"class.std::__1::__tree.58" }
%"class.std::__1::__tree.58" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.59", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.PrefValueStore::Delegate"* }
%"class.PrefValueStore::Delegate" = type { i32 (...)** }
%class.scoped_refptr.77 = type { %class.PersistentPrefStore* }
%class.PersistentPrefStore = type { %class.WriteablePrefStore.base, [4 x i8] }
%class.WriteablePrefStore.base = type { %class.PrefStore.base }
%class.PrefStore.base = type <{ i32 (...)**, %"class.base::RefCounted" }>
%"class.base::RepeatingCallback.78" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.79 = type { %class.PrefRegistry* }
%class.PrefRegistry = type { i32 (...)**, %"class.base::RefCounted.80", %class.scoped_refptr.81, %"class.std::__1::unordered_map", %"class.std::__1::set" }
%"class.base::RefCounted.80" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.81 = type { %class.DefaultPrefStore* }
%class.DefaultPrefStore = type opaque
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.82", %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.95", %"class.std::__1::__compressed_pair.97", [4 x i8] }>
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84", %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { float }
%"class.std::__1::set" = type { %"class.std::__1::__tree.100" }
%"class.std::__1::__tree.100" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.101", %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::unordered_map.107" = type { %"class.std::__1::__hash_table.108" }
%"class.std::__1::__hash_table.108" = type <{ %"class.std::__1::unique_ptr.109", %"class.std::__1::__compressed_pair.119", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.127", [4 x i8] }>
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111", %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.std::__1::__hash_node_base.112"** }
%"struct.std::__1::__hash_node_base.112" = type { %"struct.std::__1::__hash_node_base.112"* }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.std::__1::__bucket_list_deallocator.114" }
%"class.std::__1::__bucket_list_deallocator.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.std::__1::__hash_node_base.112" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.(anonymous namespace)::RSAPublicKey" = type { i32, i32, [64 x i32], [64 x i32], i32 }

@_ZN5prefs15kDevToolsAdbKeyE = external constant [0 x i8], align 1
@_ZN12_GLOBAL__N_118kDummyRSAPublicKeyE = internal unnamed_addr constant [393 x i8] c"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6OSJ64q+ZLg7VV2ojEPh5TRbYjwbTTifSPeFIV45CHnbTWYiiIn41wrozpYizNsMWZUBjdah1N78WVhbyDrnr0bDgFp+gXjfVppa3IgjiohEcemK3omXi3GDMK8ERhriLUKfQS842SXtQ8I+KoZtpCkGM//0h7+P+Rhm0WwdipIRMhR8haNAeyDiiCvqJcvevv2T52vqKtS3aWz+GjaTJJLVWydEpz9WdvWeLfFVhe2ZnqwwZNa30QojfsnvjaMwK2MU7uYfRBPuvLyK5QESWBpArNDd6ULl8Y+NU6kwNOVDc87OASCVEM1gw2IMi2mo2WO5ywp0UWRiGZCkK+wOFQIDAQAB\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::RSAPrivateKey"* @_Z20AndroidRSAPrivateKeyP7Profile(%class.Profile*) local_unnamed_addr #0 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = alloca %"class.std::__1::vector.131", align 8
  %7 = alloca %"class.std::__1::vector.131", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.base::BasicStringPiece", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %class.Profile* %0 to %class.PrefService* (%class.Profile*)***
  %15 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  %16 = load %class.PrefService* (%class.Profile*)**, %class.PrefService* (%class.Profile*)*** %14, align 8
  %17 = getelementptr inbounds %class.PrefService* (%class.Profile*)*, %class.PrefService* (%class.Profile*)** %16, i64 46
  %18 = load %class.PrefService* (%class.Profile*)*, %class.PrefService* (%class.Profile*)** %17, align 8
  %19 = tail call %class.PrefService* %18(%class.Profile* %0) #9
  %20 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #9
  %21 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs15kDevToolsAdbKeyE, i64 0, i64 0)) #9
  %22 = icmp ugt i64 %21, -17
  br i1 %22, label %23, label %25

23:                                               ; preds = %1
  %24 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %24) #10
  unreachable

25:                                               ; preds = %1
  %26 = icmp ult i64 %21, 23
  br i1 %26, label %36, label %27

27:                                               ; preds = %25
  %28 = add nuw i64 %21, 16
  %29 = and i64 %28, -16
  %30 = tail call i8* @_Znwm(i64 %29) #11
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %30, i8** %31, align 8
  %32 = or i64 %29, -9223372036854775808
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %21, i64* %34, align 8
  %35 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %41

36:                                               ; preds = %25
  %37 = trunc i64 %21 to i8
  %38 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  store i8 %37, i8* %39, align 1
  %40 = icmp eq i64 %21, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %36, %27
  %42 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %38, %36 ], [ %35, %27 ]
  %43 = phi i8* [ %20, %36 ], [ %30, %27 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %43, i8* align 1 getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs15kDevToolsAdbKeyE, i64 0, i64 0), i64 %21, i1 false) #9
  br label %44

44:                                               ; preds = %36, %41
  %45 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %38, %36 ], [ %42, %41 ]
  %46 = phi i8* [ %20, %36 ], [ %43, %41 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 %21
  store i8 0, i8* %47, align 1
  call void @_ZNK11PrefService9GetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %2, %class.PrefService* %19, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #9
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #11
  br label %54

54:                                               ; preds = %44, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #9
  %55 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #9
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 24, i1 false) #9
  %58 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  %62 = load i64, i64* %13, align 8
  %63 = zext i8 %60 to i64
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #9
  br i1 %65, label %213, label %67

67:                                               ; preds = %54
  %68 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %69 = load i8*, i8** %12, align 8
  %70 = select i1 %61, i8* %69, i8* %11
  store i8* %70, i8** %68, align 8
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  store i64 %64, i64* %71, align 8
  %72 = call zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5, %"class.std::__1::basic_string"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #9
  br i1 %72, label %73, label %216

73:                                               ; preds = %67
  %74 = bitcast %"class.std::__1::vector.131"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %74) #9
  %75 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 1
  %77 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %78 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %78, i64 0, i32 1, i32 0
  %80 = load i8, i8* %79, align 1
  %81 = icmp slt i8 %80, 0
  %82 = load i8*, i8** %56, align 8
  %83 = load i64, i64* %57, align 8
  %84 = zext i8 %80 to i64
  %85 = select i1 %81, i8* %82, i8* %55
  %86 = select i1 %81, i64 %83, i64 %84
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 0, i64 24, i1 false) #9
  %88 = icmp eq i64 %86, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %73
  %90 = bitcast i8** %76 to i64*
  br label %201

91:                                               ; preds = %73
  %92 = icmp slt i64 %86, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %91
  %94 = bitcast %"class.std::__1::vector.131"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %94) #10
  unreachable

95:                                               ; preds = %91
  %96 = call i8* @_Znwm(i64 %86) #11
  store i8* %96, i8** %76, align 8
  store i8* %96, i8** %75, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 %86
  store i8* %97, i8** %77, align 8
  %98 = bitcast i8** %76 to i64*
  %99 = icmp ult i64 %86, 32
  br i1 %99, label %186, label %100

100:                                              ; preds = %95
  %101 = getelementptr i8, i8* %96, i64 %86
  %102 = icmp ult i8* %96, %87
  %103 = icmp ult i8* %85, %101
  %104 = and i1 %102, %103
  br i1 %104, label %186, label %105

105:                                              ; preds = %100
  %106 = and i64 %86, -32
  %107 = getelementptr i8, i8* %96, i64 %106
  %108 = getelementptr i8, i8* %85, i64 %106
  %109 = add i64 %106, -32
  %110 = lshr exact i64 %109, 5
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp ult i64 %109, 96
  br i1 %113, label %165, label %114

114:                                              ; preds = %105
  %115 = sub nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %162, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %163, %116 ]
  %119 = getelementptr i8, i8* %96, i64 %117
  %120 = getelementptr i8, i8* %85, i64 %117
  %121 = bitcast i8* %120 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1, !alias.scope !2
  %123 = getelementptr i8, i8* %120, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1, !alias.scope !2
  %126 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1, !alias.scope !5, !noalias !2
  %127 = getelementptr i8, i8* %119, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %128, align 1, !alias.scope !5, !noalias !2
  %129 = or i64 %117, 32
  %130 = getelementptr i8, i8* %96, i64 %129
  %131 = getelementptr i8, i8* %85, i64 %129
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !2
  %134 = getelementptr i8, i8* %131, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1, !alias.scope !2
  %137 = bitcast i8* %130 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %138 = getelementptr i8, i8* %130, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1, !alias.scope !5, !noalias !2
  %140 = or i64 %117, 64
  %141 = getelementptr i8, i8* %96, i64 %140
  %142 = getelementptr i8, i8* %85, i64 %140
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1, !alias.scope !2
  %145 = getelementptr i8, i8* %142, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1, !alias.scope !2
  %148 = bitcast i8* %141 to <16 x i8>*
  store <16 x i8> %144, <16 x i8>* %148, align 1, !alias.scope !5, !noalias !2
  %149 = getelementptr i8, i8* %141, i64 16
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %147, <16 x i8>* %150, align 1, !alias.scope !5, !noalias !2
  %151 = or i64 %117, 96
  %152 = getelementptr i8, i8* %96, i64 %151
  %153 = getelementptr i8, i8* %85, i64 %151
  %154 = bitcast i8* %153 to <16 x i8>*
  %155 = load <16 x i8>, <16 x i8>* %154, align 1, !alias.scope !2
  %156 = getelementptr i8, i8* %153, i64 16
  %157 = bitcast i8* %156 to <16 x i8>*
  %158 = load <16 x i8>, <16 x i8>* %157, align 1, !alias.scope !2
  %159 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> %155, <16 x i8>* %159, align 1, !alias.scope !5, !noalias !2
  %160 = getelementptr i8, i8* %152, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %161, align 1, !alias.scope !5, !noalias !2
  %162 = add i64 %117, 128
  %163 = add i64 %118, -4
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %116, !llvm.loop !7

165:                                              ; preds = %116, %105
  %166 = phi i64 [ 0, %105 ], [ %162, %116 ]
  %167 = icmp eq i64 %112, 0
  br i1 %167, label %184, label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %181, %168 ], [ %166, %165 ]
  %170 = phi i64 [ %182, %168 ], [ %112, %165 ]
  %171 = getelementptr i8, i8* %96, i64 %169
  %172 = getelementptr i8, i8* %85, i64 %169
  %173 = bitcast i8* %172 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 1, !alias.scope !2
  %175 = getelementptr i8, i8* %172, i64 16
  %176 = bitcast i8* %175 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 1, !alias.scope !2
  %178 = bitcast i8* %171 to <16 x i8>*
  store <16 x i8> %174, <16 x i8>* %178, align 1, !alias.scope !5, !noalias !2
  %179 = getelementptr i8, i8* %171, i64 16
  %180 = bitcast i8* %179 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %180, align 1, !alias.scope !5, !noalias !2
  %181 = add i64 %169, 32
  %182 = add i64 %170, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %168, !llvm.loop !9

184:                                              ; preds = %168, %165
  %185 = icmp eq i64 %86, %106
  br i1 %185, label %196, label %186

186:                                              ; preds = %184, %100, %95
  %187 = phi i8* [ %96, %100 ], [ %96, %95 ], [ %107, %184 ]
  %188 = phi i8* [ %85, %100 ], [ %85, %95 ], [ %108, %184 ]
  br label %189

189:                                              ; preds = %186, %189
  %190 = phi i8* [ %194, %189 ], [ %187, %186 ]
  %191 = phi i8* [ %193, %189 ], [ %188, %186 ]
  %192 = load i8, i8* %191, align 1
  store i8 %192, i8* %190, align 1
  %193 = getelementptr inbounds i8, i8* %191, i64 1
  %194 = getelementptr inbounds i8, i8* %190, i64 1
  %195 = icmp eq i8* %193, %87
  br i1 %195, label %196, label %189, !llvm.loop !11

196:                                              ; preds = %189, %184
  %197 = phi i8* [ %107, %184 ], [ %194, %189 ]
  %198 = bitcast %"class.std::__1::vector.131"* %6 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = ptrtoint i8* %197 to i64
  store i64 %200, i64* %98, align 8
  br label %201

201:                                              ; preds = %89, %196
  %202 = phi i64* [ %90, %89 ], [ %98, %196 ]
  %203 = phi i64 [ 0, %89 ], [ %200, %196 ]
  %204 = phi i64 [ 0, %89 ], [ %199, %196 ]
  %205 = sub i64 %203, %204
  %206 = inttoptr i64 %204 to i8*
  %207 = call %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey24CreateFromPrivateKeyInfoEN4base4spanIKhLm18446744073709551615EEE(i64 %205, i8* %206) #9
  %208 = ptrtoint %"class.crypto::RSAPrivateKey"* %207 to i64
  %209 = load i8*, i8** %75, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %214, label %211

211:                                              ; preds = %201
  %212 = ptrtoint i8* %209 to i64
  store i64 %212, i64* %202, align 8
  call void @_ZdlPv(i8* nonnull %209) #11
  br label %214

213:                                              ; preds = %54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #9
  br label %216

214:                                              ; preds = %211, %201
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %74) #9
  %215 = icmp eq %"class.crypto::RSAPrivateKey"* %207, null
  br i1 %215, label %216, label %428

216:                                              ; preds = %214, %67, %213
  %217 = call %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey6CreateEt(i16 zeroext 2048) #9
  %218 = ptrtoint %"class.crypto::RSAPrivateKey"* %217 to i64
  %219 = bitcast %"class.std::__1::vector.131"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %219) #9
  %220 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %7, i64 0, i32 0, i32 0
  %221 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %219, i8 0, i64 24, i1 false) #9
  %222 = icmp eq %"class.crypto::RSAPrivateKey"* %217, null
  br i1 %222, label %425, label %223

223:                                              ; preds = %216
  %224 = call zeroext i1 @_ZNK6crypto13RSAPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* nonnull %217, %"class.std::__1::vector.131"* nonnull %7) #9
  br i1 %224, label %231, label %225

225:                                              ; preds = %223
  %226 = load i8*, i8** %220, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %426, label %228

228:                                              ; preds = %225
  %229 = ptrtoint i8* %226 to i64
  %230 = bitcast i8** %221 to i64*
  store i64 %229, i64* %230, align 8
  call void @_ZdlPv(i8* nonnull %226) #11
  br label %426

231:                                              ; preds = %223
  %232 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #9
  %233 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %234 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %235 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %236 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %236, i8 -86, i64 24, i1 false)
  %237 = load i8*, i8** %220, align 8
  %238 = ptrtoint i8* %237 to i64
  %239 = load i8*, i8** %221, align 8
  %240 = ptrtoint i8* %239 to i64
  %241 = sub i64 %240, %238
  %242 = icmp ugt i64 %241, -17
  br i1 %242, label %243, label %245

243:                                              ; preds = %231
  %244 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %244) #10
  unreachable

245:                                              ; preds = %231
  %246 = icmp ult i64 %241, 23
  br i1 %246, label %247, label %251

247:                                              ; preds = %245
  %248 = trunc i64 %241 to i8
  %249 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %250 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %249, i64 0, i32 1, i32 0
  store i8 %248, i8* %250, align 1
  br label %256

251:                                              ; preds = %245
  %252 = add nuw i64 %241, 16
  %253 = and i64 %252, -16
  %254 = call i8* @_Znwm(i64 %253) #11
  store i8* %254, i8** %233, align 8
  %255 = or i64 %253, -9223372036854775808
  store i64 %255, i64* %235, align 8
  store i64 %241, i64* %234, align 8
  br label %256

256:                                              ; preds = %251, %247
  %257 = phi i8* [ %232, %247 ], [ %254, %251 ]
  %258 = icmp eq i8* %237, %239
  br i1 %258, label %361, label %259

259:                                              ; preds = %256
  %260 = ptrtoint i8* %239 to i64
  %261 = sub i64 %260, %238
  %262 = icmp ult i64 %261, 32
  br i1 %262, label %351, label %263

263:                                              ; preds = %259
  %264 = ptrtoint i8* %239 to i64
  %265 = sub i64 %264, %238
  %266 = getelementptr i8, i8* %257, i64 %265
  %267 = icmp ult i8* %257, %239
  %268 = icmp ult i8* %237, %266
  %269 = and i1 %267, %268
  br i1 %269, label %351, label %270

270:                                              ; preds = %263
  %271 = and i64 %261, -32
  %272 = getelementptr i8, i8* %257, i64 %271
  %273 = getelementptr i8, i8* %237, i64 %271
  %274 = add i64 %271, -32
  %275 = lshr exact i64 %274, 5
  %276 = add nuw nsw i64 %275, 1
  %277 = and i64 %276, 3
  %278 = icmp ult i64 %274, 96
  br i1 %278, label %330, label %279

279:                                              ; preds = %270
  %280 = sub nsw i64 %276, %277
  br label %281

281:                                              ; preds = %281, %279
  %282 = phi i64 [ 0, %279 ], [ %327, %281 ]
  %283 = phi i64 [ %280, %279 ], [ %328, %281 ]
  %284 = getelementptr i8, i8* %257, i64 %282
  %285 = getelementptr i8, i8* %237, i64 %282
  %286 = bitcast i8* %285 to <16 x i8>*
  %287 = load <16 x i8>, <16 x i8>* %286, align 1, !alias.scope !12
  %288 = getelementptr i8, i8* %285, i64 16
  %289 = bitcast i8* %288 to <16 x i8>*
  %290 = load <16 x i8>, <16 x i8>* %289, align 1, !alias.scope !12
  %291 = bitcast i8* %284 to <16 x i8>*
  store <16 x i8> %287, <16 x i8>* %291, align 1, !alias.scope !15, !noalias !12
  %292 = getelementptr i8, i8* %284, i64 16
  %293 = bitcast i8* %292 to <16 x i8>*
  store <16 x i8> %290, <16 x i8>* %293, align 1, !alias.scope !15, !noalias !12
  %294 = or i64 %282, 32
  %295 = getelementptr i8, i8* %257, i64 %294
  %296 = getelementptr i8, i8* %237, i64 %294
  %297 = bitcast i8* %296 to <16 x i8>*
  %298 = load <16 x i8>, <16 x i8>* %297, align 1, !alias.scope !12
  %299 = getelementptr i8, i8* %296, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  %301 = load <16 x i8>, <16 x i8>* %300, align 1, !alias.scope !12
  %302 = bitcast i8* %295 to <16 x i8>*
  store <16 x i8> %298, <16 x i8>* %302, align 1, !alias.scope !15, !noalias !12
  %303 = getelementptr i8, i8* %295, i64 16
  %304 = bitcast i8* %303 to <16 x i8>*
  store <16 x i8> %301, <16 x i8>* %304, align 1, !alias.scope !15, !noalias !12
  %305 = or i64 %282, 64
  %306 = getelementptr i8, i8* %257, i64 %305
  %307 = getelementptr i8, i8* %237, i64 %305
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1, !alias.scope !12
  %310 = getelementptr i8, i8* %307, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  %312 = load <16 x i8>, <16 x i8>* %311, align 1, !alias.scope !12
  %313 = bitcast i8* %306 to <16 x i8>*
  store <16 x i8> %309, <16 x i8>* %313, align 1, !alias.scope !15, !noalias !12
  %314 = getelementptr i8, i8* %306, i64 16
  %315 = bitcast i8* %314 to <16 x i8>*
  store <16 x i8> %312, <16 x i8>* %315, align 1, !alias.scope !15, !noalias !12
  %316 = or i64 %282, 96
  %317 = getelementptr i8, i8* %257, i64 %316
  %318 = getelementptr i8, i8* %237, i64 %316
  %319 = bitcast i8* %318 to <16 x i8>*
  %320 = load <16 x i8>, <16 x i8>* %319, align 1, !alias.scope !12
  %321 = getelementptr i8, i8* %318, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1, !alias.scope !12
  %324 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %320, <16 x i8>* %324, align 1, !alias.scope !15, !noalias !12
  %325 = getelementptr i8, i8* %317, i64 16
  %326 = bitcast i8* %325 to <16 x i8>*
  store <16 x i8> %323, <16 x i8>* %326, align 1, !alias.scope !15, !noalias !12
  %327 = add i64 %282, 128
  %328 = add i64 %283, -4
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %281, !llvm.loop !17

330:                                              ; preds = %281, %270
  %331 = phi i64 [ 0, %270 ], [ %327, %281 ]
  %332 = icmp eq i64 %277, 0
  br i1 %332, label %349, label %333

333:                                              ; preds = %330, %333
  %334 = phi i64 [ %346, %333 ], [ %331, %330 ]
  %335 = phi i64 [ %347, %333 ], [ %277, %330 ]
  %336 = getelementptr i8, i8* %257, i64 %334
  %337 = getelementptr i8, i8* %237, i64 %334
  %338 = bitcast i8* %337 to <16 x i8>*
  %339 = load <16 x i8>, <16 x i8>* %338, align 1, !alias.scope !12
  %340 = getelementptr i8, i8* %337, i64 16
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !12
  %343 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %339, <16 x i8>* %343, align 1, !alias.scope !15, !noalias !12
  %344 = getelementptr i8, i8* %336, i64 16
  %345 = bitcast i8* %344 to <16 x i8>*
  store <16 x i8> %342, <16 x i8>* %345, align 1, !alias.scope !15, !noalias !12
  %346 = add i64 %334, 32
  %347 = add i64 %335, -1
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %333, !llvm.loop !18

349:                                              ; preds = %333, %330
  %350 = icmp eq i64 %261, %271
  br i1 %350, label %361, label %351

351:                                              ; preds = %349, %263, %259
  %352 = phi i8* [ %257, %263 ], [ %257, %259 ], [ %272, %349 ]
  %353 = phi i8* [ %237, %263 ], [ %237, %259 ], [ %273, %349 ]
  br label %354

354:                                              ; preds = %351, %354
  %355 = phi i8* [ %359, %354 ], [ %352, %351 ]
  %356 = phi i8* [ %358, %354 ], [ %353, %351 ]
  %357 = load i8, i8* %356, align 1
  store i8 %357, i8* %355, align 1
  %358 = getelementptr inbounds i8, i8* %356, i64 1
  %359 = getelementptr inbounds i8, i8* %355, i64 1
  %360 = icmp eq i8* %358, %239
  br i1 %360, label %361, label %354, !llvm.loop !19

361:                                              ; preds = %354, %349, %256
  %362 = phi i8* [ %257, %256 ], [ %272, %349 ], [ %359, %354 ]
  store i8 0, i8* %362, align 1
  %363 = bitcast %"class.base::BasicStringPiece"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %363) #9
  %364 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 0
  %365 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %366 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %365, i64 0, i32 1, i32 0
  %367 = load i8, i8* %366, align 1
  %368 = icmp slt i8 %367, 0
  %369 = load i8*, i8** %233, align 8
  %370 = select i1 %368, i8* %369, i8* %232
  store i8* %370, i8** %364, align 8
  %371 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 1
  %372 = load i64, i64* %234, align 8
  %373 = zext i8 %367 to i64
  %374 = select i1 %368, i64 %372, i64 %373
  store i64 %374, i64* %371, align 8
  call void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %9, %"class.std::__1::basic_string"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %363) #9
  %375 = load %class.PrefService* (%class.Profile*)**, %class.PrefService* (%class.Profile*)*** %14, align 8
  %376 = getelementptr inbounds %class.PrefService* (%class.Profile*)*, %class.PrefService* (%class.Profile*)** %375, i64 46
  %377 = load %class.PrefService* (%class.Profile*)*, %class.PrefService* (%class.Profile*)** %376, align 8
  %378 = call %class.PrefService* %377(%class.Profile* %0) #9
  %379 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %379) #9
  %380 = call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs15kDevToolsAdbKeyE, i64 0, i64 0)) #9
  %381 = icmp ugt i64 %380, -17
  br i1 %381, label %382, label %384

382:                                              ; preds = %361
  %383 = bitcast %"class.std::__1::basic_string"* %10 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %383) #10
  unreachable

384:                                              ; preds = %361
  %385 = icmp ult i64 %380, 23
  br i1 %385, label %395, label %386

386:                                              ; preds = %384
  %387 = add nuw i64 %380, 16
  %388 = and i64 %387, -16
  %389 = call i8* @_Znwm(i64 %388) #11
  %390 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %389, i8** %390, align 8
  %391 = or i64 %388, -9223372036854775808
  %392 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %380, i64* %393, align 8
  %394 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %400

395:                                              ; preds = %384
  %396 = trunc i64 %380 to i8
  %397 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %398 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %397, i64 0, i32 1, i32 0
  store i8 %396, i8* %398, align 1
  %399 = icmp eq i64 %380, 0
  br i1 %399, label %403, label %400

400:                                              ; preds = %395, %386
  %401 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %397, %395 ], [ %394, %386 ]
  %402 = phi i8* [ %379, %395 ], [ %389, %386 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %402, i8* align 1 getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs15kDevToolsAdbKeyE, i64 0, i64 0), i64 %380, i1 false) #9
  br label %403

403:                                              ; preds = %395, %400
  %404 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %397, %395 ], [ %401, %400 ]
  %405 = phi i8* [ %379, %395 ], [ %402, %400 ]
  %406 = getelementptr inbounds i8, i8* %405, i64 %380
  store i8 0, i8* %406, align 1
  call void @_ZN11PrefService9SetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(%class.PrefService* %378, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %10, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #9
  %407 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %404, i64 0, i32 1, i32 0
  %408 = load i8, i8* %407, align 1
  %409 = icmp slt i8 %408, 0
  br i1 %409, label %410, label %413

410:                                              ; preds = %403
  %411 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %412 = load i8*, i8** %411, align 8
  call void @_ZdlPv(i8* %412) #11
  br label %413

413:                                              ; preds = %403, %410
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %379) #9
  %414 = load i8, i8* %366, align 1
  %415 = icmp slt i8 %414, 0
  br i1 %415, label %416, label %418

416:                                              ; preds = %413
  %417 = load i8*, i8** %233, align 8
  call void @_ZdlPv(i8* %417) #11
  br label %418

418:                                              ; preds = %413, %416
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #9
  %419 = load i8*, i8** %220, align 8
  %420 = icmp eq i8* %419, null
  br i1 %420, label %424, label %421

421:                                              ; preds = %418
  %422 = ptrtoint i8* %419 to i64
  %423 = bitcast i8** %221 to i64*
  store i64 %422, i64* %423, align 8
  call void @_ZdlPv(i8* nonnull %419) #11
  br label %424

424:                                              ; preds = %418, %421
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #9
  br label %428

425:                                              ; preds = %216
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #9
  br label %428

426:                                              ; preds = %228, %225
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #9
  call void @_ZN6crypto13RSAPrivateKeyD1Ev(%"class.crypto::RSAPrivateKey"* nonnull %217) #9
  %427 = bitcast %"class.crypto::RSAPrivateKey"* %217 to i8*
  call void @_ZdlPv(i8* %427) #11
  br label %428

428:                                              ; preds = %425, %214, %424, %426
  %429 = phi i64 [ 0, %425 ], [ 0, %426 ], [ %218, %424 ], [ %208, %214 ]
  %430 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %431 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %430, i64 0, i32 1, i32 0
  %432 = load i8, i8* %431, align 1
  %433 = icmp slt i8 %432, 0
  br i1 %433, label %434, label %436

434:                                              ; preds = %428
  %435 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %435) #11
  br label %436

436:                                              ; preds = %428, %434
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #9
  %437 = load i8, i8* %59, align 1
  %438 = icmp slt i8 %437, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %436
  %440 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %440) #11
  br label %441

441:                                              ; preds = %436, %439
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  %442 = inttoptr i64 %429 to %"class.crypto::RSAPrivateKey"*
  ret %"class.crypto::RSAPrivateKey"* %442
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK11PrefService9GetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %class.PrefService*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #2

declare %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey24CreateFromPrivateKeyInfoEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #2

declare %"class.crypto::RSAPrivateKey"* @_ZN6crypto13RSAPrivateKey6CreateEt(i16 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZNK6crypto13RSAPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"*, %"class.std::__1::vector.131"*) local_unnamed_addr #2

declare void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #2

declare void @_ZN11PrefService9SetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(%class.PrefService*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z19AndroidRSAPublicKeyPN6crypto13RSAPrivateKeyE(%"class.std::__1::basic_string"* noalias sret, %"class.crypto::RSAPrivateKey"*) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::vector.131", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = alloca %"class.std::__1::vector.131", align 8
  %7 = alloca %"struct.(anonymous namespace)::RSAPublicKey", align 4
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.base::BasicStringPiece", align 8
  %10 = bitcast %"class.std::__1::vector.131"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  %11 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %3, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %3, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #9
  %13 = icmp eq %"class.crypto::RSAPrivateKey"* %1, null
  br i1 %13, label %14, label %20

14:                                               ; preds = %2
  %15 = tail call i8* @_Znwm(i64 400) #11
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = bitcast i64* %17 to <2 x i64>*
  store <2 x i64> <i64 392, i64 -9223372036854775408>, <2 x i64>* %18, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %15, i8* align 16 getelementptr inbounds ([393 x i8], [393 x i8]* @_ZN12_GLOBAL__N_118kDummyRSAPublicKeyE, i64 0, i64 0), i64 392, i1 false) #9
  %19 = getelementptr inbounds i8, i8* %15, i64 392
  store i8 0, i8* %19, align 1
  br label %762

20:                                               ; preds = %2
  %21 = call zeroext i1 @_ZNK6crypto13RSAPrivateKey15ExportPublicKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* nonnull %1, %"class.std::__1::vector.131"* nonnull %3) #9
  %22 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %26 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false)
  %27 = load i8*, i8** %11, align 8
  %28 = ptrtoint i8* %27 to i64
  %29 = load i8*, i8** %12, align 8
  %30 = ptrtoint i8* %29 to i64
  %31 = sub i64 %30, %28
  %32 = icmp ugt i64 %31, -17
  br i1 %32, label %33, label %35

33:                                               ; preds = %20
  %34 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %34) #10
  unreachable

35:                                               ; preds = %20
  %36 = icmp ult i64 %31, 23
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = trunc i64 %31 to i8
  %39 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 %38, i8* %40, align 1
  br label %46

41:                                               ; preds = %35
  %42 = add nuw i64 %31, 16
  %43 = and i64 %42, -16
  %44 = call i8* @_Znwm(i64 %43) #11
  store i8* %44, i8** %23, align 8
  %45 = or i64 %43, -9223372036854775808
  store i64 %45, i64* %25, align 8
  store i64 %31, i64* %24, align 8
  br label %46

46:                                               ; preds = %41, %37
  %47 = phi i8* [ %22, %37 ], [ %44, %41 ]
  %48 = icmp eq i8* %27, %29
  br i1 %48, label %151, label %49

49:                                               ; preds = %46
  %50 = ptrtoint i8* %29 to i64
  %51 = sub i64 %50, %28
  %52 = icmp ult i64 %51, 32
  br i1 %52, label %141, label %53

53:                                               ; preds = %49
  %54 = ptrtoint i8* %29 to i64
  %55 = sub i64 %54, %28
  %56 = getelementptr i8, i8* %47, i64 %55
  %57 = icmp ult i8* %47, %29
  %58 = icmp ult i8* %27, %56
  %59 = and i1 %57, %58
  br i1 %59, label %141, label %60

60:                                               ; preds = %53
  %61 = and i64 %51, -32
  %62 = getelementptr i8, i8* %47, i64 %61
  %63 = getelementptr i8, i8* %27, i64 %61
  %64 = add i64 %61, -32
  %65 = lshr exact i64 %64, 5
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 96
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr i8, i8* %47, i64 %72
  %75 = getelementptr i8, i8* %27, i64 %72
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !20
  %78 = getelementptr i8, i8* %75, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !20
  %81 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %81, align 1, !alias.scope !23, !noalias !20
  %82 = getelementptr i8, i8* %74, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %83, align 1, !alias.scope !23, !noalias !20
  %84 = or i64 %72, 32
  %85 = getelementptr i8, i8* %47, i64 %84
  %86 = getelementptr i8, i8* %27, i64 %84
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !20
  %89 = getelementptr i8, i8* %86, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !20
  %92 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %92, align 1, !alias.scope !23, !noalias !20
  %93 = getelementptr i8, i8* %85, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %94, align 1, !alias.scope !23, !noalias !20
  %95 = or i64 %72, 64
  %96 = getelementptr i8, i8* %47, i64 %95
  %97 = getelementptr i8, i8* %27, i64 %95
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1, !alias.scope !20
  %100 = getelementptr i8, i8* %97, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !20
  %103 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %99, <16 x i8>* %103, align 1, !alias.scope !23, !noalias !20
  %104 = getelementptr i8, i8* %96, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %105, align 1, !alias.scope !23, !noalias !20
  %106 = or i64 %72, 96
  %107 = getelementptr i8, i8* %47, i64 %106
  %108 = getelementptr i8, i8* %27, i64 %106
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !20
  %111 = getelementptr i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !20
  %114 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %114, align 1, !alias.scope !23, !noalias !20
  %115 = getelementptr i8, i8* %107, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %113, <16 x i8>* %116, align 1, !alias.scope !23, !noalias !20
  %117 = add i64 %72, 128
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !25

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr i8, i8* %47, i64 %124
  %127 = getelementptr i8, i8* %27, i64 %124
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1, !alias.scope !20
  %130 = getelementptr i8, i8* %127, i64 16
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1, !alias.scope !20
  %133 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %133, align 1, !alias.scope !23, !noalias !20
  %134 = getelementptr i8, i8* %126, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %135, align 1, !alias.scope !23, !noalias !20
  %136 = add i64 %124, 32
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !26

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %51, %61
  br i1 %140, label %151, label %141

141:                                              ; preds = %139, %53, %49
  %142 = phi i8* [ %47, %53 ], [ %47, %49 ], [ %62, %139 ]
  %143 = phi i8* [ %27, %53 ], [ %27, %49 ], [ %63, %139 ]
  br label %144

144:                                              ; preds = %141, %144
  %145 = phi i8* [ %149, %144 ], [ %142, %141 ]
  %146 = phi i8* [ %148, %144 ], [ %143, %141 ]
  %147 = load i8, i8* %146, align 1
  store i8 %147, i8* %145, align 1
  %148 = getelementptr inbounds i8, i8* %146, i64 1
  %149 = getelementptr inbounds i8, i8* %145, i64 1
  %150 = icmp eq i8* %148, %29
  br i1 %150, label %151, label %144, !llvm.loop !27

151:                                              ; preds = %144, %139, %46
  %152 = phi i8* [ %47, %46 ], [ %62, %139 ], [ %149, %144 ]
  store i8 0, i8* %152, align 1
  %153 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 16, i1 false) #9
  %154 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %155 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %154, i64 0, i32 1, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp slt i8 %156, 0
  %158 = load i8*, i8** %23, align 8
  %159 = select i1 %157, i8* %158, i8* %22
  %160 = load i64, i64* %24, align 8
  %161 = zext i8 %156 to i64
  %162 = select i1 %157, i64 %160, i64 %161
  %163 = call zeroext i1 @_ZN3net4asn131ExtractSubjectPublicKeyFromSPKIEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPS6_(i8* %159, i64 %162, %"class.base::BasicStringPiece"* nonnull %5) #9
  br i1 %163, label %170, label %164

164:                                              ; preds = %151
  %165 = call i8* @_Znwm(i64 400) #11
  %166 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %165, i8** %166, align 8
  %167 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %168 = bitcast i64* %167 to <2 x i64>*
  store <2 x i64> <i64 392, i64 -9223372036854775408>, <2 x i64>* %168, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %165, i8* align 16 getelementptr inbounds ([393 x i8], [393 x i8]* @_ZN12_GLOBAL__N_118kDummyRSAPublicKeyE, i64 0, i64 0), i64 392, i1 false) #9
  %169 = getelementptr inbounds i8, i8* %165, i64 392
  store i8 0, i8* %169, align 1
  br label %751

170:                                              ; preds = %151
  %171 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %172 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %173 = bitcast %"class.std::__1::vector.131"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %173) #9
  %174 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 0
  %175 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 1
  %176 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %177 = load i8*, i8** %171, align 8
  %178 = getelementptr inbounds i8, i8* %177, i64 10
  %179 = load i64, i64* %172, align 8
  %180 = getelementptr inbounds i8, i8* %177, i64 %179
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 0, i64 24, i1 false) #9
  %181 = add i64 %179, -10
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %292, label %183

183:                                              ; preds = %170
  %184 = icmp slt i64 %181, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = bitcast %"class.std::__1::vector.131"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %186) #10
  unreachable

187:                                              ; preds = %183
  %188 = call i8* @_Znwm(i64 %181) #11
  store i8* %188, i8** %175, align 8
  store i8* %188, i8** %174, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 %181
  store i8* %189, i8** %176, align 8
  %190 = bitcast i8** %175 to i64*
  %191 = icmp ult i64 %181, 32
  br i1 %191, label %278, label %192

192:                                              ; preds = %187
  %193 = getelementptr i8, i8* %188, i64 %181
  %194 = icmp ult i8* %188, %180
  %195 = icmp ult i8* %178, %193
  %196 = and i1 %194, %195
  br i1 %196, label %278, label %197

197:                                              ; preds = %192
  %198 = and i64 %181, -32
  %199 = getelementptr i8, i8* %188, i64 %198
  %200 = getelementptr i8, i8* %178, i64 %198
  %201 = add i64 %198, -32
  %202 = lshr exact i64 %201, 5
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 3
  %205 = icmp ult i64 %201, 96
  br i1 %205, label %257, label %206

206:                                              ; preds = %197
  %207 = sub nsw i64 %203, %204
  br label %208

208:                                              ; preds = %208, %206
  %209 = phi i64 [ 0, %206 ], [ %254, %208 ]
  %210 = phi i64 [ %207, %206 ], [ %255, %208 ]
  %211 = getelementptr i8, i8* %188, i64 %209
  %212 = getelementptr i8, i8* %178, i64 %209
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !alias.scope !28
  %215 = getelementptr i8, i8* %212, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !28
  %218 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %214, <16 x i8>* %218, align 1, !alias.scope !31, !noalias !28
  %219 = getelementptr i8, i8* %211, i64 16
  %220 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %220, align 1, !alias.scope !31, !noalias !28
  %221 = or i64 %209, 32
  %222 = getelementptr i8, i8* %188, i64 %221
  %223 = getelementptr i8, i8* %178, i64 %221
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1, !alias.scope !28
  %226 = getelementptr i8, i8* %223, i64 16
  %227 = bitcast i8* %226 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1, !alias.scope !28
  %229 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> %225, <16 x i8>* %229, align 1, !alias.scope !31, !noalias !28
  %230 = getelementptr i8, i8* %222, i64 16
  %231 = bitcast i8* %230 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %231, align 1, !alias.scope !31, !noalias !28
  %232 = or i64 %209, 64
  %233 = getelementptr i8, i8* %188, i64 %232
  %234 = getelementptr i8, i8* %178, i64 %232
  %235 = bitcast i8* %234 to <16 x i8>*
  %236 = load <16 x i8>, <16 x i8>* %235, align 1, !alias.scope !28
  %237 = getelementptr i8, i8* %234, i64 16
  %238 = bitcast i8* %237 to <16 x i8>*
  %239 = load <16 x i8>, <16 x i8>* %238, align 1, !alias.scope !28
  %240 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %236, <16 x i8>* %240, align 1, !alias.scope !31, !noalias !28
  %241 = getelementptr i8, i8* %233, i64 16
  %242 = bitcast i8* %241 to <16 x i8>*
  store <16 x i8> %239, <16 x i8>* %242, align 1, !alias.scope !31, !noalias !28
  %243 = or i64 %209, 96
  %244 = getelementptr i8, i8* %188, i64 %243
  %245 = getelementptr i8, i8* %178, i64 %243
  %246 = bitcast i8* %245 to <16 x i8>*
  %247 = load <16 x i8>, <16 x i8>* %246, align 1, !alias.scope !28
  %248 = getelementptr i8, i8* %245, i64 16
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !28
  %251 = bitcast i8* %244 to <16 x i8>*
  store <16 x i8> %247, <16 x i8>* %251, align 1, !alias.scope !31, !noalias !28
  %252 = getelementptr i8, i8* %244, i64 16
  %253 = bitcast i8* %252 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %253, align 1, !alias.scope !31, !noalias !28
  %254 = add i64 %209, 128
  %255 = add i64 %210, -4
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %208, !llvm.loop !33

257:                                              ; preds = %208, %197
  %258 = phi i64 [ 0, %197 ], [ %254, %208 ]
  %259 = icmp eq i64 %204, 0
  br i1 %259, label %276, label %260

260:                                              ; preds = %257, %260
  %261 = phi i64 [ %273, %260 ], [ %258, %257 ]
  %262 = phi i64 [ %274, %260 ], [ %204, %257 ]
  %263 = getelementptr i8, i8* %188, i64 %261
  %264 = getelementptr i8, i8* %178, i64 %261
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 1, !alias.scope !28
  %267 = getelementptr i8, i8* %264, i64 16
  %268 = bitcast i8* %267 to <16 x i8>*
  %269 = load <16 x i8>, <16 x i8>* %268, align 1, !alias.scope !28
  %270 = bitcast i8* %263 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %270, align 1, !alias.scope !31, !noalias !28
  %271 = getelementptr i8, i8* %263, i64 16
  %272 = bitcast i8* %271 to <16 x i8>*
  store <16 x i8> %269, <16 x i8>* %272, align 1, !alias.scope !31, !noalias !28
  %273 = add i64 %261, 32
  %274 = add i64 %262, -1
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %260, !llvm.loop !34

276:                                              ; preds = %260, %257
  %277 = icmp eq i64 %181, %198
  br i1 %277, label %288, label %278

278:                                              ; preds = %276, %192, %187
  %279 = phi i8* [ %188, %192 ], [ %188, %187 ], [ %199, %276 ]
  %280 = phi i8* [ %178, %192 ], [ %178, %187 ], [ %200, %276 ]
  br label %281

281:                                              ; preds = %278, %281
  %282 = phi i8* [ %286, %281 ], [ %279, %278 ]
  %283 = phi i8* [ %285, %281 ], [ %280, %278 ]
  %284 = load i8, i8* %283, align 1
  store i8 %284, i8* %282, align 1
  %285 = getelementptr inbounds i8, i8* %283, i64 1
  %286 = getelementptr inbounds i8, i8* %282, i64 1
  %287 = icmp eq i8* %285, %180
  br i1 %287, label %288, label %281, !llvm.loop !35

288:                                              ; preds = %281, %276
  %289 = phi i8* [ %199, %276 ], [ %286, %281 ]
  %290 = load i8*, i8** %174, align 8
  %291 = ptrtoint i8* %289 to i64
  store i64 %291, i64* %190, align 8
  br label %292

292:                                              ; preds = %170, %288
  %293 = phi i8* [ null, %170 ], [ %290, %288 ]
  %294 = call i8* @_Znam(i64 4096) #11
  %295 = bitcast i8* %294 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %294, i8 0, i64 4096, i1 false) #9
  %296 = getelementptr i8, i8* %294, i64 256
  %297 = getelementptr i8, i8* %293, i64 256
  %298 = icmp ult i8* %294, %297
  %299 = icmp ult i8* %293, %296
  %300 = and i1 %298, %299
  br i1 %300, label %355, label %301

301:                                              ; preds = %292
  %302 = getelementptr inbounds i8, i8* %294, i64 -12
  %303 = bitcast i8* %302 to i32*
  br label %304

304:                                              ; preds = %301, %304
  %305 = phi i64 [ %328, %304 ], [ 0, %301 ]
  %306 = shl i64 %305, 2
  %307 = getelementptr inbounds i8, i8* %293, i64 %306
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %311 = shufflevector <16 x i8> %309, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %312 = shufflevector <16 x i8> %309, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %313 = shufflevector <16 x i8> %309, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %314 = zext <4 x i8> %310 to <4 x i32>
  %315 = shl nuw nsw <4 x i32> %314, <i32 8, i32 8, i32 8, i32 8>
  %316 = zext <4 x i8> %311 to <4 x i32>
  %317 = or <4 x i32> %315, %316
  %318 = shl nuw nsw <4 x i32> %317, <i32 8, i32 8, i32 8, i32 8>
  %319 = zext <4 x i8> %312 to <4 x i32>
  %320 = or <4 x i32> %318, %319
  %321 = shl nuw <4 x i32> %320, <i32 8, i32 8, i32 8, i32 8>
  %322 = zext <4 x i8> %313 to <4 x i32>
  %323 = or <4 x i32> %321, %322
  %324 = sub nuw nsw i64 63, %305
  %325 = shufflevector <4 x i32> %323, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %326 = getelementptr inbounds i32, i32* %303, i64 %324
  %327 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %327, align 4, !alias.scope !36, !noalias !39
  %328 = add i64 %305, 4
  %329 = icmp eq i64 %328, 64
  br i1 %329, label %330, label %304, !llvm.loop !41

330:                                              ; preds = %304, %355
  %331 = load i32, i32* %295, align 4
  %332 = zext i32 %331 to i64
  %333 = bitcast %"struct.(anonymous namespace)::RSAPublicKey"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 524, i8* nonnull %333) #9
  %334 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 1
  %335 = bitcast i32* %334 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %335, i8 -86, i64 516, i1 false)
  %336 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 0
  store i32 64, i32* %336, align 4
  %337 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 4
  store i32 65537, i32* %337, align 4
  br label %338

338:                                              ; preds = %338, %330
  %339 = phi i64 [ %332, %330 ], [ %340, %338 ]
  %340 = phi i64 [ 4294967296, %330 ], [ %344, %338 ]
  %341 = phi i64 [ 1, %330 ], [ %342, %338 ]
  %342 = phi i64 [ 0, %330 ], [ %346, %338 ]
  %343 = udiv i64 %339, %340
  %344 = urem i64 %339, %340
  %345 = mul i64 %343, %342
  %346 = sub i64 %341, %345
  %347 = icmp eq i64 %344, 0
  br i1 %347, label %348, label %338

348:                                              ; preds = %338
  %349 = icmp eq i64 %340, 1
  %350 = trunc i64 %342 to i32
  %351 = select i1 %349, i32 %350, i32 0
  %352 = sub i32 0, %351
  %353 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 1
  store i32 %352, i32* %353, align 4
  %354 = icmp eq i32 %351, 0
  br i1 %354, label %383, label %389

355:                                              ; preds = %292, %355
  %356 = phi i64 [ %381, %355 ], [ 0, %292 ]
  %357 = shl i64 %356, 2
  %358 = getelementptr inbounds i8, i8* %293, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = shl nuw nsw i32 %360, 8
  %362 = or i64 %357, 1
  %363 = getelementptr inbounds i8, i8* %293, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = or i32 %361, %365
  %367 = shl nuw nsw i32 %366, 8
  %368 = or i64 %357, 2
  %369 = getelementptr inbounds i8, i8* %293, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = or i32 %367, %371
  %373 = shl nuw i32 %372, 8
  %374 = or i64 %357, 3
  %375 = getelementptr inbounds i8, i8* %293, i64 %374
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i32
  %378 = or i32 %373, %377
  %379 = sub nuw nsw i64 63, %356
  %380 = getelementptr inbounds i32, i32* %295, i64 %379
  store i32 %378, i32* %380, align 4
  %381 = add nuw nsw i64 %356, 1
  %382 = icmp eq i64 %381, 64
  br i1 %382, label %330, label %355, !llvm.loop !42

383:                                              ; preds = %348
  %384 = call i8* @_Znwm(i64 400) #11
  %385 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %384, i8** %385, align 8
  %386 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %387 = bitcast i64* %386 to <2 x i64>*
  store <2 x i64> <i64 392, i64 -9223372036854775408>, <2 x i64>* %387, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %384, i8* align 16 getelementptr inbounds ([393 x i8], [393 x i8]* @_ZN12_GLOBAL__N_118kDummyRSAPublicKeyE, i64 0, i64 0), i64 392, i1 false) #9
  %388 = getelementptr inbounds i8, i8* %384, i64 392
  store i8 0, i8* %388, align 1
  br label %744

389:                                              ; preds = %348
  %390 = call i8* @_Znam(i64 4096) #11
  %391 = bitcast i8* %390 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %390, i8 0, i64 4096, i1 false) #9
  %392 = getelementptr inbounds i8, i8* %390, i64 512
  %393 = bitcast i8* %392 to i32*
  store i32 1, i32* %393, align 4
  br label %402

394:                                              ; preds = %409
  %395 = add nsw i64 %403, -1
  %396 = getelementptr inbounds i32, i32* %391, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = getelementptr inbounds i32, i32* %295, i64 %395
  %399 = load i32, i32* %398, align 4
  %400 = icmp ugt i32 %397, %399
  br i1 %400, label %401, label %786

401:                                              ; preds = %788, %394, %402
  br label %413

402:                                              ; preds = %788, %389
  %403 = phi i64 [ 1023, %389 ], [ %789, %788 ]
  %404 = getelementptr inbounds i32, i32* %391, i64 %403
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds i32, i32* %295, i64 %403
  %407 = load i32, i32* %406, align 4
  %408 = icmp ugt i32 %405, %407
  br i1 %408, label %401, label %409

409:                                              ; preds = %402
  %410 = icmp ult i32 %405, %407
  br i1 %410, label %411, label %394

411:                                              ; preds = %786, %409
  %412 = call i8* @_Znam(i64 4096) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %412, i8* nonnull align 4 %390, i64 4096, i1 false) #9
  br label %722

413:                                              ; preds = %782, %401
  %414 = phi i64 [ 1023, %401 ], [ %783, %782 ]
  %415 = phi i32 [ 1023, %401 ], [ %784, %782 ]
  %416 = getelementptr inbounds i32, i32* %391, i64 %414
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %424

419:                                              ; preds = %413
  %420 = add nsw i64 %414, -1
  %421 = getelementptr inbounds i32, i32* %391, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %777, label %424

424:                                              ; preds = %777, %419, %413
  %425 = phi i64 [ %414, %413 ], [ %420, %419 ], [ %778, %777 ]
  %426 = trunc i64 %425 to i32
  br label %427

427:                                              ; preds = %782, %424
  %428 = phi i32 [ %426, %424 ], [ %784, %782 ]
  br label %429

429:                                              ; preds = %773, %427
  %430 = phi i64 [ 1023, %427 ], [ %774, %773 ]
  %431 = phi i32 [ 1023, %427 ], [ %775, %773 ]
  %432 = getelementptr inbounds i32, i32* %295, i64 %430
  %433 = load i32, i32* %432, align 4
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %440

435:                                              ; preds = %429
  %436 = add nsw i64 %430, -1
  %437 = getelementptr inbounds i32, i32* %295, i64 %436
  %438 = load i32, i32* %437, align 4
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %768, label %440

440:                                              ; preds = %768, %435, %429
  %441 = phi i64 [ %430, %429 ], [ %436, %435 ], [ %769, %768 ]
  %442 = trunc i64 %441 to i32
  br label %443

443:                                              ; preds = %773, %440
  %444 = phi i32 [ %442, %440 ], [ %775, %773 ]
  %445 = call i8* @_Znam(i64 4096) #11
  %446 = bitcast i8* %445 to i32*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %445, i8* nonnull align 4 %390, i64 4096, i1 false) #9
  %447 = sext i32 %428 to i64
  %448 = getelementptr inbounds i32, i32* %391, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = sext i32 %444 to i64
  %451 = getelementptr inbounds i32, i32* %295, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = icmp ult i32 %449, %452
  %454 = sub i32 %428, %444
  %455 = zext i1 %453 to i32
  %456 = sub i32 %454, %455
  %457 = icmp sgt i32 %456, -1
  br i1 %457, label %458, label %722

458:                                              ; preds = %443
  %459 = sext i32 %456 to i64
  %460 = sub nsw i64 1024, %459
  %461 = sub nsw i64 1023, %459
  %462 = shl nsw i64 %459, 2
  %463 = sub nsw i64 4092, %462
  %464 = sub nsw i64 4096, %462
  %465 = sub nsw i64 1024, %459
  %466 = sub nsw i64 1023, %459
  br label %467

467:                                              ; preds = %719, %458
  %468 = phi i64 [ %721, %719 ], [ 0, %458 ]
  %469 = phi i64 [ %720, %719 ], [ %459, %458 ]
  %470 = add i64 %465, %468
  %471 = add i64 %466, %468
  %472 = icmp slt i64 %471, 0
  %473 = select i1 %472, i64 %471, i64 0
  %474 = sub i64 %470, %473
  %475 = add i64 %474, -8
  %476 = lshr i64 %475, 3
  %477 = add nuw nsw i64 %476, 1
  %478 = mul nsw i64 %468, -4
  %479 = add i64 %462, %478
  %480 = add i64 %461, %468
  %481 = icmp slt i64 %480, 0
  %482 = select i1 %481, i64 %480, i64 0
  %483 = shl i64 %482, 2
  %484 = add i64 %479, %483
  %485 = shl nuw nsw i64 %468, 2
  %486 = add i64 %464, %485
  %487 = add i64 %461, %468
  %488 = icmp slt i64 %487, 0
  %489 = select i1 %488, i64 %487, i64 0
  %490 = sub i64 %487, %489
  %491 = add i64 %460, %468
  %492 = add i64 %461, %468
  %493 = icmp slt i64 %492, 0
  %494 = select i1 %493, i64 %492, i64 0
  %495 = sub i64 %491, %494
  %496 = call i8* @_Znam(i64 4096) #11
  %497 = bitcast i8* %496 to i32*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %496, i8* nonnull align 4 %294, i64 4096, i1 false) #9
  %498 = sub nsw i64 1023, %469
  %499 = icmp ult i64 %495, 8
  br i1 %499, label %500, label %502

500:                                              ; preds = %594, %520, %502, %467
  %501 = phi i64 [ %498, %520 ], [ %498, %502 ], [ %498, %467 ], [ %530, %594 ]
  br label %602

502:                                              ; preds = %467
  %503 = shl nuw nsw i64 %468, 2
  %504 = add i64 %463, %503
  %505 = getelementptr i8, i8* %496, i64 4092
  %506 = ptrtoint i8* %505 to i64
  %507 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %490, i64 4)
  %508 = extractvalue { i64, i1 } %507, 0
  %509 = extractvalue { i64, i1 } %507, 1
  %510 = icmp ugt i64 %508, %506
  %511 = or i1 %510, %509
  %512 = getelementptr i8, i8* %496, i64 %504
  %513 = ptrtoint i8* %512 to i64
  %514 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %490, i64 4)
  %515 = extractvalue { i64, i1 } %514, 0
  %516 = extractvalue { i64, i1 } %514, 1
  %517 = icmp ugt i64 %515, %513
  %518 = or i1 %517, %516
  %519 = or i1 %511, %518
  br i1 %519, label %500, label %520

520:                                              ; preds = %502
  %521 = getelementptr i8, i8* %496, i64 %484
  %522 = getelementptr i8, i8* %496, i64 4096
  %523 = getelementptr i8, i8* %496, i64 %483
  %524 = getelementptr i8, i8* %496, i64 %486
  %525 = icmp ult i8* %521, %524
  %526 = icmp ult i8* %523, %522
  %527 = and i1 %525, %526
  br i1 %527, label %500, label %528

528:                                              ; preds = %520
  %529 = and i64 %495, -8
  %530 = sub i64 %498, %529
  %531 = and i64 %477, 1
  %532 = icmp eq i64 %476, 0
  br i1 %532, label %574, label %533

533:                                              ; preds = %528
  %534 = sub nuw nsw i64 %477, %531
  br label %535

535:                                              ; preds = %535, %533
  %536 = phi i64 [ 0, %533 ], [ %571, %535 ]
  %537 = phi i64 [ %534, %533 ], [ %572, %535 ]
  %538 = sub i64 %498, %536
  %539 = getelementptr inbounds i32, i32* %497, i64 %538
  %540 = getelementptr inbounds i32, i32* %539, i64 -3
  %541 = bitcast i32* %540 to <4 x i32>*
  %542 = load <4 x i32>, <4 x i32>* %541, align 4, !alias.scope !43
  %543 = getelementptr inbounds i32, i32* %539, i64 -4
  %544 = getelementptr inbounds i32, i32* %543, i64 -3
  %545 = bitcast i32* %544 to <4 x i32>*
  %546 = load <4 x i32>, <4 x i32>* %545, align 4, !alias.scope !43
  %547 = add nsw i64 %538, %469
  %548 = getelementptr inbounds i32, i32* %497, i64 %547
  %549 = getelementptr inbounds i32, i32* %548, i64 -3
  %550 = bitcast i32* %549 to <4 x i32>*
  store <4 x i32> %542, <4 x i32>* %550, align 4, !alias.scope !46, !noalias !43
  %551 = getelementptr inbounds i32, i32* %548, i64 -4
  %552 = getelementptr inbounds i32, i32* %551, i64 -3
  %553 = bitcast i32* %552 to <4 x i32>*
  store <4 x i32> %546, <4 x i32>* %553, align 4, !alias.scope !46, !noalias !43
  %554 = or i64 %536, 8
  %555 = sub i64 %498, %554
  %556 = getelementptr inbounds i32, i32* %497, i64 %555
  %557 = getelementptr inbounds i32, i32* %556, i64 -3
  %558 = bitcast i32* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 4, !alias.scope !43
  %560 = getelementptr inbounds i32, i32* %556, i64 -4
  %561 = getelementptr inbounds i32, i32* %560, i64 -3
  %562 = bitcast i32* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4, !alias.scope !43
  %564 = add nsw i64 %555, %469
  %565 = getelementptr inbounds i32, i32* %497, i64 %564
  %566 = getelementptr inbounds i32, i32* %565, i64 -3
  %567 = bitcast i32* %566 to <4 x i32>*
  store <4 x i32> %559, <4 x i32>* %567, align 4, !alias.scope !46, !noalias !43
  %568 = getelementptr inbounds i32, i32* %565, i64 -4
  %569 = getelementptr inbounds i32, i32* %568, i64 -3
  %570 = bitcast i32* %569 to <4 x i32>*
  store <4 x i32> %563, <4 x i32>* %570, align 4, !alias.scope !46, !noalias !43
  %571 = add i64 %536, 16
  %572 = add i64 %537, -2
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %535, !llvm.loop !48

574:                                              ; preds = %535, %528
  %575 = phi i64 [ 0, %528 ], [ %571, %535 ]
  %576 = icmp eq i64 %531, 0
  br i1 %576, label %594, label %577

577:                                              ; preds = %574
  %578 = sub i64 %498, %575
  %579 = getelementptr inbounds i32, i32* %497, i64 %578
  %580 = getelementptr inbounds i32, i32* %579, i64 -3
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !43
  %583 = getelementptr inbounds i32, i32* %579, i64 -4
  %584 = getelementptr inbounds i32, i32* %583, i64 -3
  %585 = bitcast i32* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 4, !alias.scope !43
  %587 = add nsw i64 %578, %469
  %588 = getelementptr inbounds i32, i32* %497, i64 %587
  %589 = getelementptr inbounds i32, i32* %588, i64 -3
  %590 = bitcast i32* %589 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %590, align 4, !alias.scope !46, !noalias !43
  %591 = getelementptr inbounds i32, i32* %588, i64 -4
  %592 = getelementptr inbounds i32, i32* %591, i64 -3
  %593 = bitcast i32* %592 to <4 x i32>*
  store <4 x i32> %586, <4 x i32>* %593, align 4, !alias.scope !46, !noalias !43
  br label %594

594:                                              ; preds = %574, %577
  %595 = icmp eq i64 %495, %529
  br i1 %595, label %596, label %500

596:                                              ; preds = %602, %594
  %597 = icmp sgt i64 %469, 0
  br i1 %597, label %599, label %598

598:                                              ; preds = %599, %596
  br label %610

599:                                              ; preds = %596
  %600 = shl i64 %469, 2
  %601 = and i64 %600, 17179869180
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %496, i8 0, i64 %601, i1 false) #9
  br label %598

602:                                              ; preds = %500, %602
  %603 = phi i64 [ %608, %602 ], [ %501, %500 ]
  %604 = getelementptr inbounds i32, i32* %497, i64 %603
  %605 = load i32, i32* %604, align 4
  %606 = add nsw i64 %603, %469
  %607 = getelementptr inbounds i32, i32* %497, i64 %606
  store i32 %605, i32* %607, align 4
  %608 = add nsw i64 %603, -1
  %609 = icmp sgt i64 %603, 0
  br i1 %609, label %602, label %596, !llvm.loop !49

610:                                              ; preds = %598, %659
  %611 = phi i64 [ %660, %659 ], [ 1, %598 ]
  %612 = phi i64 [ %615, %659 ], [ 4294967296, %598 ]
  %613 = phi i64 [ %617, %659 ], [ 0, %598 ]
  br label %614

614:                                              ; preds = %663, %610
  %615 = phi i64 [ %612, %610 ], [ %617, %663 ]
  %616 = add i64 %615, %613
  %617 = lshr i64 %616, 1
  %618 = call i8* @_Znam(i64 4096) #11
  %619 = bitcast i8* %618 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %618, i8 0, i64 4096, i1 false) #9
  %620 = and i64 %617, 4294967295
  br label %621

621:                                              ; preds = %621, %614
  %622 = phi i64 [ 0, %614 ], [ %641, %621 ]
  %623 = phi i64 [ 0, %614 ], [ %640, %621 ]
  %624 = getelementptr inbounds i32, i32* %497, i64 %622
  %625 = load i32, i32* %624, align 4
  %626 = zext i32 %625 to i64
  %627 = mul nuw i64 %620, %626
  %628 = add i64 %627, %623
  %629 = trunc i64 %628 to i32
  %630 = getelementptr inbounds i32, i32* %619, i64 %622
  store i32 %629, i32* %630, align 4
  %631 = lshr i64 %628, 32
  %632 = or i64 %622, 1
  %633 = getelementptr inbounds i32, i32* %497, i64 %632
  %634 = load i32, i32* %633, align 4
  %635 = zext i32 %634 to i64
  %636 = mul nuw i64 %620, %635
  %637 = add i64 %636, %631
  %638 = trunc i64 %637 to i32
  %639 = getelementptr inbounds i32, i32* %619, i64 %632
  store i32 %638, i32* %639, align 4
  %640 = lshr i64 %637, 32
  %641 = add nuw nsw i64 %622, 2
  %642 = icmp eq i64 %641, 1024
  br i1 %642, label %650, label %621

643:                                              ; preds = %657
  %644 = add nsw i64 %651, -1
  %645 = getelementptr inbounds i32, i32* %446, i64 %644
  %646 = load i32, i32* %645, align 4
  %647 = getelementptr inbounds i32, i32* %619, i64 %644
  %648 = load i32, i32* %647, align 4
  %649 = icmp ugt i32 %646, %648
  br i1 %649, label %659, label %763

650:                                              ; preds = %621, %765
  %651 = phi i64 [ %766, %765 ], [ 1023, %621 ]
  %652 = getelementptr inbounds i32, i32* %446, i64 %651
  %653 = load i32, i32* %652, align 4
  %654 = getelementptr inbounds i32, i32* %619, i64 %651
  %655 = load i32, i32* %654, align 4
  %656 = icmp ugt i32 %653, %655
  br i1 %656, label %659, label %657

657:                                              ; preds = %650
  %658 = icmp ult i32 %653, %655
  br i1 %658, label %663, label %643

659:                                              ; preds = %643, %650
  call void @_ZdaPv(i8* nonnull %618) #11
  %660 = add nuw i64 %617, 1
  %661 = icmp ult i64 %660, %615
  br i1 %661, label %610, label %667

662:                                              ; preds = %765
  call void @_ZdaPv(i8* nonnull %618) #11
  br label %667

663:                                              ; preds = %763, %657
  call void @_ZdaPv(i8* nonnull %618) #11
  %664 = icmp ult i64 %611, %617
  br i1 %664, label %614, label %665

665:                                              ; preds = %663
  %666 = and i64 %613, 4294967295
  br label %667

667:                                              ; preds = %659, %665, %662
  %668 = phi i64 [ %666, %665 ], [ %620, %662 ], [ %620, %659 ]
  %669 = call i8* @_Znam(i64 4096) #11
  %670 = bitcast i8* %669 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %669, i8 0, i64 4096, i1 false) #9
  br label %671

671:                                              ; preds = %671, %667
  %672 = phi i64 [ 0, %667 ], [ %691, %671 ]
  %673 = phi i64 [ 0, %667 ], [ %690, %671 ]
  %674 = getelementptr inbounds i32, i32* %497, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = zext i32 %675 to i64
  %677 = mul nuw i64 %668, %676
  %678 = add i64 %677, %673
  %679 = trunc i64 %678 to i32
  %680 = getelementptr inbounds i32, i32* %670, i64 %672
  store i32 %679, i32* %680, align 4
  %681 = lshr i64 %678, 32
  %682 = or i64 %672, 1
  %683 = getelementptr inbounds i32, i32* %497, i64 %682
  %684 = load i32, i32* %683, align 4
  %685 = zext i32 %684 to i64
  %686 = mul nuw i64 %668, %685
  %687 = add i64 %686, %681
  %688 = trunc i64 %687 to i32
  %689 = getelementptr inbounds i32, i32* %670, i64 %682
  store i32 %688, i32* %689, align 4
  %690 = lshr i64 %687, 32
  %691 = add nuw nsw i64 %672, 2
  %692 = icmp eq i64 %691, 1024
  br i1 %692, label %693, label %671

693:                                              ; preds = %671, %693
  %694 = phi i64 [ %717, %693 ], [ 0, %671 ]
  %695 = phi i64 [ %715, %693 ], [ 0, %671 ]
  %696 = getelementptr inbounds i32, i32* %446, i64 %694
  %697 = load i32, i32* %696, align 4
  %698 = zext i32 %697 to i64
  %699 = getelementptr inbounds i32, i32* %670, i64 %694
  %700 = load i32, i32* %699, align 4
  %701 = zext i32 %700 to i64
  %702 = sub nsw i64 %698, %701
  %703 = sub nsw i64 %702, %695
  %704 = lshr i64 %703, 63
  %705 = trunc i64 %703 to i32
  store i32 %705, i32* %696, align 4
  %706 = or i64 %694, 1
  %707 = getelementptr inbounds i32, i32* %446, i64 %706
  %708 = load i32, i32* %707, align 4
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds i32, i32* %670, i64 %706
  %711 = load i32, i32* %710, align 4
  %712 = zext i32 %711 to i64
  %713 = sub nsw i64 %709, %712
  %714 = sub nsw i64 %713, %704
  %715 = lshr i64 %714, 63
  %716 = trunc i64 %714 to i32
  store i32 %716, i32* %707, align 4
  %717 = add nuw nsw i64 %694, 2
  %718 = icmp eq i64 %717, 1024
  br i1 %718, label %719, label %693

719:                                              ; preds = %693
  call void @_ZdaPv(i8* nonnull %669) #11
  call void @_ZdaPv(i8* nonnull %496) #11
  %720 = add nsw i64 %469, -1
  %721 = add i64 %468, 1
  br i1 %597, label %467, label %722

722:                                              ; preds = %719, %443, %411
  %723 = phi i8* [ %412, %411 ], [ %445, %443 ], [ %445, %719 ]
  %724 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 2, i64 0
  %725 = bitcast i32* %724 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %725, i8* nonnull align 4 %294, i64 256, i1 false)
  %726 = getelementptr inbounds %"struct.(anonymous namespace)::RSAPublicKey", %"struct.(anonymous namespace)::RSAPublicKey"* %7, i64 0, i32 3, i64 0
  %727 = bitcast i32* %726 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %727, i8* align 4 %723, i64 256, i1 false)
  call void @_ZdaPv(i8* nonnull %294) #11
  call void @_ZdaPv(i8* nonnull %390) #11
  call void @_ZdaPv(i8* %723) #11
  %728 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %728) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %728, i8 0, i64 24, i1 false) #9
  %729 = call i8* @_Znwm(i64 528) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %729, i8* nonnull align 4 %333, i64 524, i1 false) #9
  %730 = getelementptr inbounds i8, i8* %729, i64 524
  store i8 0, i8* %730, align 1
  %731 = bitcast %"class.base::BasicStringPiece"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %731) #9
  %732 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 0
  store i8* %729, i8** %732, align 8
  %733 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 1
  store i64 524, i64* %733, align 8
  call void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %9, %"class.std::__1::basic_string"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %731) #9
  %734 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %734, i8* nonnull align 8 %728, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %728, i8 0, i64 24, i1 false) #9
  call void @_ZdlPv(i8* nonnull %729) #11
  %735 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %736 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %735, i64 0, i32 1, i32 0
  %737 = load i8, i8* %736, align 1
  %738 = icmp slt i8 %737, 0
  br i1 %738, label %739, label %742

739:                                              ; preds = %722
  %740 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %741 = load i8*, i8** %740, align 8
  call void @_ZdlPv(i8* %741) #11
  br label %742

742:                                              ; preds = %722, %739
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %728) #9
  %743 = load i8*, i8** %174, align 8
  br label %744

744:                                              ; preds = %742, %383
  %745 = phi i8* [ %743, %742 ], [ %293, %383 ]
  call void @llvm.lifetime.end.p0i8(i64 524, i8* nonnull %333) #9
  %746 = icmp eq i8* %745, null
  br i1 %746, label %750, label %747

747:                                              ; preds = %744
  %748 = ptrtoint i8* %745 to i64
  %749 = bitcast i8** %175 to i64*
  store i64 %748, i64* %749, align 8
  call void @_ZdlPv(i8* nonnull %745) #11
  br label %750

750:                                              ; preds = %744, %747
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %173) #9
  br label %751

751:                                              ; preds = %750, %164
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #9
  %752 = load i8, i8* %155, align 1
  %753 = icmp slt i8 %752, 0
  br i1 %753, label %754, label %756

754:                                              ; preds = %751
  %755 = load i8*, i8** %23, align 8
  call void @_ZdlPv(i8* %755) #11
  br label %756

756:                                              ; preds = %754, %751
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #9
  %757 = load i8*, i8** %11, align 8
  %758 = icmp eq i8* %757, null
  br i1 %758, label %762, label %759

759:                                              ; preds = %756
  %760 = ptrtoint i8* %757 to i64
  %761 = bitcast i8** %12 to i64*
  store i64 %760, i64* %761, align 8
  call void @_ZdlPv(i8* nonnull %757) #11
  br label %762

762:                                              ; preds = %14, %756, %759
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  ret void

763:                                              ; preds = %643
  %764 = icmp ult i32 %646, %648
  br i1 %764, label %663, label %765

765:                                              ; preds = %763
  %766 = add nsw i64 %651, -2
  %767 = icmp eq i64 %644, 0
  br i1 %767, label %662, label %650

768:                                              ; preds = %435
  %769 = add nsw i64 %430, -2
  %770 = getelementptr inbounds i32, i32* %295, i64 %769
  %771 = load i32, i32* %770, align 4
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %440

773:                                              ; preds = %768
  %774 = add nsw i64 %430, -3
  %775 = add nsw i32 %431, -3
  %776 = icmp eq i64 %774, 0
  br i1 %776, label %443, label %429

777:                                              ; preds = %419
  %778 = add nsw i64 %414, -2
  %779 = getelementptr inbounds i32, i32* %391, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = icmp eq i32 %780, 0
  br i1 %781, label %782, label %424

782:                                              ; preds = %777
  %783 = add nsw i64 %414, -3
  %784 = add nsw i32 %415, -3
  %785 = icmp eq i64 %783, 0
  br i1 %785, label %427, label %413

786:                                              ; preds = %394
  %787 = icmp ult i32 %397, %399
  br i1 %787, label %411, label %788

788:                                              ; preds = %786
  %789 = add nsw i64 %403, -2
  %790 = icmp eq i64 %395, 0
  br i1 %790, label %401, label %402
}

declare zeroext i1 @_ZNK6crypto13RSAPrivateKey15ExportPublicKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"*, %"class.std::__1::vector.131"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3net4asn131ExtractSubjectPublicKeyFromSPKIEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPS6_(i8*, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14AndroidRSASignPN6crypto13RSAPrivateKeyERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.crypto::RSAPrivateKey"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.131", align 8
  %5 = alloca %"class.std::__1::vector.131", align 8
  %6 = bitcast %"class.std::__1::vector.131"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %19 = zext i8 %12 to i64
  %20 = select i1 %13, i8* %15, i8* %18
  %21 = select i1 %13, i64 %17, i64 %19
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #9
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %3
  %25 = bitcast i8** %8 to i64*
  br label %135

26:                                               ; preds = %3
  %27 = icmp slt i64 %21, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = bitcast %"class.std::__1::vector.131"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %29) #10
  unreachable

30:                                               ; preds = %26
  %31 = tail call i8* @_Znwm(i64 %21) #11
  store i8* %31, i8** %8, align 8
  store i8* %31, i8** %7, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 %21
  store i8* %32, i8** %9, align 8
  %33 = bitcast i8** %8 to i64*
  %34 = icmp ult i64 %21, 32
  br i1 %34, label %121, label %35

35:                                               ; preds = %30
  %36 = getelementptr i8, i8* %31, i64 %21
  %37 = icmp ult i8* %31, %22
  %38 = icmp ult i8* %20, %36
  %39 = and i1 %37, %38
  br i1 %39, label %121, label %40

40:                                               ; preds = %35
  %41 = and i64 %21, -32
  %42 = getelementptr i8, i8* %31, i64 %41
  %43 = getelementptr i8, i8* %20, i64 %41
  %44 = add i64 %41, -32
  %45 = lshr exact i64 %44, 5
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp ult i64 %44, 96
  br i1 %48, label %100, label %49

49:                                               ; preds = %40
  %50 = sub nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %97, %51 ]
  %53 = phi i64 [ %50, %49 ], [ %98, %51 ]
  %54 = getelementptr i8, i8* %31, i64 %52
  %55 = getelementptr i8, i8* %20, i64 %52
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !50
  %58 = getelementptr i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !50
  %61 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %61, align 1, !alias.scope !53, !noalias !50
  %62 = getelementptr i8, i8* %54, i64 16
  %63 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %63, align 1, !alias.scope !53, !noalias !50
  %64 = or i64 %52, 32
  %65 = getelementptr i8, i8* %31, i64 %64
  %66 = getelementptr i8, i8* %20, i64 %64
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !alias.scope !50
  %69 = getelementptr i8, i8* %66, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1, !alias.scope !50
  %72 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %72, align 1, !alias.scope !53, !noalias !50
  %73 = getelementptr i8, i8* %65, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %74, align 1, !alias.scope !53, !noalias !50
  %75 = or i64 %52, 64
  %76 = getelementptr i8, i8* %31, i64 %75
  %77 = getelementptr i8, i8* %20, i64 %75
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !50
  %80 = getelementptr i8, i8* %77, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !50
  %83 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !alias.scope !53, !noalias !50
  %84 = getelementptr i8, i8* %76, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %85, align 1, !alias.scope !53, !noalias !50
  %86 = or i64 %52, 96
  %87 = getelementptr i8, i8* %31, i64 %86
  %88 = getelementptr i8, i8* %20, i64 %86
  %89 = bitcast i8* %88 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !50
  %91 = getelementptr i8, i8* %88, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !50
  %94 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !53, !noalias !50
  %95 = getelementptr i8, i8* %87, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !53, !noalias !50
  %97 = add i64 %52, 128
  %98 = add i64 %53, -4
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %51, !llvm.loop !55

100:                                              ; preds = %51, %40
  %101 = phi i64 [ 0, %40 ], [ %97, %51 ]
  %102 = icmp eq i64 %47, 0
  br i1 %102, label %119, label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ %116, %103 ], [ %101, %100 ]
  %105 = phi i64 [ %117, %103 ], [ %47, %100 ]
  %106 = getelementptr i8, i8* %31, i64 %104
  %107 = getelementptr i8, i8* %20, i64 %104
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1, !alias.scope !50
  %110 = getelementptr i8, i8* %107, i64 16
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !50
  %113 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %113, align 1, !alias.scope !53, !noalias !50
  %114 = getelementptr i8, i8* %106, i64 16
  %115 = bitcast i8* %114 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %115, align 1, !alias.scope !53, !noalias !50
  %116 = add i64 %104, 32
  %117 = add i64 %105, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %103, !llvm.loop !56

119:                                              ; preds = %103, %100
  %120 = icmp eq i64 %21, %41
  br i1 %120, label %131, label %121

121:                                              ; preds = %119, %35, %30
  %122 = phi i8* [ %31, %35 ], [ %31, %30 ], [ %42, %119 ]
  %123 = phi i8* [ %20, %35 ], [ %20, %30 ], [ %43, %119 ]
  br label %124

124:                                              ; preds = %121, %124
  %125 = phi i8* [ %129, %124 ], [ %122, %121 ]
  %126 = phi i8* [ %128, %124 ], [ %123, %121 ]
  %127 = load i8, i8* %126, align 1
  store i8 %127, i8* %125, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 1
  %129 = getelementptr inbounds i8, i8* %125, i64 1
  %130 = icmp eq i8* %128, %22
  br i1 %130, label %131, label %124, !llvm.loop !57

131:                                              ; preds = %124, %119
  %132 = phi i8* [ %42, %119 ], [ %129, %124 ]
  %133 = load i8*, i8** %7, align 8
  %134 = ptrtoint i8* %132 to i64
  store i64 %134, i64* %33, align 8
  br label %135

135:                                              ; preds = %24, %131
  %136 = phi i64* [ %25, %24 ], [ %33, %131 ]
  %137 = phi i64 [ 0, %24 ], [ %134, %131 ]
  %138 = phi i8* [ null, %24 ], [ %133, %131 ]
  %139 = bitcast %"class.std::__1::vector.131"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %139) #9
  %140 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %5, i64 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 24, i1 false) #9
  %142 = ptrtoint i8* %138 to i64
  %143 = sub i64 %137, %142
  %144 = trunc i64 %143 to i32
  %145 = call zeroext i1 @_ZN6crypto16SignatureCreator4SignEPNS_13RSAPrivateKeyENS0_13HashAlgorithmEPKhiPNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"* %1, i32 0, i8* %138, i32 %144, %"class.std::__1::vector.131"* nonnull %5) #9
  br i1 %145, label %148, label %146

146:                                              ; preds = %135
  %147 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %147, i8 0, i64 24, i1 false) #9
  br label %279

148:                                              ; preds = %135
  %149 = load i8*, i8** %140, align 8
  %150 = ptrtoint i8* %149 to i64
  %151 = load i8*, i8** %141, align 8
  %152 = ptrtoint i8* %151 to i64
  %153 = sub i64 %152, %150
  %154 = icmp ugt i64 %153, -17
  br i1 %154, label %155, label %157

155:                                              ; preds = %148
  %156 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %156) #10
  unreachable

157:                                              ; preds = %148
  %158 = icmp ult i64 %153, 23
  br i1 %158, label %159, label %164

159:                                              ; preds = %157
  %160 = trunc i64 %153 to i8
  %161 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %162 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %161, i64 0, i32 1, i32 0
  store i8 %160, i8* %162, align 1
  %163 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %172

164:                                              ; preds = %157
  %165 = add nuw i64 %153, 16
  %166 = and i64 %165, -16
  %167 = call i8* @_Znwm(i64 %166) #11
  %168 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %167, i8** %168, align 8
  %169 = or i64 %166, -9223372036854775808
  %170 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %169, i64* %170, align 8
  %171 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %153, i64* %171, align 8
  br label %172

172:                                              ; preds = %164, %159
  %173 = phi i8* [ %163, %159 ], [ %167, %164 ]
  %174 = icmp eq i8* %149, %151
  br i1 %174, label %277, label %175

175:                                              ; preds = %172
  %176 = ptrtoint i8* %151 to i64
  %177 = sub i64 %176, %150
  %178 = icmp ult i64 %177, 32
  br i1 %178, label %267, label %179

179:                                              ; preds = %175
  %180 = ptrtoint i8* %151 to i64
  %181 = sub i64 %180, %150
  %182 = getelementptr i8, i8* %173, i64 %181
  %183 = icmp ult i8* %173, %151
  %184 = icmp ult i8* %149, %182
  %185 = and i1 %183, %184
  br i1 %185, label %267, label %186

186:                                              ; preds = %179
  %187 = and i64 %177, -32
  %188 = getelementptr i8, i8* %173, i64 %187
  %189 = getelementptr i8, i8* %149, i64 %187
  %190 = add i64 %187, -32
  %191 = lshr exact i64 %190, 5
  %192 = add nuw nsw i64 %191, 1
  %193 = and i64 %192, 3
  %194 = icmp ult i64 %190, 96
  br i1 %194, label %246, label %195

195:                                              ; preds = %186
  %196 = sub nsw i64 %192, %193
  br label %197

197:                                              ; preds = %197, %195
  %198 = phi i64 [ 0, %195 ], [ %243, %197 ]
  %199 = phi i64 [ %196, %195 ], [ %244, %197 ]
  %200 = getelementptr i8, i8* %173, i64 %198
  %201 = getelementptr i8, i8* %149, i64 %198
  %202 = bitcast i8* %201 to <16 x i8>*
  %203 = load <16 x i8>, <16 x i8>* %202, align 1, !alias.scope !58
  %204 = getelementptr i8, i8* %201, i64 16
  %205 = bitcast i8* %204 to <16 x i8>*
  %206 = load <16 x i8>, <16 x i8>* %205, align 1, !alias.scope !58
  %207 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> %203, <16 x i8>* %207, align 1, !alias.scope !61, !noalias !58
  %208 = getelementptr i8, i8* %200, i64 16
  %209 = bitcast i8* %208 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %209, align 1, !alias.scope !61, !noalias !58
  %210 = or i64 %198, 32
  %211 = getelementptr i8, i8* %173, i64 %210
  %212 = getelementptr i8, i8* %149, i64 %210
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !alias.scope !58
  %215 = getelementptr i8, i8* %212, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !58
  %218 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %214, <16 x i8>* %218, align 1, !alias.scope !61, !noalias !58
  %219 = getelementptr i8, i8* %211, i64 16
  %220 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %220, align 1, !alias.scope !61, !noalias !58
  %221 = or i64 %198, 64
  %222 = getelementptr i8, i8* %173, i64 %221
  %223 = getelementptr i8, i8* %149, i64 %221
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1, !alias.scope !58
  %226 = getelementptr i8, i8* %223, i64 16
  %227 = bitcast i8* %226 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1, !alias.scope !58
  %229 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> %225, <16 x i8>* %229, align 1, !alias.scope !61, !noalias !58
  %230 = getelementptr i8, i8* %222, i64 16
  %231 = bitcast i8* %230 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %231, align 1, !alias.scope !61, !noalias !58
  %232 = or i64 %198, 96
  %233 = getelementptr i8, i8* %173, i64 %232
  %234 = getelementptr i8, i8* %149, i64 %232
  %235 = bitcast i8* %234 to <16 x i8>*
  %236 = load <16 x i8>, <16 x i8>* %235, align 1, !alias.scope !58
  %237 = getelementptr i8, i8* %234, i64 16
  %238 = bitcast i8* %237 to <16 x i8>*
  %239 = load <16 x i8>, <16 x i8>* %238, align 1, !alias.scope !58
  %240 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %236, <16 x i8>* %240, align 1, !alias.scope !61, !noalias !58
  %241 = getelementptr i8, i8* %233, i64 16
  %242 = bitcast i8* %241 to <16 x i8>*
  store <16 x i8> %239, <16 x i8>* %242, align 1, !alias.scope !61, !noalias !58
  %243 = add i64 %198, 128
  %244 = add i64 %199, -4
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %197, !llvm.loop !63

246:                                              ; preds = %197, %186
  %247 = phi i64 [ 0, %186 ], [ %243, %197 ]
  %248 = icmp eq i64 %193, 0
  br i1 %248, label %265, label %249

249:                                              ; preds = %246, %249
  %250 = phi i64 [ %262, %249 ], [ %247, %246 ]
  %251 = phi i64 [ %263, %249 ], [ %193, %246 ]
  %252 = getelementptr i8, i8* %173, i64 %250
  %253 = getelementptr i8, i8* %149, i64 %250
  %254 = bitcast i8* %253 to <16 x i8>*
  %255 = load <16 x i8>, <16 x i8>* %254, align 1, !alias.scope !58
  %256 = getelementptr i8, i8* %253, i64 16
  %257 = bitcast i8* %256 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 1, !alias.scope !58
  %259 = bitcast i8* %252 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %259, align 1, !alias.scope !61, !noalias !58
  %260 = getelementptr i8, i8* %252, i64 16
  %261 = bitcast i8* %260 to <16 x i8>*
  store <16 x i8> %258, <16 x i8>* %261, align 1, !alias.scope !61, !noalias !58
  %262 = add i64 %250, 32
  %263 = add i64 %251, -1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %249, !llvm.loop !64

265:                                              ; preds = %249, %246
  %266 = icmp eq i64 %177, %187
  br i1 %266, label %277, label %267

267:                                              ; preds = %265, %179, %175
  %268 = phi i8* [ %173, %179 ], [ %173, %175 ], [ %188, %265 ]
  %269 = phi i8* [ %149, %179 ], [ %149, %175 ], [ %189, %265 ]
  br label %270

270:                                              ; preds = %267, %270
  %271 = phi i8* [ %275, %270 ], [ %268, %267 ]
  %272 = phi i8* [ %274, %270 ], [ %269, %267 ]
  %273 = load i8, i8* %272, align 1
  store i8 %273, i8* %271, align 1
  %274 = getelementptr inbounds i8, i8* %272, i64 1
  %275 = getelementptr inbounds i8, i8* %271, i64 1
  %276 = icmp eq i8* %274, %151
  br i1 %276, label %277, label %270, !llvm.loop !65

277:                                              ; preds = %270, %265, %172
  %278 = phi i8* [ %173, %172 ], [ %188, %265 ], [ %275, %270 ]
  store i8 0, i8* %278, align 1
  br label %279

279:                                              ; preds = %277, %146
  %280 = load i8*, i8** %140, align 8
  %281 = icmp eq i8* %280, null
  br i1 %281, label %285, label %282

282:                                              ; preds = %279
  %283 = ptrtoint i8* %280 to i64
  %284 = bitcast i8** %141 to i64*
  store i64 %283, i64* %284, align 8
  call void @_ZdlPv(i8* nonnull %280) #11
  br label %285

285:                                              ; preds = %279, %282
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %139) #9
  %286 = load i8*, i8** %7, align 8
  %287 = icmp eq i8* %286, null
  br i1 %287, label %290, label %288

288:                                              ; preds = %285
  %289 = ptrtoint i8* %286 to i64
  store i64 %289, i64* %136, align 8
  call void @_ZdlPv(i8* nonnull %286) #11
  br label %290

290:                                              ; preds = %285, %288
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret void
}

declare zeroext i1 @_ZN6crypto16SignatureCreator4SignEPNS_13RSAPrivateKeyENS0_13HashAlgorithmEPKhiPNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.crypto::RSAPrivateKey"*, i32, i8*, i32, %"class.std::__1::vector.131"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6crypto13RSAPrivateKeyD1Ev(%"class.crypto::RSAPrivateKey"*) unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !8}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !8}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !8}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !8}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !8}
!64 = distinct !{!64, !10}
!65 = distinct !{!65, !8}
