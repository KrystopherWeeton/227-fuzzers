; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_bitst.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_bitst.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type opaque
%struct.BIT_STRING_BITNAME_st = type { i32, i8*, i8* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@ASN1_BIT_STRING_it = external constant %struct.ASN1_ITEM_st, align 1
@ns_cert_type_table = internal constant [9 x %struct.BIT_STRING_BITNAME_st] [%struct.BIT_STRING_BITNAME_st { i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 7, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 -1, i8* null, i8* null }], align 16
@v3_nscert = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 71, i32 0, %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, %struct.asn1_string_st*, %struct.stack_st_CONF_VALUE*)* @i2v_ASN1_BIT_STRING to %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*), i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.asn1_string_st* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_ASN1_BIT_STRING to i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*), i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* bitcast ([9 x %struct.BIT_STRING_BITNAME_st]* @ns_cert_type_table to i8*) }, align 8
@key_usage_type_table = internal constant [10 x %struct.BIT_STRING_BITNAME_st] [%struct.BIT_STRING_BITNAME_st { i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.27, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 -1, i8* null, i8* null }], align 16
@v3_key_usage = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 83, i32 0, %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, %struct.asn1_string_st*, %struct.stack_st_CONF_VALUE*)* @i2v_ASN1_BIT_STRING to %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*), i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.asn1_string_st* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_ASN1_BIT_STRING to i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*), i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* bitcast ([10 x %struct.BIT_STRING_BITNAME_st]* @key_usage_type_table to i8*) }, align 8
@.str = private unnamed_addr constant [57 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_bitst.c\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"section:\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c",name:\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c",value:\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"SSL Client\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"client\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"SSL Server\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"server\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"S/MIME\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"email\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"Object Signing\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"objsign\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"Unused\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"reserved\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"SSL CA\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"sslCA\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"S/MIME CA\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"emailCA\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"Object Signing CA\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"objCA\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"Digital Signature\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"digitalSignature\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"Non Repudiation\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"nonRepudiation\00", align 1
@.str.24 = private unnamed_addr constant [17 x i8] c"Key Encipherment\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"keyEncipherment\00", align 1
@.str.26 = private unnamed_addr constant [18 x i8] c"Data Encipherment\00", align 1
@.str.27 = private unnamed_addr constant [17 x i8] c"dataEncipherment\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"Key Agreement\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"keyAgreement\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"Certificate Sign\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"keyCertSign\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"CRL Sign\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"cRLSign\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c"Encipher Only\00", align 1
@.str.35 = private unnamed_addr constant [13 x i8] c"encipherOnly\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"Decipher Only\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"decipherOnly\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_CONF_VALUE* @i2v_ASN1_BIT_STRING(%struct.v3_ext_method* nocapture readonly, %struct.asn1_string_st*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca %struct.stack_st_CONF_VALUE*, align 8
  store %struct.stack_st_CONF_VALUE* %2, %struct.stack_st_CONF_VALUE** %4, align 8
  %5 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 13
  %6 = bitcast i8** %5 to %struct.BIT_STRING_BITNAME_st**
  %7 = load %struct.BIT_STRING_BITNAME_st*, %struct.BIT_STRING_BITNAME_st** %6, align 8
  %8 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %7, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3, %21
  %12 = phi i8** [ %23, %21 ], [ %8, %3 ]
  %13 = phi %struct.BIT_STRING_BITNAME_st* [ %22, %21 ], [ %7, %3 ]
  %14 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = call i32 @ASN1_BIT_STRING_get_bit(%struct.asn1_string_st* %1, i32 %15) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %11
  %19 = load i8*, i8** %12, align 8
  %20 = call i32 @X509V3_add_value(i8* %19, i8* null, %struct.stack_st_CONF_VALUE** nonnull %4) #3
  br label %21

21:                                               ; preds = %11, %18
  %22 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %13, i64 1
  %23 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %13, i64 1, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %11

26:                                               ; preds = %21
  %27 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %4, align 8
  br label %28

28:                                               ; preds = %26, %3
  %29 = phi %struct.stack_st_CONF_VALUE* [ %27, %26 ], [ %2, %3 ]
  ret %struct.stack_st_CONF_VALUE* %29
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @v2i_ASN1_BIT_STRING(%struct.v3_ext_method* nocapture readonly, %struct.v3_ext_ctx* nocapture readnone, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = tail call %struct.asn1_string_st* @ASN1_BIT_STRING_new() #3
  %5 = icmp eq %struct.asn1_string_st* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %3
  %7 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %8 = tail call i64 @sk_num(%struct.stack_st* %7) #3
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %69, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 13
  %12 = bitcast i8** %11 to %struct.BIT_STRING_BITNAME_st**
  br label %17

13:                                               ; preds = %3
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i32 117) #3
  br label %69

14:                                               ; preds = %56
  %15 = tail call i64 @sk_num(%struct.stack_st* %7) #3
  %16 = icmp ult i64 %59, %15
  br i1 %16, label %17, label %69

17:                                               ; preds = %10, %14
  %18 = phi i64 [ 0, %10 ], [ %59, %14 ]
  %19 = tail call i8* @sk_value(%struct.stack_st* %7, i64 %18) #3
  %20 = load %struct.BIT_STRING_BITNAME_st*, %struct.BIT_STRING_BITNAME_st** %12, align 8
  %21 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %20, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %60, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds i8, i8* %19, i64 8
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %20, i64 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = tail call i32 @strcmp(i8* %29, i8* %27) #4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %43, label %37

32:                                               ; preds = %51
  %33 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %38, i64 1, i32 2
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i32 @strcmp(i8* %34, i8* %27) #4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %24, %32
  %38 = phi %struct.BIT_STRING_BITNAME_st* [ %52, %32 ], [ %20, %24 ]
  %39 = phi i8** [ %53, %32 ], [ %21, %24 ]
  %40 = phi i8* [ %54, %32 ], [ %22, %24 ]
  %41 = tail call i32 @strcmp(i8* nonnull %40, i8* %27) #4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %32, %37, %24
  %44 = phi i8** [ %21, %24 ], [ %53, %32 ], [ %39, %37 ]
  %45 = phi %struct.BIT_STRING_BITNAME_st* [ %20, %24 ], [ %52, %32 ], [ %38, %37 ]
  %46 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = tail call i32 @ASN1_BIT_STRING_set_bit(%struct.asn1_string_st* nonnull %4, i32 %47, i32 1) #3
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %43
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i32 126) #3
  tail call void @ASN1_BIT_STRING_free(%struct.asn1_string_st* nonnull %4) #3
  br label %69

51:                                               ; preds = %37
  %52 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %38, i64 1
  %53 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %38, i64 1, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %60, label %32

56:                                               ; preds = %43
  %57 = load i8*, i8** %44, align 8
  %58 = icmp eq i8* %57, null
  %59 = add nuw i64 %18, 1
  br i1 %58, label %60, label %14

60:                                               ; preds = %56, %17, %51
  tail call void @ERR_put_error(i32 20, i32 0, i32 156, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i32 134) #3
  %61 = bitcast i8* %19 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8, i8* %19, i64 8
  %64 = bitcast i8* %63 to i8**
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %19, i64 16
  %67 = bitcast i8* %66 to i8**
  %68 = load i8*, i8** %67, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* %65, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %68) #3
  tail call void @ASN1_BIT_STRING_free(%struct.asn1_string_st* nonnull %4) #3
  br label %69

69:                                               ; preds = %14, %6, %60, %50, %13
  %70 = phi %struct.asn1_string_st* [ null, %60 ], [ null, %50 ], [ null, %13 ], [ %4, %6 ], [ %4, %14 ]
  ret %struct.asn1_string_st* %70
}

declare i32 @ASN1_BIT_STRING_get_bit(%struct.asn1_string_st*, i32) local_unnamed_addr #1

declare i32 @X509V3_add_value(i8*, i8*, %struct.stack_st_CONF_VALUE**) local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_BIT_STRING_new() local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

declare i32 @ASN1_BIT_STRING_set_bit(%struct.asn1_string_st*, i32, i32) local_unnamed_addr #1

declare void @ASN1_BIT_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
