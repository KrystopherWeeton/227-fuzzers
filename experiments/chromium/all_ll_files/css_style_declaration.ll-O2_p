; ModuleID = '../../third_party/blink/renderer/core/css/css_style_declaration.cc'
source_filename = "../../third_party/blink/renderer/core/css/css_style_declaration.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<WTF::Vector<WTF::String, 623, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::Vector<WTF::String, 623, WTF::PartitionAllocator> >::InstanceStorage" = type { %"class.WTF::Vector.266"* }
%"class.WTF::Vector.266" = type { %"class.WTF::VectorBuffer.267" }
%"class.WTF::VectorBuffer.267" = type { %"class.WTF::VectorBufferBase.263", [4984 x i8] }
%"class.WTF::VectorBufferBase.263" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr.234 }
%class.scoped_refptr.234 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.235" }
%"struct.std::__1::atomic.235" = type { %"struct.std::__1::__atomic_base.236" }
%"struct.std::__1::__atomic_base.236" = type { %"struct.std::__1::__atomic_base.237" }
%"struct.std::__1::__atomic_base.237" = type { %"struct.std::__1::__cxx_atomic_impl.238" }
%"struct.std::__1::__cxx_atomic_impl.238" = type { %"struct.std::__1::__cxx_atomic_base_impl.239" }
%"struct.std::__1::__cxx_atomic_base_impl.239" = type { i32 }
%"class.WTF::StaticSingleton.278" = type { %"class.WTF::StaticSingleton<WTF::HashMap<WTF::String, blink::CSSPropertyID, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<blink::CSSPropertyID>, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::HashMap<WTF::String, blink::CSSPropertyID, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<blink::CSSPropertyID>, WTF::PartitionAllocator> >::InstanceStorage" = type { [24 x i8] }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.245" }
%"class.blink::HeapHashMap.245" = type { %"class.WTF::HashMap.248" }
%"class.WTF::HashMap.248" = type { %"class.WTF::HashTable.249" }
%"class.WTF::HashTable.249" = type <{ %"struct.WTF::KeyValuePair.251"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.251" = type { %"class.blink::WeakMember.252", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.252" = type { %"class.blink::MemberBase.253" }
%"class.blink::MemberBase.253" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.52", i32, [4 x i8], %"class.std::__1::unique_ptr.184", %"class.std::__1::unique_ptr.184", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.194", %"class.std::__1::unique_ptr.200", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.218", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.225", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.164", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist.95"* }
%"class.blink::Worklist.95" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.blink::Worklist.102"* }
%"class.blink::Worklist.102" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::Worklist.109"* }
%"class.blink::Worklist.109" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.blink::Worklist.116"* }
%"class.blink::Worklist.116" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.144", %"class.std::__1::__compressed_pair.151", %"class.std::__1::__compressed_pair.156", %"class.std::__1::__compressed_pair.158", [4 x i8] }>
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146", %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { i64 }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { float }
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.167", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.176" }
%"class.WTF::Vector.176" = type { %"class.WTF::VectorBuffer.177" }
%"class.WTF::VectorBuffer.177" = type { %"class.WTF::VectorBufferBase.178" }
%"class.WTF::VectorBufferBase.178" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.192" }
%"class.WTF::VectorBuffer.192" = type { %"class.WTF::VectorBufferBase.193" }
%"class.WTF::VectorBufferBase.193" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.200" = type { %"class.std::__1::__compressed_pair.201" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.206" }
%"class.std::__1::unique_ptr.206" = type { %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.95"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.102"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.109"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.116"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.229" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.224 }
%class.scoped_refptr.224 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.225" = type { %"struct.std::__1::__atomic_base.226" }
%"struct.std::__1::__atomic_base.226" = type { %"struct.std::__1::__cxx_atomic_impl.227" }
%"struct.std::__1::__cxx_atomic_impl.227" = type { %"struct.std::__1::__cxx_atomic_base_impl.228" }
%"struct.std::__1::__cxx_atomic_base_impl.228" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::CSSStyleDeclaration" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient" }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.25", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.31", %"class.blink::Member.33", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.42", %"class.blink::Member.48", %"class.blink::Member.50", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.7" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.4" }
%"class.WTF::HashTable.4" = type <{ %"class.blink::WeakMember.6"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.6" = type opaque
%"class.blink::Supplementable.7" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.8" }
%"class.blink::HeapHashMap.8" = type { %"class.WTF::HashMap.11" }
%"class.WTF::HashMap.11" = type { %"class.WTF::HashTable.12" }
%"class.WTF::HashTable.12" = type <{ %"struct.WTF::KeyValuePair.14"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.14" = type { i8*, %"class.blink::Member.274" }
%"class.blink::Member.274" = type { %"class.blink::MemberBase.275" }
%"class.blink::MemberBase.275" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.276" }
%"class.blink::Member.276" = type { %"class.blink::MemberBase.277" }
%"class.blink::MemberBase.277" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.blink::Member", i32, [4 x i8], %"class.WTF::HashSet.22", i32, i32 }
%class.scoped_refptr = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.WTF::HashSet.22" = type { %"class.WTF::HashTable.23" }
%"class.WTF::HashTable.23" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.25" = type { %"class.blink::MemberBase.26" }
%"class.blink::MemberBase.26" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.29"*, i32, i32 }
%"class.blink::Member.29" = type opaque
%"class.blink::Member.31" = type { %"class.blink::MemberBase.32" }
%"class.blink::MemberBase.32" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.33" = type { %"class.blink::MemberBase.34" }
%"class.blink::MemberBase.34" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.35", i32, i32 }
%"class.blink::HeapHashMap.35" = type { %"class.WTF::HashMap.38" }
%"class.WTF::HashMap.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair.41"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.41" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.50" = type { %"class.blink::MemberBase.51" }
%"class.blink::MemberBase.51" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector.288" }
%"class.WTF::Vector.288" = type { %"class.WTF::VectorBuffer.289" }
%"class.WTF::VectorBuffer.289" = type { %"class.WTF::VectorBufferBase.290", [16 x i8] }
%"class.WTF::VectorBufferBase.290" = type { i8*, i32, i32 }
%"struct.WTF::KeyValuePair.287" = type <{ %"class.WTF::String", i32, [4 x i8] }>
%"class.WTF::HashTable.284" = type <{ %"struct.WTF::KeyValuePair.287"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::Vector.293" = type { %"class.WTF::VectorBuffer.294" }
%"class.WTF::VectorBuffer.294" = type { %"class.WTF::VectorBufferBase.295", [16 x i8] }
%"class.WTF::VectorBufferBase.295" = type { i16*, i32, i32 }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.242, %"class.blink::Member.254", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.242 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.254" = type { %"class.blink::MemberBase.255" }
%"class.blink::MemberBase.255" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.256" }
%"class.blink::Persistent.256" = type { %"class.blink::PersistentBase.257" }
%"class.blink::PersistentBase.257" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.258" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.258" = type { %"class.v8::TracedReference.259" }
%"class.v8::TracedReference.259" = type { %"class.v8::BasicTracedReference.260" }
%"class.v8::BasicTracedReference.260" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.v8::internal::Isolate" = type opaque
%"class.v8::Value" = type { i8 }
%"class.WTF::Vector.261" = type { %"class.WTF::VectorBuffer.262" }
%"class.WTF::VectorBuffer.262" = type { %"class.WTF::VectorBufferBase.263" }
%"class.blink::CSSStyleSheet" = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.300 }
%union.anon.300 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSILj623EEERS3_RKNS0_IS1_XT_ES2_EE = comdat any

$_ZN5blink15ScriptWrappableD2Ev = comdat any

$_ZN5blink19CSSStyleDeclarationD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv = comdat any

$_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE4findERKS1_ = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISC_S7_SD_EERKNS_12AtomicStringERS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6ExpandEPS5_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE8RehashToEPS5_jSF_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE16LookupForWritingERKS1_ = comdat any

$_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14AppendSlowCaseIPKcEEvOT_ = comdat any

$_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF12VectorBufferINS_6StringELj623ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS1_ = comdat any

$_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_ = comdat any

$_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_ = comdat any

@.str = private unnamed_addr constant [20 x i8] c"CSSStyleDeclaration\00", align 1
@_ZZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names = internal unnamed_addr global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names = internal global i64 0, align 8
@_ZN5blinkL21kCSSPropertyAliasListE = internal constant [101 x i32] [i32 1068, i32 1105, i32 1106, i32 1107, i32 1108, i32 1109, i32 1110, i32 1089, i32 1090, i32 1091, i32 1086, i32 1087, i32 1088, i32 1243, i32 1244, i32 1241, i32 1240, i32 1299, i32 1300, i32 1297, i32 1296, i32 1195, i32 1085, i32 1263, i32 1261, i32 1258, i32 1256, i32 1476, i32 1477, i32 1485, i32 1486, i32 1131, i32 1446, i32 1547, i32 1448, i32 1450, i32 1048, i32 1387, i32 1464, i32 1049, i32 1054, i32 1055, i32 1056, i32 1469, i32 1059, i32 1060, i32 1061, i32 1062, i32 1063, i32 1064, i32 1065, i32 1067, i32 1072, i32 1075, i32 1078, i32 1083, i32 1093, i32 1094, i32 1490, i32 1120, i32 1121, i32 1125, i32 1126, i32 1135, i32 1141, i32 1143, i32 1496, i32 1144, i32 1145, i32 1146, i32 1147, i32 1148, i32 1497, i32 1169, i32 1498, i32 1170, i32 1171, i32 1499, i32 1172, i32 1173, i32 1174, i32 1029, i32 1227, i32 1275, i32 1276, i32 1307, i32 1308, i32 1346, i32 1347, i32 1348, i32 1386, i32 1393, i32 1395, i32 1396, i32 1539, i32 1397, i32 1398, i32 1399, i32 1400, i32 1404, i32 1288], align 16
@_ZTVN5blink19CSSStyleDeclarationE = hidden unnamed_addr constant { [28 x i8*], [3 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*)* @_ZN5blink15ScriptWrappableD2Ev to i8*), i8* bitcast (void (%"class.blink::CSSStyleDeclaration"*)* @_ZN5blink19CSSStyleDeclarationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::CSSStyleDeclaration"*, %"class.blink::Visitor"*)* @_ZNK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::CSSStyleDeclaration"*)* @_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.blink::CSSStyleSheet"* (%"class.blink::CSSStyleDeclaration"*)* @_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv to i8*)], [3 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (void (%"class.blink::CSSStyleDeclaration"*, %"class.blink::Visitor"*)* @_ZThn16_NK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE to i8*)] }, align 8
@_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map = internal global %"class.WTF::StaticSingleton.278" zeroinitializer, align 8
@_ZGVZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map = internal global i64 0, align 8
@.str.2 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringEN5blink13CSSPropertyIDEEEEEPKcv = private unnamed_addr constant [100 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::String, blink::CSSPropertyID>]\00", align 1
@_ZTVN5blink14ExceptionStateE = external unnamed_addr constant { [9 x i8*] }, align 8
@_ZN5blink19CSSStyleDeclaration18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorINS_6StringELj623ENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [102 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Vector<WTF::String, 623, WTF::PartitionAllocator>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSStyleDeclaration"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 0, i32 1
  tail call void @_ZNK5blink22ExecutionContextClient5TraceEPNS_7VisitorE(%"class.blink::ExecutionContextClient"* %3, %"class.blink::Visitor"* %1) #11
  %4 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %4, %"class.blink::Visitor"* %1) #11
  ret void
}

declare void @_ZNK5blink22ExecutionContextClient5TraceEPNS_7VisitorE(%"class.blink::ExecutionContextClient"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSStyleDeclaration"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 -1, i32 1
  %4 = getelementptr inbounds %"class.blink::ExecutionContextClient", %"class.blink::ExecutionContextClient"* %3, i64 1
  tail call void @_ZNK5blink22ExecutionContextClient5TraceEPNS_7VisitorE(%"class.blink::ExecutionContextClient"* %4, %"class.blink::Visitor"* %1) #11
  %5 = bitcast %"class.blink::ExecutionContextClient"* %3 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %5, %"class.blink::Visitor"* %1) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink19CSSStyleDeclaration20AnonymousNamedGetterERKN3WTF12AtomicStringE(%"class.blink::CSSStyleDeclaration"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 0, i32 1
  %4 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %3) #11
  %5 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringE(%"class.blink::ExecutionContext"* %4, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = and i32 %5, 1023
  %9 = bitcast %"class.blink::CSSStyleDeclaration"* %0 to %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)***
  %10 = load %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)**, %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)*** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)*, %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)** %10, i64 22
  %12 = load %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)*, %"class.WTF::StringImpl"* (%"class.blink::CSSStyleDeclaration"*, i32)** %11, align 8
  %13 = tail call %"class.WTF::StringImpl"* %12(%"class.blink::CSSStyleDeclaration"* %0, i32 %8) #11
  br label %14

14:                                               ; preds = %2, %7
  %15 = phi %"class.WTF::StringImpl"* [ %13, %7 ], [ null, %2 ]
  ret %"class.WTF::StringImpl"* %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringE(%"class.blink::ExecutionContext"*, %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca %"class.WTF::StringBuilder", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca i32, align 4
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15, !prof !2

11:                                               ; preds = %2
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map) #11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton.278", %"class.WTF::StaticSingleton.278"* @_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #11
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map) #11
  br label %15

15:                                               ; preds = %11, %14, %2
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %17 = tail call { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE4findERKS1_(%"class.WTF::HashTable.284"* bitcast (%"class.WTF::StaticSingleton.278"* @_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map to %"class.WTF::HashTable.284"*), %"class.WTF::String"* dereferenceable(8) %16) #11
  %18 = extractvalue { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } %17, 0
  %19 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** bitcast (%"class.WTF::StaticSingleton.278"* @_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map to %"struct.WTF::KeyValuePair.287"**), align 8
  %20 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton.278", %"class.WTF::StaticSingleton.278"* @_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %19, i64 %21
  %23 = icmp eq %"struct.WTF::KeyValuePair.287"* %18, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %18, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  br label %347

27:                                               ; preds = %15
  %28 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #11
  store i32 -1431655766, i32* %8, align 4
  %29 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %343, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %343, label %36

36:                                               ; preds = %32
  %37 = bitcast %"class.WTF::StringBuilder"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 48, i1 false) #11
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 1
  %40 = bitcast %union.anon* %39 to i8*
  store i8 0, i8* %40, align 8
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 2
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 3
  store i8 1, i8* %42, align 4
  %43 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 4
  store i8 0, i8* %43, align 1
  call void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"* nonnull %6, i32 %34) #11
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  br i1 %54, label %60, label %56

56:                                               ; preds = %50
  %57 = bitcast %"class.WTF::StringImpl"* %55 to i8*
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  br label %63

60:                                               ; preds = %50
  %61 = bitcast %"class.WTF::StringImpl"* %55 to i16*
  %62 = load i16, i16* %61, align 2
  br label %63

63:                                               ; preds = %60, %56, %46, %36
  %64 = phi i16 [ 0, %46 ], [ 0, %36 ], [ %59, %56 ], [ %62, %60 ]
  %65 = add i16 %64, -65
  %66 = icmp ult i16 %65, 26
  %67 = zext i1 %66 to i16
  %68 = shl nuw nsw i16 %67, 5
  %69 = or i16 %68, %64
  %70 = icmp ne i16 %69, 119
  %71 = or i1 %45, %70
  br i1 %71, label %96, label %72

72:                                               ; preds = %63
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = icmp ugt i32 %74, 1
  br i1 %75, label %76, label %96

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  %79 = bitcast %"class.WTF::StringImpl"* %78 to i8*
  %80 = bitcast %"class.WTF::StringImpl"* %78 to i16*
  %81 = load atomic i32, i32* %77 monotonic, align 4
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %76
  %85 = getelementptr inbounds i8, i8* %79, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  br label %91

88:                                               ; preds = %76
  %89 = getelementptr inbounds i16, i16* %80, i64 1
  %90 = load i16, i16* %89, align 2
  br label %91

91:                                               ; preds = %84, %88
  %92 = phi i16 [ %87, %84 ], [ %90, %88 ]
  %93 = icmp ne i16 %92, 101
  %94 = icmp eq i32 %74, 2
  %95 = or i1 %94, %93
  br i1 %95, label %96, label %349

96:                                               ; preds = %91, %363, %381, %401, %419, %438, %72, %63
  br i1 %45, label %154, label %97

97:                                               ; preds = %96
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %154, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  br i1 %105, label %111, label %107

107:                                              ; preds = %101
  %108 = bitcast %"class.WTF::StringImpl"* %106 to i8*
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  br label %114

111:                                              ; preds = %101
  %112 = bitcast %"class.WTF::StringImpl"* %106 to i16*
  %113 = load i16, i16* %112, align 2
  br label %114

114:                                              ; preds = %111, %107
  %115 = phi i16 [ %110, %107 ], [ %113, %111 ]
  %116 = add i16 %115, -65
  %117 = icmp ult i16 %116, 26
  br i1 %117, label %323, label %125

118:                                              ; preds = %438
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %6, i8 zeroext 45) #11
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %154, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %154, label %125

125:                                              ; preds = %114, %121
  %126 = phi %"class.WTF::StringImpl"* [ %119, %121 ], [ %44, %114 ]
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 1
  br i1 %130, label %136, label %132

132:                                              ; preds = %125
  %133 = bitcast %"class.WTF::StringImpl"* %131 to i8*
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i16
  br label %140

136:                                              ; preds = %125
  %137 = bitcast %"class.WTF::StringImpl"* %131 to i16*
  %138 = load i16, i16* %137, align 2
  %139 = trunc i16 %138 to i8
  br label %140

140:                                              ; preds = %136, %132
  %141 = phi i8 [ %134, %132 ], [ %139, %136 ]
  %142 = phi i16 [ %135, %132 ], [ %138, %136 ]
  %143 = add i16 %142, -65
  %144 = icmp ult i16 %143, 26
  %145 = zext i1 %144 to i8
  %146 = load atomic i32, i32* %127 monotonic, align 4
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %151, label %149

149:                                              ; preds = %140
  %150 = zext i8 %141 to i16
  br label %154

151:                                              ; preds = %140
  %152 = bitcast %"class.WTF::StringImpl"* %131 to i16*
  %153 = load i16, i16* %152, align 2
  br label %154

154:                                              ; preds = %97, %121, %151, %149, %118, %96
  %155 = phi i8 [ %145, %149 ], [ %145, %151 ], [ 0, %118 ], [ 0, %96 ], [ 0, %121 ], [ 0, %97 ]
  %156 = phi i16 [ %150, %149 ], [ %153, %151 ], [ 0, %118 ], [ 0, %96 ], [ 0, %121 ], [ 0, %97 ]
  %157 = add i16 %156, -65
  %158 = icmp ult i16 %157, 26
  %159 = zext i1 %158 to i16
  %160 = shl nuw nsw i16 %159, 5
  %161 = or i16 %160, %156
  %162 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %162) #11
  store i16 %161, i16* %3, align 2
  %163 = load i8, i8* %42, align 4, !range !3
  %164 = icmp ne i8 %163, 0
  %165 = icmp ult i16 %161, 256
  %166 = and i1 %164, %165
  br i1 %166, label %167, label %169

167:                                              ; preds = %154
  %168 = trunc i16 %161 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %6, i8 zeroext %168) #11
  br label %192

169:                                              ; preds = %154
  %170 = load i8, i8* %43, align 1
  %171 = icmp eq i8 %170, 0
  %172 = or i1 %164, %171
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %6, i32 1) #11
  br label %174

174:                                              ; preds = %173, %169
  %175 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %176, %178
  br i1 %179, label %187, label %180, !prof !4

180:                                              ; preds = %174
  %181 = bitcast %union.anon* %39 to i16**
  %182 = load i16*, i16** %181, align 8
  %183 = zext i32 %176 to i64
  %184 = getelementptr inbounds i16, i16* %182, i64 %183
  store i16 %161, i16* %184, align 2
  %185 = load i32, i32* %175, align 4
  %186 = add i32 %185, 1
  store i32 %186, i32* %175, align 4
  br label %189

187:                                              ; preds = %174
  %188 = bitcast %union.anon* %39 to %"class.WTF::Vector.293"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.293"* %188, i16* nonnull dereferenceable(2) %3) #11
  br label %189

189:                                              ; preds = %187, %180
  %190 = load i32, i32* %41, align 8
  %191 = add i32 %190, 1
  store i32 %191, i32* %41, align 8
  br label %192

192:                                              ; preds = %189, %167
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %162) #11
  %193 = icmp ugt i32 %34, 1
  br i1 %193, label %194, label %296

194:                                              ; preds = %192
  %195 = bitcast i16* %5 to i8*
  %196 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %197 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %198 = bitcast %union.anon* %39 to i16**
  %199 = bitcast %union.anon* %39 to %"class.WTF::Vector.293"*
  %200 = bitcast i16* %4 to i8*
  %201 = zext i32 %34 to i64
  br label %202

202:                                              ; preds = %290, %194
  %203 = phi i64 [ 1, %194 ], [ %294, %290 ]
  %204 = phi i8 [ %155, %194 ], [ %293, %290 ]
  %205 = phi i8 [ 0, %194 ], [ %292, %290 ]
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %207 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %207, label %235, label %208

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = zext i32 %210 to i64
  %212 = icmp ult i64 %203, %211
  br i1 %212, label %213, label %235

213:                                              ; preds = %208
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = and i32 %215, 1
  %217 = icmp eq i32 %216, 0
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 1
  br i1 %217, label %224, label %219

219:                                              ; preds = %213
  %220 = bitcast %"class.WTF::StringImpl"* %218 to i8*
  %221 = getelementptr inbounds i8, i8* %220, i64 %203
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i16
  br label %228

224:                                              ; preds = %213
  %225 = bitcast %"class.WTF::StringImpl"* %218 to i16*
  %226 = getelementptr inbounds i16, i16* %225, i64 %203
  %227 = load i16, i16* %226, align 2
  br label %228

228:                                              ; preds = %224, %219
  %229 = phi i16 [ %223, %219 ], [ %227, %224 ]
  %230 = add i16 %229, -65
  %231 = icmp ult i16 %230, 26
  br i1 %231, label %263, label %232

232:                                              ; preds = %228
  %233 = icmp eq i16 %229, 45
  %234 = select i1 %233, i8 1, i8 %205
  br label %235

235:                                              ; preds = %232, %208, %202
  %236 = phi i16 [ 0, %202 ], [ 0, %208 ], [ %229, %232 ]
  %237 = phi i8 [ %205, %202 ], [ %205, %208 ], [ %234, %232 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %200) #11
  store i16 %236, i16* %4, align 2
  %238 = load i8, i8* %42, align 4, !range !3
  %239 = icmp ne i8 %238, 0
  %240 = icmp ult i16 %236, 256
  %241 = and i1 %240, %239
  br i1 %241, label %242, label %244

242:                                              ; preds = %235
  %243 = trunc i16 %236 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %6, i8 zeroext %243) #11
  br label %290

244:                                              ; preds = %235
  %245 = load i8, i8* %43, align 1
  %246 = icmp eq i8 %245, 0
  %247 = or i1 %239, %246
  br i1 %247, label %248, label %249

248:                                              ; preds = %244
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %6, i32 1) #11
  br label %249

249:                                              ; preds = %248, %244
  %250 = load i32, i32* %196, align 4
  %251 = load i32, i32* %197, align 8
  %252 = icmp eq i32 %250, %251
  br i1 %252, label %259, label %253, !prof !4

253:                                              ; preds = %249
  %254 = load i16*, i16** %198, align 8
  %255 = zext i32 %250 to i64
  %256 = getelementptr inbounds i16, i16* %254, i64 %255
  store i16 %236, i16* %256, align 2
  %257 = load i32, i32* %196, align 4
  %258 = add i32 %257, 1
  store i32 %258, i32* %196, align 4
  br label %260

259:                                              ; preds = %249
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.293"* %199, i16* nonnull dereferenceable(2) %4) #11
  br label %260

260:                                              ; preds = %259, %253
  %261 = load i32, i32* %41, align 8
  %262 = add i32 %261, 1
  store i32 %262, i32* %41, align 8
  br label %290

263:                                              ; preds = %228
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %6, i8 zeroext 45) #11
  %264 = or i16 %229, 32
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %195) #11
  store i16 %264, i16* %5, align 2
  %265 = load i8, i8* %42, align 4, !range !3
  %266 = icmp ne i8 %265, 0
  %267 = icmp ult i16 %264, 256
  %268 = and i1 %267, %266
  br i1 %268, label %269, label %271

269:                                              ; preds = %263
  %270 = trunc i16 %264 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %6, i8 zeroext %270) #11
  br label %290

271:                                              ; preds = %263
  %272 = load i8, i8* %43, align 1
  %273 = icmp eq i8 %272, 0
  %274 = or i1 %266, %273
  br i1 %274, label %275, label %276

275:                                              ; preds = %271
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %6, i32 1) #11
  br label %276

276:                                              ; preds = %275, %271
  %277 = load i32, i32* %196, align 4
  %278 = load i32, i32* %197, align 8
  %279 = icmp eq i32 %277, %278
  br i1 %279, label %286, label %280, !prof !4

280:                                              ; preds = %276
  %281 = load i16*, i16** %198, align 8
  %282 = zext i32 %277 to i64
  %283 = getelementptr inbounds i16, i16* %281, i64 %282
  store i16 %264, i16* %283, align 2
  %284 = load i32, i32* %196, align 4
  %285 = add i32 %284, 1
  store i32 %285, i32* %196, align 4
  br label %287

286:                                              ; preds = %276
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.293"* %199, i16* nonnull dereferenceable(2) %5) #11
  br label %287

287:                                              ; preds = %286, %280
  %288 = load i32, i32* %41, align 8
  %289 = add i32 %288, 1
  store i32 %289, i32* %41, align 8
  br label %290

290:                                              ; preds = %269, %287, %242, %260
  %291 = phi i8* [ %200, %260 ], [ %200, %242 ], [ %195, %287 ], [ %195, %269 ]
  %292 = phi i8 [ %237, %260 ], [ %237, %242 ], [ %205, %287 ], [ %205, %269 ]
  %293 = phi i8 [ %204, %260 ], [ %204, %242 ], [ 1, %287 ], [ 1, %269 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %291) #11
  %294 = add nuw nsw i64 %203, 1
  %295 = icmp eq i64 %294, %201
  br i1 %295, label %296, label %202

296:                                              ; preds = %290, %192
  %297 = phi i8 [ 0, %192 ], [ %292, %290 ]
  %298 = phi i8 [ %155, %192 ], [ %293, %290 ]
  %299 = and i8 %297, 1
  %300 = and i8 %299, %298
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %302, label %323

302:                                              ; preds = %296
  %303 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #11
  %304 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %305 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %6) #11
  store %"class.WTF::StringImpl"* %305, %"class.WTF::StringImpl"** %304, align 8
  %306 = call i32 @_ZN5blink23UnresolvedCSSPropertyIDEPKNS_16ExecutionContextERKN3WTF6StringE(%"class.blink::ExecutionContext"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %7) #11
  %307 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %304, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %307, null
  br i1 %308, label %322, label %309

309:                                              ; preds = %302
  %310 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load atomic i32, i32* %310 monotonic, align 4
  %312 = and i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 0, i32 0
  %315 = load i32, i32* %314, align 4
  br i1 %313, label %316, label %318

316:                                              ; preds = %309
  %317 = add i32 %315, -1
  store i32 %317, i32* %314, align 4
  br label %318

318:                                              ; preds = %316, %309
  %319 = phi i32 [ %317, %316 ], [ %315, %309 ]
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %322

321:                                              ; preds = %318
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %307) #11
  br label %322

322:                                              ; preds = %321, %318, %302
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #11
  br label %323

323:                                              ; preds = %322, %296, %114
  %324 = phi i32 [ 0, %114 ], [ %306, %322 ], [ 0, %296 ]
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %6) #11
  %325 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %325, null
  br i1 %326, label %340, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %327
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %327
  %337 = phi i32 [ %335, %334 ], [ %333, %327 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %325) #11
  br label %340

340:                                              ; preds = %323, %336, %339
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #11
  %341 = icmp eq i32 %324, 1
  %342 = select i1 %341, i32 0, i32 %324
  br label %343

343:                                              ; preds = %340, %27, %32
  %344 = phi i32 [ 0, %32 ], [ 0, %27 ], [ %342, %340 ]
  store i32 %344, i32* %8, align 4
  %345 = call { %"struct.WTF::KeyValuePair.287"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISC_S7_SD_EERKNS_12AtomicStringERS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable.284"* bitcast (%"class.WTF::StaticSingleton.278"* @_ZZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringEE5s_map to %"class.WTF::HashTable.284"*), %"class.WTF::AtomicString"* dereferenceable(8) %1, i32* nonnull dereferenceable(4) %8) #11
  %346 = load i32, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #11
  br label %347

347:                                              ; preds = %343, %24
  %348 = phi i32 [ %26, %24 ], [ %346, %343 ]
  ret i32 %348

349:                                              ; preds = %91
  %350 = icmp ugt i32 %74, 2
  br i1 %350, label %351, label %363

351:                                              ; preds = %349
  %352 = load atomic i32, i32* %77 monotonic, align 4
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %359, label %355

355:                                              ; preds = %351
  %356 = getelementptr inbounds i8, i8* %79, i64 2
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i16
  br label %363

359:                                              ; preds = %351
  %360 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1, i32 1
  %361 = bitcast i32* %360 to i16*
  %362 = load i16, i16* %361, align 2
  br label %363

363:                                              ; preds = %349, %355, %359
  %364 = phi i16 [ 0, %349 ], [ %358, %355 ], [ %362, %359 ]
  %365 = icmp ne i16 %364, 98
  %366 = icmp eq i32 %74, 3
  %367 = or i1 %366, %365
  br i1 %367, label %96, label %368

368:                                              ; preds = %363
  %369 = icmp ugt i32 %74, 3
  br i1 %369, label %370, label %381

370:                                              ; preds = %368
  %371 = load atomic i32, i32* %77 monotonic, align 4
  %372 = and i32 %371, 1
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %378, label %374

374:                                              ; preds = %370
  %375 = getelementptr inbounds i8, i8* %79, i64 3
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i16
  br label %381

378:                                              ; preds = %370
  %379 = getelementptr inbounds i16, i16* %80, i64 3
  %380 = load i16, i16* %379, align 2
  br label %381

381:                                              ; preds = %368, %374, %378
  %382 = phi i16 [ 0, %368 ], [ %377, %374 ], [ %380, %378 ]
  %383 = icmp ne i16 %382, 107
  %384 = icmp eq i32 %74, 4
  %385 = or i1 %384, %383
  br i1 %385, label %96, label %386

386:                                              ; preds = %381
  %387 = icmp ugt i32 %74, 4
  br i1 %387, label %388, label %401

388:                                              ; preds = %386
  %389 = load atomic i32, i32* %77 monotonic, align 4
  %390 = and i32 %389, 1
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %397, label %392

392:                                              ; preds = %388
  %393 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1, i32 1
  %394 = bitcast i32* %393 to i8*
  %395 = load i8, i8* %394, align 1
  %396 = zext i8 %395 to i16
  br label %401

397:                                              ; preds = %388
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1, i32 2
  %399 = bitcast %"struct.std::__1::atomic.235"* %398 to i16*
  %400 = load i16, i16* %399, align 2
  br label %401

401:                                              ; preds = %386, %392, %397
  %402 = phi i16 [ 0, %386 ], [ %396, %392 ], [ %400, %397 ]
  %403 = icmp ne i16 %402, 105
  %404 = icmp eq i32 %74, 5
  %405 = or i1 %404, %403
  br i1 %405, label %96, label %406

406:                                              ; preds = %401
  %407 = icmp ugt i32 %74, 5
  br i1 %407, label %408, label %419

408:                                              ; preds = %406
  %409 = load atomic i32, i32* %77 monotonic, align 4
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %416, label %412

412:                                              ; preds = %408
  %413 = getelementptr inbounds i8, i8* %79, i64 5
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i16
  br label %419

416:                                              ; preds = %408
  %417 = getelementptr inbounds i16, i16* %80, i64 5
  %418 = load i16, i16* %417, align 2
  br label %419

419:                                              ; preds = %406, %412, %416
  %420 = phi i16 [ 0, %406 ], [ %415, %412 ], [ %418, %416 ]
  %421 = icmp ne i16 %420, 116
  %422 = icmp eq i32 %74, 6
  %423 = or i1 %422, %421
  br i1 %423, label %96, label %424

424:                                              ; preds = %419
  %425 = icmp ugt i32 %74, 6
  br i1 %425, label %426, label %438

426:                                              ; preds = %424
  %427 = load atomic i32, i32* %77 monotonic, align 4
  %428 = and i32 %427, 1
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %434, label %430

430:                                              ; preds = %426
  %431 = getelementptr inbounds i8, i8* %79, i64 6
  %432 = load i8, i8* %431, align 1
  %433 = zext i8 %432 to i16
  br label %438

434:                                              ; preds = %426
  %435 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 2
  %436 = bitcast %"class.WTF::StringImpl"* %435 to i16*
  %437 = load i16, i16* %436, align 2
  br label %438

438:                                              ; preds = %434, %430, %424
  %439 = phi i16 [ 0, %424 ], [ %433, %430 ], [ %437, %434 ]
  %440 = add i16 %439, -65
  %441 = icmp ult i16 %440, 26
  br i1 %441, label %118, label %96
}

declare %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink19CSSStyleDeclaration20AnonymousNamedSetterEPNS_11ScriptStateERKN3WTF12AtomicStringERKNS3_6StringE(%"class.blink::CSSStyleDeclaration"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::ExceptionState", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = tail call %"class.blink::ExecutionContext"* @_ZN5blink16ExecutionContext4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"* %1) #11
  %8 = icmp eq %"class.blink::ExecutionContext"* %7, null
  br i1 %8, label %88, label %9

9:                                                ; preds = %4
  %10 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringE(%"class.blink::ExecutionContext"* nonnull %7, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %88, label %12

12:                                               ; preds = %9
  %13 = bitcast %"class.blink::ExceptionState"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 72, i1 false)
  %14 = bitcast %"class.blink::ScriptState"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i32 %10, 1023
  %17 = tail call dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32 %16) #11
  %18 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %17, i64 0, i32 0
  %19 = bitcast %"class.blink::CSSProperty"* %17 to i8* (%"class.blink::CSSUnresolvedProperty"*)***
  %20 = load i8* (%"class.blink::CSSUnresolvedProperty"*)**, i8* (%"class.blink::CSSUnresolvedProperty"*)*** %19, align 8
  %21 = getelementptr inbounds i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %20, i64 3
  %22 = load i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %21, align 8
  %23 = tail call i8* %22(%"class.blink::CSSUnresolvedProperty"* %18) #11
  %24 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  %25 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 1, i32 0
  store i16 3, i16* %25, align 8
  %26 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 1, i32 1
  store i16 0, i16* %26, align 2
  %27 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 1, i32 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8** %27, align 8
  %28 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 1, i32 3
  store i8* %23, i8** %28, align 8
  %29 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 2
  store %"class.blink::ExceptionState::ContextScope"* null, %"class.blink::ExceptionState::ContextScope"** %29, align 8
  %30 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 3
  %31 = bitcast %"class.v8::Isolate"** %30 to i64*
  store i64 %15, i64* %31, align 8
  %32 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 4
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 5, i32 0, i32 0
  %34 = bitcast %"class.WTF::StringImpl"** %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 16, i1 false) #11
  %35 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #11
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %36, align 8
  %37 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %7, i64 0, i32 6, i32 11
  %38 = load i32, i32* %37, align 8
  %39 = bitcast %"class.blink::CSSStyleDeclaration"* %0 to void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)***
  %40 = load void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)**, void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)*, void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)** %40, i64 23
  %42 = load void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)*, void (%"class.blink::CSSStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)** %41, align 8
  call void %42(%"class.blink::CSSStyleDeclaration"* %0, i32 %10, %"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %3, i1 zeroext false, i32 %38, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %5) #11
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %12
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #11
  br label %58

58:                                               ; preds = %12, %54, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  %59 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %5, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %60 = load i64*, i64** %59, align 8
  %61 = icmp eq i64* %60, null
  br i1 %61, label %71, label %62

62:                                               ; preds = %58
  %63 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %30, align 8
  %64 = bitcast %"class.v8::Isolate"* %63 to %"class.v8::internal::Isolate"*
  %65 = load i64, i64* %60, align 8
  %66 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %64, i64 %65) #11
  %67 = call zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"* %63) #11
  br i1 %67, label %71, label %68

68:                                               ; preds = %62
  %69 = bitcast i64* %66 to %"class.v8::Value"*
  %70 = call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %63, %"class.v8::Value"* %69) #11
  br label %71

71:                                               ; preds = %68, %62, %58
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  br i1 %78, label %81, label %83

81:                                               ; preds = %74
  %82 = add i32 %80, -1
  store i32 %82, i32* %79, align 4
  br label %83

83:                                               ; preds = %81, %74
  %84 = phi i32 [ %82, %81 ], [ %80, %74 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #11
  br label %87

87:                                               ; preds = %71, %83, %86
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %13) #11
  br label %88

88:                                               ; preds = %9, %87, %4
  %89 = phi i32 [ 0, %4 ], [ 1, %87 ], [ 0, %9 ]
  ret i32 %89
}

declare %"class.blink::ExecutionContext"* @_ZN5blink16ExecutionContext4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"*) local_unnamed_addr #1

declare dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink19CSSStyleDeclaration21AnonymousNamedDeleterERKN3WTF12AtomicStringE(%"class.blink::CSSStyleDeclaration"* nocapture readnone, %"class.WTF::AtomicString"* nocapture readnone dereferenceable(8)) local_unnamed_addr #3 align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::CSSStyleDeclaration"*, %"class.WTF::Vector.261"* dereferenceable(16), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names to i8*) acquire, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %20, !prof !2

9:                                                ; preds = %3
  %10 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names) #11
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %9
  %13 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 5000, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorINS_6StringELj623ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #11
  %14 = getelementptr inbounds i8, i8* %13, i64 16
  %15 = bitcast i8* %13 to i8**
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds i8, i8* %13, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 623, i32* %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 12
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 4
  store i8* %13, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names) #11
  br label %20

20:                                               ; preds = %9, %12, %3
  %21 = load %"class.WTF::Vector.266"*, %"class.WTF::Vector.266"** getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink19CSSStyleDeclaration23NamedPropertyEnumeratorERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateEE16s_property_names, i64 0, i32 0, i32 0), align 8
  %22 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 0, i32 1
  %23 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %22) #11
  %24 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %21, i64 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %109

27:                                               ; preds = %20
  %28 = bitcast i8** %5 to i8*
  %29 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %21, i64 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %21, i64 0, i32 0, i32 0, i32 0
  br label %33

31:                                               ; preds = %65
  %32 = bitcast i8** %6 to i8*
  br label %74

33:                                               ; preds = %27, %65
  %34 = phi i32 [ 2, %27 ], [ %66, %65 ]
  %35 = call dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32 %34) #11
  %36 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %35, i64 0, i32 0
  %37 = bitcast %"class.blink::CSSProperty"* %35 to i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)***
  %38 = load i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)**, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*** %37, align 8
  %39 = getelementptr inbounds i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)** %38, i64 1
  %40 = load i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)** %39, align 8
  %41 = call i32 %40(%"class.blink::CSSUnresolvedProperty"* %36, %"class.blink::ExecutionContext"* %23) #11
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %43, label %65

43:                                               ; preds = %33
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  %44 = bitcast %"class.blink::CSSProperty"* %35 to i8* (%"class.blink::CSSUnresolvedProperty"*)***
  %45 = load i8* (%"class.blink::CSSUnresolvedProperty"*)**, i8* (%"class.blink::CSSUnresolvedProperty"*)*** %44, align 8
  %46 = getelementptr inbounds i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %45, i64 5
  %47 = load i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %46, align 8
  %48 = call i8* %47(%"class.blink::CSSUnresolvedProperty"* %36) #11
  store i8* %48, i8** %5, align 8
  %49 = load i32, i32* %24, align 4
  %50 = load i32, i32* %29, align 8
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %63, label %52, !prof !4

52:                                               ; preds = %43
  %53 = load %"class.WTF::String"*, %"class.WTF::String"** %30, align 8
  %54 = zext i32 %49 to i64
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 %54
  %56 = icmp eq i8* %48, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %52
  %58 = call i64 @strlen(i8* nonnull %48) #12
  br label %59

59:                                               ; preds = %57, %52
  %60 = phi i64 [ %58, %57 ], [ 0, %52 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %55, i8* %48, i64 %60) #11
  %61 = load i32, i32* %24, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %24, align 4
  br label %64

63:                                               ; preds = %43
  call void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14AppendSlowCaseIPKcEEvOT_(%"class.WTF::Vector.266"* %21, i8** nonnull dereferenceable(8) %5) #11
  br label %64

64:                                               ; preds = %59, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %65

65:                                               ; preds = %64, %33
  %66 = add nuw nsw i32 %34, 1
  %67 = icmp eq i32 %66, 525
  br i1 %67, label %31, label %33

68:                                               ; preds = %106
  %69 = load %"class.WTF::String"*, %"class.WTF::String"** %30, align 8
  %70 = load i32, i32* %24, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %69, i64 %71
  %73 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73)
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %69, %"class.WTF::String"* %72, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73)
  br label %109

74:                                               ; preds = %31, %106
  %75 = phi i32* [ getelementptr inbounds ([101 x i32], [101 x i32]* @_ZN5blinkL21kCSSPropertyAliasListE, i64 0, i64 0), %31 ], [ %107, %106 ]
  %76 = load i32, i32* %75, align 4
  %77 = call %"class.blink::CSSUnresolvedProperty"* @_ZN5blink21CSSUnresolvedProperty16GetAliasPropertyENS_13CSSPropertyIDE(i32 %76) #11
  %78 = bitcast %"class.blink::CSSUnresolvedProperty"* %77 to i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)***
  %79 = load i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)**, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)** %79, i64 1
  %81 = load i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)*, i32 (%"class.blink::CSSUnresolvedProperty"*, %"class.blink::ExecutionContext"*)** %80, align 8
  %82 = call i32 %81(%"class.blink::CSSUnresolvedProperty"* %77, %"class.blink::ExecutionContext"* %23) #11
  %83 = icmp eq i32 %82, 2
  br i1 %83, label %84, label %106

84:                                               ; preds = %74
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  %85 = bitcast %"class.blink::CSSUnresolvedProperty"* %77 to i8* (%"class.blink::CSSUnresolvedProperty"*)***
  %86 = load i8* (%"class.blink::CSSUnresolvedProperty"*)**, i8* (%"class.blink::CSSUnresolvedProperty"*)*** %85, align 8
  %87 = getelementptr inbounds i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %86, i64 5
  %88 = load i8* (%"class.blink::CSSUnresolvedProperty"*)*, i8* (%"class.blink::CSSUnresolvedProperty"*)** %87, align 8
  %89 = call i8* %88(%"class.blink::CSSUnresolvedProperty"* %77) #11
  store i8* %89, i8** %6, align 8
  %90 = load i32, i32* %24, align 4
  %91 = load i32, i32* %29, align 8
  %92 = icmp eq i32 %90, %91
  br i1 %92, label %104, label %93, !prof !4

93:                                               ; preds = %84
  %94 = load %"class.WTF::String"*, %"class.WTF::String"** %30, align 8
  %95 = zext i32 %90 to i64
  %96 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %94, i64 %95
  %97 = icmp eq i8* %89, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %93
  %99 = call i64 @strlen(i8* nonnull %89) #12
  br label %100

100:                                              ; preds = %98, %93
  %101 = phi i64 [ %99, %98 ], [ 0, %93 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %96, i8* %89, i64 %101) #11
  %102 = load i32, i32* %24, align 4
  %103 = add i32 %102, 1
  store i32 %103, i32* %24, align 4
  br label %105

104:                                              ; preds = %84
  call void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14AppendSlowCaseIPKcEEvOT_(%"class.WTF::Vector.266"* %21, i8** nonnull dereferenceable(8) %6) #11
  br label %105

105:                                              ; preds = %100, %104
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %106

106:                                              ; preds = %105, %74
  %107 = getelementptr inbounds i32, i32* %75, i64 1
  %108 = icmp eq i32* %107, getelementptr inbounds ([101 x i32], [101 x i32]* @_ZN5blinkL21kCSSPropertyAliasListE, i64 1, i64 0)
  br i1 %108, label %68, label %74

109:                                              ; preds = %68, %20
  %110 = call dereferenceable(16) %"class.WTF::Vector.261"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSILj623EEERS3_RKNS0_IS1_XT_ES2_EE(%"class.WTF::Vector.261"* %1, %"class.WTF::Vector.266"* dereferenceable(5000) %21)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

declare %"class.blink::CSSUnresolvedProperty"* @_ZN5blink21CSSUnresolvedProperty16GetAliasPropertyENS_13CSSPropertyIDE(i32) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %4, null
  %8 = icmp ne %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %9, label %15

9:                                                ; preds = %2
  br i1 %8, label %10, label %168

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  %14 = sext i1 %13 to i32
  br label %168

15:                                               ; preds = %2
  br i1 %8, label %21, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i32
  br label %168

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp ne i32 %28, 0
  br i1 %25, label %94, label %30

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %32, %34
  %36 = select i1 %35, i32 %32, i32 %34
  %37 = icmp eq i32 %36, 0
  br i1 %29, label %38, label %64

38:                                               ; preds = %30
  br i1 %37, label %59, label %39

39:                                               ; preds = %38
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %41 = bitcast %"class.WTF::StringImpl"* %40 to i8*
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %51, %39
  %45 = phi i32 [ %54, %51 ], [ 0, %39 ]
  %46 = phi i8* [ %53, %51 ], [ %41, %39 ]
  %47 = phi i8* [ %52, %51 ], [ %43, %39 ]
  %48 = load i8, i8* %47, align 1
  %49 = load i8, i8* %46, align 1
  %50 = icmp eq i8 %48, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %44
  %52 = getelementptr inbounds i8, i8* %47, i64 1
  %53 = getelementptr inbounds i8, i8* %46, i64 1
  %54 = add nuw i32 %45, 1
  %55 = icmp ult i32 %54, %36
  br i1 %55, label %44, label %59

56:                                               ; preds = %44
  %57 = icmp ugt i8 %48, %49
  %58 = select i1 %57, i32 1, i32 -1
  br label %168

59:                                               ; preds = %51, %38
  %60 = icmp eq i32 %32, %34
  br i1 %60, label %168, label %61

61:                                               ; preds = %59
  %62 = icmp ugt i32 %32, %34
  %63 = select i1 %62, i32 1, i32 -1
  br label %168

64:                                               ; preds = %30
  br i1 %37, label %89, label %65

65:                                               ; preds = %64
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %67 = bitcast %"class.WTF::StringImpl"* %66 to i16*
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %69 = bitcast %"class.WTF::StringImpl"* %68 to i8*
  br label %70

70:                                               ; preds = %79, %65
  %71 = phi i32 [ %82, %79 ], [ 0, %65 ]
  %72 = phi i16* [ %81, %79 ], [ %67, %65 ]
  %73 = phi i8* [ %80, %79 ], [ %69, %65 ]
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i16, i16* %72, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %84

79:                                               ; preds = %70
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  %81 = getelementptr inbounds i16, i16* %72, i64 1
  %82 = add nuw i32 %71, 1
  %83 = icmp ult i32 %82, %36
  br i1 %83, label %70, label %89

84:                                               ; preds = %70
  %85 = zext i8 %74 to i32
  %86 = zext i16 %76 to i32
  %87 = icmp ugt i32 %85, %86
  %88 = select i1 %87, i32 1, i32 -1
  br label %168

89:                                               ; preds = %79, %64
  %90 = icmp eq i32 %32, %34
  br i1 %90, label %168, label %91

91:                                               ; preds = %89
  %92 = icmp ugt i32 %32, %34
  %93 = select i1 %92, i32 1, i32 -1
  br label %168

94:                                               ; preds = %21
  br i1 %29, label %95, label %135

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp ult i32 %97, %99
  %101 = select i1 %100, i32 %97, i32 %99
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %127, label %103

103:                                              ; preds = %95
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %105 = bitcast %"class.WTF::StringImpl"* %104 to i16*
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %107 = bitcast %"class.WTF::StringImpl"* %106 to i8*
  br label %108

108:                                              ; preds = %117, %103
  %109 = phi i32 [ %120, %117 ], [ 0, %103 ]
  %110 = phi i16* [ %119, %117 ], [ %105, %103 ]
  %111 = phi i8* [ %118, %117 ], [ %107, %103 ]
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = load i16, i16* %110, align 2
  %115 = zext i16 %114 to i32
  %116 = icmp eq i32 %113, %115
  br i1 %116, label %117, label %122

117:                                              ; preds = %108
  %118 = getelementptr inbounds i8, i8* %111, i64 1
  %119 = getelementptr inbounds i16, i16* %110, i64 1
  %120 = add nuw i32 %109, 1
  %121 = icmp ult i32 %120, %101
  br i1 %121, label %108, label %127

122:                                              ; preds = %108
  %123 = zext i8 %112 to i32
  %124 = zext i16 %114 to i32
  %125 = icmp ugt i32 %123, %124
  %126 = select i1 %125, i32 1, i32 -1
  br label %132

127:                                              ; preds = %117, %95
  %128 = icmp eq i32 %97, %99
  br i1 %128, label %132, label %129

129:                                              ; preds = %127
  %130 = icmp ugt i32 %97, %99
  %131 = select i1 %130, i32 1, i32 -1
  br label %132

132:                                              ; preds = %129, %127, %122
  %133 = phi i32 [ %126, %122 ], [ %131, %129 ], [ 0, %127 ]
  %134 = sub nsw i32 0, %133
  br label %168

135:                                              ; preds = %94
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp ult i32 %137, %139
  %141 = select i1 %140, i32 %137, i32 %139
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %163, label %143

143:                                              ; preds = %135
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %145 = bitcast %"class.WTF::StringImpl"* %144 to i16*
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %147 = bitcast %"class.WTF::StringImpl"* %146 to i16*
  br label %148

148:                                              ; preds = %155, %143
  %149 = phi i32 [ %158, %155 ], [ 0, %143 ]
  %150 = phi i16* [ %157, %155 ], [ %145, %143 ]
  %151 = phi i16* [ %156, %155 ], [ %147, %143 ]
  %152 = load i16, i16* %151, align 2
  %153 = load i16, i16* %150, align 2
  %154 = icmp eq i16 %152, %153
  br i1 %154, label %155, label %160

155:                                              ; preds = %148
  %156 = getelementptr inbounds i16, i16* %151, i64 1
  %157 = getelementptr inbounds i16, i16* %150, i64 1
  %158 = add nuw i32 %149, 1
  %159 = icmp ult i32 %158, %141
  br i1 %159, label %148, label %163

160:                                              ; preds = %148
  %161 = icmp ugt i16 %152, %153
  %162 = select i1 %161, i32 1, i32 -1
  br label %168

163:                                              ; preds = %155, %135
  %164 = icmp eq i32 %137, %139
  br i1 %164, label %168, label %165

165:                                              ; preds = %163
  %166 = icmp ugt i32 %137, %139
  %167 = select i1 %166, i32 1, i32 -1
  br label %168

168:                                              ; preds = %9, %10, %16, %56, %59, %61, %84, %89, %91, %132, %160, %163, %165
  %169 = phi i32 [ %20, %16 ], [ 0, %9 ], [ %14, %10 ], [ %134, %132 ], [ %58, %56 ], [ %63, %61 ], [ 0, %59 ], [ %88, %84 ], [ %93, %91 ], [ 0, %89 ], [ %162, %160 ], [ %167, %165 ], [ 0, %163 ]
  %170 = icmp slt i32 %169, 0
  ret i1 %170
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.261"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSILj623EEERS3_RKNS0_IS1_XT_ES2_EE(%"class.WTF::Vector.261"*, %"class.WTF::Vector.266"* dereferenceable(5000)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %1, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %8, label %37

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::String"*, %"class.WTF::String"** %9, align 8
  %11 = zext i32 %4 to i64
  %12 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 %11
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 %13
  br label %15

15:                                               ; preds = %33, %8
  %16 = phi %"class.WTF::String"* [ %34, %33 ], [ %14, %8 ]
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #11
  br label %33

33:                                               ; preds = %32, %29, %15
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 1
  %35 = icmp eq %"class.WTF::String"* %34, %12
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 %6, i32* %3, align 4
  br label %114

37:                                               ; preds = %2
  %38 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = icmp ugt i32 %6, %39
  br i1 %40, label %41, label %112

41:                                               ; preds = %37
  %42 = icmp eq i32 %39, 0
  br i1 %42, label %78, label %43

43:                                               ; preds = %41
  %44 = icmp eq i32 %4, 0
  br i1 %44, label %72, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::String"*, %"class.WTF::String"** %46, align 8
  %48 = zext i32 %4 to i64
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %47, i64 %48
  br label %50

50:                                               ; preds = %68, %45
  %51 = phi %"class.WTF::String"* [ %69, %68 ], [ %47, %45 ]
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br i1 %59, label %62, label %64

62:                                               ; preds = %55
  %63 = add i32 %61, -1
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i32 [ %63, %62 ], [ %61, %55 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #11
  br label %68

68:                                               ; preds = %67, %64, %50
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 1
  %70 = icmp eq %"class.WTF::String"* %69, %49
  br i1 %70, label %71, label %50

71:                                               ; preds = %68
  store i32 0, i32* %3, align 4
  br label %72

72:                                               ; preds = %71, %43
  %73 = bitcast %"class.WTF::Vector.261"* %0 to i8**
  %74 = load i8*, i8** %73, align 8
  %75 = bitcast %"class.WTF::Vector.261"* %0 to i64*
  store atomic i64 0, i64* %75 monotonic, align 8
  store i32 0, i32* %38, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %74) #11
  %76 = load i32, i32* %5, align 4
  %77 = load i32, i32* %38, align 8
  br label %78

78:                                               ; preds = %41, %72
  %79 = phi i32 [ 0, %41 ], [ %77, %72 ]
  %80 = phi i32 [ %6, %41 ], [ %76, %72 ]
  %81 = icmp ult i32 %79, %80
  br i1 %81, label %82, label %112, !prof !5

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.WTF::String"*, %"class.WTF::String"** %83, align 8
  %85 = icmp eq %"class.WTF::String"* %84, null
  %86 = zext i32 %80 to i64
  %87 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %86) #11
  %88 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %87, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  br i1 %85, label %89, label %94

89:                                               ; preds = %82
  %90 = ptrtoint i8* %88 to i64
  %91 = bitcast %"class.WTF::Vector.261"* %0 to i64*
  store atomic i64 %90, i64* %91 monotonic, align 8
  %92 = lshr i64 %87, 3
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %38, align 8
  br label %112

94:                                               ; preds = %82
  %95 = lshr i64 %87, 3
  %96 = ptrtoint i8* %88 to i64
  %97 = load %"class.WTF::String"*, %"class.WTF::String"** %83, align 8
  %98 = icmp ne i8* %88, null
  %99 = icmp ne %"class.WTF::String"* %97, null
  %100 = and i1 %98, %99
  %101 = bitcast %"class.WTF::String"* %97 to i8*
  br i1 %100, label %102, label %108, !prof !5

102:                                              ; preds = %94
  %103 = load i32, i32* %3, align 4
  %104 = zext i32 %103 to i64
  %105 = shl nuw nsw i64 %104, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* nonnull align 8 %101, i64 %105, i1 false) #11
  %106 = bitcast %"class.WTF::Vector.261"* %0 to i8**
  %107 = load i8*, i8** %106, align 8
  br label %108

108:                                              ; preds = %102, %94
  %109 = phi i8* [ %107, %102 ], [ %101, %94 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %109) #11
  %110 = bitcast %"class.WTF::Vector.261"* %0 to i64*
  store atomic i64 %96, i64* %110 monotonic, align 8
  %111 = trunc i64 %95 to i32
  store i32 %111, i32* %38, align 8
  br label %112

112:                                              ; preds = %37, %78, %89, %108
  %113 = load i32, i32* %3, align 4
  br label %114

114:                                              ; preds = %112, %36
  %115 = phi i32 [ %113, %112 ], [ %6, %36 ]
  %116 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %1, i64 0, i32 0, i32 0, i32 0
  %117 = load %"class.WTF::String"*, %"class.WTF::String"** %116, align 8
  %118 = zext i32 %115 to i64
  %119 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %117, i64 %118
  %120 = getelementptr inbounds %"class.WTF::Vector.261", %"class.WTF::Vector.261"* %0, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.WTF::String"*, %"class.WTF::String"** %120, align 8
  %122 = icmp eq i32 %115, 0
  br i1 %122, label %173, label %123

123:                                              ; preds = %114, %165
  %124 = phi %"class.WTF::String"* [ %167, %165 ], [ %121, %114 ]
  %125 = phi %"class.WTF::String"* [ %166, %165 ], [ %117, %114 ]
  %126 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %125, i64 0, i32 0, i32 0
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %126, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %146, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #11
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !4

143:                                              ; preds = %134
  tail call void @llvm.trap() #11
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %144, %129, %123
  %147 = ptrtoint %"class.WTF::StringImpl"* %127 to i64
  %148 = bitcast %"class.WTF::String"* %124 to i64*
  %149 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %124, i64 0, i32 0, i32 0
  %150 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %149, align 8
  store i64 %147, i64* %148, align 8
  %151 = icmp eq %"class.WTF::StringImpl"* %150, null
  br i1 %151, label %165, label %152

152:                                              ; preds = %146
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = and i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 0
  %158 = load i32, i32* %157, align 4
  br i1 %156, label %159, label %161

159:                                              ; preds = %152
  %160 = add i32 %158, -1
  store i32 %160, i32* %157, align 4
  br label %161

161:                                              ; preds = %159, %152
  %162 = phi i32 [ %160, %159 ], [ %158, %152 ]
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %150) #11
  br label %165

165:                                              ; preds = %164, %161, %146
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %125, i64 1
  %167 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %124, i64 1
  %168 = icmp eq %"class.WTF::String"* %166, %119
  br i1 %168, label %169, label %123

169:                                              ; preds = %165
  %170 = load %"class.WTF::String"*, %"class.WTF::String"** %116, align 8
  %171 = load i32, i32* %3, align 4
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %120, align 8
  br label %173

173:                                              ; preds = %169, %114
  %174 = phi %"class.WTF::String"* [ %172, %169 ], [ %121, %114 ]
  %175 = phi i32 [ %171, %169 ], [ 0, %114 ]
  %176 = phi %"class.WTF::String"* [ %170, %169 ], [ %117, %114 ]
  %177 = zext i32 %175 to i64
  %178 = load i32, i32* %5, align 4
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %181 = icmp eq i32 %175, %178
  br i1 %181, label %215, label %182

182:                                              ; preds = %173
  %183 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %174, i64 %177
  %184 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %177
  br label %185

185:                                              ; preds = %182, %209
  %186 = phi %"class.WTF::String"* [ %210, %209 ], [ %183, %182 ]
  %187 = phi %"class.WTF::String"* [ %211, %209 ], [ %184, %182 ]
  %188 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %187, i64 0, i32 0, i32 0
  %189 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %188, align 8
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %186, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %189, %"class.WTF::StringImpl"** %190, align 8
  %191 = icmp eq %"class.WTF::StringImpl"* %189, null
  br i1 %191, label %209, label %192

192:                                              ; preds = %185
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %209

197:                                              ; preds = %192
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = zext i32 %199 to i33
  %201 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %200, i33 1) #11
  %202 = extractvalue { i33, i1 } %201, 1
  %203 = extractvalue { i33, i1 } %201, 0
  %204 = icmp slt i33 %203, 0
  %205 = or i1 %202, %204
  br i1 %205, label %206, label %207, !prof !4

206:                                              ; preds = %197
  tail call void @llvm.trap() #11
  unreachable

207:                                              ; preds = %197
  %208 = trunc i33 %203 to i32
  store i32 %208, i32* %198, align 4
  br label %209

209:                                              ; preds = %207, %192, %185
  %210 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %186, i64 1
  %211 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %187, i64 1
  %212 = icmp eq %"class.WTF::String"* %211, %180
  br i1 %212, label %213, label %185

213:                                              ; preds = %209
  %214 = load i32, i32* %5, align 4
  br label %215

215:                                              ; preds = %213, %173
  %216 = phi i32 [ %214, %213 ], [ %175, %173 ]
  store i32 %216, i32* %3, align 4
  ret %"class.WTF::Vector.261"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19CSSStyleDeclaration18NamedPropertyQueryERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::CSSStyleDeclaration"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSStyleDeclaration", %"class.blink::CSSStyleDeclaration"* %0, i64 0, i32 1
  %5 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %4) #11
  %6 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_115CssPropertyInfoEPKNS_16ExecutionContextERKN3WTF12AtomicStringE(%"class.blink::ExecutionContext"* %5, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15ScriptWrappableD2Ev(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19CSSStyleDeclarationD0Ev(%"class.blink::CSSStyleDeclaration"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv(%"class.blink::CSSStyleDeclaration"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink19CSSStyleDeclaration18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::CSSStyleSheet"* @_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv(%"class.blink::CSSStyleDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::CSSStyleSheet"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE4findERKS1_(%"class.WTF::HashTable.284"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.287"* %4, null
  br i1 %5, label %63, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %12) #11
  br label %19

19:                                               ; preds = %17, %6
  %20 = phi i32 [ %18, %17 ], [ %15, %6 ]
  %21 = and i32 %20, %9
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %4, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %63, label %27

27:                                               ; preds = %19
  %28 = xor i32 %20, -1
  %29 = lshr i32 %20, 23
  %30 = add i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %52, %27
  %42 = phi %"struct.WTF::KeyValuePair.287"* [ %23, %27 ], [ %57, %52 ]
  %43 = phi i64 [ %22, %27 ], [ %56, %52 ]
  %44 = phi i64 [ 0, %27 ], [ %54, %52 ]
  %45 = bitcast %"struct.WTF::KeyValuePair.287"* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, inttoptr (i64 -1 to i8*)
  br i1 %47, label %52, label %48

48:                                               ; preds = %41
  %49 = bitcast i8* %46 to %"class.WTF::StringImpl"*
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %51 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"* %50) #11
  br i1 %51, label %61, label %52

52:                                               ; preds = %48, %41
  %53 = icmp eq i64 %44, 0
  %54 = select i1 %53, i64 %40, i64 %44
  %55 = add i64 %54, %43
  %56 = and i64 %55, %10
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %4, i64 %56
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %63, label %41

61:                                               ; preds = %48
  %62 = icmp eq %"struct.WTF::KeyValuePair.287"* %42, null
  br i1 %62, label %63, label %69

63:                                               ; preds = %52, %61, %19, %2
  %64 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %3, align 8
  %65 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %64, i64 %67
  br label %74

69:                                               ; preds = %61
  %70 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %3, align 8
  %71 = load i32, i32* %7, align 8
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %70, i64 %72
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi %"struct.WTF::KeyValuePair.287"* [ %42, %69 ], [ %68, %63 ]
  %76 = phi %"struct.WTF::KeyValuePair.287"* [ %73, %69 ], [ %68, %63 ]
  %77 = insertvalue { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } undef, %"struct.WTF::KeyValuePair.287"* %75, 0
  %78 = insertvalue { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } %77, %"struct.WTF::KeyValuePair.287"* %76, 1
  ret { %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"* } %78
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

declare i32 @_ZN5blink23UnresolvedCSSPropertyIDEPKNS_16ExecutionContextERKN3WTF6StringE(%"class.blink::ExecutionContext"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #11
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !4

22:                                               ; preds = %15
  %23 = bitcast %union.anon* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon* %16 to %"class.WTF::Vector.293"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.293"* %30, i16* nonnull dereferenceable(2) %3) #11
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #11
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !4

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.288"* %41, i8* nonnull dereferenceable(1) %4) #11
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.288"*, i8* dereferenceable(1)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.288"* %0, i32 %5) #11
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.288"* %0, i32 %5) #11
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.288"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #11
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #11
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #11
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #11
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !5

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #11
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #11
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.288"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector.288"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.288"* %0, i32 %27) #11
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.288"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector.288"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector.288"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !4

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #11
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.289"* %18, i8* nonnull %6) #11
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #11
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #11
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !5

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #11
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !5

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.289"* %46, i8* %42) #11
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector.288"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector.288", %"class.WTF::Vector.288"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #11
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.289"*, i8*) local_unnamed_addr #6 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.293"*, i16* dereferenceable(2)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.293"* %0, i32 %5) #11
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.293"* %0, i32 %5) #11
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.293"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #11
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #11
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #11
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #11
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !5

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #11
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #11
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.293"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.293"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.293"* %0, i32 %27) #11
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.293"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.293"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.293"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !4

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #11
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.294"* %19, i16* nonnull %6) #11
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #11
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #11
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !5

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #11
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !5

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.294"* %53, i16* %48) #11
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.293"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.293", %"class.WTF::Vector.293"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.294"*, i16*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #11
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.287"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISC_S7_SD_EERKNS_12AtomicStringERS4_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable.284"*, %"class.WTF::AtomicString"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.287"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.287"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.284"* %0, %"struct.WTF::KeyValuePair.287"* null)
  %9 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.287"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %78, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair.287"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair.287"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair.287"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %132, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair.287"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair.287"* %59, null
  br i1 %69, label %78, label %70

70:                                               ; preds = %68
  %71 = bitcast %"struct.WTF::KeyValuePair.287"* %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 16, i1 false) #11
  %72 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  br label %78

78:                                               ; preds = %24, %68, %70
  %79 = phi %"struct.WTF::KeyValuePair.287"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %99, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i33
  %91 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %90, i33 1) #11
  %92 = extractvalue { i33, i1 } %91, 1
  %93 = extractvalue { i33, i1 } %91, 0
  %94 = icmp slt i33 %93, 0
  %95 = or i1 %92, %94
  br i1 %95, label %96, label %97, !prof !4

96:                                               ; preds = %87
  tail call void @llvm.trap() #11
  unreachable

97:                                               ; preds = %87
  %98 = trunc i33 %93 to i32
  store i32 %98, i32* %88, align 4
  br label %99

99:                                               ; preds = %97, %82, %78
  %100 = ptrtoint %"class.WTF::StringImpl"* %80 to i64
  %101 = bitcast %"struct.WTF::KeyValuePair.287"* %79 to i64*
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %79, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  store i64 %100, i64* %101, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %118, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  br i1 %109, label %112, label %114

112:                                              ; preds = %105
  %113 = add i32 %111, -1
  store i32 %113, i32* %110, align 4
  br label %114

114:                                              ; preds = %112, %105
  %115 = phi i32 [ %113, %112 ], [ %111, %105 ]
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %103) #11
  br label %118

118:                                              ; preds = %99, %114, %117
  %119 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %79, i64 0, i32 1
  %120 = load i32, i32* %2, align 4
  store i32 %120, i32* %119, align 4
  %121 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 2
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, 1
  store i32 %123, i32* %121, align 4
  %124 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 3
  %125 = load i32, i32* %124, align 8
  %126 = add i32 %125, %123
  %127 = shl i32 %126, 1
  %128 = load i32, i32* %12, align 8
  %129 = icmp ult i32 %127, %128
  br i1 %129, label %132, label %130

130:                                              ; preds = %118
  %131 = tail call %"struct.WTF::KeyValuePair.287"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.284"* %0, %"struct.WTF::KeyValuePair.287"* %79)
  br label %132

132:                                              ; preds = %54, %118, %130
  %133 = phi i8 [ 1, %118 ], [ 1, %130 ], [ 0, %54 ]
  %134 = phi %"struct.WTF::KeyValuePair.287"* [ %79, %118 ], [ %131, %130 ], [ %47, %54 ]
  %135 = insertvalue { %"struct.WTF::KeyValuePair.287"*, i8 } undef, %"struct.WTF::KeyValuePair.287"* %134, 0
  %136 = insertvalue { %"struct.WTF::KeyValuePair.287"*, i8 } %135, i8 %133, 1
  ret { %"struct.WTF::KeyValuePair.287"*, i8 } %136
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.287"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.284"*, %"struct.WTF::KeyValuePair.287"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #11
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %22, i8* %23) #11
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #11
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([100 x i8], [100 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringEN5blink13CSSPropertyIDEEEEEPKcv, i64 0, i64 0)) #11
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #11
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.287"*
  %37 = call %"struct.WTF::KeyValuePair.287"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE8RehashToEPS5_jSF_(%"class.WTF::HashTable.284"* %0, %"struct.WTF::KeyValuePair.287"* %36, i32 %32, %"struct.WTF::KeyValuePair.287"* %1) #11
  ret %"struct.WTF::KeyValuePair.287"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.287"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE8RehashToEPS5_jSF_(%"class.WTF::HashTable.284"*, %"struct.WTF::KeyValuePair.287"*, i32, %"struct.WTF::KeyValuePair.287"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.284", align 8
  %6 = bitcast %"class.WTF::HashTable.284"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.284"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.287"* %1, %"struct.WTF::KeyValuePair.287"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.287"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.284"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.284"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.287"* %22 to i64
  br label %71

24:                                               ; preds = %114
  %25 = bitcast %"class.WTF::HashTable.284"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.284"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %115, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.287"* [ null, %16 ], [ %118, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %116, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair.287"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %67, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %62, %39
  %42 = phi i64 [ 0, %39 ], [ %63, %62 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %35, i64 %42
  %44 = bitcast %"struct.WTF::KeyValuePair.287"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %47 = ptrtoint i8* %45 to i64
  switch i64 %47, label %48 [
    i64 -1, label %62
    i64 0, label %62
  ]

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %45, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = bitcast i8* %45 to i32*
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %48
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %48
  %59 = phi i32 [ %57, %56 ], [ %55, %48 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %46) #11
  br label %62

62:                                               ; preds = %61, %58, %41, %41
  %63 = add nuw nsw i64 %42, 1
  %64 = icmp eq i64 %63, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %62, %37
  %66 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #11
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %67

67:                                               ; preds = %28, %65
  %68 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, -2147483648
  store i32 %70, i32* %68, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"struct.WTF::KeyValuePair.287"* %33

71:                                               ; preds = %21, %114
  %72 = phi i64 [ %115, %114 ], [ %23, %21 ]
  %73 = phi i32 [ %116, %114 ], [ %13, %21 ]
  %74 = phi %"struct.WTF::KeyValuePair.287"* [ %117, %114 ], [ %22, %21 ]
  %75 = phi %"struct.WTF::KeyValuePair.287"* [ %118, %114 ], [ null, %21 ]
  %76 = phi i32 [ %119, %114 ], [ 0, %21 ]
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %74, i64 %77
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %78, i64 0, i32 0, i32 0, i32 0
  %80 = bitcast %"struct.WTF::KeyValuePair.287"* %78 to i64*
  %81 = load i64, i64* %80, align 8
  switch i64 %81, label %82 [
    i64 -1, label %114
    i64 0, label %114
  ]

82:                                               ; preds = %71
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %78, i64 0, i32 0
  %84 = call { %"struct.WTF::KeyValuePair.287"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable.284"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %83) #11
  %85 = extractvalue { %"struct.WTF::KeyValuePair.287"*, i8 } %84, 0
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %102, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  br i1 %93, label %96, label %98

96:                                               ; preds = %89
  %97 = add i32 %95, -1
  store i32 %97, i32* %94, align 4
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi i32 [ %97, %96 ], [ %95, %89 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #11
  br label %102

102:                                              ; preds = %82, %98, %101
  %103 = load i64, i64* %80, align 8
  %104 = bitcast %"struct.WTF::KeyValuePair.287"* %85 to i64*
  store i64 %103, i64* %104, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %105 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %85, i64 0, i32 1
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %74, i64 %77, i32 1
  %107 = load i32, i32* %106, align 8
  store i32 %107, i32* %105, align 8
  %108 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %15, align 8
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %108, i64 %77
  %110 = icmp eq %"struct.WTF::KeyValuePair.287"* %109, %3
  %111 = select i1 %110, %"struct.WTF::KeyValuePair.287"* %85, %"struct.WTF::KeyValuePair.287"* %75
  %112 = load i32, i32* %12, align 8
  %113 = ptrtoint %"struct.WTF::KeyValuePair.287"* %108 to i64
  br label %114

114:                                              ; preds = %71, %71, %102
  %115 = phi i64 [ %72, %71 ], [ %113, %102 ], [ %72, %71 ]
  %116 = phi i32 [ %73, %71 ], [ %112, %102 ], [ %73, %71 ]
  %117 = phi %"struct.WTF::KeyValuePair.287"* [ %74, %71 ], [ %108, %102 ], [ %74, %71 ]
  %118 = phi %"struct.WTF::KeyValuePair.287"* [ %75, %71 ], [ %111, %102 ], [ %75, %71 ]
  %119 = add i32 %76, 1
  %120 = icmp eq i32 %119, %116
  br i1 %120, label %24, label %71
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.287"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_N5blink13CSSPropertyIDEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS9_IS4_EEEESA_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable.284"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.287"*, %"struct.WTF::KeyValuePair.287"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.284", %"class.WTF::HashTable.284"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #11
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %4, i64 %20
  %22 = ptrtoint %"struct.WTF::KeyValuePair.287"* %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"struct.WTF::KeyValuePair.287"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"struct.WTF::KeyValuePair.287"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair.287"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair.287"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"struct.WTF::KeyValuePair.287"* [ null, %26 ], [ %62, %61 ]
  %50 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %51 = phi %"struct.WTF::KeyValuePair.287"* [ %21, %26 ], [ %67, %61 ]
  %52 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %53 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %54 = bitcast %"struct.WTF::KeyValuePair.287"* %51 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, inttoptr (i64 -1 to i8*)
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = bitcast i8* %55 to %"class.WTF::StringImpl"*
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"* %59) #11
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %48
  %62 = phi %"struct.WTF::KeyValuePair.287"* [ %49, %57 ], [ %51, %48 ]
  %63 = icmp eq i64 %53, 0
  %64 = select i1 %63, i64 %39, i64 %53
  %65 = add i64 %64, %52
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %4, i64 %66
  %68 = ptrtoint %"struct.WTF::KeyValuePair.287"* %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.287", %"struct.WTF::KeyValuePair.287"* %67, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %57, %42
  %73 = phi i64 [ %47, %42 ], [ %50, %57 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %57 ]
  %75 = inttoptr i64 %73 to %"struct.WTF::KeyValuePair.287"*
  %76 = insertvalue { %"struct.WTF::KeyValuePair.287"*, i8 } undef, %"struct.WTF::KeyValuePair.287"* %75, 0
  %77 = insertvalue { %"struct.WTF::KeyValuePair.287"*, i8 } %76, i8 %74, 1
  ret { %"struct.WTF::KeyValuePair.287"*, i8 } %77
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #9

declare zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"*, %"class.v8::Value"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14AppendSlowCaseIPKcEEvOT_(%"class.WTF::Vector.266"*, i8** dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  tail call void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.266"* %0, i32 %5) #11
  %6 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = load i32, i32* %3, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %9
  %11 = load i8*, i8** %1, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = tail call i64 @strlen(i8* nonnull %11) #12
  br label %15

15:                                               ; preds = %2, %13
  %16 = phi i64 [ %14, %13 ], [ 0, %2 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %10, i8* %11, i64 %16) #11
  %17 = load i32, i32* %3, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %3, align 4
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.266"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #11
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #11
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #11
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #11
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !5

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = icmp eq %"class.WTF::String"* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 623
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %37) #11
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.266"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 3
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.266"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 623, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.266"* %0, i32 %27) #11
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj623ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.266"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 624
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::String"*, %"class.WTF::String"** %5, align 8
  %7 = icmp eq %"class.WTF::String"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.WTF::String"*
  %10 = icmp eq %"class.WTF::String"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.266"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 623, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.266"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 623, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !4

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast %"class.WTF::String"* %6 to i8*
  %27 = shl nuw nsw i64 %25, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %26, i64 %27, i1 false) #11
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferINS_6StringELj623ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS1_(%"class.WTF::VectorBuffer.267"* %19, %"class.WTF::String"* nonnull %6) #11
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %30) #11
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %33 = lshr i64 %31, 3
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::String"*, %"class.WTF::String"** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne %"class.WTF::String"* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !5

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast %"class.WTF::String"* %36 to i8*
  %45 = shl nuw nsw i64 %43, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %44, i64 %45, i1 false) #11
  %46 = load %"class.WTF::String"*, %"class.WTF::String"** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi %"class.WTF::String"* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to %"class.WTF::String"*
  %51 = icmp eq %"class.WTF::String"* %48, %50
  br i1 %51, label %54, label %52, !prof !5

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferINS_6StringELj623ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS1_(%"class.WTF::VectorBuffer.267"* %53, %"class.WTF::String"* %48) #11
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.266"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.266", %"class.WTF::Vector.266"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferINS_6StringELj623ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS1_(%"class.WTF::VectorBuffer.267"*, %"class.WTF::String"*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast %"class.WTF::String"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %285, %3
  %5 = phi %"class.WTF::String"* [ %1, %3 ], [ %266, %285 ]
  %6 = phi %"class.WTF::String"* [ %0, %3 ], [ %18, %285 ]
  %7 = ptrtoint %"class.WTF::String"* %5 to i64
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %9 = bitcast %"class.WTF::String"* %8 to i64*
  %10 = bitcast %"class.WTF::String"* %8 to i64*
  %11 = bitcast %"class.WTF::String"* %8 to i64*
  %12 = bitcast %"class.WTF::String"* %8 to i64*
  %13 = bitcast %"class.WTF::String"* %8 to i64*
  %14 = ptrtoint %"class.WTF::String"* %5 to i64
  br label %15

15:                                               ; preds = %294, %4
  %16 = phi %"class.WTF::String"* [ %6, %4 ], [ %295, %294 ]
  br label %17

17:                                               ; preds = %216, %15
  %18 = phi %"class.WTF::String"* [ %16, %15 ], [ %207, %216 ]
  %19 = ptrtoint %"class.WTF::String"* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 3
  switch i64 %21, label %105 [
    i64 0, label %298
    i64 1, label %298
    i64 2, label %22
    i64 3, label %31
    i64 4, label %66
    i64 5, label %71
  ]

22:                                               ; preds = %17
  %23 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %25 = tail call zeroext i1 %23(%"class.WTF::String"* dereferenceable(8) %24, %"class.WTF::String"* dereferenceable(8) %18) #11
  br i1 %25, label %26, label %298

26:                                               ; preds = %22
  %27 = bitcast %"class.WTF::String"* %18 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.WTF::String"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  br label %298

31:                                               ; preds = %17
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %34 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %35 = tail call zeroext i1 %34(%"class.WTF::String"* dereferenceable(8) %32, %"class.WTF::String"* dereferenceable(8) %18) #11
  %36 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %37 = tail call zeroext i1 %36(%"class.WTF::String"* dereferenceable(8) %33, %"class.WTF::String"* dereferenceable(8) %32) #11
  br i1 %35, label %51, label %38

38:                                               ; preds = %31
  br i1 %37, label %39, label %298

39:                                               ; preds = %38
  %40 = bitcast %"class.WTF::String"* %32 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.WTF::String"* %33 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %40, align 8
  store i64 %41, i64* %42, align 8
  %44 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %45 = tail call zeroext i1 %44(%"class.WTF::String"* dereferenceable(8) %32, %"class.WTF::String"* dereferenceable(8) %18) #11
  br i1 %45, label %46, label %298

46:                                               ; preds = %39
  %47 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %50 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %50, align 8
  br label %298

51:                                               ; preds = %31
  %52 = bitcast %"class.WTF::String"* %18 to i64*
  %53 = load i64, i64* %52, align 8
  br i1 %37, label %54, label %57

54:                                               ; preds = %51
  %55 = bitcast %"class.WTF::String"* %33 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  store i64 %53, i64* %55, align 8
  br label %298

57:                                               ; preds = %51
  %58 = bitcast %"class.WTF::String"* %32 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %52, align 8
  store i64 %53, i64* %58, align 8
  %60 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %61 = tail call zeroext i1 %60(%"class.WTF::String"* dereferenceable(8) %33, %"class.WTF::String"* dereferenceable(8) %32) #11
  br i1 %61, label %62, label %298

62:                                               ; preds = %57
  %63 = load i64, i64* %58, align 8
  %64 = bitcast %"class.WTF::String"* %33 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %58, align 8
  store i64 %63, i64* %64, align 8
  br label %298

66:                                               ; preds = %17
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %68 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 2
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %70 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %67, %"class.WTF::String"* %68, %"class.WTF::String"* %69, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %298

71:                                               ; preds = %17
  %72 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %73 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 2
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 3
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %76 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %72, %"class.WTF::String"* %73, %"class.WTF::String"* %74, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #11
  %77 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %78 = tail call zeroext i1 %77(%"class.WTF::String"* dereferenceable(8) %75, %"class.WTF::String"* dereferenceable(8) %74) #11
  br i1 %78, label %79, label %298

79:                                               ; preds = %71
  %80 = bitcast %"class.WTF::String"* %74 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.WTF::String"* %75 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %80, align 8
  store i64 %81, i64* %82, align 8
  %84 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %85 = tail call zeroext i1 %84(%"class.WTF::String"* dereferenceable(8) %74, %"class.WTF::String"* dereferenceable(8) %73) #11
  br i1 %85, label %86, label %298

86:                                               ; preds = %79
  %87 = bitcast %"class.WTF::String"* %73 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8
  %89 = shufflevector <2 x i64> %88, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %90 = bitcast %"class.WTF::String"* %73 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %90, align 8
  %91 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %92 = tail call zeroext i1 %91(%"class.WTF::String"* dereferenceable(8) %73, %"class.WTF::String"* dereferenceable(8) %72) #11
  br i1 %92, label %93, label %298

93:                                               ; preds = %86
  %94 = bitcast %"class.WTF::String"* %72 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8
  %96 = shufflevector <2 x i64> %95, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %97 = bitcast %"class.WTF::String"* %72 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %97, align 8
  %98 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %99 = tail call zeroext i1 %98(%"class.WTF::String"* dereferenceable(8) %72, %"class.WTF::String"* dereferenceable(8) %18) #11
  br i1 %99, label %100, label %298

100:                                              ; preds = %93
  %101 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  br label %298

105:                                              ; preds = %17
  %106 = icmp slt i64 %20, 56
  br i1 %106, label %107, label %108

107:                                              ; preds = %105
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %298

108:                                              ; preds = %105
  %109 = icmp sgt i64 %20, 7992
  %110 = sdiv i64 %21, 2
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 %110
  br i1 %109, label %112, label %145

112:                                              ; preds = %108
  %113 = sdiv i64 %21, 4
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 %113
  %115 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 %113
  %116 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %114, %"class.WTF::String"* %111, %"class.WTF::String"* %115, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #11
  %117 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %118 = tail call zeroext i1 %117(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %115) #11
  br i1 %118, label %119, label %174

119:                                              ; preds = %112
  %120 = bitcast %"class.WTF::String"* %115 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = load i64, i64* %12, align 8
  store i64 %122, i64* %120, align 8
  store i64 %121, i64* %12, align 8
  %123 = add i32 %116, 1
  %124 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %125 = tail call zeroext i1 %124(%"class.WTF::String"* dereferenceable(8) %115, %"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %125, label %126, label %174

126:                                              ; preds = %119
  %127 = bitcast %"class.WTF::String"* %111 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load i64, i64* %120, align 8
  store i64 %129, i64* %127, align 8
  store i64 %128, i64* %120, align 8
  %130 = add i32 %116, 2
  %131 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %132 = tail call zeroext i1 %131(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %114) #11
  br i1 %132, label %133, label %174

133:                                              ; preds = %126
  %134 = bitcast %"class.WTF::String"* %114 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = load i64, i64* %127, align 8
  store i64 %136, i64* %134, align 8
  store i64 %135, i64* %127, align 8
  %137 = add i32 %116, 3
  %138 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %139 = tail call zeroext i1 %138(%"class.WTF::String"* dereferenceable(8) %114, %"class.WTF::String"* dereferenceable(8) %18) #11
  br i1 %139, label %140, label %174

140:                                              ; preds = %133
  %141 = bitcast %"class.WTF::String"* %18 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %134, align 8
  store i64 %143, i64* %141, align 8
  store i64 %142, i64* %134, align 8
  %144 = add i32 %116, 4
  br label %174

145:                                              ; preds = %108
  %146 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %147 = tail call zeroext i1 %146(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %18) #11
  %148 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %149 = tail call zeroext i1 %148(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %147, label %161, label %150

150:                                              ; preds = %145
  br i1 %149, label %151, label %174

151:                                              ; preds = %150
  %152 = bitcast %"class.WTF::String"* %111 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* %9, align 8
  store i64 %154, i64* %152, align 8
  store i64 %153, i64* %9, align 8
  %155 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %156 = tail call zeroext i1 %155(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %18) #11
  br i1 %156, label %157, label %174

157:                                              ; preds = %151
  %158 = bitcast %"class.WTF::String"* %18 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = load i64, i64* %152, align 8
  store i64 %160, i64* %158, align 8
  store i64 %159, i64* %152, align 8
  br label %174

161:                                              ; preds = %145
  %162 = bitcast %"class.WTF::String"* %18 to i64*
  %163 = load i64, i64* %162, align 8
  br i1 %149, label %164, label %166

164:                                              ; preds = %161
  %165 = load i64, i64* %11, align 8
  store i64 %165, i64* %162, align 8
  store i64 %163, i64* %11, align 8
  br label %174

166:                                              ; preds = %161
  %167 = bitcast %"class.WTF::String"* %111 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %162, align 8
  store i64 %163, i64* %167, align 8
  %169 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %170 = tail call zeroext i1 %169(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %170, label %171, label %174

171:                                              ; preds = %166
  %172 = load i64, i64* %167, align 8
  %173 = load i64, i64* %10, align 8
  store i64 %173, i64* %167, align 8
  store i64 %172, i64* %10, align 8
  br label %174

174:                                              ; preds = %171, %166, %164, %157, %151, %150, %140, %133, %126, %119, %112
  %175 = phi i32 [ %144, %140 ], [ %137, %133 ], [ %130, %126 ], [ %123, %119 ], [ %116, %112 ], [ 1, %164 ], [ 0, %150 ], [ 2, %157 ], [ 1, %151 ], [ 2, %171 ], [ 1, %166 ]
  %176 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %177 = tail call zeroext i1 %176(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %177, label %232, label %178

178:                                              ; preds = %174, %223
  %179 = phi %"class.WTF::String"* [ %180, %223 ], [ %8, %174 ]
  %180 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %179, i64 -1
  %181 = icmp eq %"class.WTF::String"* %18, %180
  br i1 %181, label %182, label %223

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %184 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %185 = tail call zeroext i1 %184(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %8) #11
  br i1 %185, label %200, label %186

186:                                              ; preds = %182
  %187 = icmp eq %"class.WTF::String"* %183, %8
  br i1 %187, label %298, label %188

188:                                              ; preds = %186, %197
  %189 = phi %"class.WTF::String"* [ %198, %197 ], [ %183, %186 ]
  %190 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %191 = tail call zeroext i1 %190(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %189) #11
  br i1 %191, label %192, label %197

192:                                              ; preds = %188
  %193 = bitcast %"class.WTF::String"* %189 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = load i64, i64* %13, align 8
  store i64 %195, i64* %193, align 8
  store i64 %194, i64* %13, align 8
  %196 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  br label %200

197:                                              ; preds = %188
  %198 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %199 = icmp eq %"class.WTF::String"* %198, %8
  br i1 %199, label %298, label %188

200:                                              ; preds = %192, %182
  %201 = phi %"class.WTF::String"* [ %183, %182 ], [ %196, %192 ]
  %202 = icmp eq %"class.WTF::String"* %201, %8
  br i1 %202, label %298, label %203

203:                                              ; preds = %200, %218
  %204 = phi %"class.WTF::String"* [ %210, %218 ], [ %201, %200 ]
  %205 = phi %"class.WTF::String"* [ %214, %218 ], [ %8, %200 ]
  br label %206

206:                                              ; preds = %206, %203
  %207 = phi %"class.WTF::String"* [ %204, %203 ], [ %210, %206 ]
  %208 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %209 = tail call zeroext i1 %208(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %207) #11
  %210 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %207, i64 1
  br i1 %209, label %211, label %206

211:                                              ; preds = %206, %211
  %212 = phi %"class.WTF::String"* [ %214, %211 ], [ %205, %206 ]
  %213 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %214 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %212, i64 -1
  %215 = tail call zeroext i1 %213(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %214) #11
  br i1 %215, label %211, label %216

216:                                              ; preds = %211
  %217 = icmp ult %"class.WTF::String"* %207, %214
  br i1 %217, label %218, label %17

218:                                              ; preds = %216
  %219 = bitcast %"class.WTF::String"* %207 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.WTF::String"* %214 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %219, align 8
  store i64 %220, i64* %221, align 8
  br label %203

223:                                              ; preds = %178
  %224 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %225 = tail call zeroext i1 %224(%"class.WTF::String"* dereferenceable(8) %180, %"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %225, label %226, label %178

226:                                              ; preds = %223
  %227 = bitcast %"class.WTF::String"* %18 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.WTF::String"* %180 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %227, align 8
  store i64 %228, i64* %229, align 8
  %231 = add i32 %175, 1
  br label %232

232:                                              ; preds = %174, %226
  %233 = phi i32 [ %231, %226 ], [ %175, %174 ]
  %234 = phi %"class.WTF::String"* [ %180, %226 ], [ %8, %174 ]
  %235 = ptrtoint %"class.WTF::String"* %18 to i64
  %236 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %237 = icmp ult %"class.WTF::String"* %236, %234
  br i1 %237, label %238, label %263

238:                                              ; preds = %232, %255
  %239 = phi %"class.WTF::String"* [ %262, %255 ], [ %111, %232 ]
  %240 = phi i32 [ %260, %255 ], [ %233, %232 ]
  %241 = phi %"class.WTF::String"* [ %247, %255 ], [ %236, %232 ]
  %242 = phi %"class.WTF::String"* [ %251, %255 ], [ %234, %232 ]
  br label %243

243:                                              ; preds = %243, %238
  %244 = phi %"class.WTF::String"* [ %241, %238 ], [ %247, %243 ]
  %245 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %246 = tail call zeroext i1 %245(%"class.WTF::String"* dereferenceable(8) %244, %"class.WTF::String"* dereferenceable(8) %239) #11
  %247 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %244, i64 1
  br i1 %246, label %243, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"class.WTF::String"* [ %251, %248 ], [ %242, %243 ]
  %250 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %251 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %249, i64 -1
  %252 = tail call zeroext i1 %250(%"class.WTF::String"* dereferenceable(8) %251, %"class.WTF::String"* dereferenceable(8) %239) #11
  br i1 %252, label %253, label %248

253:                                              ; preds = %248
  %254 = icmp ugt %"class.WTF::String"* %244, %251
  br i1 %254, label %263, label %255

255:                                              ; preds = %253
  %256 = bitcast %"class.WTF::String"* %244 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.WTF::String"* %251 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %256, align 8
  store i64 %257, i64* %258, align 8
  %260 = add i32 %240, 1
  %261 = icmp eq %"class.WTF::String"* %239, %244
  %262 = select i1 %261, %"class.WTF::String"* %251, %"class.WTF::String"* %239
  br label %238

263:                                              ; preds = %253, %232
  %264 = phi %"class.WTF::String"* [ %111, %232 ], [ %239, %253 ]
  %265 = phi i32 [ %233, %232 ], [ %240, %253 ]
  %266 = phi %"class.WTF::String"* [ %236, %232 ], [ %244, %253 ]
  %267 = icmp eq %"class.WTF::String"* %266, %264
  br i1 %267, label %277, label %268

268:                                              ; preds = %263
  %269 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %270 = tail call zeroext i1 %269(%"class.WTF::String"* dereferenceable(8) %264, %"class.WTF::String"* dereferenceable(8) %266) #11
  br i1 %270, label %271, label %277

271:                                              ; preds = %268
  %272 = bitcast %"class.WTF::String"* %266 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.WTF::String"* %264 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %272, align 8
  store i64 %273, i64* %274, align 8
  %276 = add i32 %265, 1
  br label %277

277:                                              ; preds = %263, %271, %268
  %278 = phi i32 [ %276, %271 ], [ %265, %268 ], [ %265, %263 ]
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %287

280:                                              ; preds = %277
  %281 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %266, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %282 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  %283 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"* %282, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br i1 %283, label %284, label %286

284:                                              ; preds = %280
  br i1 %281, label %298, label %285

285:                                              ; preds = %284, %296
  br label %4

286:                                              ; preds = %280
  br i1 %281, label %294, label %287

287:                                              ; preds = %286, %277
  %288 = ptrtoint %"class.WTF::String"* %266 to i64
  %289 = sub i64 %288, %235
  %290 = sub i64 %14, %288
  %291 = icmp slt i64 %289, %290
  br i1 %291, label %292, label %296

292:                                              ; preds = %287
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %266, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %293 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  br label %294

294:                                              ; preds = %292, %286
  %295 = phi %"class.WTF::String"* [ %282, %286 ], [ %293, %292 ]
  br label %15

296:                                              ; preds = %287
  %297 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %297, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %285

298:                                              ; preds = %284, %200, %17, %17, %186, %197, %100, %93, %86, %79, %71, %62, %57, %54, %46, %39, %38, %22, %26, %66, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %7 = tail call zeroext i1 %6(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #11
  %8 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %9 = tail call zeroext i1 %8(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #11
  br i1 %7, label %22, label %10

10:                                               ; preds = %5
  br i1 %9, label %11, label %37

11:                                               ; preds = %10
  %12 = bitcast %"class.WTF::String"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.WTF::String"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %12, align 8
  store i64 %13, i64* %14, align 8
  %16 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %17 = tail call zeroext i1 %16(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %17, label %18, label %37

18:                                               ; preds = %11
  %19 = bitcast %"class.WTF::String"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %12, align 8
  store i64 %21, i64* %19, align 8
  store i64 %20, i64* %12, align 8
  br label %37

22:                                               ; preds = %5
  %23 = bitcast %"class.WTF::String"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  br i1 %9, label %25, label %28

25:                                               ; preds = %22
  %26 = bitcast %"class.WTF::String"* %2 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %23, align 8
  store i64 %24, i64* %26, align 8
  br label %37

28:                                               ; preds = %22
  %29 = bitcast %"class.WTF::String"* %1 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %23, align 8
  store i64 %24, i64* %29, align 8
  %31 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %32 = tail call zeroext i1 %31(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #11
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load i64, i64* %29, align 8
  %35 = bitcast %"class.WTF::String"* %2 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %29, align 8
  store i64 %34, i64* %35, align 8
  br label %37

37:                                               ; preds = %10, %11, %18, %25, %28, %33
  %38 = phi i32 [ 1, %25 ], [ 0, %10 ], [ 2, %18 ], [ 1, %11 ], [ 2, %33 ], [ 1, %28 ]
  %39 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %40 = tail call zeroext i1 %39(%"class.WTF::String"* dereferenceable(8) %3, %"class.WTF::String"* dereferenceable(8) %2) #11
  br i1 %40, label %41, label %61

41:                                               ; preds = %37
  %42 = bitcast %"class.WTF::String"* %2 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.WTF::String"* %3 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  store i64 %43, i64* %44, align 8
  %46 = add nuw nsw i32 %38, 1
  %47 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %48 = tail call zeroext i1 %47(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #11
  br i1 %48, label %49, label %61

49:                                               ; preds = %41
  %50 = bitcast %"class.WTF::String"* %1 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %42, align 8
  store i64 %52, i64* %50, align 8
  store i64 %51, i64* %42, align 8
  %53 = add nuw nsw i32 %38, 2
  %54 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %55 = tail call zeroext i1 %54(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %55, label %56, label %61

56:                                               ; preds = %49
  %57 = bitcast %"class.WTF::String"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i64, i64* %50, align 8
  store i64 %59, i64* %57, align 8
  store i64 %58, i64* %50, align 8
  %60 = add nuw nsw i32 %38, 3
  br label %61

61:                                               ; preds = %41, %56, %49, %37
  %62 = phi i32 [ %60, %56 ], [ %53, %49 ], [ %46, %41 ], [ %38, %37 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::String", align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %7 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %8 = tail call zeroext i1 %7(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %0) #11
  %9 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %10 = tail call zeroext i1 %9(%"class.WTF::String"* dereferenceable(8) %5, %"class.WTF::String"* dereferenceable(8) %6) #11
  br i1 %8, label %24, label %11

11:                                               ; preds = %3
  br i1 %10, label %12, label %40

12:                                               ; preds = %11
  %13 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %16 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8
  %17 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %18 = tail call zeroext i1 %17(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %23 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %23, align 8
  br label %40

24:                                               ; preds = %3
  %25 = bitcast %"class.WTF::String"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  br i1 %10, label %27, label %30

27:                                               ; preds = %24
  %28 = bitcast %"class.WTF::String"* %5 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  store i64 %26, i64* %28, align 8
  br label %40

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::String"* %6 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %25, align 8
  store i64 %26, i64* %31, align 8
  %33 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %34 = tail call zeroext i1 %33(%"class.WTF::String"* dereferenceable(8) %5, %"class.WTF::String"* dereferenceable(8) %6) #11
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %39 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %39, align 8
  br label %40

40:                                               ; preds = %11, %12, %19, %27, %30, %35
  %41 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %42 = icmp eq %"class.WTF::String"* %41, %1
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = bitcast %"class.WTF::String"* %4 to i8*
  %45 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %46 = bitcast %"class.WTF::String"* %4 to i64*
  br label %48

47:                                               ; preds = %123, %40
  ret void

48:                                               ; preds = %43, %123
  %49 = phi %"class.WTF::String"* [ %41, %43 ], [ %124, %123 ]
  %50 = phi %"class.WTF::String"* [ %5, %43 ], [ %49, %123 ]
  %51 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %52 = call zeroext i1 %51(%"class.WTF::String"* dereferenceable(8) %49, %"class.WTF::String"* dereferenceable(8) %50) #11
  br i1 %52, label %53, label %123

53:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #11
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 0, i32 0, i32 0
  %55 = bitcast %"class.WTF::String"* %49 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %46, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %54, align 8
  br label %57

57:                                               ; preds = %82, %53
  %58 = phi %"class.WTF::String"* [ %49, %53 ], [ %59, %82 ]
  %59 = phi %"class.WTF::String"* [ %50, %53 ], [ %84, %82 ]
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %59, i64 0, i32 0, i32 0
  %61 = bitcast %"class.WTF::String"* %59 to i64*
  %62 = load i64, i64* %61, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %60, align 8
  %63 = bitcast %"class.WTF::String"* %58 to i64*
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %58, i64 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  store i64 %62, i64* %63, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %57
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #11
  br label %80

80:                                               ; preds = %57, %76, %79
  %81 = icmp eq %"class.WTF::String"* %59, %0
  br i1 %81, label %86, label %82

82:                                               ; preds = %80
  %83 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %84 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %59, i64 -1
  %85 = call zeroext i1 %83(%"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::String"* dereferenceable(8) %84) #11
  br i1 %85, label %57, label %86

86:                                               ; preds = %80, %82
  %87 = phi %"class.WTF::String"* [ %59, %82 ], [ %0, %80 ]
  %88 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %87, i64 0, i32 0, i32 0
  %89 = bitcast %"class.WTF::String"* %87 to i64*
  %90 = load i64, i64* %46, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %45, align 8
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  store i64 %90, i64* %89, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %106, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %93
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %93
  %103 = phi i32 [ %101, %100 ], [ %99, %93 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %91) #11
  br label %106

106:                                              ; preds = %86, %102, %105
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #11
  br label %122

122:                                              ; preds = %106, %118, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #11
  br label %123

123:                                              ; preds = %122, %48
  %124 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 1
  %125 = icmp eq %"class.WTF::String"* %124, %1
  br i1 %125, label %47, label %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::String", align 8
  %5 = ptrtoint %"class.WTF::String"* %1 to i64
  %6 = ptrtoint %"class.WTF::String"* %0 to i64
  %7 = sub i64 %5, %6
  %8 = ashr exact i64 %7, 3
  switch i64 %8, label %92 [
    i64 0, label %220
    i64 1, label %220
    i64 2, label %9
    i64 3, label %18
    i64 4, label %53
    i64 5, label %58
  ]

9:                                                ; preds = %3
  %10 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %12 = tail call zeroext i1 %10(%"class.WTF::String"* dereferenceable(8) %11, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %12, label %13, label %220

13:                                               ; preds = %9
  %14 = bitcast %"class.WTF::String"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.WTF::String"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %14, align 8
  store i64 %15, i64* %16, align 8
  br label %220

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %21 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %22 = tail call zeroext i1 %21(%"class.WTF::String"* dereferenceable(8) %19, %"class.WTF::String"* dereferenceable(8) %0) #11
  %23 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %24 = tail call zeroext i1 %23(%"class.WTF::String"* dereferenceable(8) %20, %"class.WTF::String"* dereferenceable(8) %19) #11
  br i1 %22, label %38, label %25

25:                                               ; preds = %18
  br i1 %24, label %26, label %220

26:                                               ; preds = %25
  %27 = bitcast %"class.WTF::String"* %19 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.WTF::String"* %20 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  %31 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %32 = tail call zeroext i1 %31(%"class.WTF::String"* dereferenceable(8) %19, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %32, label %33, label %220

33:                                               ; preds = %26
  %34 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = shufflevector <2 x i64> %35, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %37 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  br label %220

38:                                               ; preds = %18
  %39 = bitcast %"class.WTF::String"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  br i1 %24, label %41, label %44

41:                                               ; preds = %38
  %42 = bitcast %"class.WTF::String"* %20 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %39, align 8
  store i64 %40, i64* %42, align 8
  br label %220

44:                                               ; preds = %38
  %45 = bitcast %"class.WTF::String"* %19 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %39, align 8
  store i64 %40, i64* %45, align 8
  %47 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %48 = tail call zeroext i1 %47(%"class.WTF::String"* dereferenceable(8) %20, %"class.WTF::String"* dereferenceable(8) %19) #11
  br i1 %48, label %49, label %220

49:                                               ; preds = %44
  %50 = load i64, i64* %45, align 8
  %51 = bitcast %"class.WTF::String"* %20 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %45, align 8
  store i64 %50, i64* %51, align 8
  br label %220

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %56 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %57 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %0, %"class.WTF::String"* %54, %"class.WTF::String"* %55, %"class.WTF::String"* %56, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %220

58:                                               ; preds = %3
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %63 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %0, %"class.WTF::String"* %59, %"class.WTF::String"* %60, %"class.WTF::String"* %61, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #11
  %64 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %65 = tail call zeroext i1 %64(%"class.WTF::String"* dereferenceable(8) %62, %"class.WTF::String"* dereferenceable(8) %61) #11
  br i1 %65, label %66, label %220

66:                                               ; preds = %58
  %67 = bitcast %"class.WTF::String"* %61 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.WTF::String"* %62 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %67, align 8
  store i64 %68, i64* %69, align 8
  %71 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %72 = tail call zeroext i1 %71(%"class.WTF::String"* dereferenceable(8) %61, %"class.WTF::String"* dereferenceable(8) %60) #11
  br i1 %72, label %73, label %220

73:                                               ; preds = %66
  %74 = bitcast %"class.WTF::String"* %60 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 8
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %77 = bitcast %"class.WTF::String"* %60 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %79 = tail call zeroext i1 %78(%"class.WTF::String"* dereferenceable(8) %60, %"class.WTF::String"* dereferenceable(8) %59) #11
  br i1 %79, label %80, label %220

80:                                               ; preds = %73
  %81 = bitcast %"class.WTF::String"* %59 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 8
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %84 = bitcast %"class.WTF::String"* %59 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %84, align 8
  %85 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %86 = tail call zeroext i1 %85(%"class.WTF::String"* dereferenceable(8) %59, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %86, label %87, label %220

87:                                               ; preds = %80
  %88 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8
  %90 = shufflevector <2 x i64> %89, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %91 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  br label %220

92:                                               ; preds = %3
  %93 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %95 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %96 = tail call zeroext i1 %95(%"class.WTF::String"* dereferenceable(8) %94, %"class.WTF::String"* dereferenceable(8) %0) #11
  %97 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %98 = tail call zeroext i1 %97(%"class.WTF::String"* dereferenceable(8) %93, %"class.WTF::String"* dereferenceable(8) %94) #11
  br i1 %96, label %112, label %99

99:                                               ; preds = %92
  br i1 %98, label %100, label %128

100:                                              ; preds = %99
  %101 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  %105 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %106 = tail call zeroext i1 %105(%"class.WTF::String"* dereferenceable(8) %94, %"class.WTF::String"* dereferenceable(8) %0) #11
  br i1 %106, label %107, label %128

107:                                              ; preds = %100
  %108 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8
  %110 = shufflevector <2 x i64> %109, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %111 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %111, align 8
  br label %128

112:                                              ; preds = %92
  %113 = bitcast %"class.WTF::String"* %0 to i64*
  %114 = load i64, i64* %113, align 8
  br i1 %98, label %115, label %118

115:                                              ; preds = %112
  %116 = bitcast %"class.WTF::String"* %93 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %113, align 8
  store i64 %114, i64* %116, align 8
  br label %128

118:                                              ; preds = %112
  %119 = bitcast %"class.WTF::String"* %94 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %113, align 8
  store i64 %114, i64* %119, align 8
  %121 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %122 = tail call zeroext i1 %121(%"class.WTF::String"* dereferenceable(8) %93, %"class.WTF::String"* dereferenceable(8) %94) #11
  br i1 %122, label %123, label %128

123:                                              ; preds = %118
  %124 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8
  %126 = shufflevector <2 x i64> %125, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %127 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %127, align 8
  br label %128

128:                                              ; preds = %99, %100, %107, %115, %118, %123
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %130 = icmp eq %"class.WTF::String"* %129, %1
  br i1 %130, label %220, label %131

131:                                              ; preds = %128
  %132 = bitcast %"class.WTF::String"* %4 to i8*
  %133 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %134 = bitcast %"class.WTF::String"* %4 to i64*
  br label %135

135:                                              ; preds = %131, %213
  %136 = phi %"class.WTF::String"* [ %129, %131 ], [ %215, %213 ]
  %137 = phi i32 [ 0, %131 ], [ %214, %213 ]
  %138 = phi %"class.WTF::String"* [ %93, %131 ], [ %136, %213 ]
  %139 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %140 = call zeroext i1 %139(%"class.WTF::String"* dereferenceable(8) %136, %"class.WTF::String"* dereferenceable(8) %138) #11
  br i1 %140, label %141, label %213

141:                                              ; preds = %135
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #11
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 0, i32 0, i32 0
  %143 = bitcast %"class.WTF::String"* %136 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %134, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %142, align 8
  br label %145

145:                                              ; preds = %170, %141
  %146 = phi %"class.WTF::String"* [ %136, %141 ], [ %147, %170 ]
  %147 = phi %"class.WTF::String"* [ %138, %141 ], [ %172, %170 ]
  %148 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %147, i64 0, i32 0, i32 0
  %149 = bitcast %"class.WTF::String"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %148, align 8
  %151 = bitcast %"class.WTF::String"* %146 to i64*
  %152 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %146, i64 0, i32 0, i32 0
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8
  store i64 %150, i64* %151, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %168, label %155

155:                                              ; preds = %145
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  br i1 %159, label %162, label %164

162:                                              ; preds = %155
  %163 = add i32 %161, -1
  store i32 %163, i32* %160, align 4
  br label %164

164:                                              ; preds = %162, %155
  %165 = phi i32 [ %163, %162 ], [ %161, %155 ]
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %164
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #11
  br label %168

168:                                              ; preds = %145, %164, %167
  %169 = icmp eq %"class.WTF::String"* %147, %0
  br i1 %169, label %174, label %170

170:                                              ; preds = %168
  %171 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %172 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %147, i64 -1
  %173 = call zeroext i1 %171(%"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::String"* dereferenceable(8) %172) #11
  br i1 %173, label %145, label %174

174:                                              ; preds = %168, %170
  %175 = phi %"class.WTF::String"* [ %147, %170 ], [ %0, %168 ]
  %176 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %175, i64 0, i32 0, i32 0
  %177 = bitcast %"class.WTF::String"* %175 to i64*
  %178 = load i64, i64* %134, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %133, align 8
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %176, align 8
  store i64 %178, i64* %177, align 8
  %180 = icmp eq %"class.WTF::StringImpl"* %179, null
  br i1 %180, label %194, label %181

181:                                              ; preds = %174
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  br i1 %185, label %188, label %190

188:                                              ; preds = %181
  %189 = add i32 %187, -1
  store i32 %189, i32* %186, align 4
  br label %190

190:                                              ; preds = %188, %181
  %191 = phi i32 [ %189, %188 ], [ %187, %181 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %179) #11
  br label %194

194:                                              ; preds = %174, %190, %193
  %195 = add i32 %137, 1
  %196 = icmp eq i32 %195, 8
  %197 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %198 = icmp eq %"class.WTF::StringImpl"* %197, null
  br i1 %198, label %212, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %197) #11
  br label %212

212:                                              ; preds = %194, %208, %211
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #11
  br i1 %196, label %217, label %213

213:                                              ; preds = %212, %135
  %214 = phi i32 [ %195, %212 ], [ %137, %135 ]
  %215 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 1
  %216 = icmp eq %"class.WTF::String"* %215, %1
  br i1 %216, label %220, label %135

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 1
  %219 = icmp eq %"class.WTF::String"* %218, %1
  br label %220

220:                                              ; preds = %213, %217, %128, %87, %80, %73, %66, %58, %49, %44, %41, %33, %26, %25, %9, %13, %3, %3, %53
  %221 = phi i1 [ true, %53 ], [ true, %3 ], [ true, %3 ], [ true, %13 ], [ true, %9 ], [ true, %25 ], [ true, %26 ], [ true, %33 ], [ true, %41 ], [ true, %44 ], [ true, %49 ], [ true, %58 ], [ true, %66 ], [ true, %73 ], [ true, %80 ], [ true, %87 ], [ true, %128 ], [ %219, %217 ], [ true, %213 ]
  ret i1 %221
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!"branch_weights", i32 2000, i32 1}
