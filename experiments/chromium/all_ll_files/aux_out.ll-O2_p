; ModuleID = '../../third_party/libjxl/src/lib/jxl/aux_out.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/aux_out.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.11" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.18" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.26", %"class.std::__1::vector.39", %"class.std::__1::vector.26", %"class.std::__1::vector.46", %"class.std::__1::vector.54", %"class.std::__1::vector.63", %"class.std::__1::vector.77", %"class.std::__1::vector.28", %"class.std::__1::vector.26", %"class.std::__1::vector.28", i32, i8, %"class.std::__1::vector.28" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.49" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.48", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.48" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.58" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.56", %"struct.std::__1::array.57", i32, i8, [3 x i8] }>
%"struct.std::__1::array.56" = type { [17 x i32] }
%"struct.std::__1::array.57" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.72" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.65" }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i16*, i16*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i16* }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.94" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.79", i32, %"class.std::__1::vector.80", %"class.std::__1::vector.87" }
%"struct.std::__1::array.79" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { i32*, i32*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { i32* }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.89" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.std::__1::vector.28"*, %"class.std::__1::vector.28"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.std::__1::vector.28"* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { i8*, i8*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.109" }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.23", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.100", i64 }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.0", %"struct.std::__1::array.0", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.5" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.0" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.5" = type { %"class.std::__1::__function::__policy_func.9" }
%"class.std::__1::__function::__policy_func.9" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.10", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.10" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.107", i8, i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"class.jxl::Image3.114" = type { [3 x %"class.jxl::Plane.115"] }
%"class.jxl::Plane.115" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK3jxl6AuxOut9DumpImageIsEEvPKcRKNS_6Image3IT_EE = comdat any

$_ZN3jxl10CodecInOutC2Ev = comdat any

$_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE = comdat any

$_ZN3jxl14ConvertToFloatIsEENS_6Image3IfEERKNS1_IT_EE = comdat any

$_ZN3jxl10CodecInOutD2Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_ = comdat any

$_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_ = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@.str = private unnamed_addr constant [35 x i8] c"Average butteraugli iters: %10.2f\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Total layer bits %-10s\09\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%10f%%\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Total image size           \00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"  %6u (%5.2f%%)    %6u (%5.2f%%)\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/aux_out.cc\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"coeff_image.xsize() % 64 == 0\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"headers\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"TOC\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"noise\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"quantizer\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"quant tables\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"DC\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"ControlFields\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"AC\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"ACTokens\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"dictionary\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"dots\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"splines\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"lossless\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"modularGlobal\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"modularDcGroup\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"modularAcGroup\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"modularTree\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"depth\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"extra channels\00", align 1
@.str.32 = private unnamed_addr constant [38 x i8] c"%s:%d: JXL_ABORT: Invalid layer %zu\0A\0A\00", align 1
@.str.33 = private unnamed_addr constant [47 x i8] c"../../third_party/libjxl/src/lib/jxl/aux_out.h\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"%10zd\00", align 1
@.str.35 = private unnamed_addr constant [50 x i8] c"   [c/i:%6.2f | hst:%8zd | ex:%8zd | h+c+e:%12.3f\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c"called_\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c".png\00", align 1
@__const._ZNK3jxl6AuxOut9DumpImageIsEEvPKcRKNS_6Image3IT_EE.io = private unnamed_addr constant { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.23", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.100", i64 }, %"class.std::__1::vector.107", i8, [7 x i8], i64 } { %"struct.jxl::SizeConstraints" { i32 -1431655766, i32 -1431655766, i64 -6148914691236517206 }, %"class.jxl::DecoderHints" { %"class.std::__1::vector" { %"class.std::__1::__vector_base" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"class.std::__1::__compressed_pair.11" { %"struct.std::__1::__compressed_pair_elem.12" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*) } } } } }, i32 -1431655766, float 0xFFFFFFFFE0000000, i64 -6148914691236517206, %"struct.jxl::Blobs" { %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" } { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.16" { %"class.std::__1::__vector_base.17" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.18" { %"struct.std::__1::__compressed_pair_elem.19" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }> }, { %"class.std::__1::unique_ptr.23", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.100", i64 } { %"class.std::__1::unique_ptr.23" { %"class.std::__1::__compressed_pair.24" { %"struct.std::__1::__compressed_pair_elem.25" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.100" { %"class.std::__1::__vector_base.101" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.102" { %"struct.std::__1::__compressed_pair_elem.103" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.std::__1::vector.107" { %"class.std::__1::__vector_base.108" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.std::__1::__compressed_pair.109" { %"struct.std::__1::__compressed_pair_elem.110" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*) } } } }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, align 8
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.42 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.43 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.44 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.45 = private unnamed_addr constant [32 x i8] c"metadata.size.Set(xsize, ysize)\00", align 1
@.str.46 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane1)\00", align 1
@.str.48 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane2)\00", align 1
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@str = private unnamed_addr constant [34 x i8] c"\0ADC pred     Y                XB:\00", align 1
@switch.table._ZNK3jxl6AuxOut5PrintEm = private unnamed_addr constant [21 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl6AuxOut5PrintEm(%"struct.jxl::AuxOut"* readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %142, label %12

4:                                                ; preds = %12
  %5 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 14
  %6 = load i32, i32* %5, align 8
  %7 = sitofp i32 %6 to double
  %8 = uitofp i64 %1 to double
  %9 = fdiv double %7, %8
  %10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), double %9)
  %11 = uitofp i64 %30 to double
  br label %76

12:                                               ; preds = %2, %12
  %13 = phi i64 [ %34, %12 ], [ 0, %2 ]
  %14 = phi double [ %33, %12 ], [ 0.000000e+00, %2 ]
  %15 = phi i64 [ %30, %12 ], [ 0, %2 ]
  %16 = phi i64 [ %24, %12 ], [ 0, %2 ]
  %17 = phi i64 [ %27, %12 ], [ 0, %2 ]
  %18 = phi i64 [ %21, %12 ], [ 0, %2 ]
  %19 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %13, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %18
  %22 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %13, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %16
  %25 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %13, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %17
  %28 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %13, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %15
  %31 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %13, i32 4
  %32 = load double, double* %31, align 8
  %33 = fadd double %14, %32
  %34 = add nuw nsw i64 %13, 1
  %35 = icmp eq i64 %34, 21
  br i1 %35, label %4, label %12

36:                                               ; preds = %120
  %37 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %38 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0), i64 %30) #5
  %39 = icmp eq i64 %24, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %36
  %41 = uitofp i64 %21 to double
  %42 = fdiv double %41, %8
  %43 = lshr i64 %24, 3
  %44 = lshr i64 %27, 3
  %45 = uitofp i64 %24 to double
  %46 = fadd double %33, %45
  %47 = uitofp i64 %27 to double
  %48 = fadd double %46, %47
  %49 = fmul double %48, 1.250000e-01
  %50 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.35, i64 0, i64 0), double %42, i64 %43, i64 %44, double %49) #5
  %51 = tail call i32 @putchar(i32 93) #5
  br label %52

52:                                               ; preds = %36, %40
  %53 = tail call i32 @putchar(i32 10) #5
  %54 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 0
  %55 = bitcast i32* %54 to <8 x i32>*
  %56 = load <8 x i32>, <8 x i32>* %55, align 4
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = add <8 x i32> %56, %57
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = add <8 x i32> %58, %59
  %61 = shufflevector <8 x i32> %60, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = add <8 x i32> %60, %61
  %63 = extractelement <8 x i32> %62, i32 0
  %64 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 0
  %65 = bitcast i32* %64 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 4
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = add <8 x i32> %66, %67
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = add <8 x i32> %68, %69
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = add <8 x i32> %70, %71
  %73 = extractelement <8 x i32> %72, i32 0
  %74 = sub i32 0, %73
  %75 = icmp eq i32 %63, %74
  br i1 %75, label %142, label %123

76:                                               ; preds = %120, %4
  %77 = phi i64 [ 0, %4 ], [ %121, %120 ]
  %78 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %77, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %120, label %81

81:                                               ; preds = %76
  %82 = icmp ult i64 %77, 21
  br i1 %82, label %86, label %83

83:                                               ; preds = %81
  %84 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0), i32 115, i64 %77) #5
  %85 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

86:                                               ; preds = %81
  %87 = getelementptr inbounds [21 x i8*], [21 x i8*]* @switch.table._ZNK3jxl6AuxOut5PrintEm, i64 0, i64 %77
  %88 = load i8*, i8** %87, align 8
  %89 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %88)
  %90 = load i64, i64* %78, align 8
  %91 = uitofp i64 %90 to double
  %92 = fmul double %91, 1.000000e+02
  %93 = fdiv double %92, %11
  %94 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), double %93)
  %95 = load i64, i64* %78, align 8
  %96 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0), i64 %95) #5
  %97 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %77, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %118, label %100

100:                                              ; preds = %86
  %101 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %77, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = uitofp i64 %102 to double
  %104 = fdiv double %103, %8
  %105 = lshr i64 %98, 3
  %106 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %77, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = lshr i64 %107, 3
  %109 = uitofp i64 %98 to double
  %110 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 0, i32 0, i64 %77, i32 4
  %111 = load double, double* %110, align 8
  %112 = fadd double %111, %109
  %113 = uitofp i64 %107 to double
  %114 = fadd double %112, %113
  %115 = fmul double %114, 1.250000e-01
  %116 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.35, i64 0, i64 0), double %104, i64 %105, i64 %108, double %115) #5
  %117 = tail call i32 @putchar(i32 93) #5
  br label %118

118:                                              ; preds = %86, %100
  %119 = tail call i32 @putchar(i32 10) #5
  br label %120

120:                                              ; preds = %76, %118
  %121 = add nuw nsw i64 %77, 1
  %122 = icmp eq i64 %121, 21
  br i1 %122, label %36, label %76

123:                                              ; preds = %52
  %124 = tail call i32 @puts(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str, i64 0, i64 0))
  %125 = uitofp i32 %63 to double
  %126 = uitofp i32 %73 to double
  br label %127

127:                                              ; preds = %127, %123
  %128 = phi i64 [ 0, %123 ], [ %140, %127 ]
  %129 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 12, i32 0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = uitofp i32 %130 to double
  %132 = fmul double %131, 1.000000e+02
  %133 = fdiv double %132, %125
  %134 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 13, i32 0, i64 %128
  %135 = load i32, i32* %134, align 4
  %136 = uitofp i32 %135 to double
  %137 = fmul double %136, 1.000000e+02
  %138 = fdiv double %137, %126
  %139 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i32 %130, double %133, i32 %135, double %138)
  %140 = add nuw nsw i64 %128, 1
  %141 = icmp eq i64 %140, 8
  br i1 %141, label %142, label %127

142:                                              ; preds = %127, %52, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl6AuxOut14DumpCoeffImageEPKcRKNS_6Image3IsEE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Image3.114"* nocapture readonly dereferenceable(96)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::Image3.114", align 8
  %5 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = and i64 %7, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.9, i64 0, i64 0), i32 71, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0)) #5
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

13:                                               ; preds = %3
  %14 = bitcast %"class.jxl::Image3.114"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 96, i1 false)
  %15 = lshr i64 %7, 3
  %16 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %20, i64 %15, i64 %19, i64 2) #5
  %21 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %21, i64 %15, i64 %19, i64 2) #5
  %22 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %22, i64 %15, i64 %19, i64 2) #5
  %23 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 0, i32 0, i32 4
  %25 = load i32, i32* %16, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %226, label %27

27:                                               ; preds = %13
  %28 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i32, i32* %5, align 8
  br label %43

31:                                               ; preds = %226
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %228) #5
  br label %32

32:                                               ; preds = %31, %226
  %33 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  store i8* null, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %34) #5
  br label %37

37:                                               ; preds = %36, %32
  %38 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  store i8* null, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #5
  br label %42

42:                                               ; preds = %37, %41
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %14) #5
  ret void

43:                                               ; preds = %27, %57
  %44 = phi i32 [ %25, %27 ], [ %58, %57 ]
  %45 = phi i32 [ %30, %27 ], [ %59, %57 ]
  %46 = phi i64 [ 0, %27 ], [ %60, %57 ]
  %47 = icmp eq i32 %45, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %43
  %49 = shl i64 %46, 3
  br label %52

50:                                               ; preds = %57
  %51 = icmp eq i32 %58, 0
  br i1 %51, label %226, label %102

52:                                               ; preds = %48, %63
  %53 = phi i64 [ 0, %48 ], [ %64, %63 ]
  %54 = lshr exact i64 %53, 3
  br label %68

55:                                               ; preds = %63
  %56 = load i32, i32* %16, align 4
  br label %57

57:                                               ; preds = %55, %43
  %58 = phi i32 [ %56, %55 ], [ %44, %43 ]
  %59 = phi i32 [ %65, %55 ], [ 0, %43 ]
  %60 = add nuw nsw i64 %46, 1
  %61 = zext i32 %58 to i64
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %43, label %50

63:                                               ; preds = %68
  %64 = add nuw nsw i64 %53, 64
  %65 = load i32, i32* %5, align 8
  %66 = zext i32 %65 to i64
  %67 = icmp ult i64 %64, %66
  br i1 %67, label %52, label %55

68:                                               ; preds = %68, %52
  %69 = phi i64 [ 0, %52 ], [ %100, %68 ]
  %70 = load i64, i64* %23, align 8
  %71 = mul i64 %70, %46
  %72 = load i8*, i8** %28, align 8
  %73 = ptrtoint i8* %72 to i64
  %74 = and i64 %73, 63
  %75 = icmp eq i64 %74, 0
  call void @llvm.assume(i1 %75) #5
  %76 = getelementptr inbounds i8, i8* %72, i64 %71
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  call void @llvm.assume(i1 %79) #5
  %80 = bitcast i8* %76 to i16*
  %81 = add nuw nsw i64 %69, %53
  %82 = getelementptr inbounds i16, i16* %80, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = lshr i64 %69, 3
  %85 = add i64 %84, %49
  %86 = load i64, i64* %24, align 8
  %87 = mul i64 %86, %85
  %88 = load i8*, i8** %29, align 8
  %89 = ptrtoint i8* %88 to i64
  %90 = and i64 %89, 63
  %91 = icmp eq i64 %90, 0
  call void @llvm.assume(i1 %91) #5
  %92 = getelementptr inbounds i8, i8* %88, i64 %87
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  call void @llvm.assume(i1 %95) #5
  %96 = bitcast i8* %92 to i16*
  %97 = and i64 %69, 7
  %98 = or i64 %97, %54
  %99 = getelementptr inbounds i16, i16* %96, i64 %98
  store i16 %83, i16* %99, align 2
  %100 = add nuw nsw i64 %69, 1
  %101 = icmp eq i64 %100, 64
  br i1 %101, label %63, label %68

102:                                              ; preds = %50
  %103 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %104 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %105 = load i32, i32* %5, align 8
  br label %106

106:                                              ; preds = %157, %102
  %107 = phi i32 [ %58, %102 ], [ %158, %157 ]
  %108 = phi i32 [ %105, %102 ], [ %159, %157 ]
  %109 = phi i64 [ 0, %102 ], [ %160, %157 ]
  %110 = icmp eq i32 %108, 0
  br i1 %110, label %157, label %111

111:                                              ; preds = %106
  %112 = shl i64 %109, 3
  br label %113

113:                                              ; preds = %150, %111
  %114 = phi i64 [ 0, %111 ], [ %151, %150 ]
  %115 = lshr exact i64 %114, 3
  br label %116

116:                                              ; preds = %116, %113
  %117 = phi i64 [ 0, %113 ], [ %148, %116 ]
  %118 = load i64, i64* %23, align 8
  %119 = mul i64 %118, %109
  %120 = load i8*, i8** %103, align 8
  %121 = ptrtoint i8* %120 to i64
  %122 = and i64 %121, 63
  %123 = icmp eq i64 %122, 0
  call void @llvm.assume(i1 %123) #5
  %124 = getelementptr inbounds i8, i8* %120, i64 %119
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  call void @llvm.assume(i1 %127) #5
  %128 = bitcast i8* %124 to i16*
  %129 = add nuw nsw i64 %117, %114
  %130 = getelementptr inbounds i16, i16* %128, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = lshr i64 %117, 3
  %133 = add i64 %132, %112
  %134 = load i64, i64* %24, align 8
  %135 = mul i64 %134, %133
  %136 = load i8*, i8** %104, align 8
  %137 = ptrtoint i8* %136 to i64
  %138 = and i64 %137, 63
  %139 = icmp eq i64 %138, 0
  call void @llvm.assume(i1 %139) #5
  %140 = getelementptr inbounds i8, i8* %136, i64 %135
  %141 = ptrtoint i8* %140 to i64
  %142 = and i64 %141, 63
  %143 = icmp eq i64 %142, 0
  call void @llvm.assume(i1 %143) #5
  %144 = bitcast i8* %140 to i16*
  %145 = and i64 %117, 7
  %146 = or i64 %145, %115
  %147 = getelementptr inbounds i16, i16* %144, i64 %146
  store i16 %131, i16* %147, align 2
  %148 = add nuw nsw i64 %117, 1
  %149 = icmp eq i64 %148, 64
  br i1 %149, label %150, label %116

150:                                              ; preds = %116
  %151 = add nuw nsw i64 %114, 64
  %152 = load i32, i32* %5, align 8
  %153 = zext i32 %152 to i64
  %154 = icmp ult i64 %151, %153
  br i1 %154, label %113, label %155

155:                                              ; preds = %150
  %156 = load i32, i32* %16, align 4
  br label %157

157:                                              ; preds = %155, %106
  %158 = phi i32 [ %156, %155 ], [ %107, %106 ]
  %159 = phi i32 [ %152, %155 ], [ 0, %106 ]
  %160 = add nuw nsw i64 %109, 1
  %161 = zext i32 %158 to i64
  %162 = icmp ult i64 %160, %161
  br i1 %162, label %106, label %163

163:                                              ; preds = %157
  %164 = icmp eq i32 %158, 0
  br i1 %164, label %226, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %168 = load i32, i32* %5, align 8
  br label %169

169:                                              ; preds = %220, %165
  %170 = phi i32 [ %158, %165 ], [ %221, %220 ]
  %171 = phi i32 [ %168, %165 ], [ %222, %220 ]
  %172 = phi i64 [ 0, %165 ], [ %223, %220 ]
  %173 = icmp eq i32 %171, 0
  br i1 %173, label %220, label %174

174:                                              ; preds = %169
  %175 = shl i64 %172, 3
  br label %176

176:                                              ; preds = %213, %174
  %177 = phi i64 [ 0, %174 ], [ %214, %213 ]
  %178 = lshr exact i64 %177, 3
  br label %179

179:                                              ; preds = %179, %176
  %180 = phi i64 [ 0, %176 ], [ %211, %179 ]
  %181 = load i64, i64* %23, align 8
  %182 = mul i64 %181, %172
  %183 = load i8*, i8** %166, align 8
  %184 = ptrtoint i8* %183 to i64
  %185 = and i64 %184, 63
  %186 = icmp eq i64 %185, 0
  call void @llvm.assume(i1 %186) #5
  %187 = getelementptr inbounds i8, i8* %183, i64 %182
  %188 = ptrtoint i8* %187 to i64
  %189 = and i64 %188, 63
  %190 = icmp eq i64 %189, 0
  call void @llvm.assume(i1 %190) #5
  %191 = bitcast i8* %187 to i16*
  %192 = add nuw nsw i64 %180, %177
  %193 = getelementptr inbounds i16, i16* %191, i64 %192
  %194 = load i16, i16* %193, align 2
  %195 = lshr i64 %180, 3
  %196 = add i64 %195, %175
  %197 = load i64, i64* %24, align 8
  %198 = mul i64 %197, %196
  %199 = load i8*, i8** %167, align 8
  %200 = ptrtoint i8* %199 to i64
  %201 = and i64 %200, 63
  %202 = icmp eq i64 %201, 0
  call void @llvm.assume(i1 %202) #5
  %203 = getelementptr inbounds i8, i8* %199, i64 %198
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  call void @llvm.assume(i1 %206) #5
  %207 = bitcast i8* %203 to i16*
  %208 = and i64 %180, 7
  %209 = or i64 %208, %178
  %210 = getelementptr inbounds i16, i16* %207, i64 %209
  store i16 %194, i16* %210, align 2
  %211 = add nuw nsw i64 %180, 1
  %212 = icmp eq i64 %211, 64
  br i1 %212, label %213, label %179

213:                                              ; preds = %179
  %214 = add nuw nsw i64 %177, 64
  %215 = load i32, i32* %5, align 8
  %216 = zext i32 %215 to i64
  %217 = icmp ult i64 %214, %216
  br i1 %217, label %176, label %218

218:                                              ; preds = %213
  %219 = load i32, i32* %16, align 4
  br label %220

220:                                              ; preds = %218, %169
  %221 = phi i32 [ %219, %218 ], [ %170, %169 ]
  %222 = phi i32 [ %215, %218 ], [ 0, %169 ]
  %223 = add nuw nsw i64 %172, 1
  %224 = zext i32 %221 to i64
  %225 = icmp ult i64 %223, %224
  br i1 %225, label %169, label %226

226:                                              ; preds = %220, %13, %50, %163
  call void @_ZNK3jxl6AuxOut9DumpImageIsEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* %0, i8* %1, %"class.jxl::Image3.114"* nonnull dereferenceable(96) %4)
  %227 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %228 = load i8*, i8** %227, align 8
  store i8* null, i8** %227, align 8
  %229 = icmp eq i8* %228, null
  br i1 %229, label %32, label %31
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut9DumpImageIsEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Image3.114"* dereferenceable(96)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_ostringstream", align 8
  %5 = alloca %"class.jxl::CodecInOut", align 8
  %6 = alloca %"class.jxl::Image3", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 2
  %9 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %9, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %178

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %24

22:                                               ; preds = %13
  %23 = zext i8 %17 to i64
  br label %24

24:                                               ; preds = %19, %22
  %25 = phi i64 [ %21, %19 ], [ %23, %22 ]
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %178, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %28) #5
  %29 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %30 = bitcast %"class.std::__1::basic_stringbuf"* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 256, i1 false)
  %31 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %34 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0
  %35 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %36 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %38 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8**
  %39 = inttoptr i64 %35 to i8*
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %28, i64 %42
  %44 = bitcast i8* %43 to i64*
  store i64 %37, i64* %44, align 8
  %45 = load i8*, i8** %38, align 8
  %46 = getelementptr i8, i8* %45, i64 -24
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i8, i8* %28, i64 %48
  %50 = bitcast i8* %49 to %"class.std::__1::ios_base"*
  %51 = bitcast %"class.std::__1::basic_stringbuf"* %33 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %50, i8* %51) #5
  %52 = getelementptr inbounds i8, i8* %49, i64 136
  %53 = bitcast i8* %52 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %53, align 8
  %54 = getelementptr inbounds i8, i8* %49, i64 144
  %55 = bitcast i8* %54 to i32*
  store i32 -1, i32* %55, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %32, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %34) #5
  %56 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 1
  %58 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 3
  %59 = bitcast %"class.std::__1::basic_string"* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 32, i1 false) #5
  store i32 16, i32* %58, align 8
  %60 = bitcast %"class.std::__1::basic_ostringstream"* %4 to %"class.std::__1::basic_ostream"*
  %61 = load i8, i8* %16, align 1
  %62 = icmp slt i8 %61, 0
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %68 = zext i8 %61 to i64
  %69 = select i1 %62, i8* %64, i8* %67
  %70 = select i1 %62, i64 %66, i64 %68
  %71 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %60, i8* %69, i64 %70) #5
  %72 = call i64 @strlen(i8* %1) #5
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %71, i8* %1, i64 %72) #5
  %74 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0), i64 4) #5
  %75 = bitcast %"class.jxl::CodecInOut"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3416, i8* nonnull %75) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast ({ %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.23", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.100", i64 }, %"class.std::__1::vector.107", i8, [7 x i8], i64 }* @__const._ZNK3jxl6AuxOut9DumpImageIsEEvPKcRKNS_6Image3IT_EE.io to i8*), i64 3416, i1 false)
  call void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"* nonnull %5)
  %76 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 3
  store i32 16, i32* %76, align 4
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 4
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 1
  store i8 0, i8* %78, align 8
  %79 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext false) #5
  %80 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7
  %81 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 1
  %82 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 12, i1 false) #5
  %83 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %84 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 4, i32 1
  %85 = bitcast i32* %83 to i8*
  %86 = bitcast i32* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #5
  %87 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 5
  %88 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 5
  %89 = bitcast i32* %87 to i8*
  %90 = bitcast i32* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 6, i1 false) #5
  %91 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = icmp ult i64 %95, %93
  br i1 %96, label %97, label %98

97:                                               ; preds = %27
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %91, i64 %93) #5
  br label %98

98:                                               ; preds = %97, %27
  %99 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  %102 = select i1 %101, i64 0, i64 %93
  %103 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %91, i64 0, i32 0
  store i64 %102, i64* %103, align 8
  br i1 %101, label %107, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %100, i8* align 1 %106, i64 %102, i1 false) #5
  br label %107

107:                                              ; preds = %98, %104
  %108 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 9
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 9
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %112 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 10, i32 1
  %113 = bitcast i32* %112 to i64*
  %114 = bitcast i32* %111 to i64*
  %115 = load i64, i64* %113, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %117 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 11, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %122 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 12, i32 1
  %123 = bitcast i32* %122 to i64*
  %124 = bitcast i32* %121 to i64*
  %125 = load i64, i64* %123, align 8
  store i64 %125, i64* %124, align 8
  %126 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 13, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = bitcast %"class.jxl::Image3"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %131) #5
  call void @_ZN3jxl14ConvertToFloatIsEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* nonnull sret %6, %"class.jxl::Image3.114"* dereferenceable(96) %2)
  call void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"* nonnull %5, %"class.jxl::Image3"* nonnull dereferenceable(96) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %80)
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  store i8* null, i8** %132, align 8
  %134 = icmp eq i8* %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %107
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %133) #5
  br label %136

136:                                              ; preds = %135, %107
  %137 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  store i8* null, i8** %137, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %136
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %138) #5
  br label %141

141:                                              ; preds = %140, %136
  %142 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  store i8* null, i8** %142, align 8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %146, label %145

145:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %143) #5
  br label %146

146:                                              ; preds = %141, %145
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %131) #5
  %147 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #5
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.std::__1::basic_stringbuf"* %33) #5
  %148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 1, i32 0
  %149 = load i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %148, align 8
  %150 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 0
  %151 = call i32 %149(%"union.std::__1::__function::__policy_storage"* %150, %"class.jxl::CodecInOut"* nonnull dereferenceable(3416) %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #5
  %152 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %146
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  call void @_ZdlPv(i8* %158) #14
  br label %159

159:                                              ; preds = %146, %156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #5
  call void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 3416, i8* nonnull %75) #5
  %160 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %160, i64* %36, align 8
  %161 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %162 = inttoptr i64 %160 to i8*
  %163 = getelementptr i8, i8* %162, i64 -24
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds i8, i8* %28, i64 %165
  %167 = bitcast i8* %166 to i64*
  store i64 %161, i64* %167, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %168 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %169 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %168, i64 0, i32 1, i32 0
  %170 = load i8, i8* %169, align 1
  %171 = icmp slt i8 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %159
  %173 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  call void @_ZdlPv(i8* %174) #14
  br label %175

175:                                              ; preds = %159, %172
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %34) #5
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %60, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #5
  %176 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2
  %177 = bitcast %"class.std::__1::basic_ios.base"* %176 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %177) #5
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %28) #5
  br label %178

178:                                              ; preds = %24, %3, %175
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* noalias, %"class.jxl::BitWriter::Allotment"* noalias, i64, %"struct.jxl::AuxOut"* noalias) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #5
  store i64 -6148914691236517206, i64* %5, align 8
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  store i64 -6148914691236517206, i64* %6, align 8
  call void @_ZN3jxl9BitWriter9Allotment14PrivateReclaimEPS0_PmS3_(%"class.jxl::BitWriter::Allotment"* %1, %"struct.jxl::BitWriter"* %0, i64* nonnull %5, i64* nonnull %6) #5
  %9 = icmp eq %"struct.jxl::AuxOut"* %3, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %4
  %11 = load i64, i64* %5, align 8
  %12 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %3, i64 0, i32 0, i32 0, i64 %2, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %11
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %"class.jxl::BitWriter::Allotment", %"class.jxl::BitWriter::Allotment"* %1, i64 0, i32 3
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %10
  %19 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i64 0, i64 0), i32 93, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i64 0, i64 0)) #5
  %20 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.jxl::BitWriter::Allotment", %"class.jxl::BitWriter::Allotment"* %1, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %3, i64 0, i32 0, i32 0, i64 %2, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %23
  store i64 %26, i64* %24, align 8
  br label %27

27:                                               ; preds = %4, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #5
  ret void
}

declare void @_ZN3jxl9BitWriter9Allotment14PrivateReclaimEPS0_PmS3_(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64*, i64*) local_unnamed_addr #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %3 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 0
  store i32 -1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 2
  store i64 4294967295, i64* %5, align 8
  %6 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0
  %8 = bitcast %"class.jxl::DecoderHints"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 136, i1 false)
  tail call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* %7) #5
  %9 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  tail call void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"* %9) #5
  %10 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 2
  tail call void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"* %10) #5
  %11 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  %12 = bitcast %"class.jxl::ImageBundle"* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 1
  store i32 1, i32* %13, align 8
  %14 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %14) #5
  %15 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 4, i32 0
  %16 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 8
  %17 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #5
  %18 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 9
  %19 = bitcast i32* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 14, i1 false) #5
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %18, align 8
  %20 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #5
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #5
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12
  %24 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %25 = bitcast %"class.std::__1::vector.100"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 57, i1 false)
  tail call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.107"* %24, i64 1)
  %26 = bitcast %"struct.jxl::ImageMetadata"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #5
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %2, align 8
  %27 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %28 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %30 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %29, align 8
  %31 = icmp ult %"class.jxl::ImageBundle"* %28, %30
  br i1 %31, label %32, label %51

32:                                               ; preds = %1
  %33 = ptrtoint %"struct.jxl::ImageMetadata"* %7 to i64
  %34 = bitcast %"class.jxl::ImageBundle"* %28 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 1
  store i32 1, i32* %35, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %36) #5
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 8
  %39 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #5
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 9
  %41 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 14, i1 false) #5
  %42 = bitcast %"struct.jxl::ImageMetadata"** %40 to i64*
  store i64 %33, i64* %42, align 8
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 10
  %44 = bitcast %"class.jxl::Image3"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 96, i1 false) #5
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %45) #5
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 12
  %47 = bitcast %"class.std::__1::vector.100"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 32, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 1
  %49 = ptrtoint %"class.jxl::ImageBundle"* %48 to i64
  %50 = bitcast %"class.jxl::ImageBundle"** %27 to i64*
  store i64 %49, i64* %50, align 8
  br label %52

51:                                               ; preds = %1
  call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.107"* %24, %"struct.jxl::ImageMetadata"** nonnull dereferenceable(8) %2) #5
  br label %52

52:                                               ; preds = %32, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #5
  ret void
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %6 = bitcast %"class.jxl::ImageBundle"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.107"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  %11 = inttoptr i64 %9 to %"class.jxl::ImageBundle"*
  br i1 %10, label %23, label %12

12:                                               ; preds = %3
  %13 = sub i64 %7, %9
  %14 = sdiv exact i64 %13, 368
  br label %15

15:                                               ; preds = %20, %12
  %16 = phi i64 [ 0, %12 ], [ %21, %20 ]
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %16, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = add nuw i64 %16, 1
  %22 = icmp ult i64 %21, %14
  br i1 %22, label %15, label %23

23:                                               ; preds = %15, %20, %3
  %24 = phi i64 [ 0, %3 ], [ %16, %20 ], [ %16, %15 ]
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %24
  tail call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %25, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %2) #5
  tail call void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"* %0) #5
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %8, align 8
  %28 = icmp eq i64 %26, %27
  %29 = inttoptr i64 %27 to %"class.jxl::ImageBundle"*
  br i1 %28, label %41, label %30

30:                                               ; preds = %23
  %31 = sub i64 %26, %27
  %32 = sdiv exact i64 %31, 368
  br label %33

33:                                               ; preds = %38, %30
  %34 = phi i64 [ 0, %30 ], [ %39, %38 ]
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %34, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = add nuw i64 %34, 1
  %40 = icmp ult i64 %39, %32
  br i1 %40, label %33, label %41

41:                                               ; preds = %33, %38, %23
  %42 = phi i64 [ 0, %23 ], [ %34, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 0, i32 0, i32 0, i32 0
  %44 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %43, align 8
  %45 = icmp eq %"struct.jxl::jpeg::JPEGData"* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  br label %65

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 10, i32 0, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %55, label %65

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 0
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 1
  %59 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %58, align 8
  %60 = icmp eq %"class.jxl::Plane"* %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %46, %50, %55, %61
  %66 = phi i64 [ %49, %46 ], [ %64, %61 ], [ 0, %55 ], [ %53, %50 ]
  br i1 %28, label %78, label %67

67:                                               ; preds = %65
  %68 = sub i64 %26, %27
  %69 = sdiv exact i64 %68, 368
  br label %70

70:                                               ; preds = %75, %67
  %71 = phi i64 [ 0, %67 ], [ %76, %75 ]
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %71, i32 5
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = add nuw i64 %71, 1
  %77 = icmp ult i64 %76, %69
  br i1 %77, label %70, label %78

78:                                               ; preds = %70, %75, %65
  %79 = phi i64 [ 0, %65 ], [ %71, %75 ], [ %71, %70 ]
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 0, i32 0, i32 0, i32 0
  %81 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %80, align 8
  %82 = icmp eq %"struct.jxl::jpeg::JPEGData"* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %81, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  br label %102

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 10, i32 0, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %102

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 0
  %94 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 1
  %96 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %95, align 8
  %97 = icmp eq %"class.jxl::Plane"* %94, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %94, i64 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %83, %87, %92, %98
  %103 = phi i64 [ %86, %83 ], [ %101, %98 ], [ 0, %92 ], [ %90, %87 ]
  %104 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  %105 = tail call i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"* %104, i64 %66, i64 %103) #5
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %110, label %107

107:                                              ; preds = %102
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.44, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.45, i64 0, i64 0)) #5
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

110:                                              ; preds = %102
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14ConvertToFloatIsEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* noalias sret, %"class.jxl::Image3.114"* dereferenceable(96)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.jxl::Plane", align 8
  %4 = alloca %"class.jxl::Plane", align 8
  %5 = alloca %"class.jxl::Plane", align 8
  %6 = bitcast %"class.jxl::Plane"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false) #5, !alias.scope !3
  %10 = load i32, i32* %9, align 8, !noalias !3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4, !noalias !3
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %15, i64 %11, i64 %14, i64 4) #5
  %16 = load i32, i32* %12, align 4, !noalias !3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %62, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %21 = load i32, i32* %9, align 8, !noalias !3
  br label %22

22:                                               ; preds = %45, %18
  %23 = phi i32 [ %16, %18 ], [ %46, %45 ]
  %24 = phi i32 [ %21, %18 ], [ %47, %45 ]
  %25 = phi i64 [ 0, %18 ], [ %48, %45 ]
  %26 = load i8*, i8** %19, align 8, !noalias !3
  %27 = load i64, i64* %20, align 8, !noalias !3
  %28 = mul i64 %27, %25
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  call void @llvm.assume(i1 %32) #5
  %33 = bitcast i8* %29 to i16*
  %34 = load i8*, i8** %8, align 8, !alias.scope !3
  %35 = load i64, i64* %7, align 8, !alias.scope !3
  %36 = mul i64 %35, %25
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = ptrtoint i8* %37 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  call void @llvm.assume(i1 %40) #5
  %41 = bitcast i8* %37 to float*
  %42 = icmp eq i32 %24, 0
  br i1 %42, label %45, label %51

43:                                               ; preds = %51
  %44 = load i32, i32* %12, align 4, !noalias !3
  br label %45

45:                                               ; preds = %43, %22
  %46 = phi i32 [ %44, %43 ], [ %23, %22 ]
  %47 = phi i32 [ %59, %43 ], [ 0, %22 ]
  %48 = add nuw nsw i64 %25, 1
  %49 = zext i32 %46 to i64
  %50 = icmp ult i64 %48, %49
  br i1 %50, label %22, label %62

51:                                               ; preds = %22, %51
  %52 = phi i64 [ %58, %51 ], [ 0, %22 ]
  %53 = getelementptr inbounds i16, i16* %33, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = sitofp i16 %54 to float
  %56 = fmul float %55, 0x3F00002000000000
  %57 = getelementptr inbounds float, float* %41, i64 %52
  store float %56, float* %57, align 4
  %58 = add nuw nsw i64 %52, 1
  %59 = load i32, i32* %9, align 8, !noalias !3
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %51, label %43

62:                                               ; preds = %45, %2
  %63 = bitcast %"class.jxl::Plane"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #5
  %64 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %65 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 32, i1 false) #5, !alias.scope !6
  %67 = load i32, i32* %66, align 8, !noalias !6
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %70 = load i32, i32* %69, align 4, !noalias !6
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %72, i64 %68, i64 %71, i64 4) #5
  %73 = load i32, i32* %69, align 4, !noalias !6
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %119, label %75

75:                                               ; preds = %62
  %76 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i32, i32* %66, align 8, !noalias !6
  br label %79

79:                                               ; preds = %102, %75
  %80 = phi i32 [ %73, %75 ], [ %103, %102 ]
  %81 = phi i32 [ %78, %75 ], [ %104, %102 ]
  %82 = phi i64 [ 0, %75 ], [ %105, %102 ]
  %83 = load i8*, i8** %76, align 8, !noalias !6
  %84 = load i64, i64* %77, align 8, !noalias !6
  %85 = mul i64 %84, %82
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  call void @llvm.assume(i1 %89) #5
  %90 = bitcast i8* %86 to i16*
  %91 = load i8*, i8** %65, align 8, !alias.scope !6
  %92 = load i64, i64* %64, align 8, !alias.scope !6
  %93 = mul i64 %92, %82
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = ptrtoint i8* %94 to i64
  %96 = and i64 %95, 63
  %97 = icmp eq i64 %96, 0
  call void @llvm.assume(i1 %97) #5
  %98 = bitcast i8* %94 to float*
  %99 = icmp eq i32 %81, 0
  br i1 %99, label %102, label %108

100:                                              ; preds = %108
  %101 = load i32, i32* %69, align 4, !noalias !6
  br label %102

102:                                              ; preds = %100, %79
  %103 = phi i32 [ %101, %100 ], [ %80, %79 ]
  %104 = phi i32 [ %116, %100 ], [ 0, %79 ]
  %105 = add nuw nsw i64 %82, 1
  %106 = zext i32 %103 to i64
  %107 = icmp ult i64 %105, %106
  br i1 %107, label %79, label %119

108:                                              ; preds = %79, %108
  %109 = phi i64 [ %115, %108 ], [ 0, %79 ]
  %110 = getelementptr inbounds i16, i16* %90, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = sitofp i16 %111 to float
  %113 = fmul float %112, 0x3F00002000000000
  %114 = getelementptr inbounds float, float* %98, i64 %109
  store float %113, float* %114, align 4
  %115 = add nuw nsw i64 %109, 1
  %116 = load i32, i32* %66, align 8, !noalias !6
  %117 = zext i32 %116 to i64
  %118 = icmp ult i64 %115, %117
  br i1 %118, label %108, label %100

119:                                              ; preds = %102, %62
  %120 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %120) #5
  %121 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 4
  %122 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %120, i8 -86, i64 32, i1 false) #5, !alias.scope !9
  %124 = load i32, i32* %123, align 8, !noalias !9
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %127 = load i32, i32* %126, align 4, !noalias !9
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %129, i64 %125, i64 %128, i64 4) #5
  %130 = load i32, i32* %126, align 4, !noalias !9
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %176, label %132

132:                                              ; preds = %119
  %133 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %134 = getelementptr inbounds %"class.jxl::Image3.114", %"class.jxl::Image3.114"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %135 = load i32, i32* %123, align 8, !noalias !9
  br label %136

136:                                              ; preds = %159, %132
  %137 = phi i32 [ %130, %132 ], [ %160, %159 ]
  %138 = phi i32 [ %135, %132 ], [ %161, %159 ]
  %139 = phi i64 [ 0, %132 ], [ %162, %159 ]
  %140 = load i8*, i8** %133, align 8, !noalias !9
  %141 = load i64, i64* %134, align 8, !noalias !9
  %142 = mul i64 %141, %139
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  call void @llvm.assume(i1 %146) #5
  %147 = bitcast i8* %143 to i16*
  %148 = load i8*, i8** %122, align 8, !alias.scope !9
  %149 = load i64, i64* %121, align 8, !alias.scope !9
  %150 = mul i64 %149, %139
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  call void @llvm.assume(i1 %154) #5
  %155 = bitcast i8* %151 to float*
  %156 = icmp eq i32 %138, 0
  br i1 %156, label %159, label %165

157:                                              ; preds = %165
  %158 = load i32, i32* %126, align 4, !noalias !9
  br label %159

159:                                              ; preds = %157, %136
  %160 = phi i32 [ %158, %157 ], [ %137, %136 ]
  %161 = phi i32 [ %173, %157 ], [ 0, %136 ]
  %162 = add nuw nsw i64 %139, 1
  %163 = zext i32 %160 to i64
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %136, label %176

165:                                              ; preds = %136, %165
  %166 = phi i64 [ %172, %165 ], [ 0, %136 ]
  %167 = getelementptr inbounds i16, i16* %147, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = sitofp i16 %168 to float
  %170 = fmul float %169, 0x3F00002000000000
  %171 = getelementptr inbounds float, float* %155, i64 %166
  store float %170, float* %171, align 4
  %172 = add nuw nsw i64 %166, 1
  %173 = load i32, i32* %123, align 8, !noalias !9
  %174 = zext i32 %173 to i64
  %175 = icmp ult i64 %172, %174
  br i1 %175, label %165, label %157

176:                                              ; preds = %159, %119
  call void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"* %0, %"class.jxl::Plane"* nonnull dereferenceable(32) %3, %"class.jxl::Plane"* nonnull dereferenceable(32) %4, %"class.jxl::Plane"* nonnull dereferenceable(32) %5)
  %177 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %176
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %177) #5
  br label %180

180:                                              ; preds = %176, %179
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %120) #5
  %181 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %180
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #5
  br label %184

184:                                              ; preds = %180, %183
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #5
  %185 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %186 = icmp eq i8* %185, null
  br i1 %186, label %188, label %187

187:                                              ; preds = %184
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %185) #5
  br label %188

188:                                              ; preds = %184, %187
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %5 = icmp eq %"class.jxl::ImageBundle"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::ImageBundle"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %8, align 8
  %10 = icmp eq %"class.jxl::ImageBundle"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"class.jxl::ImageBundle"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %12, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %13) #5
  %14 = icmp eq %"class.jxl::ImageBundle"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.107"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"class.jxl::ImageBundle"* %4, %"class.jxl::ImageBundle"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #14
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %21) #5
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17
  %24 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %23, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %20
  %28 = bitcast %"struct.jxl::ExtraChannelInfo"* %25 to i8*
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17, i32 0, i32 1
  %30 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  %31 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %25
  br i1 %31, label %42, label %32

32:                                               ; preds = %27, %32
  %33 = phi %"struct.jxl::ExtraChannelInfo"* [ %34, %32 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 -1
  %35 = bitcast %"struct.jxl::ExtraChannelInfo"* %34 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %36 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %35, align 8
  %37 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %36, align 8
  tail call void %37(%"struct.jxl::ExtraChannelInfo"* %34) #5
  %38 = icmp eq %"struct.jxl::ExtraChannelInfo"* %34, %25
  br i1 %38, label %39, label %32

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector.16"* %23 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi i8* [ %41, %39 ], [ %28, %27 ]
  store %"struct.jxl::ExtraChannelInfo"* %25, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  tail call void @_ZdlPv(i8* %43) #14
  br label %44

44:                                               ; preds = %42, %20
  %45 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %45, align 8
  %46 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  store i8* null, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %44
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %47) #5
  br label %50

50:                                               ; preds = %44, %49
  %51 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 3, i32 2, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8* null, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %52) #5
  br label %55

55:                                               ; preds = %54, %50
  %56 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 2, i32 2, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  store i8* null, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %57) #5
  br label %60

60:                                               ; preds = %59, %55
  %61 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 1, i32 2, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #5
  br label %65

65:                                               ; preds = %64, %60
  %66 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %70

70:                                               ; preds = %65, %69
  %71 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %72 = getelementptr inbounds %"class.jxl::DecoderHints", %"class.jxl::DecoderHints"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %72, align 8
  %74 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %73, null
  br i1 %74, label %106, label %75

75:                                               ; preds = %70
  %76 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %73 to i8*
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %78 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  %79 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %78, %73
  br i1 %79, label %104, label %80

80:                                               ; preds = %75, %99
  %81 = phi %"struct.jxl::DecoderHints::KeyValue"* [ %82, %99 ], [ %78, %75 ]
  %82 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1
  %83 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1, i32 1
  %84 = bitcast %"class.std::__1::basic_string"* %83 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %84, i64 0, i32 1, i32 0
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %80
  %89 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  tail call void @_ZdlPv(i8* %90) #14
  br label %91

91:                                               ; preds = %88, %80
  %92 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %82 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  tail call void @_ZdlPv(i8* %98) #14
  br label %99

99:                                               ; preds = %96, %91
  %100 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %82, %73
  br i1 %100, label %101, label %80

101:                                              ; preds = %99
  %102 = bitcast %"class.jxl::DecoderHints"* %71 to i8**
  %103 = load i8*, i8** %102, align 8
  br label %104

104:                                              ; preds = %101, %75
  %105 = phi i8* [ %103, %101 ], [ %76, %75 ]
  store %"struct.jxl::DecoderHints::KeyValue"* %73, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  tail call void @_ZdlPv(i8* %105) #14
  br label %106

106:                                              ; preds = %70, %104
  ret void
}

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #3

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #5
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #5
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #5
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #5
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #5
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #5
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #14
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #5
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #5
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #5
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #7

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.107"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.107"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::ImageBundle"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::ImageBundle"** %13 to i64*
  %15 = icmp ugt i64 %1, 50127021939428129
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #13
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 368
  %21 = mul i64 %1, 368
  %22 = tail call i8* @_Znwm(i64 %21) #14
  %23 = bitcast i8* %22 to %"class.jxl::ImageBundle"*
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::ImageBundle"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::ImageBundle"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::ImageBundle"*
  %29 = icmp eq %"class.jxl::ImageBundle"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.jxl::ImageBundle"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.jxl::ImageBundle"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %31, i64 -1
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %32, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %33, %"class.jxl::ImageBundle"* dereferenceable(368) %34) #5
  %35 = icmp eq %"class.jxl::ImageBundle"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.jxl::ImageBundle"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.jxl::ImageBundle"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.jxl::ImageBundle"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.jxl::ImageBundle"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.jxl::ImageBundle"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.jxl::ImageBundle"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %48, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %49) #5
  %50 = icmp eq %"class.jxl::ImageBundle"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #3

declare void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"*) unnamed_addr #3

declare void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #3

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #5
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #5
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #5
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #5
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #5
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #5
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #5
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #5
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #5
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #5
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #5
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #5
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.100"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #5
  %130 = bitcast %"class.std::__1::vector.100"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.100"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.100"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #5
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.42, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #5
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #5
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.100", %"class.std::__1::vector.100"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #5
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.100"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #14
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #5
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #5
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #5
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #5
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #5
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.107"*, %"struct.jxl::ImageMetadata"** dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.107"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 50127021939428129
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.107"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::ImageBundle"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 368
  %20 = icmp ult i64 %19, 25063510969714064
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 50127021939428129, %14 ]
  %28 = mul i64 %27, 368
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"class.jxl::ImageBundle"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::ImageBundle"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::ImageBundle"* %35 to i64
  %37 = bitcast %"struct.jxl::ImageMetadata"** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.jxl::ImageBundle"* %34 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 1
  store i32 1, i32* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %41) #5
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 4, i32 0
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 8
  %44 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #5
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 9
  %46 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 14, i1 false) #5
  %47 = bitcast %"struct.jxl::ImageMetadata"** %45 to i64*
  store i64 %38, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 10
  %49 = bitcast %"class.jxl::Image3"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 96, i1 false) #5
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %50) #5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 12
  %52 = bitcast %"class.std::__1::vector.100"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 32, i1 false) #5
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 1
  %54 = ptrtoint %"class.jxl::ImageBundle"* %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.107", %"class.std::__1::vector.107"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %55, align 8
  %57 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %58 = icmp eq %"class.jxl::ImageBundle"* %57, %56
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = ptrtoint %"class.jxl::ImageBundle"* %56 to i64
  br label %70

61:                                               ; preds = %31, %61
  %62 = phi %"class.jxl::ImageBundle"* [ %64, %61 ], [ %34, %31 ]
  %63 = phi %"class.jxl::ImageBundle"* [ %65, %61 ], [ %57, %31 ]
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %62, i64 -1
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %63, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %64, %"class.jxl::ImageBundle"* dereferenceable(368) %65) #5
  %66 = icmp eq %"class.jxl::ImageBundle"* %65, %56
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = load i64, i64* %6, align 8
  %69 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  br label %70

70:                                               ; preds = %59, %67
  %71 = phi %"class.jxl::ImageBundle"* [ %56, %59 ], [ %69, %67 ]
  %72 = phi %"class.jxl::ImageBundle"* [ %34, %59 ], [ %64, %67 ]
  %73 = phi i64 [ %60, %59 ], [ %68, %67 ]
  %74 = ptrtoint %"class.jxl::ImageBundle"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %54, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"class.jxl::ImageBundle"*
  %76 = icmp eq %"class.jxl::ImageBundle"* %71, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %70, %77
  %78 = phi %"class.jxl::ImageBundle"* [ %79, %77 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %78, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %79) #5
  %80 = icmp eq %"class.jxl::ImageBundle"* %79, %75
  br i1 %80, label %81, label %77

81:                                               ; preds = %77, %70
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  br label %85

85:                                               ; preds = %81, %83
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #3

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #3

declare void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"*) local_unnamed_addr #3

declare i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"*, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.jxl::Image3"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 96, i1 false)
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %4, %11
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.46, i64 0, i64 0), i32 343, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.47, i64 0, i64 0)) #5
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %7, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %13, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %20, %24
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.46, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.48, i64 0, i64 0)) #5
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

31:                                               ; preds = %24
  %32 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %32, i64 24, i1 false) #5
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #5
  br label %43

43:                                               ; preds = %31, %42
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %45 = bitcast %"class.jxl::Plane"* %44 to i8*
  %46 = bitcast %"class.jxl::Plane"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #5
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8* null, i8** %49, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %47, i64 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast %"class.std::__1::unique_ptr"* %47 to i64*
  store i64 %51, i64* %54, align 8
  %55 = icmp eq i8* %53, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %53) #5
  br label %57

57:                                               ; preds = %43, %56
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  %59 = bitcast %"class.jxl::Plane"* %58 to i8*
  %60 = bitcast %"class.jxl::Plane"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #5
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %57
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #5
  br label %71

71:                                               ; preds = %57, %70
  ret void
}

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #7

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare i32 @putchar(i32) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl14ConvertToFloatIsEENS_5PlaneIfEERKNS1_IT_EE"}
