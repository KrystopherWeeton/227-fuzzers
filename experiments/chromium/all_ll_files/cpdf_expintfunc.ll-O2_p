; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_expintfunc.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_expintfunc.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_ExpIntFunc = type { %class.CPDF_Function, i32, float, %"class.std::__1::vector", %"class.std::__1::vector" }
%class.CPDF_Function = type { i32 (...)**, i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::set" = type opaque
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.12" }
%"class.fxcrt::RetainPtr.12" = type { %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.34", %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.49", [4 x i8] }>
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36", %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%class.CPDF_Number = type { %class.CPDF_Object, %class.FX_Number }
%class.FX_Number = type { i8, i8, %union.anon }
%union.anon = type { i32 }
%class.CPDF_Array = type <{ %class.CPDF_Object, %"class.std::__1::vector.18", %"class.fxcrt::WeakPtr", i32, [4 x i8] }>
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.fxcrt::RetainPtr.20"*, %"class.fxcrt::RetainPtr.20"*, %"class.std::__1::__compressed_pair.26" }
%"class.fxcrt::RetainPtr.20" = type { %"class.std::__1::unique_ptr.21" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.CPDF_Object* }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.fxcrt::RetainPtr.20"* }

@_ZTV15CPDF_ExpIntFunc = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_ExpIntFunc*)* @_ZN15CPDF_ExpIntFuncD2Ev to i8*), i8* bitcast (void (%class.CPDF_ExpIntFunc*)* @_ZN15CPDF_ExpIntFuncD0Ev to i8*), i8* bitcast (i1 (%class.CPDF_ExpIntFunc*, %class.CPDF_Object*, %"class.std::__1::set"*)* @_ZN15CPDF_ExpIntFunc6v_InitEPK11CPDF_ObjectPNSt3__13setIS2_NS3_4lessIS2_EENS3_9allocatorIS2_EEEE to i8*), i8* bitcast (i1 (%class.CPDF_ExpIntFunc*, float*, float*)* @_ZNK15CPDF_ExpIntFunc6v_CallEPKfPf to i8*)] }, align 8
@.str = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"C0\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"C1\00", align 1

@_ZN15CPDF_ExpIntFuncC1Ev = hidden unnamed_addr alias void (%class.CPDF_ExpIntFunc*), void (%class.CPDF_ExpIntFunc*)* @_ZN15CPDF_ExpIntFuncC2Ev
@_ZN15CPDF_ExpIntFuncD1Ev = hidden unnamed_addr alias void (%class.CPDF_ExpIntFunc*), void (%class.CPDF_ExpIntFunc*)* @_ZN15CPDF_ExpIntFuncD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_ExpIntFuncC2Ev(%class.CPDF_ExpIntFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionC2ENS_4TypeE(%class.CPDF_Function* %2, i32 2) #9
  %3 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV15CPDF_ExpIntFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 1
  %5 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 56, i1 false)
  ret void
}

declare void @_ZN13CPDF_FunctionC2ENS_4TypeE(%class.CPDF_Function*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_ExpIntFuncD2Ev(%class.CPDF_ExpIntFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV15CPDF_ExpIntFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint float* %4 to i64
  %8 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast float* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load float*, float** %12, align 8
  %14 = icmp eq float* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint float* %13 to i64
  %17 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 1
  %18 = bitcast float** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast float* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function* %21) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_ExpIntFuncD0Ev(%class.CPDF_ExpIntFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV15CPDF_ExpIntFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint float* %4 to i64
  %8 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast float* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load float*, float** %12, align 8
  %14 = icmp eq float* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint float* %13 to i64
  %17 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 1
  %18 = bitcast float** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast float* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function* %21) #9
  %22 = bitcast %class.CPDF_ExpIntFunc* %0 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15CPDF_ExpIntFunc6v_InitEPK11CPDF_ObjectPNSt3__13setIS2_NS3_4lessIS2_EENS3_9allocatorIS2_EEEE(%class.CPDF_ExpIntFunc* nocapture, %class.CPDF_Object*, %"class.std::__1::set"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = alloca %"class.fxcrt::ByteString", align 8
  %6 = alloca %"class.fxcrt::ByteString", align 8
  %7 = bitcast %class.CPDF_Object* %1 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %8 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %7, align 8
  %9 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %8, i64 12
  %10 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %9, align 8
  %11 = tail call %class.CPDF_Dictionary* %10(%class.CPDF_Object* %1) #9
  %12 = icmp eq %class.CPDF_Dictionary* %11, null
  br i1 %12, label %160, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #9
  %15 = call %class.CPDF_Object* @_ZNK15CPDF_Dictionary12GetObjectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %11, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %4) #9
  %16 = icmp eq %class.CPDF_Object* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %13
  %18 = bitcast %class.CPDF_Object* %15 to %class.CPDF_Number* (%class.CPDF_Object*)***
  %19 = load %class.CPDF_Number* (%class.CPDF_Object*)**, %class.CPDF_Number* (%class.CPDF_Object*)*** %18, align 8
  %20 = getelementptr inbounds %class.CPDF_Number* (%class.CPDF_Object*)*, %class.CPDF_Number* (%class.CPDF_Object*)** %19, i64 32
  %21 = load %class.CPDF_Number* (%class.CPDF_Object*)*, %class.CPDF_Number* (%class.CPDF_Object*)** %20, align 8
  %22 = call %class.CPDF_Number* %21(%class.CPDF_Object* nonnull %15) #9
  br label %23

23:                                               ; preds = %13, %17
  %24 = phi %class.CPDF_Number* [ %22, %17 ], [ null, %13 ]
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  %25 = icmp eq %class.CPDF_Number* %24, null
  br i1 %25, label %160, label %26

26:                                               ; preds = %23
  %27 = call float @_ZNK11CPDF_Number9GetNumberEv(%class.CPDF_Number* nonnull %24) #9
  %28 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 2
  store float %27, float* %28, align 4
  %29 = bitcast %"class.fxcrt::ByteString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #9
  %30 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %11, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %5) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  %31 = icmp ne %class.CPDF_Array* %30, null
  %32 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  br i1 %31, label %34, label %48

34:                                               ; preds = %26
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 3
  br label %53

38:                                               ; preds = %34
  %39 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %30, i64 0, i32 1
  %40 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %30, i64 0, i32 1, i32 0, i32 1
  %41 = bitcast %"class.fxcrt::RetainPtr.20"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.18"* %39 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = lshr exact i64 %45, 3
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %32, align 8
  br label %48

48:                                               ; preds = %26, %38
  %49 = phi i32 [ %47, %38 ], [ %33, %26 ]
  %50 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 3
  %51 = icmp eq i32 %49, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  store i32 1, i32* %50, align 8
  br label %53

53:                                               ; preds = %36, %52, %48
  %54 = phi i32* [ %37, %36 ], [ %50, %52 ], [ %50, %48 ]
  %55 = bitcast %"class.fxcrt::ByteString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #9
  %56 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %11, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %6) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #9
  %57 = load i32, i32* %54, align 8
  %58 = zext i32 %57 to i64
  %59 = shl nuw nsw i64 %58, 1
  %60 = icmp eq i32 %57, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %53
  %62 = shl nuw nsw i64 %58, 3
  %63 = call i8* @_Znwm(i64 %62) #10
  %64 = bitcast i8* %63 to float*
  %65 = getelementptr inbounds float, float* %64, i64 %59
  %66 = ptrtoint i8* %63 to i64
  %67 = add nsw i64 %59, -1
  %68 = getelementptr float, float* %64, i64 %67
  %69 = ptrtoint float* %68 to i64
  %70 = sub i64 4, %66
  %71 = add i64 %70, %69
  %72 = and i64 %71, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %72, i1 false) #9, !noalias !2
  %73 = ptrtoint float* %65 to i64
  br label %74

74:                                               ; preds = %53, %61
  %75 = phi i64 [ 0, %53 ], [ %73, %61 ]
  %76 = phi i64 [ 0, %53 ], [ %66, %61 ]
  %77 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 0, i32 0, i32 0
  %79 = load float*, float** %78, align 8
  %80 = icmp eq float* %79, null
  br i1 %80, label %87, label %81

81:                                               ; preds = %74
  %82 = ptrtoint float* %79 to i64
  %83 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 1
  %84 = bitcast float** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = bitcast float* %79 to i8*
  call void @_ZdlPv(i8* %85) #10
  %86 = bitcast %"class.std::__1::vector"* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #9
  br label %87

87:                                               ; preds = %74, %81
  %88 = bitcast %"class.std::__1::vector"* %77 to i64*
  store i64 %76, i64* %88, align 8
  %89 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 1
  %90 = bitcast float** %89 to i64*
  store i64 %75, i64* %90, align 8
  %91 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %92 = bitcast float** %91 to i64*
  store i64 %75, i64* %92, align 8
  %93 = load i32, i32* %54, align 8
  %94 = zext i32 %93 to i64
  %95 = shl nuw nsw i64 %94, 1
  %96 = icmp eq i32 %93, 0
  br i1 %96, label %110, label %97

97:                                               ; preds = %87
  %98 = shl nuw nsw i64 %94, 3
  %99 = call i8* @_Znwm(i64 %98) #10
  %100 = bitcast i8* %99 to float*
  %101 = getelementptr inbounds float, float* %100, i64 %95
  %102 = ptrtoint i8* %99 to i64
  %103 = add nsw i64 %95, -1
  %104 = getelementptr float, float* %100, i64 %103
  %105 = ptrtoint float* %104 to i64
  %106 = sub i64 4, %102
  %107 = add i64 %106, %105
  %108 = and i64 %107, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %99, i8 0, i64 %108, i1 false) #9, !noalias !5
  %109 = ptrtoint float* %101 to i64
  br label %110

110:                                              ; preds = %87, %97
  %111 = phi i64 [ 0, %87 ], [ %109, %97 ]
  %112 = phi i64 [ 0, %87 ], [ %102, %97 ]
  %113 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4
  %114 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %113, i64 0, i32 0, i32 0
  %115 = load float*, float** %114, align 8
  %116 = icmp eq float* %115, null
  br i1 %116, label %123, label %117

117:                                              ; preds = %110
  %118 = ptrtoint float* %115 to i64
  %119 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 1
  %120 = bitcast float** %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = bitcast float* %115 to i8*
  call void @_ZdlPv(i8* %121) #10
  %122 = bitcast %"class.std::__1::vector"* %113 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 24, i1 false) #9
  br label %123

123:                                              ; preds = %110, %117
  %124 = bitcast %"class.std::__1::vector"* %113 to i64*
  store i64 %112, i64* %124, align 8
  %125 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 1
  %126 = bitcast float** %125 to i64*
  store i64 %111, i64* %126, align 8
  %127 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast float** %127 to i64*
  store i64 %111, i64* %128, align 8
  %129 = load i32, i32* %54, align 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %133, label %131

131:                                              ; preds = %123
  %132 = icmp eq %class.CPDF_Array* %56, null
  br label %139

133:                                              ; preds = %149, %123
  %134 = phi i32 [ 0, %123 ], [ %154, %149 ]
  %135 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 2
  %136 = load i32, i32* %135, align 4
  %137 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %134, i32 %136) #9
  %138 = extractvalue { i32, i1 } %137, 1
  br i1 %138, label %160, label %157

139:                                              ; preds = %131, %149
  %140 = phi i64 [ 0, %131 ], [ %153, %149 ]
  br i1 %31, label %141, label %143

141:                                              ; preds = %139
  %142 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %30, i64 %140) #9
  br label %143

143:                                              ; preds = %139, %141
  %144 = phi float [ %142, %141 ], [ 0.000000e+00, %139 ]
  %145 = load float*, float** %78, align 8
  %146 = getelementptr inbounds float, float* %145, i64 %140
  store float %144, float* %146, align 4
  br i1 %132, label %149, label %147

147:                                              ; preds = %143
  %148 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %56, i64 %140) #9
  br label %149

149:                                              ; preds = %143, %147
  %150 = phi float [ %148, %147 ], [ 1.000000e+00, %143 ]
  %151 = load float*, float** %114, align 8
  %152 = getelementptr inbounds float, float* %151, i64 %140
  store float %150, float* %152, align 4
  %153 = add nuw nsw i64 %140, 1
  %154 = load i32, i32* %54, align 8
  %155 = zext i32 %154 to i64
  %156 = icmp ult i64 %153, %155
  br i1 %156, label %139, label %133

157:                                              ; preds = %133
  %158 = extractvalue { i32, i1 } %137, 0
  %159 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 1
  store i32 %134, i32* %159, align 8
  store i32 %158, i32* %54, align 8
  br label %160

160:                                              ; preds = %133, %157, %23, %3
  %161 = phi i1 [ false, %3 ], [ false, %23 ], [ true, %157 ], [ false, %133 ]
  ret i1 %161
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %class.CPDF_Object* @_ZNK15CPDF_Dictionary12GetObjectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare float @_ZNK11CPDF_Number9GetNumberEv(%class.CPDF_Number*) unnamed_addr #1

declare %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK15CPDF_ExpIntFunc6v_CallEPKfPf(%class.CPDF_ExpIntFunc* nocapture readonly, float* nocapture readonly, float* nocapture) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 2
  %11 = getelementptr inbounds %class.CPDF_ExpIntFunc, %class.CPDF_ExpIntFunc* %0, i64 0, i32 4, i32 0, i32 0
  %12 = load i32, i32* %8, align 8
  br label %13

13:                                               ; preds = %7, %24
  %14 = phi i32 [ %5, %7 ], [ %25, %24 ]
  %15 = phi i32 [ %12, %7 ], [ %26, %24 ]
  %16 = phi i64 [ 0, %7 ], [ %27, %24 ]
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds float, float* %1, i64 %16
  %20 = trunc i64 %16 to i32
  br label %30

21:                                               ; preds = %24, %3
  ret i1 true

22:                                               ; preds = %30
  %23 = load i32, i32* %4, align 4
  br label %24

24:                                               ; preds = %22, %13
  %25 = phi i32 [ %23, %22 ], [ %14, %13 ]
  %26 = phi i32 [ %54, %22 ], [ 0, %13 ]
  %27 = add nuw nsw i64 %16, 1
  %28 = zext i32 %25 to i64
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %13, label %21

30:                                               ; preds = %18, %30
  %31 = phi i64 [ 0, %18 ], [ %53, %30 ]
  %32 = load float*, float** %9, align 8
  %33 = getelementptr inbounds float, float* %32, i64 %31
  %34 = load float, float* %33, align 4
  %35 = load float, float* %19, align 4
  %36 = load float, float* %10, align 4
  %37 = tail call float @powf(float %35, float %36) #9
  %38 = load float*, float** %11, align 8
  %39 = getelementptr inbounds float, float* %38, i64 %31
  %40 = load float, float* %39, align 4
  %41 = load float*, float** %9, align 8
  %42 = getelementptr inbounds float, float* %41, i64 %31
  %43 = load float, float* %42, align 4
  %44 = fsub float %40, %43
  %45 = fmul float %37, %44
  %46 = fadd float %34, %45
  %47 = load i32, i32* %8, align 8
  %48 = mul i32 %47, %20
  %49 = trunc i64 %31 to i32
  %50 = add i32 %48, %49
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %2, i64 %51
  store float %46, float* %52, align 4
  %53 = add nuw nsw i64 %31, 1
  %54 = load i32, i32* %8, align 8
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %53, %55
  br i1 %56, label %30, label %22
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #6

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6pdfium8Vector2DIfNSt3__19allocatorIfEEEENS1_6vectorIT_T0_EEmm: argument 0"}
!4 = distinct !{!4, !"_ZN6pdfium8Vector2DIfNSt3__19allocatorIfEEEENS1_6vectorIT_T0_EEmm"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6pdfium8Vector2DIfNSt3__19allocatorIfEEEENS1_6vectorIT_T0_EEmm: argument 0"}
!7 = distinct !{!7, !"_ZN6pdfium8Vector2DIfNSt3__19allocatorIfEEEENS1_6vectorIT_T0_EEmm"}
