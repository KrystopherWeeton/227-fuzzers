; ModuleID = '../../third_party/angle/src/common/spirv/spirv_instruction_parser_autogen.cpp'
source_filename = "../../third_party/angle/src/common/spirv/spirv_instruction_parser_autogen.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::spirv::BoxedUint32" = type { %"struct.angle::spirv::IdRefHelper" }
%"struct.angle::spirv::IdRefHelper" = type { i32 }
%"class.angle::spirv::BoxedUint32.0" = type { %"struct.angle::spirv::LiteralIntegerHelper" }
%"struct.angle::spirv::LiteralIntegerHelper" = type { i32 }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::spirv::BoxedUint32"*, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::spirv::BoxedUint32"] }
%"class.angle::FastVector.1" = type { %"struct.std::__1::array.2", %"class.angle::spirv::BoxedUint32.0"*, i64, i64 }
%"struct.std::__1::array.2" = type { [8 x %"class.angle::spirv::BoxedUint32.0"] }
%"class.angle::FastVector.3" = type { %"struct.std::__1::array.4", %"struct.angle::spirv::PairIdRefLiteralInteger"*, i64, i64 }
%"struct.std::__1::array.4" = type { [8 x %"struct.angle::spirv::PairIdRefLiteralInteger"] }
%"struct.angle::spirv::PairIdRefLiteralInteger" = type { %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32.0" }
%"class.angle::FastVector.5" = type { %"struct.std::__1::array.6", %"struct.angle::spirv::PairIdRefIdRef"*, i64, i64 }
%"struct.std::__1::array.6" = type { [8 x %"struct.angle::spirv::PairIdRefIdRef"] }
%"struct.angle::spirv::PairIdRefIdRef" = type { %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32" }
%"class.angle::FastVector.7" = type { %"struct.std::__1::array.8", %"struct.angle::spirv::PairLiteralIntegerIdRef"*, i64, i64 }
%"struct.std::__1::array.8" = type { [8 x %"struct.angle::spirv::PairLiteralIntegerIdRef"] }
%"struct.angle::spirv::PairLiteralIntegerIdRef" = type { %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32" }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle5spirv25GetInstructionOpAndLengthEPKjPN3spv2OpEPj(i32* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = load i32, i32* %0, align 4
  %5 = and i32 %4, 65535
  store i32 %5, i32* %1, align 4
  %6 = load i32, i32* %0, align 4
  %7 = lshr i32 %6, 16
  store i32 %7, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseUndefEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseSourceContinuedEPKjPPKc(i32*, i8** nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = bitcast i8** %1 to i32**
  store i32* %3, i32** %4, align 8
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseSourceEPKjPN3spv14SourceLanguageEPNS0_11BoxedUint32INS0_20LiteralIntegerHelperEEEPNS6_INS0_11IdRefHelperEEEPPKc(i32*, i32* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32"*, i8**) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = lshr i32 %6, 16
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %1, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = icmp ne %"class.angle::spirv::BoxedUint32"* %3, null
  %14 = icmp ugt i32 %6, 262143
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %5
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  br label %20

20:                                               ; preds = %5, %16
  %21 = phi i32 [ 4, %16 ], [ 3, %5 ]
  %22 = icmp ne i8** %4, null
  %23 = icmp ult i32 %21, %7
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = zext i32 %21 to i64
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = bitcast i8** %4 to i32**
  store i32* %27, i32** %28, align 8
  br label %29

29:                                               ; preds = %20, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseSourceExtensionEPKjPPKc(i32*, i8** nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = bitcast i8** %1 to i32**
  store i32* %3, i32** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseNameEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPPKc(i32*, %"class.angle::spirv::BoxedUint32"* nocapture, i8** nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = bitcast i8** %2 to i32**
  store i32* %7, i32** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseMemberNameEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS3_INS0_20LiteralIntegerHelperEEEPPKc(i32*, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, i8** nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = bitcast i8** %3 to i32**
  store i32* %11, i32** %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseStringEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPPKc(i32*, %"class.angle::spirv::BoxedUint32"* nocapture, i8** nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = bitcast i8** %2 to i32**
  store i32* %7, i32** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseLineEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS3_INS0_20LiteralIntegerHelperEEES9_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseExtensionEPKjPPKc(i32*, i8** nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = bitcast i8** %1 to i32**
  store i32* %3, i32** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseExtInstImportEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPPKc(i32*, %"class.angle::spirv::BoxedUint32"* nocapture, i8** nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = bitcast i8** %2 to i32**
  store i32* %7, i32** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv12ParseExtInstEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS3_INS0_20LiteralIntegerHelperEEEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = icmp ne %"class.angle::FastVector"* %5, null
  %21 = icmp ugt i32 %7, 393215
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %83

23:                                               ; preds = %6
  %24 = lshr i32 %7, 16
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 2
  %26 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 3
  %27 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 1
  %28 = bitcast %"class.angle::spirv::BoxedUint32"** %27 to i8**
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 0, i32 0, i64 0
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %23, %76
  %32 = phi i64 [ 5, %23 ], [ %33, %76 ]
  %33 = add nuw nsw i64 %32, 1
  %34 = getelementptr inbounds i32, i32* %0, i64 %32
  %35 = load i64, i64* %25, align 8
  %36 = load i64, i64* %26, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %76

38:                                               ; preds = %31
  %39 = add i64 %35, 1
  %40 = icmp eq i64 %35, -1
  br i1 %40, label %76, label %41

41:                                               ; preds = %38
  %42 = icmp ugt i64 %35, 8
  %43 = select i1 %42, i64 %35, i64 8
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %43, %41 ], [ %47, %44 ]
  %46 = icmp ult i64 %45, %39
  %47 = shl i64 %45, 1
  br i1 %46, label %44, label %48

48:                                               ; preds = %44
  %49 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 4) #7
  %50 = extractvalue { i64, i1 } %49, 1
  %51 = extractvalue { i64, i1 } %49, 0
  %52 = select i1 %50, i64 -1, i64 %51
  %53 = tail call i8* @_Znam(i64 %52) #8
  %54 = icmp eq i64 %45, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %48
  %56 = shl nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 0, i64 %56, i1 false) #7
  br label %57

57:                                               ; preds = %55, %48
  %58 = icmp eq i64 %35, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %27, align 8
  %61 = bitcast %"class.angle::spirv::BoxedUint32"* %60 to i8*
  br label %66

62:                                               ; preds = %57
  %63 = shl nuw i64 %35, 2
  %64 = load i8*, i8** %28, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 %64, i64 %63, i1 false) #7
  %65 = bitcast i8* %64 to %"class.angle::spirv::BoxedUint32"*
  br label %66

66:                                               ; preds = %62, %59
  %67 = phi i8* [ %61, %59 ], [ %64, %62 ]
  %68 = phi %"class.angle::spirv::BoxedUint32"* [ %60, %59 ], [ %65, %62 ]
  %69 = icmp eq %"class.angle::spirv::BoxedUint32"* %68, %29
  %70 = icmp eq %"class.angle::spirv::BoxedUint32"* %68, null
  %71 = or i1 %69, %70
  br i1 %71, label %74, label %72

72:                                               ; preds = %66
  tail call void @_ZdaPv(i8* %67) #8
  %73 = load i64, i64* %25, align 8
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64 [ %73, %72 ], [ %35, %66 ]
  store i8* %53, i8** %28, align 8
  store i64 %45, i64* %26, align 8
  br label %76

76:                                               ; preds = %31, %38, %74
  %77 = phi i64 [ %75, %74 ], [ -1, %38 ], [ %35, %31 ]
  %78 = load i32, i32* %34, align 4
  %79 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %27, align 8
  %80 = add i64 %77, 1
  store i64 %80, i64* %25, align 8
  %81 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %79, i64 %77, i32 0, i32 0
  store i32 %78, i32* %81, align 4
  %82 = icmp ult i64 %33, %30
  br i1 %82, label %31, label %83

83:                                               ; preds = %76, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseMemoryModelEPKjPN3spv15AddressingModelEPNS3_11MemoryModelE(i32* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %1, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseEntryPointEPKjPN3spv14ExecutionModelEPNS0_11BoxedUint32INS0_11IdRefHelperEEEPPKcPNS_10FastVectorIS8_Lm8ENSt3__15arrayIS8_Lm8EEEEE(i32*, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i8** nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = lshr i32 %6, 16
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %1, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = bitcast i32* %13 to i8*
  %15 = bitcast i8** %3 to i32**
  store i32* %13, i32** %15, align 8
  %16 = tail call i64 @strlen(i8* %14) #9
  %17 = lshr i64 %16, 2
  %18 = trunc i64 %17 to i32
  %19 = add i32 %18, 4
  %20 = icmp ne %"class.angle::FastVector"* %4, null
  %21 = icmp ult i32 %19, %7
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %83

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 2
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 3
  %26 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 1
  %27 = bitcast %"class.angle::spirv::BoxedUint32"** %26 to i8**
  %28 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 0, i32 0, i64 0
  %29 = zext i32 %19 to i64
  br label %30

30:                                               ; preds = %75, %23
  %31 = phi i64 [ %29, %23 ], [ %32, %75 ]
  %32 = add nuw nsw i64 %31, 1
  %33 = getelementptr inbounds i32, i32* %0, i64 %31
  %34 = load i64, i64* %24, align 8
  %35 = load i64, i64* %25, align 8
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %37, label %75

37:                                               ; preds = %30
  %38 = add i64 %34, 1
  %39 = icmp eq i64 %34, -1
  br i1 %39, label %75, label %40

40:                                               ; preds = %37
  %41 = icmp ugt i64 %34, 8
  %42 = select i1 %41, i64 %34, i64 8
  br label %43

43:                                               ; preds = %43, %40
  %44 = phi i64 [ %42, %40 ], [ %46, %43 ]
  %45 = icmp ult i64 %44, %38
  %46 = shl i64 %44, 1
  br i1 %45, label %43, label %47

47:                                               ; preds = %43
  %48 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %44, i64 4) #7
  %49 = extractvalue { i64, i1 } %48, 1
  %50 = extractvalue { i64, i1 } %48, 0
  %51 = select i1 %49, i64 -1, i64 %50
  %52 = tail call i8* @_Znam(i64 %51) #8
  %53 = icmp eq i64 %44, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %47
  %55 = shl nsw i64 %44, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %52, i8 0, i64 %55, i1 false) #7
  br label %56

56:                                               ; preds = %54, %47
  %57 = icmp eq i64 %34, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %26, align 8
  %60 = bitcast %"class.angle::spirv::BoxedUint32"* %59 to i8*
  br label %65

61:                                               ; preds = %56
  %62 = shl nuw i64 %34, 2
  %63 = load i8*, i8** %27, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %52, i8* align 4 %63, i64 %62, i1 false) #7
  %64 = bitcast i8* %63 to %"class.angle::spirv::BoxedUint32"*
  br label %65

65:                                               ; preds = %61, %58
  %66 = phi i8* [ %60, %58 ], [ %63, %61 ]
  %67 = phi %"class.angle::spirv::BoxedUint32"* [ %59, %58 ], [ %64, %61 ]
  %68 = icmp eq %"class.angle::spirv::BoxedUint32"* %67, %28
  %69 = icmp eq %"class.angle::spirv::BoxedUint32"* %67, null
  %70 = or i1 %68, %69
  br i1 %70, label %73, label %71

71:                                               ; preds = %65
  tail call void @_ZdaPv(i8* %66) #8
  %72 = load i64, i64* %24, align 8
  br label %73

73:                                               ; preds = %71, %65
  %74 = phi i64 [ %72, %71 ], [ %34, %65 ]
  store i8* %52, i8** %27, align 8
  store i64 %44, i64* %25, align 8
  br label %75

75:                                               ; preds = %30, %37, %73
  %76 = phi i64 [ %74, %73 ], [ -1, %37 ], [ %34, %30 ]
  %77 = load i32, i32* %33, align 4
  %78 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %26, align 8
  %79 = add i64 %76, 1
  store i64 %79, i64* %24, align 8
  %80 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %78, i64 %76, i32 0, i32 0
  store i32 %77, i32* %80, align 4
  %81 = trunc i64 %32 to i32
  %82 = icmp eq i32 %7, %81
  br i1 %82, label %83, label %30

83:                                               ; preds = %75, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseExecutionModeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPN3spv13ExecutionModeE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseCapabilityEPKjPN3spv10CapabilityE(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %1, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseTypeVoidEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseTypeBoolEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv12ParseTypeIntEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS3_INS0_20LiteralIntegerHelperEEES9_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseTypeFloatEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseTypeVectorEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseTypeMatrixEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseTypeImageEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv3DimEPNS3_INS0_20LiteralIntegerHelperEEESC_SC_SC_PNS7_11ImageFormatEPNS7_15AccessQualifierE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, i32* nocapture, i32*) local_unnamed_addr #1 {
  %11 = load i32, i32* %0, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 3
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %3, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds i32, i32* %0, i64 6
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %6, i64 0, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds i32, i32* %0, i64 7
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %7, i64 0, i32 0, i32 0
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 8
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %8, align 4
  %34 = icmp ne i32* %9, null
  %35 = icmp ugt i32 %11, 655359
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %40

37:                                               ; preds = %10
  %38 = getelementptr inbounds i32, i32* %0, i64 9
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %9, align 4
  br label %40

40:                                               ; preds = %10, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseTypeSamplerEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseTypeSampledImageEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseTypeArrayEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseTypeRuntimeArrayEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseTypeStructEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %4 = load i32, i32* %0, align 4
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = icmp ne %"class.angle::FastVector"* %2, null
  %9 = icmp ugt i32 %4, 196607
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %71

11:                                               ; preds = %3
  %12 = lshr i32 %4, 16
  %13 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 2
  %14 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 3
  %15 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 1
  %16 = bitcast %"class.angle::spirv::BoxedUint32"** %15 to i8**
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 0, i32 0, i64 0
  %18 = zext i32 %12 to i64
  br label %19

19:                                               ; preds = %11, %64
  %20 = phi i64 [ 2, %11 ], [ %21, %64 ]
  %21 = add nuw nsw i64 %20, 1
  %22 = getelementptr inbounds i32, i32* %0, i64 %20
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %14, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %26, label %64

26:                                               ; preds = %19
  %27 = add i64 %23, 1
  %28 = icmp eq i64 %23, -1
  br i1 %28, label %64, label %29

29:                                               ; preds = %26
  %30 = icmp ugt i64 %23, 8
  %31 = select i1 %30, i64 %23, i64 8
  br label %32

32:                                               ; preds = %32, %29
  %33 = phi i64 [ %31, %29 ], [ %35, %32 ]
  %34 = icmp ult i64 %33, %27
  %35 = shl i64 %33, 1
  br i1 %34, label %32, label %36

36:                                               ; preds = %32
  %37 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 4) #7
  %38 = extractvalue { i64, i1 } %37, 1
  %39 = extractvalue { i64, i1 } %37, 0
  %40 = select i1 %38, i64 -1, i64 %39
  %41 = tail call i8* @_Znam(i64 %40) #8
  %42 = icmp eq i64 %33, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = shl nsw i64 %33, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %41, i8 0, i64 %44, i1 false) #7
  br label %45

45:                                               ; preds = %43, %36
  %46 = icmp eq i64 %23, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %45
  %48 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %49 = bitcast %"class.angle::spirv::BoxedUint32"* %48 to i8*
  br label %54

50:                                               ; preds = %45
  %51 = shl nuw i64 %23, 2
  %52 = load i8*, i8** %16, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %52, i64 %51, i1 false) #7
  %53 = bitcast i8* %52 to %"class.angle::spirv::BoxedUint32"*
  br label %54

54:                                               ; preds = %50, %47
  %55 = phi i8* [ %49, %47 ], [ %52, %50 ]
  %56 = phi %"class.angle::spirv::BoxedUint32"* [ %48, %47 ], [ %53, %50 ]
  %57 = icmp eq %"class.angle::spirv::BoxedUint32"* %56, %17
  %58 = icmp eq %"class.angle::spirv::BoxedUint32"* %56, null
  %59 = or i1 %57, %58
  br i1 %59, label %62, label %60

60:                                               ; preds = %54
  tail call void @_ZdaPv(i8* %55) #8
  %61 = load i64, i64* %13, align 8
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i64 [ %61, %60 ], [ %23, %54 ]
  store i8* %41, i8** %16, align 8
  store i64 %33, i64* %14, align 8
  br label %64

64:                                               ; preds = %19, %26, %62
  %65 = phi i64 [ %63, %62 ], [ -1, %26 ], [ %23, %19 ]
  %66 = load i32, i32* %22, align 4
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %68 = add i64 %65, 1
  store i64 %68, i64* %13, align 8
  %69 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %67, i64 %65, i32 0, i32 0
  store i32 %66, i32* %69, align 4
  %70 = icmp ult i64 %21, %18
  br i1 %70, label %19, label %71

71:                                               ; preds = %64, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseTypePointerEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPN3spv12StorageClassES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %2, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseTypeFunctionEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %75

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 1
  %20 = bitcast %"class.angle::spirv::BoxedUint32"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %68
  %24 = phi i64 [ 3, %15 ], [ %25, %68 ]
  %25 = add nuw nsw i64 %24, 1
  %26 = getelementptr inbounds i32, i32* %0, i64 %24
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %68

30:                                               ; preds = %23
  %31 = add i64 %27, 1
  %32 = icmp eq i64 %27, -1
  br i1 %32, label %68, label %33

33:                                               ; preds = %30
  %34 = icmp ugt i64 %27, 8
  %35 = select i1 %34, i64 %27, i64 8
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %35, %33 ], [ %39, %36 ]
  %38 = icmp ult i64 %37, %31
  %39 = shl i64 %37, 1
  br i1 %38, label %36, label %40

40:                                               ; preds = %36
  %41 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %37, i64 4) #7
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = tail call i8* @_Znam(i64 %44) #8
  %46 = icmp eq i64 %37, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = shl nsw i64 %37, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 0, i64 %48, i1 false) #7
  br label %49

49:                                               ; preds = %47, %40
  %50 = icmp eq i64 %27, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %49
  %52 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %53 = bitcast %"class.angle::spirv::BoxedUint32"* %52 to i8*
  br label %58

54:                                               ; preds = %49
  %55 = shl nuw i64 %27, 2
  %56 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %56, i64 %55, i1 false) #7
  %57 = bitcast i8* %56 to %"class.angle::spirv::BoxedUint32"*
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i8* [ %53, %51 ], [ %56, %54 ]
  %60 = phi %"class.angle::spirv::BoxedUint32"* [ %52, %51 ], [ %57, %54 ]
  %61 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, %21
  %62 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, null
  %63 = or i1 %61, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58
  tail call void @_ZdaPv(i8* %59) #8
  %65 = load i64, i64* %17, align 8
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i64 [ %65, %64 ], [ %27, %58 ]
  store i8* %45, i8** %20, align 8
  store i64 %37, i64* %18, align 8
  br label %68

68:                                               ; preds = %23, %30, %66
  %69 = phi i64 [ %67, %66 ], [ -1, %30 ], [ %27, %23 ]
  %70 = load i32, i32* %26, align 4
  %71 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %72 = add i64 %69, 1
  store i64 %72, i64* %17, align 8
  %73 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %71, i64 %69, i32 0, i32 0
  store i32 %70, i32* %73, align 4
  %74 = icmp ult i64 %25, %22
  br i1 %74, label %23, label %75

75:                                               ; preds = %68, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv23ParseTypeForwardPointerEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPN3spv12StorageClassE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseConstantTrueEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseConstantFalseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseConstantEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseConstantCompositeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %75

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 1
  %20 = bitcast %"class.angle::spirv::BoxedUint32"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %68
  %24 = phi i64 [ 3, %15 ], [ %25, %68 ]
  %25 = add nuw nsw i64 %24, 1
  %26 = getelementptr inbounds i32, i32* %0, i64 %24
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %68

30:                                               ; preds = %23
  %31 = add i64 %27, 1
  %32 = icmp eq i64 %27, -1
  br i1 %32, label %68, label %33

33:                                               ; preds = %30
  %34 = icmp ugt i64 %27, 8
  %35 = select i1 %34, i64 %27, i64 8
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %35, %33 ], [ %39, %36 ]
  %38 = icmp ult i64 %37, %31
  %39 = shl i64 %37, 1
  br i1 %38, label %36, label %40

40:                                               ; preds = %36
  %41 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %37, i64 4) #7
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = tail call i8* @_Znam(i64 %44) #8
  %46 = icmp eq i64 %37, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = shl nsw i64 %37, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 0, i64 %48, i1 false) #7
  br label %49

49:                                               ; preds = %47, %40
  %50 = icmp eq i64 %27, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %49
  %52 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %53 = bitcast %"class.angle::spirv::BoxedUint32"* %52 to i8*
  br label %58

54:                                               ; preds = %49
  %55 = shl nuw i64 %27, 2
  %56 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %56, i64 %55, i1 false) #7
  %57 = bitcast i8* %56 to %"class.angle::spirv::BoxedUint32"*
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i8* [ %53, %51 ], [ %56, %54 ]
  %60 = phi %"class.angle::spirv::BoxedUint32"* [ %52, %51 ], [ %57, %54 ]
  %61 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, %21
  %62 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, null
  %63 = or i1 %61, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58
  tail call void @_ZdaPv(i8* %59) #8
  %65 = load i64, i64* %17, align 8
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i64 [ %65, %64 ], [ %27, %58 ]
  store i8* %45, i8** %20, align 8
  store i64 %37, i64* %18, align 8
  br label %68

68:                                               ; preds = %23, %30, %66
  %69 = phi i64 [ %67, %66 ], [ -1, %30 ], [ %27, %23 ]
  %70 = load i32, i32* %26, align 4
  %71 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %72 = add i64 %69, 1
  store i64 %72, i64* %17, align 8
  %73 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %71, i64 %69, i32 0, i32 0
  store i32 %70, i32* %73, align 4
  %74 = icmp ult i64 %25, %22
  br i1 %74, label %23, label %75

75:                                               ; preds = %68, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseConstantNullEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseSpecConstantTrueEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseSpecConstantFalseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseSpecConstantEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv26ParseSpecConstantCompositeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %75

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 1
  %20 = bitcast %"class.angle::spirv::BoxedUint32"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %68
  %24 = phi i64 [ 3, %15 ], [ %25, %68 ]
  %25 = add nuw nsw i64 %24, 1
  %26 = getelementptr inbounds i32, i32* %0, i64 %24
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %68

30:                                               ; preds = %23
  %31 = add i64 %27, 1
  %32 = icmp eq i64 %27, -1
  br i1 %32, label %68, label %33

33:                                               ; preds = %30
  %34 = icmp ugt i64 %27, 8
  %35 = select i1 %34, i64 %27, i64 8
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %35, %33 ], [ %39, %36 ]
  %38 = icmp ult i64 %37, %31
  %39 = shl i64 %37, 1
  br i1 %38, label %36, label %40

40:                                               ; preds = %36
  %41 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %37, i64 4) #7
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = tail call i8* @_Znam(i64 %44) #8
  %46 = icmp eq i64 %37, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = shl nsw i64 %37, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 0, i64 %48, i1 false) #7
  br label %49

49:                                               ; preds = %47, %40
  %50 = icmp eq i64 %27, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %49
  %52 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %53 = bitcast %"class.angle::spirv::BoxedUint32"* %52 to i8*
  br label %58

54:                                               ; preds = %49
  %55 = shl nuw i64 %27, 2
  %56 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %56, i64 %55, i1 false) #7
  %57 = bitcast i8* %56 to %"class.angle::spirv::BoxedUint32"*
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i8* [ %53, %51 ], [ %56, %54 ]
  %60 = phi %"class.angle::spirv::BoxedUint32"* [ %52, %51 ], [ %57, %54 ]
  %61 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, %21
  %62 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, null
  %63 = or i1 %61, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58
  tail call void @_ZdaPv(i8* %59) #8
  %65 = load i64, i64* %17, align 8
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i64 [ %65, %64 ], [ %27, %58 ]
  store i8* %45, i8** %20, align 8
  store i64 %37, i64* %18, align 8
  br label %68

68:                                               ; preds = %23, %30, %66
  %69 = phi i64 [ %67, %66 ], [ -1, %30 ], [ %27, %23 ]
  %70 = load i32, i32* %26, align 4
  %71 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %72 = add i64 %69, 1
  store i64 %72, i64* %17, align 8
  %73 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %71, i64 %69, i32 0, i32 0
  store i32 %70, i32* %73, align 4
  %74 = icmp ult i64 %25, %22
  br i1 %74, label %23, label %75

75:                                               ; preds = %68, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseFunctionEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv19FunctionControlMaskES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %3, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 4
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseFunctionParameterEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseFunctionCallEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne %"class.angle::FastVector"* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %79

19:                                               ; preds = %5
  %20 = lshr i32 %6, 16
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 1
  %24 = bitcast %"class.angle::spirv::BoxedUint32"** %23 to i8**
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 0, i32 0, i64 0
  %26 = zext i32 %20 to i64
  br label %27

27:                                               ; preds = %19, %72
  %28 = phi i64 [ 4, %19 ], [ %29, %72 ]
  %29 = add nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %0, i64 %28
  %31 = load i64, i64* %21, align 8
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %27
  %35 = add i64 %31, 1
  %36 = icmp eq i64 %31, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i64 %31, 8
  %39 = select i1 %38, i64 %31, i64 8
  br label %40

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %42 = icmp ult i64 %41, %35
  %43 = shl i64 %41, 1
  br i1 %42, label %40, label %44

44:                                               ; preds = %40
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %41, i64 4) #7
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call i8* @_Znam(i64 %48) #8
  %50 = icmp eq i64 %41, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %52, i1 false) #7
  br label %53

53:                                               ; preds = %51, %44
  %54 = icmp eq i64 %31, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %57 = bitcast %"class.angle::spirv::BoxedUint32"* %56 to i8*
  br label %62

58:                                               ; preds = %53
  %59 = shl nuw i64 %31, 2
  %60 = load i8*, i8** %24, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %60, i64 %59, i1 false) #7
  %61 = bitcast i8* %60 to %"class.angle::spirv::BoxedUint32"*
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i8* [ %57, %55 ], [ %60, %58 ]
  %64 = phi %"class.angle::spirv::BoxedUint32"* [ %56, %55 ], [ %61, %58 ]
  %65 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, %25
  %66 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @_ZdaPv(i8* %63) #8
  %69 = load i64, i64* %21, align 8
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i64 [ %69, %68 ], [ %31, %62 ]
  store i8* %49, i8** %24, align 8
  store i64 %41, i64* %22, align 8
  br label %72

72:                                               ; preds = %27, %34, %70
  %73 = phi i64 [ %71, %70 ], [ -1, %34 ], [ %31, %27 ]
  %74 = load i32, i32* %30, align 4
  %75 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %76 = add i64 %73, 1
  store i64 %76, i64* %21, align 8
  %77 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %75, i64 %73, i32 0, i32 0
  store i32 %74, i32* %77, align 4
  %78 = icmp ult i64 %29, %26
  br i1 %78, label %27, label %79

79:                                               ; preds = %72, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseVariableEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv12StorageClassES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %3, align 4
  %15 = icmp ne %"class.angle::spirv::BoxedUint32"* %4, null
  %16 = icmp ugt i32 %6, 327679
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %22

18:                                               ; preds = %5
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  br label %22

22:                                               ; preds = %5, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseImageTexelPointerEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseLoadEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv16MemoryAccessMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne i32* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %5
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %4, align 4
  br label %22

22:                                               ; preds = %5, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseStoreEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv16MemoryAccessMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne i32* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %3, align 4
  br label %18

18:                                               ; preds = %4, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseCopyMemoryEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv16MemoryAccessMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne i32* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %3, align 4
  br label %18

18:                                               ; preds = %4, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseCopyMemorySizedEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv16MemoryAccessMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne i32* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %5
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %4, align 4
  br label %22

22:                                               ; preds = %5, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseAccessChainEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne %"class.angle::FastVector"* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %79

19:                                               ; preds = %5
  %20 = lshr i32 %6, 16
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 1
  %24 = bitcast %"class.angle::spirv::BoxedUint32"** %23 to i8**
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 0, i32 0, i64 0
  %26 = zext i32 %20 to i64
  br label %27

27:                                               ; preds = %19, %72
  %28 = phi i64 [ 4, %19 ], [ %29, %72 ]
  %29 = add nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %0, i64 %28
  %31 = load i64, i64* %21, align 8
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %27
  %35 = add i64 %31, 1
  %36 = icmp eq i64 %31, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i64 %31, 8
  %39 = select i1 %38, i64 %31, i64 8
  br label %40

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %42 = icmp ult i64 %41, %35
  %43 = shl i64 %41, 1
  br i1 %42, label %40, label %44

44:                                               ; preds = %40
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %41, i64 4) #7
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call i8* @_Znam(i64 %48) #8
  %50 = icmp eq i64 %41, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %52, i1 false) #7
  br label %53

53:                                               ; preds = %51, %44
  %54 = icmp eq i64 %31, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %57 = bitcast %"class.angle::spirv::BoxedUint32"* %56 to i8*
  br label %62

58:                                               ; preds = %53
  %59 = shl nuw i64 %31, 2
  %60 = load i8*, i8** %24, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %60, i64 %59, i1 false) #7
  %61 = bitcast i8* %60 to %"class.angle::spirv::BoxedUint32"*
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i8* [ %57, %55 ], [ %60, %58 ]
  %64 = phi %"class.angle::spirv::BoxedUint32"* [ %56, %55 ], [ %61, %58 ]
  %65 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, %25
  %66 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @_ZdaPv(i8* %63) #8
  %69 = load i64, i64* %21, align 8
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i64 [ %69, %68 ], [ %31, %62 ]
  store i8* %49, i8** %24, align 8
  store i64 %41, i64* %22, align 8
  br label %72

72:                                               ; preds = %27, %34, %70
  %73 = phi i64 [ %71, %70 ], [ -1, %34 ], [ %31, %27 ]
  %74 = load i32, i32* %30, align 4
  %75 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %76 = add i64 %73, 1
  store i64 %76, i64* %21, align 8
  %77 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %75, i64 %73, i32 0, i32 0
  store i32 %74, i32* %77, align 4
  %78 = icmp ult i64 %29, %26
  br i1 %78, label %27, label %79

79:                                               ; preds = %72, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv24ParseInBoundsAccessChainEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne %"class.angle::FastVector"* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %79

19:                                               ; preds = %5
  %20 = lshr i32 %6, 16
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 1
  %24 = bitcast %"class.angle::spirv::BoxedUint32"** %23 to i8**
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %4, i64 0, i32 0, i32 0, i64 0
  %26 = zext i32 %20 to i64
  br label %27

27:                                               ; preds = %19, %72
  %28 = phi i64 [ 4, %19 ], [ %29, %72 ]
  %29 = add nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %0, i64 %28
  %31 = load i64, i64* %21, align 8
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %27
  %35 = add i64 %31, 1
  %36 = icmp eq i64 %31, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i64 %31, 8
  %39 = select i1 %38, i64 %31, i64 8
  br label %40

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %42 = icmp ult i64 %41, %35
  %43 = shl i64 %41, 1
  br i1 %42, label %40, label %44

44:                                               ; preds = %40
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %41, i64 4) #7
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call i8* @_Znam(i64 %48) #8
  %50 = icmp eq i64 %41, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %52, i1 false) #7
  br label %53

53:                                               ; preds = %51, %44
  %54 = icmp eq i64 %31, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %57 = bitcast %"class.angle::spirv::BoxedUint32"* %56 to i8*
  br label %62

58:                                               ; preds = %53
  %59 = shl nuw i64 %31, 2
  %60 = load i8*, i8** %24, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %60, i64 %59, i1 false) #7
  %61 = bitcast i8* %60 to %"class.angle::spirv::BoxedUint32"*
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i8* [ %57, %55 ], [ %60, %58 ]
  %64 = phi %"class.angle::spirv::BoxedUint32"* [ %56, %55 ], [ %61, %58 ]
  %65 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, %25
  %66 = icmp eq %"class.angle::spirv::BoxedUint32"* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @_ZdaPv(i8* %63) #8
  %69 = load i64, i64* %21, align 8
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i64 [ %69, %68 ], [ %31, %62 ]
  store i8* %49, i8** %24, align 8
  store i64 %41, i64* %22, align 8
  br label %72

72:                                               ; preds = %27, %34, %70
  %73 = phi i64 [ %71, %70 ], [ -1, %34 ], [ %31, %27 ]
  %74 = load i32, i32* %30, align 4
  %75 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %23, align 8
  %76 = add i64 %73, 1
  store i64 %76, i64* %21, align 8
  %77 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %75, i64 %73, i32 0, i32 0
  store i32 %74, i32* %77, align 4
  %78 = icmp ult i64 %29, %26
  br i1 %78, label %27, label %79

79:                                               ; preds = %72, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseArrayLengthEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS3_INS0_20LiteralIntegerHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseInBoundsPtrAccessChainEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = icmp ne %"class.angle::FastVector"* %5, null
  %21 = icmp ugt i32 %7, 393215
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %83

23:                                               ; preds = %6
  %24 = lshr i32 %7, 16
  %25 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 2
  %26 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 3
  %27 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 1
  %28 = bitcast %"class.angle::spirv::BoxedUint32"** %27 to i8**
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 0, i32 0, i64 0
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %23, %76
  %32 = phi i64 [ 5, %23 ], [ %33, %76 ]
  %33 = add nuw nsw i64 %32, 1
  %34 = getelementptr inbounds i32, i32* %0, i64 %32
  %35 = load i64, i64* %25, align 8
  %36 = load i64, i64* %26, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %76

38:                                               ; preds = %31
  %39 = add i64 %35, 1
  %40 = icmp eq i64 %35, -1
  br i1 %40, label %76, label %41

41:                                               ; preds = %38
  %42 = icmp ugt i64 %35, 8
  %43 = select i1 %42, i64 %35, i64 8
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %43, %41 ], [ %47, %44 ]
  %46 = icmp ult i64 %45, %39
  %47 = shl i64 %45, 1
  br i1 %46, label %44, label %48

48:                                               ; preds = %44
  %49 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 4) #7
  %50 = extractvalue { i64, i1 } %49, 1
  %51 = extractvalue { i64, i1 } %49, 0
  %52 = select i1 %50, i64 -1, i64 %51
  %53 = tail call i8* @_Znam(i64 %52) #8
  %54 = icmp eq i64 %45, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %48
  %56 = shl nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 0, i64 %56, i1 false) #7
  br label %57

57:                                               ; preds = %55, %48
  %58 = icmp eq i64 %35, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %27, align 8
  %61 = bitcast %"class.angle::spirv::BoxedUint32"* %60 to i8*
  br label %66

62:                                               ; preds = %57
  %63 = shl nuw i64 %35, 2
  %64 = load i8*, i8** %28, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 %64, i64 %63, i1 false) #7
  %65 = bitcast i8* %64 to %"class.angle::spirv::BoxedUint32"*
  br label %66

66:                                               ; preds = %62, %59
  %67 = phi i8* [ %61, %59 ], [ %64, %62 ]
  %68 = phi %"class.angle::spirv::BoxedUint32"* [ %60, %59 ], [ %65, %62 ]
  %69 = icmp eq %"class.angle::spirv::BoxedUint32"* %68, %29
  %70 = icmp eq %"class.angle::spirv::BoxedUint32"* %68, null
  %71 = or i1 %69, %70
  br i1 %71, label %74, label %72

72:                                               ; preds = %66
  tail call void @_ZdaPv(i8* %67) #8
  %73 = load i64, i64* %25, align 8
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64 [ %73, %72 ], [ %35, %66 ]
  store i8* %53, i8** %28, align 8
  store i64 %45, i64* %26, align 8
  br label %76

76:                                               ; preds = %31, %38, %74
  %77 = phi i64 [ %75, %74 ], [ -1, %38 ], [ %35, %31 ]
  %78 = load i32, i32* %34, align 4
  %79 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %27, align 8
  %80 = add i64 %77, 1
  store i64 %80, i64* %25, align 8
  %81 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %79, i64 %77, i32 0, i32 0
  store i32 %78, i32* %81, align 4
  %82 = icmp ult i64 %33, %30
  br i1 %82, label %31, label %83

83:                                               ; preds = %76, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseDecorateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPN3spv10DecorationEPNS_10FastVectorINS3_INS0_20LiteralIntegerHelperEEELm8ENSt3__15arrayISC_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %2, align 4
  %11 = icmp ne %"class.angle::FastVector.1"* %3, null
  %12 = icmp ugt i32 %5, 262143
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %74

14:                                               ; preds = %4
  %15 = lshr i32 %5, 16
  %16 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %3, i64 0, i32 2
  %17 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %3, i64 0, i32 3
  %18 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %3, i64 0, i32 1
  %19 = bitcast %"class.angle::spirv::BoxedUint32.0"** %18 to i8**
  %20 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %3, i64 0, i32 0, i32 0, i64 0
  %21 = zext i32 %15 to i64
  br label %22

22:                                               ; preds = %14, %67
  %23 = phi i64 [ 3, %14 ], [ %24, %67 ]
  %24 = add nuw nsw i64 %23, 1
  %25 = getelementptr inbounds i32, i32* %0, i64 %23
  %26 = load i64, i64* %16, align 8
  %27 = load i64, i64* %17, align 8
  %28 = icmp eq i64 %26, %27
  br i1 %28, label %29, label %67

29:                                               ; preds = %22
  %30 = add i64 %26, 1
  %31 = icmp eq i64 %26, -1
  br i1 %31, label %67, label %32

32:                                               ; preds = %29
  %33 = icmp ugt i64 %26, 8
  %34 = select i1 %33, i64 %26, i64 8
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi i64 [ %34, %32 ], [ %38, %35 ]
  %37 = icmp ult i64 %36, %30
  %38 = shl i64 %36, 1
  br i1 %37, label %35, label %39

39:                                               ; preds = %35
  %40 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %36, i64 4) #7
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 -1, i64 %42
  %44 = tail call i8* @_Znam(i64 %43) #8
  %45 = icmp eq i64 %36, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %39
  %47 = shl nsw i64 %36, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %44, i8 0, i64 %47, i1 false) #7
  br label %48

48:                                               ; preds = %46, %39
  %49 = icmp eq i64 %26, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %18, align 8
  %52 = bitcast %"class.angle::spirv::BoxedUint32.0"* %51 to i8*
  br label %57

53:                                               ; preds = %48
  %54 = shl nuw i64 %26, 2
  %55 = load i8*, i8** %19, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* align 4 %55, i64 %54, i1 false) #7
  %56 = bitcast i8* %55 to %"class.angle::spirv::BoxedUint32.0"*
  br label %57

57:                                               ; preds = %53, %50
  %58 = phi i8* [ %52, %50 ], [ %55, %53 ]
  %59 = phi %"class.angle::spirv::BoxedUint32.0"* [ %51, %50 ], [ %56, %53 ]
  %60 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %59, %20
  %61 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %59, null
  %62 = or i1 %60, %61
  br i1 %62, label %65, label %63

63:                                               ; preds = %57
  tail call void @_ZdaPv(i8* %58) #8
  %64 = load i64, i64* %16, align 8
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64 [ %64, %63 ], [ %26, %57 ]
  store i8* %44, i8** %19, align 8
  store i64 %36, i64* %17, align 8
  br label %67

67:                                               ; preds = %22, %29, %65
  %68 = phi i64 [ %66, %65 ], [ -1, %29 ], [ %26, %22 ]
  %69 = load i32, i32* %25, align 4
  %70 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %18, align 8
  %71 = add i64 %68, 1
  store i64 %71, i64* %16, align 8
  %72 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %70, i64 %68, i32 0, i32 0
  store i32 %69, i32* %72, align 4
  %73 = icmp ult i64 %24, %21
  br i1 %73, label %22, label %74

74:                                               ; preds = %67, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseMemberDecorateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS3_INS0_20LiteralIntegerHelperEEEPN3spv10DecorationEPNS_10FastVectorIS8_Lm8ENSt3__15arrayIS8_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32.0"* nocapture, i32* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %3, align 4
  %15 = icmp ne %"class.angle::FastVector.1"* %4, null
  %16 = icmp ugt i32 %6, 327679
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %78

18:                                               ; preds = %5
  %19 = lshr i32 %6, 16
  %20 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 2
  %21 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 3
  %22 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 1
  %23 = bitcast %"class.angle::spirv::BoxedUint32.0"** %22 to i8**
  %24 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 0, i32 0, i64 0
  %25 = zext i32 %19 to i64
  br label %26

26:                                               ; preds = %18, %71
  %27 = phi i64 [ 4, %18 ], [ %28, %71 ]
  %28 = add nuw nsw i64 %27, 1
  %29 = getelementptr inbounds i32, i32* %0, i64 %27
  %30 = load i64, i64* %20, align 8
  %31 = load i64, i64* %21, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %71

33:                                               ; preds = %26
  %34 = add i64 %30, 1
  %35 = icmp eq i64 %30, -1
  br i1 %35, label %71, label %36

36:                                               ; preds = %33
  %37 = icmp ugt i64 %30, 8
  %38 = select i1 %37, i64 %30, i64 8
  br label %39

39:                                               ; preds = %39, %36
  %40 = phi i64 [ %38, %36 ], [ %42, %39 ]
  %41 = icmp ult i64 %40, %34
  %42 = shl i64 %40, 1
  br i1 %41, label %39, label %43

43:                                               ; preds = %39
  %44 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 4) #7
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = tail call i8* @_Znam(i64 %47) #8
  %49 = icmp eq i64 %40, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %43
  %51 = shl nsw i64 %40, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %48, i8 0, i64 %51, i1 false) #7
  br label %52

52:                                               ; preds = %50, %43
  %53 = icmp eq i64 %30, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %22, align 8
  %56 = bitcast %"class.angle::spirv::BoxedUint32.0"* %55 to i8*
  br label %61

57:                                               ; preds = %52
  %58 = shl nuw i64 %30, 2
  %59 = load i8*, i8** %23, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 4 %59, i64 %58, i1 false) #7
  %60 = bitcast i8* %59 to %"class.angle::spirv::BoxedUint32.0"*
  br label %61

61:                                               ; preds = %57, %54
  %62 = phi i8* [ %56, %54 ], [ %59, %57 ]
  %63 = phi %"class.angle::spirv::BoxedUint32.0"* [ %55, %54 ], [ %60, %57 ]
  %64 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %63, %24
  %65 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %63, null
  %66 = or i1 %64, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  tail call void @_ZdaPv(i8* %62) #8
  %68 = load i64, i64* %20, align 8
  br label %69

69:                                               ; preds = %67, %61
  %70 = phi i64 [ %68, %67 ], [ %30, %61 ]
  store i8* %48, i8** %23, align 8
  store i64 %40, i64* %21, align 8
  br label %71

71:                                               ; preds = %26, %33, %69
  %72 = phi i64 [ %70, %69 ], [ -1, %33 ], [ %30, %26 ]
  %73 = load i32, i32* %29, align 4
  %74 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %22, align 8
  %75 = add i64 %72, 1
  store i64 %75, i64* %20, align 8
  %76 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %74, i64 %72, i32 0, i32 0
  store i32 %73, i32* %76, align 4
  %77 = icmp ult i64 %28, %25
  br i1 %77, label %26, label %78

78:                                               ; preds = %71, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseDecorationGroupEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseGroupDecorateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %4 = load i32, i32* %0, align 4
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = icmp ne %"class.angle::FastVector"* %2, null
  %9 = icmp ugt i32 %4, 196607
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %71

11:                                               ; preds = %3
  %12 = lshr i32 %4, 16
  %13 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 2
  %14 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 3
  %15 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 1
  %16 = bitcast %"class.angle::spirv::BoxedUint32"** %15 to i8**
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %2, i64 0, i32 0, i32 0, i64 0
  %18 = zext i32 %12 to i64
  br label %19

19:                                               ; preds = %11, %64
  %20 = phi i64 [ 2, %11 ], [ %21, %64 ]
  %21 = add nuw nsw i64 %20, 1
  %22 = getelementptr inbounds i32, i32* %0, i64 %20
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %14, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %26, label %64

26:                                               ; preds = %19
  %27 = add i64 %23, 1
  %28 = icmp eq i64 %23, -1
  br i1 %28, label %64, label %29

29:                                               ; preds = %26
  %30 = icmp ugt i64 %23, 8
  %31 = select i1 %30, i64 %23, i64 8
  br label %32

32:                                               ; preds = %32, %29
  %33 = phi i64 [ %31, %29 ], [ %35, %32 ]
  %34 = icmp ult i64 %33, %27
  %35 = shl i64 %33, 1
  br i1 %34, label %32, label %36

36:                                               ; preds = %32
  %37 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 4) #7
  %38 = extractvalue { i64, i1 } %37, 1
  %39 = extractvalue { i64, i1 } %37, 0
  %40 = select i1 %38, i64 -1, i64 %39
  %41 = tail call i8* @_Znam(i64 %40) #8
  %42 = icmp eq i64 %33, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = shl nsw i64 %33, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %41, i8 0, i64 %44, i1 false) #7
  br label %45

45:                                               ; preds = %43, %36
  %46 = icmp eq i64 %23, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %45
  %48 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %49 = bitcast %"class.angle::spirv::BoxedUint32"* %48 to i8*
  br label %54

50:                                               ; preds = %45
  %51 = shl nuw i64 %23, 2
  %52 = load i8*, i8** %16, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %52, i64 %51, i1 false) #7
  %53 = bitcast i8* %52 to %"class.angle::spirv::BoxedUint32"*
  br label %54

54:                                               ; preds = %50, %47
  %55 = phi i8* [ %49, %47 ], [ %52, %50 ]
  %56 = phi %"class.angle::spirv::BoxedUint32"* [ %48, %47 ], [ %53, %50 ]
  %57 = icmp eq %"class.angle::spirv::BoxedUint32"* %56, %17
  %58 = icmp eq %"class.angle::spirv::BoxedUint32"* %56, null
  %59 = or i1 %57, %58
  br i1 %59, label %62, label %60

60:                                               ; preds = %54
  tail call void @_ZdaPv(i8* %55) #8
  %61 = load i64, i64* %13, align 8
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i64 [ %61, %60 ], [ %23, %54 ]
  store i8* %41, i8** %16, align 8
  store i64 %33, i64* %14, align 8
  br label %64

64:                                               ; preds = %19, %26, %62
  %65 = phi i64 [ %63, %62 ], [ -1, %26 ], [ %23, %19 ]
  %66 = load i32, i32* %22, align 4
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %15, align 8
  %68 = add i64 %65, 1
  store i64 %68, i64* %13, align 8
  %69 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %67, i64 %65, i32 0, i32 0
  store i32 %66, i32* %69, align 4
  %70 = icmp ult i64 %21, %18
  br i1 %70, label %19, label %71

71:                                               ; preds = %64, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv24ParseGroupMemberDecorateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPNS_10FastVectorINS0_23PairIdRefLiteralIntegerELm8ENSt3__15arrayIS8_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.3"*) local_unnamed_addr #1 {
  %4 = load i32, i32* %0, align 4
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = icmp ne %"class.angle::FastVector.3"* %2, null
  %9 = icmp ugt i32 %4, 196607
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %79

11:                                               ; preds = %3
  %12 = lshr i32 %4, 16
  %13 = getelementptr inbounds %"class.angle::FastVector.3", %"class.angle::FastVector.3"* %2, i64 0, i32 2
  %14 = getelementptr inbounds %"class.angle::FastVector.3", %"class.angle::FastVector.3"* %2, i64 0, i32 3
  %15 = getelementptr inbounds %"class.angle::FastVector.3", %"class.angle::FastVector.3"* %2, i64 0, i32 1
  %16 = bitcast %"struct.angle::spirv::PairIdRefLiteralInteger"** %15 to i8**
  %17 = getelementptr inbounds %"class.angle::FastVector.3", %"class.angle::FastVector.3"* %2, i64 0, i32 0, i32 0, i64 0
  %18 = zext i32 %12 to i64
  br label %19

19:                                               ; preds = %11, %67
  %20 = phi i64 [ 2, %11 ], [ %77, %67 ]
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = or i64 %20, 1
  %24 = getelementptr inbounds i32, i32* %0, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = load i64, i64* %13, align 8
  %27 = load i64, i64* %14, align 8
  %28 = icmp eq i64 %26, %27
  br i1 %28, label %29, label %67

29:                                               ; preds = %19
  %30 = add i64 %26, 1
  %31 = icmp eq i64 %26, -1
  br i1 %31, label %67, label %32

32:                                               ; preds = %29
  %33 = icmp ugt i64 %26, 8
  %34 = select i1 %33, i64 %26, i64 8
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi i64 [ %34, %32 ], [ %38, %35 ]
  %37 = icmp ult i64 %36, %30
  %38 = shl i64 %36, 1
  br i1 %37, label %35, label %39

39:                                               ; preds = %35
  %40 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %36, i64 8) #7
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 -1, i64 %42
  %44 = tail call i8* @_Znam(i64 %43) #8
  %45 = icmp eq i64 %36, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %39
  %47 = shl nsw i64 %36, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %44, i8 0, i64 %47, i1 false) #7
  br label %48

48:                                               ; preds = %46, %39
  %49 = icmp eq i64 %26, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = load %"struct.angle::spirv::PairIdRefLiteralInteger"*, %"struct.angle::spirv::PairIdRefLiteralInteger"** %15, align 8
  %52 = bitcast %"struct.angle::spirv::PairIdRefLiteralInteger"* %51 to i8*
  br label %57

53:                                               ; preds = %48
  %54 = shl nuw i64 %26, 3
  %55 = load i8*, i8** %16, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* align 4 %55, i64 %54, i1 false) #7
  %56 = bitcast i8* %55 to %"struct.angle::spirv::PairIdRefLiteralInteger"*
  br label %57

57:                                               ; preds = %53, %50
  %58 = phi i8* [ %52, %50 ], [ %55, %53 ]
  %59 = phi %"struct.angle::spirv::PairIdRefLiteralInteger"* [ %51, %50 ], [ %56, %53 ]
  %60 = icmp eq %"struct.angle::spirv::PairIdRefLiteralInteger"* %59, %17
  %61 = icmp eq %"struct.angle::spirv::PairIdRefLiteralInteger"* %59, null
  %62 = or i1 %60, %61
  br i1 %62, label %65, label %63

63:                                               ; preds = %57
  tail call void @_ZdaPv(i8* %58) #8
  %64 = load i64, i64* %13, align 8
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64 [ %64, %63 ], [ %26, %57 ]
  store i8* %44, i8** %16, align 8
  store i64 %36, i64* %14, align 8
  br label %67

67:                                               ; preds = %19, %29, %65
  %68 = phi i64 [ %66, %65 ], [ -1, %29 ], [ %26, %19 ]
  %69 = zext i32 %25 to i64
  %70 = shl nuw i64 %69, 32
  %71 = zext i32 %22 to i64
  %72 = or i64 %70, %71
  %73 = load %"struct.angle::spirv::PairIdRefLiteralInteger"*, %"struct.angle::spirv::PairIdRefLiteralInteger"** %15, align 8
  %74 = add i64 %68, 1
  store i64 %74, i64* %13, align 8
  %75 = getelementptr inbounds %"struct.angle::spirv::PairIdRefLiteralInteger", %"struct.angle::spirv::PairIdRefLiteralInteger"* %73, i64 %68
  %76 = bitcast %"struct.angle::spirv::PairIdRefLiteralInteger"* %75 to i64*
  store i64 %72, i64* %76, align 4
  %77 = add nuw nsw i64 %20, 2
  %78 = icmp ult i64 %77, %18
  br i1 %78, label %19, label %79

79:                                               ; preds = %67, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv25ParseVectorExtractDynamicEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv24ParseVectorInsertDynamicEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseVectorShuffleEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PNS_10FastVectorINS3_INS0_20LiteralIntegerHelperEEELm8ENSt3__15arrayIS9_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = icmp ne %"class.angle::FastVector.1"* %5, null
  %21 = icmp ugt i32 %7, 393215
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %83

23:                                               ; preds = %6
  %24 = lshr i32 %7, 16
  %25 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 2
  %26 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 3
  %27 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 1
  %28 = bitcast %"class.angle::spirv::BoxedUint32.0"** %27 to i8**
  %29 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 0, i32 0, i64 0
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %23, %76
  %32 = phi i64 [ 5, %23 ], [ %33, %76 ]
  %33 = add nuw nsw i64 %32, 1
  %34 = getelementptr inbounds i32, i32* %0, i64 %32
  %35 = load i64, i64* %25, align 8
  %36 = load i64, i64* %26, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %76

38:                                               ; preds = %31
  %39 = add i64 %35, 1
  %40 = icmp eq i64 %35, -1
  br i1 %40, label %76, label %41

41:                                               ; preds = %38
  %42 = icmp ugt i64 %35, 8
  %43 = select i1 %42, i64 %35, i64 8
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %43, %41 ], [ %47, %44 ]
  %46 = icmp ult i64 %45, %39
  %47 = shl i64 %45, 1
  br i1 %46, label %44, label %48

48:                                               ; preds = %44
  %49 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 4) #7
  %50 = extractvalue { i64, i1 } %49, 1
  %51 = extractvalue { i64, i1 } %49, 0
  %52 = select i1 %50, i64 -1, i64 %51
  %53 = tail call i8* @_Znam(i64 %52) #8
  %54 = icmp eq i64 %45, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %48
  %56 = shl nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 0, i64 %56, i1 false) #7
  br label %57

57:                                               ; preds = %55, %48
  %58 = icmp eq i64 %35, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %27, align 8
  %61 = bitcast %"class.angle::spirv::BoxedUint32.0"* %60 to i8*
  br label %66

62:                                               ; preds = %57
  %63 = shl nuw i64 %35, 2
  %64 = load i8*, i8** %28, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 %64, i64 %63, i1 false) #7
  %65 = bitcast i8* %64 to %"class.angle::spirv::BoxedUint32.0"*
  br label %66

66:                                               ; preds = %62, %59
  %67 = phi i8* [ %61, %59 ], [ %64, %62 ]
  %68 = phi %"class.angle::spirv::BoxedUint32.0"* [ %60, %59 ], [ %65, %62 ]
  %69 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %68, %29
  %70 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %68, null
  %71 = or i1 %69, %70
  br i1 %71, label %74, label %72

72:                                               ; preds = %66
  tail call void @_ZdaPv(i8* %67) #8
  %73 = load i64, i64* %25, align 8
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64 [ %73, %72 ], [ %35, %66 ]
  store i8* %53, i8** %28, align 8
  store i64 %45, i64* %26, align 8
  br label %76

76:                                               ; preds = %31, %38, %74
  %77 = phi i64 [ %75, %74 ], [ -1, %38 ], [ %35, %31 ]
  %78 = load i32, i32* %34, align 4
  %79 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %27, align 8
  %80 = add i64 %77, 1
  store i64 %80, i64* %25, align 8
  %81 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %79, i64 %77, i32 0, i32 0
  store i32 %78, i32* %81, align 4
  %82 = icmp ult i64 %33, %30
  br i1 %82, label %31, label %83

83:                                               ; preds = %76, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv23ParseCompositeConstructEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %75

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 1
  %20 = bitcast %"class.angle::spirv::BoxedUint32"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %68
  %24 = phi i64 [ 3, %15 ], [ %25, %68 ]
  %25 = add nuw nsw i64 %24, 1
  %26 = getelementptr inbounds i32, i32* %0, i64 %24
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %18, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %68

30:                                               ; preds = %23
  %31 = add i64 %27, 1
  %32 = icmp eq i64 %27, -1
  br i1 %32, label %68, label %33

33:                                               ; preds = %30
  %34 = icmp ugt i64 %27, 8
  %35 = select i1 %34, i64 %27, i64 8
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %35, %33 ], [ %39, %36 ]
  %38 = icmp ult i64 %37, %31
  %39 = shl i64 %37, 1
  br i1 %38, label %36, label %40

40:                                               ; preds = %36
  %41 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %37, i64 4) #7
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 -1, i64 %43
  %45 = tail call i8* @_Znam(i64 %44) #8
  %46 = icmp eq i64 %37, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %40
  %48 = shl nsw i64 %37, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 0, i64 %48, i1 false) #7
  br label %49

49:                                               ; preds = %47, %40
  %50 = icmp eq i64 %27, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %49
  %52 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %53 = bitcast %"class.angle::spirv::BoxedUint32"* %52 to i8*
  br label %58

54:                                               ; preds = %49
  %55 = shl nuw i64 %27, 2
  %56 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %56, i64 %55, i1 false) #7
  %57 = bitcast i8* %56 to %"class.angle::spirv::BoxedUint32"*
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i8* [ %53, %51 ], [ %56, %54 ]
  %60 = phi %"class.angle::spirv::BoxedUint32"* [ %52, %51 ], [ %57, %54 ]
  %61 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, %21
  %62 = icmp eq %"class.angle::spirv::BoxedUint32"* %60, null
  %63 = or i1 %61, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58
  tail call void @_ZdaPv(i8* %59) #8
  %65 = load i64, i64* %17, align 8
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i64 [ %65, %64 ], [ %27, %58 ]
  store i8* %45, i8** %20, align 8
  store i64 %37, i64* %18, align 8
  br label %68

68:                                               ; preds = %23, %30, %66
  %69 = phi i64 [ %67, %66 ], [ -1, %30 ], [ %27, %23 ]
  %70 = load i32, i32* %26, align 4
  %71 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %19, align 8
  %72 = add i64 %69, 1
  store i64 %72, i64* %17, align 8
  %73 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %71, i64 %69, i32 0, i32 0
  store i32 %70, i32* %73, align 4
  %74 = icmp ult i64 %25, %22
  br i1 %74, label %23, label %75

75:                                               ; preds = %68, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseCompositeExtractEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS_10FastVectorINS3_INS0_20LiteralIntegerHelperEEELm8ENSt3__15arrayIS9_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne %"class.angle::FastVector.1"* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %79

19:                                               ; preds = %5
  %20 = lshr i32 %6, 16
  %21 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 1
  %24 = bitcast %"class.angle::spirv::BoxedUint32.0"** %23 to i8**
  %25 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 0, i32 0, i64 0
  %26 = zext i32 %20 to i64
  br label %27

27:                                               ; preds = %19, %72
  %28 = phi i64 [ 4, %19 ], [ %29, %72 ]
  %29 = add nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %0, i64 %28
  %31 = load i64, i64* %21, align 8
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %27
  %35 = add i64 %31, 1
  %36 = icmp eq i64 %31, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i64 %31, 8
  %39 = select i1 %38, i64 %31, i64 8
  br label %40

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %42 = icmp ult i64 %41, %35
  %43 = shl i64 %41, 1
  br i1 %42, label %40, label %44

44:                                               ; preds = %40
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %41, i64 4) #7
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call i8* @_Znam(i64 %48) #8
  %50 = icmp eq i64 %41, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %52, i1 false) #7
  br label %53

53:                                               ; preds = %51, %44
  %54 = icmp eq i64 %31, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %23, align 8
  %57 = bitcast %"class.angle::spirv::BoxedUint32.0"* %56 to i8*
  br label %62

58:                                               ; preds = %53
  %59 = shl nuw i64 %31, 2
  %60 = load i8*, i8** %24, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %60, i64 %59, i1 false) #7
  %61 = bitcast i8* %60 to %"class.angle::spirv::BoxedUint32.0"*
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i8* [ %57, %55 ], [ %60, %58 ]
  %64 = phi %"class.angle::spirv::BoxedUint32.0"* [ %56, %55 ], [ %61, %58 ]
  %65 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %64, %25
  %66 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @_ZdaPv(i8* %63) #8
  %69 = load i64, i64* %21, align 8
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i64 [ %69, %68 ], [ %31, %62 ]
  store i8* %49, i8** %24, align 8
  store i64 %41, i64* %22, align 8
  br label %72

72:                                               ; preds = %27, %34, %70
  %73 = phi i64 [ %71, %70 ], [ -1, %34 ], [ %31, %27 ]
  %74 = load i32, i32* %30, align 4
  %75 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %23, align 8
  %76 = add i64 %73, 1
  store i64 %76, i64* %21, align 8
  %77 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %75, i64 %73, i32 0, i32 0
  store i32 %74, i32* %77, align 4
  %78 = icmp ult i64 %29, %26
  br i1 %78, label %27, label %79

79:                                               ; preds = %72, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseCompositeInsertEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PNS_10FastVectorINS3_INS0_20LiteralIntegerHelperEEELm8ENSt3__15arrayIS9_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = icmp ne %"class.angle::FastVector.1"* %5, null
  %21 = icmp ugt i32 %7, 393215
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %83

23:                                               ; preds = %6
  %24 = lshr i32 %7, 16
  %25 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 2
  %26 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 3
  %27 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 1
  %28 = bitcast %"class.angle::spirv::BoxedUint32.0"** %27 to i8**
  %29 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %5, i64 0, i32 0, i32 0, i64 0
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %23, %76
  %32 = phi i64 [ 5, %23 ], [ %33, %76 ]
  %33 = add nuw nsw i64 %32, 1
  %34 = getelementptr inbounds i32, i32* %0, i64 %32
  %35 = load i64, i64* %25, align 8
  %36 = load i64, i64* %26, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %76

38:                                               ; preds = %31
  %39 = add i64 %35, 1
  %40 = icmp eq i64 %35, -1
  br i1 %40, label %76, label %41

41:                                               ; preds = %38
  %42 = icmp ugt i64 %35, 8
  %43 = select i1 %42, i64 %35, i64 8
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %43, %41 ], [ %47, %44 ]
  %46 = icmp ult i64 %45, %39
  %47 = shl i64 %45, 1
  br i1 %46, label %44, label %48

48:                                               ; preds = %44
  %49 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 4) #7
  %50 = extractvalue { i64, i1 } %49, 1
  %51 = extractvalue { i64, i1 } %49, 0
  %52 = select i1 %50, i64 -1, i64 %51
  %53 = tail call i8* @_Znam(i64 %52) #8
  %54 = icmp eq i64 %45, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %48
  %56 = shl nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 0, i64 %56, i1 false) #7
  br label %57

57:                                               ; preds = %55, %48
  %58 = icmp eq i64 %35, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %27, align 8
  %61 = bitcast %"class.angle::spirv::BoxedUint32.0"* %60 to i8*
  br label %66

62:                                               ; preds = %57
  %63 = shl nuw i64 %35, 2
  %64 = load i8*, i8** %28, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 %64, i64 %63, i1 false) #7
  %65 = bitcast i8* %64 to %"class.angle::spirv::BoxedUint32.0"*
  br label %66

66:                                               ; preds = %62, %59
  %67 = phi i8* [ %61, %59 ], [ %64, %62 ]
  %68 = phi %"class.angle::spirv::BoxedUint32.0"* [ %60, %59 ], [ %65, %62 ]
  %69 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %68, %29
  %70 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %68, null
  %71 = or i1 %69, %70
  br i1 %71, label %74, label %72

72:                                               ; preds = %66
  tail call void @_ZdaPv(i8* %67) #8
  %73 = load i64, i64* %25, align 8
  br label %74

74:                                               ; preds = %72, %66
  %75 = phi i64 [ %73, %72 ], [ %35, %66 ]
  store i8* %53, i8** %28, align 8
  store i64 %45, i64* %26, align 8
  br label %76

76:                                               ; preds = %31, %38, %74
  %77 = phi i64 [ %75, %74 ], [ -1, %38 ], [ %35, %31 ]
  %78 = load i32, i32* %34, align 4
  %79 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %27, align 8
  %80 = add i64 %77, 1
  store i64 %80, i64* %25, align 8
  %81 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %79, i64 %77, i32 0, i32 0
  store i32 %78, i32* %81, align 4
  %82 = icmp ult i64 %33, %30
  br i1 %82, label %31, label %83

83:                                               ; preds = %76, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseCopyObjectEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseTransposeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseSampledImageEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseImageSampleImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseImageSampleExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 5
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %5, align 4
  %23 = icmp ne %"class.angle::FastVector"* %6, null
  %24 = icmp ugt i32 %8, 458751
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %86

26:                                               ; preds = %7
  %27 = lshr i32 %8, 16
  %28 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %30 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %31 = bitcast %"class.angle::spirv::BoxedUint32"** %30 to i8**
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %33 = zext i32 %27 to i64
  br label %34

34:                                               ; preds = %26, %79
  %35 = phi i64 [ 6, %26 ], [ %36, %79 ]
  %36 = add nuw nsw i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %0, i64 %35
  %38 = load i64, i64* %28, align 8
  %39 = load i64, i64* %29, align 8
  %40 = icmp eq i64 %38, %39
  br i1 %40, label %41, label %79

41:                                               ; preds = %34
  %42 = add i64 %38, 1
  %43 = icmp eq i64 %38, -1
  br i1 %43, label %79, label %44

44:                                               ; preds = %41
  %45 = icmp ugt i64 %38, 8
  %46 = select i1 %45, i64 %38, i64 8
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %46, %44 ], [ %50, %47 ]
  %49 = icmp ult i64 %48, %42
  %50 = shl i64 %48, 1
  br i1 %49, label %47, label %51

51:                                               ; preds = %47
  %52 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %48, i64 4) #7
  %53 = extractvalue { i64, i1 } %52, 1
  %54 = extractvalue { i64, i1 } %52, 0
  %55 = select i1 %53, i64 -1, i64 %54
  %56 = tail call i8* @_Znam(i64 %55) #8
  %57 = icmp eq i64 %48, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %51
  %59 = shl nsw i64 %48, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %56, i8 0, i64 %59, i1 false) #7
  br label %60

60:                                               ; preds = %58, %51
  %61 = icmp eq i64 %38, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %64 = bitcast %"class.angle::spirv::BoxedUint32"* %63 to i8*
  br label %69

65:                                               ; preds = %60
  %66 = shl nuw i64 %38, 2
  %67 = load i8*, i8** %31, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %56, i8* align 4 %67, i64 %66, i1 false) #7
  %68 = bitcast i8* %67 to %"class.angle::spirv::BoxedUint32"*
  br label %69

69:                                               ; preds = %65, %62
  %70 = phi i8* [ %64, %62 ], [ %67, %65 ]
  %71 = phi %"class.angle::spirv::BoxedUint32"* [ %63, %62 ], [ %68, %65 ]
  %72 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, %32
  %73 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, null
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  tail call void @_ZdaPv(i8* %70) #8
  %76 = load i64, i64* %28, align 8
  br label %77

77:                                               ; preds = %75, %69
  %78 = phi i64 [ %76, %75 ], [ %38, %69 ]
  store i8* %56, i8** %31, align 8
  store i64 %48, i64* %29, align 8
  br label %79

79:                                               ; preds = %34, %41, %77
  %80 = phi i64 [ %78, %77 ], [ -1, %41 ], [ %38, %34 ]
  %81 = load i32, i32* %37, align 4
  %82 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %83 = add i64 %80, 1
  store i64 %83, i64* %28, align 8
  %84 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %82, i64 %80, i32 0, i32 0
  store i32 %81, i32* %84, align 4
  %85 = icmp ult i64 %36, %33
  br i1 %85, label %34, label %86

86:                                               ; preds = %79, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv31ParseImageSampleDrefImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv31ParseImageSampleDrefExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 6
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %6, align 4
  %27 = icmp ne %"class.angle::FastVector"* %7, null
  %28 = icmp ugt i32 %9, 524287
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %90

30:                                               ; preds = %8
  %31 = lshr i32 %9, 16
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %33 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %35 = bitcast %"class.angle::spirv::BoxedUint32"** %34 to i8**
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %37 = zext i32 %31 to i64
  br label %38

38:                                               ; preds = %30, %83
  %39 = phi i64 [ 7, %30 ], [ %40, %83 ]
  %40 = add nuw nsw i64 %39, 1
  %41 = getelementptr inbounds i32, i32* %0, i64 %39
  %42 = load i64, i64* %32, align 8
  %43 = load i64, i64* %33, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %83

45:                                               ; preds = %38
  %46 = add i64 %42, 1
  %47 = icmp eq i64 %42, -1
  br i1 %47, label %83, label %48

48:                                               ; preds = %45
  %49 = icmp ugt i64 %42, 8
  %50 = select i1 %49, i64 %42, i64 8
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i64 [ %50, %48 ], [ %54, %51 ]
  %53 = icmp ult i64 %52, %46
  %54 = shl i64 %52, 1
  br i1 %53, label %51, label %55

55:                                               ; preds = %51
  %56 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %52, i64 4) #7
  %57 = extractvalue { i64, i1 } %56, 1
  %58 = extractvalue { i64, i1 } %56, 0
  %59 = select i1 %57, i64 -1, i64 %58
  %60 = tail call i8* @_Znam(i64 %59) #8
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %55
  %63 = shl nsw i64 %52, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %63, i1 false) #7
  br label %64

64:                                               ; preds = %62, %55
  %65 = icmp eq i64 %42, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %68 = bitcast %"class.angle::spirv::BoxedUint32"* %67 to i8*
  br label %73

69:                                               ; preds = %64
  %70 = shl nuw i64 %42, 2
  %71 = load i8*, i8** %35, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %71, i64 %70, i1 false) #7
  %72 = bitcast i8* %71 to %"class.angle::spirv::BoxedUint32"*
  br label %73

73:                                               ; preds = %69, %66
  %74 = phi i8* [ %68, %66 ], [ %71, %69 ]
  %75 = phi %"class.angle::spirv::BoxedUint32"* [ %67, %66 ], [ %72, %69 ]
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, %36
  %77 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, null
  %78 = or i1 %76, %77
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  tail call void @_ZdaPv(i8* %74) #8
  %80 = load i64, i64* %32, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64 [ %80, %79 ], [ %42, %73 ]
  store i8* %60, i8** %35, align 8
  store i64 %52, i64* %33, align 8
  br label %83

83:                                               ; preds = %38, %45, %81
  %84 = phi i64 [ %82, %81 ], [ -1, %45 ], [ %42, %38 ]
  %85 = load i32, i32* %41, align 4
  %86 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %87 = add i64 %84, 1
  store i64 %87, i64* %32, align 8
  %88 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %86, i64 %84, i32 0, i32 0
  store i32 %85, i32* %88, align 4
  %89 = icmp ult i64 %40, %37
  br i1 %89, label %38, label %90

90:                                               ; preds = %83, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv31ParseImageSampleProjImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv31ParseImageSampleProjExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 5
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %5, align 4
  %23 = icmp ne %"class.angle::FastVector"* %6, null
  %24 = icmp ugt i32 %8, 458751
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %86

26:                                               ; preds = %7
  %27 = lshr i32 %8, 16
  %28 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %30 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %31 = bitcast %"class.angle::spirv::BoxedUint32"** %30 to i8**
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %33 = zext i32 %27 to i64
  br label %34

34:                                               ; preds = %26, %79
  %35 = phi i64 [ 6, %26 ], [ %36, %79 ]
  %36 = add nuw nsw i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %0, i64 %35
  %38 = load i64, i64* %28, align 8
  %39 = load i64, i64* %29, align 8
  %40 = icmp eq i64 %38, %39
  br i1 %40, label %41, label %79

41:                                               ; preds = %34
  %42 = add i64 %38, 1
  %43 = icmp eq i64 %38, -1
  br i1 %43, label %79, label %44

44:                                               ; preds = %41
  %45 = icmp ugt i64 %38, 8
  %46 = select i1 %45, i64 %38, i64 8
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %46, %44 ], [ %50, %47 ]
  %49 = icmp ult i64 %48, %42
  %50 = shl i64 %48, 1
  br i1 %49, label %47, label %51

51:                                               ; preds = %47
  %52 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %48, i64 4) #7
  %53 = extractvalue { i64, i1 } %52, 1
  %54 = extractvalue { i64, i1 } %52, 0
  %55 = select i1 %53, i64 -1, i64 %54
  %56 = tail call i8* @_Znam(i64 %55) #8
  %57 = icmp eq i64 %48, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %51
  %59 = shl nsw i64 %48, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %56, i8 0, i64 %59, i1 false) #7
  br label %60

60:                                               ; preds = %58, %51
  %61 = icmp eq i64 %38, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %64 = bitcast %"class.angle::spirv::BoxedUint32"* %63 to i8*
  br label %69

65:                                               ; preds = %60
  %66 = shl nuw i64 %38, 2
  %67 = load i8*, i8** %31, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %56, i8* align 4 %67, i64 %66, i1 false) #7
  %68 = bitcast i8* %67 to %"class.angle::spirv::BoxedUint32"*
  br label %69

69:                                               ; preds = %65, %62
  %70 = phi i8* [ %64, %62 ], [ %67, %65 ]
  %71 = phi %"class.angle::spirv::BoxedUint32"* [ %63, %62 ], [ %68, %65 ]
  %72 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, %32
  %73 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, null
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  tail call void @_ZdaPv(i8* %70) #8
  %76 = load i64, i64* %28, align 8
  br label %77

77:                                               ; preds = %75, %69
  %78 = phi i64 [ %76, %75 ], [ %38, %69 ]
  store i8* %56, i8** %31, align 8
  store i64 %48, i64* %29, align 8
  br label %79

79:                                               ; preds = %34, %41, %77
  %80 = phi i64 [ %78, %77 ], [ -1, %41 ], [ %38, %34 ]
  %81 = load i32, i32* %37, align 4
  %82 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %83 = add i64 %80, 1
  store i64 %83, i64* %28, align 8
  %84 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %82, i64 %80, i32 0, i32 0
  store i32 %81, i32* %84, align 4
  %85 = icmp ult i64 %36, %33
  br i1 %85, label %34, label %86

86:                                               ; preds = %79, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv35ParseImageSampleProjDrefImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv35ParseImageSampleProjDrefExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 6
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %6, align 4
  %27 = icmp ne %"class.angle::FastVector"* %7, null
  %28 = icmp ugt i32 %9, 524287
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %90

30:                                               ; preds = %8
  %31 = lshr i32 %9, 16
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %33 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %35 = bitcast %"class.angle::spirv::BoxedUint32"** %34 to i8**
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %37 = zext i32 %31 to i64
  br label %38

38:                                               ; preds = %30, %83
  %39 = phi i64 [ 7, %30 ], [ %40, %83 ]
  %40 = add nuw nsw i64 %39, 1
  %41 = getelementptr inbounds i32, i32* %0, i64 %39
  %42 = load i64, i64* %32, align 8
  %43 = load i64, i64* %33, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %83

45:                                               ; preds = %38
  %46 = add i64 %42, 1
  %47 = icmp eq i64 %42, -1
  br i1 %47, label %83, label %48

48:                                               ; preds = %45
  %49 = icmp ugt i64 %42, 8
  %50 = select i1 %49, i64 %42, i64 8
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i64 [ %50, %48 ], [ %54, %51 ]
  %53 = icmp ult i64 %52, %46
  %54 = shl i64 %52, 1
  br i1 %53, label %51, label %55

55:                                               ; preds = %51
  %56 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %52, i64 4) #7
  %57 = extractvalue { i64, i1 } %56, 1
  %58 = extractvalue { i64, i1 } %56, 0
  %59 = select i1 %57, i64 -1, i64 %58
  %60 = tail call i8* @_Znam(i64 %59) #8
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %55
  %63 = shl nsw i64 %52, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %63, i1 false) #7
  br label %64

64:                                               ; preds = %62, %55
  %65 = icmp eq i64 %42, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %68 = bitcast %"class.angle::spirv::BoxedUint32"* %67 to i8*
  br label %73

69:                                               ; preds = %64
  %70 = shl nuw i64 %42, 2
  %71 = load i8*, i8** %35, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %71, i64 %70, i1 false) #7
  %72 = bitcast i8* %71 to %"class.angle::spirv::BoxedUint32"*
  br label %73

73:                                               ; preds = %69, %66
  %74 = phi i8* [ %68, %66 ], [ %71, %69 ]
  %75 = phi %"class.angle::spirv::BoxedUint32"* [ %67, %66 ], [ %72, %69 ]
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, %36
  %77 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, null
  %78 = or i1 %76, %77
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  tail call void @_ZdaPv(i8* %74) #8
  %80 = load i64, i64* %32, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64 [ %80, %79 ], [ %42, %73 ]
  store i8* %60, i8** %35, align 8
  store i64 %52, i64* %33, align 8
  br label %83

83:                                               ; preds = %38, %45, %81
  %84 = phi i64 [ %82, %81 ], [ -1, %45 ], [ %42, %38 ]
  %85 = load i32, i32* %41, align 4
  %86 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %87 = add i64 %84, 1
  store i64 %87, i64* %32, align 8
  %88 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %86, i64 %84, i32 0, i32 0
  store i32 %85, i32* %88, align 4
  %89 = icmp ult i64 %40, %37
  br i1 %89, label %38, label %90

90:                                               ; preds = %83, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseImageFetchEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseImageGatherEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseImageDrefGatherEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseImageReadEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseImageWriteEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %7 = load i32, i32* %0, align 4
  %8 = lshr i32 %7, 16
  %9 = getelementptr inbounds i32, i32* %0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = icmp ne i32* %4, null
  %19 = icmp ugt i32 %7, 327679
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %6
  %22 = getelementptr inbounds i32, i32* %0, i64 4
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %4, align 4
  br label %24

24:                                               ; preds = %6, %21
  %25 = phi i32 [ 5, %21 ], [ 4, %6 ]
  %26 = icmp ne %"class.angle::FastVector"* %5, null
  %27 = icmp ult i32 %25, %8
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %89

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 2
  %31 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 3
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 1
  %33 = bitcast %"class.angle::spirv::BoxedUint32"** %32 to i8**
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %5, i64 0, i32 0, i32 0, i64 0
  %35 = zext i32 %25 to i64
  %36 = zext i32 %8 to i64
  br label %37

37:                                               ; preds = %82, %29
  %38 = phi i64 [ %35, %29 ], [ %39, %82 ]
  %39 = add nuw nsw i64 %38, 1
  %40 = getelementptr inbounds i32, i32* %0, i64 %38
  %41 = load i64, i64* %30, align 8
  %42 = load i64, i64* %31, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %82

44:                                               ; preds = %37
  %45 = add i64 %41, 1
  %46 = icmp eq i64 %41, -1
  br i1 %46, label %82, label %47

47:                                               ; preds = %44
  %48 = icmp ugt i64 %41, 8
  %49 = select i1 %48, i64 %41, i64 8
  br label %50

50:                                               ; preds = %50, %47
  %51 = phi i64 [ %49, %47 ], [ %53, %50 ]
  %52 = icmp ult i64 %51, %45
  %53 = shl i64 %51, 1
  br i1 %52, label %50, label %54

54:                                               ; preds = %50
  %55 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %51, i64 4) #7
  %56 = extractvalue { i64, i1 } %55, 1
  %57 = extractvalue { i64, i1 } %55, 0
  %58 = select i1 %56, i64 -1, i64 %57
  %59 = tail call i8* @_Znam(i64 %58) #8
  %60 = icmp eq i64 %51, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %54
  %62 = shl nsw i64 %51, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %59, i8 0, i64 %62, i1 false) #7
  br label %63

63:                                               ; preds = %61, %54
  %64 = icmp eq i64 %41, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %63
  %66 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %32, align 8
  %67 = bitcast %"class.angle::spirv::BoxedUint32"* %66 to i8*
  br label %72

68:                                               ; preds = %63
  %69 = shl nuw i64 %41, 2
  %70 = load i8*, i8** %33, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %59, i8* align 4 %70, i64 %69, i1 false) #7
  %71 = bitcast i8* %70 to %"class.angle::spirv::BoxedUint32"*
  br label %72

72:                                               ; preds = %68, %65
  %73 = phi i8* [ %67, %65 ], [ %70, %68 ]
  %74 = phi %"class.angle::spirv::BoxedUint32"* [ %66, %65 ], [ %71, %68 ]
  %75 = icmp eq %"class.angle::spirv::BoxedUint32"* %74, %34
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %74, null
  %77 = or i1 %75, %76
  br i1 %77, label %80, label %78

78:                                               ; preds = %72
  tail call void @_ZdaPv(i8* %73) #8
  %79 = load i64, i64* %30, align 8
  br label %80

80:                                               ; preds = %78, %72
  %81 = phi i64 [ %79, %78 ], [ %41, %72 ]
  store i8* %59, i8** %33, align 8
  store i64 %51, i64* %31, align 8
  br label %82

82:                                               ; preds = %37, %44, %80
  %83 = phi i64 [ %81, %80 ], [ -1, %44 ], [ %41, %37 ]
  %84 = load i32, i32* %40, align 4
  %85 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %32, align 8
  %86 = add i64 %83, 1
  store i64 %86, i64* %30, align 8
  %87 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %85, i64 %83, i32 0, i32 0
  store i32 %84, i32* %87, align 4
  %88 = icmp eq i64 %39, %36
  br i1 %88, label %89, label %37

89:                                               ; preds = %82, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseImageEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseImageQueryLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseConvertFToUEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseConvertFToSEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseConvertSToFEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseConvertUToFEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseUConvertEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseSConvertEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseFConvertEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseQuantizeToF16EPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseConvertPtrToUEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseConvertUToPtrEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv12ParseBitcastEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv12ParseSNegateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv12ParseFNegateEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseIAddEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFAddEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseISubEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFSubEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseIMulEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFMulEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseUDivEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseSDivEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFDivEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseUModEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseSRemEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseSModEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFRemEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseFModEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseVectorTimesScalarEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseMatrixTimesScalarEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseVectorTimesMatrixEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseMatrixTimesVectorEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseMatrixTimesMatrixEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseOuterProductEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv8ParseDotEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseIAddCarryEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseISubBorrowEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseUMulExtendedEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseSMulExtendedEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv8ParseAnyEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv8ParseAllEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseIsNanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseIsInfEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseLogicalEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseLogicalNotEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseLogicalOrEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseLogicalAndEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseLogicalNotEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseSelectEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseIEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseINotEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseUGreaterThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseSGreaterThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseUGreaterThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseSGreaterThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseULessThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseSLessThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseULessThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseSLessThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseFOrdEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseFUnordEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseFOrdNotEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseFUnordNotEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseFOrdLessThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseFUnordLessThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseFOrdGreaterThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseFUnordGreaterThanEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseFOrdLessThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv24ParseFUnordLessThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv25ParseFOrdGreaterThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseFUnordGreaterThanEqualEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseShiftRightLogicalEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv25ParseShiftRightArithmeticEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseShiftLeftLogicalEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseBitwiseOrEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseBitwiseXorEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseBitwiseAndEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv8ParseNotEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseBitFieldInsertEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseBitFieldSExtractEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseBitFieldUExtractEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseBitReverseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseBitCountEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseDPdxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv9ParseDPdyEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseFwidthEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseDPdxFineEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseDPdyFineEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseFwidthFineEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseDPdxCoarseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseDPdyCoarseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv17ParseFwidthCoarseEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseEmitStreamVertexEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv23ParseEndStreamPrimitiveEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseControlBarrierEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv18ParseMemoryBarrierEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicLoadEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseAtomicStoreEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseAtomicExchangeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv26ParseAtomicCompareExchangeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 6
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds i32, i32* %0, i64 7
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %7, i64 0, i32 0, i32 0
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds i32, i32* %0, i64 8
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %8, i64 0, i32 0, i32 0
  store i32 %32, i32* %33, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseAtomicIIncrementEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseAtomicIDecrementEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicIAddEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicISubEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicSMinEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicUMinEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicSMaxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv15ParseAtomicUMaxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseAtomicAndEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseAtomicOrEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseAtomicXorEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %6, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv8ParsePhiEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorINS0_14PairIdRefIdRefELm8ENSt3__15arrayIS8_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.5"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector.5"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %83

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector.5", %"class.angle::FastVector.5"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector.5", %"class.angle::FastVector.5"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector.5", %"class.angle::FastVector.5"* %3, i64 0, i32 1
  %20 = bitcast %"struct.angle::spirv::PairIdRefIdRef"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector.5", %"class.angle::FastVector.5"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %71
  %24 = phi i64 [ 3, %15 ], [ %81, %71 ]
  %25 = getelementptr inbounds i32, i32* %0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = add nuw nsw i64 %24, 1
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = load i64, i64* %17, align 8
  %31 = load i64, i64* %18, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %71

33:                                               ; preds = %23
  %34 = add i64 %30, 1
  %35 = icmp eq i64 %30, -1
  br i1 %35, label %71, label %36

36:                                               ; preds = %33
  %37 = icmp ugt i64 %30, 8
  %38 = select i1 %37, i64 %30, i64 8
  br label %39

39:                                               ; preds = %39, %36
  %40 = phi i64 [ %38, %36 ], [ %42, %39 ]
  %41 = icmp ult i64 %40, %34
  %42 = shl i64 %40, 1
  br i1 %41, label %39, label %43

43:                                               ; preds = %39
  %44 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 8) #7
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = tail call i8* @_Znam(i64 %47) #8
  %49 = icmp eq i64 %40, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %43
  %51 = shl nsw i64 %40, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %48, i8 0, i64 %51, i1 false) #7
  br label %52

52:                                               ; preds = %50, %43
  %53 = icmp eq i64 %30, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = load %"struct.angle::spirv::PairIdRefIdRef"*, %"struct.angle::spirv::PairIdRefIdRef"** %19, align 8
  %56 = bitcast %"struct.angle::spirv::PairIdRefIdRef"* %55 to i8*
  br label %61

57:                                               ; preds = %52
  %58 = shl nuw i64 %30, 3
  %59 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 4 %59, i64 %58, i1 false) #7
  %60 = bitcast i8* %59 to %"struct.angle::spirv::PairIdRefIdRef"*
  br label %61

61:                                               ; preds = %57, %54
  %62 = phi i8* [ %56, %54 ], [ %59, %57 ]
  %63 = phi %"struct.angle::spirv::PairIdRefIdRef"* [ %55, %54 ], [ %60, %57 ]
  %64 = icmp eq %"struct.angle::spirv::PairIdRefIdRef"* %63, %21
  %65 = icmp eq %"struct.angle::spirv::PairIdRefIdRef"* %63, null
  %66 = or i1 %64, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  tail call void @_ZdaPv(i8* %62) #8
  %68 = load i64, i64* %17, align 8
  br label %69

69:                                               ; preds = %67, %61
  %70 = phi i64 [ %68, %67 ], [ %30, %61 ]
  store i8* %48, i8** %20, align 8
  store i64 %40, i64* %18, align 8
  br label %71

71:                                               ; preds = %23, %33, %69
  %72 = phi i64 [ %70, %69 ], [ -1, %33 ], [ %30, %23 ]
  %73 = zext i32 %29 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %26 to i64
  %76 = or i64 %74, %75
  %77 = load %"struct.angle::spirv::PairIdRefIdRef"*, %"struct.angle::spirv::PairIdRefIdRef"** %19, align 8
  %78 = add i64 %72, 1
  store i64 %78, i64* %17, align 8
  %79 = getelementptr inbounds %"struct.angle::spirv::PairIdRefIdRef", %"struct.angle::spirv::PairIdRefIdRef"* %77, i64 %72
  %80 = bitcast %"struct.angle::spirv::PairIdRefIdRef"* %79 to i64*
  store i64 %76, i64* %80, align 4
  %81 = add nuw nsw i64 %24, 2
  %82 = icmp ult i64 %81, %22
  br i1 %82, label %23, label %83

83:                                               ; preds = %71, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseLoopMergeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PN3spv15LoopControlMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseSelectionMergeEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEEPN3spv20SelectionControlMaskE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv10ParseLabelEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseBranchEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseBranchConditionalEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PNS_10FastVectorINS3_INS0_20LiteralIntegerHelperEEELm8ENSt3__15arrayIS9_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.1"*) local_unnamed_addr #1 {
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = icmp ne %"class.angle::FastVector.1"* %4, null
  %17 = icmp ugt i32 %6, 327679
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %79

19:                                               ; preds = %5
  %20 = lshr i32 %6, 16
  %21 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 3
  %23 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 1
  %24 = bitcast %"class.angle::spirv::BoxedUint32.0"** %23 to i8**
  %25 = getelementptr inbounds %"class.angle::FastVector.1", %"class.angle::FastVector.1"* %4, i64 0, i32 0, i32 0, i64 0
  %26 = zext i32 %20 to i64
  br label %27

27:                                               ; preds = %19, %72
  %28 = phi i64 [ 4, %19 ], [ %29, %72 ]
  %29 = add nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i32, i32* %0, i64 %28
  %31 = load i64, i64* %21, align 8
  %32 = load i64, i64* %22, align 8
  %33 = icmp eq i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %27
  %35 = add i64 %31, 1
  %36 = icmp eq i64 %31, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %34
  %38 = icmp ugt i64 %31, 8
  %39 = select i1 %38, i64 %31, i64 8
  br label %40

40:                                               ; preds = %40, %37
  %41 = phi i64 [ %39, %37 ], [ %43, %40 ]
  %42 = icmp ult i64 %41, %35
  %43 = shl i64 %41, 1
  br i1 %42, label %40, label %44

44:                                               ; preds = %40
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %41, i64 4) #7
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call i8* @_Znam(i64 %48) #8
  %50 = icmp eq i64 %41, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %52, i1 false) #7
  br label %53

53:                                               ; preds = %51, %44
  %54 = icmp eq i64 %31, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %23, align 8
  %57 = bitcast %"class.angle::spirv::BoxedUint32.0"* %56 to i8*
  br label %62

58:                                               ; preds = %53
  %59 = shl nuw i64 %31, 2
  %60 = load i8*, i8** %24, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %60, i64 %59, i1 false) #7
  %61 = bitcast i8* %60 to %"class.angle::spirv::BoxedUint32.0"*
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i8* [ %57, %55 ], [ %60, %58 ]
  %64 = phi %"class.angle::spirv::BoxedUint32.0"* [ %56, %55 ], [ %61, %58 ]
  %65 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %64, %25
  %66 = icmp eq %"class.angle::spirv::BoxedUint32.0"* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  tail call void @_ZdaPv(i8* %63) #8
  %69 = load i64, i64* %21, align 8
  br label %70

70:                                               ; preds = %68, %62
  %71 = phi i64 [ %69, %68 ], [ %31, %62 ]
  store i8* %49, i8** %24, align 8
  store i64 %41, i64* %22, align 8
  br label %72

72:                                               ; preds = %27, %34, %70
  %73 = phi i64 [ %71, %70 ], [ -1, %34 ], [ %31, %27 ]
  %74 = load i32, i32* %30, align 4
  %75 = load %"class.angle::spirv::BoxedUint32.0"*, %"class.angle::spirv::BoxedUint32.0"** %23, align 8
  %76 = add i64 %73, 1
  store i64 %76, i64* %21, align 8
  %77 = getelementptr inbounds %"class.angle::spirv::BoxedUint32.0", %"class.angle::spirv::BoxedUint32.0"* %75, i64 %73, i32 0, i32 0
  store i32 %74, i32* %77, align 4
  %78 = icmp ult i64 %29, %26
  br i1 %78, label %27, label %79

79:                                               ; preds = %72, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv11ParseSwitchEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_PNS_10FastVectorINS0_23PairLiteralIntegerIdRefELm8ENSt3__15arrayIS8_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::FastVector.7"*) local_unnamed_addr #1 {
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = icmp ne %"class.angle::FastVector.7"* %3, null
  %13 = icmp ugt i32 %5, 262143
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %83

15:                                               ; preds = %4
  %16 = lshr i32 %5, 16
  %17 = getelementptr inbounds %"class.angle::FastVector.7", %"class.angle::FastVector.7"* %3, i64 0, i32 2
  %18 = getelementptr inbounds %"class.angle::FastVector.7", %"class.angle::FastVector.7"* %3, i64 0, i32 3
  %19 = getelementptr inbounds %"class.angle::FastVector.7", %"class.angle::FastVector.7"* %3, i64 0, i32 1
  %20 = bitcast %"struct.angle::spirv::PairLiteralIntegerIdRef"** %19 to i8**
  %21 = getelementptr inbounds %"class.angle::FastVector.7", %"class.angle::FastVector.7"* %3, i64 0, i32 0, i32 0, i64 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %15, %71
  %24 = phi i64 [ 3, %15 ], [ %81, %71 ]
  %25 = getelementptr inbounds i32, i32* %0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = add nuw nsw i64 %24, 1
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = load i64, i64* %17, align 8
  %31 = load i64, i64* %18, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %71

33:                                               ; preds = %23
  %34 = add i64 %30, 1
  %35 = icmp eq i64 %30, -1
  br i1 %35, label %71, label %36

36:                                               ; preds = %33
  %37 = icmp ugt i64 %30, 8
  %38 = select i1 %37, i64 %30, i64 8
  br label %39

39:                                               ; preds = %39, %36
  %40 = phi i64 [ %38, %36 ], [ %42, %39 ]
  %41 = icmp ult i64 %40, %34
  %42 = shl i64 %40, 1
  br i1 %41, label %39, label %43

43:                                               ; preds = %39
  %44 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %40, i64 8) #7
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 -1, i64 %46
  %48 = tail call i8* @_Znam(i64 %47) #8
  %49 = icmp eq i64 %40, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %43
  %51 = shl nsw i64 %40, 3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %48, i8 0, i64 %51, i1 false) #7
  br label %52

52:                                               ; preds = %50, %43
  %53 = icmp eq i64 %30, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = load %"struct.angle::spirv::PairLiteralIntegerIdRef"*, %"struct.angle::spirv::PairLiteralIntegerIdRef"** %19, align 8
  %56 = bitcast %"struct.angle::spirv::PairLiteralIntegerIdRef"* %55 to i8*
  br label %61

57:                                               ; preds = %52
  %58 = shl nuw i64 %30, 3
  %59 = load i8*, i8** %20, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 4 %59, i64 %58, i1 false) #7
  %60 = bitcast i8* %59 to %"struct.angle::spirv::PairLiteralIntegerIdRef"*
  br label %61

61:                                               ; preds = %57, %54
  %62 = phi i8* [ %56, %54 ], [ %59, %57 ]
  %63 = phi %"struct.angle::spirv::PairLiteralIntegerIdRef"* [ %55, %54 ], [ %60, %57 ]
  %64 = icmp eq %"struct.angle::spirv::PairLiteralIntegerIdRef"* %63, %21
  %65 = icmp eq %"struct.angle::spirv::PairLiteralIntegerIdRef"* %63, null
  %66 = or i1 %64, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  tail call void @_ZdaPv(i8* %62) #8
  %68 = load i64, i64* %17, align 8
  br label %69

69:                                               ; preds = %67, %61
  %70 = phi i64 [ %68, %67 ], [ %30, %61 ]
  store i8* %48, i8** %20, align 8
  store i64 %40, i64* %18, align 8
  br label %71

71:                                               ; preds = %23, %33, %69
  %72 = phi i64 [ %70, %69 ], [ -1, %33 ], [ %30, %23 ]
  %73 = zext i32 %29 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %26 to i64
  %76 = or i64 %74, %75
  %77 = load %"struct.angle::spirv::PairLiteralIntegerIdRef"*, %"struct.angle::spirv::PairLiteralIntegerIdRef"** %19, align 8
  %78 = add i64 %72, 1
  store i64 %78, i64* %17, align 8
  %79 = getelementptr inbounds %"struct.angle::spirv::PairLiteralIntegerIdRef", %"struct.angle::spirv::PairLiteralIntegerIdRef"* %77, i64 %72
  %80 = bitcast %"struct.angle::spirv::PairLiteralIntegerIdRef"* %79 to i64*
  store i64 %76, i64* %80, align 4
  %81 = add nuw nsw i64 %24, 2
  %82 = icmp ult i64 %81, %22
  br i1 %82, label %23, label %83

83:                                               ; preds = %71, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv16ParseReturnValueEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseGroupAllEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv13ParseGroupAnyEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds i32, i32* %0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv19ParseGroupBroadcastEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupIAddEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupFAddEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupFMinEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupUMinEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupSMinEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupFMaxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupUMaxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv14ParseGroupSMaxEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv33ParseImageSparseSampleImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv33ParseImageSparseSampleExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 5
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %5, align 4
  %23 = icmp ne %"class.angle::FastVector"* %6, null
  %24 = icmp ugt i32 %8, 458751
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %86

26:                                               ; preds = %7
  %27 = lshr i32 %8, 16
  %28 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %30 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %31 = bitcast %"class.angle::spirv::BoxedUint32"** %30 to i8**
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %33 = zext i32 %27 to i64
  br label %34

34:                                               ; preds = %26, %79
  %35 = phi i64 [ 6, %26 ], [ %36, %79 ]
  %36 = add nuw nsw i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %0, i64 %35
  %38 = load i64, i64* %28, align 8
  %39 = load i64, i64* %29, align 8
  %40 = icmp eq i64 %38, %39
  br i1 %40, label %41, label %79

41:                                               ; preds = %34
  %42 = add i64 %38, 1
  %43 = icmp eq i64 %38, -1
  br i1 %43, label %79, label %44

44:                                               ; preds = %41
  %45 = icmp ugt i64 %38, 8
  %46 = select i1 %45, i64 %38, i64 8
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %46, %44 ], [ %50, %47 ]
  %49 = icmp ult i64 %48, %42
  %50 = shl i64 %48, 1
  br i1 %49, label %47, label %51

51:                                               ; preds = %47
  %52 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %48, i64 4) #7
  %53 = extractvalue { i64, i1 } %52, 1
  %54 = extractvalue { i64, i1 } %52, 0
  %55 = select i1 %53, i64 -1, i64 %54
  %56 = tail call i8* @_Znam(i64 %55) #8
  %57 = icmp eq i64 %48, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %51
  %59 = shl nsw i64 %48, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %56, i8 0, i64 %59, i1 false) #7
  br label %60

60:                                               ; preds = %58, %51
  %61 = icmp eq i64 %38, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %64 = bitcast %"class.angle::spirv::BoxedUint32"* %63 to i8*
  br label %69

65:                                               ; preds = %60
  %66 = shl nuw i64 %38, 2
  %67 = load i8*, i8** %31, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %56, i8* align 4 %67, i64 %66, i1 false) #7
  %68 = bitcast i8* %67 to %"class.angle::spirv::BoxedUint32"*
  br label %69

69:                                               ; preds = %65, %62
  %70 = phi i8* [ %64, %62 ], [ %67, %65 ]
  %71 = phi %"class.angle::spirv::BoxedUint32"* [ %63, %62 ], [ %68, %65 ]
  %72 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, %32
  %73 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, null
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  tail call void @_ZdaPv(i8* %70) #8
  %76 = load i64, i64* %28, align 8
  br label %77

77:                                               ; preds = %75, %69
  %78 = phi i64 [ %76, %75 ], [ %38, %69 ]
  store i8* %56, i8** %31, align 8
  store i64 %48, i64* %29, align 8
  br label %79

79:                                               ; preds = %34, %41, %77
  %80 = phi i64 [ %78, %77 ], [ -1, %41 ], [ %38, %34 ]
  %81 = load i32, i32* %37, align 4
  %82 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %83 = add i64 %80, 1
  store i64 %83, i64* %28, align 8
  %84 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %82, i64 %80, i32 0, i32 0
  store i32 %81, i32* %84, align 4
  %85 = icmp ult i64 %36, %33
  br i1 %85, label %34, label %86

86:                                               ; preds = %79, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv37ParseImageSparseSampleDrefImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv37ParseImageSparseSampleDrefExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 6
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %6, align 4
  %27 = icmp ne %"class.angle::FastVector"* %7, null
  %28 = icmp ugt i32 %9, 524287
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %90

30:                                               ; preds = %8
  %31 = lshr i32 %9, 16
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %33 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %35 = bitcast %"class.angle::spirv::BoxedUint32"** %34 to i8**
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %37 = zext i32 %31 to i64
  br label %38

38:                                               ; preds = %30, %83
  %39 = phi i64 [ 7, %30 ], [ %40, %83 ]
  %40 = add nuw nsw i64 %39, 1
  %41 = getelementptr inbounds i32, i32* %0, i64 %39
  %42 = load i64, i64* %32, align 8
  %43 = load i64, i64* %33, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %83

45:                                               ; preds = %38
  %46 = add i64 %42, 1
  %47 = icmp eq i64 %42, -1
  br i1 %47, label %83, label %48

48:                                               ; preds = %45
  %49 = icmp ugt i64 %42, 8
  %50 = select i1 %49, i64 %42, i64 8
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i64 [ %50, %48 ], [ %54, %51 ]
  %53 = icmp ult i64 %52, %46
  %54 = shl i64 %52, 1
  br i1 %53, label %51, label %55

55:                                               ; preds = %51
  %56 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %52, i64 4) #7
  %57 = extractvalue { i64, i1 } %56, 1
  %58 = extractvalue { i64, i1 } %56, 0
  %59 = select i1 %57, i64 -1, i64 %58
  %60 = tail call i8* @_Znam(i64 %59) #8
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %55
  %63 = shl nsw i64 %52, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %63, i1 false) #7
  br label %64

64:                                               ; preds = %62, %55
  %65 = icmp eq i64 %42, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %68 = bitcast %"class.angle::spirv::BoxedUint32"* %67 to i8*
  br label %73

69:                                               ; preds = %64
  %70 = shl nuw i64 %42, 2
  %71 = load i8*, i8** %35, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %71, i64 %70, i1 false) #7
  %72 = bitcast i8* %71 to %"class.angle::spirv::BoxedUint32"*
  br label %73

73:                                               ; preds = %69, %66
  %74 = phi i8* [ %68, %66 ], [ %71, %69 ]
  %75 = phi %"class.angle::spirv::BoxedUint32"* [ %67, %66 ], [ %72, %69 ]
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, %36
  %77 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, null
  %78 = or i1 %76, %77
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  tail call void @_ZdaPv(i8* %74) #8
  %80 = load i64, i64* %32, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64 [ %80, %79 ], [ %42, %73 ]
  store i8* %60, i8** %35, align 8
  store i64 %52, i64* %33, align 8
  br label %83

83:                                               ; preds = %38, %45, %81
  %84 = phi i64 [ %82, %81 ], [ -1, %45 ], [ %42, %38 ]
  %85 = load i32, i32* %41, align 4
  %86 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %87 = add i64 %84, 1
  store i64 %87, i64* %32, align 8
  %88 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %86, i64 %84, i32 0, i32 0
  store i32 %85, i32* %88, align 4
  %89 = icmp ult i64 %40, %37
  br i1 %89, label %38, label %90

90:                                               ; preds = %83, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv37ParseImageSparseSampleProjImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv37ParseImageSparseSampleProjExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 5
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %5, align 4
  %23 = icmp ne %"class.angle::FastVector"* %6, null
  %24 = icmp ugt i32 %8, 458751
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %86

26:                                               ; preds = %7
  %27 = lshr i32 %8, 16
  %28 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %30 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %31 = bitcast %"class.angle::spirv::BoxedUint32"** %30 to i8**
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %33 = zext i32 %27 to i64
  br label %34

34:                                               ; preds = %26, %79
  %35 = phi i64 [ 6, %26 ], [ %36, %79 ]
  %36 = add nuw nsw i64 %35, 1
  %37 = getelementptr inbounds i32, i32* %0, i64 %35
  %38 = load i64, i64* %28, align 8
  %39 = load i64, i64* %29, align 8
  %40 = icmp eq i64 %38, %39
  br i1 %40, label %41, label %79

41:                                               ; preds = %34
  %42 = add i64 %38, 1
  %43 = icmp eq i64 %38, -1
  br i1 %43, label %79, label %44

44:                                               ; preds = %41
  %45 = icmp ugt i64 %38, 8
  %46 = select i1 %45, i64 %38, i64 8
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %46, %44 ], [ %50, %47 ]
  %49 = icmp ult i64 %48, %42
  %50 = shl i64 %48, 1
  br i1 %49, label %47, label %51

51:                                               ; preds = %47
  %52 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %48, i64 4) #7
  %53 = extractvalue { i64, i1 } %52, 1
  %54 = extractvalue { i64, i1 } %52, 0
  %55 = select i1 %53, i64 -1, i64 %54
  %56 = tail call i8* @_Znam(i64 %55) #8
  %57 = icmp eq i64 %48, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %51
  %59 = shl nsw i64 %48, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %56, i8 0, i64 %59, i1 false) #7
  br label %60

60:                                               ; preds = %58, %51
  %61 = icmp eq i64 %38, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %64 = bitcast %"class.angle::spirv::BoxedUint32"* %63 to i8*
  br label %69

65:                                               ; preds = %60
  %66 = shl nuw i64 %38, 2
  %67 = load i8*, i8** %31, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %56, i8* align 4 %67, i64 %66, i1 false) #7
  %68 = bitcast i8* %67 to %"class.angle::spirv::BoxedUint32"*
  br label %69

69:                                               ; preds = %65, %62
  %70 = phi i8* [ %64, %62 ], [ %67, %65 ]
  %71 = phi %"class.angle::spirv::BoxedUint32"* [ %63, %62 ], [ %68, %65 ]
  %72 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, %32
  %73 = icmp eq %"class.angle::spirv::BoxedUint32"* %71, null
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  tail call void @_ZdaPv(i8* %70) #8
  %76 = load i64, i64* %28, align 8
  br label %77

77:                                               ; preds = %75, %69
  %78 = phi i64 [ %76, %75 ], [ %38, %69 ]
  store i8* %56, i8** %31, align 8
  store i64 %48, i64* %29, align 8
  br label %79

79:                                               ; preds = %34, %41, %77
  %80 = phi i64 [ %78, %77 ], [ -1, %41 ], [ %38, %34 ]
  %81 = load i32, i32* %37, align 4
  %82 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %30, align 8
  %83 = add i64 %80, 1
  store i64 %83, i64* %28, align 8
  %84 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %82, i64 %80, i32 0, i32 0
  store i32 %81, i32* %84, align 4
  %85 = icmp ult i64 %36, %33
  br i1 %85, label %34, label %86

86:                                               ; preds = %79, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv41ParseImageSparseSampleProjDrefImplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv41ParseImageSparseSampleProjDrefExplicitLodEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 6
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %6, align 4
  %27 = icmp ne %"class.angle::FastVector"* %7, null
  %28 = icmp ugt i32 %9, 524287
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %90

30:                                               ; preds = %8
  %31 = lshr i32 %9, 16
  %32 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %33 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %35 = bitcast %"class.angle::spirv::BoxedUint32"** %34 to i8**
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %37 = zext i32 %31 to i64
  br label %38

38:                                               ; preds = %30, %83
  %39 = phi i64 [ 7, %30 ], [ %40, %83 ]
  %40 = add nuw nsw i64 %39, 1
  %41 = getelementptr inbounds i32, i32* %0, i64 %39
  %42 = load i64, i64* %32, align 8
  %43 = load i64, i64* %33, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %83

45:                                               ; preds = %38
  %46 = add i64 %42, 1
  %47 = icmp eq i64 %42, -1
  br i1 %47, label %83, label %48

48:                                               ; preds = %45
  %49 = icmp ugt i64 %42, 8
  %50 = select i1 %49, i64 %42, i64 8
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i64 [ %50, %48 ], [ %54, %51 ]
  %53 = icmp ult i64 %52, %46
  %54 = shl i64 %52, 1
  br i1 %53, label %51, label %55

55:                                               ; preds = %51
  %56 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %52, i64 4) #7
  %57 = extractvalue { i64, i1 } %56, 1
  %58 = extractvalue { i64, i1 } %56, 0
  %59 = select i1 %57, i64 -1, i64 %58
  %60 = tail call i8* @_Znam(i64 %59) #8
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %55
  %63 = shl nsw i64 %52, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %63, i1 false) #7
  br label %64

64:                                               ; preds = %62, %55
  %65 = icmp eq i64 %42, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %68 = bitcast %"class.angle::spirv::BoxedUint32"* %67 to i8*
  br label %73

69:                                               ; preds = %64
  %70 = shl nuw i64 %42, 2
  %71 = load i8*, i8** %35, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %71, i64 %70, i1 false) #7
  %72 = bitcast i8* %71 to %"class.angle::spirv::BoxedUint32"*
  br label %73

73:                                               ; preds = %69, %66
  %74 = phi i8* [ %68, %66 ], [ %71, %69 ]
  %75 = phi %"class.angle::spirv::BoxedUint32"* [ %67, %66 ], [ %72, %69 ]
  %76 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, %36
  %77 = icmp eq %"class.angle::spirv::BoxedUint32"* %75, null
  %78 = or i1 %76, %77
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  tail call void @_ZdaPv(i8* %74) #8
  %80 = load i64, i64* %32, align 8
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i64 [ %80, %79 ], [ %42, %73 ]
  store i8* %60, i8** %35, align 8
  store i64 %52, i64* %33, align 8
  br label %83

83:                                               ; preds = %38, %45, %81
  %84 = phi i64 [ %82, %81 ], [ -1, %45 ], [ %42, %38 ]
  %85 = load i32, i32* %41, align 4
  %86 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %34, align 8
  %87 = add i64 %84, 1
  store i64 %87, i64* %32, align 8
  %88 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %86, i64 %84, i32 0, i32 0
  store i32 %85, i32* %88, align 4
  %89 = icmp ult i64 %40, %37
  br i1 %89, label %38, label %90

90:                                               ; preds = %83, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv21ParseImageSparseFetchEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv22ParseImageSparseGatherEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv26ParseImageSparseDrefGatherEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %9 = load i32, i32* %0, align 4
  %10 = lshr i32 %9, 16
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = icmp ne i32* %6, null
  %27 = icmp ugt i32 %9, 458751
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %8
  %30 = getelementptr inbounds i32, i32* %0, i64 6
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %6, align 4
  br label %32

32:                                               ; preds = %8, %29
  %33 = phi i32 [ 7, %29 ], [ 6, %8 ]
  %34 = icmp ne %"class.angle::FastVector"* %7, null
  %35 = icmp ult i32 %33, %10
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %97

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 2
  %39 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 3
  %40 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 1
  %41 = bitcast %"class.angle::spirv::BoxedUint32"** %40 to i8**
  %42 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %7, i64 0, i32 0, i32 0, i64 0
  %43 = zext i32 %33 to i64
  %44 = zext i32 %10 to i64
  br label %45

45:                                               ; preds = %90, %37
  %46 = phi i64 [ %43, %37 ], [ %47, %90 ]
  %47 = add nuw nsw i64 %46, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %46
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %39, align 8
  %51 = icmp eq i64 %49, %50
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = add i64 %49, 1
  %54 = icmp eq i64 %49, -1
  br i1 %54, label %90, label %55

55:                                               ; preds = %52
  %56 = icmp ugt i64 %49, 8
  %57 = select i1 %56, i64 %49, i64 8
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i64 [ %57, %55 ], [ %61, %58 ]
  %60 = icmp ult i64 %59, %53
  %61 = shl i64 %59, 1
  br i1 %60, label %58, label %62

62:                                               ; preds = %58
  %63 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 4) #7
  %64 = extractvalue { i64, i1 } %63, 1
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = select i1 %64, i64 -1, i64 %65
  %67 = tail call i8* @_Znam(i64 %66) #8
  %68 = icmp eq i64 %59, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = shl nsw i64 %59, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %70, i1 false) #7
  br label %71

71:                                               ; preds = %69, %62
  %72 = icmp eq i64 %49, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %75 = bitcast %"class.angle::spirv::BoxedUint32"* %74 to i8*
  br label %80

76:                                               ; preds = %71
  %77 = shl nuw i64 %49, 2
  %78 = load i8*, i8** %41, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %78, i64 %77, i1 false) #7
  %79 = bitcast i8* %78 to %"class.angle::spirv::BoxedUint32"*
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i8* [ %75, %73 ], [ %78, %76 ]
  %82 = phi %"class.angle::spirv::BoxedUint32"* [ %74, %73 ], [ %79, %76 ]
  %83 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, %42
  %84 = icmp eq %"class.angle::spirv::BoxedUint32"* %82, null
  %85 = or i1 %83, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  tail call void @_ZdaPv(i8* %81) #8
  %87 = load i64, i64* %38, align 8
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %87, %86 ], [ %49, %80 ]
  store i8* %67, i8** %41, align 8
  store i64 %59, i64* %39, align 8
  br label %90

90:                                               ; preds = %45, %52, %88
  %91 = phi i64 [ %89, %88 ], [ -1, %52 ], [ %49, %45 ]
  %92 = load i32, i32* %48, align 4
  %93 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %40, align 8
  %94 = add i64 %91, 1
  store i64 %94, i64* %38, align 8
  %95 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %93, i64 %91, i32 0, i32 0
  store i32 %92, i32* %95, align 4
  %96 = icmp eq i64 %47, %44
  br i1 %96, label %97, label %45

97:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv30ParseImageSparseTexelsResidentEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv20ParseImageSparseReadEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_S6_PN3spv17ImageOperandsMaskEPNS_10FastVectorIS5_Lm8ENSt3__15arrayIS5_Lm8EEEEE(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32*, %"class.angle::FastVector"*) local_unnamed_addr #1 {
  %8 = load i32, i32* %0, align 4
  %9 = lshr i32 %8, 16
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %4, i64 0, i32 0, i32 0
  store i32 %20, i32* %21, align 4
  %22 = icmp ne i32* %5, null
  %23 = icmp ugt i32 %8, 393215
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %7
  %26 = getelementptr inbounds i32, i32* %0, i64 5
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %7, %25
  %29 = phi i32 [ 6, %25 ], [ 5, %7 ]
  %30 = icmp ne %"class.angle::FastVector"* %6, null
  %31 = icmp ult i32 %29, %9
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 2
  %35 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 3
  %36 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 1
  %37 = bitcast %"class.angle::spirv::BoxedUint32"** %36 to i8**
  %38 = getelementptr inbounds %"class.angle::FastVector", %"class.angle::FastVector"* %6, i64 0, i32 0, i32 0, i64 0
  %39 = zext i32 %29 to i64
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %86, %33
  %42 = phi i64 [ %39, %33 ], [ %43, %86 ]
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i32, i32* %0, i64 %42
  %45 = load i64, i64* %34, align 8
  %46 = load i64, i64* %35, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %41
  %49 = add i64 %45, 1
  %50 = icmp eq i64 %45, -1
  br i1 %50, label %86, label %51

51:                                               ; preds = %48
  %52 = icmp ugt i64 %45, 8
  %53 = select i1 %52, i64 %45, i64 8
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %56 = icmp ult i64 %55, %49
  %57 = shl i64 %55, 1
  br i1 %56, label %54, label %58

58:                                               ; preds = %54
  %59 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4) #7
  %60 = extractvalue { i64, i1 } %59, 1
  %61 = extractvalue { i64, i1 } %59, 0
  %62 = select i1 %60, i64 -1, i64 %61
  %63 = tail call i8* @_Znam(i64 %62) #8
  %64 = icmp eq i64 %55, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = shl nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 0, i64 %66, i1 false) #7
  br label %67

67:                                               ; preds = %65, %58
  %68 = icmp eq i64 %45, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %71 = bitcast %"class.angle::spirv::BoxedUint32"* %70 to i8*
  br label %76

72:                                               ; preds = %67
  %73 = shl nuw i64 %45, 2
  %74 = load i8*, i8** %37, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %63, i8* align 4 %74, i64 %73, i1 false) #7
  %75 = bitcast i8* %74 to %"class.angle::spirv::BoxedUint32"*
  br label %76

76:                                               ; preds = %72, %69
  %77 = phi i8* [ %71, %69 ], [ %74, %72 ]
  %78 = phi %"class.angle::spirv::BoxedUint32"* [ %70, %69 ], [ %75, %72 ]
  %79 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, %38
  %80 = icmp eq %"class.angle::spirv::BoxedUint32"* %78, null
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  tail call void @_ZdaPv(i8* %77) #8
  %83 = load i64, i64* %34, align 8
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i64 [ %83, %82 ], [ %45, %76 ]
  store i8* %63, i8** %37, align 8
  store i64 %55, i64* %35, align 8
  br label %86

86:                                               ; preds = %41, %48, %84
  %87 = phi i64 [ %85, %84 ], [ -1, %48 ], [ %45, %41 ]
  %88 = load i32, i32* %44, align 4
  %89 = load %"class.angle::spirv::BoxedUint32"*, %"class.angle::spirv::BoxedUint32"** %36, align 8
  %90 = add i64 %87, 1
  store i64 %90, i64* %34, align 8
  %91 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %89, i64 %87, i32 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = icmp eq i64 %43, %40
  br i1 %92, label %93, label %41

93:                                               ; preds = %86, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupIAddNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupFAddNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupFMinNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupUMinNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupSMinNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupFMaxNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupUMaxNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle5spirv27ParseGroupSMaxNonUniformAMDEPKjPNS0_11BoxedUint32INS0_11IdRefHelperEEES6_S6_PN3spv14GroupOperationES6_(i32* nocapture readonly, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture, i32* nocapture, %"class.angle::spirv::BoxedUint32"* nocapture) local_unnamed_addr #1 {
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %1, i64 0, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %2, i64 0, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %3, i64 0, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 4
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 5
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.angle::spirv::BoxedUint32", %"class.angle::spirv::BoxedUint32"* %5, i64 0, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
