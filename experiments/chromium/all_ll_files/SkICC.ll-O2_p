; ModuleID = '../../third_party/skia/src/core/SkICC.cpp'
source_filename = "../../third_party/skia/src/core/SkICC.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMD5 = type { %class.SkWStream, i64, [4 x i32], [64 x i8] }
%class.SkWStream = type { i32 (...)** }

@_ZN12SkNamedGamutL5kSRGBE = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FDBE88000000000, float 0x3FD8A64000000000, float 0x3FC2500000000000], [3 x float] [float 0x3FCC7A8000000000, float 0x3FE6F0A000000000, float 0x3FAF080000000000], [3 x float] [float 0x3F8C800000000000, float 0x3FB8DA0000000000, float 0x3FE6D9E000000000]] }, align 4
@.str = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Linear Transfer with sRGB Gamut\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"2.2 Transfer with sRGB Gamut\00", align 1
@_ZN12SkNamedGamutL9kAdobeRGBE = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FE3830000000000, float 0x3FCA468000000000, float 0x3FC3188000000000], [3 x float] [float 0x3FD3E94000000000, float 0x3FE4058000000000, float 0x3FB02F0000000000], [3 x float] [float 0x3F93F00000000000, float 0x3FAF2A0000000000, float 0x3FE7D38000000000]] }, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"AdobeRGB\00", align 1
@_ZN12SkNamedGamutL10kDisplayP3E = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FE07BB740000000, float 0x3FD2AF8E00000000, float 0x3FC41D96E0000000], [3 x float] [float 0x3FCEDF0D40000000, float 0x3FE626CC20000000, float 0x3FB10B82E0000000], [3 x float] [float 0xBF51318B60000000, float 0x3FA5718800000000, float 0x3FE9199FE0000000]] }, align 4
@.str.4 = private unnamed_addr constant [36 x i8] c"sRGB Transfer with Display P3 Gamut\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"Linear Transfer with Display P3 Gamut\00", align 1
@_ZN12SkNamedGamutL8kRec2020E = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FE58CF9E0000000, float 0x3FC5346140000000, float 0x3FC00346E0000000], [3 x float] [float 0x3FD1DBAD40000000, float 0x3FE59C5E60000000, float 0x3FA75CA880000000], [3 x float] [float 0xBF5FA4D640000000, float 0x3F9EB2EB80000000, float 0x3FE98259E0000000]] }, align 4
@.str.6 = private unnamed_addr constant [37 x i8] c"sRGB Transfer with Rec-BT-2020 Gamut\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"Linear Transfer with Rec-BT-2020 Gamut\00", align 1
@_ZL10kICCHeader = internal unnamed_addr constant [33 x i32] [i32 402784256, i32 0, i32 4098, i32 1920233069, i32 541214546, i32 542792024, i32 0, i32 0, i32 0, i32 1886610273, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16777216, i32 -688521216, i32 256, i32 768802816, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 150994944], align 16
@_ZL12kICCTagTable = internal unnamed_addr constant [27 x i32] [i32 1668506980, i32 -268435456, i32 1946157056, i32 1515804786, i32 1677787136, i32 335544320, i32 1515804775, i32 2013331456, i32 335544320, i32 1515804770, i32 -1946091520, i32 335544320, i32 1129469042, i32 -1610547200, i32 671088640, i32 1129469031, i32 -1610547200, i32 671088640, i32 1129469026, i32 -1610547200, i32 671088640, i32 1953526903, i32 -939458560, i32 335544320, i32 1953656931, i32 -603914240, i32 1006632960], align 16
@_ZL21kDescriptionTagHeader = internal unnamed_addr constant [7 x i32] [i32 1668639853, i32 0, i32 16777216, i32 201326592, i32 1398107749, i32 1476395008, i32 469762048], align 16
@_ZL14kWhitePointTag = internal unnamed_addr constant [5 x i32] [i32 542792024, i32 0, i32 -688521216, i32 256, i32 768802816], align 16
@_ZL19kCopyrightTagHeader = internal unnamed_addr constant [7 x i32] [i32 1668639853, i32 0, i32 16777216, i32 201326592, i32 1398107749, i32 536870912, i32 469762048], align 16
@_ZL17kCopyrightTagBody = internal unnamed_addr constant [32 x i8] c"\00G\00o\00o\00g\00l\00e\00 \00I\00n\00c\00.\00 \002\000\001\006", align 16
@_ZL25kDescriptionTagBodyPrefix = internal unnamed_addr constant [12 x i8] c"Google/Skia/", align 1
@_ZN19SkHexadecimalDigits6gUpperE = external local_unnamed_addr constant [16 x i8], align 16

; Function Attrs: nounwind readonly ssp uwtable
define hidden i8* @_Z29get_color_profile_descriptionRK22skcms_TransferFunctionRK15skcms_Matrix3x3(%struct.skcms_TransferFunction* readonly dereferenceable(28), %struct.skcms_Matrix3x3* nocapture readonly dereferenceable(36)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fadd float %4, 0xC003333340000000
  %6 = tail call float @llvm.fabs.f32(float %5) #7
  %7 = fcmp ugt float %6, 0x3F40000000000000
  br i1 %7, label %42, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fadd float %10, 0xBFEE54EDC0000000
  %12 = tail call float @llvm.fabs.f32(float %11) #7
  %13 = fcmp ugt float %12, 0x3F40000000000000
  br i1 %13, label %42, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fadd float %16, 0xBFAAB12320000000
  %18 = tail call float @llvm.fabs.f32(float %17) #7
  %19 = fcmp ugt float %18, 0x3F40000000000000
  br i1 %19, label %42, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %22 = load float, float* %21, align 4
  %23 = fadd float %22, 0xBFB3D07220000000
  %24 = tail call float @llvm.fabs.f32(float %23) #7
  %25 = fcmp ugt float %24, 0x3F40000000000000
  br i1 %25, label %42, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %28 = load float, float* %27, align 4
  %29 = fadd float %28, 0xBFA4B5DCC0000000
  %30 = tail call float @llvm.fabs.f32(float %29) #7
  %31 = fcmp ugt float %30, 0x3F40000000000000
  br i1 %31, label %42, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %34 = load float, float* %33, align 4
  %35 = tail call float @llvm.fabs.f32(float %34) #7
  %36 = fcmp ugt float %35, 0x3F40000000000000
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %39 = load float, float* %38, align 4
  %40 = tail call float @llvm.fabs.f32(float %39) #7
  %41 = fcmp ole float %40, 0x3F40000000000000
  br label %42

42:                                               ; preds = %2, %8, %14, %20, %26, %32, %37
  %43 = phi i1 [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %41, %37 ]
  %44 = tail call fastcc zeroext i1 @_ZL12nearly_equalRK15skcms_Matrix3x3S1_(%struct.skcms_Matrix3x3* dereferenceable(36) %1, %struct.skcms_Matrix3x3* nonnull dereferenceable(36) @_ZN12SkNamedGamutL5kSRGBE)
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %142

48:                                               ; preds = %42
  %49 = fadd float %4, -1.000000e+00
  %50 = tail call float @llvm.fabs.f32(float %49) #7
  %51 = fcmp ugt float %50, 0x3F40000000000000
  br i1 %51, label %85, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = fadd float %54, -1.000000e+00
  %56 = tail call float @llvm.fabs.f32(float %55) #7
  %57 = fcmp ugt float %56, 0x3F40000000000000
  br i1 %57, label %85, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = tail call float @llvm.fabs.f32(float %60) #7
  %62 = fcmp ugt float %61, 0x3F40000000000000
  br i1 %62, label %85, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %65 = load float, float* %64, align 4
  %66 = tail call float @llvm.fabs.f32(float %65) #7
  %67 = fcmp ugt float %66, 0x3F40000000000000
  br i1 %67, label %85, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %70 = load float, float* %69, align 4
  %71 = tail call float @llvm.fabs.f32(float %70) #7
  %72 = fcmp ugt float %71, 0x3F40000000000000
  br i1 %72, label %85, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %75 = load float, float* %74, align 4
  %76 = tail call float @llvm.fabs.f32(float %75) #7
  %77 = fcmp ugt float %76, 0x3F40000000000000
  br i1 %77, label %85, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %80 = load float, float* %79, align 4
  %81 = tail call float @llvm.fabs.f32(float %80) #7
  %82 = fcmp ole float %81, 0x3F40000000000000
  %83 = xor i1 %82, true
  %84 = or i1 %46, %83
  br i1 %84, label %85, label %142

85:                                               ; preds = %48, %52, %58, %63, %68, %73, %78
  %86 = phi i1 [ %83, %78 ], [ true, %73 ], [ true, %68 ], [ true, %63 ], [ true, %58 ], [ true, %52 ], [ true, %48 ]
  %87 = phi i1 [ %82, %78 ], [ false, %73 ], [ false, %68 ], [ false, %63 ], [ false, %58 ], [ false, %52 ], [ false, %48 ]
  %88 = fadd float %4, 0xC0019999A0000000
  %89 = tail call float @llvm.fabs.f32(float %88) #7
  %90 = fcmp ugt float %89, 0x3F40000000000000
  br i1 %90, label %127, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %93 = load float, float* %92, align 4
  %94 = fadd float %93, -1.000000e+00
  %95 = tail call float @llvm.fabs.f32(float %94) #7
  %96 = fcmp ugt float %95, 0x3F40000000000000
  br i1 %96, label %127, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %99 = load float, float* %98, align 4
  %100 = tail call float @llvm.fabs.f32(float %99) #7
  %101 = fcmp ugt float %100, 0x3F40000000000000
  br i1 %101, label %127, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %104 = load float, float* %103, align 4
  %105 = tail call float @llvm.fabs.f32(float %104) #7
  %106 = fcmp ugt float %105, 0x3F40000000000000
  br i1 %106, label %127, label %107

107:                                              ; preds = %102
  %108 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %109 = load float, float* %108, align 4
  %110 = tail call float @llvm.fabs.f32(float %109) #7
  %111 = fcmp ugt float %110, 0x3F40000000000000
  br i1 %111, label %127, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %114 = load float, float* %113, align 4
  %115 = tail call float @llvm.fabs.f32(float %114) #7
  %116 = fcmp ugt float %115, 0x3F40000000000000
  br i1 %116, label %127, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %119 = load float, float* %118, align 4
  %120 = tail call float @llvm.fabs.f32(float %119) #7
  %121 = fcmp ole float %120, 0x3F40000000000000
  %122 = xor i1 %121, true
  %123 = or i1 %46, %122
  br i1 %123, label %124, label %142

124:                                              ; preds = %117
  br i1 %121, label %125, label %127

125:                                              ; preds = %124
  %126 = tail call fastcc zeroext i1 @_ZL12nearly_equalRK15skcms_Matrix3x3S1_(%struct.skcms_Matrix3x3* dereferenceable(36) %1, %struct.skcms_Matrix3x3* nonnull dereferenceable(36) @_ZN12SkNamedGamutL9kAdobeRGBE)
  br i1 %126, label %142, label %127

127:                                              ; preds = %112, %107, %102, %97, %91, %85, %125, %124
  %128 = or i1 %43, %87
  br i1 %128, label %129, label %141

129:                                              ; preds = %127
  %130 = tail call fastcc zeroext i1 @_ZL12nearly_equalRK15skcms_Matrix3x3S1_(%struct.skcms_Matrix3x3* dereferenceable(36) %1, %struct.skcms_Matrix3x3* nonnull dereferenceable(36) @_ZN12SkNamedGamutL10kDisplayP3E)
  %131 = xor i1 %130, true
  %132 = or i1 %45, %131
  br i1 %132, label %133, label %142

133:                                              ; preds = %129
  %134 = or i1 %86, %131
  br i1 %134, label %135, label %142

135:                                              ; preds = %133
  %136 = tail call fastcc zeroext i1 @_ZL12nearly_equalRK15skcms_Matrix3x3S1_(%struct.skcms_Matrix3x3* dereferenceable(36) %1, %struct.skcms_Matrix3x3* nonnull dereferenceable(36) @_ZN12SkNamedGamutL8kRec2020E)
  %137 = xor i1 %136, true
  %138 = or i1 %45, %137
  br i1 %138, label %139, label %142

139:                                              ; preds = %135
  %140 = or i1 %86, %137
  br i1 %140, label %141, label %142

141:                                              ; preds = %127, %139
  br label %142

142:                                              ; preds = %135, %78, %141, %139, %129, %133, %125, %117, %42
  %143 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %42 ], [ getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), %78 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), %117 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), %125 ], [ null, %141 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0), %139 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0), %129 ], [ getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), %133 ], [ getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), %135 ]
  ret i8* %143
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc zeroext i1 @_ZL12nearly_equalRK15skcms_Matrix3x3S1_(%struct.skcms_Matrix3x3* nocapture readonly dereferenceable(36), %struct.skcms_Matrix3x3* nocapture readonly dereferenceable(36)) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = tail call float @llvm.fabs.f32(float %7) #7
  %9 = fcmp ugt float %8, 0x3F40000000000000
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 1
  %14 = load float, float* %13, align 4
  %15 = fsub float %12, %14
  %16 = tail call float @llvm.fabs.f32(float %15) #7
  %17 = fcmp ugt float %16, 0x3F40000000000000
  br i1 %17, label %18, label %20

18:                                               ; preds = %2, %10, %20, %28, %36, %44, %52, %60, %68, %76
  %19 = phi i1 [ true, %76 ], [ false, %68 ], [ false, %60 ], [ false, %52 ], [ false, %44 ], [ false, %36 ], [ false, %28 ], [ false, %20 ], [ false, %10 ], [ false, %2 ]
  ret i1 %19

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 2
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 2
  %24 = load float, float* %23, align 4
  %25 = fsub float %22, %24
  %26 = tail call float @llvm.fabs.f32(float %25) #7
  %27 = fcmp ugt float %26, 0x3F40000000000000
  br i1 %27, label %18, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 0
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 0
  %32 = load float, float* %31, align 4
  %33 = fsub float %30, %32
  %34 = tail call float @llvm.fabs.f32(float %33) #7
  %35 = fcmp ugt float %34, 0x3F40000000000000
  br i1 %35, label %18, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 1
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 1
  %40 = load float, float* %39, align 4
  %41 = fsub float %38, %40
  %42 = tail call float @llvm.fabs.f32(float %41) #7
  %43 = fcmp ugt float %42, 0x3F40000000000000
  br i1 %43, label %18, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 2
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 2
  %48 = load float, float* %47, align 4
  %49 = fsub float %46, %48
  %50 = tail call float @llvm.fabs.f32(float %49) #7
  %51 = fcmp ugt float %50, 0x3F40000000000000
  br i1 %51, label %18, label %52

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 0
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 0
  %56 = load float, float* %55, align 4
  %57 = fsub float %54, %56
  %58 = tail call float @llvm.fabs.f32(float %57) #7
  %59 = fcmp ugt float %58, 0x3F40000000000000
  br i1 %59, label %18, label %60

60:                                               ; preds = %52
  %61 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 1
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 1
  %64 = load float, float* %63, align 4
  %65 = fsub float %62, %64
  %66 = tail call float @llvm.fabs.f32(float %65) #7
  %67 = fcmp ugt float %66, 0x3F40000000000000
  br i1 %67, label %18, label %68

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 2
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 2
  %72 = load float, float* %71, align 4
  %73 = fsub float %70, %72
  %74 = tail call float @llvm.fabs.f32(float %73) #7
  %75 = fcmp ugt float %74, 0x3F40000000000000
  br i1 %75, label %18, label %76

76:                                               ; preds = %68
  br label %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z17SkWriteICCProfileRK22skcms_TransferFunctionRK15skcms_Matrix3x3(%class.sk_sp* noalias sret, %struct.skcms_TransferFunction* dereferenceable(28), %struct.skcms_Matrix3x3* dereferenceable(36)) local_unnamed_addr #2 {
  %4 = alloca %class.SkMD5, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca [44 x i8], align 16
  %7 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 0
  %8 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp olt float %9, 0.000000e+00
  br i1 %10, label %11, label %15

11:                                               ; preds = %3
  %12 = fptosi float %9 to i32
  %13 = sitofp i32 %12 to float
  %14 = fcmp oeq float %9, %13
  br i1 %14, label %49, label %15

15:                                               ; preds = %11, %3
  %16 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 2
  %19 = load float, float* %18, align 4
  %20 = fadd float %17, %19
  %21 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 3
  %22 = load float, float* %21, align 4
  %23 = fadd float %20, %22
  %24 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 4
  %25 = load float, float* %24, align 4
  %26 = fadd float %23, %25
  %27 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 5
  %28 = load float, float* %27, align 4
  %29 = fadd float %26, %28
  %30 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 6
  %31 = load float, float* %30, align 4
  %32 = fadd float %29, %31
  %33 = fadd float %9, %32
  %34 = bitcast float %33 to i32
  %35 = and i32 %34, 2139095040
  %36 = icmp eq i32 %35, 2139095040
  br i1 %36, label %49, label %37

37:                                               ; preds = %15
  %38 = fcmp ult float %17, 0.000000e+00
  %39 = fcmp ult float %22, 0.000000e+00
  %40 = or i1 %38, %39
  br i1 %40, label %49, label %41

41:                                               ; preds = %37
  %42 = fcmp ult float %25, 0.000000e+00
  %43 = fcmp ult float %9, 0.000000e+00
  %44 = or i1 %43, %42
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = fmul float %17, %25
  %47 = fadd float %19, %46
  %48 = fcmp ult float %47, 0.000000e+00
  br i1 %48, label %49, label %51

49:                                               ; preds = %11, %15, %37, %41, %45
  %50 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkData* null, %class.SkData** %50, align 8
  br label %409

51:                                               ; preds = %45
  %52 = tail call i8* @_Z15sk_malloc_flagsmj(i64 536, i32 2) #7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 16 bitcast ([33 x i32]* @_ZL10kICCHeader to i8*), i64 132, i1 false)
  %53 = getelementptr inbounds i8, i8* %52, i64 132
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 16 bitcast ([27 x i32]* @_ZL12kICCTagTable to i8*), i64 108, i1 false)
  %54 = getelementptr inbounds i8, i8* %52, i64 240
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 16 bitcast ([7 x i32]* @_ZL21kDescriptionTagHeader to i8*), i64 28, i1 false)
  %55 = getelementptr inbounds i8, i8* %52, i64 268
  %56 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %56) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 -86, i64 44, i1 false)
  %57 = tail call i8* @_Z29get_color_profile_descriptionRK22skcms_TransferFunctionRK15skcms_Matrix3x3(%struct.skcms_TransferFunction* dereferenceable(28) %1, %struct.skcms_Matrix3x3* dereferenceable(36) %2) #7
  %58 = icmp eq i8* %57, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %51
  %60 = call i8* @strncpy(i8* nonnull %56, i8* nonnull %57, i64 44) #7
  br label %109

61:                                               ; preds = %51
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %56, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @_ZL25kDescriptionTagBodyPrefix, i64 0, i64 0), i64 12, i1 false) #7
  %62 = bitcast %class.SkMD5* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %62) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 96, i1 false) #7
  call void @_ZN5SkMD5C1Ev(%class.SkMD5* nonnull %4) #7
  %63 = bitcast %struct.skcms_Matrix3x3* %2 to i8*
  %64 = call zeroext i1 @_ZN5SkMD55writeEPKvm(%class.SkMD5* nonnull %4, i8* %63, i64 36) #7
  %65 = bitcast %struct.skcms_TransferFunction* %1 to i8*
  %66 = call zeroext i1 @_ZN5SkMD55writeEPKvm(%class.SkMD5* nonnull %4, i8* %65, i64 28) #7
  %67 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #7
  %68 = bitcast { i64, i64 }* %5 to [16 x i8]*
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %70 = call { i64, i64 } @_ZN5SkMD56finishEv(%class.SkMD5* nonnull %4) #7
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %72 = extractvalue { i64, i64 } %70, 0
  store i64 %72, i64* %71, align 8
  %73 = extractvalue { i64, i64 } %70, 1
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 12
  br label %77

75:                                               ; preds = %77
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #7
  %76 = getelementptr inbounds %class.SkMD5, %class.SkMD5* %4, i64 0, i32 0
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %76) #7
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %62) #7
  br label %109

77:                                               ; preds = %77, %61
  %78 = phi i64 [ 0, %61 ], [ %107, %77 ]
  %79 = phi i8* [ %74, %61 ], [ %106, %77 ]
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %68, i64 0, i64 %78
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = lshr i32 %82, 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds i8, i8* %79, i64 1
  store i8 %86, i8* %79, align 1
  %88 = and i32 %82, 15
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %79, i64 2
  store i8 %91, i8* %87, align 1
  %93 = or i64 %78, 1
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %68, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = lshr i32 %96, 4
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds i8, i8* %79, i64 3
  store i8 %100, i8* %92, align 1
  %102 = and i32 %96, 15
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds i8, i8* %79, i64 4
  store i8 %105, i8* %101, align 1
  %107 = add nuw nsw i64 %78, 2
  %108 = icmp eq i64 %107, 16
  br i1 %108, label %75, label %77

109:                                              ; preds = %75, %59
  %110 = getelementptr i8, i8* %52, i64 356
  %111 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 1, i64 0
  %112 = icmp ult i8* %55, %111
  %113 = icmp ult i8* %7, %110
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %118

115:                                              ; preds = %118, %109
  %116 = phi i64 [ 0, %109 ], [ 32, %118 ]
  %117 = phi i8* [ %55, %109 ], [ %119, %118 ]
  br label %385

118:                                              ; preds = %109
  %119 = getelementptr i8, i8* %52, i64 332
  %120 = getelementptr inbounds i8, i8* %52, i64 268
  %121 = bitcast [44 x i8]* %6 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 16, !alias.scope !2
  %123 = bitcast i8* %120 to <32 x i8>*
  %124 = shufflevector <16 x i8> zeroinitializer, <16 x i8> %122, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %124, <32 x i8>* %123, align 1
  %125 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 16
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 16, !alias.scope !2
  %128 = getelementptr inbounds i8, i8* %52, i64 300
  %129 = bitcast i8* %128 to <32 x i8>*
  %130 = shufflevector <16 x i8> zeroinitializer, <16 x i8> %127, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %130, <32 x i8>* %129, align 1
  br label %115

131:                                              ; preds = %385
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %56) #7
  %132 = bitcast i8* %406 to i32*
  store i32 542792024, i32* %132, align 4
  %133 = getelementptr inbounds i8, i8* %387, i64 12
  %134 = bitcast i8* %133 to i32*
  store i32 0, i32* %134, align 4
  %135 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 0, i64 0
  %136 = load float, float* %135, align 4
  %137 = fpext float %136 to double
  %138 = fmul double %137, 6.553600e+04
  %139 = fadd double %138, 5.000000e-01
  %140 = call double @llvm.floor.f64(double %139) #7
  %141 = fptrunc double %140 to float
  %142 = fcmp olt float %141, 0x41DFFFFFE0000000
  %143 = select i1 %142, float %141, float 0x41DFFFFFE0000000
  %144 = fcmp ogt float %143, 0xC1DFFFFFE0000000
  %145 = select i1 %144, float %143, float 0xC1DFFFFFE0000000
  %146 = fptosi float %145 to i32
  %147 = call i32 @llvm.bswap.i32(i32 %146) #7
  %148 = getelementptr inbounds i8, i8* %387, i64 16
  %149 = bitcast i8* %148 to i32*
  store i32 %147, i32* %149, align 4
  %150 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 0
  %151 = load float, float* %150, align 4
  %152 = fpext float %151 to double
  %153 = fmul double %152, 6.553600e+04
  %154 = fadd double %153, 5.000000e-01
  %155 = call double @llvm.floor.f64(double %154) #7
  %156 = fptrunc double %155 to float
  %157 = fcmp olt float %156, 0x41DFFFFFE0000000
  %158 = select i1 %157, float %156, float 0x41DFFFFFE0000000
  %159 = fcmp ogt float %158, 0xC1DFFFFFE0000000
  %160 = select i1 %159, float %158, float 0xC1DFFFFFE0000000
  %161 = fptosi float %160 to i32
  %162 = call i32 @llvm.bswap.i32(i32 %161) #7
  %163 = getelementptr inbounds i8, i8* %387, i64 20
  %164 = bitcast i8* %163 to i32*
  store i32 %162, i32* %164, align 4
  %165 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 0
  %166 = load float, float* %165, align 4
  %167 = fpext float %166 to double
  %168 = fmul double %167, 6.553600e+04
  %169 = fadd double %168, 5.000000e-01
  %170 = call double @llvm.floor.f64(double %169) #7
  %171 = fptrunc double %170 to float
  %172 = fcmp olt float %171, 0x41DFFFFFE0000000
  %173 = select i1 %172, float %171, float 0x41DFFFFFE0000000
  %174 = fcmp ogt float %173, 0xC1DFFFFFE0000000
  %175 = select i1 %174, float %173, float 0xC1DFFFFFE0000000
  %176 = fptosi float %175 to i32
  %177 = call i32 @llvm.bswap.i32(i32 %176) #7
  %178 = getelementptr inbounds i8, i8* %387, i64 24
  %179 = bitcast i8* %178 to i32*
  store i32 %177, i32* %179, align 4
  %180 = getelementptr inbounds i8, i8* %387, i64 28
  %181 = bitcast i8* %180 to i32*
  store i32 542792024, i32* %181, align 4
  %182 = getelementptr inbounds i8, i8* %387, i64 32
  %183 = bitcast i8* %182 to i32*
  store i32 0, i32* %183, align 4
  %184 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 0, i64 1
  %185 = load float, float* %184, align 4
  %186 = fpext float %185 to double
  %187 = fmul double %186, 6.553600e+04
  %188 = fadd double %187, 5.000000e-01
  %189 = call double @llvm.floor.f64(double %188) #7
  %190 = fptrunc double %189 to float
  %191 = fcmp olt float %190, 0x41DFFFFFE0000000
  %192 = select i1 %191, float %190, float 0x41DFFFFFE0000000
  %193 = fcmp ogt float %192, 0xC1DFFFFFE0000000
  %194 = select i1 %193, float %192, float 0xC1DFFFFFE0000000
  %195 = fptosi float %194 to i32
  %196 = call i32 @llvm.bswap.i32(i32 %195) #7
  %197 = getelementptr inbounds i8, i8* %387, i64 36
  %198 = bitcast i8* %197 to i32*
  store i32 %196, i32* %198, align 4
  %199 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 1
  %200 = load float, float* %199, align 4
  %201 = fpext float %200 to double
  %202 = fmul double %201, 6.553600e+04
  %203 = fadd double %202, 5.000000e-01
  %204 = call double @llvm.floor.f64(double %203) #7
  %205 = fptrunc double %204 to float
  %206 = fcmp olt float %205, 0x41DFFFFFE0000000
  %207 = select i1 %206, float %205, float 0x41DFFFFFE0000000
  %208 = fcmp ogt float %207, 0xC1DFFFFFE0000000
  %209 = select i1 %208, float %207, float 0xC1DFFFFFE0000000
  %210 = fptosi float %209 to i32
  %211 = call i32 @llvm.bswap.i32(i32 %210) #7
  %212 = getelementptr inbounds i8, i8* %387, i64 40
  %213 = bitcast i8* %212 to i32*
  store i32 %211, i32* %213, align 4
  %214 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 1
  %215 = load float, float* %214, align 4
  %216 = fpext float %215 to double
  %217 = fmul double %216, 6.553600e+04
  %218 = fadd double %217, 5.000000e-01
  %219 = call double @llvm.floor.f64(double %218) #7
  %220 = fptrunc double %219 to float
  %221 = fcmp olt float %220, 0x41DFFFFFE0000000
  %222 = select i1 %221, float %220, float 0x41DFFFFFE0000000
  %223 = fcmp ogt float %222, 0xC1DFFFFFE0000000
  %224 = select i1 %223, float %222, float 0xC1DFFFFFE0000000
  %225 = fptosi float %224 to i32
  %226 = call i32 @llvm.bswap.i32(i32 %225) #7
  %227 = getelementptr inbounds i8, i8* %387, i64 44
  %228 = bitcast i8* %227 to i32*
  store i32 %226, i32* %228, align 4
  %229 = getelementptr inbounds i8, i8* %387, i64 48
  %230 = bitcast i8* %229 to i32*
  store i32 542792024, i32* %230, align 4
  %231 = getelementptr inbounds i8, i8* %387, i64 52
  %232 = bitcast i8* %231 to i32*
  store i32 0, i32* %232, align 4
  %233 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 0, i64 2
  %234 = load float, float* %233, align 4
  %235 = fpext float %234 to double
  %236 = fmul double %235, 6.553600e+04
  %237 = fadd double %236, 5.000000e-01
  %238 = call double @llvm.floor.f64(double %237) #7
  %239 = fptrunc double %238 to float
  %240 = fcmp olt float %239, 0x41DFFFFFE0000000
  %241 = select i1 %240, float %239, float 0x41DFFFFFE0000000
  %242 = fcmp ogt float %241, 0xC1DFFFFFE0000000
  %243 = select i1 %242, float %241, float 0xC1DFFFFFE0000000
  %244 = fptosi float %243 to i32
  %245 = call i32 @llvm.bswap.i32(i32 %244) #7
  %246 = getelementptr inbounds i8, i8* %387, i64 56
  %247 = bitcast i8* %246 to i32*
  store i32 %245, i32* %247, align 4
  %248 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 2
  %249 = load float, float* %248, align 4
  %250 = fpext float %249 to double
  %251 = fmul double %250, 6.553600e+04
  %252 = fadd double %251, 5.000000e-01
  %253 = call double @llvm.floor.f64(double %252) #7
  %254 = fptrunc double %253 to float
  %255 = fcmp olt float %254, 0x41DFFFFFE0000000
  %256 = select i1 %255, float %254, float 0x41DFFFFFE0000000
  %257 = fcmp ogt float %256, 0xC1DFFFFFE0000000
  %258 = select i1 %257, float %256, float 0xC1DFFFFFE0000000
  %259 = fptosi float %258 to i32
  %260 = call i32 @llvm.bswap.i32(i32 %259) #7
  %261 = getelementptr inbounds i8, i8* %387, i64 60
  %262 = bitcast i8* %261 to i32*
  store i32 %260, i32* %262, align 4
  %263 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 2
  %264 = load float, float* %263, align 4
  %265 = fpext float %264 to double
  %266 = fmul double %265, 6.553600e+04
  %267 = fadd double %266, 5.000000e-01
  %268 = call double @llvm.floor.f64(double %267) #7
  %269 = fptrunc double %268 to float
  %270 = fcmp olt float %269, 0x41DFFFFFE0000000
  %271 = select i1 %270, float %269, float 0x41DFFFFFE0000000
  %272 = fcmp ogt float %271, 0xC1DFFFFFE0000000
  %273 = select i1 %272, float %271, float 0xC1DFFFFFE0000000
  %274 = fptosi float %273 to i32
  %275 = call i32 @llvm.bswap.i32(i32 %274) #7
  %276 = getelementptr inbounds i8, i8* %387, i64 64
  %277 = bitcast i8* %276 to i32*
  store i32 %275, i32* %277, align 4
  %278 = getelementptr inbounds i8, i8* %387, i64 68
  %279 = bitcast i8* %278 to i32*
  store i32 1634886000, i32* %279, align 4
  %280 = getelementptr inbounds i8, i8* %387, i64 72
  %281 = bitcast i8* %280 to i32*
  store i32 0, i32* %281, align 4
  %282 = getelementptr inbounds i8, i8* %387, i64 76
  %283 = bitcast i8* %282 to i32*
  store i32 1024, i32* %283, align 4
  %284 = load float, float* %8, align 4
  %285 = fpext float %284 to double
  %286 = fmul double %285, 6.553600e+04
  %287 = fadd double %286, 5.000000e-01
  %288 = call double @llvm.floor.f64(double %287) #7
  %289 = fptrunc double %288 to float
  %290 = fcmp olt float %289, 0x41DFFFFFE0000000
  %291 = select i1 %290, float %289, float 0x41DFFFFFE0000000
  %292 = fcmp ogt float %291, 0xC1DFFFFFE0000000
  %293 = select i1 %292, float %291, float 0xC1DFFFFFE0000000
  %294 = fptosi float %293 to i32
  %295 = call i32 @llvm.bswap.i32(i32 %294) #7
  %296 = getelementptr inbounds i8, i8* %387, i64 80
  %297 = bitcast i8* %296 to i32*
  store i32 %295, i32* %297, align 4
  %298 = load float, float* %16, align 4
  %299 = fpext float %298 to double
  %300 = fmul double %299, 6.553600e+04
  %301 = fadd double %300, 5.000000e-01
  %302 = call double @llvm.floor.f64(double %301) #7
  %303 = fptrunc double %302 to float
  %304 = fcmp olt float %303, 0x41DFFFFFE0000000
  %305 = select i1 %304, float %303, float 0x41DFFFFFE0000000
  %306 = fcmp ogt float %305, 0xC1DFFFFFE0000000
  %307 = select i1 %306, float %305, float 0xC1DFFFFFE0000000
  %308 = fptosi float %307 to i32
  %309 = call i32 @llvm.bswap.i32(i32 %308) #7
  %310 = getelementptr inbounds i8, i8* %387, i64 84
  %311 = bitcast i8* %310 to i32*
  store i32 %309, i32* %311, align 4
  %312 = load float, float* %18, align 4
  %313 = fpext float %312 to double
  %314 = fmul double %313, 6.553600e+04
  %315 = fadd double %314, 5.000000e-01
  %316 = call double @llvm.floor.f64(double %315) #7
  %317 = fptrunc double %316 to float
  %318 = fcmp olt float %317, 0x41DFFFFFE0000000
  %319 = select i1 %318, float %317, float 0x41DFFFFFE0000000
  %320 = fcmp ogt float %319, 0xC1DFFFFFE0000000
  %321 = select i1 %320, float %319, float 0xC1DFFFFFE0000000
  %322 = fptosi float %321 to i32
  %323 = call i32 @llvm.bswap.i32(i32 %322) #7
  %324 = getelementptr inbounds i8, i8* %387, i64 88
  %325 = bitcast i8* %324 to i32*
  store i32 %323, i32* %325, align 4
  %326 = load float, float* %21, align 4
  %327 = fpext float %326 to double
  %328 = fmul double %327, 6.553600e+04
  %329 = fadd double %328, 5.000000e-01
  %330 = call double @llvm.floor.f64(double %329) #7
  %331 = fptrunc double %330 to float
  %332 = fcmp olt float %331, 0x41DFFFFFE0000000
  %333 = select i1 %332, float %331, float 0x41DFFFFFE0000000
  %334 = fcmp ogt float %333, 0xC1DFFFFFE0000000
  %335 = select i1 %334, float %333, float 0xC1DFFFFFE0000000
  %336 = fptosi float %335 to i32
  %337 = call i32 @llvm.bswap.i32(i32 %336) #7
  %338 = getelementptr inbounds i8, i8* %387, i64 92
  %339 = bitcast i8* %338 to i32*
  store i32 %337, i32* %339, align 4
  %340 = load float, float* %24, align 4
  %341 = fpext float %340 to double
  %342 = fmul double %341, 6.553600e+04
  %343 = fadd double %342, 5.000000e-01
  %344 = call double @llvm.floor.f64(double %343) #7
  %345 = fptrunc double %344 to float
  %346 = fcmp olt float %345, 0x41DFFFFFE0000000
  %347 = select i1 %346, float %345, float 0x41DFFFFFE0000000
  %348 = fcmp ogt float %347, 0xC1DFFFFFE0000000
  %349 = select i1 %348, float %347, float 0xC1DFFFFFE0000000
  %350 = fptosi float %349 to i32
  %351 = call i32 @llvm.bswap.i32(i32 %350) #7
  %352 = getelementptr inbounds i8, i8* %387, i64 96
  %353 = bitcast i8* %352 to i32*
  store i32 %351, i32* %353, align 4
  %354 = load float, float* %27, align 4
  %355 = fpext float %354 to double
  %356 = fmul double %355, 6.553600e+04
  %357 = fadd double %356, 5.000000e-01
  %358 = call double @llvm.floor.f64(double %357) #7
  %359 = fptrunc double %358 to float
  %360 = fcmp olt float %359, 0x41DFFFFFE0000000
  %361 = select i1 %360, float %359, float 0x41DFFFFFE0000000
  %362 = fcmp ogt float %361, 0xC1DFFFFFE0000000
  %363 = select i1 %362, float %361, float 0xC1DFFFFFE0000000
  %364 = fptosi float %363 to i32
  %365 = call i32 @llvm.bswap.i32(i32 %364) #7
  %366 = getelementptr inbounds i8, i8* %387, i64 100
  %367 = bitcast i8* %366 to i32*
  store i32 %365, i32* %367, align 4
  %368 = load float, float* %30, align 4
  %369 = fpext float %368 to double
  %370 = fmul double %369, 6.553600e+04
  %371 = fadd double %370, 5.000000e-01
  %372 = call double @llvm.floor.f64(double %371) #7
  %373 = fptrunc double %372 to float
  %374 = fcmp olt float %373, 0x41DFFFFFE0000000
  %375 = select i1 %374, float %373, float 0x41DFFFFFE0000000
  %376 = fcmp ogt float %375, 0xC1DFFFFFE0000000
  %377 = select i1 %376, float %375, float 0xC1DFFFFFE0000000
  %378 = fptosi float %377 to i32
  %379 = call i32 @llvm.bswap.i32(i32 %378) #7
  %380 = getelementptr inbounds i8, i8* %387, i64 104
  %381 = bitcast i8* %380 to i32*
  store i32 %379, i32* %381, align 4
  %382 = getelementptr inbounds i8, i8* %387, i64 108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %382, i8* align 16 bitcast ([5 x i32]* @_ZL14kWhitePointTag to i8*), i64 20, i1 false)
  %383 = getelementptr inbounds i8, i8* %387, i64 128
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %383, i8* align 16 bitcast ([7 x i32]* @_ZL19kCopyrightTagHeader to i8*), i64 28, i1 false)
  %384 = getelementptr inbounds i8, i8* %387, i64 156
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 16 getelementptr inbounds ([32 x i8], [32 x i8]* @_ZL17kCopyrightTagBody, i64 0, i64 0), i64 32, i1 false)
  call void @_ZN6SkData14MakeFromMallocEPKvm(%class.sk_sp* sret %0, i8* %52, i64 536) #7
  br label %409

385:                                              ; preds = %385, %115
  %386 = phi i64 [ %116, %115 ], [ %407, %385 ]
  %387 = phi i8* [ %117, %115 ], [ %406, %385 ]
  %388 = getelementptr inbounds i8, i8* %387, i64 1
  store i8 0, i8* %387, align 1
  %389 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 %386
  %390 = load i8, i8* %389, align 4
  %391 = getelementptr inbounds i8, i8* %387, i64 2
  store i8 %390, i8* %388, align 1
  %392 = or i64 %386, 1
  %393 = getelementptr inbounds i8, i8* %387, i64 3
  store i8 0, i8* %391, align 1
  %394 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 %392
  %395 = load i8, i8* %394, align 1
  %396 = getelementptr inbounds i8, i8* %387, i64 4
  store i8 %395, i8* %393, align 1
  %397 = or i64 %386, 2
  %398 = getelementptr inbounds i8, i8* %387, i64 5
  store i8 0, i8* %396, align 1
  %399 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 %397
  %400 = load i8, i8* %399, align 2
  %401 = getelementptr inbounds i8, i8* %387, i64 6
  store i8 %400, i8* %398, align 1
  %402 = or i64 %386, 3
  %403 = getelementptr inbounds i8, i8* %387, i64 7
  store i8 0, i8* %401, align 1
  %404 = getelementptr inbounds [44 x i8], [44 x i8]* %6, i64 0, i64 %402
  %405 = load i8, i8* %404, align 1
  %406 = getelementptr inbounds i8, i8* %387, i64 8
  store i8 %405, i8* %403, align 1
  %407 = add nuw nsw i64 %386, 4
  %408 = icmp eq i64 %407, 44
  br i1 %408, label %131, label %385, !llvm.loop !5

409:                                              ; preds = %131, %49
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6SkData14MakeFromMallocEPKvm(%class.sk_sp* sret, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #5

declare void @_ZN5SkMD5C1Ev(%class.SkMD5*) unnamed_addr #3

declare zeroext i1 @_ZN5SkMD55writeEPKvm(%class.SkMD5*, i8*, i64) unnamed_addr #3

declare { i64, i64 } @_ZN5SkMD56finishEv(%class.SkMD5*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN9SkWStreamD2Ev(%class.SkWStream*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #4

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
