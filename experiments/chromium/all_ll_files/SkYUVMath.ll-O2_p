; ModuleID = '../../third_party/skia/src/core/SkYUVMath.cpp'
source_filename = "../../third_party/skia/src/core/SkYUVMath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::YUVCoeff" = type { float, float, i32, i32 }
%class.SkM44 = type { [16 x float] }

@_ZL20JPEG_full_yuv_to_rgb = internal constant [20 x float] [float 1.000000e+00, float -0.000000e+00, float 0x3FF66E9780000000, float 0.000000e+00, float 0xBFE6851CA0000000, float 1.000000e+00, float 0xBFD6065300000000, float 0xBFE6DA33C0000000, float 0.000000e+00, float 0x3FE0FFAE40000000, float 1.000000e+00, float 0x3FFC5A1CA0000000, float 0.000000e+00, float 0.000000e+00, float 0xBFEC769440000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL25Rec601_limited_yuv_to_rgb = internal constant [20 x float] [float 0x3FF2A15120000000, float -0.000000e+00, float 0x3FF98953A0000000, float 0.000000e+00, float 0xBFEBF97680000000, float 0x3FF2A15120000000, float 0xBFD912A0E0000000, float 0xBFEA03D580000000, float 0.000000e+00, float 0x3FE1036CA0000000, float 0x3FF2A15120000000, float 0x4000234A80000000, float 0.000000e+00, float 0.000000e+00, float 0xBFF15EBEA0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL22Rec709_full_yuv_to_rgb = internal constant [20 x float] [float 1.000000e+00, float -0.000000e+00, float 0x3FF9326180000000, float 0.000000e+00, float 0xBFE94BAD80000000, float 1.000000e+00, float 0xBFC7FA3BA0000000, float 0xBFDDF5BE60000000, float 0.000000e+00, float 0x3FD50E8000000000, float 1.000000e+00, float 0x3FFDB089A0000000, float -0.000000e+00, float 0.000000e+00, float 0xBFEDCE5920000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL25Rec709_limited_yuv_to_rgb = internal constant [20 x float] [float 0x3FF2A15120000000, float -0.000000e+00, float 0x3FFCAF1120000000, float 0.000000e+00, float 0xBFEF225D80000000, float 0x3FF2A15120000000, float 0xBFCB4BBE40000000, float 0xBFE10D9720000000, float 0.000000e+00, float 0x3FD34B7F60000000, float 0x3FF2A15120000000, float 0x4000E63300000000, float -0.000000e+00, float 0.000000e+00, float 0xBFF2226A20000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL27BT2020_8bit_full_yuv_to_rgb = internal constant [20 x float] [float 1.000000e+00, float -0.000000e+00, float 0x3FF797F620000000, float 0.000000e+00, float 0xBFE7AFA500000000, float 1.000000e+00, float 0xBFC51012A0000000, float 0xBFE2488620000000, float 0.000000e+00, float 0x3FD7A42F20000000, float 1.000000e+00, float 0x3FFE1A36E0000000, float -0.000000e+00, float 0.000000e+00, float 0xBFEE386F40000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL30BT2020_8bit_limited_yuv_to_rgb = internal constant [20 x float] [float 0x3FF2A15120000000, float -0.000000e+00, float 0x3FFADBD940000000, float 0.000000e+00, float 0xBFED4D50E0000000, float 0x3FF2A15120000000, float 0xBFC7FA4C60000000, float 0xBFE4D04600000000, float 0.000000e+00, float 0x3FD63CC080000000, float 0x3FF2A15120000000, float 0x4001225960000000, float -0.000000e+00, float 0.000000e+00, float 0xBFF25ECD40000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL28BT2020_10bit_full_yuv_to_rgb = internal constant [20 x float] [float 1.000000e+00, float -0.000000e+00, float 0x3FF797F620000000, float 0.000000e+00, float 0xBFE79DDE40000000, float 1.000000e+00, float 0xBFC51012A0000000, float 0xBFE2488620000000, float 0.000000e+00, float 0x3FD79270C0000000, float 1.000000e+00, float 0x3FFE1A36E0000000, float -0.000000e+00, float 0.000000e+00, float 0xBFEE21C040000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL31BT2020_10bit_limited_yuv_to_rgb = internal constant [20 x float] [float 0x3FF2AF5780000000, float -0.000000e+00, float 0x3FFAF01220000000, float 0.000000e+00, float 0xBFED4D50E0000000, float 0x3FF2AF5780000000, float 0xBFC80C5A80000000, float 0xBFE4DFF1E0000000, float 0.000000e+00, float 0x3FD63CC080000000, float 0x3FF2AF5780000000, float 0x40012F4060000000, float -0.000000e+00, float 0.000000e+00, float 0xBFF25ECD40000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL28BT2020_12bit_full_yuv_to_rgb = internal constant [20 x float] [float 1.000000e+00, float -0.000000e+00, float 0x3FF797F620000000, float 0.000000e+00, float 0xBFE7996FA0000000, float 1.000000e+00, float 0xBFC51012A0000000, float 0xBFE2488620000000, float 0.000000e+00, float 0x3FD78E0440000000, float 1.000000e+00, float 0x3FFE1A36E0000000, float -0.000000e+00, float 0.000000e+00, float 0xBFEE1C1940000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL31BT2020_12bit_limited_yuv_to_rgb = internal constant [20 x float] [float 0x3FF2B2D900000000, float -0.000000e+00, float 0x3FFAF52120000000, float 0.000000e+00, float 0xBFED4D50E0000000, float 0x3FF2B2D900000000, float 0xBFC810E020000000, float 0xBFE4E3DE60000000, float 0.000000e+00, float 0x3FD63CC080000000, float 0x3FF2B2D900000000, float 0x4001327A20000000, float -0.000000e+00, float 0.000000e+00, float 0xBFF25ECD40000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@yuv_to_rgb_array = hidden local_unnamed_addr global [10 x float*] [float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL20JPEG_full_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL25Rec601_limited_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL22Rec709_full_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL25Rec709_limited_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL27BT2020_8bit_full_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL30BT2020_8bit_limited_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL28BT2020_10bit_full_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL31BT2020_10bit_limited_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL28BT2020_12bit_full_yuv_to_rgb, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL31BT2020_12bit_limited_yuv_to_rgb, i32 0, i32 0)], align 16
@_ZL20JPEG_full_rgb_to_yuv = internal constant [20 x float] [float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000, float 0.000000e+00, float 0.000000e+00, float 0xBFC5992420000000, float 0xBFD5336DE0000000, float 5.000000e-01, float 0.000000e+00, float 0x3FE0101080000000, float 5.000000e-01, float 0xBFDACBC8C0000000, float 0xBFB4D0DD00000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL25Rec601_limited_rgb_to_yuv = internal constant [20 x float] [float 0x3FD06F36E0000000, float 0x3FE021D320000000, float 0x3FB9105E20000000, float 0.000000e+00, float 0x3FB0100E60000000, float 0xBFC2F8F8A0000000, float 0xBFD29FA120000000, float 0x3FDC1C1D60000000, float 0.000000e+00, float 0x3FE0101080000000, float 0x3FDC1C1D60000000, float 0xBFD789D6A0000000, float 0xBFB2490A40000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL22Rec709_full_rgb_to_yuv = internal constant [20 x float] [float 0x3FCB367A00000000, float 0x3FE6E2EB20000000, float 0x3FB27BB300000000, float 0.000000e+00, float 0.000000e+00, float 0xBFBD549740000000, float 0xBFD8AADA40000000, float 5.000000e-01, float 0.000000e+00, float 0x3FE0101080000000, float 5.000000e-01, float 0xBFDD10D7C0000000, float 0xBFA7794200000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL25Rec709_limited_rgb_to_yuv = internal constant [20 x float] [float 0x3FC75EFA60000000, float 0x3FE3A7C7C0000000, float 0x3FAFBF61A0000000, float 0.000000e+00, float 0x3FB0100E60000000, float 0xBFB9C3CE20000000, float 0xBFD5AB29E0000000, float 0x3FDC1C1D60000000, float 0.000000e+00, float 0x3FE0101080000000, float 0x3FDC1C1D60000000, float 0xBFD9884400000000, float 0xBFA49ECB40000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL27BT2020_8bit_full_rgb_to_yuv = internal constant [20 x float] [float 0x3FD0D013A0000000, float 0x3FE5B22D00000000, float 0x3FAE5C91E0000000, float 0.000000e+00, float 0.000000e+00, float 0xBFC1DF6560000000, float 0xBFD7104D60000000, float 5.000000e-01, float 0.000000e+00, float 0x3FE0101080000000, float 5.000000e-01, float 0xBFDD6D2240000000, float 0xBFA496EDE0000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL30BT2020_8bit_limited_rgb_to_yuv = internal constant [20 x float] [float 0x3FCCE0E300000000, float 0x3FE2A20DE0000000, float 0x3FAA133C20000000, float 0.000000e+00, float 0x3FB0100E60000000, float 0xBFBF665160000000, float 0xBFD44284E0000000, float 0x3FDC1C1D60000000, float 0.000000e+00, float 0x3FE0101080000000, float 0x3FDC1C1D60000000, float 0xBFD9D95580000000, float 0xBFA2163FE0000000, float 0.000000e+00, float 0x3FE0101080000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL28BT2020_10bit_full_rgb_to_yuv = internal constant [20 x float] [float 0x3FD0D013A0000000, float 0x3FE5B22D00000000, float 0x3FAE5C91E0000000, float 0.000000e+00, float 0.000000e+00, float 0xBFC1DF6560000000, float 0xBFD7104D60000000, float 5.000000e-01, float 0.000000e+00, float 0x3FE0040180000000, float 5.000000e-01, float 0xBFDD6D2240000000, float 0xBFA496EDE0000000, float 0.000000e+00, float 0x3FE0040180000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL31BT2020_10bit_limited_rgb_to_yuv = internal constant [20 x float] [float 0x3FCCCB31C0000000, float 0x3FE2941200000000, float 0x3FA9FFB480000000, float 0.000000e+00, float 0x3FB003FF60000000, float 0xBFBF4ECA60000000, float 0xBFD4335080000000, float 0x3FDC070320000000, float 0.000000e+00, float 0x3FE0040180000000, float 0x3FDC070320000000, float 0xBFD9C5EF60000000, float 0xBFA2089E40000000, float 0.000000e+00, float 0x3FE0040180000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL28BT2020_12bit_full_rgb_to_yuv = internal constant [20 x float] [float 0x3FD0D013A0000000, float 0x3FE5B22D00000000, float 0x3FAE5C91E0000000, float 0.000000e+00, float 0.000000e+00, float 0xBFC1DF6560000000, float 0xBFD7104D60000000, float 5.000000e-01, float 0.000000e+00, float 0x3FE000FFE0000000, float 5.000000e-01, float 0xBFDD6D2240000000, float 0xBFA496EDE0000000, float 0.000000e+00, float 0x3FE000FFE0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@_ZL31BT2020_12bit_limited_rgb_to_yuv = internal constant [20 x float] [float 0x3FCCC5D200000000, float 0x3FE29094A0000000, float 0x3FA9FADB00000000, float 0.000000e+00, float 0x3FB000FBA0000000, float 0xBFBF48E480000000, float 0xBFD42F87A0000000, float 0x3FDC01C0C0000000, float 0.000000e+00, float 0x3FE000FFE0000000, float 0x3FDC01C0C0000000, float 0xBFD9C11A20000000, float 0xBFA20535C0000000, float 0.000000e+00, float 0x3FE000FFE0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], align 16
@rgb_to_yuv_array = hidden local_unnamed_addr global [10 x float*] [float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL20JPEG_full_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL25Rec601_limited_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL22Rec709_full_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL25Rec709_limited_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL27BT2020_8bit_full_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL30BT2020_8bit_limited_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL28BT2020_10bit_full_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL31BT2020_10bit_limited_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL28BT2020_12bit_full_rgb_to_yuv, i32 0, i32 0), float* getelementptr inbounds ([20 x float], [20 x float]* @_ZL31BT2020_12bit_limited_rgb_to_yuv, i32 0, i32 0)], align 16
@_ZN12_GLOBAL__N_16gCoeffE = internal unnamed_addr constant [10 x %"struct.(anonymous namespace)::YUVCoeff"] [%"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD322D0E0000000, float 0x3FBD2F1AA0000000, i32 8, i32 0 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD322D0E0000000, float 0x3FBD2F1AA0000000, i32 8, i32 1 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FCB367A00000000, float 0x3FB27BB300000000, i32 8, i32 0 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FCB367A00000000, float 0x3FB27BB300000000, i32 8, i32 1 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 8, i32 0 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 8, i32 1 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 10, i32 0 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 10, i32 1 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 12, i32 0 }, %"struct.(anonymous namespace)::YUVCoeff" { float 0x3FD0D013A0000000, float 0x3FAE5C91E0000000, i32 12, i32 1 }], align 16
@.str = private unnamed_addr constant [10 x i8] c"JPEG_full\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Rec601_limited\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"Rec709_full\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Rec709_limited\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"BT2020_8bit_full\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"BT2020_8bit_limited\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"BT2020_10bit_full\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"BT2020_10bit_limited\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"BT2020_12bit_full\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"BT2020_12bit_limited\00", align 1
@__const._ZL4dumpPKf15SkYUVColorSpaceb.names = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [11 x i8] c"yuv_to_rgb\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"rgb_to_yuv\00", align 1
@__const._ZL4dumpPKf15SkYUVColorSpaceb.dirnames = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [46 x i8] c"../../third_party/skia/src/core/SkYUVMath.cpp\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"const float %s_%s[] = {\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c" %9.6ff,\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"};\0A\00", align 1
@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z21SkColorMatrix_RGB2YUV15SkYUVColorSpacePf(i32, float* nocapture) local_unnamed_addr #0 {
  %3 = icmp ult i32 %0, 10
  br i1 %3, label %4, label %10

4:                                                ; preds = %2
  %5 = bitcast float* %1 to i8*
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [10 x float*], [10 x float*]* @rgb_to_yuv_array, i64 0, i64 %6
  %8 = bitcast float** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %9, i64 80, i1 false)
  br label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds float, float* %1, i64 1
  %12 = bitcast float* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 76, i1 false)
  %13 = getelementptr inbounds float, float* %1, i64 18
  store float 1.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds float, float* %1, i64 12
  store float 1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds float, float* %1, i64 6
  store float 1.000000e+00, float* %15, align 4
  store float 1.000000e+00, float* %1, align 4
  br label %16

16:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z21SkColorMatrix_YUV2RGB15SkYUVColorSpacePf(i32, float* nocapture) local_unnamed_addr #0 {
  %3 = icmp ult i32 %0, 10
  br i1 %3, label %4, label %10

4:                                                ; preds = %2
  %5 = bitcast float* %1 to i8*
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [10 x float*], [10 x float*]* @yuv_to_rgb_array, i64 0, i64 %6
  %8 = bitcast float** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %9, i64 80, i1 false)
  br label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds float, float* %1, i64 1
  %12 = bitcast float* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 76, i1 false)
  %13 = getelementptr inbounds float, float* %1, i64 18
  store float 1.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds float, float* %1, i64 12
  store float 1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds float, float* %1, i64 6
  store float 1.000000e+00, float* %15, align 4
  store float 1.000000e+00, float* %1, align 4
  br label %16

16:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z33SkColorMatrix_DumpYUVMatrixTablesv() local_unnamed_addr #0 {
  %1 = alloca [20 x float], align 16
  %2 = alloca %class.SkM44, align 4
  %3 = alloca %class.SkM44, align 4
  %4 = alloca [20 x float], align 16
  %5 = bitcast [20 x float]* %1 to i8*
  %6 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 0
  %7 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 1
  %8 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 2
  %9 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 3
  %10 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 4
  %11 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 5
  %12 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 6
  %13 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 7
  %14 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 8
  %15 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 9
  %16 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 10
  %17 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 11
  %18 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 12
  %19 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 13
  %20 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 14
  %21 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 15
  %22 = getelementptr inbounds [20 x float], [20 x float]* %1, i64 0, i64 19
  %23 = bitcast %class.SkM44* %2 to i8*
  %24 = bitcast %class.SkM44* %3 to i8*
  %25 = bitcast [20 x float]* %1 to i32*
  %26 = bitcast float* %7 to i32*
  %27 = bitcast float* %8 to i32*
  %28 = bitcast float* %10 to i32*
  %29 = bitcast float* %11 to i32*
  %30 = bitcast float* %12 to i32*
  %31 = bitcast float* %13 to i32*
  %32 = bitcast float* %15 to i32*
  %33 = bitcast float* %16 to i32*
  %34 = bitcast float* %17 to i32*
  %35 = bitcast float* %18 to i32*
  %36 = bitcast float* %20 to i32*
  %37 = bitcast %class.SkM44* %2 to i32*
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 1
  %39 = bitcast float* %38 to i32*
  %40 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 2
  %41 = bitcast float* %40 to i32*
  %42 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 3
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 4
  %44 = bitcast float* %43 to i32*
  %45 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 5
  %46 = bitcast float* %45 to i32*
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 6
  %48 = bitcast float* %47 to i32*
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 7
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 8
  %51 = bitcast float* %50 to i32*
  %52 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 9
  %53 = bitcast float* %52 to i32*
  %54 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 10
  %55 = bitcast float* %54 to i32*
  %56 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 11
  %57 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 12
  %58 = bitcast float* %57 to i32*
  %59 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 13
  %60 = bitcast float* %59 to i32*
  %61 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 14
  %62 = bitcast float* %61 to i32*
  %63 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 15
  %64 = bitcast [20 x float]* %4 to i8*
  %65 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 0
  %66 = bitcast %class.SkM44* %3 to i32*
  %67 = bitcast [20 x float]* %4 to i32*
  %68 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 4
  %69 = bitcast float* %68 to i32*
  %70 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 1
  %71 = bitcast float* %70 to i32*
  %72 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 8
  %73 = bitcast float* %72 to i32*
  %74 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 2
  %75 = bitcast float* %74 to i32*
  %76 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 3
  %77 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 12
  %78 = bitcast float* %77 to i32*
  %79 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 4
  %80 = bitcast float* %79 to i32*
  %81 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 1
  %82 = bitcast float* %81 to i32*
  %83 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 5
  %84 = bitcast float* %83 to i32*
  %85 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 5
  %86 = bitcast float* %85 to i32*
  %87 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 6
  %88 = bitcast float* %87 to i32*
  %89 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 9
  %90 = bitcast float* %89 to i32*
  %91 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 7
  %92 = bitcast float* %91 to i32*
  %93 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 8
  %94 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 13
  %95 = bitcast float* %94 to i32*
  %96 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 9
  %97 = bitcast float* %96 to i32*
  %98 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 2
  %99 = bitcast float* %98 to i32*
  %100 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 10
  %101 = bitcast float* %100 to i32*
  %102 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 6
  %103 = bitcast float* %102 to i32*
  %104 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 11
  %105 = bitcast float* %104 to i32*
  %106 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 10
  %107 = bitcast float* %106 to i32*
  %108 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 12
  %109 = bitcast float* %108 to i32*
  %110 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 13
  %111 = getelementptr inbounds %class.SkM44, %class.SkM44* %3, i64 0, i32 0, i64 14
  %112 = bitcast float* %111 to i32*
  %113 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 14
  %114 = bitcast float* %113 to i32*
  %115 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 19
  %116 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 15
  %117 = bitcast float* %21 to <4 x float>*
  %118 = bitcast float* %116 to <4 x float>*
  br label %120

119:                                              ; preds = %153
  ret void

120:                                              ; preds = %153, %0
  %121 = phi i64 [ 0, %0 ], [ %197, %153 ]
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 80, i1 false)
  %122 = getelementptr inbounds [10 x %"struct.(anonymous namespace)::YUVCoeff"], [10 x %"struct.(anonymous namespace)::YUVCoeff"]* @_ZN12_GLOBAL__N_16gCoeffE, i64 0, i64 %121, i32 0
  %123 = load float, float* %122, align 16
  %124 = getelementptr inbounds [10 x %"struct.(anonymous namespace)::YUVCoeff"], [10 x %"struct.(anonymous namespace)::YUVCoeff"]* @_ZN12_GLOBAL__N_16gCoeffE, i64 0, i64 %121, i32 1
  %125 = load float, float* %124, align 4
  %126 = fsub float 1.000000e+00, %123
  %127 = fsub float %126, %125
  %128 = fsub float 1.000000e+00, %125
  %129 = fdiv float 5.000000e-01, %128
  %130 = fdiv float 5.000000e-01, %126
  %131 = getelementptr inbounds [10 x %"struct.(anonymous namespace)::YUVCoeff"], [10 x %"struct.(anonymous namespace)::YUVCoeff"]* @_ZN12_GLOBAL__N_16gCoeffE, i64 0, i64 %121, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = add nsw i32 %132, -8
  %134 = shl nsw i32 -1, %132
  %135 = xor i32 %134, -1
  %136 = sitofp i32 %135 to float
  %137 = shl i32 128, %133
  %138 = sitofp i32 %137 to float
  %139 = fdiv float %138, %136
  %140 = lshr i64 682, %121
  %141 = and i64 %140, 1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %153, label %143

143:                                              ; preds = %120
  %144 = shl i32 219, %133
  %145 = sitofp i32 %144 to float
  %146 = fdiv float %145, %136
  %147 = shl i32 16, %133
  %148 = sitofp i32 %147 to float
  %149 = fdiv float %148, %136
  %150 = shl i32 224, %133
  %151 = sitofp i32 %150 to float
  %152 = fdiv float %151, %136
  br label %153

153:                                              ; preds = %120, %143
  %154 = phi float [ %146, %143 ], [ 1.000000e+00, %120 ]
  %155 = phi float [ %149, %143 ], [ 0.000000e+00, %120 ]
  %156 = phi float [ %152, %143 ], [ 1.000000e+00, %120 ]
  %157 = fsub float -0.000000e+00, %127
  store float 0.000000e+00, float* %9, align 4
  store float %155, float* %10, align 16
  store float 0.000000e+00, float* %14, align 16
  store float %139, float* %15, align 4
  store float 0.000000e+00, float* %19, align 4
  store float %139, float* %20, align 8
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %117, align 4
  store float 0.000000e+00, float* %22, align 4
  %158 = fmul float %123, %154
  store float %158, float* %6, align 16
  %159 = fmul float %127, %154
  store float %159, float* %7, align 4
  %160 = fmul float %125, %154
  store float %160, float* %8, align 8
  %161 = fmul float %129, %156
  %162 = fmul float %123, %161
  %163 = fsub float -0.000000e+00, %162
  store float %163, float* %11, align 4
  %164 = fmul float %161, %157
  store float %164, float* %12, align 8
  %165 = fmul float %128, %161
  store float %165, float* %13, align 4
  %166 = fmul float %130, %156
  %167 = fmul float %126, %166
  store float %167, float* %16, align 8
  %168 = fmul float %166, %157
  store float %168, float* %17, align 4
  %169 = fmul float %125, %166
  %170 = fsub float -0.000000e+00, %169
  store float %170, float* %18, align 16
  %171 = trunc i64 %121 to i32
  call fastcc void @_ZL4dumpPKf15SkYUVColorSpaceb(float* nonnull %6, i32 %171, i1 zeroext true)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %23) #3
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %24) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #3
  %172 = load i32, i32* %25, align 16
  %173 = load i32, i32* %26, align 4
  %174 = load i32, i32* %27, align 8
  %175 = load i32, i32* %28, align 16
  %176 = load i32, i32* %29, align 4
  %177 = load i32, i32* %30, align 8
  %178 = load i32, i32* %31, align 4
  %179 = load i32, i32* %32, align 4
  %180 = load i32, i32* %33, align 8
  %181 = load i32, i32* %34, align 4
  %182 = load i32, i32* %35, align 16
  %183 = load i32, i32* %36, align 8
  store i32 %172, i32* %37, align 4
  store i32 %176, i32* %39, align 4
  store i32 %180, i32* %41, align 4
  store float 0.000000e+00, float* %42, align 4
  store i32 %173, i32* %44, align 4
  store i32 %177, i32* %46, align 4
  store i32 %181, i32* %48, align 4
  store float 0.000000e+00, float* %49, align 4
  store i32 %174, i32* %51, align 4
  store i32 %178, i32* %53, align 4
  store i32 %182, i32* %55, align 4
  store float 0.000000e+00, float* %56, align 4
  store i32 %175, i32* %58, align 4
  store i32 %179, i32* %60, align 4
  store i32 %183, i32* %62, align 4
  store float 1.000000e+00, float* %63, align 4
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %64) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 -1, i64 80, i1 false)
  %184 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* nonnull %2, %class.SkM44* nonnull %3) #3
  %185 = load i32, i32* %66, align 4
  store i32 %185, i32* %67, align 16
  %186 = load i32, i32* %69, align 4
  store i32 %186, i32* %71, align 4
  %187 = load i32, i32* %73, align 4
  store i32 %187, i32* %75, align 8
  store float 0.000000e+00, float* %76, align 4
  %188 = load i32, i32* %78, align 4
  store i32 %188, i32* %80, align 16
  %189 = load i32, i32* %82, align 4
  store i32 %189, i32* %84, align 4
  %190 = load i32, i32* %86, align 4
  store i32 %190, i32* %88, align 8
  %191 = load i32, i32* %90, align 4
  store i32 %191, i32* %92, align 4
  store float 0.000000e+00, float* %93, align 16
  %192 = load i32, i32* %95, align 4
  store i32 %192, i32* %97, align 4
  %193 = load i32, i32* %99, align 4
  store i32 %193, i32* %101, align 8
  %194 = load i32, i32* %103, align 4
  store i32 %194, i32* %105, align 4
  %195 = load i32, i32* %107, align 4
  store i32 %195, i32* %109, align 16
  store float 0.000000e+00, float* %110, align 4
  %196 = load i32, i32* %112, align 4
  store i32 %196, i32* %114, align 8
  store float 0.000000e+00, float* %115, align 4
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %118, align 4
  call fastcc void @_ZL4dumpPKf15SkYUVColorSpaceb(float* nonnull %65, i32 %171, i1 zeroext false)
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %64) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %23) #3
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %5) #3
  %197 = add nuw nsw i64 %121, 1
  %198 = icmp eq i64 %197, 10
  br i1 %198, label %119, label %120
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL4dumpPKf15SkYUVColorSpaceb(float* nocapture readonly, i32, i1 zeroext) unnamed_addr #0 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @__const._ZL4dumpPKf15SkYUVColorSpaceb.names, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  %7 = zext i1 %2 to i64
  %8 = getelementptr inbounds [2 x i8*], [2 x i8*]* @__const._ZL4dumpPKf15SkYUVColorSpaceb.dirnames, i64 0, i64 %7
  %9 = load i8*, i8** %8, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 308, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i8* %6, i8* %9) #3
  br label %11

10:                                               ; preds = %11
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 316, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0)) #3
  ret void

11:                                               ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %33, %11 ]
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 310, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)) #3
  %13 = mul nuw nsw i64 %12, 5
  %14 = getelementptr inbounds float, float* %0, i64 %13
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 312, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), double %16) #3
  %17 = add nuw nsw i64 %13, 1
  %18 = getelementptr inbounds float, float* %0, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 312, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), double %20) #3
  %21 = add nuw nsw i64 %13, 2
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 312, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), double %24) #3
  %25 = add nuw nsw i64 %13, 3
  %26 = getelementptr inbounds float, float* %0, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 312, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), double %28) #3
  %29 = add nuw nsw i64 %13, 4
  %30 = getelementptr inbounds float, float* %0, i64 %29
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 312, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), double %32) #3
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 314, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #3
  %33 = add nuw nsw i64 %12, 1
  %34 = icmp eq i64 %33, 4
  br i1 %34, label %10, label %11
}

declare zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44*, %class.SkM44*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
