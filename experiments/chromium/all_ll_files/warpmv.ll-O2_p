; ModuleID = '../../third_party/dav1d/libdav1d/src/warpmv.c'
source_filename = "../../third_party/dav1d/libdav1d/src/warpmv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dWarpedMotionParams = type { i32, [6 x i32], %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i16, i16, i16, i16 }

@div_lut = internal unnamed_addr constant [257 x i16] [i16 16384, i16 16320, i16 16257, i16 16194, i16 16132, i16 16070, i16 16009, i16 15948, i16 15888, i16 15828, i16 15768, i16 15709, i16 15650, i16 15592, i16 15534, i16 15477, i16 15420, i16 15364, i16 15308, i16 15252, i16 15197, i16 15142, i16 15087, i16 15033, i16 14980, i16 14926, i16 14873, i16 14821, i16 14769, i16 14717, i16 14665, i16 14614, i16 14564, i16 14513, i16 14463, i16 14413, i16 14364, i16 14315, i16 14266, i16 14218, i16 14170, i16 14122, i16 14075, i16 14028, i16 13981, i16 13935, i16 13888, i16 13843, i16 13797, i16 13752, i16 13707, i16 13662, i16 13618, i16 13574, i16 13530, i16 13487, i16 13443, i16 13400, i16 13358, i16 13315, i16 13273, i16 13231, i16 13190, i16 13148, i16 13107, i16 13066, i16 13026, i16 12985, i16 12945, i16 12906, i16 12866, i16 12827, i16 12788, i16 12749, i16 12710, i16 12672, i16 12633, i16 12596, i16 12558, i16 12520, i16 12483, i16 12446, i16 12409, i16 12373, i16 12336, i16 12300, i16 12264, i16 12228, i16 12193, i16 12157, i16 12122, i16 12087, i16 12053, i16 12018, i16 11984, i16 11950, i16 11916, i16 11882, i16 11848, i16 11815, i16 11782, i16 11749, i16 11716, i16 11683, i16 11651, i16 11619, i16 11586, i16 11555, i16 11523, i16 11491, i16 11460, i16 11429, i16 11398, i16 11367, i16 11336, i16 11305, i16 11275, i16 11245, i16 11215, i16 11185, i16 11155, i16 11125, i16 11096, i16 11067, i16 11038, i16 11009, i16 10980, i16 10951, i16 10923, i16 10894, i16 10866, i16 10838, i16 10810, i16 10782, i16 10755, i16 10727, i16 10700, i16 10673, i16 10645, i16 10618, i16 10592, i16 10565, i16 10538, i16 10512, i16 10486, i16 10460, i16 10434, i16 10408, i16 10382, i16 10356, i16 10331, i16 10305, i16 10280, i16 10255, i16 10230, i16 10205, i16 10180, i16 10156, i16 10131, i16 10107, i16 10082, i16 10058, i16 10034, i16 10010, i16 9986, i16 9963, i16 9939, i16 9916, i16 9892, i16 9869, i16 9846, i16 9823, i16 9800, i16 9777, i16 9754, i16 9732, i16 9709, i16 9687, i16 9664, i16 9642, i16 9620, i16 9598, i16 9576, i16 9554, i16 9533, i16 9511, i16 9489, i16 9468, i16 9447, i16 9425, i16 9404, i16 9383, i16 9362, i16 9341, i16 9321, i16 9300, i16 9279, i16 9259, i16 9239, i16 9218, i16 9198, i16 9178, i16 9158, i16 9138, i16 9118, i16 9098, i16 9079, i16 9059, i16 9039, i16 9020, i16 9001, i16 8981, i16 8962, i16 8943, i16 8924, i16 8905, i16 8886, i16 8867, i16 8849, i16 8830, i16 8812, i16 8793, i16 8775, i16 8756, i16 8738, i16 8720, i16 8702, i16 8684, i16 8666, i16 8648, i16 8630, i16 8613, i16 8595, i16 8577, i16 8560, i16 8542, i16 8525, i16 8508, i16 8490, i16 8473, i16 8456, i16 8439, i16 8422, i16 8405, i16 8389, i16 8372, i16 8355, i16 8339, i16 8322, i16 8306, i16 8289, i16 8273, i16 8257, i16 8240, i16 8224, i16 8208, i16 8192], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_get_shear_params(%struct.Dav1dWarpedMotionParams* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 1, i64 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %144, label %5

5:                                                ; preds = %1
  %6 = icmp slt i32 %3, 98303
  %7 = select i1 %6, i32 %3, i32 98303
  %8 = icmp sgt i32 %7, 32768
  %9 = select i1 %8, i32 %7, i32 32768
  %10 = add nsw i32 %9, -65536
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 65536, %9
  %13 = select i1 %11, i32 %12, i32 %10
  %14 = add nuw nsw i32 %13, 32
  %15 = lshr i32 %14, 6
  %16 = sub nsw i32 0, %15
  %17 = select i1 %11, i32 %16, i32 %15
  %18 = trunc i32 %17 to i16
  %19 = shl i16 %18, 6
  %20 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 2, i32 0, i32 0
  store i16 %19, i16* %20, align 4
  %21 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 1, i64 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 32767
  %24 = select i1 %23, i32 %22, i32 32767
  %25 = icmp sgt i32 %24, -32768
  %26 = select i1 %25, i32 %24, i32 -32768
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = add nuw nsw i32 %29, 32
  %31 = lshr i32 %30, 6
  %32 = sub nsw i32 0, %31
  %33 = select i1 %27, i32 %32, i32 %31
  %34 = trunc i32 %33 to i16
  %35 = shl i16 %34, 6
  %36 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 2, i32 0, i32 1
  store i16 %35, i16* %36, align 2
  %37 = tail call i32 @llvm.ctlz.i32(i32 %3, i1 true) #3, !range !2
  %38 = xor i32 %37, 31
  %39 = shl i32 1, %38
  %40 = sub i32 %3, %39
  %41 = icmp ugt i32 %38, 8
  br i1 %41, label %42, label %48

42:                                               ; preds = %5
  %43 = add nsw i32 %38, -9
  %44 = shl i32 1, %43
  %45 = add nsw i32 %40, %44
  %46 = add nsw i32 %38, -8
  %47 = ashr i32 %45, %46
  br label %51

48:                                               ; preds = %5
  %49 = sub nuw nsw i32 8, %38
  %50 = shl i32 %40, %49
  br label %51

51:                                               ; preds = %42, %48
  %52 = phi i32 [ %47, %42 ], [ %50, %48 ]
  %53 = icmp slt i32 %52, 257
  tail call void @llvm.assume(i1 %53) #3
  %54 = add nuw nsw i32 %38, 14
  %55 = sext i32 %52 to i64
  %56 = getelementptr inbounds [257 x i16], [257 x i16]* @div_lut, i64 0, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 1, i64 4
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 16
  %62 = zext i16 %57 to i64
  %63 = mul nsw i64 %61, %62
  %64 = shl i32 16384, %38
  %65 = ashr i32 %64, 1
  %66 = icmp slt i64 %63, 0
  %67 = sub nsw i64 0, %63
  %68 = select i1 %66, i64 %67, i64 %63
  %69 = sext i32 %65 to i64
  %70 = add nsw i64 %68, %69
  %71 = zext i32 %54 to i64
  %72 = ashr i64 %70, %71
  %73 = trunc i64 %72 to i32
  %74 = sub nsw i32 0, %73
  %75 = select i1 %66, i32 %74, i32 %73
  %76 = icmp slt i32 %75, 32767
  %77 = select i1 %76, i32 %75, i32 32767
  %78 = icmp sgt i32 %77, -32768
  %79 = select i1 %78, i32 %77, i32 -32768
  %80 = icmp slt i32 %79, 0
  %81 = sub nsw i32 0, %79
  %82 = select i1 %80, i32 %81, i32 %79
  %83 = add nuw nsw i32 %82, 32
  %84 = lshr i32 %83, 6
  %85 = sub nsw i32 0, %84
  %86 = select i1 %80, i32 %85, i32 %84
  %87 = trunc i32 %86 to i16
  %88 = shl i16 %87, 6
  %89 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 2, i32 0, i32 2
  store i16 %88, i16* %89, align 4
  %90 = sext i32 %22 to i64
  %91 = mul nsw i64 %62, %90
  %92 = mul i64 %91, %60
  %93 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 1, i64 5
  %94 = load i32, i32* %93, align 4
  %95 = icmp slt i64 %92, 0
  %96 = sub nsw i64 0, %92
  %97 = select i1 %95, i64 %96, i64 %92
  %98 = add nsw i64 %97, %69
  %99 = ashr i64 %98, %71
  %100 = trunc i64 %99 to i32
  %101 = sub nsw i32 0, %100
  %102 = select i1 %95, i32 %101, i32 %100
  %103 = sub nsw i32 %94, %102
  %104 = icmp slt i32 %103, 98303
  %105 = select i1 %104, i32 %103, i32 98303
  %106 = icmp sgt i32 %105, 32768
  %107 = select i1 %106, i32 %105, i32 32768
  %108 = add nsw i32 %107, -65536
  %109 = icmp slt i32 %108, 0
  %110 = sub nsw i32 65536, %107
  %111 = select i1 %109, i32 %110, i32 %108
  %112 = add nuw nsw i32 %111, 32
  %113 = lshr i32 %112, 6
  %114 = sub nsw i32 0, %113
  %115 = select i1 %109, i32 %114, i32 %113
  %116 = trunc i32 %115 to i16
  %117 = shl i16 %116, 6
  %118 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %0, i64 0, i32 2, i32 0, i32 3
  store i16 %117, i16* %118, align 2
  %119 = sext i16 %19 to i32
  %120 = icmp slt i32 %119, 0
  %121 = sub nsw i32 0, %119
  %122 = select i1 %120, i32 %121, i32 %119
  %123 = shl nsw i32 %122, 2
  %124 = sext i16 %35 to i32
  %125 = icmp slt i32 %124, 0
  %126 = sub nsw i32 0, %124
  %127 = select i1 %125, i32 %126, i32 %124
  %128 = mul nsw i32 %127, 7
  %129 = add nuw nsw i32 %128, %123
  %130 = icmp sgt i32 %129, 65535
  br i1 %130, label %144, label %131

131:                                              ; preds = %51
  %132 = sext i16 %88 to i32
  %133 = icmp slt i32 %132, 0
  %134 = sub nsw i32 0, %132
  %135 = select i1 %133, i32 %134, i32 %132
  %136 = shl i32 %115, 22
  %137 = ashr exact i32 %136, 16
  %138 = icmp slt i32 %137, 0
  %139 = sub nsw i32 0, %137
  %140 = select i1 %138, i32 %139, i32 %137
  %141 = add nuw nsw i32 %140, %135
  %142 = icmp sgt i32 %141, 16383
  %143 = zext i1 %142 to i32
  br label %144

144:                                              ; preds = %51, %131, %1
  %145 = phi i32 [ 1, %1 ], [ 1, %51 ], [ %143, %131 ]
  ret i32 %145
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @dav1d_set_affine_mv2d(i32, i32, i32, %struct.Dav1dWarpedMotionParams* nocapture, i32, i32) local_unnamed_addr #1 {
  %7 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 0
  %8 = shl i32 %1, 1
  %9 = add nsw i32 %8, -1
  %10 = shl i32 %0, 1
  %11 = add nsw i32 %10, -1
  %12 = shl nsw i32 %5, 2
  %13 = add nsw i32 %9, %12
  %14 = shl nsw i32 %4, 2
  %15 = add nsw i32 %11, %14
  %16 = ashr i32 %2, 16
  %17 = shl nsw i32 %16, 13
  %18 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 2
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, -65536
  %21 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 3
  %22 = load i32, i32* %21, align 4
  %23 = mul i32 %20, %15
  %24 = mul i32 %22, %13
  %25 = add i32 %23, %24
  %26 = sub i32 %17, %25
  %27 = icmp slt i32 %26, 8388607
  %28 = select i1 %27, i32 %26, i32 8388607
  %29 = icmp sgt i32 %28, -8388608
  %30 = select i1 %29, i32 %28, i32 -8388608
  store i32 %30, i32* %7, align 4
  %31 = shl i32 %2, 16
  %32 = ashr exact i32 %31, 3
  %33 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %36, -65536
  %38 = mul i32 %34, %15
  %39 = mul i32 %37, %13
  %40 = add i32 %39, %38
  %41 = sub i32 %32, %40
  %42 = icmp slt i32 %41, 8388607
  %43 = select i1 %42, i32 %41, i32 8388607
  %44 = icmp sgt i32 %43, -8388608
  %45 = select i1 %44, i32 %43, i32 -8388608
  %46 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %3, i64 0, i32 1, i64 1
  store i32 %45, i32* %46, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_find_affine_int([2 x [2 x i32]]* nocapture readonly, i32, i32, i32, i32, %struct.Dav1dWarpedMotionParams* nocapture, i32, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 0
  %10 = shl nsw i32 %3, 1
  %11 = add nsw i32 %10, -1
  %12 = shl nsw i32 %2, 1
  %13 = add nsw i32 %12, -1
  %14 = shl nsw i32 %11, 3
  %15 = shl nsw i32 %13, 3
  %16 = shl i32 %4, 16
  %17 = ashr i32 %4, 16
  %18 = shl nsw i32 %7, 2
  %19 = add nsw i32 %18, %11
  %20 = shl nsw i32 %6, 2
  %21 = add nsw i32 %20, %13
  %22 = icmp sgt i32 %1, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %8
  %24 = ashr exact i32 %16, 16
  %25 = add i32 %15, %17
  %26 = add i32 %14, %24
  %27 = zext i32 %1 to i64
  br label %43

28:                                               ; preds = %117, %8
  %29 = phi i32 [ 0, %8 ], [ %118, %117 ]
  %30 = phi i32 [ 0, %8 ], [ %119, %117 ]
  %31 = phi i32 [ 0, %8 ], [ %120, %117 ]
  %32 = phi i32 [ 0, %8 ], [ %121, %117 ]
  %33 = phi i32 [ 0, %8 ], [ %122, %117 ]
  %34 = phi i32 [ 0, %8 ], [ %123, %117 ]
  %35 = phi i32 [ 0, %8 ], [ %124, %117 ]
  %36 = sext i32 %30 to i64
  %37 = sext i32 %31 to i64
  %38 = mul nsw i64 %37, %36
  %39 = sext i32 %29 to i64
  %40 = mul nsw i64 %39, %39
  %41 = sub nsw i64 %38, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %260, label %127

43:                                               ; preds = %117, %23
  %44 = phi i64 [ 0, %23 ], [ %125, %117 ]
  %45 = phi i32 [ 0, %23 ], [ %124, %117 ]
  %46 = phi i32 [ 0, %23 ], [ %123, %117 ]
  %47 = phi i32 [ 0, %23 ], [ %122, %117 ]
  %48 = phi i32 [ 0, %23 ], [ %121, %117 ]
  %49 = phi i32 [ 0, %23 ], [ %120, %117 ]
  %50 = phi i32 [ 0, %23 ], [ %119, %117 ]
  %51 = phi i32 [ 0, %23 ], [ %118, %117 ]
  %52 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %0, i64 %44, i64 1, i64 0
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %53, %25
  %55 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %0, i64 %44, i64 1, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %56, %26
  %58 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %0, i64 %44, i64 0, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = sub nsw i32 %59, %15
  %61 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %0, i64 %44, i64 0, i64 1
  %62 = load i32, i32* %61, align 4
  %63 = sub nsw i32 %62, %14
  %64 = sub nsw i32 %60, %54
  %65 = icmp slt i32 %64, 0
  %66 = sub nsw i32 0, %64
  %67 = select i1 %65, i32 %66, i32 %64
  %68 = icmp slt i32 %67, 256
  br i1 %68, label %69, label %117

69:                                               ; preds = %43
  %70 = sub nsw i32 %63, %57
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = icmp slt i32 %73, 256
  br i1 %74, label %75, label %117

75:                                               ; preds = %69
  %76 = mul nsw i32 %60, %60
  %77 = lshr i32 %76, 2
  %78 = shl i32 %60, 1
  %79 = add i32 %50, 8
  %80 = add i32 %79, %78
  %81 = add i32 %80, %77
  %82 = mul nsw i32 %63, %60
  %83 = ashr i32 %82, 2
  %84 = add i32 %60, 4
  %85 = add i32 %84, %51
  %86 = add i32 %85, %63
  %87 = add i32 %86, %83
  %88 = mul nsw i32 %63, %63
  %89 = lshr i32 %88, 2
  %90 = shl i32 %63, 1
  %91 = add i32 %49, 8
  %92 = add i32 %91, %90
  %93 = add i32 %92, %89
  %94 = mul nsw i32 %60, %54
  %95 = ashr i32 %94, 2
  %96 = add i32 %48, 8
  %97 = add i32 %96, %54
  %98 = add i32 %97, %60
  %99 = add i32 %98, %95
  %100 = mul nsw i32 %63, %54
  %101 = ashr i32 %100, 2
  %102 = add i32 %63, 4
  %103 = add i32 %102, %47
  %104 = add i32 %103, %54
  %105 = add i32 %104, %101
  %106 = mul nsw i32 %60, %57
  %107 = ashr i32 %106, 2
  %108 = add i32 %84, %46
  %109 = add i32 %108, %57
  %110 = add i32 %109, %107
  %111 = mul nsw i32 %63, %57
  %112 = ashr i32 %111, 2
  %113 = add i32 %45, 8
  %114 = add i32 %113, %57
  %115 = add i32 %114, %63
  %116 = add i32 %115, %112
  br label %117

117:                                              ; preds = %75, %69, %43
  %118 = phi i32 [ %87, %75 ], [ %51, %69 ], [ %51, %43 ]
  %119 = phi i32 [ %81, %75 ], [ %50, %69 ], [ %50, %43 ]
  %120 = phi i32 [ %93, %75 ], [ %49, %69 ], [ %49, %43 ]
  %121 = phi i32 [ %99, %75 ], [ %48, %69 ], [ %48, %43 ]
  %122 = phi i32 [ %105, %75 ], [ %47, %69 ], [ %47, %43 ]
  %123 = phi i32 [ %110, %75 ], [ %46, %69 ], [ %46, %43 ]
  %124 = phi i32 [ %116, %75 ], [ %45, %69 ], [ %45, %43 ]
  %125 = add nuw nsw i64 %44, 1
  %126 = icmp eq i64 %125, %27
  br i1 %126, label %28, label %43

127:                                              ; preds = %28
  %128 = icmp slt i64 %41, 0
  %129 = sub nsw i64 0, %41
  %130 = select i1 %128, i64 %129, i64 %41
  %131 = tail call i64 @llvm.ctlz.i64(i64 %130, i1 true) #3, !range !3
  %132 = trunc i64 %131 to i32
  %133 = xor i32 %132, 63
  %134 = zext i32 %133 to i64
  %135 = shl i64 1, %134
  %136 = sub i64 %130, %135
  %137 = icmp ugt i32 %133, 8
  br i1 %137, label %138, label %146

138:                                              ; preds = %127
  %139 = add nsw i32 %133, -9
  %140 = zext i32 %139 to i64
  %141 = shl i64 1, %140
  %142 = add nsw i64 %136, %141
  %143 = add nsw i32 %133, -8
  %144 = zext i32 %143 to i64
  %145 = ashr i64 %142, %144
  br label %150

146:                                              ; preds = %127
  %147 = sub nuw nsw i32 8, %133
  %148 = zext i32 %147 to i64
  %149 = shl i64 %136, %148
  br label %150

150:                                              ; preds = %138, %146
  %151 = phi i64 [ %145, %138 ], [ %149, %146 ]
  %152 = icmp slt i64 %151, 257
  tail call void @llvm.assume(i1 %152) #3
  %153 = getelementptr inbounds [257 x i16], [257 x i16]* @div_lut, i64 0, i64 %151
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = sub nsw i32 0, %155
  %157 = select i1 %128, i32 %156, i32 %155
  %158 = icmp ugt i32 %133, 2
  %159 = select i1 %158, i32 %133, i32 2
  %160 = add nsw i32 %159, -2
  %161 = tail call i32 @llvm.usub.sat.i32(i32 2, i32 %133)
  %162 = shl i32 %157, %161
  %163 = sext i32 %32 to i64
  %164 = mul nsw i64 %163, %37
  %165 = sext i32 %33 to i64
  %166 = mul nsw i64 %165, %39
  %167 = sub nsw i64 %164, %166
  %168 = sext i32 %162 to i64
  %169 = mul nsw i64 %167, %168
  %170 = icmp slt i64 %169, 0
  %171 = sub nsw i64 0, %169
  %172 = select i1 %170, i64 %171, i64 %169
  %173 = zext i32 %160 to i64
  %174 = shl i64 1, %173
  %175 = ashr i64 %174, 1
  %176 = add nsw i64 %172, %175
  %177 = ashr i64 %176, %173
  %178 = trunc i64 %177 to i32
  %179 = sub nsw i32 0, %178
  %180 = select i1 %170, i32 %179, i32 %178
  %181 = icmp slt i32 %180, 73727
  %182 = select i1 %181, i32 %180, i32 73727
  %183 = icmp sgt i32 %182, 57345
  %184 = select i1 %183, i32 %182, i32 57345
  %185 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 2
  store i32 %184, i32* %185, align 4
  %186 = mul nsw i64 %165, %36
  %187 = mul nsw i64 %163, %39
  %188 = sub nsw i64 %186, %187
  %189 = mul nsw i64 %188, %168
  %190 = icmp slt i64 %189, 0
  %191 = sub nsw i64 0, %189
  %192 = select i1 %190, i64 %191, i64 %189
  %193 = add nsw i64 %192, %175
  %194 = ashr i64 %193, %173
  %195 = trunc i64 %194 to i32
  %196 = sub nsw i32 0, %195
  %197 = select i1 %190, i32 %196, i32 %195
  %198 = icmp slt i32 %197, 8191
  %199 = select i1 %198, i32 %197, i32 8191
  %200 = icmp sgt i32 %199, -8191
  %201 = select i1 %200, i32 %199, i32 -8191
  %202 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 3
  store i32 %201, i32* %202, align 4
  %203 = sext i32 %34 to i64
  %204 = mul nsw i64 %203, %37
  %205 = sext i32 %35 to i64
  %206 = mul nsw i64 %205, %39
  %207 = sub nsw i64 %204, %206
  %208 = mul nsw i64 %207, %168
  %209 = icmp slt i64 %208, 0
  %210 = sub nsw i64 0, %208
  %211 = select i1 %209, i64 %210, i64 %208
  %212 = add nsw i64 %211, %175
  %213 = ashr i64 %212, %173
  %214 = trunc i64 %213 to i32
  %215 = sub nsw i32 0, %214
  %216 = select i1 %209, i32 %215, i32 %214
  %217 = icmp slt i32 %216, 8191
  %218 = select i1 %217, i32 %216, i32 8191
  %219 = icmp sgt i32 %218, -8191
  %220 = select i1 %219, i32 %218, i32 -8191
  %221 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 4
  store i32 %220, i32* %221, align 4
  %222 = mul nsw i64 %205, %36
  %223 = mul nsw i64 %203, %39
  %224 = sub nsw i64 %222, %223
  %225 = mul nsw i64 %224, %168
  %226 = icmp slt i64 %225, 0
  %227 = sub nsw i64 0, %225
  %228 = select i1 %226, i64 %227, i64 %225
  %229 = add nsw i64 %228, %175
  %230 = ashr i64 %229, %173
  %231 = trunc i64 %230 to i32
  %232 = sub nsw i32 0, %231
  %233 = select i1 %226, i32 %232, i32 %231
  %234 = icmp slt i32 %233, 73727
  %235 = select i1 %234, i32 %233, i32 73727
  %236 = icmp sgt i32 %235, 57345
  %237 = select i1 %236, i32 %235, i32 57345
  %238 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 5
  store i32 %237, i32* %238, align 4
  %239 = shl nsw i32 %17, 13
  %240 = add nsw i32 %184, -65536
  %241 = mul i32 %201, %19
  %242 = mul i32 %240, %21
  %243 = add i32 %242, %241
  %244 = sub i32 %239, %243
  %245 = icmp slt i32 %244, 8388607
  %246 = select i1 %245, i32 %244, i32 8388607
  %247 = icmp sgt i32 %246, -8388608
  %248 = select i1 %247, i32 %246, i32 -8388608
  store i32 %248, i32* %9, align 4
  %249 = ashr exact i32 %16, 3
  %250 = add nsw i32 %237, -65536
  %251 = mul i32 %220, %21
  %252 = mul i32 %250, %19
  %253 = add i32 %252, %251
  %254 = sub i32 %249, %253
  %255 = icmp slt i32 %254, 8388607
  %256 = select i1 %255, i32 %254, i32 8388607
  %257 = icmp sgt i32 %256, -8388608
  %258 = select i1 %257, i32 %256, i32 -8388608
  %259 = getelementptr inbounds %struct.Dav1dWarpedMotionParams, %struct.Dav1dWarpedMotionParams* %5, i64 0, i32 1, i64 1
  store i32 %258, i32* %259, align 4
  br label %260

260:                                              ; preds = %28, %150
  %261 = phi i32 [ 0, %150 ], [ 1, %28 ]
  ret i32 %261
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i64 0, i64 65}
