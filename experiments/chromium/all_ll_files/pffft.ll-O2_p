; ModuleID = '../../third_party/pffft/src/pffft.c'
source_filename = "../../third_party/pffft/src/pffft.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PFFFT_Setup = type { i32, i32, [15 x i32], i32, <4 x float>*, float*, float* }
%union.v4sf_union = type { <4 x float> }

@cffti1_ps.ntryh = internal unnamed_addr constant [5 x i32] [i32 5, i32 3, i32 4, i32 2, i32 0], align 16
@rffti1_ps.ntryh = internal unnamed_addr constant [5 x i32] [i32 4, i32 2, i32 3, i32 5, i32 0], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @validate_pffft_simd() local_unnamed_addr #0 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden i8* @pffft_aligned_malloc(i64) local_unnamed_addr #2 {
  %2 = add i64 %0, 64
  %3 = tail call noalias i8* @malloc(i64 %2) #12
  %4 = icmp eq i8* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = add i64 %6, 64
  %8 = and i64 %7, -64
  %9 = inttoptr i64 %8 to i8*
  %10 = inttoptr i64 %8 to i8**
  %11 = getelementptr inbounds i8*, i8** %10, i64 -1
  store i8* %3, i8** %11, align 8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi i8* [ %9, %5 ], [ null, %1 ]
  ret i8* %13
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @pffft_aligned_free(i8* readonly) local_unnamed_addr #4 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 -8
  %5 = bitcast i8* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @free(i8* %6) #12
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @pffft_simd_size() local_unnamed_addr #6 {
  ret i32 4
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cffti1_ps(i32, float* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %4 = getelementptr inbounds i32, i32* %2, i64 2
  br label %5

5:                                                ; preds = %75, %3
  %6 = phi i64 [ 0, %3 ], [ %78, %75 ]
  %7 = phi i32 [ 5, %3 ], [ %80, %75 ]
  %8 = phi i32 [ %0, %3 ], [ %77, %75 ]
  %9 = phi i32 [ 0, %3 ], [ %76, %75 ]
  %10 = icmp eq i32 %8, 1
  br i1 %10, label %75, label %11

11:                                               ; preds = %5
  %12 = icmp eq i32 %7, 2
  %13 = add i32 %9, 2
  %14 = sext i32 %9 to i64
  br label %15

15:                                               ; preds = %70, %11
  %16 = phi i32 [ %72, %70 ], [ 0, %11 ]
  %17 = phi i64 [ %27, %70 ], [ %14, %11 ]
  %18 = phi i32 [ %23, %70 ], [ %8, %11 ]
  %19 = phi i32 [ %28, %70 ], [ %9, %11 ]
  %20 = add i32 %13, %16
  %21 = zext i32 %20 to i64
  %22 = add nsw i64 %21, -2
  %23 = sdiv i32 %18, %7
  %24 = mul nsw i32 %23, %7
  %25 = icmp eq i32 %18, %24
  br i1 %25, label %26, label %73

26:                                               ; preds = %15
  %27 = add i64 %17, 1
  %28 = add nsw i32 %19, 1
  %29 = add nsw i64 %17, 2
  %30 = getelementptr inbounds i32, i32* %2, i64 %29
  store i32 %7, i32* %30, align 4
  %31 = icmp ne i64 %17, 0
  %32 = and i1 %12, %31
  br i1 %32, label %33, label %70

33:                                               ; preds = %26
  %34 = icmp slt i64 %27, 2
  br i1 %34, label %69, label %35

35:                                               ; preds = %33
  %36 = and i64 %22, 1
  %37 = icmp eq i32 %20, 3
  br i1 %37, label %59, label %38

38:                                               ; preds = %35
  %39 = sub nsw i64 %22, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 2, %38 ], [ %56, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %57, %40 ]
  %43 = sub nsw i64 %27, %41
  %44 = add nsw i64 %43, 2
  %45 = getelementptr inbounds i32, i32* %2, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i64 %43, 3
  %48 = getelementptr inbounds i32, i32* %2, i64 %47
  store i32 %46, i32* %48, align 4
  %49 = or i64 %41, 1
  %50 = sub nsw i64 %27, %49
  %51 = add nsw i64 %50, 2
  %52 = getelementptr inbounds i32, i32* %2, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i64 %50, 3
  %55 = getelementptr inbounds i32, i32* %2, i64 %54
  store i32 %53, i32* %55, align 4
  %56 = add nuw nsw i64 %41, 2
  %57 = add i64 %42, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %40

59:                                               ; preds = %40, %35
  %60 = phi i64 [ 2, %35 ], [ %56, %40 ]
  %61 = icmp eq i64 %36, 0
  br i1 %61, label %69, label %62

62:                                               ; preds = %59
  %63 = sub nsw i64 %27, %60
  %64 = add nsw i64 %63, 2
  %65 = getelementptr inbounds i32, i32* %2, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i64 %63, 3
  %68 = getelementptr inbounds i32, i32* %2, i64 %67
  store i32 %66, i32* %68, align 4
  br label %69

69:                                               ; preds = %62, %59, %33
  store i32 2, i32* %4, align 4
  br label %70

70:                                               ; preds = %69, %26
  %71 = icmp eq i32 %23, 1
  %72 = add i32 %16, 1
  br i1 %71, label %75, label %15

73:                                               ; preds = %15
  %74 = trunc i64 %17 to i32
  br label %75

75:                                               ; preds = %70, %73, %5
  %76 = phi i32 [ %9, %5 ], [ %74, %73 ], [ %28, %70 ]
  %77 = phi i32 [ 1, %5 ], [ %18, %73 ], [ 1, %70 ]
  %78 = add nuw nsw i64 %6, 1
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* @cffti1_ps.ntryh, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i64 %78, 4
  br i1 %81, label %82, label %5

82:                                               ; preds = %75
  store i32 %0, i32* %2, align 4
  %83 = getelementptr inbounds i32, i32* %2, i64 1
  store i32 %76, i32* %83, align 4
  %84 = sitofp i32 %0 to float
  %85 = fpext float %84 to double
  %86 = fdiv double 0x401921FB54442D18, %85
  %87 = fptrunc double %86 to float
  %88 = icmp slt i32 %76, 1
  br i1 %88, label %159, label %89

89:                                               ; preds = %82
  %90 = add nuw i32 %76, 1
  %91 = zext i32 %90 to i64
  br label %95

92:                                               ; preds = %156, %95
  %93 = phi i32 [ %98, %95 ], [ %143, %156 ]
  %94 = icmp eq i64 %99, %91
  br i1 %94, label %159, label %95

95:                                               ; preds = %92, %89
  %96 = phi i64 [ 1, %89 ], [ %99, %92 ]
  %97 = phi i32 [ 1, %89 ], [ %102, %92 ]
  %98 = phi i32 [ 1, %89 ], [ %93, %92 ]
  %99 = add nuw nsw i64 %96, 1
  %100 = getelementptr inbounds i32, i32* %2, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = mul nsw i32 %101, %97
  %103 = sdiv i32 %0, %102
  %104 = shl i32 %103, 1
  %105 = add nsw i32 %104, 2
  %106 = icmp sgt i32 %101, 1
  br i1 %106, label %107, label %92

107:                                              ; preds = %95
  %108 = icmp slt i32 %105, 4
  %109 = icmp sgt i32 %101, 5
  br label %110

110:                                              ; preds = %156, %107
  %111 = phi i32 [ 0, %107 ], [ %119, %156 ]
  %112 = phi i32 [ %98, %107 ], [ %143, %156 ]
  %113 = phi i32 [ 1, %107 ], [ %157, %156 ]
  %114 = add nsw i32 %112, -1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %1, i64 %115
  store float 1.000000e+00, float* %116, align 4
  %117 = sext i32 %112 to i64
  %118 = getelementptr inbounds float, float* %1, i64 %117
  store float 0.000000e+00, float* %118, align 4
  %119 = add nsw i32 %111, %97
  %120 = sitofp i32 %119 to float
  %121 = fmul float %87, %120
  br i1 %108, label %142, label %122

122:                                              ; preds = %110, %122
  %123 = phi i64 [ %126, %122 ], [ %117, %110 ]
  %124 = phi i32 [ %127, %122 ], [ 0, %110 ]
  %125 = phi i32 [ %138, %122 ], [ 4, %110 ]
  %126 = add i64 %123, 2
  %127 = add nuw nsw i32 %124, 1
  %128 = sitofp i32 %127 to float
  %129 = fmul float %121, %128
  %130 = fpext float %129 to double
  %131 = tail call double @cos(double %130) #12
  %132 = fptrunc double %131 to float
  %133 = add nsw i64 %123, 1
  %134 = getelementptr inbounds float, float* %1, i64 %133
  store float %132, float* %134, align 4
  %135 = tail call double @sin(double %130) #12
  %136 = fptrunc double %135 to float
  %137 = getelementptr inbounds float, float* %1, i64 %126
  store float %136, float* %137, align 4
  %138 = add nuw nsw i32 %125, 2
  %139 = icmp sgt i32 %138, %105
  br i1 %139, label %140, label %122

140:                                              ; preds = %122
  %141 = trunc i64 %126 to i32
  br label %142

142:                                              ; preds = %140, %110
  %143 = phi i32 [ %112, %110 ], [ %141, %140 ]
  br i1 %109, label %144, label %156

144:                                              ; preds = %142
  %145 = add nsw i32 %143, -1
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %1, i64 %146
  %148 = bitcast float* %147 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = bitcast float* %116 to i32*
  store i32 %149, i32* %150, align 4
  %151 = sext i32 %143 to i64
  %152 = getelementptr inbounds float, float* %1, i64 %151
  %153 = bitcast float* %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = bitcast float* %118 to i32*
  store i32 %154, i32* %155, align 4
  br label %156

156:                                              ; preds = %144, %142
  %157 = add nuw nsw i32 %113, 1
  %158 = icmp eq i32 %157, %101
  br i1 %158, label %92, label %110

159:                                              ; preds = %92, %82
  ret void
}

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden <4 x float>* @cfftf1_ps(i32, <4 x float>* readonly, <4 x float>*, <4 x float>*, float* nocapture readonly, i32* nocapture readonly, i32) local_unnamed_addr #7 {
  %8 = getelementptr inbounds i32, i32* %5, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %67, label %11

11:                                               ; preds = %7
  %12 = icmp eq <4 x float>* %1, %3
  %13 = select i1 %12, <4 x float>* %2, <4 x float>* %3
  %14 = sitofp i32 %6 to float
  %15 = add nuw i32 %9, 2
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %11, %58
  %18 = phi i64 [ 2, %11 ], [ %65, %58 ]
  %19 = phi <4 x float>* [ %1, %11 ], [ %64, %58 ]
  %20 = phi <4 x float>* [ %13, %11 ], [ %63, %58 ]
  %21 = phi i32 [ 1, %11 ], [ %25, %58 ]
  %22 = phi i32 [ 0, %11 ], [ %61, %58 ]
  %23 = getelementptr inbounds i32, i32* %5, i64 %18
  %24 = load i32, i32* %23, align 4
  %25 = mul nsw i32 %24, %21
  %26 = sdiv i32 %0, %25
  %27 = shl nsw i32 %26, 1
  switch i32 %24, label %58 [
    i32 5, label %28
    i32 4, label %40
    i32 2, label %49
    i32 3, label %52
  ]

28:                                               ; preds = %17
  %29 = add nsw i32 %27, %22
  %30 = add nsw i32 %29, %27
  %31 = add nsw i32 %30, %27
  %32 = sext i32 %22 to i64
  %33 = getelementptr inbounds float, float* %4, i64 %32
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = sext i32 %30 to i64
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = sext i32 %31 to i64
  %39 = getelementptr inbounds float, float* %4, i64 %38
  tail call fastcc void @passf5_ps(i32 %27, i32 %21, <4 x float>* %19, <4 x float>* %20, float* %33, float* %35, float* %37, float* %39, float %14)
  br label %58

40:                                               ; preds = %17
  %41 = add nsw i32 %27, %22
  %42 = add nsw i32 %41, %27
  %43 = sext i32 %22 to i64
  %44 = getelementptr inbounds float, float* %4, i64 %43
  %45 = sext i32 %41 to i64
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds float, float* %4, i64 %47
  tail call fastcc void @passf4_ps(i32 %27, i32 %21, <4 x float>* %19, <4 x float>* %20, float* %44, float* %46, float* %48, float %14)
  br label %58

49:                                               ; preds = %17
  %50 = sext i32 %22 to i64
  %51 = getelementptr inbounds float, float* %4, i64 %50
  tail call fastcc void @passf2_ps(i32 %27, i32 %21, <4 x float>* %19, <4 x float>* %20, float* %51, float %14)
  br label %58

52:                                               ; preds = %17
  %53 = add nsw i32 %27, %22
  %54 = sext i32 %22 to i64
  %55 = getelementptr inbounds float, float* %4, i64 %54
  %56 = sext i32 %53 to i64
  %57 = getelementptr inbounds float, float* %4, i64 %56
  tail call fastcc void @passf3_ps(i32 %27, i32 %21, <4 x float>* %19, <4 x float>* %20, float* %55, float* %57, float %14)
  br label %58

58:                                               ; preds = %17, %52, %49, %40, %28
  %59 = add nsw i32 %24, -1
  %60 = mul nsw i32 %27, %59
  %61 = add nsw i32 %60, %22
  %62 = icmp eq <4 x float>* %20, %3
  %63 = select i1 %62, <4 x float>* %2, <4 x float>* %3
  %64 = select i1 %62, <4 x float>* %3, <4 x float>* %2
  %65 = add nuw nsw i64 %18, 1
  %66 = icmp eq i64 %65, %16
  br i1 %66, label %67, label %17

67:                                               ; preds = %58, %7
  %68 = phi <4 x float>* [ %1, %7 ], [ %64, %58 ]
  ret <4 x float>* %68
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @passf5_ps(i32, i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float) unnamed_addr #8 {
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %208

11:                                               ; preds = %9
  %12 = fmul float %8, 0x3FE2CF2300000000
  %13 = fmul float %8, 0x3FEE6F0E20000000
  %14 = add nsw i32 %0, -1
  %15 = icmp sgt i32 %14, 0
  %16 = shl nsw i32 %0, 2
  %17 = shl nsw i32 %0, 1
  %18 = mul i32 %0, 3
  %19 = insertelement <4 x float> undef, float %13, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %12, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = mul i32 %1, %0
  %24 = shl i32 %23, 1
  %25 = mul i32 %18, %1
  %26 = shl i32 %23, 2
  %27 = mul nsw i32 %0, 5
  %28 = sext i32 %27 to i64
  %29 = sext i32 %0 to i64
  %30 = sext i32 %26 to i64
  %31 = sext i32 %25 to i64
  %32 = sext i32 %24 to i64
  %33 = sext i32 %23 to i64
  %34 = sext i32 %18 to i64
  %35 = sext i32 %17 to i64
  %36 = sext i32 %16 to i64
  %37 = sext i32 %14 to i64
  br label %38

38:                                               ; preds = %203, %11
  %39 = phi <4 x float>* [ %2, %11 ], [ %205, %203 ]
  %40 = phi <4 x float>* [ %3, %11 ], [ %206, %203 ]
  %41 = phi i32 [ 0, %11 ], [ %204, %203 ]
  br i1 %15, label %42, label %203

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %201, %42 ], [ 0, %38 ]
  %44 = add nsw i64 %43, %29
  %45 = add nsw i64 %44, 1
  %46 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %45
  %47 = load <4 x float>, <4 x float>* %46, align 16
  %48 = add nsw i64 %43, %36
  %49 = or i64 %48, 1
  %50 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %49
  %51 = load <4 x float>, <4 x float>* %50, align 16
  %52 = fsub <4 x float> %47, %51
  %53 = fadd <4 x float> %47, %51
  %54 = add nsw i64 %43, %35
  %55 = or i64 %54, 1
  %56 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %55
  %57 = load <4 x float>, <4 x float>* %56, align 16
  %58 = add nsw i64 %43, %34
  %59 = add nsw i64 %58, 1
  %60 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %59
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = fsub <4 x float> %57, %61
  %63 = fadd <4 x float> %57, %61
  %64 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %44
  %65 = load <4 x float>, <4 x float>* %64, align 16
  %66 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %48
  %67 = load <4 x float>, <4 x float>* %66, align 16
  %68 = fsub <4 x float> %65, %67
  %69 = fadd <4 x float> %65, %67
  %70 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %54
  %71 = load <4 x float>, <4 x float>* %70, align 16
  %72 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %58
  %73 = load <4 x float>, <4 x float>* %72, align 16
  %74 = fsub <4 x float> %71, %73
  %75 = fadd <4 x float> %71, %73
  %76 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %43
  %77 = load <4 x float>, <4 x float>* %76, align 16
  %78 = fadd <4 x float> %69, %75
  %79 = fadd <4 x float> %77, %78
  %80 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %43
  store <4 x float> %79, <4 x float>* %80, align 16
  %81 = or i64 %43, 1
  %82 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %81
  %83 = load <4 x float>, <4 x float>* %82, align 16
  %84 = fadd <4 x float> %53, %63
  %85 = fadd <4 x float> %84, %83
  %86 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %81
  store <4 x float> %85, <4 x float>* %86, align 16
  %87 = load <4 x float>, <4 x float>* %76, align 16
  %88 = fmul <4 x float> %69, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %89 = fmul <4 x float> %75, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %90 = fadd <4 x float> %88, %89
  %91 = fadd <4 x float> %90, %87
  %92 = load <4 x float>, <4 x float>* %82, align 16
  %93 = fmul <4 x float> %53, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %94 = fmul <4 x float> %63, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %95 = fadd <4 x float> %93, %94
  %96 = fadd <4 x float> %95, %92
  %97 = fmul <4 x float> %69, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %98 = fmul <4 x float> %75, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %99 = fadd <4 x float> %97, %98
  %100 = fadd <4 x float> %99, %87
  %101 = fmul <4 x float> %53, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %102 = fmul <4 x float> %63, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %103 = fadd <4 x float> %101, %102
  %104 = fadd <4 x float> %103, %92
  %105 = fmul <4 x float> %20, %68
  %106 = fmul <4 x float> %22, %74
  %107 = fadd <4 x float> %105, %106
  %108 = fmul <4 x float> %20, %52
  %109 = fmul <4 x float> %22, %62
  %110 = fadd <4 x float> %108, %109
  %111 = fmul <4 x float> %22, %68
  %112 = fmul <4 x float> %20, %74
  %113 = fsub <4 x float> %111, %112
  %114 = fmul <4 x float> %22, %52
  %115 = fmul <4 x float> %20, %62
  %116 = fsub <4 x float> %114, %115
  %117 = fsub <4 x float> %100, %116
  %118 = fadd <4 x float> %116, %100
  %119 = fadd <4 x float> %113, %104
  %120 = fsub <4 x float> %104, %113
  %121 = fadd <4 x float> %110, %91
  %122 = fsub <4 x float> %91, %110
  %123 = fsub <4 x float> %96, %107
  %124 = fadd <4 x float> %107, %96
  %125 = getelementptr inbounds float, float* %4, i64 %43
  %126 = load float, float* %125, align 4
  %127 = getelementptr inbounds float, float* %4, i64 %81
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, %8
  %130 = getelementptr inbounds float, float* %5, i64 %43
  %131 = load float, float* %130, align 4
  %132 = getelementptr inbounds float, float* %5, i64 %81
  %133 = load float, float* %132, align 4
  %134 = fmul float %133, %8
  %135 = getelementptr inbounds float, float* %6, i64 %43
  %136 = load float, float* %135, align 4
  %137 = getelementptr inbounds float, float* %6, i64 %81
  %138 = load float, float* %137, align 4
  %139 = fmul float %138, %8
  %140 = getelementptr inbounds float, float* %7, i64 %43
  %141 = load float, float* %140, align 4
  %142 = getelementptr inbounds float, float* %7, i64 %81
  %143 = load float, float* %142, align 4
  %144 = fmul float %143, %8
  %145 = insertelement <4 x float> undef, float %129, i32 0
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> zeroinitializer
  %147 = fmul <4 x float> %122, %146
  %148 = insertelement <4 x float> undef, float %126, i32 0
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> zeroinitializer
  %150 = fmul <4 x float> %122, %149
  %151 = fmul <4 x float> %124, %146
  %152 = fsub <4 x float> %150, %151
  %153 = fmul <4 x float> %124, %149
  %154 = fadd <4 x float> %153, %147
  %155 = add nsw i64 %43, %33
  %156 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %155
  store <4 x float> %152, <4 x float>* %156, align 16
  %157 = add nsw i64 %155, 1
  %158 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %157
  store <4 x float> %154, <4 x float>* %158, align 16
  %159 = insertelement <4 x float> undef, float %134, i32 0
  %160 = shufflevector <4 x float> %159, <4 x float> undef, <4 x i32> zeroinitializer
  %161 = fmul <4 x float> %117, %160
  %162 = insertelement <4 x float> undef, float %131, i32 0
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> zeroinitializer
  %164 = fmul <4 x float> %117, %163
  %165 = fmul <4 x float> %119, %160
  %166 = fsub <4 x float> %164, %165
  %167 = fmul <4 x float> %119, %163
  %168 = fadd <4 x float> %167, %161
  %169 = add nsw i64 %43, %32
  %170 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %169
  store <4 x float> %166, <4 x float>* %170, align 16
  %171 = or i64 %169, 1
  %172 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %171
  store <4 x float> %168, <4 x float>* %172, align 16
  %173 = insertelement <4 x float> undef, float %139, i32 0
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <4 x i32> zeroinitializer
  %175 = fmul <4 x float> %118, %174
  %176 = insertelement <4 x float> undef, float %136, i32 0
  %177 = shufflevector <4 x float> %176, <4 x float> undef, <4 x i32> zeroinitializer
  %178 = fmul <4 x float> %118, %177
  %179 = fmul <4 x float> %120, %174
  %180 = fsub <4 x float> %178, %179
  %181 = fmul <4 x float> %120, %177
  %182 = fadd <4 x float> %181, %175
  %183 = add nsw i64 %43, %31
  %184 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %183
  store <4 x float> %180, <4 x float>* %184, align 16
  %185 = add nsw i64 %183, 1
  %186 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %185
  store <4 x float> %182, <4 x float>* %186, align 16
  %187 = insertelement <4 x float> undef, float %144, i32 0
  %188 = shufflevector <4 x float> %187, <4 x float> undef, <4 x i32> zeroinitializer
  %189 = fmul <4 x float> %121, %188
  %190 = insertelement <4 x float> undef, float %141, i32 0
  %191 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> zeroinitializer
  %192 = fmul <4 x float> %121, %191
  %193 = fmul <4 x float> %123, %188
  %194 = fsub <4 x float> %192, %193
  %195 = fmul <4 x float> %123, %191
  %196 = fadd <4 x float> %195, %189
  %197 = add nsw i64 %43, %30
  %198 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %197
  store <4 x float> %194, <4 x float>* %198, align 16
  %199 = or i64 %197, 1
  %200 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %199
  store <4 x float> %196, <4 x float>* %200, align 16
  %201 = add nuw nsw i64 %43, 2
  %202 = icmp slt i64 %201, %37
  br i1 %202, label %42, label %203

203:                                              ; preds = %42, %38
  %204 = add nuw nsw i32 %41, 1
  %205 = getelementptr inbounds <4 x float>, <4 x float>* %39, i64 %28
  %206 = getelementptr inbounds <4 x float>, <4 x float>* %40, i64 %29
  %207 = icmp eq i32 %204, %1
  br i1 %207, label %208, label %38

208:                                              ; preds = %203, %9
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @passf4_ps(i32, i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float) unnamed_addr #8 {
  %9 = mul nsw i32 %1, %0
  %10 = icmp eq i32 %0, 2
  %11 = icmp sgt i32 %9, 0
  br i1 %10, label %31, label %12

12:                                               ; preds = %8
  br i1 %11, label %13, label %207

13:                                               ; preds = %12
  %14 = add nsw i32 %0, -1
  %15 = icmp sgt i32 %14, 0
  %16 = shl nsw i32 %0, 1
  %17 = mul nsw i32 %0, 3
  %18 = insertelement <4 x float> undef, float %7, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = shl nsw i32 %9, 1
  %21 = mul nsw i32 %9, 3
  %22 = sext i32 %0 to i64
  %23 = shl nsw i32 %0, 2
  %24 = sext i32 %23 to i64
  %25 = sext i32 %21 to i64
  %26 = sext i32 %20 to i64
  %27 = sext i32 %9 to i64
  %28 = sext i32 %17 to i64
  %29 = sext i32 %16 to i64
  %30 = sext i32 %14 to i64
  br label %94

31:                                               ; preds = %8
  br i1 %11, label %32, label %207

32:                                               ; preds = %31
  %33 = insertelement <4 x float> undef, float %7, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = sext i32 %9 to i64
  %36 = add nuw nsw i32 %9, 1
  %37 = sext i32 %36 to i64
  %38 = shl nsw i32 %9, 1
  %39 = sext i32 %38 to i64
  %40 = or i32 %38, 1
  %41 = sext i32 %40 to i64
  %42 = mul nsw i32 %9, 3
  %43 = sext i32 %42 to i64
  %44 = add nsw i32 %42, 1
  %45 = sext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %46
  %47 = phi <4 x float>* [ %2, %32 ], [ %92, %46 ]
  %48 = phi <4 x float>* [ %3, %32 ], [ %91, %46 ]
  %49 = phi i32 [ 0, %32 ], [ %90, %46 ]
  %50 = load <4 x float>, <4 x float>* %47, align 16
  %51 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 4
  %52 = load <4 x float>, <4 x float>* %51, align 16
  %53 = fsub <4 x float> %50, %52
  %54 = fadd <4 x float> %50, %52
  %55 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 1
  %56 = load <4 x float>, <4 x float>* %55, align 16
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 5
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = fsub <4 x float> %56, %58
  %60 = fadd <4 x float> %56, %58
  %61 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 2
  %62 = load <4 x float>, <4 x float>* %61, align 16
  %63 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 6
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = fsub <4 x float> %62, %64
  %66 = fmul <4 x float> %34, %65
  %67 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 7
  %68 = load <4 x float>, <4 x float>* %67, align 16
  %69 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 3
  %70 = load <4 x float>, <4 x float>* %69, align 16
  %71 = fsub <4 x float> %68, %70
  %72 = fmul <4 x float> %34, %71
  %73 = fadd <4 x float> %62, %64
  %74 = fadd <4 x float> %68, %70
  %75 = fadd <4 x float> %54, %73
  store <4 x float> %75, <4 x float>* %48, align 16
  %76 = fadd <4 x float> %60, %74
  %77 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 1
  store <4 x float> %76, <4 x float>* %77, align 16
  %78 = fadd <4 x float> %53, %72
  %79 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %35
  store <4 x float> %78, <4 x float>* %79, align 16
  %80 = fadd <4 x float> %59, %66
  %81 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %37
  store <4 x float> %80, <4 x float>* %81, align 16
  %82 = fsub <4 x float> %54, %73
  %83 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %39
  store <4 x float> %82, <4 x float>* %83, align 16
  %84 = fsub <4 x float> %60, %74
  %85 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %41
  store <4 x float> %84, <4 x float>* %85, align 16
  %86 = fsub <4 x float> %53, %72
  %87 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %43
  store <4 x float> %86, <4 x float>* %87, align 16
  %88 = fsub <4 x float> %59, %66
  %89 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 %45
  store <4 x float> %88, <4 x float>* %89, align 16
  %90 = add nuw nsw i32 %49, 2
  %91 = getelementptr inbounds <4 x float>, <4 x float>* %48, i64 2
  %92 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 8
  %93 = icmp slt i32 %90, %9
  br i1 %93, label %46, label %207

94:                                               ; preds = %13, %202
  %95 = phi <4 x float>* [ %2, %13 ], [ %205, %202 ]
  %96 = phi <4 x float>* [ %3, %13 ], [ %204, %202 ]
  %97 = phi i32 [ 0, %13 ], [ %203, %202 ]
  br i1 %15, label %98, label %202

98:                                               ; preds = %94, %98
  %99 = phi i64 [ %200, %98 ], [ 0, %94 ]
  %100 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %99
  %101 = load <4 x float>, <4 x float>* %100, align 16
  %102 = add nsw i64 %99, %29
  %103 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %102
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = fsub <4 x float> %101, %104
  %106 = fadd <4 x float> %101, %104
  %107 = or i64 %99, 1
  %108 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %107
  %109 = load <4 x float>, <4 x float>* %108, align 16
  %110 = or i64 %102, 1
  %111 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %110
  %112 = load <4 x float>, <4 x float>* %111, align 16
  %113 = fsub <4 x float> %109, %112
  %114 = fadd <4 x float> %109, %112
  %115 = add nsw i64 %99, %28
  %116 = add nsw i64 %115, 1
  %117 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %116
  %118 = load <4 x float>, <4 x float>* %117, align 16
  %119 = add nsw i64 %99, %22
  %120 = add nsw i64 %119, 1
  %121 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %120
  %122 = load <4 x float>, <4 x float>* %121, align 16
  %123 = fsub <4 x float> %118, %122
  %124 = fmul <4 x float> %19, %123
  %125 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %119
  %126 = load <4 x float>, <4 x float>* %125, align 16
  %127 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %115
  %128 = load <4 x float>, <4 x float>* %127, align 16
  %129 = fsub <4 x float> %126, %128
  %130 = fmul <4 x float> %19, %129
  %131 = fadd <4 x float> %126, %128
  %132 = fadd <4 x float> %118, %122
  %133 = fadd <4 x float> %106, %131
  %134 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %99
  store <4 x float> %133, <4 x float>* %134, align 16
  %135 = fsub <4 x float> %106, %131
  %136 = fadd <4 x float> %114, %132
  %137 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %107
  store <4 x float> %136, <4 x float>* %137, align 16
  %138 = fsub <4 x float> %114, %132
  %139 = fadd <4 x float> %105, %124
  %140 = fsub <4 x float> %105, %124
  %141 = fadd <4 x float> %113, %130
  %142 = fsub <4 x float> %113, %130
  %143 = getelementptr inbounds float, float* %4, i64 %99
  %144 = load float, float* %143, align 4
  %145 = getelementptr inbounds float, float* %4, i64 %107
  %146 = load float, float* %145, align 4
  %147 = fmul float %146, %7
  %148 = insertelement <4 x float> undef, float %147, i32 0
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> zeroinitializer
  %150 = fmul <4 x float> %139, %149
  %151 = insertelement <4 x float> undef, float %144, i32 0
  %152 = shufflevector <4 x float> %151, <4 x float> undef, <4 x i32> zeroinitializer
  %153 = fmul <4 x float> %139, %152
  %154 = fmul <4 x float> %141, %149
  %155 = fsub <4 x float> %153, %154
  %156 = fmul <4 x float> %141, %152
  %157 = fadd <4 x float> %156, %150
  %158 = getelementptr inbounds float, float* %5, i64 %99
  %159 = load float, float* %158, align 4
  %160 = getelementptr inbounds float, float* %5, i64 %107
  %161 = load float, float* %160, align 4
  %162 = fmul float %161, %7
  %163 = add nsw i64 %99, %27
  %164 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %163
  store <4 x float> %155, <4 x float>* %164, align 16
  %165 = add nsw i64 %163, 1
  %166 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %165
  store <4 x float> %157, <4 x float>* %166, align 16
  %167 = insertelement <4 x float> undef, float %162, i32 0
  %168 = shufflevector <4 x float> %167, <4 x float> undef, <4 x i32> zeroinitializer
  %169 = fmul <4 x float> %135, %168
  %170 = insertelement <4 x float> undef, float %159, i32 0
  %171 = shufflevector <4 x float> %170, <4 x float> undef, <4 x i32> zeroinitializer
  %172 = fmul <4 x float> %135, %171
  %173 = fmul <4 x float> %138, %168
  %174 = fsub <4 x float> %172, %173
  %175 = fmul <4 x float> %138, %171
  %176 = fadd <4 x float> %175, %169
  %177 = getelementptr inbounds float, float* %6, i64 %99
  %178 = load float, float* %177, align 4
  %179 = getelementptr inbounds float, float* %6, i64 %107
  %180 = load float, float* %179, align 4
  %181 = fmul float %180, %7
  %182 = add nsw i64 %99, %26
  %183 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %182
  store <4 x float> %174, <4 x float>* %183, align 16
  %184 = or i64 %182, 1
  %185 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %184
  store <4 x float> %176, <4 x float>* %185, align 16
  %186 = insertelement <4 x float> undef, float %181, i32 0
  %187 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %188 = fmul <4 x float> %140, %187
  %189 = insertelement <4 x float> undef, float %178, i32 0
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <4 x i32> zeroinitializer
  %191 = fmul <4 x float> %140, %190
  %192 = fmul <4 x float> %142, %187
  %193 = fsub <4 x float> %191, %192
  %194 = fmul <4 x float> %142, %190
  %195 = fadd <4 x float> %194, %188
  %196 = add nsw i64 %99, %25
  %197 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %196
  store <4 x float> %193, <4 x float>* %197, align 16
  %198 = add nsw i64 %196, 1
  %199 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %198
  store <4 x float> %195, <4 x float>* %199, align 16
  %200 = add nuw nsw i64 %99, 2
  %201 = icmp slt i64 %200, %30
  br i1 %201, label %98, label %202

202:                                              ; preds = %98, %94
  %203 = add nsw i32 %97, %0
  %204 = getelementptr inbounds <4 x float>, <4 x float>* %96, i64 %22
  %205 = getelementptr inbounds <4 x float>, <4 x float>* %95, i64 %24
  %206 = icmp slt i32 %203, %9
  br i1 %206, label %94, label %207

207:                                              ; preds = %202, %46, %12, %31
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @passf2_ps(i32, i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, float* nocapture readonly, float) unnamed_addr #8 {
  %7 = mul nsw i32 %1, %0
  %8 = icmp slt i32 %0, 3
  %9 = icmp sgt i32 %7, 0
  br i1 %8, label %20, label %10

10:                                               ; preds = %6
  br i1 %9, label %11, label %107

11:                                               ; preds = %10
  %12 = add nsw i32 %0, -1
  %13 = icmp sgt i32 %12, 0
  %14 = insertelement <4 x float> undef, float %5, i32 0
  %15 = sext i32 %0 to i64
  %16 = shl nsw i32 %0, 1
  %17 = sext i32 %16 to i64
  %18 = sext i32 %7 to i64
  %19 = sext i32 %12 to i64
  br label %56

20:                                               ; preds = %6
  br i1 %9, label %21, label %107

21:                                               ; preds = %20
  %22 = sext i32 %0 to i64
  %23 = sext i32 %7 to i64
  %24 = add nsw i32 %0, 1
  %25 = sext i32 %24 to i64
  %26 = add nuw nsw i32 %7, 1
  %27 = sext i32 %26 to i64
  %28 = shl nsw i32 %0, 1
  %29 = sext i32 %28 to i64
  br label %30

30:                                               ; preds = %21, %30
  %31 = phi <4 x float>* [ %2, %21 ], [ %54, %30 ]
  %32 = phi <4 x float>* [ %3, %21 ], [ %53, %30 ]
  %33 = phi i32 [ 0, %21 ], [ %52, %30 ]
  %34 = load <4 x float>, <4 x float>* %31, align 16
  %35 = getelementptr inbounds <4 x float>, <4 x float>* %31, i64 %22
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = fadd <4 x float> %34, %36
  store <4 x float> %37, <4 x float>* %32, align 16
  %38 = load <4 x float>, <4 x float>* %31, align 16
  %39 = load <4 x float>, <4 x float>* %35, align 16
  %40 = fsub <4 x float> %38, %39
  %41 = getelementptr inbounds <4 x float>, <4 x float>* %32, i64 %23
  store <4 x float> %40, <4 x float>* %41, align 16
  %42 = getelementptr inbounds <4 x float>, <4 x float>* %31, i64 1
  %43 = load <4 x float>, <4 x float>* %42, align 16
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %31, i64 %25
  %45 = load <4 x float>, <4 x float>* %44, align 16
  %46 = fadd <4 x float> %43, %45
  %47 = getelementptr inbounds <4 x float>, <4 x float>* %32, i64 1
  store <4 x float> %46, <4 x float>* %47, align 16
  %48 = load <4 x float>, <4 x float>* %42, align 16
  %49 = load <4 x float>, <4 x float>* %44, align 16
  %50 = fsub <4 x float> %48, %49
  %51 = getelementptr inbounds <4 x float>, <4 x float>* %32, i64 %27
  store <4 x float> %50, <4 x float>* %51, align 16
  %52 = add nsw i32 %33, %0
  %53 = getelementptr inbounds <4 x float>, <4 x float>* %32, i64 %22
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %31, i64 %29
  %55 = icmp slt i32 %52, %7
  br i1 %55, label %30, label %107

56:                                               ; preds = %11, %102
  %57 = phi <4 x float>* [ %2, %11 ], [ %105, %102 ]
  %58 = phi <4 x float>* [ %3, %11 ], [ %104, %102 ]
  %59 = phi i32 [ 0, %11 ], [ %103, %102 ]
  br i1 %13, label %60, label %102

60:                                               ; preds = %56, %60
  %61 = phi i64 [ %100, %60 ], [ 0, %56 ]
  %62 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %61
  %63 = load <4 x float>, <4 x float>* %62, align 16
  %64 = add nsw i64 %61, %15
  %65 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %64
  %66 = load <4 x float>, <4 x float>* %65, align 16
  %67 = fsub <4 x float> %63, %66
  %68 = or i64 %61, 1
  %69 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %68
  %70 = load <4 x float>, <4 x float>* %69, align 16
  %71 = add nsw i64 %64, 1
  %72 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %71
  %73 = load <4 x float>, <4 x float>* %72, align 16
  %74 = fsub <4 x float> %70, %73
  %75 = getelementptr inbounds float, float* %4, i64 %61
  %76 = load float, float* %75, align 4
  %77 = insertelement <4 x float> undef, float %76, i32 0
  %78 = shufflevector <4 x float> %77, <4 x float> undef, <4 x i32> zeroinitializer
  %79 = getelementptr inbounds float, float* %4, i64 %68
  %80 = load float, float* %79, align 4
  %81 = insertelement <4 x float> undef, float %80, i32 0
  %82 = fmul <4 x float> %14, %81
  %83 = shufflevector <4 x float> %82, <4 x float> undef, <4 x i32> zeroinitializer
  %84 = fadd <4 x float> %63, %66
  %85 = getelementptr inbounds <4 x float>, <4 x float>* %58, i64 %61
  store <4 x float> %84, <4 x float>* %85, align 16
  %86 = load <4 x float>, <4 x float>* %69, align 16
  %87 = load <4 x float>, <4 x float>* %72, align 16
  %88 = fadd <4 x float> %86, %87
  %89 = getelementptr inbounds <4 x float>, <4 x float>* %58, i64 %68
  store <4 x float> %88, <4 x float>* %89, align 16
  %90 = fmul <4 x float> %67, %83
  %91 = fmul <4 x float> %67, %78
  %92 = fmul <4 x float> %74, %83
  %93 = fsub <4 x float> %91, %92
  %94 = fmul <4 x float> %74, %78
  %95 = fadd <4 x float> %94, %90
  %96 = add nsw i64 %61, %18
  %97 = getelementptr inbounds <4 x float>, <4 x float>* %58, i64 %96
  store <4 x float> %93, <4 x float>* %97, align 16
  %98 = add nsw i64 %96, 1
  %99 = getelementptr inbounds <4 x float>, <4 x float>* %58, i64 %98
  store <4 x float> %95, <4 x float>* %99, align 16
  %100 = add nuw nsw i64 %61, 2
  %101 = icmp slt i64 %100, %19
  br i1 %101, label %60, label %102

102:                                              ; preds = %60, %56
  %103 = add nsw i32 %59, %0
  %104 = getelementptr inbounds <4 x float>, <4 x float>* %58, i64 %15
  %105 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %17
  %106 = icmp slt i32 %103, %7
  br i1 %106, label %56, label %107

107:                                              ; preds = %102, %30, %10, %20
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @passf3_ps(i32, i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, float* nocapture readonly, float* nocapture readonly, float) unnamed_addr #8 {
  %8 = mul nsw i32 %1, %0
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %115

10:                                               ; preds = %7
  %11 = fmul float %6, 0x3FEBB67AE0000000
  %12 = add nsw i32 %0, -1
  %13 = icmp sgt i32 %12, 0
  %14 = shl nsw i32 %0, 1
  %15 = insertelement <4 x float> undef, float %11, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = shl nsw i32 %8, 1
  %18 = mul nsw i32 %0, 3
  %19 = sext i32 %18 to i64
  %20 = sext i32 %0 to i64
  %21 = sext i32 %17 to i64
  %22 = sext i32 %8 to i64
  %23 = sext i32 %14 to i64
  %24 = sext i32 %12 to i64
  br label %25

25:                                               ; preds = %10, %110
  %26 = phi <4 x float>* [ %2, %10 ], [ %112, %110 ]
  %27 = phi <4 x float>* [ %3, %10 ], [ %113, %110 ]
  %28 = phi i32 [ 0, %10 ], [ %111, %110 ]
  br i1 %13, label %29, label %110

29:                                               ; preds = %25, %29
  %30 = phi i64 [ %108, %29 ], [ 0, %25 ]
  %31 = add nsw i64 %30, %20
  %32 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %31
  %33 = load <4 x float>, <4 x float>* %32, align 16
  %34 = add nsw i64 %30, %23
  %35 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %34
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = fadd <4 x float> %33, %36
  %38 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %30
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = fmul <4 x float> %37, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %41 = fadd <4 x float> %39, %40
  %42 = fadd <4 x float> %39, %37
  %43 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %30
  store <4 x float> %42, <4 x float>* %43, align 16
  %44 = add nsw i64 %31, 1
  %45 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %44
  %46 = load <4 x float>, <4 x float>* %45, align 16
  %47 = or i64 %34, 1
  %48 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %47
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = fadd <4 x float> %46, %49
  %51 = or i64 %30, 1
  %52 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %51
  %53 = load <4 x float>, <4 x float>* %52, align 16
  %54 = fmul <4 x float> %50, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %55 = fadd <4 x float> %53, %54
  %56 = fadd <4 x float> %53, %50
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %51
  store <4 x float> %56, <4 x float>* %57, align 16
  %58 = load <4 x float>, <4 x float>* %32, align 16
  %59 = load <4 x float>, <4 x float>* %35, align 16
  %60 = fsub <4 x float> %58, %59
  %61 = fmul <4 x float> %16, %60
  %62 = load <4 x float>, <4 x float>* %45, align 16
  %63 = load <4 x float>, <4 x float>* %48, align 16
  %64 = fsub <4 x float> %62, %63
  %65 = fmul <4 x float> %16, %64
  %66 = fsub <4 x float> %41, %65
  %67 = fadd <4 x float> %41, %65
  %68 = fadd <4 x float> %55, %61
  %69 = fsub <4 x float> %55, %61
  %70 = getelementptr inbounds float, float* %4, i64 %30
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds float, float* %4, i64 %51
  %73 = load float, float* %72, align 4
  %74 = fmul float %73, %6
  %75 = getelementptr inbounds float, float* %5, i64 %30
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds float, float* %5, i64 %51
  %78 = load float, float* %77, align 4
  %79 = fmul float %78, %6
  %80 = insertelement <4 x float> undef, float %74, i32 0
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> zeroinitializer
  %82 = fmul <4 x float> %66, %81
  %83 = insertelement <4 x float> undef, float %71, i32 0
  %84 = shufflevector <4 x float> %83, <4 x float> undef, <4 x i32> zeroinitializer
  %85 = fmul <4 x float> %66, %84
  %86 = fmul <4 x float> %68, %81
  %87 = fsub <4 x float> %85, %86
  %88 = fmul <4 x float> %68, %84
  %89 = fadd <4 x float> %88, %82
  %90 = add nsw i64 %30, %22
  %91 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %90
  store <4 x float> %87, <4 x float>* %91, align 16
  %92 = add nsw i64 %90, 1
  %93 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %92
  store <4 x float> %89, <4 x float>* %93, align 16
  %94 = insertelement <4 x float> undef, float %79, i32 0
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> zeroinitializer
  %96 = fmul <4 x float> %67, %95
  %97 = insertelement <4 x float> undef, float %76, i32 0
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> zeroinitializer
  %99 = fmul <4 x float> %67, %98
  %100 = fmul <4 x float> %69, %95
  %101 = fsub <4 x float> %99, %100
  %102 = fmul <4 x float> %69, %98
  %103 = fadd <4 x float> %102, %96
  %104 = add nsw i64 %30, %21
  %105 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %104
  store <4 x float> %101, <4 x float>* %105, align 16
  %106 = or i64 %104, 1
  %107 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %106
  store <4 x float> %103, <4 x float>* %107, align 16
  %108 = add nuw nsw i64 %30, 2
  %109 = icmp slt i64 %108, %24
  br i1 %109, label %29, label %110

110:                                              ; preds = %29, %25
  %111 = add nsw i32 %28, %0
  %112 = getelementptr inbounds <4 x float>, <4 x float>* %26, i64 %19
  %113 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %20
  %114 = icmp slt i32 %111, %8
  br i1 %114, label %25, label %115

115:                                              ; preds = %110, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.PFFFT_Setup* @pffft_new_setup(i32, i32) local_unnamed_addr #4 {
  %3 = tail call noalias i8* @malloc(i64 96) #12
  %4 = bitcast i8* %3 to %struct.PFFFT_Setup*
  %5 = bitcast i8* %3 to i32*
  store i32 %0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 68
  %7 = bitcast i8* %6 to i32*
  store i32 %1, i32* %7, align 4
  %8 = icmp eq i32 %1, 0
  %9 = sdiv i32 %0, 2
  %10 = select i1 %8, i32 %9, i32 %0
  %11 = sdiv i32 %10, 4
  %12 = getelementptr inbounds i8, i8* %3, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = shl nsw i32 %11, 1
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = add nsw i64 %16, 64
  %18 = tail call noalias i8* @malloc(i64 %17) #12
  %19 = icmp eq i8* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %2
  %21 = ptrtoint i8* %18 to i64
  %22 = add i64 %21, 64
  %23 = and i64 %22, -64
  %24 = inttoptr i64 %23 to i8*
  %25 = inttoptr i64 %23 to i8**
  %26 = getelementptr inbounds i8*, i8** %25, i64 -1
  store i8* %18, i8** %26, align 8
  %27 = load i32, i32* %13, align 4
  br label %28

28:                                               ; preds = %2, %20
  %29 = phi i32 [ %27, %20 ], [ %11, %2 ]
  %30 = phi i8* [ %24, %20 ], [ null, %2 ]
  %31 = getelementptr inbounds i8, i8* %3, i64 72
  %32 = bitcast i8* %31 to i8**
  store i8* %30, i8** %32, align 8
  %33 = getelementptr inbounds i8, i8* %3, i64 80
  %34 = bitcast i8* %33 to float**
  %35 = bitcast i8* %33 to i8**
  store i8* %30, i8** %35, align 8
  %36 = bitcast i8* %30 to <4 x float>*
  %37 = mul nsw i32 %29, 6
  %38 = sdiv i32 %37, 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds <4 x float>, <4 x float>* %36, i64 %39, i64 0
  %41 = getelementptr inbounds i8, i8* %3, i64 88
  %42 = bitcast i8* %41 to float**
  store float* %40, float** %42, align 8
  %43 = icmp sgt i32 %29, 0
  %44 = bitcast i8* %30 to float*
  br i1 %8, label %48, label %45

45:                                               ; preds = %28
  br i1 %43, label %46, label %305

46:                                               ; preds = %45
  %47 = sitofp i32 %0 to double
  br label %249

48:                                               ; preds = %28
  br i1 %43, label %49, label %107

49:                                               ; preds = %48
  %50 = sitofp i32 %0 to double
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi float* [ %44, %49 ], [ %78, %51 ]
  %53 = phi i32 [ 0, %49 ], [ %105, %51 ]
  %54 = lshr i32 %53, 2
  %55 = and i32 %53, 3
  %56 = sitofp i32 %53 to double
  %57 = fmul double %56, 0xC01921FB54442D18
  %58 = fdiv double %57, %50
  %59 = fptrunc double %58 to float
  %60 = fpext float %59 to double
  %61 = tail call double @cos(double %60) #12
  %62 = fptrunc double %61 to float
  %63 = mul i32 %54, 24
  %64 = or i32 %63, %55
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %52, i64 %65
  store float %62, float* %66, align 4
  %67 = tail call double @sin(double %60) #12
  %68 = fptrunc double %67 to float
  %69 = or i32 %64, 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %52, i64 %70
  store float %68, float* %71, align 4
  %72 = fmul double %56, 0xC02921FB54442D18
  %73 = fdiv double %72, %50
  %74 = fptrunc double %73 to float
  %75 = fpext float %74 to double
  %76 = tail call double @cos(double %75) #12
  %77 = fptrunc double %76 to float
  %78 = load float*, float** %34, align 8
  %79 = mul i32 %54, 24
  %80 = add i32 %79, 8
  %81 = or i32 %80, %55
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds float, float* %78, i64 %82
  store float %77, float* %83, align 4
  %84 = tail call double @sin(double %75) #12
  %85 = fptrunc double %84 to float
  %86 = or i32 %81, 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %78, i64 %87
  store float %85, float* %88, align 4
  %89 = fmul double %56, 0xC032D97C7F3321D2
  %90 = fdiv double %89, %50
  %91 = fptrunc double %90 to float
  %92 = fpext float %91 to double
  %93 = tail call double @cos(double %92) #12
  %94 = fptrunc double %93 to float
  %95 = mul i32 %54, 24
  %96 = add i32 %95, 16
  %97 = or i32 %96, %55
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %78, i64 %98
  store float %94, float* %99, align 4
  %100 = tail call double @sin(double %92) #12
  %101 = fptrunc double %100 to float
  %102 = or i32 %97, 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %78, i64 %103
  store float %101, float* %104, align 4
  %105 = add nuw nsw i32 %53, 1
  %106 = icmp eq i32 %105, %29
  br i1 %106, label %107, label %51

107:                                              ; preds = %51, %48
  %108 = sdiv i32 %0, 4
  %109 = getelementptr inbounds i8, i8* %3, i64 8
  %110 = bitcast i8* %109 to i32*
  %111 = getelementptr inbounds i8, i8* %3, i64 16
  %112 = bitcast i8* %111 to i32*
  br label %113

113:                                              ; preds = %183, %107
  %114 = phi i64 [ 0, %107 ], [ %186, %183 ]
  %115 = phi i32 [ 4, %107 ], [ %188, %183 ]
  %116 = phi i32 [ %108, %107 ], [ %185, %183 ]
  %117 = phi i32 [ 0, %107 ], [ %184, %183 ]
  %118 = icmp eq i32 %116, 1
  br i1 %118, label %183, label %119

119:                                              ; preds = %113
  %120 = icmp eq i32 %115, 2
  %121 = add i32 %117, 2
  %122 = sext i32 %117 to i64
  br label %123

123:                                              ; preds = %178, %119
  %124 = phi i32 [ %180, %178 ], [ 0, %119 ]
  %125 = phi i64 [ %135, %178 ], [ %122, %119 ]
  %126 = phi i32 [ %131, %178 ], [ %116, %119 ]
  %127 = phi i32 [ %136, %178 ], [ %117, %119 ]
  %128 = add i32 %121, %124
  %129 = zext i32 %128 to i64
  %130 = add nsw i64 %129, -2
  %131 = sdiv i32 %126, %115
  %132 = mul nsw i32 %131, %115
  %133 = icmp eq i32 %126, %132
  br i1 %133, label %134, label %181

134:                                              ; preds = %123
  %135 = add i64 %125, 1
  %136 = add nsw i32 %127, 1
  %137 = add nsw i64 %125, 2
  %138 = getelementptr inbounds i32, i32* %110, i64 %137
  store i32 %115, i32* %138, align 4
  %139 = icmp ne i64 %125, 0
  %140 = and i1 %120, %139
  br i1 %140, label %141, label %178

141:                                              ; preds = %134
  %142 = icmp slt i64 %135, 2
  br i1 %142, label %177, label %143

143:                                              ; preds = %141
  %144 = and i64 %130, 1
  %145 = icmp eq i32 %128, 3
  br i1 %145, label %167, label %146

146:                                              ; preds = %143
  %147 = sub nsw i64 %130, %144
  br label %148

148:                                              ; preds = %148, %146
  %149 = phi i64 [ 2, %146 ], [ %164, %148 ]
  %150 = phi i64 [ %147, %146 ], [ %165, %148 ]
  %151 = sub nsw i64 %135, %149
  %152 = add nsw i64 %151, 2
  %153 = getelementptr inbounds i32, i32* %110, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = add nsw i64 %151, 3
  %156 = getelementptr inbounds i32, i32* %110, i64 %155
  store i32 %154, i32* %156, align 4
  %157 = or i64 %149, 1
  %158 = sub nsw i64 %135, %157
  %159 = add nsw i64 %158, 2
  %160 = getelementptr inbounds i32, i32* %110, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = add nsw i64 %158, 3
  %163 = getelementptr inbounds i32, i32* %110, i64 %162
  store i32 %161, i32* %163, align 4
  %164 = add nuw nsw i64 %149, 2
  %165 = add i64 %150, -2
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %148

167:                                              ; preds = %148, %143
  %168 = phi i64 [ 2, %143 ], [ %164, %148 ]
  %169 = icmp eq i64 %144, 0
  br i1 %169, label %177, label %170

170:                                              ; preds = %167
  %171 = sub nsw i64 %135, %168
  %172 = add nsw i64 %171, 2
  %173 = getelementptr inbounds i32, i32* %110, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = add nsw i64 %171, 3
  %176 = getelementptr inbounds i32, i32* %110, i64 %175
  store i32 %174, i32* %176, align 4
  br label %177

177:                                              ; preds = %170, %167, %141
  store i32 2, i32* %112, align 4
  br label %178

178:                                              ; preds = %177, %134
  %179 = icmp eq i32 %131, 1
  %180 = add i32 %124, 1
  br i1 %179, label %183, label %123

181:                                              ; preds = %123
  %182 = trunc i64 %125 to i32
  br label %183

183:                                              ; preds = %178, %181, %113
  %184 = phi i32 [ %117, %113 ], [ %182, %181 ], [ %136, %178 ]
  %185 = phi i32 [ 1, %113 ], [ %126, %181 ], [ 1, %178 ]
  %186 = add nuw nsw i64 %114, 1
  %187 = getelementptr inbounds [5 x i32], [5 x i32]* @rffti1_ps.ntryh, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = icmp eq i64 %186, 4
  br i1 %189, label %190, label %113

190:                                              ; preds = %183
  store i32 %108, i32* %110, align 4
  %191 = getelementptr inbounds i8, i8* %3, i64 12
  %192 = bitcast i8* %191 to i32*
  store i32 %184, i32* %192, align 4
  %193 = sitofp i32 %108 to double
  %194 = fdiv double 0x401921FB54442D18, %193
  %195 = fptrunc double %194 to float
  %196 = icmp sgt i32 %184, 1
  br i1 %196, label %197, label %309

197:                                              ; preds = %190
  %198 = zext i32 %184 to i64
  br label %205

199:                                              ; preds = %245
  %200 = mul i32 %213, %219
  %201 = add i32 %200, %208
  br label %202

202:                                              ; preds = %205, %199
  %203 = phi i32 [ %208, %205 ], [ %201, %199 ]
  %204 = icmp eq i64 %209, %198
  br i1 %204, label %309, label %205

205:                                              ; preds = %202, %197
  %206 = phi i64 [ 1, %197 ], [ %209, %202 ]
  %207 = phi i32 [ 1, %197 ], [ %212, %202 ]
  %208 = phi i32 [ 0, %197 ], [ %203, %202 ]
  %209 = add nuw nsw i64 %206, 1
  %210 = getelementptr inbounds i32, i32* %110, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = mul nsw i32 %211, %207
  %213 = sdiv i32 %108, %212
  %214 = icmp sgt i32 %211, 1
  br i1 %214, label %215, label %202

215:                                              ; preds = %205
  %216 = icmp slt i32 %213, 3
  %217 = sext i32 %208 to i64
  %218 = sext i32 %213 to i64
  %219 = add nsw i32 %211, -1
  br label %220

220:                                              ; preds = %245, %215
  %221 = phi i64 [ %217, %215 ], [ %247, %245 ]
  %222 = phi i32 [ 0, %215 ], [ %224, %245 ]
  %223 = phi i32 [ 1, %215 ], [ %246, %245 ]
  %224 = add nsw i32 %222, %207
  %225 = sitofp i32 %224 to float
  %226 = fmul float %195, %225
  br i1 %216, label %245, label %227

227:                                              ; preds = %220, %227
  %228 = phi i64 [ %231, %227 ], [ %221, %220 ]
  %229 = phi i32 [ %232, %227 ], [ 0, %220 ]
  %230 = phi i32 [ %243, %227 ], [ 3, %220 ]
  %231 = add i64 %228, 2
  %232 = add nuw nsw i32 %229, 1
  %233 = sitofp i32 %232 to float
  %234 = fmul float %226, %233
  %235 = fpext float %234 to double
  %236 = tail call double @cos(double %235) #12
  %237 = fptrunc double %236 to float
  %238 = getelementptr inbounds <4 x float>, <4 x float>* %36, i64 %39, i64 %228
  store float %237, float* %238, align 4
  %239 = tail call double @sin(double %235) #12
  %240 = fptrunc double %239 to float
  %241 = add nsw i64 %228, 1
  %242 = getelementptr inbounds <4 x float>, <4 x float>* %36, i64 %39, i64 %241
  store float %240, float* %242, align 4
  %243 = add nuw nsw i32 %230, 2
  %244 = icmp sgt i32 %243, %213
  br i1 %244, label %245, label %227

245:                                              ; preds = %227, %220
  %246 = add nuw nsw i32 %223, 1
  %247 = add i64 %221, %218
  %248 = icmp eq i32 %246, %211
  br i1 %248, label %199, label %220

249:                                              ; preds = %249, %46
  %250 = phi float* [ %44, %46 ], [ %276, %249 ]
  %251 = phi i32 [ 0, %46 ], [ %303, %249 ]
  %252 = lshr i32 %251, 2
  %253 = and i32 %251, 3
  %254 = sitofp i32 %251 to double
  %255 = fmul double %254, 0xC01921FB54442D18
  %256 = fdiv double %255, %47
  %257 = fptrunc double %256 to float
  %258 = fpext float %257 to double
  %259 = tail call double @cos(double %258) #12
  %260 = fptrunc double %259 to float
  %261 = mul i32 %252, 24
  %262 = or i32 %261, %253
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds float, float* %250, i64 %263
  store float %260, float* %264, align 4
  %265 = tail call double @sin(double %258) #12
  %266 = fptrunc double %265 to float
  %267 = or i32 %262, 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds float, float* %250, i64 %268
  store float %266, float* %269, align 4
  %270 = fmul double %254, 0xC02921FB54442D18
  %271 = fdiv double %270, %47
  %272 = fptrunc double %271 to float
  %273 = fpext float %272 to double
  %274 = tail call double @cos(double %273) #12
  %275 = fptrunc double %274 to float
  %276 = load float*, float** %34, align 8
  %277 = mul i32 %252, 24
  %278 = add i32 %277, 8
  %279 = or i32 %278, %253
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds float, float* %276, i64 %280
  store float %275, float* %281, align 4
  %282 = tail call double @sin(double %273) #12
  %283 = fptrunc double %282 to float
  %284 = or i32 %279, 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds float, float* %276, i64 %285
  store float %283, float* %286, align 4
  %287 = fmul double %254, 0xC032D97C7F3321D2
  %288 = fdiv double %287, %47
  %289 = fptrunc double %288 to float
  %290 = fpext float %289 to double
  %291 = tail call double @cos(double %290) #12
  %292 = fptrunc double %291 to float
  %293 = mul i32 %252, 24
  %294 = add i32 %293, 16
  %295 = or i32 %294, %253
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds float, float* %276, i64 %296
  store float %292, float* %297, align 4
  %298 = tail call double @sin(double %290) #12
  %299 = fptrunc double %298 to float
  %300 = or i32 %295, 4
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, float* %276, i64 %301
  store float %299, float* %302, align 4
  %303 = add nuw nsw i32 %251, 1
  %304 = icmp eq i32 %303, %29
  br i1 %304, label %305, label %249

305:                                              ; preds = %249, %45
  %306 = sdiv i32 %0, 4
  %307 = getelementptr inbounds i8, i8* %3, i64 8
  %308 = bitcast i8* %307 to i32*
  tail call void @cffti1_ps(i32 %306, float* %40, i32* %308)
  br label %309

309:                                              ; preds = %202, %190, %305
  %310 = getelementptr inbounds i8, i8* %3, i64 12
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 4
  %313 = icmp sgt i32 %312, 0
  br i1 %313, label %314, label %418

314:                                              ; preds = %309
  %315 = getelementptr inbounds i8, i8* %3, i64 8
  %316 = bitcast i8* %315 to [15 x i32]*
  %317 = sext i32 %312 to i64
  %318 = icmp ult i32 %312, 8
  br i1 %318, label %406, label %319

319:                                              ; preds = %314
  %320 = and i64 %317, -8
  %321 = add nsw i64 %320, -8
  %322 = lshr exact i64 %321, 3
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 3
  %325 = icmp ult i64 %321, 24
  br i1 %325, label %372, label %326

326:                                              ; preds = %319
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %369, %328 ]
  %330 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %326 ], [ %367, %328 ]
  %331 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %326 ], [ %368, %328 ]
  %332 = phi i64 [ %327, %326 ], [ %370, %328 ]
  %333 = or i64 %329, 2
  %334 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %333
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4
  %337 = getelementptr inbounds i32, i32* %334, i64 4
  %338 = bitcast i32* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 4
  %340 = mul nsw <4 x i32> %336, %330
  %341 = mul nsw <4 x i32> %339, %331
  %342 = or i64 %329, 10
  %343 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %342
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 4
  %346 = getelementptr inbounds i32, i32* %343, i64 4
  %347 = bitcast i32* %346 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 4
  %349 = mul nsw <4 x i32> %345, %340
  %350 = mul nsw <4 x i32> %348, %341
  %351 = or i64 %329, 18
  %352 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %351
  %353 = bitcast i32* %352 to <4 x i32>*
  %354 = load <4 x i32>, <4 x i32>* %353, align 4
  %355 = getelementptr inbounds i32, i32* %352, i64 4
  %356 = bitcast i32* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 4
  %358 = mul nsw <4 x i32> %354, %349
  %359 = mul nsw <4 x i32> %357, %350
  %360 = or i64 %329, 26
  %361 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %360
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4
  %364 = getelementptr inbounds i32, i32* %361, i64 4
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4
  %367 = mul nsw <4 x i32> %363, %358
  %368 = mul nsw <4 x i32> %366, %359
  %369 = add i64 %329, 32
  %370 = add i64 %332, -4
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %372, label %328, !llvm.loop !2

372:                                              ; preds = %328, %319
  %373 = phi <4 x i32> [ undef, %319 ], [ %367, %328 ]
  %374 = phi <4 x i32> [ undef, %319 ], [ %368, %328 ]
  %375 = phi i64 [ 0, %319 ], [ %369, %328 ]
  %376 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %319 ], [ %367, %328 ]
  %377 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %319 ], [ %368, %328 ]
  %378 = icmp eq i64 %324, 0
  br i1 %378, label %396, label %379

379:                                              ; preds = %372, %379
  %380 = phi i64 [ %393, %379 ], [ %375, %372 ]
  %381 = phi <4 x i32> [ %391, %379 ], [ %376, %372 ]
  %382 = phi <4 x i32> [ %392, %379 ], [ %377, %372 ]
  %383 = phi i64 [ %394, %379 ], [ %324, %372 ]
  %384 = or i64 %380, 2
  %385 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %384
  %386 = bitcast i32* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 4
  %388 = getelementptr inbounds i32, i32* %385, i64 4
  %389 = bitcast i32* %388 to <4 x i32>*
  %390 = load <4 x i32>, <4 x i32>* %389, align 4
  %391 = mul nsw <4 x i32> %387, %381
  %392 = mul nsw <4 x i32> %390, %382
  %393 = add i64 %380, 8
  %394 = add i64 %383, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %379, !llvm.loop !4

396:                                              ; preds = %379, %372
  %397 = phi <4 x i32> [ %373, %372 ], [ %391, %379 ]
  %398 = phi <4 x i32> [ %374, %372 ], [ %392, %379 ]
  %399 = mul <4 x i32> %398, %397
  %400 = shufflevector <4 x i32> %399, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %401 = mul <4 x i32> %399, %400
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %403 = mul <4 x i32> %401, %402
  %404 = extractelement <4 x i32> %403, i32 0
  %405 = icmp eq i64 %320, %317
  br i1 %405, label %418, label %406

406:                                              ; preds = %396, %314
  %407 = phi i64 [ 0, %314 ], [ %320, %396 ]
  %408 = phi i32 [ 1, %314 ], [ %404, %396 ]
  br label %409

409:                                              ; preds = %406, %409
  %410 = phi i64 [ %416, %409 ], [ %407, %406 ]
  %411 = phi i32 [ %415, %409 ], [ %408, %406 ]
  %412 = add nuw nsw i64 %410, 2
  %413 = getelementptr inbounds [15 x i32], [15 x i32]* %316, i64 0, i64 %412
  %414 = load i32, i32* %413, align 4
  %415 = mul nsw i32 %414, %411
  %416 = add nuw nsw i64 %410, 1
  %417 = icmp slt i64 %416, %317
  br i1 %417, label %409, label %418, !llvm.loop !6

418:                                              ; preds = %409, %396, %309
  %419 = phi i32 [ 1, %309 ], [ %404, %396 ], [ %415, %409 ]
  %420 = sdiv i32 %0, 4
  %421 = icmp eq i32 %419, %420
  br i1 %421, label %430, label %422

422:                                              ; preds = %418
  %423 = load i8*, i8** %32, align 8
  %424 = icmp eq i8* %423, null
  br i1 %424, label %429, label %425

425:                                              ; preds = %422
  %426 = getelementptr inbounds i8, i8* %423, i64 -8
  %427 = bitcast i8* %426 to i8**
  %428 = load i8*, i8** %427, align 8
  tail call void @free(i8* %428) #12
  br label %429

429:                                              ; preds = %422, %425
  tail call void @free(i8* %3) #12
  br label %430

430:                                              ; preds = %418, %429
  %431 = phi %struct.PFFFT_Setup* [ null, %429 ], [ %4, %418 ]
  ret %struct.PFFFT_Setup* %431
}

; Function Attrs: nounwind ssp uwtable
define hidden void @pffft_destroy_setup(%struct.PFFFT_Setup* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 4
  %3 = bitcast <4 x float>** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds i8, i8* %4, i64 -8
  %8 = bitcast i8* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @free(i8* %9) #12
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %struct.PFFFT_Setup* %0 to i8*
  tail call void @free(i8* %11) #12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @pffft_zreorder(%struct.PFFFT_Setup* nocapture readonly, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #9 {
  %5 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = bitcast float* %1 to <4 x float>*
  %10 = bitcast float* %2 to <4 x float>*
  %11 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %388

14:                                               ; preds = %4
  %15 = sdiv i32 %6, 32
  %16 = icmp eq i32 %3, 0
  %17 = icmp sgt i32 %6, 31
  br i1 %16, label %22, label %18

18:                                               ; preds = %14
  br i1 %17, label %19, label %235

19:                                               ; preds = %18
  %20 = shl nsw i32 %15, 1
  %21 = zext i32 %15 to i64
  br label %202

22:                                               ; preds = %14
  br i1 %17, label %23, label %59

23:                                               ; preds = %22
  %24 = shl nsw i32 %15, 1
  %25 = zext i32 %15 to i64
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi i64 [ 0, %23 ], [ %56, %26 ]
  %28 = phi i32 [ 0, %23 ], [ %57, %26 ]
  %29 = shl nsw i64 %27, 3
  %30 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %29
  %31 = load <4 x float>, <4 x float>* %30, align 16
  %32 = or i64 %29, 1
  %33 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %32
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = shufflevector <4 x float> %31, <4 x float> %34, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %36 = shufflevector <4 x float> %31, <4 x float> %34, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %37 = shl nuw nsw i64 %27, 1
  %38 = or i64 %37, 1
  %39 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %38
  store <4 x float> %36, <4 x float>* %39, align 16
  %40 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %37
  store <4 x float> %35, <4 x float>* %40, align 16
  %41 = or i64 %29, 4
  %42 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %41
  %43 = load <4 x float>, <4 x float>* %42, align 16
  %44 = or i64 %29, 5
  %45 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %44
  %46 = load <4 x float>, <4 x float>* %45, align 16
  %47 = shufflevector <4 x float> %43, <4 x float> %46, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %48 = shufflevector <4 x float> %43, <4 x float> %46, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %49 = add nsw i32 %28, %24
  %50 = shl nsw i32 %49, 1
  %51 = or i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %52
  store <4 x float> %48, <4 x float>* %53, align 16
  %54 = sext i32 %50 to i64
  %55 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %54
  store <4 x float> %47, <4 x float>* %55, align 16
  %56 = add nuw nsw i64 %27, 1
  %57 = add nuw nsw i32 %28, 1
  %58 = icmp eq i64 %56, %25
  br i1 %58, label %59, label %26

59:                                               ; preds = %26, %22
  %60 = getelementptr inbounds float, float* %1, i64 8
  %61 = bitcast float* %60 to <4 x float>*
  %62 = sdiv i32 %6, 2
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %2, i64 %63
  %65 = load <4 x float>, <4 x float>* %61, align 16
  %66 = getelementptr inbounds float, float* %1, i64 12
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 16
  %69 = shufflevector <4 x float> %65, <4 x float> %68, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %70 = shufflevector <4 x float> %65, <4 x float> %68, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %71 = shufflevector <4 x float> %70, <4 x float> %69, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %72 = getelementptr inbounds float, float* %64, i64 -4
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %71, <4 x float>* %73, align 16
  %74 = icmp sgt i32 %6, 63
  br i1 %74, label %75, label %127

75:                                               ; preds = %59
  %76 = add nsw i32 %15, -1
  %77 = and i32 %76, 1
  %78 = and i32 %6, -32
  %79 = icmp eq i32 %78, 64
  br i1 %79, label %109, label %80

80:                                               ; preds = %75
  %81 = sub nsw i32 %76, %77
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi <4 x float>* [ %61, %80 ], [ %97, %82 ]
  %84 = phi <4 x float>* [ %73, %80 ], [ %106, %82 ]
  %85 = phi <4 x float> [ %70, %80 ], [ %102, %82 ]
  %86 = phi i32 [ %81, %80 ], [ %107, %82 ]
  %87 = getelementptr inbounds <4 x float>, <4 x float>* %83, i64 8
  %88 = load <4 x float>, <4 x float>* %87, align 16
  %89 = getelementptr inbounds <4 x float>, <4 x float>* %83, i64 9
  %90 = load <4 x float>, <4 x float>* %89, align 16
  %91 = shufflevector <4 x float> %88, <4 x float> %90, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = shufflevector <4 x float> %88, <4 x float> %90, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %93 = shufflevector <4 x float> %91, <4 x float> %85, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %94 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 -1
  store <4 x float> %93, <4 x float>* %94, align 16
  %95 = shufflevector <4 x float> %92, <4 x float> %91, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %96 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 -2
  store <4 x float> %95, <4 x float>* %96, align 16
  %97 = getelementptr inbounds <4 x float>, <4 x float>* %83, i64 16
  %98 = load <4 x float>, <4 x float>* %97, align 16
  %99 = getelementptr inbounds <4 x float>, <4 x float>* %83, i64 17
  %100 = load <4 x float>, <4 x float>* %99, align 16
  %101 = shufflevector <4 x float> %98, <4 x float> %100, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %102 = shufflevector <4 x float> %98, <4 x float> %100, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %103 = shufflevector <4 x float> %101, <4 x float> %92, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %104 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 -3
  store <4 x float> %103, <4 x float>* %104, align 16
  %105 = shufflevector <4 x float> %102, <4 x float> %101, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 -4
  store <4 x float> %105, <4 x float>* %106, align 16
  %107 = add i32 %86, -2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %82

109:                                              ; preds = %82, %75
  %110 = phi <4 x float> [ undef, %75 ], [ %102, %82 ]
  %111 = phi <4 x float>* [ undef, %75 ], [ %106, %82 ]
  %112 = phi <4 x float>* [ %61, %75 ], [ %97, %82 ]
  %113 = phi <4 x float>* [ %73, %75 ], [ %106, %82 ]
  %114 = phi <4 x float> [ %70, %75 ], [ %102, %82 ]
  %115 = icmp eq i32 %77, 0
  br i1 %115, label %127, label %116

116:                                              ; preds = %109
  %117 = getelementptr inbounds <4 x float>, <4 x float>* %112, i64 8
  %118 = load <4 x float>, <4 x float>* %117, align 16
  %119 = getelementptr inbounds <4 x float>, <4 x float>* %112, i64 9
  %120 = load <4 x float>, <4 x float>* %119, align 16
  %121 = shufflevector <4 x float> %118, <4 x float> %120, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %122 = shufflevector <4 x float> %118, <4 x float> %120, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %123 = shufflevector <4 x float> %121, <4 x float> %114, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %124 = getelementptr inbounds <4 x float>, <4 x float>* %113, i64 -1
  store <4 x float> %123, <4 x float>* %124, align 16
  %125 = shufflevector <4 x float> %122, <4 x float> %121, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %126 = getelementptr inbounds <4 x float>, <4 x float>* %113, i64 -2
  store <4 x float> %125, <4 x float>* %126, align 16
  br label %127

127:                                              ; preds = %116, %109, %59
  %128 = phi <4 x float> [ %70, %59 ], [ %110, %109 ], [ %122, %116 ]
  %129 = phi <4 x float>* [ %73, %59 ], [ %111, %109 ], [ %126, %116 ]
  %130 = shufflevector <4 x float> %69, <4 x float> %128, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %131 = getelementptr inbounds <4 x float>, <4 x float>* %129, i64 -1
  store <4 x float> %130, <4 x float>* %131, align 16
  %132 = getelementptr inbounds float, float* %1, i64 24
  %133 = bitcast float* %132 to <4 x float>*
  %134 = sext i32 %6 to i64
  %135 = getelementptr inbounds float, float* %2, i64 %134
  %136 = load <4 x float>, <4 x float>* %133, align 16
  %137 = getelementptr inbounds float, float* %1, i64 28
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16
  %140 = shufflevector <4 x float> %136, <4 x float> %139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %141 = shufflevector <4 x float> %136, <4 x float> %139, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %142 = shufflevector <4 x float> %141, <4 x float> %140, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %143 = getelementptr inbounds float, float* %135, i64 -4
  %144 = bitcast float* %143 to <4 x float>*
  store <4 x float> %142, <4 x float>* %144, align 16
  br i1 %74, label %145, label %197

145:                                              ; preds = %127
  %146 = add nsw i32 %15, -1
  %147 = and i32 %146, 1
  %148 = and i32 %6, -32
  %149 = icmp eq i32 %148, 64
  br i1 %149, label %179, label %150

150:                                              ; preds = %145
  %151 = sub nsw i32 %146, %147
  br label %152

152:                                              ; preds = %152, %150
  %153 = phi <4 x float>* [ %133, %150 ], [ %167, %152 ]
  %154 = phi <4 x float>* [ %144, %150 ], [ %176, %152 ]
  %155 = phi <4 x float> [ %141, %150 ], [ %172, %152 ]
  %156 = phi i32 [ %151, %150 ], [ %177, %152 ]
  %157 = getelementptr inbounds <4 x float>, <4 x float>* %153, i64 8
  %158 = load <4 x float>, <4 x float>* %157, align 16
  %159 = getelementptr inbounds <4 x float>, <4 x float>* %153, i64 9
  %160 = load <4 x float>, <4 x float>* %159, align 16
  %161 = shufflevector <4 x float> %158, <4 x float> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = shufflevector <4 x float> %158, <4 x float> %160, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %163 = shufflevector <4 x float> %161, <4 x float> %155, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %164 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 -1
  store <4 x float> %163, <4 x float>* %164, align 16
  %165 = shufflevector <4 x float> %162, <4 x float> %161, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %166 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 -2
  store <4 x float> %165, <4 x float>* %166, align 16
  %167 = getelementptr inbounds <4 x float>, <4 x float>* %153, i64 16
  %168 = load <4 x float>, <4 x float>* %167, align 16
  %169 = getelementptr inbounds <4 x float>, <4 x float>* %153, i64 17
  %170 = load <4 x float>, <4 x float>* %169, align 16
  %171 = shufflevector <4 x float> %168, <4 x float> %170, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %172 = shufflevector <4 x float> %168, <4 x float> %170, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %173 = shufflevector <4 x float> %171, <4 x float> %162, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %174 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 -3
  store <4 x float> %173, <4 x float>* %174, align 16
  %175 = shufflevector <4 x float> %172, <4 x float> %171, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %176 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 -4
  store <4 x float> %175, <4 x float>* %176, align 16
  %177 = add i32 %156, -2
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %152

179:                                              ; preds = %152, %145
  %180 = phi <4 x float> [ undef, %145 ], [ %172, %152 ]
  %181 = phi <4 x float>* [ undef, %145 ], [ %176, %152 ]
  %182 = phi <4 x float>* [ %133, %145 ], [ %167, %152 ]
  %183 = phi <4 x float>* [ %144, %145 ], [ %176, %152 ]
  %184 = phi <4 x float> [ %141, %145 ], [ %172, %152 ]
  %185 = icmp eq i32 %147, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %179
  %187 = getelementptr inbounds <4 x float>, <4 x float>* %182, i64 8
  %188 = load <4 x float>, <4 x float>* %187, align 16
  %189 = getelementptr inbounds <4 x float>, <4 x float>* %182, i64 9
  %190 = load <4 x float>, <4 x float>* %189, align 16
  %191 = shufflevector <4 x float> %188, <4 x float> %190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %192 = shufflevector <4 x float> %188, <4 x float> %190, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %193 = shufflevector <4 x float> %191, <4 x float> %184, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %194 = getelementptr inbounds <4 x float>, <4 x float>* %183, i64 -1
  store <4 x float> %193, <4 x float>* %194, align 16
  %195 = shufflevector <4 x float> %192, <4 x float> %191, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %196 = getelementptr inbounds <4 x float>, <4 x float>* %183, i64 -2
  store <4 x float> %195, <4 x float>* %196, align 16
  br label %197

197:                                              ; preds = %186, %179, %127
  %198 = phi <4 x float> [ %141, %127 ], [ %180, %179 ], [ %192, %186 ]
  %199 = phi <4 x float>* [ %144, %127 ], [ %181, %179 ], [ %196, %186 ]
  %200 = shufflevector <4 x float> %140, <4 x float> %198, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %201 = getelementptr inbounds <4 x float>, <4 x float>* %199, i64 -1
  store <4 x float> %200, <4 x float>* %201, align 16
  br label %445

202:                                              ; preds = %202, %19
  %203 = phi i64 [ 0, %19 ], [ %232, %202 ]
  %204 = phi i32 [ 0, %19 ], [ %233, %202 ]
  %205 = shl nuw nsw i64 %203, 1
  %206 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %205
  %207 = load <4 x float>, <4 x float>* %206, align 16
  %208 = or i64 %205, 1
  %209 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %208
  %210 = load <4 x float>, <4 x float>* %209, align 16
  %211 = shufflevector <4 x float> %207, <4 x float> %210, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %212 = shufflevector <4 x float> %207, <4 x float> %210, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %213 = shl nsw i64 %203, 3
  %214 = or i64 %213, 1
  %215 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %214
  store <4 x float> %212, <4 x float>* %215, align 16
  %216 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %213
  store <4 x float> %211, <4 x float>* %216, align 16
  %217 = add nsw i32 %204, %20
  %218 = shl nsw i32 %217, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %219
  %221 = load <4 x float>, <4 x float>* %220, align 16
  %222 = or i32 %218, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %223
  %225 = load <4 x float>, <4 x float>* %224, align 16
  %226 = shufflevector <4 x float> %221, <4 x float> %225, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %227 = shufflevector <4 x float> %221, <4 x float> %225, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %228 = or i64 %213, 5
  %229 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %228
  store <4 x float> %227, <4 x float>* %229, align 16
  %230 = or i64 %213, 4
  %231 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %230
  store <4 x float> %226, <4 x float>* %231, align 16
  %232 = add nuw nsw i64 %203, 1
  %233 = add nuw nsw i32 %204, 1
  %234 = icmp eq i64 %232, %21
  br i1 %234, label %235, label %202

235:                                              ; preds = %202, %18
  %236 = sdiv i32 %6, 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, float* %1, i64 %237
  %239 = bitcast float* %238 to <4 x float>*
  %240 = sext i32 %6 to i64
  %241 = getelementptr inbounds float, float* %2, i64 %240
  %242 = getelementptr inbounds float, float* %241, i64 -24
  %243 = bitcast float* %242 to <4 x float>*
  %244 = load <4 x float>, <4 x float>* %239, align 16
  %245 = getelementptr inbounds float, float* %238, i64 4
  %246 = bitcast float* %245 to <4 x float>*
  %247 = icmp sgt i32 %6, 63
  %248 = load <4 x float>, <4 x float>* %246, align 16
  br i1 %247, label %249, label %304

249:                                              ; preds = %235
  %250 = add nsw i32 %15, -1
  %251 = and i32 %250, 1
  %252 = and i32 %6, -32
  %253 = icmp eq i32 %252, 64
  br i1 %253, label %284, label %254

254:                                              ; preds = %249
  %255 = sub nsw i32 %250, %251
  br label %256

256:                                              ; preds = %256, %254
  %257 = phi <4 x float> [ %248, %254 ], [ %281, %256 ]
  %258 = phi <4 x float>* [ %246, %254 ], [ %273, %256 ]
  %259 = phi <4 x float>* [ %243, %254 ], [ %280, %256 ]
  %260 = phi <4 x float> [ %244, %254 ], [ %274, %256 ]
  %261 = phi i32 [ %255, %254 ], [ %282, %256 ]
  %262 = getelementptr inbounds <4 x float>, <4 x float>* %258, i64 1
  %263 = getelementptr inbounds <4 x float>, <4 x float>* %258, i64 2
  %264 = load <4 x float>, <4 x float>* %262, align 16
  %265 = shufflevector <4 x float> %257, <4 x float> %260, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %266 = shufflevector <4 x float> %264, <4 x float> %257, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %267 = shufflevector <4 x float> %266, <4 x float> %265, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %268 = shufflevector <4 x float> %266, <4 x float> %265, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %269 = getelementptr inbounds <4 x float>, <4 x float>* %259, i64 1
  store <4 x float> %268, <4 x float>* %269, align 16
  store <4 x float> %267, <4 x float>* %259, align 16
  %270 = getelementptr inbounds <4 x float>, <4 x float>* %259, i64 -8
  %271 = load <4 x float>, <4 x float>* %263, align 16
  %272 = getelementptr inbounds <4 x float>, <4 x float>* %258, i64 3
  %273 = getelementptr inbounds <4 x float>, <4 x float>* %258, i64 4
  %274 = load <4 x float>, <4 x float>* %272, align 16
  %275 = shufflevector <4 x float> %271, <4 x float> %264, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %276 = shufflevector <4 x float> %274, <4 x float> %271, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %277 = shufflevector <4 x float> %276, <4 x float> %275, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %278 = shufflevector <4 x float> %276, <4 x float> %275, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %279 = getelementptr inbounds <4 x float>, <4 x float>* %259, i64 -7
  store <4 x float> %278, <4 x float>* %279, align 16
  store <4 x float> %277, <4 x float>* %270, align 16
  %280 = getelementptr inbounds <4 x float>, <4 x float>* %259, i64 -16
  %281 = load <4 x float>, <4 x float>* %273, align 16
  %282 = add i32 %261, -2
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %256

284:                                              ; preds = %256, %249
  %285 = phi <4 x float> [ undef, %249 ], [ %274, %256 ]
  %286 = phi <4 x float>* [ undef, %249 ], [ %280, %256 ]
  %287 = phi <4 x float> [ undef, %249 ], [ %281, %256 ]
  %288 = phi <4 x float> [ %248, %249 ], [ %281, %256 ]
  %289 = phi <4 x float>* [ %246, %249 ], [ %273, %256 ]
  %290 = phi <4 x float>* [ %243, %249 ], [ %280, %256 ]
  %291 = phi <4 x float> [ %244, %249 ], [ %274, %256 ]
  %292 = icmp eq i32 %251, 0
  br i1 %292, label %304, label %293

293:                                              ; preds = %284
  %294 = getelementptr inbounds <4 x float>, <4 x float>* %289, i64 1
  %295 = load <4 x float>, <4 x float>* %294, align 16
  %296 = shufflevector <4 x float> %288, <4 x float> %291, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %297 = shufflevector <4 x float> %295, <4 x float> %288, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %298 = shufflevector <4 x float> %297, <4 x float> %296, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %299 = shufflevector <4 x float> %297, <4 x float> %296, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %300 = getelementptr inbounds <4 x float>, <4 x float>* %290, i64 1
  store <4 x float> %299, <4 x float>* %300, align 16
  store <4 x float> %298, <4 x float>* %290, align 16
  %301 = getelementptr inbounds <4 x float>, <4 x float>* %289, i64 2
  %302 = load <4 x float>, <4 x float>* %301, align 16
  %303 = getelementptr inbounds <4 x float>, <4 x float>* %290, i64 -8
  br label %304

304:                                              ; preds = %293, %284, %235
  %305 = phi <4 x float> [ %244, %235 ], [ %285, %284 ], [ %295, %293 ]
  %306 = phi <4 x float>* [ %243, %235 ], [ %286, %284 ], [ %303, %293 ]
  %307 = phi <4 x float> [ %248, %235 ], [ %287, %284 ], [ %302, %293 ]
  %308 = shufflevector <4 x float> %307, <4 x float> %305, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %309 = shufflevector <4 x float> %244, <4 x float> %307, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %310 = shufflevector <4 x float> %309, <4 x float> %308, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %311 = shufflevector <4 x float> %309, <4 x float> %308, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %312 = getelementptr inbounds <4 x float>, <4 x float>* %306, i64 1
  store <4 x float> %311, <4 x float>* %312, align 16
  store <4 x float> %310, <4 x float>* %306, align 16
  %313 = mul nsw i32 %6, 3
  %314 = sdiv i32 %313, 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds float, float* %1, i64 %315
  %317 = bitcast float* %316 to <4 x float>*
  %318 = getelementptr inbounds float, float* %241, i64 -8
  %319 = bitcast float* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %317, align 16
  %321 = getelementptr inbounds float, float* %316, i64 4
  %322 = bitcast float* %321 to <4 x float>*
  %323 = load <4 x float>, <4 x float>* %322, align 16
  br i1 %247, label %324, label %379

324:                                              ; preds = %304
  %325 = add nsw i32 %15, -1
  %326 = and i32 %325, 1
  %327 = and i32 %6, -32
  %328 = icmp eq i32 %327, 64
  br i1 %328, label %359, label %329

329:                                              ; preds = %324
  %330 = sub nsw i32 %325, %326
  br label %331

331:                                              ; preds = %331, %329
  %332 = phi <4 x float> [ %323, %329 ], [ %356, %331 ]
  %333 = phi <4 x float>* [ %322, %329 ], [ %348, %331 ]
  %334 = phi <4 x float>* [ %319, %329 ], [ %355, %331 ]
  %335 = phi <4 x float> [ %320, %329 ], [ %349, %331 ]
  %336 = phi i32 [ %330, %329 ], [ %357, %331 ]
  %337 = getelementptr inbounds <4 x float>, <4 x float>* %333, i64 1
  %338 = getelementptr inbounds <4 x float>, <4 x float>* %333, i64 2
  %339 = load <4 x float>, <4 x float>* %337, align 16
  %340 = shufflevector <4 x float> %332, <4 x float> %335, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %341 = shufflevector <4 x float> %339, <4 x float> %332, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %342 = shufflevector <4 x float> %341, <4 x float> %340, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %343 = shufflevector <4 x float> %341, <4 x float> %340, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %344 = getelementptr inbounds <4 x float>, <4 x float>* %334, i64 1
  store <4 x float> %343, <4 x float>* %344, align 16
  store <4 x float> %342, <4 x float>* %334, align 16
  %345 = getelementptr inbounds <4 x float>, <4 x float>* %334, i64 -8
  %346 = load <4 x float>, <4 x float>* %338, align 16
  %347 = getelementptr inbounds <4 x float>, <4 x float>* %333, i64 3
  %348 = getelementptr inbounds <4 x float>, <4 x float>* %333, i64 4
  %349 = load <4 x float>, <4 x float>* %347, align 16
  %350 = shufflevector <4 x float> %346, <4 x float> %339, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %351 = shufflevector <4 x float> %349, <4 x float> %346, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %352 = shufflevector <4 x float> %351, <4 x float> %350, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %353 = shufflevector <4 x float> %351, <4 x float> %350, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %354 = getelementptr inbounds <4 x float>, <4 x float>* %334, i64 -7
  store <4 x float> %353, <4 x float>* %354, align 16
  store <4 x float> %352, <4 x float>* %345, align 16
  %355 = getelementptr inbounds <4 x float>, <4 x float>* %334, i64 -16
  %356 = load <4 x float>, <4 x float>* %348, align 16
  %357 = add i32 %336, -2
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %331

359:                                              ; preds = %331, %324
  %360 = phi <4 x float> [ undef, %324 ], [ %349, %331 ]
  %361 = phi <4 x float>* [ undef, %324 ], [ %355, %331 ]
  %362 = phi <4 x float> [ undef, %324 ], [ %356, %331 ]
  %363 = phi <4 x float> [ %323, %324 ], [ %356, %331 ]
  %364 = phi <4 x float>* [ %322, %324 ], [ %348, %331 ]
  %365 = phi <4 x float>* [ %319, %324 ], [ %355, %331 ]
  %366 = phi <4 x float> [ %320, %324 ], [ %349, %331 ]
  %367 = icmp eq i32 %326, 0
  br i1 %367, label %379, label %368

368:                                              ; preds = %359
  %369 = getelementptr inbounds <4 x float>, <4 x float>* %364, i64 1
  %370 = load <4 x float>, <4 x float>* %369, align 16
  %371 = shufflevector <4 x float> %363, <4 x float> %366, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %372 = shufflevector <4 x float> %370, <4 x float> %363, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %373 = shufflevector <4 x float> %372, <4 x float> %371, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %374 = shufflevector <4 x float> %372, <4 x float> %371, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %375 = getelementptr inbounds <4 x float>, <4 x float>* %365, i64 1
  store <4 x float> %374, <4 x float>* %375, align 16
  store <4 x float> %373, <4 x float>* %365, align 16
  %376 = getelementptr inbounds <4 x float>, <4 x float>* %364, i64 2
  %377 = load <4 x float>, <4 x float>* %376, align 16
  %378 = getelementptr inbounds <4 x float>, <4 x float>* %365, i64 -8
  br label %379

379:                                              ; preds = %368, %359, %304
  %380 = phi <4 x float> [ %320, %304 ], [ %360, %359 ], [ %370, %368 ]
  %381 = phi <4 x float>* [ %319, %304 ], [ %361, %359 ], [ %378, %368 ]
  %382 = phi <4 x float> [ %323, %304 ], [ %362, %359 ], [ %377, %368 ]
  %383 = shufflevector <4 x float> %382, <4 x float> %380, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %384 = shufflevector <4 x float> %320, <4 x float> %382, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %385 = shufflevector <4 x float> %384, <4 x float> %383, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %386 = shufflevector <4 x float> %384, <4 x float> %383, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %387 = getelementptr inbounds <4 x float>, <4 x float>* %381, i64 1
  store <4 x float> %386, <4 x float>* %387, align 16
  store <4 x float> %385, <4 x float>* %381, align 16
  br label %445

388:                                              ; preds = %4
  %389 = icmp eq i32 %3, 0
  %390 = icmp sgt i32 %8, 0
  br i1 %389, label %395, label %391

391:                                              ; preds = %388
  br i1 %390, label %392, label %445

392:                                              ; preds = %391
  %393 = lshr i32 %8, 2
  %394 = zext i32 %8 to i64
  br label %422

395:                                              ; preds = %388
  br i1 %390, label %396, label %445

396:                                              ; preds = %395
  %397 = lshr i32 %8, 2
  %398 = zext i32 %8 to i64
  br label %399

399:                                              ; preds = %399, %396
  %400 = phi i64 [ 0, %396 ], [ %420, %399 ]
  %401 = trunc i64 %400 to i32
  %402 = lshr i32 %401, 2
  %403 = and i32 %401, 3
  %404 = mul nuw nsw i32 %403, %397
  %405 = add nuw nsw i32 %404, %402
  %406 = shl nuw nsw i64 %400, 1
  %407 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %406
  %408 = load <4 x float>, <4 x float>* %407, align 16
  %409 = or i64 %406, 1
  %410 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %409
  %411 = load <4 x float>, <4 x float>* %410, align 16
  %412 = shufflevector <4 x float> %408, <4 x float> %411, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %413 = shufflevector <4 x float> %408, <4 x float> %411, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %414 = shl nuw nsw i32 %405, 1
  %415 = or i32 %414, 1
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %416
  store <4 x float> %413, <4 x float>* %417, align 16
  %418 = zext i32 %414 to i64
  %419 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %418
  store <4 x float> %412, <4 x float>* %419, align 16
  %420 = add nuw nsw i64 %400, 1
  %421 = icmp eq i64 %420, %398
  br i1 %421, label %445, label %399

422:                                              ; preds = %422, %392
  %423 = phi i64 [ 0, %392 ], [ %443, %422 ]
  %424 = trunc i64 %423 to i32
  %425 = lshr i32 %424, 2
  %426 = and i32 %424, 3
  %427 = mul nuw nsw i32 %426, %393
  %428 = add nuw nsw i32 %427, %425
  %429 = shl nuw nsw i32 %428, 1
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %430
  %432 = load <4 x float>, <4 x float>* %431, align 16
  %433 = or i32 %429, 1
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %434
  %436 = load <4 x float>, <4 x float>* %435, align 16
  %437 = shufflevector <4 x float> %432, <4 x float> %436, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %438 = shufflevector <4 x float> %432, <4 x float> %436, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %439 = shl nuw nsw i64 %423, 1
  %440 = or i64 %439, 1
  %441 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %440
  store <4 x float> %438, <4 x float>* %441, align 16
  %442 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %439
  store <4 x float> %437, <4 x float>* %442, align 16
  %443 = add nuw nsw i64 %423, 1
  %444 = icmp eq i64 %443, %394
  br i1 %444, label %445, label %422

445:                                              ; preds = %422, %399, %391, %395, %197, %379
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @pffft_cplx_finalize(i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, <4 x float>* nocapture readonly) local_unnamed_addr #9 {
  %5 = icmp sgt i32 %0, 3
  br i1 %5, label %6, label %114

6:                                                ; preds = %4
  %7 = lshr i32 %0, 2
  %8 = zext i32 %7 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i64 [ 0, %6 ], [ %112, %9 ]
  %11 = phi <4 x float>* [ %2, %6 ], [ %111, %9 ]
  %12 = shl nsw i64 %10, 3
  %13 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %12
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = or i64 %12, 1
  %16 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %15
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = or i64 %12, 2
  %19 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %18
  %20 = load <4 x float>, <4 x float>* %19, align 16
  %21 = or i64 %12, 3
  %22 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %21
  %23 = load <4 x float>, <4 x float>* %22, align 16
  %24 = or i64 %12, 4
  %25 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %24
  %26 = load <4 x float>, <4 x float>* %25, align 16
  %27 = or i64 %12, 5
  %28 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %27
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = or i64 %12, 6
  %31 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %30
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = or i64 %12, 7
  %34 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %33
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = shufflevector <4 x float> %14, <4 x float> %20, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %37 = shufflevector <4 x float> %26, <4 x float> %32, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %38 = shufflevector <4 x float> %14, <4 x float> %20, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %39 = shufflevector <4 x float> %26, <4 x float> %32, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %40 = shufflevector <4 x float> %36, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %41 = shufflevector <4 x float> %37, <4 x float> %36, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %42 = shufflevector <4 x float> %38, <4 x float> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = shufflevector <4 x float> %39, <4 x float> %38, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %44 = shufflevector <4 x float> %17, <4 x float> %23, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %45 = shufflevector <4 x float> %29, <4 x float> %35, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %46 = shufflevector <4 x float> %17, <4 x float> %23, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %47 = shufflevector <4 x float> %29, <4 x float> %35, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %48 = shufflevector <4 x float> %44, <4 x float> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = shufflevector <4 x float> %45, <4 x float> %44, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %50 = shufflevector <4 x float> %46, <4 x float> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %51 = shufflevector <4 x float> %47, <4 x float> %46, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %52 = mul nuw nsw i64 %10, 6
  %53 = or i64 %52, 1
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %53
  %55 = load <4 x float>, <4 x float>* %54, align 16
  %56 = fmul <4 x float> %41, %55
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %52
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = fmul <4 x float> %41, %58
  %60 = fmul <4 x float> %55, %49
  %61 = fsub <4 x float> %59, %60
  %62 = fmul <4 x float> %49, %58
  %63 = fadd <4 x float> %56, %62
  %64 = add nuw nsw i64 %52, 3
  %65 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %64
  %66 = load <4 x float>, <4 x float>* %65, align 16
  %67 = fmul <4 x float> %42, %66
  %68 = add nuw nsw i64 %52, 2
  %69 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %68
  %70 = load <4 x float>, <4 x float>* %69, align 16
  %71 = fmul <4 x float> %42, %70
  %72 = fmul <4 x float> %50, %66
  %73 = fsub <4 x float> %71, %72
  %74 = fmul <4 x float> %50, %70
  %75 = fadd <4 x float> %67, %74
  %76 = add nuw nsw i64 %52, 5
  %77 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %76
  %78 = load <4 x float>, <4 x float>* %77, align 16
  %79 = fmul <4 x float> %43, %78
  %80 = add nuw nsw i64 %52, 4
  %81 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %80
  %82 = load <4 x float>, <4 x float>* %81, align 16
  %83 = fmul <4 x float> %43, %82
  %84 = fmul <4 x float> %51, %78
  %85 = fsub <4 x float> %83, %84
  %86 = fmul <4 x float> %51, %82
  %87 = fadd <4 x float> %79, %86
  %88 = fadd <4 x float> %40, %73
  %89 = fsub <4 x float> %40, %73
  %90 = fadd <4 x float> %61, %85
  %91 = fsub <4 x float> %61, %85
  %92 = fadd <4 x float> %48, %75
  %93 = fsub <4 x float> %48, %75
  %94 = fadd <4 x float> %63, %87
  %95 = fsub <4 x float> %63, %87
  %96 = fadd <4 x float> %88, %90
  %97 = fadd <4 x float> %92, %94
  %98 = fadd <4 x float> %89, %95
  %99 = fsub <4 x float> %93, %91
  %100 = fsub <4 x float> %88, %90
  %101 = fsub <4 x float> %92, %94
  %102 = fsub <4 x float> %89, %95
  %103 = fadd <4 x float> %93, %91
  %104 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 1
  store <4 x float> %96, <4 x float>* %11, align 16
  %105 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 2
  store <4 x float> %97, <4 x float>* %104, align 16
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 3
  store <4 x float> %98, <4 x float>* %105, align 16
  %107 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 4
  store <4 x float> %99, <4 x float>* %106, align 16
  %108 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 5
  store <4 x float> %100, <4 x float>* %107, align 16
  %109 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 6
  store <4 x float> %101, <4 x float>* %108, align 16
  %110 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 7
  store <4 x float> %102, <4 x float>* %109, align 16
  %111 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 8
  store <4 x float> %103, <4 x float>* %110, align 16
  %112 = add nuw nsw i64 %10, 1
  %113 = icmp eq i64 %112, %8
  br i1 %113, label %114, label %9

114:                                              ; preds = %9, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @pffft_cplx_preprocess(i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, <4 x float>* nocapture readonly) local_unnamed_addr #9 {
  %5 = icmp sgt i32 %0, 3
  br i1 %5, label %6, label %114

6:                                                ; preds = %4
  %7 = lshr i32 %0, 2
  %8 = zext i32 %7 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i64 [ 0, %6 ], [ %112, %9 ]
  %11 = phi <4 x float>* [ %2, %6 ], [ %111, %9 ]
  %12 = shl nsw i64 %10, 3
  %13 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %12
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = or i64 %12, 1
  %16 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %15
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = or i64 %12, 2
  %19 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %18
  %20 = load <4 x float>, <4 x float>* %19, align 16
  %21 = or i64 %12, 3
  %22 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %21
  %23 = load <4 x float>, <4 x float>* %22, align 16
  %24 = or i64 %12, 4
  %25 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %24
  %26 = load <4 x float>, <4 x float>* %25, align 16
  %27 = or i64 %12, 5
  %28 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %27
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = or i64 %12, 6
  %31 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %30
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = or i64 %12, 7
  %34 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %33
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = fadd <4 x float> %14, %26
  %37 = fsub <4 x float> %14, %26
  %38 = fadd <4 x float> %20, %32
  %39 = fsub <4 x float> %20, %32
  %40 = fadd <4 x float> %17, %29
  %41 = fsub <4 x float> %17, %29
  %42 = fadd <4 x float> %23, %35
  %43 = fsub <4 x float> %23, %35
  %44 = fadd <4 x float> %36, %38
  %45 = fadd <4 x float> %40, %42
  %46 = fsub <4 x float> %37, %43
  %47 = fadd <4 x float> %41, %39
  %48 = fsub <4 x float> %36, %38
  %49 = fsub <4 x float> %40, %42
  %50 = fadd <4 x float> %37, %43
  %51 = fsub <4 x float> %41, %39
  %52 = mul nuw nsw i64 %10, 6
  %53 = or i64 %52, 1
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %53
  %55 = load <4 x float>, <4 x float>* %54, align 16
  %56 = fmul <4 x float> %55, %46
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %52
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = fmul <4 x float> %46, %58
  %60 = fmul <4 x float> %47, %55
  %61 = fadd <4 x float> %60, %59
  %62 = fmul <4 x float> %47, %58
  %63 = fsub <4 x float> %62, %56
  %64 = add nuw nsw i64 %52, 3
  %65 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %64
  %66 = load <4 x float>, <4 x float>* %65, align 16
  %67 = fmul <4 x float> %48, %66
  %68 = add nuw nsw i64 %52, 2
  %69 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %68
  %70 = load <4 x float>, <4 x float>* %69, align 16
  %71 = fmul <4 x float> %48, %70
  %72 = fmul <4 x float> %49, %66
  %73 = fadd <4 x float> %72, %71
  %74 = fmul <4 x float> %49, %70
  %75 = fsub <4 x float> %74, %67
  %76 = add nuw nsw i64 %52, 5
  %77 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %76
  %78 = load <4 x float>, <4 x float>* %77, align 16
  %79 = fmul <4 x float> %50, %78
  %80 = add nuw nsw i64 %52, 4
  %81 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %80
  %82 = load <4 x float>, <4 x float>* %81, align 16
  %83 = fmul <4 x float> %50, %82
  %84 = fmul <4 x float> %51, %78
  %85 = fadd <4 x float> %84, %83
  %86 = fmul <4 x float> %51, %82
  %87 = fsub <4 x float> %86, %79
  %88 = shufflevector <4 x float> %44, <4 x float> %61, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = shufflevector <4 x float> %73, <4 x float> %85, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %90 = shufflevector <4 x float> %44, <4 x float> %61, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %91 = shufflevector <4 x float> %73, <4 x float> %85, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %92 = shufflevector <4 x float> %88, <4 x float> %89, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = shufflevector <4 x float> %89, <4 x float> %88, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %94 = shufflevector <4 x float> %90, <4 x float> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %95 = shufflevector <4 x float> %91, <4 x float> %90, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %96 = shufflevector <4 x float> %45, <4 x float> %63, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %97 = shufflevector <4 x float> %75, <4 x float> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %98 = shufflevector <4 x float> %45, <4 x float> %63, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %99 = shufflevector <4 x float> %75, <4 x float> %87, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %100 = shufflevector <4 x float> %96, <4 x float> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = shufflevector <4 x float> %97, <4 x float> %96, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %102 = shufflevector <4 x float> %98, <4 x float> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %103 = shufflevector <4 x float> %99, <4 x float> %98, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %104 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 1
  store <4 x float> %92, <4 x float>* %11, align 16
  %105 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 2
  store <4 x float> %100, <4 x float>* %104, align 16
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 3
  store <4 x float> %93, <4 x float>* %105, align 16
  %107 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 4
  store <4 x float> %101, <4 x float>* %106, align 16
  %108 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 5
  store <4 x float> %94, <4 x float>* %107, align 16
  %109 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 6
  store <4 x float> %102, <4 x float>* %108, align 16
  %110 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 7
  store <4 x float> %95, <4 x float>* %109, align 16
  %111 = getelementptr inbounds <4 x float>, <4 x float>* %11, i64 8
  store <4 x float> %103, <4 x float>* %110, align 16
  %112 = add nuw nsw i64 %10, 1
  %113 = icmp eq i64 %112, %8
  br i1 %113, label %114, label %9

114:                                              ; preds = %9, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @pffft_transform_internal(%struct.PFFFT_Setup* nocapture readonly, float* readonly, float*, <4 x float>*, i32, i32) local_unnamed_addr #10 {
  %7 = alloca [2 x <4 x float>*], align 16
  %8 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 2, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq <4 x float>* %3, null
  %15 = shl nsw i32 %9, 1
  %16 = zext i32 %15 to i64
  %17 = select i1 %14, i64 %16, i64 1
  %18 = alloca <4 x float>, i64 %17, align 16
  %19 = icmp eq i64 %17, 0
  br i1 %19, label %50, label %20

20:                                               ; preds = %6
  %21 = bitcast <4 x float>* %18 to i8*
  %22 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %17
  %23 = bitcast <4 x float>* %22 to i8*
  %24 = shl nuw nsw i64 %17, 4
  %25 = add nsw i64 %24, -16
  %26 = lshr exact i64 %25, 4
  %27 = add nuw nsw i64 %26, 1
  %28 = and i64 %27, 7
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %20, %30
  %31 = phi i8* [ %33, %30 ], [ %21, %20 ]
  %32 = phi i64 [ %34, %30 ], [ %28, %20 ]
  call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 -1, i64 16, i1 false)
  %33 = getelementptr inbounds i8, i8* %31, i64 16
  %34 = add i64 %32, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %30, !llvm.loop !8

36:                                               ; preds = %30, %20
  %37 = phi i8* [ %21, %20 ], [ %33, %30 ]
  %38 = icmp ult i64 %25, 112
  br i1 %38, label %50, label %39

39:                                               ; preds = %36, %39
  %40 = phi i8* [ %48, %39 ], [ %37, %36 ]
  call void @llvm.memset.p0i8.i64(i8* align 16 %40, i8 -1, i64 16, i1 false)
  %41 = getelementptr inbounds i8, i8* %40, i64 16
  call void @llvm.memset.p0i8.i64(i8* align 16 %41, i8 -1, i64 16, i1 false)
  %42 = getelementptr inbounds i8, i8* %40, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 16 %42, i8 -1, i64 16, i1 false)
  %43 = getelementptr inbounds i8, i8* %40, i64 48
  call void @llvm.memset.p0i8.i64(i8* align 16 %43, i8 -1, i64 16, i1 false)
  %44 = getelementptr inbounds i8, i8* %40, i64 64
  call void @llvm.memset.p0i8.i64(i8* align 16 %44, i8 -1, i64 16, i1 false)
  %45 = getelementptr inbounds i8, i8* %40, i64 80
  call void @llvm.memset.p0i8.i64(i8* align 16 %45, i8 -1, i64 16, i1 false)
  %46 = getelementptr inbounds i8, i8* %40, i64 96
  call void @llvm.memset.p0i8.i64(i8* align 16 %46, i8 -1, i64 16, i1 false)
  %47 = getelementptr inbounds i8, i8* %40, i64 112
  call void @llvm.memset.p0i8.i64(i8* align 16 %47, i8 -1, i64 16, i1 false)
  %48 = getelementptr inbounds i8, i8* %40, i64 128
  %49 = icmp eq i8* %48, %23
  br i1 %49, label %50, label %39

50:                                               ; preds = %36, %39, %6
  %51 = bitcast float* %1 to <4 x float>*
  %52 = bitcast float* %2 to <4 x float>*
  %53 = bitcast [2 x <4 x float>*]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #12
  %54 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 0
  %55 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 1
  %56 = bitcast [2 x <4 x float>*]* %7 to float**
  store float* %2, float** %56, align 16
  %57 = select i1 %14, <4 x float>* %18, <4 x float>* %3
  store <4 x float>* %57, <4 x float>** %55, align 8
  %58 = icmp ne i32 %13, %5
  %59 = icmp eq i32 %4, 0
  br i1 %59, label %60, label %247

60:                                               ; preds = %50
  %61 = xor i1 %58, true
  %62 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 3
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  %65 = zext i1 %61 to i64
  %66 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %65
  %67 = load <4 x float>*, <4 x float>** %66, align 8
  br i1 %64, label %72, label %68

68:                                               ; preds = %60
  %69 = icmp sgt i32 %9, 0
  br i1 %69, label %70, label %105

70:                                               ; preds = %68
  %71 = zext i32 %9 to i64
  br label %91

72:                                               ; preds = %60
  %73 = zext i1 %58 to i64
  %74 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %73
  %75 = load <4 x float>*, <4 x float>** %74, align 8
  %76 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 6
  %77 = load float*, float** %76, align 8
  %78 = getelementptr inbounds [15 x i32], [15 x i32]* %10, i64 0, i64 0
  %79 = call fastcc <4 x float>* @rfftf1_ps(i32 %15, <4 x float>* %51, <4 x float>* %67, <4 x float>* %75, float* %77, i32* %78)
  %80 = icmp ne <4 x float>* %79, %52
  %81 = zext i1 %80 to i64
  %82 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %81
  %83 = load <4 x float>*, <4 x float>** %82, align 8
  %84 = xor i1 %80, true
  %85 = zext i1 %84 to i64
  %86 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %85
  %87 = load <4 x float>*, <4 x float>** %86, align 8
  %88 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 5
  %89 = bitcast float** %88 to <4 x float>**
  %90 = load <4 x float>*, <4 x float>** %89, align 8
  call fastcc void @pffft_real_finalize(i32 %9, <4 x float>* %83, <4 x float>* %87, <4 x float>* %90)
  br label %233

91:                                               ; preds = %91, %70
  %92 = phi i64 [ 0, %70 ], [ %103, %91 ]
  %93 = shl nuw nsw i64 %92, 1
  %94 = getelementptr inbounds <4 x float>, <4 x float>* %51, i64 %93
  %95 = load <4 x float>, <4 x float>* %94, align 16
  %96 = or i64 %93, 1
  %97 = getelementptr inbounds <4 x float>, <4 x float>* %51, i64 %96
  %98 = load <4 x float>, <4 x float>* %97, align 16
  %99 = shufflevector <4 x float> %95, <4 x float> %98, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %100 = shufflevector <4 x float> %95, <4 x float> %98, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %101 = getelementptr inbounds <4 x float>, <4 x float>* %67, i64 %96
  store <4 x float> %100, <4 x float>* %101, align 16
  %102 = getelementptr inbounds <4 x float>, <4 x float>* %67, i64 %93
  store <4 x float> %99, <4 x float>* %102, align 16
  %103 = add nuw nsw i64 %92, 1
  %104 = icmp eq i64 %103, %71
  br i1 %104, label %105, label %91

105:                                              ; preds = %91, %68
  %106 = zext i1 %58 to i64
  %107 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %106
  %108 = load <4 x float>*, <4 x float>** %107, align 8
  %109 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 6
  %110 = load float*, float** %109, align 8
  %111 = getelementptr inbounds [15 x i32], [15 x i32]* %10, i64 0, i64 0
  %112 = call <4 x float>* @cfftf1_ps(i32 %9, <4 x float>* %67, <4 x float>* %108, <4 x float>* %67, float* %110, i32* %111, i32 -1)
  %113 = icmp ne <4 x float>* %112, %52
  %114 = zext i1 %113 to i64
  %115 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %114
  %116 = load <4 x float>*, <4 x float>** %115, align 8
  %117 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 5
  %118 = bitcast float** %117 to <4 x float>**
  %119 = load <4 x float>*, <4 x float>** %118, align 8
  %120 = icmp sgt i32 %9, 3
  br i1 %120, label %121, label %233

121:                                              ; preds = %105
  %122 = xor i1 %113, true
  %123 = zext i1 %122 to i64
  %124 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %123
  %125 = load <4 x float>*, <4 x float>** %124, align 8
  %126 = lshr i32 %9, 2
  %127 = zext i32 %126 to i64
  br label %128

128:                                              ; preds = %128, %121
  %129 = phi i64 [ 0, %121 ], [ %231, %128 ]
  %130 = phi <4 x float>* [ %125, %121 ], [ %230, %128 ]
  %131 = shl nsw i64 %129, 3
  %132 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %131
  %133 = load <4 x float>, <4 x float>* %132, align 16
  %134 = or i64 %131, 1
  %135 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %134
  %136 = load <4 x float>, <4 x float>* %135, align 16
  %137 = or i64 %131, 2
  %138 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %137
  %139 = load <4 x float>, <4 x float>* %138, align 16
  %140 = or i64 %131, 3
  %141 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %140
  %142 = load <4 x float>, <4 x float>* %141, align 16
  %143 = or i64 %131, 4
  %144 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %143
  %145 = load <4 x float>, <4 x float>* %144, align 16
  %146 = or i64 %131, 5
  %147 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %146
  %148 = load <4 x float>, <4 x float>* %147, align 16
  %149 = or i64 %131, 6
  %150 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %149
  %151 = load <4 x float>, <4 x float>* %150, align 16
  %152 = or i64 %131, 7
  %153 = getelementptr inbounds <4 x float>, <4 x float>* %116, i64 %152
  %154 = load <4 x float>, <4 x float>* %153, align 16
  %155 = shufflevector <4 x float> %133, <4 x float> %139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %156 = shufflevector <4 x float> %145, <4 x float> %151, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %157 = shufflevector <4 x float> %133, <4 x float> %139, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %158 = shufflevector <4 x float> %145, <4 x float> %151, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %159 = shufflevector <4 x float> %155, <4 x float> %156, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %160 = shufflevector <4 x float> %156, <4 x float> %155, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %161 = shufflevector <4 x float> %157, <4 x float> %158, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %162 = shufflevector <4 x float> %158, <4 x float> %157, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %163 = shufflevector <4 x float> %136, <4 x float> %142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %164 = shufflevector <4 x float> %148, <4 x float> %154, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %165 = shufflevector <4 x float> %136, <4 x float> %142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %166 = shufflevector <4 x float> %148, <4 x float> %154, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %167 = shufflevector <4 x float> %163, <4 x float> %164, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %168 = shufflevector <4 x float> %164, <4 x float> %163, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %169 = shufflevector <4 x float> %165, <4 x float> %166, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %170 = shufflevector <4 x float> %166, <4 x float> %165, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %171 = mul nuw nsw i64 %129, 6
  %172 = or i64 %171, 1
  %173 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %172
  %174 = load <4 x float>, <4 x float>* %173, align 16
  %175 = fmul <4 x float> %160, %174
  %176 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %171
  %177 = load <4 x float>, <4 x float>* %176, align 16
  %178 = fmul <4 x float> %160, %177
  %179 = fmul <4 x float> %174, %168
  %180 = fsub <4 x float> %178, %179
  %181 = fmul <4 x float> %168, %177
  %182 = fadd <4 x float> %175, %181
  %183 = add nuw nsw i64 %171, 3
  %184 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %183
  %185 = load <4 x float>, <4 x float>* %184, align 16
  %186 = fmul <4 x float> %161, %185
  %187 = add nuw nsw i64 %171, 2
  %188 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %187
  %189 = load <4 x float>, <4 x float>* %188, align 16
  %190 = fmul <4 x float> %161, %189
  %191 = fmul <4 x float> %169, %185
  %192 = fsub <4 x float> %190, %191
  %193 = fmul <4 x float> %169, %189
  %194 = fadd <4 x float> %186, %193
  %195 = add nuw nsw i64 %171, 5
  %196 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %195
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = fmul <4 x float> %162, %197
  %199 = add nuw nsw i64 %171, 4
  %200 = getelementptr inbounds <4 x float>, <4 x float>* %119, i64 %199
  %201 = load <4 x float>, <4 x float>* %200, align 16
  %202 = fmul <4 x float> %162, %201
  %203 = fmul <4 x float> %170, %197
  %204 = fsub <4 x float> %202, %203
  %205 = fmul <4 x float> %170, %201
  %206 = fadd <4 x float> %198, %205
  %207 = fadd <4 x float> %159, %192
  %208 = fsub <4 x float> %159, %192
  %209 = fadd <4 x float> %180, %204
  %210 = fsub <4 x float> %180, %204
  %211 = fadd <4 x float> %167, %194
  %212 = fsub <4 x float> %167, %194
  %213 = fadd <4 x float> %182, %206
  %214 = fsub <4 x float> %182, %206
  %215 = fadd <4 x float> %207, %209
  %216 = fadd <4 x float> %211, %213
  %217 = fadd <4 x float> %208, %214
  %218 = fsub <4 x float> %212, %210
  %219 = fsub <4 x float> %207, %209
  %220 = fsub <4 x float> %211, %213
  %221 = fsub <4 x float> %208, %214
  %222 = fadd <4 x float> %212, %210
  %223 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 1
  store <4 x float> %215, <4 x float>* %130, align 16
  %224 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 2
  store <4 x float> %216, <4 x float>* %223, align 16
  %225 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 3
  store <4 x float> %217, <4 x float>* %224, align 16
  %226 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 4
  store <4 x float> %218, <4 x float>* %225, align 16
  %227 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 5
  store <4 x float> %219, <4 x float>* %226, align 16
  %228 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 6
  store <4 x float> %220, <4 x float>* %227, align 16
  %229 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 7
  store <4 x float> %221, <4 x float>* %228, align 16
  %230 = getelementptr inbounds <4 x float>, <4 x float>* %130, i64 8
  store <4 x float> %222, <4 x float>* %229, align 16
  %231 = add nuw nsw i64 %129, 1
  %232 = icmp eq i64 %231, %127
  br i1 %232, label %233, label %128

233:                                              ; preds = %128, %105, %72
  %234 = phi i1 [ %80, %72 ], [ %113, %105 ], [ %113, %128 ]
  %235 = zext i1 %234 to i32
  %236 = icmp eq i32 %5, 0
  %237 = xor i32 %235, 1
  br i1 %236, label %448, label %238

238:                                              ; preds = %233
  %239 = zext i32 %237 to i64
  %240 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %239
  %241 = bitcast <4 x float>** %240 to float**
  %242 = load float*, float** %241, align 8
  %243 = zext i1 %234 to i64
  %244 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %243
  %245 = bitcast <4 x float>** %244 to float**
  %246 = load float*, float** %245, align 8
  call void @pffft_zreorder(%struct.PFFFT_Setup* %0, float* %242, float* %246, i32 0)
  br label %448

247:                                              ; preds = %50
  %248 = zext i1 %58 to i64
  %249 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %248
  %250 = load <4 x float>*, <4 x float>** %249, align 8
  %251 = icmp eq <4 x float>* %250, %51
  %252 = xor i1 %58, %251
  %253 = icmp eq i32 %5, 0
  br i1 %253, label %261, label %254

254:                                              ; preds = %247
  %255 = zext i1 %252 to i64
  %256 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %255
  %257 = bitcast <4 x float>** %256 to float**
  %258 = load float*, float** %257, align 8
  call void @pffft_zreorder(%struct.PFFFT_Setup* %0, float* %1, float* %258, i32 1)
  %259 = bitcast float* %258 to <4 x float>*
  %260 = xor i1 %252, true
  br label %261

261:                                              ; preds = %247, %254
  %262 = phi i1 [ %260, %254 ], [ %252, %247 ]
  %263 = phi <4 x float>* [ %259, %254 ], [ %51, %247 ]
  %264 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 3
  %265 = load i32, i32* %264, align 4
  %266 = icmp eq i32 %265, 0
  %267 = zext i1 %262 to i64
  %268 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %267
  %269 = load <4 x float>*, <4 x float>** %268, align 8
  %270 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 5
  %271 = bitcast float** %270 to <4 x float>**
  %272 = load <4 x float>*, <4 x float>** %271, align 8
  br i1 %266, label %273, label %280

273:                                              ; preds = %261
  call fastcc void @pffft_real_preprocess(i32 %9, <4 x float>* %263, <4 x float>* %269, <4 x float>* %272)
  %274 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 6
  %275 = load float*, float** %274, align 8
  %276 = getelementptr inbounds [15 x i32], [15 x i32]* %10, i64 0, i64 0
  %277 = call fastcc <4 x float>* @rfftb1_ps(i32 %15, <4 x float>* %269, <4 x float>* %52, <4 x float>* %57, float* %275, i32* %276)
  %278 = icmp ne <4 x float>* %277, %52
  %279 = zext i1 %278 to i32
  br label %448

280:                                              ; preds = %261
  %281 = icmp sgt i32 %9, 3
  br i1 %281, label %282, label %393

282:                                              ; preds = %280
  %283 = lshr i32 %9, 2
  %284 = zext i32 %283 to i64
  br label %285

285:                                              ; preds = %285, %282
  %286 = phi i64 [ 0, %282 ], [ %388, %285 ]
  %287 = phi <4 x float>* [ %269, %282 ], [ %387, %285 ]
  %288 = shl nsw i64 %286, 3
  %289 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %288
  %290 = load <4 x float>, <4 x float>* %289, align 16
  %291 = or i64 %288, 1
  %292 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %291
  %293 = load <4 x float>, <4 x float>* %292, align 16
  %294 = or i64 %288, 2
  %295 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %294
  %296 = load <4 x float>, <4 x float>* %295, align 16
  %297 = or i64 %288, 3
  %298 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %297
  %299 = load <4 x float>, <4 x float>* %298, align 16
  %300 = or i64 %288, 4
  %301 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %300
  %302 = load <4 x float>, <4 x float>* %301, align 16
  %303 = or i64 %288, 5
  %304 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %303
  %305 = load <4 x float>, <4 x float>* %304, align 16
  %306 = or i64 %288, 6
  %307 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %306
  %308 = load <4 x float>, <4 x float>* %307, align 16
  %309 = or i64 %288, 7
  %310 = getelementptr inbounds <4 x float>, <4 x float>* %263, i64 %309
  %311 = load <4 x float>, <4 x float>* %310, align 16
  %312 = fadd <4 x float> %290, %302
  %313 = fsub <4 x float> %290, %302
  %314 = fadd <4 x float> %296, %308
  %315 = fsub <4 x float> %296, %308
  %316 = fadd <4 x float> %293, %305
  %317 = fsub <4 x float> %293, %305
  %318 = fadd <4 x float> %299, %311
  %319 = fsub <4 x float> %299, %311
  %320 = fadd <4 x float> %312, %314
  %321 = fadd <4 x float> %316, %318
  %322 = fsub <4 x float> %313, %319
  %323 = fadd <4 x float> %317, %315
  %324 = fsub <4 x float> %312, %314
  %325 = fsub <4 x float> %316, %318
  %326 = fadd <4 x float> %313, %319
  %327 = fsub <4 x float> %317, %315
  %328 = mul nuw nsw i64 %286, 6
  %329 = or i64 %328, 1
  %330 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %329
  %331 = load <4 x float>, <4 x float>* %330, align 16
  %332 = fmul <4 x float> %331, %322
  %333 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %328
  %334 = load <4 x float>, <4 x float>* %333, align 16
  %335 = fmul <4 x float> %322, %334
  %336 = fmul <4 x float> %323, %331
  %337 = fadd <4 x float> %336, %335
  %338 = fmul <4 x float> %323, %334
  %339 = fsub <4 x float> %338, %332
  %340 = add nuw nsw i64 %328, 3
  %341 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %340
  %342 = load <4 x float>, <4 x float>* %341, align 16
  %343 = fmul <4 x float> %324, %342
  %344 = add nuw nsw i64 %328, 2
  %345 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %344
  %346 = load <4 x float>, <4 x float>* %345, align 16
  %347 = fmul <4 x float> %324, %346
  %348 = fmul <4 x float> %325, %342
  %349 = fadd <4 x float> %348, %347
  %350 = fmul <4 x float> %325, %346
  %351 = fsub <4 x float> %350, %343
  %352 = add nuw nsw i64 %328, 5
  %353 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %352
  %354 = load <4 x float>, <4 x float>* %353, align 16
  %355 = fmul <4 x float> %326, %354
  %356 = add nuw nsw i64 %328, 4
  %357 = getelementptr inbounds <4 x float>, <4 x float>* %272, i64 %356
  %358 = load <4 x float>, <4 x float>* %357, align 16
  %359 = fmul <4 x float> %326, %358
  %360 = fmul <4 x float> %327, %354
  %361 = fadd <4 x float> %360, %359
  %362 = fmul <4 x float> %327, %358
  %363 = fsub <4 x float> %362, %355
  %364 = shufflevector <4 x float> %320, <4 x float> %337, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %365 = shufflevector <4 x float> %349, <4 x float> %361, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %366 = shufflevector <4 x float> %320, <4 x float> %337, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %367 = shufflevector <4 x float> %349, <4 x float> %361, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %368 = shufflevector <4 x float> %364, <4 x float> %365, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %369 = shufflevector <4 x float> %365, <4 x float> %364, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %370 = shufflevector <4 x float> %366, <4 x float> %367, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %371 = shufflevector <4 x float> %367, <4 x float> %366, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %372 = shufflevector <4 x float> %321, <4 x float> %339, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %373 = shufflevector <4 x float> %351, <4 x float> %363, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %374 = shufflevector <4 x float> %321, <4 x float> %339, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %375 = shufflevector <4 x float> %351, <4 x float> %363, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %376 = shufflevector <4 x float> %372, <4 x float> %373, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %377 = shufflevector <4 x float> %373, <4 x float> %372, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %378 = shufflevector <4 x float> %374, <4 x float> %375, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %379 = shufflevector <4 x float> %375, <4 x float> %374, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %380 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 1
  store <4 x float> %368, <4 x float>* %287, align 16
  %381 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 2
  store <4 x float> %376, <4 x float>* %380, align 16
  %382 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 3
  store <4 x float> %369, <4 x float>* %381, align 16
  %383 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 4
  store <4 x float> %377, <4 x float>* %382, align 16
  %384 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 5
  store <4 x float> %370, <4 x float>* %383, align 16
  %385 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 6
  store <4 x float> %378, <4 x float>* %384, align 16
  %386 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 7
  store <4 x float> %371, <4 x float>* %385, align 16
  %387 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 8
  store <4 x float> %379, <4 x float>* %386, align 16
  %388 = add nuw nsw i64 %286, 1
  %389 = icmp eq i64 %388, %284
  br i1 %389, label %390, label %285

390:                                              ; preds = %285
  %391 = load <4 x float>*, <4 x float>** %268, align 8
  %392 = load <4 x float>*, <4 x float>** %54, align 16
  br label %393

393:                                              ; preds = %390, %280
  %394 = phi <4 x float>* [ %392, %390 ], [ %52, %280 ]
  %395 = phi <4 x float>* [ %391, %390 ], [ %269, %280 ]
  %396 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 6
  %397 = load float*, float** %396, align 8
  %398 = getelementptr inbounds [15 x i32], [15 x i32]* %10, i64 0, i64 0
  %399 = call <4 x float>* @cfftf1_ps(i32 %9, <4 x float>* %395, <4 x float>* %394, <4 x float>* %57, float* %397, i32* %398, i32 1)
  %400 = icmp ne <4 x float>* %399, %394
  %401 = zext i1 %400 to i32
  %402 = icmp sgt i32 %9, 0
  br i1 %402, label %403, label %498

403:                                              ; preds = %393
  %404 = zext i1 %400 to i64
  %405 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %404
  %406 = load <4 x float>*, <4 x float>** %405, align 8
  %407 = zext i32 %9 to i64
  %408 = and i64 %407, 1
  %409 = icmp eq i32 %9, 1
  br i1 %409, label %437, label %410

410:                                              ; preds = %403
  %411 = sub nsw i64 %407, %408
  br label %412

412:                                              ; preds = %412, %410
  %413 = phi i64 [ 0, %410 ], [ %432, %412 ]
  %414 = phi i64 [ %411, %410 ], [ %433, %412 ]
  %415 = shl nuw nsw i64 %413, 1
  %416 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %415
  %417 = load <4 x float>, <4 x float>* %416, align 16
  %418 = or i64 %415, 1
  %419 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %418
  %420 = load <4 x float>, <4 x float>* %419, align 16
  %421 = shufflevector <4 x float> %417, <4 x float> %420, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %422 = shufflevector <4 x float> %417, <4 x float> %420, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x float> %422, <4 x float>* %419, align 16
  store <4 x float> %421, <4 x float>* %416, align 16
  %423 = shl nuw i64 %413, 1
  %424 = or i64 %423, 2
  %425 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %424
  %426 = load <4 x float>, <4 x float>* %425, align 16
  %427 = or i64 %423, 3
  %428 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %427
  %429 = load <4 x float>, <4 x float>* %428, align 16
  %430 = shufflevector <4 x float> %426, <4 x float> %429, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %431 = shufflevector <4 x float> %426, <4 x float> %429, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x float> %431, <4 x float>* %428, align 16
  store <4 x float> %430, <4 x float>* %425, align 16
  %432 = add nuw nsw i64 %413, 2
  %433 = add i64 %414, -2
  %434 = icmp eq i64 %433, 0
  br i1 %434, label %435, label %412

435:                                              ; preds = %412
  %436 = shl nuw i64 %432, 1
  br label %437

437:                                              ; preds = %435, %403
  %438 = phi i64 [ 0, %403 ], [ %436, %435 ]
  %439 = icmp eq i64 %408, 0
  br i1 %439, label %448, label %440

440:                                              ; preds = %437
  %441 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %438
  %442 = load <4 x float>, <4 x float>* %441, align 16
  %443 = or i64 %438, 1
  %444 = getelementptr inbounds <4 x float>, <4 x float>* %406, i64 %443
  %445 = load <4 x float>, <4 x float>* %444, align 16
  %446 = shufflevector <4 x float> %442, <4 x float> %445, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %447 = shufflevector <4 x float> %442, <4 x float> %445, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x float> %447, <4 x float>* %444, align 16
  store <4 x float> %446, <4 x float>* %441, align 16
  br label %448

448:                                              ; preds = %440, %437, %233, %273, %238
  %449 = phi i32 [ %235, %238 ], [ %279, %273 ], [ %237, %233 ], [ %401, %437 ], [ %401, %440 ]
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [2 x <4 x float>*], [2 x <4 x float>*]* %7, i64 0, i64 %450
  %452 = load <4 x float>*, <4 x float>** %451, align 8
  %453 = icmp ne <4 x float>* %452, %52
  %454 = icmp sgt i32 %9, 0
  %455 = and i1 %453, %454
  br i1 %455, label %456, label %498

456:                                              ; preds = %448
  %457 = zext i32 %9 to i64
  %458 = and i64 %457, 1
  %459 = icmp eq i32 %9, 1
  br i1 %459, label %487, label %460

460:                                              ; preds = %456
  %461 = sub nsw i64 %457, %458
  br label %462

462:                                              ; preds = %462, %460
  %463 = phi i64 [ 0, %460 ], [ %482, %462 ]
  %464 = phi i64 [ %461, %460 ], [ %483, %462 ]
  %465 = shl nuw nsw i64 %463, 1
  %466 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %465
  %467 = load <4 x float>, <4 x float>* %466, align 16
  %468 = or i64 %465, 1
  %469 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %468
  %470 = load <4 x float>, <4 x float>* %469, align 16
  %471 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %465
  store <4 x float> %467, <4 x float>* %471, align 16
  %472 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %468
  store <4 x float> %470, <4 x float>* %472, align 16
  %473 = shl nuw i64 %463, 1
  %474 = or i64 %473, 2
  %475 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %474
  %476 = load <4 x float>, <4 x float>* %475, align 16
  %477 = or i64 %473, 3
  %478 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %477
  %479 = load <4 x float>, <4 x float>* %478, align 16
  %480 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %474
  store <4 x float> %476, <4 x float>* %480, align 16
  %481 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %477
  store <4 x float> %479, <4 x float>* %481, align 16
  %482 = add nuw nsw i64 %463, 2
  %483 = add i64 %464, -2
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %485, label %462

485:                                              ; preds = %462
  %486 = shl nuw i64 %482, 1
  br label %487

487:                                              ; preds = %485, %456
  %488 = phi i64 [ 0, %456 ], [ %486, %485 ]
  %489 = icmp eq i64 %458, 0
  br i1 %489, label %498, label %490

490:                                              ; preds = %487
  %491 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %488
  %492 = load <4 x float>, <4 x float>* %491, align 16
  %493 = or i64 %488, 1
  %494 = getelementptr inbounds <4 x float>, <4 x float>* %452, i64 %493
  %495 = load <4 x float>, <4 x float>* %494, align 16
  %496 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %488
  store <4 x float> %492, <4 x float>* %496, align 16
  %497 = getelementptr inbounds <4 x float>, <4 x float>* %52, i64 %493
  store <4 x float> %495, <4 x float>* %497, align 16
  br label %498

498:                                              ; preds = %490, %487, %393, %448
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #12
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc <4 x float>* @rfftf1_ps(i32, <4 x float>* readonly, <4 x float>*, <4 x float>*, float* nocapture readonly, i32* nocapture readonly) unnamed_addr #8 {
  %7 = getelementptr inbounds i32, i32* %5, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %517, label %10

10:                                               ; preds = %6
  %11 = add nsw i32 %0, -1
  %12 = icmp eq <4 x float>* %1, %3
  %13 = select i1 %12, <4 x float>* %2, <4 x float>* %3
  %14 = add nuw i32 %8, 2
  %15 = add nuw i32 %8, 1
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %511, %10
  %18 = phi i64 [ %515, %511 ], [ 1, %10 ]
  %19 = phi <4 x float>* [ %514, %511 ], [ %1, %10 ]
  %20 = phi <4 x float>* [ %513, %511 ], [ %13, %10 ]
  %21 = phi i32 [ %28, %511 ], [ %0, %10 ]
  %22 = phi i32 [ %32, %511 ], [ %11, %10 ]
  %23 = trunc i64 %18 to i32
  %24 = sub i32 %14, %23
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %5, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = sdiv i32 %21, %27
  %29 = sdiv i32 %0, %21
  %30 = add nsw i32 %27, -1
  %31 = mul nsw i32 %29, %30
  %32 = sub nsw i32 %22, %31
  switch i32 %27, label %511 [
    i32 5, label %33
    i32 4, label %349
    i32 3, label %358
    i32 2, label %508
  ]

33:                                               ; preds = %17
  %34 = add nsw i32 %32, %29
  %35 = add nsw i32 %34, %29
  %36 = add nsw i32 %35, %29
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds float, float* %4, i64 %39
  %41 = sext i32 %35 to i64
  %42 = getelementptr inbounds float, float* %4, i64 %41
  %43 = sext i32 %36 to i64
  %44 = getelementptr inbounds float, float* %4, i64 %43
  %45 = mul nsw i32 %29, 6
  %46 = or i32 %45, 1
  %47 = sub nsw i32 0, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %48
  %50 = add i32 %28, 1
  %51 = mul nsw i32 %50, %29
  %52 = xor i32 %51, -1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %53
  %55 = icmp slt i32 %28, 1
  br i1 %55, label %138, label %56

56:                                               ; preds = %33
  %57 = mul nsw i32 %28, 5
  %58 = shl i32 %28, 1
  %59 = shl i32 %28, 2
  %60 = mul nsw i32 %28, 3
  %61 = sext i32 %28 to i64
  %62 = sext i32 %29 to i64
  %63 = sext i32 %60 to i64
  %64 = sext i32 %59 to i64
  %65 = sext i32 %58 to i64
  %66 = sext i32 %57 to i64
  %67 = zext i32 %50 to i64
  br label %68

68:                                               ; preds = %68, %56
  %69 = phi i64 [ %136, %68 ], [ 1, %56 ]
  %70 = add nsw i64 %69, %66
  %71 = mul nsw i64 %70, %62
  %72 = add nsw i64 %71, 1
  %73 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %72
  %74 = load <4 x float>, <4 x float>* %73, align 16, !alias.scope !9, !noalias !12
  %75 = add nsw i64 %69, %65
  %76 = mul nsw i64 %75, %62
  %77 = add nsw i64 %76, 1
  %78 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %77
  %79 = load <4 x float>, <4 x float>* %78, align 16, !alias.scope !9, !noalias !12
  %80 = fadd <4 x float> %74, %79
  %81 = fsub <4 x float> %74, %79
  %82 = add nsw i64 %69, %64
  %83 = mul nsw i64 %82, %62
  %84 = add nsw i64 %83, 1
  %85 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %84
  %86 = load <4 x float>, <4 x float>* %85, align 16, !alias.scope !9, !noalias !12
  %87 = add nsw i64 %69, %63
  %88 = mul nsw i64 %87, %62
  %89 = add nsw i64 %88, 1
  %90 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %89
  %91 = load <4 x float>, <4 x float>* %90, align 16, !alias.scope !9, !noalias !12
  %92 = fadd <4 x float> %86, %91
  %93 = fsub <4 x float> %86, %91
  %94 = add nsw i64 %69, %61
  %95 = mul nsw i64 %94, %62
  %96 = add nsw i64 %95, 1
  %97 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %96
  %98 = load <4 x float>, <4 x float>* %97, align 16, !alias.scope !9, !noalias !12
  %99 = fadd <4 x float> %80, %92
  %100 = fadd <4 x float> %98, %99
  %101 = mul nuw nsw i64 %69, 5
  %102 = add nuw nsw i64 %101, 1
  %103 = mul nsw i64 %102, %62
  %104 = add nsw i64 %103, 1
  %105 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %104
  store <4 x float> %100, <4 x float>* %105, align 16, !alias.scope !12, !noalias !9
  %106 = fmul <4 x float> %80, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %107 = fmul <4 x float> %92, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %108 = fadd <4 x float> %106, %107
  %109 = fadd <4 x float> %98, %108
  %110 = add nuw nsw i64 %101, 2
  %111 = mul nsw i64 %110, %62
  %112 = add nsw i64 %111, %62
  %113 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %112
  store <4 x float> %109, <4 x float>* %113, align 16, !alias.scope !12, !noalias !9
  %114 = fmul <4 x float> %81, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %115 = fmul <4 x float> %93, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %116 = fadd <4 x float> %114, %115
  %117 = add nuw nsw i64 %101, 3
  %118 = mul nsw i64 %117, %62
  %119 = add nsw i64 %118, 1
  %120 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %119
  store <4 x float> %116, <4 x float>* %120, align 16, !alias.scope !12, !noalias !9
  %121 = fmul <4 x float> %80, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %122 = fmul <4 x float> %92, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %123 = fadd <4 x float> %121, %122
  %124 = fadd <4 x float> %98, %123
  %125 = add nuw nsw i64 %101, 4
  %126 = mul nsw i64 %125, %62
  %127 = add nsw i64 %126, %62
  %128 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %127
  store <4 x float> %124, <4 x float>* %128, align 16, !alias.scope !12, !noalias !9
  %129 = fmul <4 x float> %81, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %130 = fmul <4 x float> %93, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %131 = fsub <4 x float> %129, %130
  %132 = add nuw nsw i64 %101, 5
  %133 = mul nsw i64 %132, %62
  %134 = add nsw i64 %133, 1
  %135 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %134
  store <4 x float> %131, <4 x float>* %135, align 16, !alias.scope !12, !noalias !9
  %136 = add nuw nsw i64 %69, 1
  %137 = icmp eq i64 %136, %67
  br i1 %137, label %138, label %68

138:                                              ; preds = %68, %33
  %139 = icmp eq i32 %29, 1
  br i1 %139, label %511, label %140

140:                                              ; preds = %138
  %141 = add nsw i32 %29, 2
  br i1 %55, label %511, label %142

142:                                              ; preds = %140
  %143 = icmp slt i32 %29, 3
  %144 = shl i32 %28, 1
  %145 = mul nsw i32 %28, 3
  %146 = shl i32 %28, 2
  %147 = mul nsw i32 %28, 5
  %148 = sext i32 %29 to i64
  %149 = sext i32 %28 to i64
  %150 = sext i32 %147 to i64
  %151 = sext i32 %146 to i64
  %152 = sext i32 %145 to i64
  %153 = sext i32 %144 to i64
  %154 = zext i32 %50 to i64
  br label %155

155:                                              ; preds = %346, %142
  %156 = phi i64 [ %347, %346 ], [ 1, %142 ]
  br i1 %143, label %346, label %157

157:                                              ; preds = %155
  %158 = add nsw i64 %156, %153
  %159 = mul nsw i64 %158, %148
  %160 = add nsw i64 %156, %152
  %161 = mul nsw i64 %160, %148
  %162 = add nsw i64 %156, %151
  %163 = mul nsw i64 %162, %148
  %164 = add nsw i64 %156, %150
  %165 = mul nsw i64 %164, %148
  %166 = add nsw i64 %156, %149
  %167 = mul nsw i64 %166, %148
  %168 = mul nuw nsw i64 %156, 5
  %169 = add nuw nsw i64 %168, 1
  %170 = mul nsw i64 %169, %148
  %171 = add nuw nsw i64 %168, 3
  %172 = mul nsw i64 %171, %148
  %173 = add nuw nsw i64 %168, 5
  %174 = mul nsw i64 %173, %148
  %175 = trunc i64 %168 to i32
  %176 = add i32 %175, 2
  %177 = mul i32 %176, %29
  %178 = add i32 %175, 4
  %179 = mul i32 %178, %29
  br label %180

180:                                              ; preds = %180, %157
  %181 = phi i64 [ 3, %157 ], [ %344, %180 ]
  %182 = trunc i64 %181 to i32
  %183 = sub i32 %141, %182
  %184 = add nsw i64 %181, -3
  %185 = getelementptr inbounds float, float* %38, i64 %184
  %186 = load float, float* %185, align 4, !noalias !14
  %187 = insertelement <4 x float> undef, float %186, i32 0
  %188 = shufflevector <4 x float> %187, <4 x float> undef, <4 x i32> zeroinitializer
  %189 = add nsw i64 %181, -2
  %190 = getelementptr inbounds float, float* %38, i64 %189
  %191 = load float, float* %190, align 4, !noalias !14
  %192 = insertelement <4 x float> undef, float %191, i32 0
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <4 x i32> zeroinitializer
  %194 = getelementptr inbounds float, float* %40, i64 %184
  %195 = load float, float* %194, align 4, !noalias !14
  %196 = insertelement <4 x float> undef, float %195, i32 0
  %197 = shufflevector <4 x float> %196, <4 x float> undef, <4 x i32> zeroinitializer
  %198 = getelementptr inbounds float, float* %40, i64 %189
  %199 = load float, float* %198, align 4, !noalias !14
  %200 = insertelement <4 x float> undef, float %199, i32 0
  %201 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> zeroinitializer
  %202 = getelementptr inbounds float, float* %42, i64 %184
  %203 = load float, float* %202, align 4, !noalias !14
  %204 = insertelement <4 x float> undef, float %203, i32 0
  %205 = shufflevector <4 x float> %204, <4 x float> undef, <4 x i32> zeroinitializer
  %206 = getelementptr inbounds float, float* %42, i64 %189
  %207 = load float, float* %206, align 4, !noalias !14
  %208 = insertelement <4 x float> undef, float %207, i32 0
  %209 = shufflevector <4 x float> %208, <4 x float> undef, <4 x i32> zeroinitializer
  %210 = getelementptr inbounds float, float* %44, i64 %184
  %211 = load float, float* %210, align 4, !noalias !14
  %212 = insertelement <4 x float> undef, float %211, i32 0
  %213 = shufflevector <4 x float> %212, <4 x float> undef, <4 x i32> zeroinitializer
  %214 = getelementptr inbounds float, float* %44, i64 %189
  %215 = load float, float* %214, align 4, !noalias !14
  %216 = insertelement <4 x float> undef, float %215, i32 0
  %217 = shufflevector <4 x float> %216, <4 x float> undef, <4 x i32> zeroinitializer
  %218 = add nsw i64 %181, %159
  %219 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %218
  %220 = load <4 x float>, <4 x float>* %219, align 16, !alias.scope !9, !noalias !12
  %221 = fmul <4 x float> %188, %220
  %222 = add nsw i64 %218, -1
  %223 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %222
  %224 = load <4 x float>, <4 x float>* %223, align 16, !alias.scope !9, !noalias !12
  %225 = fmul <4 x float> %188, %224
  %226 = fmul <4 x float> %193, %220
  %227 = fadd <4 x float> %226, %225
  %228 = fmul <4 x float> %193, %224
  %229 = fsub <4 x float> %228, %221
  %230 = add nsw i64 %181, %161
  %231 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %230
  %232 = load <4 x float>, <4 x float>* %231, align 16, !alias.scope !9, !noalias !12
  %233 = fmul <4 x float> %197, %232
  %234 = add nsw i64 %230, -1
  %235 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %234
  %236 = load <4 x float>, <4 x float>* %235, align 16, !alias.scope !9, !noalias !12
  %237 = fmul <4 x float> %197, %236
  %238 = fmul <4 x float> %201, %232
  %239 = fadd <4 x float> %238, %237
  %240 = fmul <4 x float> %201, %236
  %241 = fsub <4 x float> %240, %233
  %242 = add nsw i64 %181, %163
  %243 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %242
  %244 = load <4 x float>, <4 x float>* %243, align 16, !alias.scope !9, !noalias !12
  %245 = fmul <4 x float> %205, %244
  %246 = add nsw i64 %242, -1
  %247 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %246
  %248 = load <4 x float>, <4 x float>* %247, align 16, !alias.scope !9, !noalias !12
  %249 = fmul <4 x float> %205, %248
  %250 = fmul <4 x float> %209, %244
  %251 = fadd <4 x float> %250, %249
  %252 = fmul <4 x float> %209, %248
  %253 = fsub <4 x float> %252, %245
  %254 = add nsw i64 %181, %165
  %255 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %254
  %256 = load <4 x float>, <4 x float>* %255, align 16, !alias.scope !9, !noalias !12
  %257 = fmul <4 x float> %213, %256
  %258 = add nsw i64 %254, -1
  %259 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %258
  %260 = load <4 x float>, <4 x float>* %259, align 16, !alias.scope !9, !noalias !12
  %261 = fmul <4 x float> %213, %260
  %262 = fmul <4 x float> %217, %256
  %263 = fadd <4 x float> %262, %261
  %264 = fmul <4 x float> %217, %260
  %265 = fsub <4 x float> %264, %257
  %266 = fadd <4 x float> %227, %263
  %267 = fsub <4 x float> %263, %227
  %268 = fsub <4 x float> %229, %265
  %269 = fadd <4 x float> %229, %265
  %270 = fadd <4 x float> %239, %251
  %271 = fsub <4 x float> %251, %239
  %272 = fsub <4 x float> %241, %253
  %273 = fadd <4 x float> %241, %253
  %274 = add nsw i64 %181, %167
  %275 = add nsw i64 %274, -1
  %276 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %275
  %277 = load <4 x float>, <4 x float>* %276, align 16, !alias.scope !9, !noalias !12
  %278 = fadd <4 x float> %270, %266
  %279 = fadd <4 x float> %277, %278
  %280 = add nsw i64 %181, %170
  %281 = add nsw i64 %280, -1
  %282 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %281
  store <4 x float> %279, <4 x float>* %282, align 16, !alias.scope !12, !noalias !9
  %283 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %274
  %284 = load <4 x float>, <4 x float>* %283, align 16, !alias.scope !9, !noalias !12
  %285 = fadd <4 x float> %273, %269
  %286 = fsub <4 x float> %284, %285
  %287 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %280
  store <4 x float> %286, <4 x float>* %287, align 16, !alias.scope !12, !noalias !9
  %288 = fmul <4 x float> %266, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %289 = fmul <4 x float> %270, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %290 = fadd <4 x float> %289, %288
  %291 = fadd <4 x float> %277, %290
  %292 = fmul <4 x float> %269, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %293 = fmul <4 x float> %273, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %294 = fadd <4 x float> %293, %292
  %295 = fsub <4 x float> %284, %294
  %296 = fmul <4 x float> %266, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %297 = fmul <4 x float> %270, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %298 = fadd <4 x float> %297, %296
  %299 = fadd <4 x float> %277, %298
  %300 = fmul <4 x float> %269, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %301 = fmul <4 x float> %273, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %302 = fadd <4 x float> %301, %300
  %303 = fsub <4 x float> %284, %302
  %304 = fmul <4 x float> %268, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %305 = fmul <4 x float> %272, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %306 = fadd <4 x float> %305, %304
  %307 = fmul <4 x float> %267, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %308 = fmul <4 x float> %271, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %309 = fadd <4 x float> %308, %307
  %310 = fmul <4 x float> %268, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %311 = fmul <4 x float> %272, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %312 = fsub <4 x float> %310, %311
  %313 = fmul <4 x float> %267, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %314 = fmul <4 x float> %271, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %315 = fsub <4 x float> %313, %314
  %316 = fsub <4 x float> %291, %306
  %317 = add nsw i64 %181, %172
  %318 = add nsw i64 %317, -1
  %319 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %318
  store <4 x float> %316, <4 x float>* %319, align 16, !alias.scope !12, !noalias !9
  %320 = fadd <4 x float> %306, %291
  %321 = add nsw i32 %183, %177
  %322 = add nsw i32 %321, -1
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %323
  store <4 x float> %320, <4 x float>* %324, align 16, !alias.scope !12, !noalias !9
  %325 = fadd <4 x float> %309, %295
  %326 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %317
  store <4 x float> %325, <4 x float>* %326, align 16, !alias.scope !12, !noalias !9
  %327 = fsub <4 x float> %309, %295
  %328 = sext i32 %321 to i64
  %329 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %328
  store <4 x float> %327, <4 x float>* %329, align 16, !alias.scope !12, !noalias !9
  %330 = fsub <4 x float> %299, %312
  %331 = add nsw i64 %181, %174
  %332 = add nsw i64 %331, -1
  %333 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %332
  store <4 x float> %330, <4 x float>* %333, align 16, !alias.scope !12, !noalias !9
  %334 = fadd <4 x float> %312, %299
  %335 = add nsw i32 %183, %179
  %336 = add nsw i32 %335, -1
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %337
  store <4 x float> %334, <4 x float>* %338, align 16, !alias.scope !12, !noalias !9
  %339 = fadd <4 x float> %315, %303
  %340 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %331
  store <4 x float> %339, <4 x float>* %340, align 16, !alias.scope !12, !noalias !9
  %341 = fsub <4 x float> %315, %303
  %342 = sext i32 %335 to i64
  %343 = getelementptr inbounds <4 x float>, <4 x float>* %49, i64 %342
  store <4 x float> %341, <4 x float>* %343, align 16, !alias.scope !12, !noalias !9
  %344 = add nuw nsw i64 %181, 2
  %345 = icmp sgt i64 %344, %148
  br i1 %345, label %346, label %180

346:                                              ; preds = %180, %155
  %347 = add nuw nsw i64 %156, 1
  %348 = icmp eq i64 %347, %154
  br i1 %348, label %511, label %155

349:                                              ; preds = %17
  %350 = add nsw i32 %32, %29
  %351 = add nsw i32 %350, %29
  %352 = sext i32 %32 to i64
  %353 = getelementptr inbounds float, float* %4, i64 %352
  %354 = sext i32 %350 to i64
  %355 = getelementptr inbounds float, float* %4, i64 %354
  %356 = sext i32 %351 to i64
  %357 = getelementptr inbounds float, float* %4, i64 %356
  tail call fastcc void @radf4_ps(i32 %29, i32 %28, <4 x float>* %19, <4 x float>* %20, float* %353, float* %355, float* %357)
  br label %511

358:                                              ; preds = %17
  %359 = add nsw i32 %32, %29
  %360 = sext i32 %32 to i64
  %361 = getelementptr inbounds float, float* %4, i64 %360
  %362 = sext i32 %359 to i64
  %363 = getelementptr inbounds float, float* %4, i64 %362
  %364 = icmp sgt i32 %28, 0
  br i1 %364, label %365, label %511

365:                                              ; preds = %358
  %366 = shl i32 %28, 1
  %367 = add nsw i32 %29, -1
  %368 = sext i32 %29 to i64
  %369 = sext i32 %366 to i64
  %370 = sext i32 %28 to i64
  %371 = sext i32 %367 to i64
  %372 = zext i32 %28 to i64
  br label %373

373:                                              ; preds = %373, %365
  %374 = phi i64 [ 0, %365 ], [ %402, %373 ]
  %375 = add nsw i64 %374, %370
  %376 = mul nsw i64 %375, %368
  %377 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %376
  %378 = load <4 x float>, <4 x float>* %377, align 16, !alias.scope !15, !noalias !18
  %379 = add nsw i64 %374, %369
  %380 = mul nsw i64 %379, %368
  %381 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %380
  %382 = load <4 x float>, <4 x float>* %381, align 16, !alias.scope !15, !noalias !18
  %383 = fadd <4 x float> %378, %382
  %384 = mul nsw i64 %374, %368
  %385 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %384
  %386 = load <4 x float>, <4 x float>* %385, align 16, !alias.scope !15, !noalias !18
  %387 = fadd <4 x float> %386, %383
  %388 = mul nuw nsw i64 %374, 3
  %389 = mul nsw i64 %388, %368
  %390 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %389
  store <4 x float> %387, <4 x float>* %390, align 16, !alias.scope !18, !noalias !15
  %391 = fsub <4 x float> %382, %378
  %392 = fmul <4 x float> %391, <float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000>
  %393 = add nuw nsw i64 %388, 2
  %394 = mul nsw i64 %393, %368
  %395 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %394
  store <4 x float> %392, <4 x float>* %395, align 16, !alias.scope !18, !noalias !15
  %396 = fmul <4 x float> %383, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %397 = fadd <4 x float> %386, %396
  %398 = add nuw nsw i64 %388, 1
  %399 = mul nsw i64 %398, %368
  %400 = add nsw i64 %399, %371
  %401 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %400
  store <4 x float> %397, <4 x float>* %401, align 16, !alias.scope !18, !noalias !15
  %402 = add nuw nsw i64 %374, 1
  %403 = icmp eq i64 %402, %372
  br i1 %403, label %404, label %373

404:                                              ; preds = %373
  %405 = icmp eq i32 %29, 1
  br i1 %405, label %511, label %406

406:                                              ; preds = %404
  %407 = icmp sgt i32 %29, 2
  br label %408

408:                                              ; preds = %505, %406
  %409 = phi i64 [ 0, %406 ], [ %506, %505 ]
  br i1 %407, label %410, label %505

410:                                              ; preds = %408
  %411 = add nsw i64 %409, %370
  %412 = mul nsw i64 %411, %368
  %413 = add nsw i64 %409, %369
  %414 = mul nsw i64 %413, %368
  %415 = mul nsw i64 %409, %368
  %416 = mul nuw nsw i64 %409, 3
  %417 = mul nsw i64 %416, %368
  %418 = add nuw nsw i64 %416, 2
  %419 = mul nsw i64 %418, %368
  %420 = add nuw nsw i64 %416, 1
  %421 = mul nsw i64 %420, %368
  br label %422

422:                                              ; preds = %422, %410
  %423 = phi i64 [ 2, %410 ], [ %503, %422 ]
  %424 = sub nsw i64 %368, %423
  %425 = add nsw i64 %423, -2
  %426 = getelementptr inbounds float, float* %361, i64 %425
  %427 = load float, float* %426, align 4, !noalias !20
  %428 = insertelement <4 x float> undef, float %427, i32 0
  %429 = shufflevector <4 x float> %428, <4 x float> undef, <4 x i32> zeroinitializer
  %430 = add nsw i64 %423, -1
  %431 = getelementptr inbounds float, float* %361, i64 %430
  %432 = load float, float* %431, align 4, !noalias !20
  %433 = insertelement <4 x float> undef, float %432, i32 0
  %434 = shufflevector <4 x float> %433, <4 x float> undef, <4 x i32> zeroinitializer
  %435 = add nsw i64 %430, %412
  %436 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %435
  %437 = load <4 x float>, <4 x float>* %436, align 16, !alias.scope !15, !noalias !18
  %438 = add nsw i64 %423, %412
  %439 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %438
  %440 = load <4 x float>, <4 x float>* %439, align 16, !alias.scope !15, !noalias !18
  %441 = fmul <4 x float> %437, %434
  %442 = fmul <4 x float> %437, %429
  %443 = fmul <4 x float> %440, %434
  %444 = fadd <4 x float> %442, %443
  %445 = fmul <4 x float> %429, %440
  %446 = fsub <4 x float> %445, %441
  %447 = getelementptr inbounds float, float* %363, i64 %425
  %448 = load float, float* %447, align 4, !noalias !20
  %449 = insertelement <4 x float> undef, float %448, i32 0
  %450 = shufflevector <4 x float> %449, <4 x float> undef, <4 x i32> zeroinitializer
  %451 = getelementptr inbounds float, float* %363, i64 %430
  %452 = load float, float* %451, align 4, !noalias !20
  %453 = insertelement <4 x float> undef, float %452, i32 0
  %454 = shufflevector <4 x float> %453, <4 x float> undef, <4 x i32> zeroinitializer
  %455 = add nsw i64 %430, %414
  %456 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %455
  %457 = load <4 x float>, <4 x float>* %456, align 16, !alias.scope !15, !noalias !18
  %458 = add nsw i64 %423, %414
  %459 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %458
  %460 = load <4 x float>, <4 x float>* %459, align 16, !alias.scope !15, !noalias !18
  %461 = fmul <4 x float> %457, %454
  %462 = fmul <4 x float> %457, %450
  %463 = fmul <4 x float> %460, %454
  %464 = fadd <4 x float> %462, %463
  %465 = fmul <4 x float> %450, %460
  %466 = fsub <4 x float> %465, %461
  %467 = fadd <4 x float> %444, %464
  %468 = fadd <4 x float> %446, %466
  %469 = add nsw i64 %430, %415
  %470 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %469
  %471 = load <4 x float>, <4 x float>* %470, align 16, !alias.scope !15, !noalias !18
  %472 = fadd <4 x float> %471, %467
  %473 = add nsw i64 %430, %417
  %474 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %473
  store <4 x float> %472, <4 x float>* %474, align 16, !alias.scope !18, !noalias !15
  %475 = add nsw i64 %423, %415
  %476 = getelementptr inbounds <4 x float>, <4 x float>* %19, i64 %475
  %477 = load <4 x float>, <4 x float>* %476, align 16, !alias.scope !15, !noalias !18
  %478 = fadd <4 x float> %477, %468
  %479 = add nsw i64 %423, %417
  %480 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %479
  store <4 x float> %478, <4 x float>* %480, align 16, !alias.scope !18, !noalias !15
  %481 = fmul <4 x float> %467, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %482 = fadd <4 x float> %471, %481
  %483 = fmul <4 x float> %468, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %484 = fadd <4 x float> %477, %483
  %485 = fsub <4 x float> %446, %466
  %486 = fmul <4 x float> %485, <float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000>
  %487 = fsub <4 x float> %464, %444
  %488 = fmul <4 x float> %487, <float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000>
  %489 = fadd <4 x float> %486, %482
  %490 = add nsw i64 %430, %419
  %491 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %490
  store <4 x float> %489, <4 x float>* %491, align 16, !alias.scope !18, !noalias !15
  %492 = fsub <4 x float> %482, %486
  %493 = add i64 %424, %421
  %494 = shl i64 %493, 32
  %495 = add i64 %494, -4294967296
  %496 = ashr exact i64 %495, 32
  %497 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %496
  store <4 x float> %492, <4 x float>* %497, align 16, !alias.scope !18, !noalias !15
  %498 = fadd <4 x float> %488, %484
  %499 = add nsw i64 %423, %419
  %500 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %499
  store <4 x float> %498, <4 x float>* %500, align 16, !alias.scope !18, !noalias !15
  %501 = fsub <4 x float> %488, %484
  %502 = getelementptr inbounds <4 x float>, <4 x float>* %20, i64 %493
  store <4 x float> %501, <4 x float>* %502, align 16, !alias.scope !18, !noalias !15
  %503 = add nuw nsw i64 %423, 2
  %504 = icmp slt i64 %503, %368
  br i1 %504, label %422, label %505

505:                                              ; preds = %422, %408
  %506 = add nuw nsw i64 %409, 1
  %507 = icmp eq i64 %506, %372
  br i1 %507, label %511, label %408

508:                                              ; preds = %17
  %509 = sext i32 %32 to i64
  %510 = getelementptr inbounds float, float* %4, i64 %509
  tail call fastcc void @radf2_ps(i32 %29, i32 %28, <4 x float>* %19, <4 x float>* %20, float* %510)
  br label %511

511:                                              ; preds = %505, %346, %404, %358, %140, %138, %17, %508, %349
  %512 = icmp eq <4 x float>* %20, %3
  %513 = select i1 %512, <4 x float>* %2, <4 x float>* %3
  %514 = select i1 %512, <4 x float>* %3, <4 x float>* %2
  %515 = add nuw nsw i64 %18, 1
  %516 = icmp eq i64 %515, %16
  br i1 %516, label %517, label %17

517:                                              ; preds = %511, %6
  %518 = phi <4 x float>* [ %1, %6 ], [ %514, %511 ]
  ret <4 x float>* %518
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @pffft_real_finalize(i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, <4 x float>* nocapture readonly) unnamed_addr #11 {
  %5 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 7
  %6 = load <4 x float>, <4 x float>* %5, align 16
  %7 = load <4 x float>, <4 x float>* %1, align 16
  %8 = shl i32 %0, 1
  %9 = add nsw i32 %8, -1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %10
  %12 = load <4 x float>, <4 x float>* %11, align 16
  %13 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 1
  %14 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 2
  %15 = load <4 x float>, <4 x float>* %13, align 16
  %16 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 3
  %17 = load <4 x float>, <4 x float>* %14, align 16
  %18 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 4
  %19 = load <4 x float>, <4 x float>* %16, align 16
  %20 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 5
  %21 = load <4 x float>, <4 x float>* %18, align 16
  %22 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 6
  %23 = load <4 x float>, <4 x float>* %20, align 16
  %24 = load <4 x float>, <4 x float>* %22, align 16
  %25 = shufflevector <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, <4 x float> %15, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %26 = shufflevector <4 x float> %19, <4 x float> %23, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %27 = shufflevector <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x float> %15, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %28 = shufflevector <4 x float> %19, <4 x float> %23, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %29 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <4 x float> %26, <4 x float> %25, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %31 = shufflevector <4 x float> %27, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = shufflevector <4 x float> %28, <4 x float> %27, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %33 = shufflevector <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, <4 x float> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %34 = shufflevector <4 x float> %21, <4 x float> %24, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %35 = shufflevector <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x float> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %36 = shufflevector <4 x float> %21, <4 x float> %24, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %37 = shufflevector <4 x float> %33, <4 x float> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = shufflevector <4 x float> %34, <4 x float> %33, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %39 = shufflevector <4 x float> %35, <4 x float> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = shufflevector <4 x float> %36, <4 x float> %35, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %41 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 1
  %42 = load <4 x float>, <4 x float>* %41, align 16
  %43 = fmul <4 x float> %30, %42
  %44 = load <4 x float>, <4 x float>* %3, align 16
  %45 = fmul <4 x float> %30, %44
  %46 = fmul <4 x float> %42, %38
  %47 = fsub <4 x float> %45, %46
  %48 = fmul <4 x float> %38, %44
  %49 = fadd <4 x float> %43, %48
  %50 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 3
  %51 = load <4 x float>, <4 x float>* %50, align 16
  %52 = fmul <4 x float> %31, %51
  %53 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 2
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = fmul <4 x float> %31, %54
  %56 = fmul <4 x float> %39, %51
  %57 = fsub <4 x float> %55, %56
  %58 = fmul <4 x float> %39, %54
  %59 = fadd <4 x float> %52, %58
  %60 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 5
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = fmul <4 x float> %32, %61
  %63 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 4
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = fmul <4 x float> %32, %64
  %66 = fmul <4 x float> %40, %61
  %67 = fsub <4 x float> %65, %66
  %68 = fmul <4 x float> %40, %64
  %69 = fadd <4 x float> %62, %68
  %70 = fadd <4 x float> %29, %57
  %71 = fsub <4 x float> %29, %57
  %72 = fadd <4 x float> %47, %67
  %73 = fsub <4 x float> %67, %47
  %74 = fadd <4 x float> %37, %59
  %75 = fsub <4 x float> %37, %59
  %76 = fadd <4 x float> %49, %69
  %77 = fsub <4 x float> %69, %49
  %78 = fadd <4 x float> %70, %72
  %79 = fsub <4 x float> %70, %72
  %80 = fadd <4 x float> %74, %76
  %81 = fsub <4 x float> %76, %74
  %82 = fadd <4 x float> %71, %77
  %83 = fsub <4 x float> %71, %77
  %84 = fsub <4 x float> %73, %75
  %85 = fadd <4 x float> %75, %73
  %86 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 1
  store <4 x float> %78, <4 x float>* %2, align 16
  %87 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 2
  store <4 x float> %80, <4 x float>* %86, align 16
  %88 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 3
  store <4 x float> %82, <4 x float>* %87, align 16
  %89 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 4
  store <4 x float> %84, <4 x float>* %88, align 16
  %90 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 5
  store <4 x float> %83, <4 x float>* %89, align 16
  %91 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 6
  store <4 x float> %85, <4 x float>* %90, align 16
  %92 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 7
  store <4 x float> %79, <4 x float>* %91, align 16
  store <4 x float> %81, <4 x float>* %92, align 16
  %93 = extractelement <4 x float> %7, i32 0
  %94 = extractelement <4 x float> %7, i32 2
  %95 = fadd float %93, %94
  %96 = extractelement <4 x float> %7, i32 1
  %97 = extractelement <4 x float> %7, i32 3
  %98 = fadd float %96, %97
  %99 = fadd float %95, %98
  %100 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 0, i64 0
  store float %99, float* %100, align 16
  %101 = fsub float %95, %98
  %102 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 1, i64 0
  store float %101, float* %102, align 16
  %103 = fsub float %93, %94
  %104 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 4, i64 0
  store float %103, float* %104, align 16
  %105 = fsub float %97, %96
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 5, i64 0
  store float %105, float* %106, align 16
  %107 = extractelement <4 x float> %12, i32 0
  %108 = extractelement <4 x float> %12, i32 1
  %109 = extractelement <4 x float> %12, i32 3
  %110 = fsub float %108, %109
  %111 = fmul float %110, 0x3FE6A09E60000000
  %112 = fadd float %107, %111
  %113 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 2, i64 0
  store float %112, float* %113, align 16
  %114 = extractelement <4 x float> %12, i32 2
  %115 = fsub float -0.000000e+00, %114
  %116 = fadd float %108, %109
  %117 = fmul float %116, 0x3FE6A09E60000000
  %118 = fsub float %115, %117
  %119 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 3, i64 0
  store float %118, float* %119, align 16
  %120 = fsub float %107, %111
  %121 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 6, i64 0
  store float %120, float* %121, align 16
  %122 = fsub float %114, %117
  %123 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 7, i64 0
  store float %122, float* %123, align 16
  %124 = icmp sgt i32 %0, 7
  br i1 %124, label %125, label %222

125:                                              ; preds = %4
  %126 = lshr i32 %0, 2
  %127 = zext i32 %126 to i64
  br label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ 1, %125 ], [ %220, %128 ]
  %130 = phi <4 x float> [ %6, %125 ], [ %134, %128 ]
  %131 = shl nsw i64 %129, 3
  %132 = or i64 %131, 7
  %133 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %132
  %134 = load <4 x float>, <4 x float>* %133, align 16
  %135 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %131
  %136 = getelementptr inbounds <4 x float>, <4 x float>* %135, i64 1
  %137 = mul nuw nsw i64 %129, 6
  %138 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %137
  %139 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %131
  %140 = load <4 x float>, <4 x float>* %135, align 16
  %141 = getelementptr inbounds <4 x float>, <4 x float>* %136, i64 1
  %142 = load <4 x float>, <4 x float>* %136, align 16
  %143 = getelementptr inbounds <4 x float>, <4 x float>* %136, i64 2
  %144 = load <4 x float>, <4 x float>* %141, align 16
  %145 = getelementptr inbounds <4 x float>, <4 x float>* %136, i64 3
  %146 = load <4 x float>, <4 x float>* %143, align 16
  %147 = getelementptr inbounds <4 x float>, <4 x float>* %136, i64 4
  %148 = load <4 x float>, <4 x float>* %145, align 16
  %149 = getelementptr inbounds <4 x float>, <4 x float>* %136, i64 5
  %150 = load <4 x float>, <4 x float>* %147, align 16
  %151 = load <4 x float>, <4 x float>* %149, align 16
  %152 = shufflevector <4 x float> %130, <4 x float> %142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %153 = shufflevector <4 x float> %146, <4 x float> %150, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %154 = shufflevector <4 x float> %130, <4 x float> %142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %155 = shufflevector <4 x float> %146, <4 x float> %150, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %156 = shufflevector <4 x float> %152, <4 x float> %153, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %157 = shufflevector <4 x float> %153, <4 x float> %152, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %158 = shufflevector <4 x float> %154, <4 x float> %155, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = shufflevector <4 x float> %155, <4 x float> %154, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %160 = shufflevector <4 x float> %140, <4 x float> %144, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %161 = shufflevector <4 x float> %148, <4 x float> %151, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = shufflevector <4 x float> %140, <4 x float> %144, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %163 = shufflevector <4 x float> %148, <4 x float> %151, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %164 = shufflevector <4 x float> %160, <4 x float> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %165 = shufflevector <4 x float> %161, <4 x float> %160, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %166 = shufflevector <4 x float> %162, <4 x float> %163, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %167 = shufflevector <4 x float> %163, <4 x float> %162, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %168 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 1
  %169 = load <4 x float>, <4 x float>* %168, align 16
  %170 = fmul <4 x float> %157, %169
  %171 = load <4 x float>, <4 x float>* %138, align 16
  %172 = fmul <4 x float> %157, %171
  %173 = fmul <4 x float> %169, %165
  %174 = fsub <4 x float> %172, %173
  %175 = fmul <4 x float> %165, %171
  %176 = fadd <4 x float> %170, %175
  %177 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 3
  %178 = load <4 x float>, <4 x float>* %177, align 16
  %179 = fmul <4 x float> %158, %178
  %180 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 2
  %181 = load <4 x float>, <4 x float>* %180, align 16
  %182 = fmul <4 x float> %158, %181
  %183 = fmul <4 x float> %166, %178
  %184 = fsub <4 x float> %182, %183
  %185 = fmul <4 x float> %166, %181
  %186 = fadd <4 x float> %179, %185
  %187 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 5
  %188 = load <4 x float>, <4 x float>* %187, align 16
  %189 = fmul <4 x float> %159, %188
  %190 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 4
  %191 = load <4 x float>, <4 x float>* %190, align 16
  %192 = fmul <4 x float> %159, %191
  %193 = fmul <4 x float> %167, %188
  %194 = fsub <4 x float> %192, %193
  %195 = fmul <4 x float> %167, %191
  %196 = fadd <4 x float> %189, %195
  %197 = fadd <4 x float> %156, %184
  %198 = fsub <4 x float> %156, %184
  %199 = fadd <4 x float> %174, %194
  %200 = fsub <4 x float> %194, %174
  %201 = fadd <4 x float> %164, %186
  %202 = fsub <4 x float> %164, %186
  %203 = fadd <4 x float> %176, %196
  %204 = fsub <4 x float> %196, %176
  %205 = fadd <4 x float> %197, %199
  %206 = fsub <4 x float> %197, %199
  %207 = fadd <4 x float> %201, %203
  %208 = fsub <4 x float> %203, %201
  %209 = fadd <4 x float> %198, %204
  %210 = fsub <4 x float> %198, %204
  %211 = fsub <4 x float> %200, %202
  %212 = fadd <4 x float> %202, %200
  %213 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 1
  store <4 x float> %205, <4 x float>* %139, align 16
  %214 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 2
  store <4 x float> %207, <4 x float>* %213, align 16
  %215 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 3
  store <4 x float> %209, <4 x float>* %214, align 16
  %216 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 4
  store <4 x float> %211, <4 x float>* %215, align 16
  %217 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 5
  store <4 x float> %210, <4 x float>* %216, align 16
  %218 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 6
  store <4 x float> %212, <4 x float>* %217, align 16
  %219 = getelementptr inbounds <4 x float>, <4 x float>* %139, i64 7
  store <4 x float> %206, <4 x float>* %218, align 16
  store <4 x float> %208, <4 x float>* %219, align 16
  %220 = add nuw nsw i64 %129, 1
  %221 = icmp ult i64 %220, %127
  br i1 %221, label %128, label %222

222:                                              ; preds = %128, %4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @pffft_real_preprocess(i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, <4 x float>* nocapture readonly) unnamed_addr #11 {
  %5 = alloca %union.v4sf_union, align 16
  %6 = alloca %union.v4sf_union, align 16
  %7 = bitcast %union.v4sf_union* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #12
  %8 = bitcast %union.v4sf_union* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #12
  %9 = bitcast %union.v4sf_union* %5 to [4 x float]*
  %10 = bitcast %union.v4sf_union* %6 to [4 x float]*
  %11 = bitcast <4 x float>* %1 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %union.v4sf_union* %5 to i32*
  store i32 %12, i32* %13, align 16
  %14 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 4
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %union.v4sf_union* %6 to i32*
  store i32 %16, i32* %17, align 16
  %18 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 8
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 1
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 12
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, i64 1
  %27 = bitcast float* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 16
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 2
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 8
  %33 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 20
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, i64 2
  %37 = bitcast float* %36 to i32*
  store i32 %35, i32* %37, align 8
  %38 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 24
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 3
  %42 = bitcast float* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 0, i64 28
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, i64 3
  %47 = bitcast float* %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 1
  %49 = load <4 x float>, <4 x float>* %1, align 16
  %50 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 1
  %51 = load <4 x float>, <4 x float>* %50, align 16
  %52 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 2
  %53 = load <4 x float>, <4 x float>* %52, align 16
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 3
  %55 = load <4 x float>, <4 x float>* %54, align 16
  %56 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 4
  %57 = load <4 x float>, <4 x float>* %56, align 16
  %58 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 5
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 6
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 7
  %63 = load <4 x float>, <4 x float>* %62, align 16
  %64 = fadd <4 x float> %49, %61
  %65 = fsub <4 x float> %49, %61
  %66 = fadd <4 x float> %53, %57
  %67 = fsub <4 x float> %53, %57
  %68 = fadd <4 x float> %51, %63
  %69 = fsub <4 x float> %51, %63
  %70 = fadd <4 x float> %55, %59
  %71 = fsub <4 x float> %55, %59
  %72 = fadd <4 x float> %66, %64
  %73 = fsub <4 x float> %64, %66
  %74 = fsub <4 x float> %65, %70
  %75 = fadd <4 x float> %70, %65
  %76 = fsub <4 x float> %69, %71
  %77 = fadd <4 x float> %71, %69
  %78 = fsub <4 x float> %68, %67
  %79 = fadd <4 x float> %67, %68
  %80 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 1
  %81 = load <4 x float>, <4 x float>* %80, align 16
  %82 = fmul <4 x float> %74, %81
  %83 = load <4 x float>, <4 x float>* %3, align 16
  %84 = fmul <4 x float> %74, %83
  %85 = fmul <4 x float> %81, %78
  %86 = fadd <4 x float> %84, %85
  %87 = fmul <4 x float> %78, %83
  %88 = fsub <4 x float> %87, %82
  %89 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 3
  %90 = load <4 x float>, <4 x float>* %89, align 16
  %91 = fmul <4 x float> %73, %90
  %92 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 2
  %93 = load <4 x float>, <4 x float>* %92, align 16
  %94 = fmul <4 x float> %73, %93
  %95 = fmul <4 x float> %77, %90
  %96 = fadd <4 x float> %95, %94
  %97 = fmul <4 x float> %77, %93
  %98 = fsub <4 x float> %97, %91
  %99 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 5
  %100 = load <4 x float>, <4 x float>* %99, align 16
  %101 = fmul <4 x float> %75, %100
  %102 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 4
  %103 = load <4 x float>, <4 x float>* %102, align 16
  %104 = fmul <4 x float> %75, %103
  %105 = fmul <4 x float> %79, %100
  %106 = fadd <4 x float> %105, %104
  %107 = fmul <4 x float> %79, %103
  %108 = fsub <4 x float> %107, %101
  %109 = shufflevector <4 x float> %72, <4 x float> %86, <4 x i32> <i32 undef, i32 undef, i32 1, i32 5>
  %110 = shufflevector <4 x float> %96, <4 x float> %106, <4 x i32> <i32 undef, i32 undef, i32 1, i32 5>
  %111 = shufflevector <4 x float> %72, <4 x float> %86, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %112 = shufflevector <4 x float> %96, <4 x float> %106, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %113 = shufflevector <4 x float> %110, <4 x float> %109, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %114 = shufflevector <4 x float> %111, <4 x float> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %115 = shufflevector <4 x float> %112, <4 x float> %111, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %116 = shufflevector <4 x float> %76, <4 x float> %88, <4 x i32> <i32 undef, i32 undef, i32 1, i32 5>
  %117 = shufflevector <4 x float> %98, <4 x float> %108, <4 x i32> <i32 undef, i32 undef, i32 1, i32 5>
  %118 = shufflevector <4 x float> %76, <4 x float> %88, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %119 = shufflevector <4 x float> %98, <4 x float> %108, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %120 = shufflevector <4 x float> %117, <4 x float> %116, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %121 = shufflevector <4 x float> %118, <4 x float> %119, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %122 = shufflevector <4 x float> %119, <4 x float> %118, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %123 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 2
  store <4 x float> %113, <4 x float>* %48, align 16
  %124 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 3
  store <4 x float> %120, <4 x float>* %123, align 16
  %125 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 4
  store <4 x float> %114, <4 x float>* %124, align 16
  %126 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 5
  store <4 x float> %121, <4 x float>* %125, align 16
  %127 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 6
  store <4 x float> %115, <4 x float>* %126, align 16
  store <4 x float> %122, <4 x float>* %127, align 16
  %128 = icmp sgt i32 %0, 7
  %129 = bitcast i32 %40 to float
  %130 = bitcast i32 %45 to float
  br i1 %128, label %131, label %230

131:                                              ; preds = %4
  %132 = lshr i32 %0, 2
  %133 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 -1
  %134 = zext i32 %132 to i64
  br label %135

135:                                              ; preds = %131, %135
  %136 = phi i64 [ 1, %131 ], [ %225, %135 ]
  %137 = shl nsw i64 %136, 3
  %138 = getelementptr inbounds <4 x float>, <4 x float>* %1, i64 %137
  %139 = mul nuw nsw i64 %136, 6
  %140 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %139
  %141 = getelementptr inbounds <4 x float>, <4 x float>* %133, i64 %137
  %142 = load <4 x float>, <4 x float>* %138, align 16
  %143 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 1
  %144 = load <4 x float>, <4 x float>* %143, align 16
  %145 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 2
  %146 = load <4 x float>, <4 x float>* %145, align 16
  %147 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 3
  %148 = load <4 x float>, <4 x float>* %147, align 16
  %149 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 4
  %150 = load <4 x float>, <4 x float>* %149, align 16
  %151 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 5
  %152 = load <4 x float>, <4 x float>* %151, align 16
  %153 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 6
  %154 = load <4 x float>, <4 x float>* %153, align 16
  %155 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 7
  %156 = load <4 x float>, <4 x float>* %155, align 16
  %157 = fadd <4 x float> %142, %154
  %158 = fsub <4 x float> %142, %154
  %159 = fadd <4 x float> %146, %150
  %160 = fsub <4 x float> %146, %150
  %161 = fadd <4 x float> %144, %156
  %162 = fsub <4 x float> %144, %156
  %163 = fadd <4 x float> %148, %152
  %164 = fsub <4 x float> %148, %152
  %165 = fadd <4 x float> %159, %157
  %166 = fsub <4 x float> %157, %159
  %167 = fsub <4 x float> %158, %163
  %168 = fadd <4 x float> %163, %158
  %169 = fsub <4 x float> %162, %164
  %170 = fadd <4 x float> %164, %162
  %171 = fsub <4 x float> %161, %160
  %172 = fadd <4 x float> %160, %161
  %173 = getelementptr inbounds <4 x float>, <4 x float>* %140, i64 1
  %174 = load <4 x float>, <4 x float>* %173, align 16
  %175 = fmul <4 x float> %167, %174
  %176 = load <4 x float>, <4 x float>* %140, align 16
  %177 = fmul <4 x float> %167, %176
  %178 = fmul <4 x float> %174, %171
  %179 = fadd <4 x float> %177, %178
  %180 = fmul <4 x float> %171, %176
  %181 = fsub <4 x float> %180, %175
  %182 = getelementptr inbounds <4 x float>, <4 x float>* %140, i64 3
  %183 = load <4 x float>, <4 x float>* %182, align 16
  %184 = fmul <4 x float> %166, %183
  %185 = getelementptr inbounds <4 x float>, <4 x float>* %140, i64 2
  %186 = load <4 x float>, <4 x float>* %185, align 16
  %187 = fmul <4 x float> %166, %186
  %188 = fmul <4 x float> %170, %183
  %189 = fadd <4 x float> %188, %187
  %190 = fmul <4 x float> %170, %186
  %191 = fsub <4 x float> %190, %184
  %192 = getelementptr inbounds <4 x float>, <4 x float>* %140, i64 5
  %193 = load <4 x float>, <4 x float>* %192, align 16
  %194 = fmul <4 x float> %168, %193
  %195 = getelementptr inbounds <4 x float>, <4 x float>* %140, i64 4
  %196 = load <4 x float>, <4 x float>* %195, align 16
  %197 = fmul <4 x float> %168, %196
  %198 = fmul <4 x float> %172, %193
  %199 = fadd <4 x float> %198, %197
  %200 = fmul <4 x float> %172, %196
  %201 = fsub <4 x float> %200, %194
  %202 = shufflevector <4 x float> %165, <4 x float> %179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %203 = shufflevector <4 x float> %189, <4 x float> %199, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %204 = shufflevector <4 x float> %165, <4 x float> %179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %205 = shufflevector <4 x float> %189, <4 x float> %199, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %206 = shufflevector <4 x float> %203, <4 x float> %202, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %207 = shufflevector <4 x float> %204, <4 x float> %205, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %208 = shufflevector <4 x float> %205, <4 x float> %204, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %209 = shufflevector <4 x float> %169, <4 x float> %181, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %210 = shufflevector <4 x float> %191, <4 x float> %201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %211 = shufflevector <4 x float> %169, <4 x float> %181, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %212 = shufflevector <4 x float> %191, <4 x float> %201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %213 = shufflevector <4 x float> %210, <4 x float> %209, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %214 = shufflevector <4 x float> %211, <4 x float> %212, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %215 = shufflevector <4 x float> %212, <4 x float> %211, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %216 = shufflevector <4 x float> %209, <4 x float> %210, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %217 = shufflevector <4 x float> %202, <4 x float> %203, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %218 = getelementptr inbounds <4 x float>, <4 x float>* %141, i64 1
  store <4 x float> %217, <4 x float>* %141, align 16
  %219 = getelementptr inbounds <4 x float>, <4 x float>* %141, i64 2
  store <4 x float> %216, <4 x float>* %218, align 16
  %220 = getelementptr inbounds <4 x float>, <4 x float>* %219, i64 1
  store <4 x float> %206, <4 x float>* %219, align 16
  %221 = getelementptr inbounds <4 x float>, <4 x float>* %219, i64 2
  store <4 x float> %213, <4 x float>* %220, align 16
  %222 = getelementptr inbounds <4 x float>, <4 x float>* %219, i64 3
  store <4 x float> %207, <4 x float>* %221, align 16
  %223 = getelementptr inbounds <4 x float>, <4 x float>* %219, i64 4
  store <4 x float> %214, <4 x float>* %222, align 16
  %224 = getelementptr inbounds <4 x float>, <4 x float>* %219, i64 5
  store <4 x float> %208, <4 x float>* %223, align 16
  store <4 x float> %215, <4 x float>* %224, align 16
  %225 = add nuw nsw i64 %136, 1
  %226 = icmp ult i64 %225, %134
  br i1 %226, label %135, label %227

227:                                              ; preds = %135
  %228 = load float, float* %41, align 4
  %229 = load float, float* %46, align 4
  br label %230

230:                                              ; preds = %227, %4
  %231 = phi float [ %229, %227 ], [ %130, %4 ]
  %232 = phi float [ %228, %227 ], [ %129, %4 ]
  %233 = getelementptr inbounds %union.v4sf_union, %union.v4sf_union* %5, i64 0, i32 0, i64 0
  %234 = load float, float* %233, align 16
  %235 = getelementptr inbounds %union.v4sf_union, %union.v4sf_union* %6, i64 0, i32 0, i64 0
  %236 = load float, float* %235, align 16
  %237 = load float, float* %31, align 8
  %238 = insertelement <2 x float> undef, float %234, i32 0
  %239 = shufflevector <2 x float> %238, <2 x float> undef, <2 x i32> zeroinitializer
  %240 = insertelement <2 x float> undef, float %236, i32 0
  %241 = shufflevector <2 x float> %240, <2 x float> undef, <2 x i32> zeroinitializer
  %242 = fadd <2 x float> %239, %241
  %243 = fsub <2 x float> %239, %241
  %244 = shufflevector <2 x float> %242, <2 x float> %243, <2 x i32> <i32 0, i32 3>
  %245 = shufflevector <2 x float> %244, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %246 = load float, float* %36, align 8
  %247 = insertelement <2 x float> undef, float %237, i32 0
  %248 = insertelement <2 x float> %247, float %246, i32 1
  %249 = fmul <2 x float> %248, <float 2.000000e+00, float 2.000000e+00>
  %250 = shufflevector <2 x float> %249, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %251 = fadd <4 x float> %245, %250
  %252 = fsub <4 x float> %245, %250
  %253 = shufflevector <4 x float> %251, <4 x float> %252, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  store <4 x float> %253, <4 x float>* %2, align 16
  %254 = load float, float* %21, align 4
  %255 = fadd float %254, %232
  %256 = fmul float %255, 2.000000e+00
  %257 = shl i32 %0, 1
  %258 = add nsw i32 %257, -1
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %259, i64 0
  store float %256, float* %260, align 16
  %261 = fsub float %254, %232
  %262 = fmul float %261, 0x3FF6A09E60000000
  %263 = load float, float* %26, align 4
  %264 = fadd float %263, %231
  %265 = fmul float %264, 0x3FF6A09E60000000
  %266 = fsub float %262, %265
  %267 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %259, i64 1
  store float %266, float* %267, align 4
  %268 = fsub float %231, %263
  %269 = fmul float %268, 2.000000e+00
  %270 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %259, i64 2
  store float %269, float* %270, align 8
  %271 = fmul float %261, 0xBFF6A09E60000000
  %272 = fsub float %271, %265
  %273 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %259, i64 3
  store float %272, float* %273, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc <4 x float>* @rfftb1_ps(i32, <4 x float>* readonly, <4 x float>*, <4 x float>*, float* nocapture readonly, i32* nocapture readonly) unnamed_addr #8 {
  %7 = getelementptr inbounds i32, i32* %5, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %517, label %10

10:                                               ; preds = %6
  %11 = icmp eq <4 x float>* %1, %3
  %12 = select i1 %11, <4 x float>* %2, <4 x float>* %3
  %13 = add nuw i32 %8, 1
  %14 = zext i32 %13 to i64
  br label %15

15:                                               ; preds = %509, %10
  %16 = phi i64 [ 1, %10 ], [ %21, %509 ]
  %17 = phi <4 x float>* [ %1, %10 ], [ %515, %509 ]
  %18 = phi <4 x float>* [ %12, %10 ], [ %514, %509 ]
  %19 = phi i32 [ 1, %10 ], [ %24, %509 ]
  %20 = phi i32 [ 0, %10 ], [ %512, %509 ]
  %21 = add nuw nsw i64 %16, 1
  %22 = getelementptr inbounds i32, i32* %5, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %19
  %25 = sdiv i32 %0, %24
  switch i32 %23, label %509 [
    i32 5, label %26
    i32 4, label %346
    i32 3, label %355
    i32 2, label %506
  ]

26:                                               ; preds = %15
  %27 = add nsw i32 %25, %20
  %28 = add nsw i32 %27, %25
  %29 = add nsw i32 %28, %25
  %30 = sext i32 %20 to i64
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = sext i32 %27 to i64
  %33 = getelementptr inbounds float, float* %4, i64 %32
  %34 = sext i32 %28 to i64
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = sext i32 %29 to i64
  %37 = getelementptr inbounds float, float* %4, i64 %36
  %38 = add i32 %19, 1
  %39 = mul nsw i32 %25, %38
  %40 = xor i32 %39, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %41
  %43 = mul nsw i32 %25, 6
  %44 = or i32 %43, 1
  %45 = sub nsw i32 0, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %46
  %48 = icmp slt i32 %19, 1
  br i1 %48, label %135, label %49

49:                                               ; preds = %26
  %50 = shl i32 %19, 1
  %51 = mul nsw i32 %19, 3
  %52 = shl i32 %19, 2
  %53 = mul nsw i32 %19, 5
  %54 = sext i32 %53 to i64
  %55 = sext i32 %25 to i64
  %56 = sext i32 %52 to i64
  %57 = sext i32 %51 to i64
  %58 = sext i32 %50 to i64
  %59 = sext i32 %19 to i64
  %60 = zext i32 %38 to i64
  br label %61

61:                                               ; preds = %61, %49
  %62 = phi i64 [ %133, %61 ], [ 1, %49 ]
  %63 = mul nuw nsw i64 %62, 5
  %64 = add nuw nsw i64 %63, 3
  %65 = mul nsw i64 %64, %55
  %66 = add nsw i64 %65, 1
  %67 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %66
  %68 = load <4 x float>, <4 x float>* %67, align 16, !alias.scope !21, !noalias !24
  %69 = fadd <4 x float> %68, %68
  %70 = add nuw nsw i64 %63, 5
  %71 = mul nsw i64 %70, %55
  %72 = add nsw i64 %71, 1
  %73 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %72
  %74 = load <4 x float>, <4 x float>* %73, align 16, !alias.scope !21, !noalias !24
  %75 = fadd <4 x float> %74, %74
  %76 = add nuw nsw i64 %63, 2
  %77 = mul nsw i64 %76, %55
  %78 = add nsw i64 %77, %55
  %79 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %78
  %80 = load <4 x float>, <4 x float>* %79, align 16, !alias.scope !21, !noalias !24
  %81 = fadd <4 x float> %80, %80
  %82 = add nuw nsw i64 %63, 4
  %83 = mul nsw i64 %82, %55
  %84 = add nsw i64 %83, %55
  %85 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %84
  %86 = load <4 x float>, <4 x float>* %85, align 16, !alias.scope !21, !noalias !24
  %87 = fadd <4 x float> %86, %86
  %88 = add nuw nsw i64 %63, 1
  %89 = mul nsw i64 %88, %55
  %90 = add nsw i64 %89, 1
  %91 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %90
  %92 = load <4 x float>, <4 x float>* %91, align 16, !alias.scope !21, !noalias !24
  %93 = fadd <4 x float> %81, %87
  %94 = fadd <4 x float> %92, %93
  %95 = add nsw i64 %62, %59
  %96 = mul nsw i64 %95, %55
  %97 = add nsw i64 %96, 1
  %98 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %97
  store <4 x float> %94, <4 x float>* %98, align 16, !alias.scope !24, !noalias !21
  %99 = fmul <4 x float> %81, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %100 = fmul <4 x float> %87, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %101 = fadd <4 x float> %99, %100
  %102 = fadd <4 x float> %92, %101
  %103 = fmul <4 x float> %81, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %104 = fmul <4 x float> %87, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %105 = fadd <4 x float> %103, %104
  %106 = fadd <4 x float> %92, %105
  %107 = fmul <4 x float> %69, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %108 = fmul <4 x float> %75, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %109 = fadd <4 x float> %107, %108
  %110 = fmul <4 x float> %69, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %111 = fmul <4 x float> %75, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %112 = fsub <4 x float> %110, %111
  %113 = fsub <4 x float> %102, %109
  %114 = add nsw i64 %62, %58
  %115 = mul nsw i64 %114, %55
  %116 = add nsw i64 %115, 1
  %117 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %116
  store <4 x float> %113, <4 x float>* %117, align 16, !alias.scope !24, !noalias !21
  %118 = fsub <4 x float> %106, %112
  %119 = add nsw i64 %62, %57
  %120 = mul nsw i64 %119, %55
  %121 = add nsw i64 %120, 1
  %122 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %121
  store <4 x float> %118, <4 x float>* %122, align 16, !alias.scope !24, !noalias !21
  %123 = fadd <4 x float> %112, %106
  %124 = add nsw i64 %62, %56
  %125 = mul nsw i64 %124, %55
  %126 = add nsw i64 %125, 1
  %127 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %126
  store <4 x float> %123, <4 x float>* %127, align 16, !alias.scope !24, !noalias !21
  %128 = fadd <4 x float> %109, %102
  %129 = add nsw i64 %62, %54
  %130 = mul nsw i64 %129, %55
  %131 = add nsw i64 %130, 1
  %132 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %131
  store <4 x float> %128, <4 x float>* %132, align 16, !alias.scope !24, !noalias !21
  %133 = add nuw nsw i64 %62, 1
  %134 = icmp eq i64 %133, %60
  br i1 %134, label %135, label %61

135:                                              ; preds = %61, %26
  %136 = icmp eq i32 %25, 1
  br i1 %136, label %509, label %137

137:                                              ; preds = %135
  %138 = add nsw i32 %25, 2
  br i1 %48, label %509, label %139

139:                                              ; preds = %137
  %140 = icmp slt i32 %25, 3
  %141 = shl i32 %19, 1
  %142 = mul nsw i32 %19, 3
  %143 = shl i32 %19, 2
  %144 = mul nsw i32 %19, 5
  %145 = sext i32 %25 to i64
  %146 = sext i32 %144 to i64
  %147 = sext i32 %143 to i64
  %148 = sext i32 %142 to i64
  %149 = sext i32 %141 to i64
  %150 = sext i32 %19 to i64
  %151 = zext i32 %38 to i64
  br label %152

152:                                              ; preds = %343, %139
  %153 = phi i64 [ %344, %343 ], [ 1, %139 ]
  br i1 %140, label %343, label %154

154:                                              ; preds = %152
  %155 = mul nuw nsw i64 %153, 5
  %156 = add nuw nsw i64 %155, 3
  %157 = mul nsw i64 %156, %145
  %158 = add nuw nsw i64 %155, 5
  %159 = mul nsw i64 %158, %145
  %160 = add nuw nsw i64 %155, 1
  %161 = mul nsw i64 %160, %145
  %162 = add nsw i64 %153, %150
  %163 = mul nsw i64 %162, %145
  %164 = add nsw i64 %153, %149
  %165 = mul nsw i64 %164, %145
  %166 = add nsw i64 %153, %148
  %167 = mul nsw i64 %166, %145
  %168 = add nsw i64 %153, %147
  %169 = mul nsw i64 %168, %145
  %170 = add nsw i64 %153, %146
  %171 = mul nsw i64 %170, %145
  %172 = trunc i64 %155 to i32
  %173 = add i32 %172, 2
  %174 = mul i32 %173, %25
  %175 = add i32 %172, 4
  %176 = mul i32 %175, %25
  br label %177

177:                                              ; preds = %177, %154
  %178 = phi i64 [ 3, %154 ], [ %341, %177 ]
  %179 = trunc i64 %178 to i32
  %180 = sub i32 %138, %179
  %181 = add nsw i64 %178, %157
  %182 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %181
  %183 = load <4 x float>, <4 x float>* %182, align 16, !alias.scope !21, !noalias !24
  %184 = add nsw i32 %180, %174
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %185
  %187 = load <4 x float>, <4 x float>* %186, align 16, !alias.scope !21, !noalias !24
  %188 = fadd <4 x float> %183, %187
  %189 = fsub <4 x float> %183, %187
  %190 = add nsw i64 %178, %159
  %191 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %190
  %192 = load <4 x float>, <4 x float>* %191, align 16, !alias.scope !21, !noalias !24
  %193 = add nsw i32 %180, %176
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %194
  %196 = load <4 x float>, <4 x float>* %195, align 16, !alias.scope !21, !noalias !24
  %197 = fadd <4 x float> %192, %196
  %198 = fsub <4 x float> %192, %196
  %199 = add nsw i64 %181, -1
  %200 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %199
  %201 = load <4 x float>, <4 x float>* %200, align 16, !alias.scope !21, !noalias !24
  %202 = add nsw i32 %184, -1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %203
  %205 = load <4 x float>, <4 x float>* %204, align 16, !alias.scope !21, !noalias !24
  %206 = fsub <4 x float> %201, %205
  %207 = fadd <4 x float> %201, %205
  %208 = add nsw i64 %190, -1
  %209 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %208
  %210 = load <4 x float>, <4 x float>* %209, align 16, !alias.scope !21, !noalias !24
  %211 = add nsw i32 %193, -1
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %212
  %214 = load <4 x float>, <4 x float>* %213, align 16, !alias.scope !21, !noalias !24
  %215 = fsub <4 x float> %210, %214
  %216 = fadd <4 x float> %210, %214
  %217 = add nsw i64 %178, %161
  %218 = add nsw i64 %217, -1
  %219 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %218
  %220 = load <4 x float>, <4 x float>* %219, align 16, !alias.scope !21, !noalias !24
  %221 = fadd <4 x float> %207, %216
  %222 = fadd <4 x float> %220, %221
  %223 = add nsw i64 %178, %163
  %224 = add nsw i64 %223, -1
  %225 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %224
  store <4 x float> %222, <4 x float>* %225, align 16, !alias.scope !24, !noalias !21
  %226 = getelementptr inbounds <4 x float>, <4 x float>* %47, i64 %217
  %227 = load <4 x float>, <4 x float>* %226, align 16, !alias.scope !21, !noalias !24
  %228 = fadd <4 x float> %189, %198
  %229 = fadd <4 x float> %228, %227
  %230 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %223
  store <4 x float> %229, <4 x float>* %230, align 16, !alias.scope !24, !noalias !21
  %231 = fmul <4 x float> %207, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %232 = fmul <4 x float> %216, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %233 = fadd <4 x float> %231, %232
  %234 = fadd <4 x float> %220, %233
  %235 = fmul <4 x float> %189, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %236 = fmul <4 x float> %198, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %237 = fadd <4 x float> %235, %236
  %238 = fadd <4 x float> %237, %227
  %239 = fmul <4 x float> %207, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %240 = fmul <4 x float> %216, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %241 = fadd <4 x float> %239, %240
  %242 = fadd <4 x float> %220, %241
  %243 = fmul <4 x float> %189, <float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000, float 0xBFE9E377A0000000>
  %244 = fmul <4 x float> %198, <float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000, float 0x3FD3C6EF40000000>
  %245 = fadd <4 x float> %243, %244
  %246 = fadd <4 x float> %245, %227
  %247 = fmul <4 x float> %206, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %248 = fmul <4 x float> %215, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %249 = fadd <4 x float> %247, %248
  %250 = fmul <4 x float> %188, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %251 = fmul <4 x float> %197, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %252 = fadd <4 x float> %250, %251
  %253 = fmul <4 x float> %206, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %254 = fmul <4 x float> %215, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %255 = fsub <4 x float> %253, %254
  %256 = fmul <4 x float> %188, <float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000, float 0x3FE2CF2300000000>
  %257 = fmul <4 x float> %197, <float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000, float 0x3FEE6F0E20000000>
  %258 = fsub <4 x float> %256, %257
  %259 = fsub <4 x float> %242, %258
  %260 = fadd <4 x float> %258, %242
  %261 = fadd <4 x float> %255, %246
  %262 = fsub <4 x float> %246, %255
  %263 = fadd <4 x float> %252, %234
  %264 = fsub <4 x float> %234, %252
  %265 = fsub <4 x float> %238, %249
  %266 = fadd <4 x float> %249, %238
  %267 = add nsw i64 %178, -2
  %268 = getelementptr inbounds float, float* %31, i64 %267
  %269 = load float, float* %268, align 4, !noalias !26
  %270 = insertelement <4 x float> undef, float %269, i32 0
  %271 = shufflevector <4 x float> %270, <4 x float> undef, <4 x i32> zeroinitializer
  %272 = fmul <4 x float> %264, %271
  %273 = add nsw i64 %178, -3
  %274 = getelementptr inbounds float, float* %31, i64 %273
  %275 = load float, float* %274, align 4, !noalias !26
  %276 = insertelement <4 x float> undef, float %275, i32 0
  %277 = shufflevector <4 x float> %276, <4 x float> undef, <4 x i32> zeroinitializer
  %278 = fmul <4 x float> %264, %277
  %279 = fmul <4 x float> %266, %271
  %280 = fsub <4 x float> %278, %279
  %281 = fmul <4 x float> %266, %277
  %282 = fadd <4 x float> %272, %281
  %283 = getelementptr inbounds float, float* %33, i64 %267
  %284 = load float, float* %283, align 4, !noalias !26
  %285 = insertelement <4 x float> undef, float %284, i32 0
  %286 = shufflevector <4 x float> %285, <4 x float> undef, <4 x i32> zeroinitializer
  %287 = fmul <4 x float> %259, %286
  %288 = getelementptr inbounds float, float* %33, i64 %273
  %289 = load float, float* %288, align 4, !noalias !26
  %290 = insertelement <4 x float> undef, float %289, i32 0
  %291 = shufflevector <4 x float> %290, <4 x float> undef, <4 x i32> zeroinitializer
  %292 = fmul <4 x float> %259, %291
  %293 = fmul <4 x float> %261, %286
  %294 = fsub <4 x float> %292, %293
  %295 = fmul <4 x float> %261, %291
  %296 = fadd <4 x float> %287, %295
  %297 = getelementptr inbounds float, float* %35, i64 %267
  %298 = load float, float* %297, align 4, !noalias !26
  %299 = insertelement <4 x float> undef, float %298, i32 0
  %300 = shufflevector <4 x float> %299, <4 x float> undef, <4 x i32> zeroinitializer
  %301 = fmul <4 x float> %260, %300
  %302 = getelementptr inbounds float, float* %35, i64 %273
  %303 = load float, float* %302, align 4, !noalias !26
  %304 = insertelement <4 x float> undef, float %303, i32 0
  %305 = shufflevector <4 x float> %304, <4 x float> undef, <4 x i32> zeroinitializer
  %306 = fmul <4 x float> %260, %305
  %307 = fmul <4 x float> %262, %300
  %308 = fsub <4 x float> %306, %307
  %309 = fmul <4 x float> %262, %305
  %310 = fadd <4 x float> %301, %309
  %311 = getelementptr inbounds float, float* %37, i64 %267
  %312 = load float, float* %311, align 4, !noalias !26
  %313 = insertelement <4 x float> undef, float %312, i32 0
  %314 = shufflevector <4 x float> %313, <4 x float> undef, <4 x i32> zeroinitializer
  %315 = fmul <4 x float> %263, %314
  %316 = getelementptr inbounds float, float* %37, i64 %273
  %317 = load float, float* %316, align 4, !noalias !26
  %318 = insertelement <4 x float> undef, float %317, i32 0
  %319 = shufflevector <4 x float> %318, <4 x float> undef, <4 x i32> zeroinitializer
  %320 = fmul <4 x float> %263, %319
  %321 = fmul <4 x float> %265, %314
  %322 = fsub <4 x float> %320, %321
  %323 = fmul <4 x float> %265, %319
  %324 = fadd <4 x float> %315, %323
  %325 = add nsw i64 %178, %165
  %326 = add nsw i64 %325, -1
  %327 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %326
  store <4 x float> %280, <4 x float>* %327, align 16, !alias.scope !24, !noalias !21
  %328 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %325
  store <4 x float> %282, <4 x float>* %328, align 16, !alias.scope !24, !noalias !21
  %329 = add nsw i64 %178, %167
  %330 = add nsw i64 %329, -1
  %331 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %330
  store <4 x float> %294, <4 x float>* %331, align 16, !alias.scope !24, !noalias !21
  %332 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %329
  store <4 x float> %296, <4 x float>* %332, align 16, !alias.scope !24, !noalias !21
  %333 = add nsw i64 %178, %169
  %334 = add nsw i64 %333, -1
  %335 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %334
  store <4 x float> %308, <4 x float>* %335, align 16, !alias.scope !24, !noalias !21
  %336 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %333
  store <4 x float> %310, <4 x float>* %336, align 16, !alias.scope !24, !noalias !21
  %337 = add nsw i64 %178, %171
  %338 = add nsw i64 %337, -1
  %339 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %338
  store <4 x float> %322, <4 x float>* %339, align 16, !alias.scope !24, !noalias !21
  %340 = getelementptr inbounds <4 x float>, <4 x float>* %42, i64 %337
  store <4 x float> %324, <4 x float>* %340, align 16, !alias.scope !24, !noalias !21
  %341 = add nuw nsw i64 %178, 2
  %342 = icmp sgt i64 %341, %145
  br i1 %342, label %343, label %177

343:                                              ; preds = %177, %152
  %344 = add nuw nsw i64 %153, 1
  %345 = icmp eq i64 %344, %151
  br i1 %345, label %509, label %152

346:                                              ; preds = %15
  %347 = add nsw i32 %25, %20
  %348 = add nsw i32 %347, %25
  %349 = sext i32 %20 to i64
  %350 = getelementptr inbounds float, float* %4, i64 %349
  %351 = sext i32 %347 to i64
  %352 = getelementptr inbounds float, float* %4, i64 %351
  %353 = sext i32 %348 to i64
  %354 = getelementptr inbounds float, float* %4, i64 %353
  tail call fastcc void @radb4_ps(i32 %25, i32 %19, <4 x float>* %17, <4 x float>* %18, float* %350, float* %352, float* %354)
  br label %509

355:                                              ; preds = %15
  %356 = add nsw i32 %25, %20
  %357 = sext i32 %20 to i64
  %358 = getelementptr inbounds float, float* %4, i64 %357
  %359 = sext i32 %356 to i64
  %360 = getelementptr inbounds float, float* %4, i64 %359
  %361 = icmp sgt i32 %19, 0
  br i1 %361, label %362, label %509

362:                                              ; preds = %355
  %363 = add nsw i32 %25, -1
  %364 = shl i32 %19, 1
  %365 = sext i32 %364 to i64
  %366 = sext i32 %25 to i64
  %367 = sext i32 %19 to i64
  %368 = sext i32 %363 to i64
  %369 = zext i32 %19 to i64
  br label %370

370:                                              ; preds = %370, %362
  %371 = phi i64 [ 0, %362 ], [ %400, %370 ]
  %372 = mul nuw nsw i64 %371, 3
  %373 = add nuw nsw i64 %372, 1
  %374 = mul nsw i64 %373, %366
  %375 = add nsw i64 %374, %368
  %376 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %375
  %377 = load <4 x float>, <4 x float>* %376, align 16, !alias.scope !27, !noalias !30
  %378 = fadd <4 x float> %377, %377
  %379 = fmul <4 x float> %378, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %380 = mul nsw i64 %372, %366
  %381 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %380
  %382 = load <4 x float>, <4 x float>* %381, align 16, !alias.scope !27, !noalias !30
  %383 = fadd <4 x float> %382, %379
  %384 = fadd <4 x float> %382, %378
  %385 = mul nsw i64 %371, %366
  %386 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %385
  store <4 x float> %384, <4 x float>* %386, align 16, !alias.scope !30, !noalias !27
  %387 = add nuw nsw i64 %372, 2
  %388 = mul nsw i64 %387, %366
  %389 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %388
  %390 = load <4 x float>, <4 x float>* %389, align 16, !alias.scope !27, !noalias !30
  %391 = fmul <4 x float> %390, <float 0x3FFBB67AE0000000, float 0x3FFBB67AE0000000, float 0x3FFBB67AE0000000, float 0x3FFBB67AE0000000>
  %392 = fsub <4 x float> %383, %391
  %393 = add nsw i64 %371, %367
  %394 = mul nsw i64 %393, %366
  %395 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %394
  store <4 x float> %392, <4 x float>* %395, align 16, !alias.scope !30, !noalias !27
  %396 = fadd <4 x float> %383, %391
  %397 = add nsw i64 %371, %365
  %398 = mul nsw i64 %397, %366
  %399 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %398
  store <4 x float> %396, <4 x float>* %399, align 16, !alias.scope !30, !noalias !27
  %400 = add nuw nsw i64 %371, 1
  %401 = icmp eq i64 %400, %369
  br i1 %401, label %402, label %370

402:                                              ; preds = %370
  %403 = icmp eq i32 %25, 1
  br i1 %403, label %509, label %404

404:                                              ; preds = %402
  %405 = icmp sgt i32 %25, 2
  br label %406

406:                                              ; preds = %503, %404
  %407 = phi i64 [ 0, %404 ], [ %504, %503 ]
  br i1 %405, label %408, label %503

408:                                              ; preds = %406
  %409 = mul nuw nsw i64 %407, 3
  %410 = add nuw nsw i64 %409, 2
  %411 = mul nsw i64 %410, %366
  %412 = add nuw nsw i64 %409, 1
  %413 = mul nsw i64 %412, %366
  %414 = mul nsw i64 %409, %366
  %415 = mul nsw i64 %407, %366
  %416 = add nsw i64 %407, %367
  %417 = mul nsw i64 %416, %366
  %418 = add nsw i64 %407, %365
  %419 = mul nsw i64 %418, %366
  br label %420

420:                                              ; preds = %420, %408
  %421 = phi i64 [ 2, %408 ], [ %501, %420 ]
  %422 = sub nsw i64 %366, %421
  %423 = add nsw i64 %421, -1
  %424 = add nsw i64 %423, %411
  %425 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %424
  %426 = load <4 x float>, <4 x float>* %425, align 16, !alias.scope !27, !noalias !30
  %427 = add i64 %422, %413
  %428 = shl i64 %427, 32
  %429 = add i64 %428, -4294967296
  %430 = ashr exact i64 %429, 32
  %431 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %430
  %432 = load <4 x float>, <4 x float>* %431, align 16, !alias.scope !27, !noalias !30
  %433 = fadd <4 x float> %426, %432
  %434 = fmul <4 x float> %433, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %435 = add nsw i64 %423, %414
  %436 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %435
  %437 = load <4 x float>, <4 x float>* %436, align 16, !alias.scope !27, !noalias !30
  %438 = fadd <4 x float> %437, %434
  %439 = fadd <4 x float> %437, %433
  %440 = add nsw i64 %423, %415
  %441 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %440
  store <4 x float> %439, <4 x float>* %441, align 16, !alias.scope !30, !noalias !27
  %442 = add nsw i64 %421, %411
  %443 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %442
  %444 = load <4 x float>, <4 x float>* %443, align 16, !alias.scope !27, !noalias !30
  %445 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %427
  %446 = load <4 x float>, <4 x float>* %445, align 16, !alias.scope !27, !noalias !30
  %447 = fsub <4 x float> %444, %446
  %448 = fmul <4 x float> %447, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %449 = add nsw i64 %421, %414
  %450 = getelementptr inbounds <4 x float>, <4 x float>* %17, i64 %449
  %451 = load <4 x float>, <4 x float>* %450, align 16, !alias.scope !27, !noalias !30
  %452 = fadd <4 x float> %451, %448
  %453 = fadd <4 x float> %451, %447
  %454 = add nsw i64 %421, %415
  %455 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %454
  store <4 x float> %453, <4 x float>* %455, align 16, !alias.scope !30, !noalias !27
  %456 = fsub <4 x float> %426, %432
  %457 = fmul <4 x float> %456, <float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000>
  %458 = fadd <4 x float> %444, %446
  %459 = fmul <4 x float> %458, <float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000, float 0x3FEBB67AE0000000>
  %460 = fsub <4 x float> %438, %459
  %461 = fadd <4 x float> %438, %459
  %462 = fadd <4 x float> %457, %452
  %463 = fsub <4 x float> %452, %457
  %464 = getelementptr inbounds float, float* %358, i64 %423
  %465 = load float, float* %464, align 4, !noalias !32
  %466 = insertelement <4 x float> undef, float %465, i32 0
  %467 = shufflevector <4 x float> %466, <4 x float> undef, <4 x i32> zeroinitializer
  %468 = fmul <4 x float> %460, %467
  %469 = add nsw i64 %421, -2
  %470 = getelementptr inbounds float, float* %358, i64 %469
  %471 = load float, float* %470, align 4, !noalias !32
  %472 = insertelement <4 x float> undef, float %471, i32 0
  %473 = shufflevector <4 x float> %472, <4 x float> undef, <4 x i32> zeroinitializer
  %474 = fmul <4 x float> %460, %473
  %475 = fmul <4 x float> %462, %467
  %476 = fsub <4 x float> %474, %475
  %477 = fmul <4 x float> %462, %473
  %478 = fadd <4 x float> %468, %477
  %479 = add nsw i64 %423, %417
  %480 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %479
  store <4 x float> %476, <4 x float>* %480, align 16, !alias.scope !30, !noalias !27
  %481 = add nsw i64 %421, %417
  %482 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %481
  store <4 x float> %478, <4 x float>* %482, align 16, !alias.scope !30, !noalias !27
  %483 = getelementptr inbounds float, float* %360, i64 %423
  %484 = load float, float* %483, align 4, !noalias !32
  %485 = insertelement <4 x float> undef, float %484, i32 0
  %486 = shufflevector <4 x float> %485, <4 x float> undef, <4 x i32> zeroinitializer
  %487 = fmul <4 x float> %461, %486
  %488 = getelementptr inbounds float, float* %360, i64 %469
  %489 = load float, float* %488, align 4, !noalias !32
  %490 = insertelement <4 x float> undef, float %489, i32 0
  %491 = shufflevector <4 x float> %490, <4 x float> undef, <4 x i32> zeroinitializer
  %492 = fmul <4 x float> %461, %491
  %493 = fmul <4 x float> %463, %486
  %494 = fsub <4 x float> %492, %493
  %495 = fmul <4 x float> %463, %491
  %496 = fadd <4 x float> %487, %495
  %497 = add nsw i64 %423, %419
  %498 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %497
  store <4 x float> %494, <4 x float>* %498, align 16, !alias.scope !30, !noalias !27
  %499 = add nsw i64 %421, %419
  %500 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 %499
  store <4 x float> %496, <4 x float>* %500, align 16, !alias.scope !30, !noalias !27
  %501 = add nuw nsw i64 %421, 2
  %502 = icmp slt i64 %501, %366
  br i1 %502, label %420, label %503

503:                                              ; preds = %420, %406
  %504 = add nuw nsw i64 %407, 1
  %505 = icmp eq i64 %504, %369
  br i1 %505, label %509, label %406

506:                                              ; preds = %15
  %507 = sext i32 %20 to i64
  %508 = getelementptr inbounds float, float* %4, i64 %507
  tail call fastcc void @radb2_ps(i32 %25, i32 %19, <4 x float>* %17, <4 x float>* %18, float* %508)
  br label %509

509:                                              ; preds = %503, %343, %402, %355, %137, %135, %15, %506, %346
  %510 = add nsw i32 %23, -1
  %511 = mul nsw i32 %510, %25
  %512 = add nsw i32 %511, %20
  %513 = icmp eq <4 x float>* %18, %3
  %514 = select i1 %513, <4 x float>* %2, <4 x float>* %3
  %515 = select i1 %513, <4 x float>* %3, <4 x float>* %2
  %516 = icmp eq i64 %21, %14
  br i1 %516, label %517, label %15

517:                                              ; preds = %509, %6
  %518 = phi <4 x float>* [ %1, %6 ], [ %515, %509 ]
  ret <4 x float>* %518
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @pffft_zconvolve_accumulate(%struct.PFFFT_Setup* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float* nocapture, float) local_unnamed_addr #9 {
  %6 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = bitcast float* %1 to <4 x float>*
  %9 = bitcast float* %2 to <4 x float>*
  %10 = bitcast float* %3 to <4 x float>*
  %11 = insertelement <4 x float> undef, float %4, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = load float, float* %1, align 16
  %14 = getelementptr inbounds float, float* %1, i64 4
  %15 = load float, float* %14, align 16
  %16 = load float, float* %2, align 16
  %17 = getelementptr inbounds float, float* %2, i64 4
  %18 = load float, float* %17, align 16
  %19 = load float, float* %3, align 16
  %20 = getelementptr inbounds float, float* %3, i64 4
  %21 = load float, float* %20, align 16
  %22 = icmp sgt i32 %7, 0
  br i1 %22, label %23, label %77

23:                                               ; preds = %5
  %24 = sext i32 %7 to i64
  br label %25

25:                                               ; preds = %23, %25
  %26 = phi i64 [ 0, %23 ], [ %75, %25 ]
  %27 = shl nuw nsw i64 %26, 1
  %28 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 %27
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = or i64 %27, 1
  %31 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 %30
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %27
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %30
  %36 = load <4 x float>, <4 x float>* %35, align 16
  %37 = fmul <4 x float> %29, %36
  %38 = fmul <4 x float> %29, %34
  %39 = fmul <4 x float> %32, %36
  %40 = fsub <4 x float> %38, %39
  %41 = fmul <4 x float> %32, %34
  %42 = fadd <4 x float> %41, %37
  %43 = fmul <4 x float> %12, %40
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %27
  %45 = load <4 x float>, <4 x float>* %44, align 16
  %46 = fadd <4 x float> %45, %43
  store <4 x float> %46, <4 x float>* %44, align 16
  %47 = fmul <4 x float> %12, %42
  %48 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %30
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = fadd <4 x float> %47, %49
  store <4 x float> %50, <4 x float>* %48, align 16
  %51 = or i64 %27, 2
  %52 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 %51
  %53 = load <4 x float>, <4 x float>* %52, align 16
  %54 = or i64 %27, 3
  %55 = getelementptr inbounds <4 x float>, <4 x float>* %8, i64 %54
  %56 = load <4 x float>, <4 x float>* %55, align 16
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %51
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = getelementptr inbounds <4 x float>, <4 x float>* %9, i64 %54
  %60 = load <4 x float>, <4 x float>* %59, align 16
  %61 = fmul <4 x float> %53, %60
  %62 = fmul <4 x float> %53, %58
  %63 = fmul <4 x float> %56, %60
  %64 = fsub <4 x float> %62, %63
  %65 = fmul <4 x float> %56, %58
  %66 = fadd <4 x float> %65, %61
  %67 = fmul <4 x float> %12, %64
  %68 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %51
  %69 = load <4 x float>, <4 x float>* %68, align 16
  %70 = fadd <4 x float> %69, %67
  store <4 x float> %70, <4 x float>* %68, align 16
  %71 = fmul <4 x float> %12, %66
  %72 = getelementptr inbounds <4 x float>, <4 x float>* %10, i64 %54
  %73 = load <4 x float>, <4 x float>* %72, align 16
  %74 = fadd <4 x float> %71, %73
  store <4 x float> %74, <4 x float>* %72, align 16
  %75 = add nuw nsw i64 %26, 2
  %76 = icmp slt i64 %75, %24
  br i1 %76, label %25, label %77

77:                                               ; preds = %25, %5
  %78 = getelementptr inbounds %struct.PFFFT_Setup, %struct.PFFFT_Setup* %0, i64 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %88

81:                                               ; preds = %77
  %82 = fmul float %13, %16
  %83 = fmul float %82, %4
  %84 = fadd float %19, %83
  store float %84, float* %3, align 16
  %85 = fmul float %15, %18
  %86 = fmul float %85, %4
  %87 = fadd float %21, %86
  store float %87, float* %20, align 16
  br label %88

88:                                               ; preds = %81, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @pffft_transform(%struct.PFFFT_Setup* nocapture readonly, float* readonly, float*, float*, i32) local_unnamed_addr #4 {
  %6 = bitcast float* %3 to <4 x float>*
  tail call void @pffft_transform_internal(%struct.PFFFT_Setup* %0, float* %1, float* %2, <4 x float>* %6, i32 %4, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @pffft_transform_ordered(%struct.PFFFT_Setup* nocapture readonly, float* readonly, float*, float*, i32) local_unnamed_addr #4 {
  %6 = bitcast float* %3 to <4 x float>*
  tail call void @pffft_transform_internal(%struct.PFFFT_Setup* %0, float* %1, float* %2, <4 x float>* %6, i32 %4, i32 1)
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @radf4_ps(i32, i32, <4 x float>* noalias readonly, <4 x float>* noalias nocapture, float* noalias nocapture readonly, float* noalias nocapture readonly, float* noalias nocapture readonly) unnamed_addr #8 {
  %8 = mul nsw i32 %1, %0
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %9
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %7
  %13 = shl nsw i32 %8, 1
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %8, 3
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %0, 1
  %18 = add nsw i32 %17, -1
  %19 = sext i32 %18 to i64
  %20 = sext i32 %17 to i64
  %21 = shl nsw i32 %0, 2
  %22 = add nsw i32 %21, -1
  %23 = sext i32 %22 to i64
  %24 = sext i32 %0 to i64
  %25 = sext i32 %21 to i64
  br label %26

26:                                               ; preds = %12, %26
  %27 = phi <4 x float>* [ %2, %12 ], [ %45, %26 ]
  %28 = phi <4 x float>* [ %3, %12 ], [ %46, %26 ]
  %29 = load <4 x float>, <4 x float>* %27, align 16
  %30 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %9
  %31 = load <4 x float>, <4 x float>* %30, align 16
  %32 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %14
  %33 = load <4 x float>, <4 x float>* %32, align 16
  %34 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %16
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = fadd <4 x float> %31, %35
  %37 = fadd <4 x float> %29, %33
  %38 = fsub <4 x float> %29, %33
  %39 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %19
  store <4 x float> %38, <4 x float>* %39, align 16
  %40 = fsub <4 x float> %35, %31
  %41 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %20
  store <4 x float> %40, <4 x float>* %41, align 16
  %42 = fadd <4 x float> %37, %36
  store <4 x float> %42, <4 x float>* %28, align 16
  %43 = fsub <4 x float> %37, %36
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %23
  store <4 x float> %43, <4 x float>* %44, align 16
  %45 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %24
  %46 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %25
  %47 = icmp ult <4 x float>* %45, %10
  br i1 %47, label %26, label %48

48:                                               ; preds = %26, %7
  %49 = icmp slt i32 %0, 2
  br i1 %49, label %237, label %50

50:                                               ; preds = %48
  %51 = icmp eq i32 %0, 2
  br i1 %51, label %187, label %52

52:                                               ; preds = %50
  br i1 %11, label %53, label %237

53:                                               ; preds = %52
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 1
  %55 = add nuw nsw i32 %8, 1
  %56 = sext i32 %55 to i64
  %57 = shl nsw i32 %8, 1
  %58 = sext i32 %57 to i64
  %59 = or i32 %57, 1
  %60 = sext i32 %59 to i64
  %61 = mul nsw i32 %8, 3
  %62 = sext i32 %61 to i64
  %63 = add nsw i32 %61, 1
  %64 = sext i32 %63 to i64
  %65 = mul nsw i32 %0, 3
  %66 = shl nsw i32 %0, 1
  %67 = sext i32 %66 to i64
  %68 = sext i32 %0 to i64
  %69 = sext i32 %65 to i64
  br label %70

70:                                               ; preds = %53, %180
  %71 = phi i64 [ 0, %53 ], [ %181, %180 ]
  %72 = getelementptr inbounds <4 x float>, <4 x float>* %54, i64 %71
  %73 = trunc i64 %71 to i32
  %74 = shl nsw i32 %73, 2
  %75 = sext i32 %74 to i64
  br label %76

76:                                               ; preds = %70, %76
  %77 = phi i64 [ 2, %70 ], [ %177, %76 ]
  %78 = phi <4 x float>* [ %72, %70 ], [ %178, %76 ]
  %79 = sub nsw i64 %68, %77
  %80 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %9
  %81 = load <4 x float>, <4 x float>* %80, align 16
  %82 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %56
  %83 = load <4 x float>, <4 x float>* %82, align 16
  %84 = add nsw i64 %77, -2
  %85 = getelementptr inbounds float, float* %4, i64 %84
  %86 = load float, float* %85, align 4
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  %89 = add nsw i64 %77, -1
  %90 = getelementptr inbounds float, float* %4, i64 %89
  %91 = load float, float* %90, align 4
  %92 = insertelement <4 x float> undef, float %91, i32 0
  %93 = shufflevector <4 x float> %92, <4 x float> undef, <4 x i32> zeroinitializer
  %94 = fmul <4 x float> %81, %93
  %95 = fmul <4 x float> %81, %88
  %96 = fmul <4 x float> %83, %93
  %97 = fadd <4 x float> %95, %96
  %98 = fmul <4 x float> %83, %88
  %99 = fsub <4 x float> %98, %94
  %100 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %58
  %101 = load <4 x float>, <4 x float>* %100, align 16
  %102 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %60
  %103 = load <4 x float>, <4 x float>* %102, align 16
  %104 = getelementptr inbounds float, float* %5, i64 %84
  %105 = load float, float* %104, align 4
  %106 = insertelement <4 x float> undef, float %105, i32 0
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> zeroinitializer
  %108 = getelementptr inbounds float, float* %5, i64 %89
  %109 = load float, float* %108, align 4
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <4 x i32> zeroinitializer
  %112 = fmul <4 x float> %101, %111
  %113 = fmul <4 x float> %101, %107
  %114 = fmul <4 x float> %103, %111
  %115 = fadd <4 x float> %113, %114
  %116 = fmul <4 x float> %103, %107
  %117 = fsub <4 x float> %116, %112
  %118 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %62
  %119 = load <4 x float>, <4 x float>* %118, align 16
  %120 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 %64
  %121 = load <4 x float>, <4 x float>* %120, align 16
  %122 = getelementptr inbounds float, float* %6, i64 %84
  %123 = load float, float* %122, align 4
  %124 = insertelement <4 x float> undef, float %123, i32 0
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> zeroinitializer
  %126 = getelementptr inbounds float, float* %6, i64 %89
  %127 = load float, float* %126, align 4
  %128 = insertelement <4 x float> undef, float %127, i32 0
  %129 = shufflevector <4 x float> %128, <4 x float> undef, <4 x i32> zeroinitializer
  %130 = fmul <4 x float> %119, %129
  %131 = fmul <4 x float> %119, %125
  %132 = fmul <4 x float> %121, %129
  %133 = fadd <4 x float> %131, %132
  %134 = fmul <4 x float> %121, %125
  %135 = fsub <4 x float> %134, %130
  %136 = fadd <4 x float> %97, %133
  %137 = fsub <4 x float> %133, %97
  %138 = load <4 x float>, <4 x float>* %78, align 16
  %139 = fadd <4 x float> %115, %138
  %140 = fsub <4 x float> %138, %115
  %141 = fadd <4 x float> %139, %136
  %142 = add nsw i64 %89, %75
  %143 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %142
  store <4 x float> %141, <4 x float>* %143, align 16
  %144 = fsub <4 x float> %139, %136
  %145 = trunc i64 %79 to i32
  %146 = add i32 %74, %145
  %147 = add i32 %146, -1
  %148 = add nsw i32 %147, %65
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %149
  store <4 x float> %144, <4 x float>* %150, align 16
  %151 = fadd <4 x float> %99, %135
  %152 = fsub <4 x float> %99, %135
  %153 = fadd <4 x float> %140, %152
  %154 = add nsw i64 %142, %67
  %155 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %154
  store <4 x float> %153, <4 x float>* %155, align 16
  %156 = fsub <4 x float> %140, %152
  %157 = add nsw i32 %147, %0
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %158
  store <4 x float> %156, <4 x float>* %159, align 16
  %160 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 1
  %161 = load <4 x float>, <4 x float>* %160, align 16
  %162 = fadd <4 x float> %117, %161
  %163 = fsub <4 x float> %161, %117
  %164 = fadd <4 x float> %151, %162
  %165 = add nsw i64 %77, %75
  %166 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %165
  store <4 x float> %164, <4 x float>* %166, align 16
  %167 = fsub <4 x float> %151, %162
  %168 = add nsw i64 %79, %75
  %169 = add nsw i64 %168, %69
  %170 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %169
  store <4 x float> %167, <4 x float>* %170, align 16
  %171 = fadd <4 x float> %137, %163
  %172 = add nsw i64 %165, %67
  %173 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %172
  store <4 x float> %171, <4 x float>* %173, align 16
  %174 = fsub <4 x float> %137, %163
  %175 = add nsw i64 %168, %68
  %176 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %175
  store <4 x float> %174, <4 x float>* %176, align 16
  %177 = add nuw nsw i64 %77, 2
  %178 = getelementptr inbounds <4 x float>, <4 x float>* %78, i64 2
  %179 = icmp slt i64 %177, %68
  br i1 %179, label %76, label %180

180:                                              ; preds = %76
  %181 = add i64 %71, %68
  %182 = icmp slt i64 %181, %9
  br i1 %182, label %70, label %183

183:                                              ; preds = %180
  %184 = srem i32 %0, 2
  %185 = icmp ne i32 %184, 1
  %186 = and i1 %185, %11
  br i1 %186, label %188, label %237

187:                                              ; preds = %50
  br i1 %11, label %188, label %237

188:                                              ; preds = %183, %187
  %189 = add nsw i32 %0, -1
  %190 = mul nsw i32 %8, 3
  %191 = shl i32 %8, 1
  %192 = shl i32 %0, 1
  %193 = mul nsw i32 %0, 3
  %194 = sext i32 %0 to i64
  %195 = sext i32 %189 to i64
  %196 = sext i32 %190 to i64
  %197 = sext i32 %191 to i64
  br label %198

198:                                              ; preds = %188, %198
  %199 = phi i64 [ 0, %188 ], [ %234, %198 ]
  %200 = phi i32 [ 0, %188 ], [ %235, %198 ]
  %201 = add nsw i64 %199, %195
  %202 = add nsw i64 %201, %9
  %203 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %202
  %204 = load <4 x float>, <4 x float>* %203, align 16
  %205 = add nsw i64 %201, %196
  %206 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %205
  %207 = load <4 x float>, <4 x float>* %206, align 16
  %208 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %201
  %209 = load <4 x float>, <4 x float>* %208, align 16
  %210 = add nsw i64 %201, %197
  %211 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %210
  %212 = load <4 x float>, <4 x float>* %211, align 16
  %213 = fadd <4 x float> %204, %207
  %214 = fmul <4 x float> %213, <float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000>
  %215 = fsub <4 x float> %207, %204
  %216 = fmul <4 x float> %215, <float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000>
  %217 = fadd <4 x float> %209, %216
  %218 = shl nsw i32 %200, 2
  %219 = add nsw i32 %218, %189
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %220
  store <4 x float> %217, <4 x float>* %221, align 16
  %222 = fsub <4 x float> %209, %216
  %223 = add nsw i32 %219, %192
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %224
  store <4 x float> %222, <4 x float>* %225, align 16
  %226 = fsub <4 x float> %214, %212
  %227 = add nsw i32 %218, %0
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %228
  store <4 x float> %226, <4 x float>* %229, align 16
  %230 = fadd <4 x float> %214, %212
  %231 = add nsw i32 %218, %193
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %232
  store <4 x float> %230, <4 x float>* %233, align 16
  %234 = add i64 %199, %194
  %235 = add nsw i32 %200, %0
  %236 = icmp slt i64 %234, %9
  br i1 %236, label %198, label %237

237:                                              ; preds = %198, %52, %183, %187, %48
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @radf2_ps(i32, i32, <4 x float>* noalias nocapture readonly, <4 x float>* noalias nocapture, float* nocapture readonly) unnamed_addr #8 {
  %6 = mul nsw i32 %1, %0
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %32

8:                                                ; preds = %5
  %9 = sext i32 %0 to i64
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %8, %11
  %12 = phi i64 [ 0, %8 ], [ %24, %11 ]
  %13 = phi i32 [ 0, %8 ], [ %25, %11 ]
  %14 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %12
  %15 = load <4 x float>, <4 x float>* %14, align 16
  %16 = add nsw i64 %12, %10
  %17 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %16
  %18 = load <4 x float>, <4 x float>* %17, align 16
  %19 = fadd <4 x float> %15, %18
  %20 = shl nsw i32 %13, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %21
  store <4 x float> %19, <4 x float>* %22, align 16
  %23 = fsub <4 x float> %15, %18
  %24 = add i64 %12, %9
  %25 = add nsw i32 %13, %0
  %26 = trunc i64 %24 to i32
  %27 = shl i32 %26, 1
  %28 = add nsw i32 %27, -1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %29
  store <4 x float> %23, <4 x float>* %30, align 16
  %31 = icmp slt i64 %24, %10
  br i1 %31, label %11, label %32

32:                                               ; preds = %11, %5
  %33 = icmp slt i32 %0, 2
  br i1 %33, label %125, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %0, 2
  br i1 %35, label %99, label %36

36:                                               ; preds = %34
  br i1 %7, label %37, label %125

37:                                               ; preds = %36
  %38 = sext i32 %6 to i64
  %39 = sext i32 %0 to i64
  br label %40

40:                                               ; preds = %37, %93
  %41 = phi i64 [ 0, %37 ], [ %44, %93 ]
  %42 = trunc i64 %41 to i32
  %43 = shl nsw i32 %42, 1
  %44 = add i64 %41, %39
  %45 = trunc i64 %44 to i32
  %46 = shl nsw i32 %45, 1
  %47 = sext i32 %43 to i64
  %48 = sext i32 %46 to i64
  br label %49

49:                                               ; preds = %40, %49
  %50 = phi i64 [ 2, %40 ], [ %91, %49 ]
  %51 = add nsw i64 %50, -1
  %52 = add nsw i64 %51, %41
  %53 = add nsw i64 %52, %38
  %54 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %53
  %55 = load <4 x float>, <4 x float>* %54, align 16
  %56 = add nsw i64 %50, %41
  %57 = add nsw i64 %56, %38
  %58 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %57
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %52
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %56
  %63 = load <4 x float>, <4 x float>* %62, align 16
  %64 = getelementptr inbounds float, float* %4, i64 %51
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %55, %67
  %69 = add nsw i64 %50, -2
  %70 = getelementptr inbounds float, float* %4, i64 %69
  %71 = load float, float* %70, align 4
  %72 = insertelement <4 x float> undef, float %71, i32 0
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> zeroinitializer
  %74 = fmul <4 x float> %55, %73
  %75 = fmul <4 x float> %59, %67
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %59, %73
  %78 = fsub <4 x float> %77, %68
  %79 = fadd <4 x float> %63, %78
  %80 = add nsw i64 %50, %47
  %81 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %80
  store <4 x float> %79, <4 x float>* %81, align 16
  %82 = fsub <4 x float> %78, %63
  %83 = sub nsw i64 %48, %50
  %84 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %83
  store <4 x float> %82, <4 x float>* %84, align 16
  %85 = fadd <4 x float> %61, %76
  %86 = add nsw i64 %51, %47
  %87 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %86
  store <4 x float> %85, <4 x float>* %87, align 16
  %88 = fsub <4 x float> %61, %76
  %89 = add nsw i64 %83, -1
  %90 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %89
  store <4 x float> %88, <4 x float>* %90, align 16
  %91 = add nuw nsw i64 %50, 2
  %92 = icmp slt i64 %91, %39
  br i1 %92, label %49, label %93

93:                                               ; preds = %49
  %94 = icmp slt i64 %44, %38
  br i1 %94, label %40, label %95

95:                                               ; preds = %93
  %96 = srem i32 %0, 2
  %97 = icmp ne i32 %96, 1
  %98 = and i1 %97, %7
  br i1 %98, label %100, label %125

99:                                               ; preds = %34
  br i1 %7, label %100, label %125

100:                                              ; preds = %99, %95
  %101 = sext i32 %0 to i64
  %102 = sext i32 %6 to i64
  br label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ 0, %100 ], [ %106, %103 ]
  %105 = phi i32 [ 0, %100 ], [ %118, %103 ]
  %106 = add nsw i64 %104, %101
  %107 = add nsw i64 %106, -1
  %108 = trunc i64 %107 to i32
  %109 = add i32 %6, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %110
  %112 = load <4 x float>, <4 x float>* %111, align 16
  %113 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %112
  %114 = shl nsw i32 %105, 1
  %115 = add nsw i32 %114, %0
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %116
  store <4 x float> %113, <4 x float>* %117, align 16
  %118 = add nsw i32 %105, %0
  %119 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %107
  %120 = load <4 x float>, <4 x float>* %119, align 16
  %121 = add nsw i32 %115, -1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %122
  store <4 x float> %120, <4 x float>* %123, align 16
  %124 = icmp slt i64 %106, %102
  br i1 %124, label %103, label %125

125:                                              ; preds = %103, %36, %95, %99, %32
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @radb4_ps(i32, i32, <4 x float>* noalias nocapture readonly, <4 x float>* noalias, float* noalias nocapture readonly, float* noalias nocapture readonly, float* noalias nocapture readonly) unnamed_addr #8 {
  %8 = mul nsw i32 %1, %0
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %9
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %50

12:                                               ; preds = %7
  %13 = shl nsw i32 %0, 2
  %14 = add nsw i32 %13, -1
  %15 = sext i32 %14 to i64
  %16 = shl nsw i32 %0, 1
  %17 = sext i32 %16 to i64
  %18 = add nsw i32 %16, -1
  %19 = sext i32 %18 to i64
  %20 = shl nsw i32 %8, 1
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %8, 3
  %23 = sext i32 %22 to i64
  %24 = sext i32 %13 to i64
  %25 = sext i32 %0 to i64
  br label %26

26:                                               ; preds = %12, %26
  %27 = phi <4 x float>* [ %2, %12 ], [ %47, %26 ]
  %28 = phi <4 x float>* [ %3, %12 ], [ %48, %26 ]
  %29 = load <4 x float>, <4 x float>* %27, align 16
  %30 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %15
  %31 = load <4 x float>, <4 x float>* %30, align 16
  %32 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %17
  %33 = load <4 x float>, <4 x float>* %32, align 16
  %34 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %19
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = fmul <4 x float> %35, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %37 = fadd <4 x float> %29, %31
  %38 = fsub <4 x float> %29, %31
  %39 = fmul <4 x float> %33, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %40 = fadd <4 x float> %37, %36
  store <4 x float> %40, <4 x float>* %28, align 16
  %41 = fsub <4 x float> %37, %36
  %42 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %21
  store <4 x float> %41, <4 x float>* %42, align 16
  %43 = fsub <4 x float> %38, %39
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %9
  store <4 x float> %43, <4 x float>* %44, align 16
  %45 = fadd <4 x float> %38, %39
  %46 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %23
  store <4 x float> %45, <4 x float>* %46, align 16
  %47 = getelementptr inbounds <4 x float>, <4 x float>* %27, i64 %24
  %48 = getelementptr inbounds <4 x float>, <4 x float>* %28, i64 %25
  %49 = icmp ult <4 x float>* %48, %10
  br i1 %49, label %26, label %50

50:                                               ; preds = %26, %7
  %51 = icmp slt i32 %0, 2
  br i1 %51, label %233, label %52

52:                                               ; preds = %50
  %53 = icmp eq i32 %0, 2
  br i1 %53, label %181, label %54

54:                                               ; preds = %52
  br i1 %11, label %55, label %233

55:                                               ; preds = %54
  %56 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 -1
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 1
  %58 = shl nsw i32 %0, 2
  %59 = shl nsw i32 %0, 1
  %60 = mul nsw i32 %8, 3
  %61 = sext i32 %60 to i64
  %62 = sub nsw i64 0, %61
  %63 = sext i32 %59 to i64
  %64 = sext i32 %58 to i64
  %65 = sext i32 %0 to i64
  br label %66

66:                                               ; preds = %55, %174
  %67 = phi i64 [ 0, %55 ], [ %175, %174 ]
  %68 = trunc i64 %67 to i32
  %69 = shl nsw i32 %68, 2
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds <4 x float>, <4 x float>* %56, i64 %70
  %72 = getelementptr inbounds <4 x float>, <4 x float>* %57, i64 %67
  br label %73

73:                                               ; preds = %66, %73
  %74 = phi i64 [ 2, %66 ], [ %172, %73 ]
  %75 = phi <4 x float>* [ %72, %66 ], [ %171, %73 ]
  %76 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %74
  %77 = load <4 x float>, <4 x float>* %76, align 16
  %78 = sub nsw i64 %64, %74
  %79 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %78
  %80 = load <4 x float>, <4 x float>* %79, align 16
  %81 = fsub <4 x float> %77, %80
  %82 = fadd <4 x float> %77, %80
  %83 = add nsw i64 %74, %63
  %84 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %83
  %85 = load <4 x float>, <4 x float>* %84, align 16
  %86 = sub nsw i64 %63, %74
  %87 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %86
  %88 = load <4 x float>, <4 x float>* %87, align 16
  %89 = fsub <4 x float> %85, %88
  %90 = fadd <4 x float> %85, %88
  %91 = fadd <4 x float> %82, %90
  store <4 x float> %91, <4 x float>* %75, align 16
  %92 = fsub <4 x float> %82, %90
  %93 = or i64 %83, 1
  %94 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %93
  %95 = load <4 x float>, <4 x float>* %94, align 16
  %96 = shl i64 %86, 32
  %97 = ashr exact i64 %96, 32
  %98 = or i64 %97, 1
  %99 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %98
  %100 = load <4 x float>, <4 x float>* %99, align 16
  %101 = fsub <4 x float> %95, %100
  %102 = fadd <4 x float> %95, %100
  %103 = fsub <4 x float> %81, %102
  %104 = fadd <4 x float> %81, %102
  %105 = or i64 %74, 1
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %105
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = shl i64 %78, 32
  %109 = ashr exact i64 %108, 32
  %110 = or i64 %109, 1
  %111 = getelementptr inbounds <4 x float>, <4 x float>* %71, i64 %110
  %112 = load <4 x float>, <4 x float>* %111, align 16
  %113 = fadd <4 x float> %107, %112
  %114 = fsub <4 x float> %107, %112
  %115 = fadd <4 x float> %101, %114
  %116 = getelementptr inbounds <4 x float>, <4 x float>* %75, i64 1
  store <4 x float> %115, <4 x float>* %116, align 16
  %117 = getelementptr inbounds <4 x float>, <4 x float>* %75, i64 %9
  %118 = fsub <4 x float> %114, %101
  %119 = fadd <4 x float> %89, %113
  %120 = fsub <4 x float> %113, %89
  %121 = add nsw i64 %74, -1
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4
  %124 = insertelement <4 x float> undef, float %123, i32 0
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> zeroinitializer
  %126 = fmul <4 x float> %103, %125
  %127 = add nsw i64 %74, -2
  %128 = getelementptr inbounds float, float* %4, i64 %127
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = fmul <4 x float> %103, %131
  %133 = fmul <4 x float> %119, %125
  %134 = fsub <4 x float> %132, %133
  %135 = fmul <4 x float> %119, %131
  %136 = fadd <4 x float> %126, %135
  store <4 x float> %134, <4 x float>* %117, align 16
  %137 = getelementptr inbounds <4 x float>, <4 x float>* %117, i64 1
  store <4 x float> %136, <4 x float>* %137, align 16
  %138 = getelementptr inbounds <4 x float>, <4 x float>* %117, i64 %9
  %139 = getelementptr inbounds float, float* %5, i64 %121
  %140 = load float, float* %139, align 4
  %141 = insertelement <4 x float> undef, float %140, i32 0
  %142 = shufflevector <4 x float> %141, <4 x float> undef, <4 x i32> zeroinitializer
  %143 = fmul <4 x float> %92, %142
  %144 = getelementptr inbounds float, float* %5, i64 %127
  %145 = load float, float* %144, align 4
  %146 = insertelement <4 x float> undef, float %145, i32 0
  %147 = shufflevector <4 x float> %146, <4 x float> undef, <4 x i32> zeroinitializer
  %148 = fmul <4 x float> %92, %147
  %149 = fmul <4 x float> %118, %142
  %150 = fsub <4 x float> %148, %149
  %151 = fmul <4 x float> %118, %147
  %152 = fadd <4 x float> %143, %151
  store <4 x float> %150, <4 x float>* %138, align 16
  %153 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 1
  store <4 x float> %152, <4 x float>* %153, align 16
  %154 = getelementptr inbounds <4 x float>, <4 x float>* %138, i64 %9
  %155 = getelementptr inbounds float, float* %6, i64 %121
  %156 = load float, float* %155, align 4
  %157 = insertelement <4 x float> undef, float %156, i32 0
  %158 = shufflevector <4 x float> %157, <4 x float> undef, <4 x i32> zeroinitializer
  %159 = fmul <4 x float> %104, %158
  %160 = getelementptr inbounds float, float* %6, i64 %127
  %161 = load float, float* %160, align 4
  %162 = insertelement <4 x float> undef, float %161, i32 0
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> zeroinitializer
  %164 = fmul <4 x float> %104, %163
  %165 = fmul <4 x float> %120, %158
  %166 = fsub <4 x float> %164, %165
  %167 = fmul <4 x float> %120, %163
  %168 = fadd <4 x float> %159, %167
  store <4 x float> %166, <4 x float>* %154, align 16
  %169 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 1
  store <4 x float> %168, <4 x float>* %169, align 16
  %170 = getelementptr inbounds <4 x float>, <4 x float>* %154, i64 2
  %171 = getelementptr inbounds <4 x float>, <4 x float>* %170, i64 %62
  %172 = add nuw nsw i64 %74, 2
  %173 = icmp slt i64 %172, %65
  br i1 %173, label %73, label %174

174:                                              ; preds = %73
  %175 = add i64 %67, %65
  %176 = icmp slt i64 %175, %9
  br i1 %176, label %66, label %177

177:                                              ; preds = %174
  %178 = srem i32 %0, 2
  %179 = icmp ne i32 %178, 1
  %180 = and i1 %179, %11
  br i1 %180, label %182, label %233

181:                                              ; preds = %52
  br i1 %11, label %182, label %233

182:                                              ; preds = %177, %181
  %183 = shl nsw i32 %0, 1
  %184 = shl i32 %8, 1
  %185 = mul nsw i32 %8, 3
  %186 = sext i32 %0 to i64
  br label %187

187:                                              ; preds = %182, %187
  %188 = phi i64 [ 0, %182 ], [ %212, %187 ]
  %189 = phi i32 [ 0, %182 ], [ %231, %187 ]
  %190 = shl nsw i32 %189, 2
  %191 = add nsw i32 %190, %0
  %192 = add nsw i32 %191, -1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %193
  %195 = load <4 x float>, <4 x float>* %194, align 16
  %196 = add nsw i32 %191, %183
  %197 = add nsw i32 %196, -1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %198
  %200 = load <4 x float>, <4 x float>* %199, align 16
  %201 = sext i32 %191 to i64
  %202 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %201
  %203 = load <4 x float>, <4 x float>* %202, align 16
  %204 = sext i32 %196 to i64
  %205 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %204
  %206 = load <4 x float>, <4 x float>* %205, align 16
  %207 = fsub <4 x float> %195, %200
  %208 = fadd <4 x float> %195, %200
  %209 = fadd <4 x float> %203, %206
  %210 = fsub <4 x float> %206, %203
  %211 = fadd <4 x float> %208, %208
  %212 = add nsw i64 %188, %186
  %213 = trunc i64 %212 to i32
  %214 = add i32 %213, -1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %215
  store <4 x float> %211, <4 x float>* %216, align 16
  %217 = fsub <4 x float> %209, %207
  %218 = fmul <4 x float> %217, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %219 = add nsw i32 %214, %8
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %220
  store <4 x float> %218, <4 x float>* %221, align 16
  %222 = fadd <4 x float> %210, %210
  %223 = add nsw i32 %184, %214
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %224
  store <4 x float> %222, <4 x float>* %225, align 16
  %226 = fadd <4 x float> %207, %209
  %227 = fmul <4 x float> %226, <float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000, float 0xBFF6A09E60000000>
  %228 = add nsw i32 %185, %214
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %229
  store <4 x float> %227, <4 x float>* %230, align 16
  %231 = add nsw i32 %189, %0
  %232 = icmp slt i64 %212, %9
  br i1 %232, label %187, label %233

233:                                              ; preds = %187, %54, %177, %181, %50
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @radb2_ps(i32, i32, <4 x float>* nocapture readonly, <4 x float>* nocapture, float* nocapture readonly) unnamed_addr #8 {
  %6 = mul nsw i32 %1, %0
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %32

8:                                                ; preds = %5
  %9 = sext i32 %0 to i64
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %8, %11
  %12 = phi i64 [ 0, %8 ], [ %18, %11 ]
  %13 = phi i32 [ 0, %8 ], [ %19, %11 ]
  %14 = shl nsw i32 %13, 1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %15
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = add i64 %12, %9
  %19 = add nsw i32 %13, %0
  %20 = trunc i64 %18 to i32
  %21 = shl i32 %20, 1
  %22 = add nsw i32 %21, -1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %23
  %25 = load <4 x float>, <4 x float>* %24, align 16
  %26 = fadd <4 x float> %17, %25
  %27 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %12
  store <4 x float> %26, <4 x float>* %27, align 16
  %28 = fsub <4 x float> %17, %25
  %29 = add nsw i64 %12, %10
  %30 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %29
  store <4 x float> %28, <4 x float>* %30, align 16
  %31 = icmp slt i64 %18, %10
  br i1 %31, label %11, label %32

32:                                               ; preds = %11, %5
  %33 = icmp slt i32 %0, 2
  br i1 %33, label %124, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %0, 2
  br i1 %35, label %99, label %36

36:                                               ; preds = %34
  br i1 %7, label %37, label %124

37:                                               ; preds = %36
  %38 = sext i32 %6 to i64
  %39 = sext i32 %0 to i64
  br label %40

40:                                               ; preds = %37, %93
  %41 = phi i64 [ 0, %37 ], [ %44, %93 ]
  %42 = trunc i64 %41 to i32
  %43 = shl nsw i32 %42, 1
  %44 = add i64 %41, %39
  %45 = trunc i64 %44 to i32
  %46 = shl nsw i32 %45, 1
  %47 = sext i32 %43 to i64
  %48 = sext i32 %46 to i64
  br label %49

49:                                               ; preds = %40, %49
  %50 = phi i64 [ 2, %40 ], [ %91, %49 ]
  %51 = add nsw i64 %50, -1
  %52 = add nsw i64 %51, %47
  %53 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %52
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = sub nsw i64 %48, %50
  %56 = add nsw i64 %55, -1
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %56
  %58 = load <4 x float>, <4 x float>* %57, align 16
  %59 = add nsw i64 %50, %47
  %60 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %59
  %61 = load <4 x float>, <4 x float>* %60, align 16
  %62 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %55
  %63 = load <4 x float>, <4 x float>* %62, align 16
  %64 = fadd <4 x float> %54, %58
  %65 = add nsw i64 %51, %41
  %66 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %65
  store <4 x float> %64, <4 x float>* %66, align 16
  %67 = fsub <4 x float> %54, %58
  %68 = fsub <4 x float> %61, %63
  %69 = add nsw i64 %50, %41
  %70 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %69
  store <4 x float> %68, <4 x float>* %70, align 16
  %71 = fadd <4 x float> %61, %63
  %72 = getelementptr inbounds float, float* %4, i64 %51
  %73 = load float, float* %72, align 4
  %74 = insertelement <4 x float> undef, float %73, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = fmul <4 x float> %67, %75
  %77 = add nsw i64 %50, -2
  %78 = getelementptr inbounds float, float* %4, i64 %77
  %79 = load float, float* %78, align 4
  %80 = insertelement <4 x float> undef, float %79, i32 0
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> zeroinitializer
  %82 = fmul <4 x float> %67, %81
  %83 = fmul <4 x float> %71, %75
  %84 = fsub <4 x float> %82, %83
  %85 = fmul <4 x float> %71, %81
  %86 = fadd <4 x float> %76, %85
  %87 = add nsw i64 %65, %38
  %88 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %87
  store <4 x float> %84, <4 x float>* %88, align 16
  %89 = add nsw i64 %69, %38
  %90 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %89
  store <4 x float> %86, <4 x float>* %90, align 16
  %91 = add nuw nsw i64 %50, 2
  %92 = icmp slt i64 %91, %39
  br i1 %92, label %49, label %93

93:                                               ; preds = %49
  %94 = icmp slt i64 %44, %38
  br i1 %94, label %40, label %95

95:                                               ; preds = %93
  %96 = srem i32 %0, 2
  %97 = icmp ne i32 %96, 1
  %98 = and i1 %97, %7
  br i1 %98, label %100, label %124

99:                                               ; preds = %34
  br i1 %7, label %100, label %124

100:                                              ; preds = %99, %95
  %101 = sext i32 %0 to i64
  %102 = sext i32 %6 to i64
  br label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ 0, %100 ], [ %116, %103 ]
  %105 = phi i32 [ 0, %100 ], [ %117, %103 ]
  %106 = shl nsw i32 %105, 1
  %107 = add nsw i32 %106, %0
  %108 = add nsw i32 %107, -1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %109
  %111 = load <4 x float>, <4 x float>* %110, align 16
  %112 = sext i32 %107 to i64
  %113 = getelementptr inbounds <4 x float>, <4 x float>* %2, i64 %112
  %114 = load <4 x float>, <4 x float>* %113, align 16
  %115 = fadd <4 x float> %111, %111
  %116 = add i64 %104, %101
  %117 = add nsw i32 %105, %0
  %118 = add nsw i64 %116, -1
  %119 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %118
  store <4 x float> %115, <4 x float>* %119, align 16
  %120 = fmul <4 x float> %114, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %121 = add nsw i64 %118, %102
  %122 = getelementptr inbounds <4 x float>, <4 x float>* %3, i64 %121
  store <4 x float> %120, <4 x float>* %122, align 16
  %123 = icmp slt i64 %116, %102
  br i1 %123, label %103, label %124

124:                                              ; preds = %103, %36, %95, %99, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = !{!10}
!10 = distinct !{!10, !11, !"radf5_ps: argument 0"}
!11 = distinct !{!11, !"radf5_ps"}
!12 = !{!13}
!13 = distinct !{!13, !11, !"radf5_ps: argument 1"}
!14 = !{!10, !13}
!15 = !{!16}
!16 = distinct !{!16, !17, !"radf3_ps: argument 0"}
!17 = distinct !{!17, !"radf3_ps"}
!18 = !{!19}
!19 = distinct !{!19, !17, !"radf3_ps: argument 1"}
!20 = !{!16, !19}
!21 = !{!22}
!22 = distinct !{!22, !23, !"radb5_ps: argument 0"}
!23 = distinct !{!23, !"radb5_ps"}
!24 = !{!25}
!25 = distinct !{!25, !23, !"radb5_ps: argument 1"}
!26 = !{!22, !25}
!27 = !{!28}
!28 = distinct !{!28, !29, !"radb3_ps: argument 0"}
!29 = distinct !{!29, !"radb3_ps"}
!30 = !{!31}
!31 = distinct !{!31, !29, !"radb3_ps: argument 1"}
!32 = !{!28, !31}
