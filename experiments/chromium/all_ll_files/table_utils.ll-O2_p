; ModuleID = '../../ui/views/controls/table/table_utils.cc'
source_filename = "../../ui/views/controls/table/table_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::FontList" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::FontListImpl"* }
%"class.gfx::FontListImpl" = type opaque
%"struct.ui::TableColumn" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i32, i32, float, i32, i8, i8, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.ui::TableModel" = type { i32 (...)** }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { i32*, i32*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i32* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ui::TableColumn"*, %"struct.ui::TableColumn"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.ui::TableColumn"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.views::TableView" = type { %"class.views::View.base", %"class.ui::TableModelObserver", %"class.ui::TableModel"*, %"class.std::__1::vector", %"class.std::__1::vector.150", i32, %"class.views::FocusRing"*, %"class.views::TableHeader"*, i32, i8, i8, %"class.views::TableViewObserver"*, i8, %"class.ui::ListSelectionModel", %"class.gfx::FontList", i32, i32, i32, %"class.std::__1::vector.157", %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.views::TableGrouper"*, i8, i8, %"class.base::WeakPtrFactory" }
%"class.views::View.base" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.54", i8, [3 x i8], %"class.absl::optional", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.62", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.81", %"class.absl::optional.87", i8, [7 x i8], %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.109", i8, i8, [3 x i8], %"class.std::__1::vector.114", %"class.std::__1::unique_ptr.121", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.127", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.140", %"class.base::ObserverList.146", i32 }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.16", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.18" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.23", %"class.std::__1::vector.30", %"class.ui::EventHandler"* }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.25" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.45" }
%"class.std::__1::map.45" = type { %"class.std::__1::__tree.46" }
%"class.std::__1::__tree.46" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.views::View"** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.61 }
%union.anon.61 = type { %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::vector.54"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.71", %"struct.std::__1::atomic.71", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.69, %class.SkTDArray.70, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.68" }
%"struct.std::__1::__atomic_base.68" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.69 = type { i8*, i32, i32 }
%class.SkTDArray.70 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.76 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.71" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.76 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.77", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.77" = type { %"struct.std::__1::__atomic_base.78" }
%"struct.std::__1::__atomic_base.78" = type { %"struct.std::__1::__cxx_atomic_impl.79" }
%"struct.std::__1::__cxx_atomic_impl.79" = type { %"struct.std::__1::__cxx_atomic_base_impl.80" }
%"struct.std::__1::__cxx_atomic_base_impl.80" = type { i8 }
%"struct.std::__1::atomic.71" = type { %"struct.std::__1::__atomic_base.72" }
%"struct.std::__1::__atomic_base.72" = type { %"struct.std::__1::__atomic_base.73" }
%"struct.std::__1::__atomic_base.73" = type { %"struct.std::__1::__cxx_atomic_impl.74" }
%"struct.std::__1::__cxx_atomic_impl.74" = type { %"struct.std::__1::__cxx_atomic_base_impl.75" }
%"struct.std::__1::__cxx_atomic_base_impl.75" = type { i8 }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.87" = type { %"class.absl::optional_internal::optional_data.88" }
%"class.absl::optional_internal::optional_data.88" = type { %"class.absl::optional_internal::optional_data_base.89" }
%"class.absl::optional_internal::optional_data_base.89" = type { %"class.absl::optional_internal::optional_data_dtor_base.90" }
%"class.absl::optional_internal::optional_data_dtor_base.90" = type { i8, %union.anon.91 }
%union.anon.91 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.views::Border"* }
%"class.views::Border" = type opaque
%"class.ui::PaintCache" = type <{ %class.sk_sp.104, float, [4 x i8] }>
%class.sk_sp.104 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.105", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { i8* }
%"class.ui::NativeTheme" = type opaque
%"class.absl::optional.109" = type { %"class.absl::optional_internal::optional_data.110" }
%"class.absl::optional_internal::optional_data.110" = type { %"class.absl::optional_internal::optional_data_base.111" }
%"class.absl::optional_internal::optional_data_base.111" = type { %"class.absl::optional_internal::optional_data_dtor_base.112" }
%"class.absl::optional_internal::optional_data_dtor_base.112" = type { i8, %union.anon.113 }
%union.anon.113 = type { i8 }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.std::__1::vector.130"* }
%"class.std::__1::vector.130" = type opaque
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.54", i8, [3 x i8], %"class.absl::optional", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.62", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.81", %"class.absl::optional.87", i8, [7 x i8], %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.109", i8, i8, [3 x i8], %"class.std::__1::vector.114", %"class.std::__1::unique_ptr.121", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.127", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.140", %"class.base::ObserverList.146", i32, [4 x i8] }>
%"class.views::ContextMenuController" = type opaque
%"class.views::DragController" = type opaque
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.146" = type <{ %"class.std::__1::vector.16", %"class.base::LinkedList.147", i64, i32, [4 x i8] }>
%"class.base::LinkedList.147" = type { %"class.base::LinkNode.148" }
%"class.base::LinkNode.148" = type { %"class.base::internal::LinkNodeBase" }
%"class.ui::TableModelObserver" = type { i32 (...)** }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { %"struct.views::TableView::VisibleColumn"*, %"struct.views::TableView::VisibleColumn"*, %"class.std::__1::__compressed_pair.152" }
%"struct.views::TableView::VisibleColumn" = type { %"struct.ui::TableColumn", i32, i32 }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.views::TableView::VisibleColumn"* }
%"class.views::FocusRing" = type opaque
%"class.views::TableHeader" = type opaque
%"class.views::TableViewObserver" = type opaque
%"class.ui::ListSelectionModel" = type { %"class.base::internal::flat_tree", i32, i32 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.6" }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"struct.views::TableView::SortDescriptor"*, %"struct.views::TableView::SortDescriptor"*, %"class.std::__1::__compressed_pair.159" }
%"struct.views::TableView::SortDescriptor" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.views::TableView::SortDescriptor"* }
%"class.views::TableGrouper" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.164 }
%class.scoped_refptr.164 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.71" }

@_ZN5views23kUnspecifiedColumnWidthE = hidden local_unnamed_addr constant i32 90, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5views15WidthForContentERKN3gfx8FontListES3_iiRKN2ui11TableColumnEPNS4_10TableModelE(%"class.gfx::FontList"* dereferenceable(8), %"class.gfx::FontList"* dereferenceable(8), i32, i32, %"struct.ui::TableColumn"* dereferenceable(56), %"class.ui::TableModel"*) local_unnamed_addr #0 {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %4, i64 0, i32 2
  %9 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %9, i64 0, i32 1, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %18

16:                                               ; preds = %6
  %17 = zext i8 %11 to i64
  br label %18

18:                                               ; preds = %13, %16
  %19 = phi i64 [ %15, %13 ], [ %17, %16 ]
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* dereferenceable(24) %8, %"class.gfx::FontList"* dereferenceable(8) %0) #9
  %23 = add nsw i32 %22, %3
  br label %24

24:                                               ; preds = %21, %18
  %25 = phi i32 [ %3, %18 ], [ %23, %21 ]
  %26 = bitcast %"class.ui::TableModel"* %5 to i32 (%"class.ui::TableModel"*)***
  %27 = load i32 (%"class.ui::TableModel"*)**, i32 (%"class.ui::TableModel"*)*** %26, align 8
  %28 = load i32 (%"class.ui::TableModel"*)*, i32 (%"class.ui::TableModel"*)** %27, align 8
  %29 = tail call i32 %28(%"class.ui::TableModel"* %5) #9
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %38

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %33 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %4, i64 0, i32 0
  %34 = bitcast %"class.ui::TableModel"* %5 to void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)***
  %35 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %35, i64 0, i32 1, i32 1
  %37 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  br label %41

38:                                               ; preds = %53, %24
  %39 = phi i32 [ %25, %24 ], [ %55, %53 ]
  %40 = add nsw i32 %39, %2
  ret i32 %40

41:                                               ; preds = %53, %31
  %42 = phi i32 [ 0, %31 ], [ %56, %53 ]
  %43 = phi i32 [ %25, %31 ], [ %55, %53 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #9
  %44 = load i32, i32* %33, align 8
  %45 = load void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)**, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*** %34, align 8
  %46 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)** %45, i64 1
  %47 = load void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)** %46, align 8
  call void %47(%"class.std::__1::basic_string"* nonnull sret %7, %"class.ui::TableModel"* %5, i32 %42, i32 %44) #9
  %48 = call i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, %"class.gfx::FontList"* dereferenceable(8) %1) #9
  %49 = load i8, i8* %36, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = load i8*, i8** %37, align 8
  call void @_ZdlPv(i8* %52) #10
  br label %53

53:                                               ; preds = %41, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #9
  %54 = icmp slt i32 %43, %48
  %55 = select i1 %54, i32 %48, i32 %43
  %56 = add nuw nsw i32 %42, 1
  %57 = icmp eq i32 %56, %29
  br i1 %57, label %38, label %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* dereferenceable(24), %"class.gfx::FontList"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views25CalculateTableColumnSizesEiiRKN3gfx8FontListES3_iiRKNSt3__16vectorIN2ui11TableColumnENS4_9allocatorIS7_EEEEPNS6_10TableModelE(%"class.std::__1::vector.6"* noalias sret, i32, i32, %"class.gfx::FontList"* dereferenceable(8), %"class.gfx::FontList"* dereferenceable(8), i32, i32, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.ui::TableModel"*) local_unnamed_addr #0 {
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca %"class.std::__1::vector.6", align 8
  %12 = bitcast %"class.std::__1::vector.6"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #9
  %13 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %11, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %11, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %17 = bitcast %"struct.ui::TableColumn"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector"* %7 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = sdiv exact i64 %21, 56
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #9
  %23 = icmp eq i64 %21, 0
  %24 = inttoptr i64 %18 to %"struct.ui::TableColumn"*
  br i1 %23, label %37, label %25

25:                                               ; preds = %9
  %26 = icmp ugt i64 %22, 4611686018427387903
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = bitcast %"class.std::__1::vector.6"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %28) #11
  unreachable

29:                                               ; preds = %25
  %30 = shl nsw i64 %22, 2
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to i32*
  %33 = bitcast %"class.std::__1::vector.6"* %11 to i8**
  store i8* %31, i8** %33, align 8
  %34 = getelementptr inbounds i32, i32* %32, i64 %22
  store i32* %34, i32** %15, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %31, i8 0, i64 %30, i1 false)
  %35 = bitcast i32** %14 to i64*
  %36 = ptrtoint i32* %34 to i64
  store i64 %36, i64* %35, align 8
  br label %37

37:                                               ; preds = %9, %29
  %38 = icmp eq i64 %18, %20
  br i1 %38, label %50, label %39

39:                                               ; preds = %37
  %40 = bitcast %"class.ui::TableModel"* %8 to i32 (%"class.ui::TableModel"*)***
  %41 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %42 = bitcast %"class.ui::TableModel"* %8 to void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)***
  %43 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %43, i64 0, i32 1, i32 1
  %45 = bitcast %"class.std::__1::basic_string"* %10 to i8**
  %46 = add i32 %6, %5
  br label %68

47:                                               ; preds = %147
  %48 = inttoptr i64 %154 to %"struct.ui::TableColumn"*
  %49 = inttoptr i64 %153 to %"struct.ui::TableColumn"*
  br label %50

50:                                               ; preds = %47, %37
  %51 = phi %"struct.ui::TableColumn"* [ %48, %47 ], [ %24, %37 ]
  %52 = phi %"struct.ui::TableColumn"* [ %49, %47 ], [ %24, %37 ]
  %53 = phi i64 [ %154, %47 ], [ %18, %37 ]
  %54 = phi i64 [ %153, %47 ], [ %18, %37 ]
  %55 = phi float [ %148, %47 ], [ 0.000000e+00, %37 ]
  %56 = phi i32 [ %151, %47 ], [ 0, %37 ]
  %57 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %58 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 24, i1 false) #9
  %60 = sub nsw i32 %1, %56
  %61 = icmp eq i64 %54, %53
  br i1 %61, label %161, label %62

62:                                               ; preds = %50
  %63 = icmp sgt i32 %60, 0
  %64 = sitofp i32 %60 to float
  %65 = bitcast i32** %57 to i64*
  %66 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %67 = bitcast i32** %58 to i64*
  br label %169

68:                                               ; preds = %39, %147
  %69 = phi i64 [ %20, %39 ], [ %154, %147 ]
  %70 = phi i64 [ 0, %39 ], [ %152, %147 ]
  %71 = phi i32 [ 0, %39 ], [ %151, %147 ]
  %72 = phi float [ 0.000000e+00, %39 ], [ %148, %147 ]
  %73 = inttoptr i64 %69 to %"struct.ui::TableColumn"*
  %74 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 4
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %75, 1
  br i1 %76, label %77, label %144

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 5
  %79 = load float, float* %78, align 8
  %80 = fcmp ogt float %79, 0.000000e+00
  br i1 %80, label %81, label %88

81:                                               ; preds = %77
  %82 = fadd float %72, %79
  %83 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 2
  %84 = call i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* dereferenceable(24) %83, %"class.gfx::FontList"* dereferenceable(8) %3) #9
  %85 = add i32 %46, %84
  %86 = load i32*, i32** %13, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 %70
  store i32 %85, i32* %87, align 4
  br label %140

88:                                               ; preds = %77
  %89 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 2
  %90 = bitcast %"class.std::__1::basic_string"* %89 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %90, i64 0, i32 1, i32 1
  %92 = load i8, i8* %91, align 1
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  br label %99

97:                                               ; preds = %88
  %98 = zext i8 %92 to i64
  br label %99

99:                                               ; preds = %97, %94
  %100 = phi i64 [ %96, %94 ], [ %98, %97 ]
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %99
  %103 = call i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* dereferenceable(24) %89, %"class.gfx::FontList"* dereferenceable(8) %3) #9
  %104 = add nsw i32 %103, %6
  br label %105

105:                                              ; preds = %102, %99
  %106 = phi i32 [ %6, %99 ], [ %104, %102 ]
  %107 = load i32 (%"class.ui::TableModel"*)**, i32 (%"class.ui::TableModel"*)*** %40, align 8
  %108 = load i32 (%"class.ui::TableModel"*)*, i32 (%"class.ui::TableModel"*)** %107, align 8
  %109 = call i32 %108(%"class.ui::TableModel"* %8) #9
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %130

111:                                              ; preds = %105
  %112 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %73, i64 %70, i32 0
  br label %113

113:                                              ; preds = %125, %111
  %114 = phi i32 [ 0, %111 ], [ %128, %125 ]
  %115 = phi i32 [ %106, %111 ], [ %127, %125 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #9
  %116 = load i32, i32* %112, align 8
  %117 = load void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)**, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*** %42, align 8
  %118 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)** %117, i64 1
  %119 = load void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)*, void (%"class.std::__1::basic_string"*, %"class.ui::TableModel"*, i32, i32)** %118, align 8
  call void %119(%"class.std::__1::basic_string"* nonnull sret %10, %"class.ui::TableModel"* %8, i32 %114, i32 %116) #9
  %120 = call i32 @_ZN3gfx14GetStringWidthERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %10, %"class.gfx::FontList"* dereferenceable(8) %4) #9
  %121 = load i8, i8* %44, align 1
  %122 = icmp slt i8 %121, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %113
  %124 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %124) #10
  br label %125

125:                                              ; preds = %123, %113
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #9
  %126 = icmp slt i32 %115, %120
  %127 = select i1 %126, i32 %120, i32 %115
  %128 = add nuw nsw i32 %114, 1
  %129 = icmp eq i32 %128, %109
  br i1 %129, label %130, label %113

130:                                              ; preds = %125, %105
  %131 = phi i32 [ %106, %105 ], [ %127, %125 ]
  %132 = add nsw i32 %131, %5
  %133 = load i32*, i32** %13, align 8
  %134 = getelementptr inbounds i32, i32* %133, i64 %70
  store i32 %132, i32* %134, align 4
  %135 = icmp eq i64 %70, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %130
  %137 = load i32*, i32** %13, align 8
  %138 = load i32, i32* %137, align 4
  %139 = add nsw i32 %138, %2
  store i32 %139, i32* %137, align 4
  br label %140

140:                                              ; preds = %130, %136, %81
  %141 = phi float [ %82, %81 ], [ %72, %136 ], [ %72, %130 ]
  %142 = load i32*, i32** %13, align 8
  %143 = getelementptr inbounds i32, i32* %142, i64 %70
  br label %147

144:                                              ; preds = %68
  %145 = load i32*, i32** %13, align 8
  %146 = getelementptr inbounds i32, i32* %145, i64 %70
  store i32 %75, i32* %146, align 4
  br label %147

147:                                              ; preds = %144, %140
  %148 = phi float [ %141, %140 ], [ %72, %144 ]
  %149 = phi i32* [ %143, %140 ], [ %74, %144 ]
  %150 = load i32, i32* %149, align 4
  %151 = add nsw i32 %150, %71
  %152 = add nuw i64 %70, 1
  %153 = load i64, i64* %17, align 8
  %154 = load i64, i64* %19, align 8
  %155 = sub i64 %153, %154
  %156 = sdiv exact i64 %155, 56
  %157 = icmp ult i64 %152, %156
  br i1 %157, label %68, label %47

158:                                              ; preds = %243
  %159 = inttoptr i64 %246 to %"struct.ui::TableColumn"*
  %160 = inttoptr i64 %245 to %"struct.ui::TableColumn"*
  br label %161

161:                                              ; preds = %50, %158
  %162 = phi %"struct.ui::TableColumn"* [ %160, %158 ], [ %52, %50 ]
  %163 = phi %"struct.ui::TableColumn"* [ %159, %158 ], [ %51, %50 ]
  %164 = icmp ne %"struct.ui::TableColumn"* %162, %163
  %165 = fcmp oeq float %55, 0.000000e+00
  %166 = and i1 %165, %164
  %167 = icmp sgt i32 %60, 0
  %168 = and i1 %167, %166
  br i1 %168, label %251, label %264

169:                                              ; preds = %62, %243
  %170 = phi %"struct.ui::TableColumn"* [ %51, %62 ], [ %250, %243 ]
  %171 = phi i64 [ 0, %62 ], [ %244, %243 ]
  %172 = load i32*, i32** %13, align 8
  %173 = getelementptr inbounds i32, i32* %172, i64 %171
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %170, i64 %171, i32 4
  %176 = load i32, i32* %175, align 4
  %177 = icmp slt i32 %176, 1
  br i1 %177, label %178, label %188

178:                                              ; preds = %169
  %179 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %170, i64 %171, i32 5
  %180 = load float, float* %179, align 8
  %181 = fcmp ogt float %180, 0.000000e+00
  %182 = and i1 %63, %181
  br i1 %182, label %183, label %188

183:                                              ; preds = %178
  %184 = fdiv float %180, %55
  %185 = fmul float %184, %64
  %186 = fptosi float %185 to i32
  %187 = add nsw i32 %174, %186
  br label %188

188:                                              ; preds = %183, %178, %169
  %189 = phi i32 [ %187, %183 ], [ %174, %178 ], [ %174, %169 ]
  %190 = icmp eq i32 %189, 0
  %191 = load i32*, i32** %57, align 8
  %192 = load i32*, i32** %58, align 8
  %193 = icmp eq i32* %191, %192
  %194 = ptrtoint i32* %192 to i64
  br i1 %193, label %199, label %195

195:                                              ; preds = %188
  %196 = select i1 %190, i32 90, i32 %189
  store i32 %196, i32* %191, align 4
  %197 = getelementptr inbounds i32, i32* %191, i64 1
  %198 = ptrtoint i32* %197 to i64
  store i64 %198, i64* %65, align 8
  br label %243

199:                                              ; preds = %188
  %200 = ptrtoint i32* %191 to i64
  %201 = load i64, i64* %66, align 8
  %202 = sub i64 %200, %201
  %203 = ashr exact i64 %202, 2
  %204 = add nsw i64 %203, 1
  %205 = icmp ugt i64 %204, 4611686018427387903
  br i1 %205, label %206, label %208

206:                                              ; preds = %199
  %207 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %207) #11
  unreachable

208:                                              ; preds = %199
  %209 = sub i64 %194, %201
  %210 = ashr exact i64 %209, 2
  %211 = icmp ult i64 %210, 2305843009213693951
  br i1 %211, label %212, label %220

212:                                              ; preds = %208
  %213 = ashr exact i64 %209, 1
  %214 = icmp ult i64 %213, %204
  %215 = select i1 %214, i64 %204, i64 %213
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %225, label %217

217:                                              ; preds = %212
  %218 = icmp ugt i64 %215, 4611686018427387903
  br i1 %218, label %219, label %220

219:                                              ; preds = %217
  call void @abort() #11
  unreachable

220:                                              ; preds = %217, %208
  %221 = phi i64 [ %215, %217 ], [ 4611686018427387903, %208 ]
  %222 = shl i64 %221, 2
  %223 = call i8* @_Znwm(i64 %222) #10
  %224 = bitcast i8* %223 to i32*
  br label %225

225:                                              ; preds = %220, %212
  %226 = phi i64 [ %221, %220 ], [ 0, %212 ]
  %227 = phi i8* [ %223, %220 ], [ null, %212 ]
  %228 = phi i32* [ %224, %220 ], [ null, %212 ]
  %229 = getelementptr inbounds i32, i32* %228, i64 %203
  %230 = getelementptr inbounds i32, i32* %228, i64 %226
  %231 = ptrtoint i32* %230 to i64
  %232 = select i1 %190, i32 90, i32 %189
  store i32 %232, i32* %229, align 4
  %233 = getelementptr inbounds i32, i32* %229, i64 1
  %234 = ptrtoint i32* %233 to i64
  %235 = ptrtoint i32* %228 to i64
  %236 = icmp sgt i64 %202, 0
  br i1 %236, label %237, label %239

237:                                              ; preds = %225
  %238 = inttoptr i64 %201 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %227, i8* align 4 %238, i64 %202, i1 false) #9
  br label %239

239:                                              ; preds = %237, %225
  store i64 %235, i64* %66, align 8
  store i64 %234, i64* %65, align 8
  store i64 %231, i64* %67, align 8
  %240 = icmp eq i64 %201, 0
  br i1 %240, label %243, label %241

241:                                              ; preds = %239
  %242 = inttoptr i64 %201 to i8*
  call void @_ZdlPv(i8* %242) #10
  br label %243

243:                                              ; preds = %195, %239, %241
  %244 = add nuw i64 %171, 1
  %245 = load i64, i64* %17, align 8
  %246 = load i64, i64* %19, align 8
  %247 = sub i64 %245, %246
  %248 = sdiv exact i64 %247, 56
  %249 = icmp ult i64 %244, %248
  %250 = inttoptr i64 %246 to %"struct.ui::TableColumn"*
  br i1 %249, label %169, label %158

251:                                              ; preds = %161
  %252 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %162, i64 -1, i32 4
  %253 = load i32, i32* %252, align 4
  %254 = icmp slt i32 %253, 1
  br i1 %254, label %255, label %264

255:                                              ; preds = %251
  %256 = getelementptr inbounds %"struct.ui::TableColumn", %"struct.ui::TableColumn"* %162, i64 -1, i32 5
  %257 = load float, float* %256, align 8
  %258 = fcmp oeq float %257, 0.000000e+00
  br i1 %258, label %259, label %264

259:                                              ; preds = %255
  %260 = load i32*, i32** %57, align 8
  %261 = getelementptr inbounds i32, i32* %260, i64 -1
  %262 = load i32, i32* %261, align 4
  %263 = add nsw i32 %262, %60
  store i32 %263, i32* %261, align 4
  br label %264

264:                                              ; preds = %251, %255, %259, %161
  %265 = load i32*, i32** %13, align 8
  %266 = icmp eq i32* %265, null
  br i1 %266, label %271, label %267

267:                                              ; preds = %264
  %268 = ptrtoint i32* %265 to i64
  %269 = bitcast i32** %14 to i64*
  store i64 %268, i64* %269, align 8
  %270 = bitcast i32* %265 to i8*
  call void @_ZdlPv(i8* %270) #10
  br label %271

271:                                              ; preds = %264, %267
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5views37TableColumnAlignmentToCanvasAlignmentEN2ui11TableColumn9AlignmentE(i32) local_unnamed_addr #3 {
  %2 = icmp eq i32 %0, 2
  %3 = select i1 %2, i32 2, i32 1
  %4 = icmp eq i32 %0, 1
  %5 = select i1 %4, i32 4, i32 %3
  ret i32 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5views28GetClosestVisibleColumnIndexEPKNS_9TableViewEi(%"class.views::TableView"* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.views::TableView", %"class.views::TableView"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.views::TableView", %"class.views::TableView"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = bitcast %"struct.views::TableView::VisibleColumn"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.150"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 6
  %11 = icmp eq i64 %9, 0
  %12 = inttoptr i64 %8 to %"struct.views::TableView::VisibleColumn"*
  br i1 %11, label %26, label %13

13:                                               ; preds = %2, %21
  %14 = phi i64 [ %22, %21 ], [ 0, %2 ]
  %15 = getelementptr inbounds %"struct.views::TableView::VisibleColumn", %"struct.views::TableView::VisibleColumn"* %12, i64 %14, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"struct.views::TableView::VisibleColumn", %"struct.views::TableView::VisibleColumn"* %12, i64 %14, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, %16
  %20 = icmp slt i32 %19, %1
  br i1 %20, label %21, label %24

21:                                               ; preds = %13
  %22 = add nuw i64 %14, 1
  %23 = icmp ult i64 %22, %10
  br i1 %23, label %13, label %26

24:                                               ; preds = %13
  %25 = trunc i64 %14 to i32
  br label %29

26:                                               ; preds = %21, %2
  %27 = trunc i64 %10 to i32
  %28 = add nsw i32 %27, -1
  br label %29

29:                                               ; preds = %24, %26
  %30 = phi i32 [ %28, %26 ], [ %25, %24 ]
  ret i32 %30
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
