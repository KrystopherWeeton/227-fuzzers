; ModuleID = '../../third_party/swiftshader/third_party/subzero/src/IceVariableSplitting.cpp'
source_filename = "../../third_party/swiftshader/third_party/subzero/src/IceVariableSplitting.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.Ice::ClFlags" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::basic_string", i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, %"class.std::__1::vector.85", i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i8, i8, i32, i8, i8, i32, i8, %"class.std::__1::basic_string", i32, i8, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i32, %"class.std::__1::basic_string", i32, %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::vector.85", i8, i32, %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", i8, [7 x i8], %"class.Ice::RangeSpec", %"class.Ice::RangeSpec", %"class.Ice::RangeSpec", %"class.Ice::RangeSpec", %"class.Ice::RangeSpec", %"class.Ice::RangeSpec" }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.Ice::RangeSpec" = type { %"struct.Ice::RangeSpec::Desc", %"struct.Ice::RangeSpec::Desc" }
%"struct.Ice::RangeSpec::Desc" = type <{ %"class.std::__1::unordered_set.311", %"class.llvm::BitVector", i32, i8, [3 x i8] }>
%"class.std::__1::unordered_set.311" = type { %"class.std::__1::__hash_table.312" }
%"class.std::__1::__hash_table.312" = type <{ %"class.std::__1::unique_ptr.313", %"class.std::__1::__compressed_pair.323", %"class.std::__1::__compressed_pair.328", %"class.std::__1::__compressed_pair.330", [4 x i8] }>
%"class.std::__1::unique_ptr.313" = type { %"class.std::__1::__compressed_pair.314" }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.315", %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.315" = type { %"struct.std::__1::__hash_node_base.316"** }
%"struct.std::__1::__hash_node_base.316" = type { %"struct.std::__1::__hash_node_base.316"* }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.std::__1::__bucket_list_deallocator.318" }
%"class.std::__1::__bucket_list_deallocator.318" = type { %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"struct.std::__1::__hash_node_base.316" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { float }
%"class.llvm::BitVector" = type { i64*, i32, i32 }
%"class.Ice::Cfg" = type <{ %"class.std::__1::unique_ptr", %"class.Ice::GlobalContext"*, i32, i32, i32, [4 x i8], %"class.Ice::StringID", i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.Ice::CfgNode"*, %"class.std::__1::vector.196", i32, [4 x i8], %"class.std::__1::vector.201", %"class.std::__1::vector.201", %"class.std::__1::vector.201", %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.213", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.138", %"class.std::__1::vector.243", %"class.Ice::CfgNode"*, %"class.std::__1::vector.249", i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.llvm::BumpPtrAllocatorImpl" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.0", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [8 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [3 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVector.0" = type <{ %"class.llvm::SmallVectorImpl.1", %"struct.llvm::SmallVectorStorage.6", [7 x i8] }>
%"class.llvm::SmallVectorImpl.1" = type { %"class.llvm::SmallVectorTemplateBase.2" }
%"class.llvm::SmallVectorTemplateBase.2" = type { %"class.llvm::SmallVectorTemplateCommon.3" }
%"class.llvm::SmallVectorTemplateCommon.3" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.4" }
%"struct.llvm::AlignedCharArrayUnion.4" = type { %"struct.llvm::AlignedCharArray.5" }
%"struct.llvm::AlignedCharArray.5" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage.6" = type { i8 }
%"class.llvm::MallocAllocator" = type { i8 }
%"class.Ice::GlobalContext" = type { %"class.std::__1::mutex", %"class.llvm::BumpPtrAllocatorImpl", [16 x i8], %"class.std::__1::mutex", %"class.Ice::VariableDeclarationList", [8 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.12", %"class.std::__1::mutex", %"class.std::__1::unique_ptr.26", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::unique_ptr.51", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.57", %"class.std::__1::mutex", %"class.Ice::ErrorCode", %"class.std::__1::mutex", %"class.Ice::GlobalContext::CodeStats", %"class.std::__1::mutex", %"class.Ice::GlobalContext::TimerList", %"class.std::__1::mutex", %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"struct.std::__1::atomic", [63 x i8], %"class.std::__1::unique_ptr.118", i64, %"class.Ice::BoundedProducerConsumerQueue", %"class.Ice::BoundedProducerConsumerQueue.134", %"class.std::__1::unique_ptr.171", i8, %"class.std::__1::unique_ptr.177", i8, [15 x %"class.Ice::Constant"*], %"class.Ice::Constant"*, [36 x %"class.Ice::Constant"*], %"class.llvm::SmallVector.183", %"class.llvm::SmallVector.189", %"class.llvm::SmallVector.189" }
%"class.Ice::VariableDeclarationList" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector", %"class.std::__1::vector.12", %"class.std::__1::vector.19" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.Ice::VariableDeclaration"**, %"class.Ice::VariableDeclaration"**, %"class.std::__1::__compressed_pair.9" }
%"class.Ice::VariableDeclaration" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.Ice::VariableDeclaration"** }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.std::__1::function"*, %"class.std::__1::function"*, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::function"* }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.Ice::ConstantPool"* }
%"class.Ice::ConstantPool" = type opaque
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"class.Ice::JumpTableData"*, %"class.Ice::JumpTableData"*, %"class.std::__1::__compressed_pair.66" }
%"class.Ice::JumpTableData" = type { %"class.Ice::StringID", %"class.Ice::StringID", i32, %"class.std::__1::vector.59" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i64*, i64*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i64* }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.Ice::JumpTableData"* }
%"class.Ice::ErrorCode" = type <{ %"class.std::__1::error_code", i8, [7 x i8] }>
%"class.std::__1::error_code" = type { i32, %"class.std::__1::error_category"* }
%"class.std::__1::error_category" = type { i32 (...)** }
%"class.Ice::GlobalContext::CodeStats" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [6 x i32] }
%"class.Ice::GlobalContext::TimerList" = type { %"class.std::__1::vector.71" }
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { %"class.Ice::TimerStack"*, %"class.Ice::TimerStack"*, %"class.std::__1::__compressed_pair.113" }
%"class.Ice::TimerStack" = type { %"class.std::__1::basic_string", double, double, i64, %"class.std::__1::map", %"class.std::__1::vector.85", %"class.std::__1::vector.92", %"class.std::__1::vector.106", %"class.std::__1::vector.94", i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.78", %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"class.Ice::TimerStack::TimerTreeNode"*, %"class.Ice::TimerStack::TimerTreeNode"*, %"class.std::__1::__compressed_pair.101" }
%"class.Ice::TimerStack::TimerTreeNode" = type { %"class.std::__1::vector.94", i64, i32, double, i64 }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.Ice::TimerStack::TimerTreeNode"* }
%"class.std::__1::vector.106" = type { %"class.std::__1::__vector_base.107" }
%"class.std::__1::__vector_base.107" = type { double*, double*, %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { double* }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { i64*, i64*, %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { i64* }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.Ice::TimerStack"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.llvm::raw_ostream" = type <{ i32 (...)**, i8*, i8*, i8*, i32, [4 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.Ice::ELFObjectWriter"* }
%"class.Ice::ELFObjectWriter" = type opaque
%"class.Ice::BoundedProducerConsumerQueue" = type <{ [65536 x %"class.std::__1::unique_ptr.124"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.Ice::OptWorkItem"* }
%"class.Ice::OptWorkItem" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.130, %union.anon.132, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.130 = type { i64 }
%union.anon.132 = type { i64 }
%"class.Ice::BoundedProducerConsumerQueue.134" = type <{ [128 x %"class.std::__1::unique_ptr.135"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.Ice::EmitterWorkItem"* }
%"class.Ice::EmitterWorkItem" = type { i32, i32, %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.161" }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.Ice::Cfg"* }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.Ice::TargetDataLowering"* }
%"class.Ice::TargetDataLowering" = type { i32 (...)**, %"class.Ice::GlobalContext"* }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.Ice::Instrumentation"* }
%"class.Ice::Instrumentation" = type { i32 (...)**, %"class.Ice::GlobalContext"*, i8, %"class.std::__1::mutex", %"class.std::__1::condition_variable" }
%"class.Ice::Constant" = type <{ %"class.Ice::Operand", %"class.Ice::StringID", i8, i8, [6 x i8] }>
%"class.Ice::Operand" = type { i32 (...)**, i32, i32, i32, %"class.Ice::Variable"**, i8* }
%"class.Ice::Variable" = type { %"class.Ice::Operand", i32, %"class.Ice::StringID.278", i8, i8, i8, i8, i8, i8, %"class.Ice::RegNumT", %"class.Ice::RegNumT", i32, %"class.Ice::LiveRange", [1 x %"class.Ice::Variable"*], %"class.Ice::Variable"*, i8* }
%"class.Ice::StringID.278" = type { i64 }
%"class.Ice::RegNumT" = type { i32 }
%"class.Ice::LiveRange" = type { %"class.std::__1::vector.279", %"class.std::__1::unordered_map.285", %"class.std::__1::__wrap_iter" }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.281" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282", %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"struct.Ice::sz_allocator.284" }
%"struct.Ice::sz_allocator.284" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::unordered_map.285" = type { %"class.std::__1::__hash_table.286" }
%"class.std::__1::__hash_table.286" = type <{ %"class.std::__1::unique_ptr.287", %"class.std::__1::__compressed_pair.296", %"class.std::__1::__compressed_pair.300", %"class.std::__1::__compressed_pair.305", [4 x i8] }>
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289", %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"struct.std::__1::__hash_node_base.290"** }
%"struct.std::__1::__hash_node_base.290" = type { %"struct.std::__1::__hash_node_base.290"* }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.std::__1::__bucket_list_deallocator.292" }
%"class.std::__1::__bucket_list_deallocator.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.34", %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"struct.Ice::sz_allocator.295" }
%"struct.Ice::sz_allocator.295" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297", %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"struct.std::__1::__hash_node_base.290" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"struct.Ice::sz_allocator.299" }
%"struct.Ice::sz_allocator.299" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__wrap_iter" = type { %"struct.std::__1::pair"* }
%"class.llvm::SmallVector.183" = type { %"class.llvm::SmallVectorImpl.184", %"struct.llvm::SmallVectorStorage.188" }
%"class.llvm::SmallVectorImpl.184" = type { %"class.llvm::SmallVectorTemplateBase.185" }
%"class.llvm::SmallVectorTemplateBase.185" = type { %"class.llvm::SmallVectorTemplateCommon.186" }
%"class.llvm::SmallVectorTemplateCommon.186" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.187" }
%"struct.llvm::AlignedCharArrayUnion.187" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.188" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.187"] }
%"class.llvm::SmallVector.189" = type { %"class.llvm::SmallVectorImpl.190", %"struct.llvm::SmallVectorStorage.194" }
%"class.llvm::SmallVectorImpl.190" = type { %"class.llvm::SmallVectorTemplateBase.191" }
%"class.llvm::SmallVectorTemplateBase.191" = type { %"class.llvm::SmallVectorTemplateCommon.192" }
%"class.llvm::SmallVectorTemplateCommon.192" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.193" }
%"struct.llvm::AlignedCharArrayUnion.193" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.194" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.193"] }
%"class.Ice::StringID" = type { i64 }
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"class.Ice::CfgNode"**, %"class.Ice::CfgNode"**, %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199", %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.Ice::CfgNode"** }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.Ice::sz_allocator" }
%"struct.Ice::sz_allocator" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::vector.201" = type { %"class.std::__1::__vector_base.202" }
%"class.std::__1::__vector_base.202" = type { %"class.Ice::Variable"**, %"class.Ice::Variable"**, %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204", %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.Ice::Variable"** }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.Ice::sz_allocator.206" }
%"struct.Ice::sz_allocator.206" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.Ice::StringPool"* }
%"class.Ice::StringPool" = type { i64, %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.29", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.45", [4 x i8] }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.Ice::Liveness"* }
%"class.Ice::Liveness" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.Ice::TargetLowering"* }
%"class.Ice::TargetLowering" = type <{ i32 (...)**, i8, i8, [6 x i8], %"class.Ice::Cfg"*, %"class.Ice::GlobalContext"*, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.Ice::LoweringContext", i32, [4 x i8] }>
%"class.Ice::LoweringContext" = type { %"class.Ice::CfgNode"*, %"class.Ice::Inst"*, %"class.llvm::ilist_iterator", %"class.llvm::ilist_iterator", %"class.llvm::ilist_iterator", %"class.llvm::ilist_iterator", %"class.Ice::Variable"*, %"class.Ice::Variable"* }
%"class.Ice::Inst" = type <{ i32 (...)**, %"class.llvm::ilist_node", i32, i32, i8, i8, i8, i8, [4 x i8], i8*, %"class.Ice::Variable"*, i32, [4 x i8], %"class.std::__1::vector.216", i32, [4 x i8] }>
%"class.llvm::ilist_node" = type { %"class.llvm::ilist_node_impl" }
%"class.llvm::ilist_node_impl" = type { %"class.llvm::ilist_node_base" }
%"class.llvm::ilist_node_base" = type { %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"* }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"class.Ice::Operand"**, %"class.Ice::Operand"**, %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219", %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.Ice::Operand"** }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"struct.Ice::sz_allocator.221" }
%"struct.Ice::sz_allocator.221" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.llvm::ilist_iterator" = type { %"class.llvm::ilist_node_impl"* }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.Ice::VariablesMetadata"* }
%"class.Ice::VariablesMetadata" = type { %"class.Ice::Cfg"*, i32, %"class.std::__1::vector.228" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"class.Ice::VariableTracking"*, %"class.Ice::VariableTracking"*, %"class.std::__1::__compressed_pair.236" }
%"class.Ice::VariableTracking" = type <{ i32, i32, %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"*, %"class.std::__1::vector.230", %"class.Ice::Inst"*, %"class.Ice::RegWeight", [4 x i8] }>
%"class.std::__1::vector.230" = type { %"class.std::__1::__vector_base.231" }
%"class.std::__1::__vector_base.231" = type { %"class.Ice::Inst"**, %"class.Ice::Inst"**, %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.Ice::Inst"** }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.Ice::sz_allocator.235" }
%"struct.Ice::sz_allocator.235" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.Ice::RegWeight" = type { i32 }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237", %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.Ice::VariableTracking"* }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"struct.Ice::sz_allocator.239" }
%"struct.Ice::sz_allocator.239" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.Ice::Assembler"* }
%"class.Ice::Assembler" = type { i32 (...)**, i32, [4 x i8], %"class.llvm::BumpPtrAllocatorImpl.147", %"class.Ice::StringID", i8, i8, [6 x i8], %"class.Ice::AssemblerBuffer" }
%"class.llvm::BumpPtrAllocatorImpl.147" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.0", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.Ice::AssemblerBuffer" = type <{ i8, [7 x i8], i64, i64, i64, %"class.Ice::Assembler"*, %"class.std::__1::vector.150", i8, [7 x i8] }>
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"**, %"class.std::__1::__compressed_pair.153" }
%"class.Ice::AssemblerFixup" = type { i32 (...)**, i64, i32, i32, i8, %union.anon.152 }
%union.anon.152 = type { %"class.Ice::Constant"* }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.Ice::AssemblerFixup"** }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.Ice::VariableDeclarationList"* }
%"class.std::__1::vector.243" = type { %"class.std::__1::__vector_base.244" }
%"class.std::__1::__vector_base.244" = type { %"class.Ice::InstJumpTable"**, %"class.Ice::InstJumpTable"**, %"class.std::__1::__compressed_pair.245" }
%"class.Ice::InstJumpTable" = type { %"class.Ice::InstHighLevel.base", i32, i32, %"class.Ice::CfgNode"**, %"class.Ice::StringID", %"class.Ice::StringID" }
%"class.Ice::InstHighLevel.base" = type { %"class.Ice::Inst.base" }
%"class.Ice::Inst.base" = type <{ i32 (...)**, %"class.llvm::ilist_node", i32, i32, i8, i8, i8, i8, [4 x i8], i8*, %"class.Ice::Variable"*, i32, [4 x i8], %"class.std::__1::vector.216", i32 }>
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246", %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.Ice::InstJumpTable"** }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"struct.Ice::sz_allocator.248" }
%"struct.Ice::sz_allocator.248" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.Ice::CfgNode" = type { %"class.Ice::Cfg"*, i32, i32, %"class.Ice::StringID.195", i32, i8, i8, i8, i32, %"class.std::__1::vector.196", %"class.std::__1::vector.196", %"class.llvm::iplist", %"class.llvm::iplist", i8* }
%"class.Ice::StringID.195" = type { i64 }
%"class.llvm::iplist" = type { %"class.llvm::iplist_impl" }
%"class.llvm::iplist_impl" = type { %"class.llvm::simple_ilist" }
%"class.llvm::simple_ilist" = type { %"class.llvm::ilist_sentinel" }
%"class.llvm::ilist_sentinel" = type { %"class.llvm::ilist_node_impl" }
%"class.std::__1::vector.249" = type { %"class.std::__1::__vector_base.250" }
%"class.std::__1::__vector_base.250" = type { %"struct.Ice::Loop"*, %"struct.Ice::Loop"*, %"class.std::__1::__compressed_pair.274" }
%"struct.Ice::Loop" = type { %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"*, %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.251" }
%"class.std::__1::__hash_table.251" = type <{ %"class.std::__1::unique_ptr.252", %"class.std::__1::__compressed_pair.261", %"class.std::__1::__compressed_pair.265", %"class.std::__1::__compressed_pair.269", [4 x i8] }>
%"class.std::__1::unique_ptr.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254", %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.std::__1::__hash_node_base.255"** }
%"struct.std::__1::__hash_node_base.255" = type { %"struct.std::__1::__hash_node_base.255"* }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.std::__1::__bucket_list_deallocator.257" }
%"class.std::__1::__bucket_list_deallocator.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.34", %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"struct.Ice::sz_allocator.260" }
%"struct.Ice::sz_allocator.260" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262", %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"struct.std::__1::__hash_node_base.255" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"struct.Ice::sz_allocator.264" }
%"struct.Ice::sz_allocator.264" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275", %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"struct.Ice::Loop"* }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.Ice::sz_allocator.277" }
%"struct.Ice::sz_allocator.277" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.Ice::(anonymous namespace)::LocalVariableSplitter" = type { %"class.Ice::TargetLowering"*, %"class.Ice::CfgNode"*, %"class.Ice::Inst"*, %"class.Ice::Variable"*, %"class.llvm::ilist_iterator", %"class.llvm::ilist_iterator", i8, %"class.Ice::(anonymous namespace)::VariableMap", %"class.std::__1::vector.201", %"class.Ice::Inst"*, %"class.Ice::Inst"* }
%"class.Ice::(anonymous namespace)::VariableMap" = type { %"class.Ice::Cfg"*, i32, %"class.std::__1::vector.333", %"class.Ice::CfgNode"* }
%"class.std::__1::vector.333" = type { %"class.std::__1::__vector_base.334" }
%"class.std::__1::__vector_base.334" = type { %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"class.std::__1::__compressed_pair.335" }
%"struct.Ice::(anonymous namespace)::VariableMap::VarInfo" = type { %"class.Ice::Variable"*, %"class.Ice::CfgNode"*, %"class.Ice::Inst"*, %"class.Ice::CfgNode"* }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336", %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"struct.Ice::sz_allocator.338" }
%"struct.Ice::sz_allocator.338" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::pair.340" = type { i8*, i64 }

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE8AllocateEmm = comdat any

$_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_ = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE12StartNewSlabEv = comdat any

$_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_ = comdat any

@.str = private unnamed_addr constant [32 x i8] c"After splitting local variables\00", align 1
@_ZN3Ice7ClFlags5FlagsE = external global %"class.Ice::ClFlags", align 8

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice24splitBlockLocalVariablesEPNS_3CfgE(%"class.Ice::Cfg"*) local_unnamed_addr #0 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.Ice::(anonymous namespace)::LocalVariableSplitter", align 8
  %4 = load i8, i8* getelementptr inbounds (%"class.Ice::ClFlags", %"class.Ice::ClFlags"* @_ZN3Ice7ClFlags5FlagsE, i64 0, i32 46), align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %696, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 160, i1 false)
  %8 = getelementptr inbounds %"class.Ice::Cfg", %"class.Ice::Cfg"* %0, i64 0, i32 23, i32 0, i32 0, i32 0
  %9 = bitcast %"class.Ice::TargetLowering"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 0
  %14 = bitcast %"class.Ice::CfgNode"** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 41, i1 false) #6
  store %"class.Ice::Cfg"* %0, %"class.Ice::Cfg"** %13, align 8
  %15 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 1
  %16 = getelementptr inbounds %"class.Ice::Cfg", %"class.Ice::Cfg"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.Ice::Cfg", %"class.Ice::Cfg"* %0, i64 0, i32 17, i32 0, i32 1
  %18 = bitcast %"class.Ice::Variable"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector.201"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = lshr exact i64 %22, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2
  %26 = and i64 %23, 4294967295
  %27 = bitcast %"class.std::__1::vector.333"* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 32, i1 false) #6
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %47, label %29

29:                                               ; preds = %6
  %30 = tail call %"class.llvm::BumpPtrAllocatorImpl"* @_ZN3Ice18CfgAllocatorTraits7currentEv() #7
  %31 = shl nuw nsw i64 %26, 5
  %32 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %30, i64 %31, i64 8) #7
  %33 = bitcast i8* %32 to %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*
  %34 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2, i32 0, i32 1
  %35 = bitcast %"class.std::__1::vector.333"* %25 to i8**
  store i8* %32, i8** %35, align 8
  %36 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %33, i64 %26
  %37 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %36, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %37, align 8
  %38 = bitcast %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %34 to i64*
  %39 = ptrtoint i8* %32 to i64
  %40 = add nsw i64 %26, -1
  %41 = getelementptr %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %33, i64 %40, i32 0
  %42 = ptrtoint %"class.Ice::Variable"** %41 to i64
  %43 = sub i64 32, %39
  %44 = add i64 %43, %42
  %45 = and i64 %44, -32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 %45, i1 false) #6
  %46 = ptrtoint %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %36 to i64
  store i64 %46, i64* %38, align 8
  br label %47

47:                                               ; preds = %6, %29
  %48 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 3
  %49 = bitcast %"class.Ice::CfgNode"** %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 56, i1 false) #6
  %50 = getelementptr inbounds %"class.Ice::Cfg", %"class.Ice::Cfg"* %0, i64 0, i32 14, i32 0, i32 0
  %51 = load %"class.Ice::CfgNode"**, %"class.Ice::CfgNode"*** %50, align 8
  %52 = getelementptr inbounds %"class.Ice::Cfg", %"class.Ice::Cfg"* %0, i64 0, i32 14, i32 0, i32 1
  %53 = load %"class.Ice::CfgNode"**, %"class.Ice::CfgNode"*** %52, align 8
  %54 = icmp eq %"class.Ice::CfgNode"** %51, %53
  br i1 %54, label %80, label %55

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2, i32 0, i32 0
  %57 = bitcast %"class.Ice::CfgNode"** %48 to i64*
  %58 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8
  %59 = bitcast %"class.std::__1::vector.201"* %58 to i64*
  %60 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8, i32 0, i32 1
  %61 = bitcast %"class.Ice::Variable"*** %60 to i64*
  %62 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 6
  %63 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 2
  %64 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 3
  %65 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 4, i32 0
  %66 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 5, i32 0
  %67 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %68 = bitcast %"class.Ice::Variable"*** %67 to i64*
  %69 = bitcast %"class.Ice::Variable"** %64 to i64*
  %70 = getelementptr inbounds %"class.std::__1::vector.201", %"class.std::__1::vector.201"* %58, i64 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 10
  %72 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 9
  %73 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %74 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7
  %78 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 0
  %79 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8, i32 0, i32 0
  br label %97

80:                                               ; preds = %693, %47
  call void @_ZN3Ice3Cfg4dumpEPKc(%"class.Ice::Cfg"* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0)) #7
  %81 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8, i32 0, i32 0
  %82 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %81, align 8
  %83 = icmp eq %"class.Ice::Variable"** %82, null
  br i1 %83, label %88, label %84

84:                                               ; preds = %80
  %85 = ptrtoint %"class.Ice::Variable"** %82 to i64
  %86 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 8, i32 0, i32 1
  %87 = bitcast %"class.Ice::Variable"*** %86 to i64*
  store i64 %85, i64* %87, align 8
  br label %88

88:                                               ; preds = %84, %80
  %89 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2, i32 0, i32 0
  %90 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %89, align 8
  %91 = icmp eq %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %90, null
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = ptrtoint %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %90 to i64
  %94 = getelementptr inbounds %"class.Ice::(anonymous namespace)::LocalVariableSplitter", %"class.Ice::(anonymous namespace)::LocalVariableSplitter"* %3, i64 0, i32 7, i32 2, i32 0, i32 1
  %95 = bitcast %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %94 to i64*
  store i64 %93, i64* %95, align 8
  br label %96

96:                                               ; preds = %88, %92
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #6
  br label %696

97:                                               ; preds = %55, %693
  %98 = phi i64 [ 0, %55 ], [ %657, %693 ]
  %99 = phi %"class.Ice::CfgNode"** [ %51, %55 ], [ %694, %693 ]
  %100 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %99, align 8
  store %"class.Ice::CfgNode"* %100, %"class.Ice::CfgNode"** %12, align 8
  store %"class.Ice::CfgNode"* %100, %"class.Ice::CfgNode"** %48, align 8
  %101 = getelementptr inbounds %"class.Ice::CfgNode", %"class.Ice::CfgNode"* %100, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %102 = getelementptr inbounds %"class.Ice::CfgNode", %"class.Ice::CfgNode"* %100, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  %103 = bitcast %"class.llvm::ilist_node_base"** %101 to %"class.llvm::ilist_node_impl"**
  %104 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %103, align 8
  %105 = icmp eq %"class.llvm::ilist_node_impl"* %104, %102
  br i1 %105, label %106, label %108

106:                                              ; preds = %97
  %107 = ptrtoint %"class.llvm::ilist_node_impl"* %104 to i64
  br label %171

108:                                              ; preds = %97, %162
  %109 = phi %"class.llvm::ilist_node_impl"* [ %165, %162 ], [ %104, %97 ]
  %110 = icmp eq %"class.llvm::ilist_node_impl"* %109, null
  %111 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %109, i64 -1, i32 0, i32 1
  %112 = bitcast %"class.llvm::ilist_node_base"** %111 to %"class.Ice::Inst"*
  %113 = select i1 %110, %"class.Ice::Inst"* null, %"class.Ice::Inst"* %112
  %114 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %113, i64 0, i32 4
  %115 = load i8, i8* %114, align 8, !range !2
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %162

117:                                              ; preds = %108
  %118 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %113, i64 0, i32 13
  %119 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %113, i64 0, i32 13, i32 0, i32 1
  %120 = bitcast %"class.Ice::Operand"*** %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = bitcast %"class.std::__1::vector.216"* %118 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %121, %123
  %125 = lshr exact i64 %124, 3
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %162, label %128

128:                                              ; preds = %117, %154
  %129 = phi i64 [ %155, %154 ], [ %123, %117 ]
  %130 = phi i64 [ %156, %154 ], [ %121, %117 ]
  %131 = phi i64 [ %157, %154 ], [ 0, %117 ]
  %132 = inttoptr i64 %129 to %"class.Ice::Operand"**
  %133 = getelementptr inbounds %"class.Ice::Operand"*, %"class.Ice::Operand"** %132, i64 %131
  %134 = load %"class.Ice::Operand"*, %"class.Ice::Operand"** %133, align 8
  %135 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %134, i64 0, i32 2
  %136 = load i32, i32* %135, align 4
  %137 = add i32 %136, -18
  %138 = icmp ugt i32 %137, 14
  %139 = icmp eq %"class.Ice::Operand"* %134, null
  %140 = or i1 %139, %138
  br i1 %140, label %154, label %141

141:                                              ; preds = %128
  %142 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %134, i64 1
  %143 = bitcast %"class.Ice::Operand"* %142 to i32*
  %144 = load i32, i32* %143, align 8
  %145 = zext i32 %144 to i64
  %146 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %147 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %146, i64 %145, i32 2
  store %"class.Ice::Inst"* %113, %"class.Ice::Inst"** %147, align 8
  %148 = load i64, i64* %57, align 8
  %149 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %150 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %149, i64 %145, i32 3
  %151 = bitcast %"class.Ice::CfgNode"** %150 to i64*
  store i64 %148, i64* %151, align 8
  %152 = load i64, i64* %120, align 8
  %153 = load i64, i64* %122, align 8
  br label %154

154:                                              ; preds = %141, %128
  %155 = phi i64 [ %129, %128 ], [ %153, %141 ]
  %156 = phi i64 [ %130, %128 ], [ %152, %141 ]
  %157 = add nuw nsw i64 %131, 1
  %158 = sub i64 %156, %155
  %159 = lshr exact i64 %158, 3
  %160 = and i64 %159, 4294967295
  %161 = icmp ult i64 %157, %160
  br i1 %161, label %128, label %162

162:                                              ; preds = %154, %117, %108
  %163 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %109, i64 0, i32 0, i32 1
  %164 = bitcast %"class.llvm::ilist_node_base"** %163 to %"class.llvm::ilist_node_impl"**
  %165 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %164, align 8
  %166 = icmp eq %"class.llvm::ilist_node_impl"* %165, %102
  br i1 %166, label %167, label %108

167:                                              ; preds = %162
  %168 = load i64, i64* %59, align 8
  %169 = bitcast %"class.llvm::ilist_node_base"** %101 to i64*
  %170 = load i64, i64* %169, align 8
  br label %171

171:                                              ; preds = %106, %167
  %172 = phi i64 [ %170, %167 ], [ %107, %106 ]
  %173 = phi i64 [ %168, %167 ], [ %98, %106 ]
  store i64 %173, i64* %61, align 8
  %174 = inttoptr i64 %172 to %"class.llvm::ilist_node_impl"*
  %175 = icmp eq %"class.llvm::ilist_node_impl"* %102, %174
  %176 = inttoptr i64 %173 to %"class.Ice::Variable"**
  br i1 %175, label %653, label %177

177:                                              ; preds = %171, %649
  %178 = phi %"class.llvm::ilist_node_impl"* [ %193, %649 ], [ %174, %171 ]
  %179 = phi i64 [ %185, %649 ], [ %172, %171 ]
  %180 = load i8, i8* %62, align 8, !range !2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %651

182:                                              ; preds = %177
  %183 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %178, i64 0, i32 0, i32 1
  %184 = bitcast %"class.llvm::ilist_node_base"** %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = icmp eq i64 %179, 0
  %187 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %178, i64 -1, i32 0, i32 1
  %188 = bitcast %"class.llvm::ilist_node_base"** %187 to %"class.Ice::Inst"*
  %189 = select i1 %186, %"class.Ice::Inst"* null, %"class.Ice::Inst"* %188
  %190 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %189, i64 0, i32 4
  %191 = load i8, i8* %190, align 8, !range !2
  %192 = icmp eq i8 %191, 0
  %193 = inttoptr i64 %185 to %"class.llvm::ilist_node_impl"*
  br i1 %192, label %194, label %649

194:                                              ; preds = %182
  store %"class.Ice::Inst"* %189, %"class.Ice::Inst"** %63, align 8
  %195 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %189, i64 0, i32 10
  %196 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %195, align 8
  store %"class.Ice::Variable"* %196, %"class.Ice::Variable"** %64, align 8
  store %"class.llvm::ilist_node_impl"* %178, %"class.llvm::ilist_node_impl"** %65, align 8
  store %"class.llvm::ilist_node_impl"* %193, %"class.llvm::ilist_node_impl"** %66, align 8
  store i8 0, i8* %62, align 8
  %197 = icmp eq %"class.Ice::Variable"* %196, null
  %198 = ptrtoint %"class.Ice::Variable"* %196 to i64
  br i1 %197, label %265, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %196, i64 0, i32 14
  %201 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %200, align 8
  %202 = icmp eq %"class.Ice::Variable"* %201, null
  br i1 %202, label %265, label %203

203:                                              ; preds = %199
  %204 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %60, align 8
  %205 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %67, align 8
  %206 = icmp ult %"class.Ice::Variable"** %204, %205
  %207 = ptrtoint %"class.Ice::Variable"** %205 to i64
  br i1 %206, label %208, label %212

208:                                              ; preds = %203
  %209 = bitcast %"class.Ice::Variable"** %204 to i64*
  store i64 %198, i64* %209, align 8
  %210 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %204, i64 1
  %211 = ptrtoint %"class.Ice::Variable"** %210 to i64
  store i64 %211, i64* %61, align 8
  br label %265

212:                                              ; preds = %203
  %213 = ptrtoint %"class.Ice::Variable"** %204 to i64
  %214 = load i64, i64* %59, align 8
  %215 = sub i64 %213, %214
  %216 = ashr exact i64 %215, 3
  %217 = add nsw i64 %216, 1
  %218 = icmp ugt i64 %217, 2305843009213693951
  %219 = inttoptr i64 %214 to %"class.Ice::Variable"**
  br i1 %218, label %220, label %222

220:                                              ; preds = %212
  %221 = bitcast %"class.std::__1::vector.201"* %58 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #8
  unreachable

222:                                              ; preds = %212
  %223 = sub i64 %207, %214
  %224 = ashr exact i64 %223, 3
  %225 = icmp ult i64 %224, 1152921504606846975
  br i1 %225, label %226, label %231

226:                                              ; preds = %222
  %227 = ashr exact i64 %223, 2
  %228 = icmp ult i64 %227, %217
  %229 = select i1 %228, i64 %217, i64 %227
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %240, label %231

231:                                              ; preds = %226, %222
  %232 = phi i64 [ %229, %226 ], [ 2305843009213693951, %222 ]
  %233 = call %"class.llvm::BumpPtrAllocatorImpl"* @_ZN3Ice18CfgAllocatorTraits7currentEv() #7
  %234 = shl i64 %232, 3
  %235 = call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %233, i64 %234, i64 8) #7
  %236 = bitcast i8* %235 to %"class.Ice::Variable"**
  %237 = load i64, i64* %69, align 8
  %238 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %70, align 8
  %239 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %60, align 8
  br label %240

240:                                              ; preds = %231, %226
  %241 = phi %"class.Ice::Variable"** [ %239, %231 ], [ %204, %226 ]
  %242 = phi %"class.Ice::Variable"** [ %238, %231 ], [ %219, %226 ]
  %243 = phi i64 [ %237, %231 ], [ %198, %226 ]
  %244 = phi i64 [ %232, %231 ], [ 0, %226 ]
  %245 = phi %"class.Ice::Variable"** [ %236, %231 ], [ null, %226 ]
  %246 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %245, i64 %216
  %247 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %245, i64 %244
  %248 = ptrtoint %"class.Ice::Variable"** %247 to i64
  %249 = bitcast %"class.Ice::Variable"** %246 to i64*
  store i64 %243, i64* %249, align 8
  %250 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %246, i64 1
  %251 = ptrtoint %"class.Ice::Variable"** %250 to i64
  %252 = icmp eq %"class.Ice::Variable"** %241, %242
  br i1 %252, label %262, label %253

253:                                              ; preds = %240, %253
  %254 = phi %"class.Ice::Variable"** [ %256, %253 ], [ %246, %240 ]
  %255 = phi %"class.Ice::Variable"** [ %257, %253 ], [ %241, %240 ]
  %256 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %254, i64 -1
  %257 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %255, i64 -1
  %258 = bitcast %"class.Ice::Variable"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.Ice::Variable"** %256 to i64*
  store i64 %259, i64* %260, align 8
  %261 = icmp eq %"class.Ice::Variable"** %257, %242
  br i1 %261, label %262, label %253

262:                                              ; preds = %253, %240
  %263 = phi %"class.Ice::Variable"** [ %246, %240 ], [ %256, %253 ]
  %264 = ptrtoint %"class.Ice::Variable"** %263 to i64
  store i64 %264, i64* %59, align 8
  store i64 %251, i64* %61, align 8
  store i64 %248, i64* %68, align 8
  br label %265

265:                                              ; preds = %194, %199, %208, %262
  %266 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %267 = bitcast %"class.Ice::Inst"* %266 to i1 (%"class.Ice::Inst"*)***
  %268 = load i1 (%"class.Ice::Inst"*)**, i1 (%"class.Ice::Inst"*)*** %267, align 8
  %269 = getelementptr inbounds i1 (%"class.Ice::Inst"*)*, i1 (%"class.Ice::Inst"*)** %268, i64 6
  %270 = load i1 (%"class.Ice::Inst"*)*, i1 (%"class.Ice::Inst"*)** %269, align 8
  %271 = call zeroext i1 %270(%"class.Ice::Inst"* %266) #7
  %272 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  br i1 %271, label %273, label %284

273:                                              ; preds = %265
  %274 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %275 = icmp eq %"class.Ice::Inst"* %272, %274
  br i1 %275, label %276, label %277

276:                                              ; preds = %273
  store %"class.Ice::Inst"* null, %"class.Ice::Inst"** %72, align 8
  br label %649

277:                                              ; preds = %273
  %278 = icmp eq %"class.Ice::Inst"* %274, null
  %279 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %71, align 8
  %280 = icmp eq %"class.Ice::Inst"* %279, null
  %281 = and i1 %278, %280
  br i1 %281, label %282, label %283

282:                                              ; preds = %277
  store %"class.Ice::Inst"* %272, %"class.Ice::Inst"** %71, align 8
  br label %649

283:                                              ; preds = %277
  store i8 1, i8* %62, align 8
  br label %649

284:                                              ; preds = %265
  %285 = bitcast %"class.Ice::Inst"* %272 to %"class.Ice::Inst"* (%"class.Ice::Inst"*)***
  %286 = load %"class.Ice::Inst"* (%"class.Ice::Inst"*)**, %"class.Ice::Inst"* (%"class.Ice::Inst"*)*** %285, align 8
  %287 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::Inst"*)*, %"class.Ice::Inst"* (%"class.Ice::Inst"*)** %286, i64 7
  %288 = load %"class.Ice::Inst"* (%"class.Ice::Inst"*)*, %"class.Ice::Inst"* (%"class.Ice::Inst"*)** %287, align 8
  %289 = call %"class.Ice::Inst"* %288(%"class.Ice::Inst"* %272) #7
  %290 = icmp eq %"class.Ice::Inst"* %289, null
  br i1 %290, label %305, label %291

291:                                              ; preds = %284
  %292 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %71, align 8
  %293 = icmp eq %"class.Ice::Inst"* %292, %289
  %294 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %295 = icmp eq %"class.Ice::Inst"* %294, null
  %296 = and i1 %293, %295
  br i1 %296, label %297, label %298

297:                                              ; preds = %291
  store %"class.Ice::Inst"* null, %"class.Ice::Inst"** %71, align 8
  br label %649

298:                                              ; preds = %291
  %299 = icmp eq %"class.Ice::Inst"* %292, null
  %300 = icmp eq %"class.Ice::Inst"* %294, %289
  %301 = or i1 %295, %300
  %302 = and i1 %299, %301
  br i1 %302, label %303, label %304

303:                                              ; preds = %298
  store %"class.Ice::Inst"* %289, %"class.Ice::Inst"** %72, align 8
  br label %649

304:                                              ; preds = %298
  store i8 1, i8* %62, align 8
  br label %649

305:                                              ; preds = %284
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #6
  store i8 0, i8* %75, align 1
  store i8 0, i8* %73, align 8
  %306 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %307 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %306, i64 0, i32 3
  %308 = load i32, i32* %307, align 4
  %309 = call zeroext i1 @_ZNK3Ice9RangeSpec5matchERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj(%"class.Ice::RangeSpec"* getelementptr inbounds (%"class.Ice::ClFlags", %"class.Ice::ClFlags"* @_ZN3Ice7ClFlags5FlagsE, i64 0, i32 69), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2, i32 %308) #7
  %310 = load i8, i8* %75, align 1
  %311 = icmp slt i8 %310, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %305
  %313 = load i8*, i8** %76, align 8
  call void @_ZdlPv(i8* %313) #9
  br label %314

314:                                              ; preds = %312, %305
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #6
  br i1 %309, label %315, label %649

315:                                              ; preds = %314
  %316 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %317 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %316, i64 0, i32 2
  %318 = load i32, i32* %317, align 8
  %319 = icmp slt i32 %318, 26
  br i1 %319, label %649, label %320

320:                                              ; preds = %315
  %321 = bitcast %"class.Ice::Inst"* %316 to i1 (%"class.Ice::Inst"*)***
  %322 = load i1 (%"class.Ice::Inst"*)**, i1 (%"class.Ice::Inst"*)*** %321, align 8
  %323 = getelementptr inbounds i1 (%"class.Ice::Inst"*)*, i1 (%"class.Ice::Inst"*)** %322, i64 4
  %324 = load i1 (%"class.Ice::Inst"*)*, i1 (%"class.Ice::Inst"*)** %323, align 8
  %325 = call zeroext i1 %324(%"class.Ice::Inst"* %316) #7
  %326 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %64, align 8
  br i1 %325, label %327, label %477

327:                                              ; preds = %320
  %328 = icmp eq %"class.Ice::Variable"* %326, null
  br i1 %328, label %338, label %329

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 9, i32 0
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, -1
  br i1 %332, label %333, label %338

333:                                              ; preds = %329
  %334 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 7
  %335 = load i8, i8* %334, align 4
  %336 = icmp ne i8 %335, 1
  %337 = icmp ne i8 %335, 0
  br label %338

338:                                              ; preds = %333, %329, %327
  %339 = phi i1 [ %336, %333 ], [ true, %327 ], [ false, %329 ]
  %340 = phi i1 [ %337, %333 ], [ true, %327 ], [ true, %329 ]
  %341 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %342 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %341, i64 0, i32 13, i32 0, i32 0
  %343 = load %"class.Ice::Operand"**, %"class.Ice::Operand"*** %342, align 8
  %344 = bitcast %"class.Ice::Operand"** %343 to %"class.Ice::Variable"**
  %345 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %344, align 8
  %346 = icmp eq %"class.Ice::Variable"* %345, null
  br i1 %346, label %477, label %347

347:                                              ; preds = %338
  %348 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %345, i64 0, i32 9, i32 0
  %349 = load i32, i32* %348, align 8
  %350 = icmp eq i32 %349, -1
  br i1 %350, label %351, label %356

351:                                              ; preds = %347
  %352 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %345, i64 0, i32 7
  %353 = load i8, i8* %352, align 4
  %354 = icmp ne i8 %353, 1
  %355 = icmp ne i8 %353, 0
  br label %356

356:                                              ; preds = %351, %347
  %357 = phi i1 [ %354, %351 ], [ false, %347 ]
  %358 = phi i1 [ %355, %351 ], [ true, %347 ]
  %359 = or i1 %339, %357
  br i1 %359, label %360, label %649

360:                                              ; preds = %356
  %361 = or i1 %339, %358
  br i1 %361, label %415, label %362

362:                                              ; preds = %360
  %363 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 0, i32 1
  %364 = load i32, i32* %363, align 8
  %365 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %345, i64 0, i32 0, i32 1
  %366 = load i32, i32* %365, align 8
  %367 = icmp eq i32 %364, %366
  br i1 %367, label %368, label %415

368:                                              ; preds = %362
  %369 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %345, i64 0, i32 1
  %370 = load i32, i32* %369, align 8
  %371 = zext i32 %370 to i64
  %372 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %373 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %372, i64 %371, i32 0
  %374 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %373, align 8
  %375 = icmp eq %"class.Ice::Variable"* %374, null
  br i1 %375, label %382, label %376

376:                                              ; preds = %368
  %377 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %372, i64 %371, i32 1
  %378 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %377, align 8
  %379 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %48, align 8
  %380 = icmp eq %"class.Ice::CfgNode"* %378, %379
  %381 = select i1 %380, %"class.Ice::Variable"* %374, %"class.Ice::Variable"* %345
  br label %382

382:                                              ; preds = %376, %368
  %383 = phi %"class.Ice::Variable"* [ %345, %368 ], [ %381, %376 ]
  %384 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %383, i64 0, i32 0
  store %"class.Ice::Operand"* %384, %"class.Ice::Operand"** %343, align 8
  %385 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %386 = icmp eq %"class.Ice::Inst"* %385, null
  br i1 %386, label %387, label %649

387:                                              ; preds = %382
  %388 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %389 = load i32, i32* %369, align 8
  %390 = zext i32 %389 to i64
  %391 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %392 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %391, i64 %390, i32 2
  %393 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %392, align 8
  %394 = icmp eq %"class.Ice::Inst"* %393, %388
  br i1 %394, label %649, label %395

395:                                              ; preds = %387
  %396 = call fastcc %"class.Ice::Variable"* @_ZN3Ice12_GLOBAL__N_111VariableMap10makeLinkedEPNS_8VariableE(%"class.Ice::(anonymous namespace)::VariableMap"* %77, %"class.Ice::Variable"* nonnull %345) #7
  %397 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %398 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %64, align 8
  %399 = bitcast %"class.Ice::TargetLowering"* %397 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %400 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %399, align 8
  %401 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %400, i64 41
  %402 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %401, align 8
  %403 = call %"class.Ice::Inst"* %402(%"class.Ice::TargetLowering"* %397, %"class.Ice::Variable"* %396, %"class.Ice::Variable"* %398) #7
  %404 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %66, align 8
  %405 = icmp eq %"class.Ice::Inst"* %403, null
  %406 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %403, i64 0, i32 1, i32 0
  %407 = select i1 %405, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %406
  %408 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %404, i64 0, i32 0
  %409 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %407, i64 0, i32 0
  %410 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %404, i64 0, i32 0, i32 0
  %411 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %410, align 8
  %412 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %407, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %408, %"class.llvm::ilist_node_base"** %412, align 8
  %413 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %407, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %411, %"class.llvm::ilist_node_base"** %413, align 8
  %414 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %411, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %409, %"class.llvm::ilist_node_base"** %414, align 8
  store %"class.llvm::ilist_node_base"* %409, %"class.llvm::ilist_node_base"** %410, align 8
  br label %649

415:                                              ; preds = %362, %360
  %416 = or i1 %340, %357
  br i1 %416, label %477, label %417

417:                                              ; preds = %415
  %418 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 1
  %419 = load i32, i32* %418, align 8
  %420 = zext i32 %419 to i64
  %421 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %422 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %421, i64 %420, i32 3
  %423 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %422, align 8
  %424 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %48, align 8
  %425 = icmp eq %"class.Ice::CfgNode"* %423, %424
  br i1 %425, label %426, label %649

426:                                              ; preds = %417
  %427 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %428 = icmp eq %"class.Ice::Inst"* %427, null
  br i1 %428, label %429, label %448

429:                                              ; preds = %426
  %430 = call fastcc %"class.Ice::Variable"* @_ZN3Ice12_GLOBAL__N_111VariableMap10makeLinkedEPNS_8VariableE(%"class.Ice::(anonymous namespace)::VariableMap"* %77, %"class.Ice::Variable"* %326) #7
  %431 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %432 = bitcast %"class.Ice::TargetLowering"* %431 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %433 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %432, align 8
  %434 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %433, i64 41
  %435 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %434, align 8
  %436 = call %"class.Ice::Inst"* %435(%"class.Ice::TargetLowering"* %431, %"class.Ice::Variable"* %430, %"class.Ice::Variable"* nonnull %345) #7
  %437 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %66, align 8
  %438 = icmp eq %"class.Ice::Inst"* %436, null
  %439 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %436, i64 0, i32 1, i32 0
  %440 = select i1 %438, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %439
  %441 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %437, i64 0, i32 0
  %442 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %440, i64 0, i32 0
  %443 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %437, i64 0, i32 0, i32 0
  %444 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %443, align 8
  %445 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %440, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %441, %"class.llvm::ilist_node_base"** %445, align 8
  %446 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %440, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %444, %"class.llvm::ilist_node_base"** %446, align 8
  %447 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %444, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %442, %"class.llvm::ilist_node_base"** %447, align 8
  store %"class.llvm::ilist_node_base"* %442, %"class.llvm::ilist_node_base"** %443, align 8
  br label %649

448:                                              ; preds = %426
  %449 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %421, i64 %420, i32 0
  %450 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %449, align 8
  %451 = icmp eq %"class.Ice::Variable"* %450, null
  br i1 %451, label %457, label %452

452:                                              ; preds = %448
  %453 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %421, i64 %420, i32 1
  %454 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %453, align 8
  %455 = icmp eq %"class.Ice::CfgNode"* %454, %423
  %456 = select i1 %455, %"class.Ice::Variable"* %450, %"class.Ice::Variable"* %326
  br label %457

457:                                              ; preds = %452, %448
  %458 = phi %"class.Ice::Variable"* [ %326, %448 ], [ %456, %452 ]
  %459 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %460 = bitcast %"class.Ice::TargetLowering"* %459 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %461 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %460, align 8
  %462 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %461, i64 41
  %463 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %462, align 8
  %464 = call %"class.Ice::Inst"* %463(%"class.Ice::TargetLowering"* %459, %"class.Ice::Variable"* %458, %"class.Ice::Variable"* nonnull %345) #7
  %465 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %464, i64 0, i32 7
  store i8 1, i8* %465, align 1
  %466 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %66, align 8
  %467 = icmp eq %"class.Ice::Inst"* %464, null
  %468 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %464, i64 0, i32 1, i32 0
  %469 = select i1 %467, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %468
  %470 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %466, i64 0, i32 0
  %471 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %469, i64 0, i32 0
  %472 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %466, i64 0, i32 0, i32 0
  %473 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %472, align 8
  %474 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %469, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %470, %"class.llvm::ilist_node_base"** %474, align 8
  %475 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %469, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %473, %"class.llvm::ilist_node_base"** %475, align 8
  %476 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %473, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %471, %"class.llvm::ilist_node_base"** %476, align 8
  store %"class.llvm::ilist_node_base"* %471, %"class.llvm::ilist_node_base"** %472, align 8
  br label %649

477:                                              ; preds = %320, %415, %338
  %478 = icmp eq %"class.Ice::Variable"* %326, null
  br i1 %478, label %487, label %479

479:                                              ; preds = %477
  %480 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 9, i32 0
  %481 = load i32, i32* %480, align 8
  %482 = icmp eq i32 %481, -1
  br i1 %482, label %483, label %487

483:                                              ; preds = %479
  %484 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %326, i64 0, i32 7
  %485 = load i8, i8* %484, align 4
  %486 = icmp eq i8 %485, 0
  br label %487

487:                                              ; preds = %483, %479, %477
  %488 = phi i1 [ false, %477 ], [ false, %479 ], [ %486, %483 ]
  %489 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %490 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %489, i64 0, i32 13
  %491 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %489, i64 0, i32 13, i32 0, i32 1
  %492 = bitcast %"class.Ice::Operand"*** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.std::__1::vector.216"* %490 to i64*
  %495 = load i64, i64* %494, align 8
  %496 = sub i64 %493, %495
  %497 = lshr exact i64 %496, 3
  %498 = trunc i64 %497 to i32
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %500, label %501

500:                                              ; preds = %574, %487
  br i1 %488, label %587, label %649

501:                                              ; preds = %487, %574
  %502 = phi %"class.Ice::Inst"* [ %575, %574 ], [ %489, %487 ]
  %503 = phi i64 [ %576, %574 ], [ 0, %487 ]
  %504 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %502, i64 0, i32 13, i32 0, i32 0
  %505 = load %"class.Ice::Operand"**, %"class.Ice::Operand"*** %504, align 8
  %506 = getelementptr inbounds %"class.Ice::Operand"*, %"class.Ice::Operand"** %505, i64 %503
  %507 = load %"class.Ice::Operand"*, %"class.Ice::Operand"** %506, align 8
  %508 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %507, i64 0, i32 2
  %509 = load i32, i32* %508, align 4
  %510 = add i32 %509, -18
  %511 = icmp ugt i32 %510, 14
  %512 = bitcast %"class.Ice::Operand"* %507 to %"class.Ice::Variable"*
  %513 = icmp eq %"class.Ice::Operand"* %507, null
  %514 = or i1 %513, %511
  br i1 %514, label %574, label %515

515:                                              ; preds = %501
  %516 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %507, i64 1, i32 4
  %517 = bitcast %"class.Ice::Variable"*** %516 to i32*
  %518 = load i32, i32* %517, align 8
  %519 = icmp eq i32 %518, -1
  br i1 %519, label %520, label %574

520:                                              ; preds = %515
  %521 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %512, i64 0, i32 7
  %522 = load i8, i8* %521, align 4
  %523 = icmp eq i8 %522, 0
  br i1 %523, label %524, label %574

524:                                              ; preds = %520
  %525 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %507, i64 1
  %526 = bitcast %"class.Ice::Operand"* %525 to i32*
  %527 = load i32, i32* %526, align 8
  %528 = zext i32 %527 to i64
  %529 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %530 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %529, i64 %528, i32 0
  %531 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %530, align 8
  %532 = icmp eq %"class.Ice::Variable"* %531, null
  br i1 %532, label %539, label %533

533:                                              ; preds = %524
  %534 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %529, i64 %528, i32 1
  %535 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %534, align 8
  %536 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %48, align 8
  %537 = icmp eq %"class.Ice::CfgNode"* %535, %536
  %538 = select i1 %537, %"class.Ice::Variable"* %531, %"class.Ice::Variable"* %512
  br label %539

539:                                              ; preds = %533, %524
  %540 = phi %"class.Ice::Variable"* [ %512, %524 ], [ %538, %533 ]
  %541 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %542 = icmp eq %"class.Ice::Inst"* %541, null
  br i1 %542, label %543, label %569

543:                                              ; preds = %539
  %544 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %529, i64 %528, i32 2
  %545 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %544, align 8
  %546 = icmp eq %"class.Ice::Inst"* %545, %502
  br i1 %546, label %569, label %547

547:                                              ; preds = %543
  %548 = call fastcc %"class.Ice::Variable"* @_ZN3Ice12_GLOBAL__N_111VariableMap10makeLinkedEPNS_8VariableE(%"class.Ice::(anonymous namespace)::VariableMap"* %77, %"class.Ice::Variable"* nonnull %512) #7
  %549 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %550 = bitcast %"class.Ice::TargetLowering"* %549 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %551 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %550, align 8
  %552 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %551, i64 41
  %553 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %552, align 8
  %554 = call %"class.Ice::Inst"* %553(%"class.Ice::TargetLowering"* %549, %"class.Ice::Variable"* %548, %"class.Ice::Variable"* %540) #7
  %555 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %65, align 8
  %556 = icmp eq %"class.Ice::Inst"* %554, null
  %557 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %554, i64 0, i32 1, i32 0
  %558 = select i1 %556, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %557
  %559 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %555, i64 0, i32 0
  %560 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %558, i64 0, i32 0
  %561 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %555, i64 0, i32 0, i32 0
  %562 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %561, align 8
  %563 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %558, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %559, %"class.llvm::ilist_node_base"** %563, align 8
  %564 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %558, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %562, %"class.llvm::ilist_node_base"** %564, align 8
  %565 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %562, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %560, %"class.llvm::ilist_node_base"** %565, align 8
  store %"class.llvm::ilist_node_base"* %560, %"class.llvm::ilist_node_base"** %561, align 8
  %566 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  %567 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %566, i64 0, i32 13, i32 0, i32 0
  %568 = load %"class.Ice::Operand"**, %"class.Ice::Operand"*** %567, align 8
  br label %569

569:                                              ; preds = %547, %543, %539
  %570 = phi %"class.Ice::Operand"** [ %505, %543 ], [ %568, %547 ], [ %505, %539 ]
  %571 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %540, i64 0, i32 0
  %572 = getelementptr inbounds %"class.Ice::Operand"*, %"class.Ice::Operand"** %570, i64 %503
  store %"class.Ice::Operand"* %571, %"class.Ice::Operand"** %572, align 8
  %573 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %63, align 8
  br label %574

574:                                              ; preds = %569, %520, %515, %501
  %575 = phi %"class.Ice::Inst"* [ %502, %515 ], [ %502, %520 ], [ %573, %569 ], [ %502, %501 ]
  %576 = add nuw nsw i64 %503, 1
  %577 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %575, i64 0, i32 13
  %578 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %575, i64 0, i32 13, i32 0, i32 1
  %579 = bitcast %"class.Ice::Operand"*** %578 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = bitcast %"class.std::__1::vector.216"* %577 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = sub i64 %580, %582
  %584 = lshr exact i64 %583, 3
  %585 = and i64 %584, 4294967295
  %586 = icmp ult i64 %576, %585
  br i1 %586, label %501, label %500

587:                                              ; preds = %500
  %588 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %64, align 8
  %589 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %588, i64 0, i32 1
  %590 = load i32, i32* %589, align 8
  %591 = zext i32 %590 to i64
  %592 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  %593 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %592, i64 %591, i32 3
  %594 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %593, align 8
  %595 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %48, align 8
  %596 = icmp eq %"class.Ice::CfgNode"* %594, %595
  br i1 %596, label %597, label %649

597:                                              ; preds = %587
  %598 = load %"class.Ice::Inst"*, %"class.Ice::Inst"** %72, align 8
  %599 = icmp eq %"class.Ice::Inst"* %598, null
  br i1 %599, label %600, label %620

600:                                              ; preds = %597
  %601 = call fastcc %"class.Ice::Variable"* @_ZN3Ice12_GLOBAL__N_111VariableMap10makeLinkedEPNS_8VariableE(%"class.Ice::(anonymous namespace)::VariableMap"* %77, %"class.Ice::Variable"* %588) #7
  %602 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %603 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %64, align 8
  %604 = bitcast %"class.Ice::TargetLowering"* %602 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %605 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %604, align 8
  %606 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %605, i64 41
  %607 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %606, align 8
  %608 = call %"class.Ice::Inst"* %607(%"class.Ice::TargetLowering"* %602, %"class.Ice::Variable"* %601, %"class.Ice::Variable"* %603) #7
  %609 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %66, align 8
  %610 = icmp eq %"class.Ice::Inst"* %608, null
  %611 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %608, i64 0, i32 1, i32 0
  %612 = select i1 %610, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %611
  %613 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %609, i64 0, i32 0
  %614 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %612, i64 0, i32 0
  %615 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %609, i64 0, i32 0, i32 0
  %616 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %615, align 8
  %617 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %612, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %613, %"class.llvm::ilist_node_base"** %617, align 8
  %618 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %612, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %616, %"class.llvm::ilist_node_base"** %618, align 8
  %619 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %616, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %614, %"class.llvm::ilist_node_base"** %619, align 8
  store %"class.llvm::ilist_node_base"* %614, %"class.llvm::ilist_node_base"** %615, align 8
  br label %649

620:                                              ; preds = %597
  %621 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %592, i64 %591, i32 0
  %622 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %621, align 8
  %623 = icmp eq %"class.Ice::Variable"* %622, null
  br i1 %623, label %629, label %624

624:                                              ; preds = %620
  %625 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %592, i64 %591, i32 1
  %626 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %625, align 8
  %627 = icmp eq %"class.Ice::CfgNode"* %626, %594
  %628 = select i1 %627, %"class.Ice::Variable"* %622, %"class.Ice::Variable"* %588
  br label %629

629:                                              ; preds = %624, %620
  %630 = phi %"class.Ice::Variable"* [ %588, %620 ], [ %628, %624 ]
  %631 = load %"class.Ice::TargetLowering"*, %"class.Ice::TargetLowering"** %78, align 8
  %632 = bitcast %"class.Ice::TargetLowering"* %631 to %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)***
  %633 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)**, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*** %632, align 8
  %634 = getelementptr inbounds %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %633, i64 41
  %635 = load %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)*, %"class.Ice::Inst"* (%"class.Ice::TargetLowering"*, %"class.Ice::Variable"*, %"class.Ice::Variable"*)** %634, align 8
  %636 = call %"class.Ice::Inst"* %635(%"class.Ice::TargetLowering"* %631, %"class.Ice::Variable"* %630, %"class.Ice::Variable"* %588) #7
  %637 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %636, i64 0, i32 7
  store i8 1, i8* %637, align 1
  %638 = load %"class.llvm::ilist_node_impl"*, %"class.llvm::ilist_node_impl"** %66, align 8
  %639 = icmp eq %"class.Ice::Inst"* %636, null
  %640 = getelementptr inbounds %"class.Ice::Inst", %"class.Ice::Inst"* %636, i64 0, i32 1, i32 0
  %641 = select i1 %639, %"class.llvm::ilist_node_impl"* null, %"class.llvm::ilist_node_impl"* %640
  %642 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %638, i64 0, i32 0
  %643 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %641, i64 0, i32 0
  %644 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %638, i64 0, i32 0, i32 0
  %645 = load %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"** %644, align 8
  %646 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %641, i64 0, i32 0, i32 1
  store %"class.llvm::ilist_node_base"* %642, %"class.llvm::ilist_node_base"** %646, align 8
  %647 = getelementptr inbounds %"class.llvm::ilist_node_impl", %"class.llvm::ilist_node_impl"* %641, i64 0, i32 0, i32 0
  store %"class.llvm::ilist_node_base"* %645, %"class.llvm::ilist_node_base"** %647, align 8
  %648 = getelementptr inbounds %"class.llvm::ilist_node_base", %"class.llvm::ilist_node_base"* %645, i64 0, i32 1
  store %"class.llvm::ilist_node_base"* %643, %"class.llvm::ilist_node_base"** %648, align 8
  store %"class.llvm::ilist_node_base"* %643, %"class.llvm::ilist_node_base"** %644, align 8
  br label %649

649:                                              ; preds = %182, %429, %457, %417, %382, %395, %387, %356, %314, %297, %304, %303, %276, %283, %282, %629, %600, %587, %500, %315
  %650 = icmp eq %"class.llvm::ilist_node_impl"* %102, %193
  br i1 %650, label %651, label %177

651:                                              ; preds = %177, %649
  %652 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %60, align 8
  br label %653

653:                                              ; preds = %651, %171
  %654 = phi %"class.Ice::Variable"** [ %652, %651 ], [ %176, %171 ]
  %655 = load %"class.Ice::Variable"**, %"class.Ice::Variable"*** %79, align 8
  %656 = icmp eq %"class.Ice::Variable"** %655, %654
  %657 = ptrtoint %"class.Ice::Variable"** %655 to i64
  br i1 %656, label %693, label %658

658:                                              ; preds = %653
  %659 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %56, align 8
  br label %660

660:                                              ; preds = %658, %690
  %661 = phi %"class.Ice::Variable"** [ %691, %690 ], [ %655, %658 ]
  %662 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %661, align 8
  %663 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %662, i64 0, i32 14
  %664 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %663, align 8
  %665 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %664, i64 0, i32 1
  %666 = load i32, i32* %665, align 8
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %659, i64 %667, i32 0
  %669 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %668, align 8
  %670 = icmp eq %"class.Ice::Variable"* %669, null
  br i1 %670, label %690, label %671

671:                                              ; preds = %660
  %672 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %659, i64 %667, i32 1
  %673 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %672, align 8
  %674 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %48, align 8
  %675 = icmp eq %"class.Ice::CfgNode"* %673, %674
  br i1 %675, label %676, label %690

676:                                              ; preds = %671
  %677 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %662, i64 0, i32 1
  br label %678

678:                                              ; preds = %683, %676
  %679 = phi %"class.Ice::Variable"* [ %681, %683 ], [ %669, %676 ]
  %680 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %679, i64 0, i32 14
  %681 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %680, align 8
  %682 = icmp eq %"class.Ice::Variable"* %681, null
  br i1 %682, label %688, label %683

683:                                              ; preds = %678
  %684 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %681, i64 0, i32 1
  %685 = load i32, i32* %684, align 8
  %686 = load i32, i32* %677, align 8
  %687 = icmp ult i32 %685, %686
  br i1 %687, label %688, label %678

688:                                              ; preds = %683, %678
  %689 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %679, i64 0, i32 14
  store %"class.Ice::Variable"* %681, %"class.Ice::Variable"** %663, align 8
  store %"class.Ice::Variable"* %662, %"class.Ice::Variable"** %689, align 8
  br label %690

690:                                              ; preds = %688, %671, %660
  %691 = getelementptr inbounds %"class.Ice::Variable"*, %"class.Ice::Variable"** %661, i64 1
  %692 = icmp eq %"class.Ice::Variable"** %691, %654
  br i1 %692, label %693, label %660

693:                                              ; preds = %690, %653
  %694 = getelementptr inbounds %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %99, i64 1
  %695 = icmp eq %"class.Ice::CfgNode"** %694, %53
  br i1 %695, label %80, label %97

696:                                              ; preds = %1, %96
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare void @_ZN3Ice3Cfg4dumpEPKc(%"class.Ice::Cfg"*, i8*) local_unnamed_addr #2

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: optsize
declare %"class.llvm::BumpPtrAllocatorImpl"* @_ZN3Ice18CfgAllocatorTraits7currentEv() local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair.340", align 8
  %5 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %1
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = add i64 %2, -1
  %12 = add i64 %11, %10
  %13 = sub i64 0, %2
  %14 = and i64 %12, %13
  %15 = sub i64 %14, %10
  %16 = add i64 %15, %1
  %17 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %10
  %21 = icmp ugt i64 %16, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = getelementptr inbounds i8, i8* %9, i64 %15
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  store i8* %24, i8** %8, align 8
  br label %45

25:                                               ; preds = %3
  %26 = add i64 %11, %1
  %27 = icmp ugt i64 %26, 1048576
  br i1 %27, label %28, label %38

28:                                               ; preds = %25
  %29 = tail call noalias i8* @malloc(i64 %26) #7
  %30 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0
  %31 = bitcast %"struct.std::__1::pair.340"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #6
  %32 = getelementptr inbounds %"struct.std::__1::pair.340", %"struct.std::__1::pair.340"* %4, i64 0, i32 0
  store i8* %29, i8** %32, align 8
  %33 = getelementptr inbounds %"struct.std::__1::pair.340", %"struct.std::__1::pair.340"* %4, i64 0, i32 1
  store i64 %26, i64* %33, align 8
  call void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.2"* %30, %"struct.std::__1::pair.340"* nonnull dereferenceable(16) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #6
  %34 = ptrtoint i8* %29 to i64
  %35 = add i64 %11, %34
  %36 = and i64 %35, %13
  %37 = inttoptr i64 %36 to i8*
  br label %45

38:                                               ; preds = %25
  tail call void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"* %0) #10
  %39 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, %11
  %42 = and i64 %41, %13
  %43 = inttoptr i64 %42 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  store i8* %44, i8** %8, align 8
  br label %45

45:                                               ; preds = %28, %38, %22
  %46 = phi i8* [ %23, %22 ], [ %37, %28 ], [ %43, %38 ]
  ret i8* %46
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.2"*, %"struct.std::__1::pair.340"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !3

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 16) #7
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = bitcast i8** %3 to %"struct.std::__1::pair.340"**
  %15 = bitcast %"struct.std::__1::pair.340"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"struct.std::__1::pair.340"*, %"struct.std::__1::pair.340"** %14, align 8
  %17 = getelementptr inbounds %"struct.std::__1::pair.340", %"struct.std::__1::pair.340"* %16, i64 1
  store %"struct.std::__1::pair.340"* %17, %"struct.std::__1::pair.340"** %14, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.llvm::SmallVector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = lshr i64 %9, 10
  %11 = and i64 %10, 33554431
  %12 = icmp ult i64 %11, 30
  %13 = select i1 %12, i64 %11, i64 30
  %14 = shl i64 1048576, %13
  %15 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6
  %16 = tail call noalias i8* @malloc(i64 %14) #7
  store i8* %16, i8** %2, align 8
  %17 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %3, i64 0, i32 0, i32 0
  call void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"* %17, i8** nonnull dereferenceable(8) %2) #10
  %18 = bitcast i8** %2 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  store i64 %19, i64* %20, align 8
  %21 = inttoptr i64 %19 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 %14
  %23 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  store i8* %22, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"*, i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %10, !prof !3

8:                                                ; preds = %2
  %9 = bitcast i8* %4 to i64*
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %11, i8* %12, i64 0, i64 8) #7
  %13 = bitcast i8** %3 to i64**
  %14 = load i64*, i64** %13, align 8
  br label %15

15:                                               ; preds = %8, %10
  %16 = phi i64* [ %9, %8 ], [ %14, %10 ]
  %17 = bitcast i8** %3 to i8***
  %18 = bitcast i8** %1 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 1
  %20 = load i8**, i8*** %17, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  store i8** %21, i8*** %17, align 8
  ret void
}

; Function Attrs: optsize
declare zeroext i1 @_ZNK3Ice9RangeSpec5matchERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj(%"class.Ice::RangeSpec"*, %"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc %"class.Ice::Variable"* @_ZN3Ice12_GLOBAL__N_111VariableMap10makeLinkedEPNS_8VariableE(%"class.Ice::(anonymous namespace)::VariableMap"* nocapture readonly, %"class.Ice::Variable"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.Ice::(anonymous namespace)::VariableMap", %"class.Ice::(anonymous namespace)::VariableMap"* %0, i64 0, i32 0
  %4 = load %"class.Ice::Cfg"*, %"class.Ice::Cfg"** %3, align 8
  %5 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = tail call %"class.Ice::Variable"* @_ZN3Ice3Cfg12makeVariableINS_8VariableEEEPT_NS_4TypeE(%"class.Ice::Cfg"* %4, i32 %6) #7
  %8 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %1, i64 0, i32 8
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %7, i64 0, i32 8
  store i8 %9, i8* %10, align 1
  %11 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"class.Ice::(anonymous namespace)::VariableMap", %"class.Ice::(anonymous namespace)::VariableMap"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %14, align 8
  %16 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %15, i64 %13, i32 0
  %17 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %16, align 8
  %18 = icmp eq %"class.Ice::Variable"* %17, null
  br i1 %18, label %26, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %15, i64 %13, i32 1
  %21 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %20, align 8
  %22 = getelementptr inbounds %"class.Ice::(anonymous namespace)::VariableMap", %"class.Ice::(anonymous namespace)::VariableMap"* %0, i64 0, i32 3
  %23 = load %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"** %22, align 8
  %24 = icmp eq %"class.Ice::CfgNode"* %21, %23
  %25 = select i1 %24, %"class.Ice::Variable"* %17, %"class.Ice::Variable"* %1
  br label %26

26:                                               ; preds = %2, %19
  %27 = phi %"class.Ice::Variable"* [ %1, %2 ], [ %25, %19 ]
  %28 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %7, i64 0, i32 14
  store %"class.Ice::Variable"* %27, %"class.Ice::Variable"** %28, align 8
  %29 = load i32, i32* %11, align 8
  %30 = zext i32 %29 to i64
  %31 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %14, align 8
  %32 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %31, i64 %30, i32 0
  store %"class.Ice::Variable"* %7, %"class.Ice::Variable"** %32, align 8
  %33 = getelementptr inbounds %"class.Ice::(anonymous namespace)::VariableMap", %"class.Ice::(anonymous namespace)::VariableMap"* %0, i64 0, i32 3
  %34 = bitcast %"class.Ice::CfgNode"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = load %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"*, %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"** %14, align 8
  %37 = getelementptr inbounds %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo", %"struct.Ice::(anonymous namespace)::VariableMap::VarInfo"* %36, i64 %30, i32 1
  %38 = bitcast %"class.Ice::CfgNode"** %37 to i64*
  store i64 %35, i64* %38, align 8
  ret %"class.Ice::Variable"* %7
}

; Function Attrs: optsize
declare %"class.Ice::Variable"* @_ZN3Ice3Cfg12makeVariableINS_8VariableEEEPT_NS_4TypeE(%"class.Ice::Cfg"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind optsize }
attributes #8 = { noreturn nounwind optsize }
attributes #9 = { builtin nounwind optsize }
attributes #10 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
