; ModuleID = '../../base/i18n/icu_string_conversions.cc'
source_filename = "../../base/i18n/icu_string_conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverter = type opaque
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_string.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.6 }
%struct.anon.6 = type { %"struct.std::__1::__padding.7", i8 }
%"struct.std::__1::__padding.7" = type { [1 x i8] }
%"class.icu_69::StringByteSink" = type { %"class.icu_69::ByteSink", %"class.std::__1::basic_string"* }
%"class.icu_69::ByteSink" = type { i32 (...)** }
%"class.icu_69::UnicodeString" = type { %"class.icu_69::Replaceable", %"union.icu_69::UnicodeString::StackBufferOrFields" }
%"class.icu_69::Replaceable" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"union.icu_69::UnicodeString::StackBufferOrFields" = type { %struct.anon.15, [32 x i8] }
%struct.anon.15 = type { i16, i32, i32, i16* }
%"class.icu_69::Normalizer2" = type { %"class.icu_69::UObject" }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED0Ev = comdat any

$_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6AppendEPKci = comdat any

$_ZTVN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE = comdat any

@_ZZN4base12_GLOBAL__N_127ToUnicodeCallbackSubstituteEPKvP23UConverterToUnicodeArgsPKci24UConverterCallbackReasonP10UErrorCodeE16kReplacementChar = internal constant i16 -3, align 2
@_ZTVN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.icu_69::ByteSink"*)* @_ZN6icu_698ByteSinkD2Ev to i8*), i8* bitcast (void (%"class.icu_69::StringByteSink"*)* @_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED0Ev to i8*), i8* bitcast (void (%"class.icu_69::StringByteSink"*, i8*, i32)* @_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6AppendEPKci to i8*), i8* bitcast (i8* (%"class.icu_69::ByteSink"*, i32, i32, i8*, i32, i32*)* @_ZN6icu_698ByteSink15GetAppendBufferEiiPciPi to i8*), i8* bitcast (void (%"class.icu_69::ByteSink"*)* @_ZN6icu_698ByteSink5FlushEv to i8*)] }, comdat, align 8
@switch.table._ZN4base15UTF16ToCodepageENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIcNS2_IcEENS1_9allocatorIcEEEE = private unnamed_addr constant [3 x void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*] [void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)* @UCNV_FROM_U_CALLBACK_STOP_69, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)* @UCNV_FROM_U_CALLBACK_SKIP_69, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)* @UCNV_FROM_U_CALLBACK_SKIP_69], align 8
@switch.table._ZN4base15CodepageToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIDsNS2_IDsEENS1_9allocatorIDsEEEE = private unnamed_addr constant [3 x void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*] [void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)* @UCNV_TO_U_CALLBACK_STOP_69, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)* @UCNV_TO_U_CALLBACK_SKIP_69, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)* @_ZN4base12_GLOBAL__N_127ToUnicodeCallbackSubstituteEPKvP23UConverterToUnicodeArgsPKci24UConverterCallbackReasonP10UErrorCode], align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base15UTF16ToCodepageENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIcNS2_IcEENS1_9allocatorIcEEEE(i16*, i64, i8*, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %15, align 8
  br label %18

16:                                               ; preds = %5
  %17 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  store i8 0, i8* %17, align 1
  store i8 0, i8* %9, align 1
  br label %18

18:                                               ; preds = %12, %16
  %19 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #11
  store i32 0, i32* %7, align 4
  %20 = call %struct.UConverter* @ucnv_open_69(i8* %2, i32* nonnull %7) #11
  %21 = load i32, i32* %7, align 4
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %61, label %23

23:                                               ; preds = %18
  %24 = trunc i64 %1 to i32
  %25 = add nsw i32 %24, 10
  %26 = call signext i8 @ucnv_getMaxCharSize_69(%struct.UConverter* %20) #11
  %27 = sext i8 %26 to i32
  %28 = mul nsw i32 %25, %27
  %29 = sext i32 %28 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %4, i64 %29, i8 signext 0) #11
  %30 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #11
  store i32 0, i32* %6, align 4
  %31 = icmp ult i32 %3, 3
  br i1 %31, label %32, label %36

32:                                               ; preds = %23
  %33 = sext i32 %3 to i64
  %34 = getelementptr inbounds [3 x void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*], [3 x void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*]* @switch.table._ZN4base15UTF16ToCodepageENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIcNS2_IcEENS1_9allocatorIcEEEE, i64 0, i64 %33
  %35 = load void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)** %34, align 8
  call void @ucnv_setFromUCallBack_69(%struct.UConverter* %20, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)* nonnull %35, i8* null, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)** null, i8** null, i32* nonnull %6) #11
  br label %36

36:                                               ; preds = %23, %32
  %37 = load i8, i8* %9, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  br label %44

42:                                               ; preds = %36
  %43 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  br label %44

44:                                               ; preds = %42, %39
  %45 = phi i8* [ %41, %39 ], [ %43, %42 ]
  %46 = call i32 @ucnv_fromUChars_69(%struct.UConverter* %20, i8* %45, i32 %28, i16* %0, i32 %24, i32* nonnull %6) #11
  %47 = sext i32 %46 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %4, i64 %47, i8 signext 0) #11
  call void @ucnv_close_69(%struct.UConverter* %20) #11
  %48 = load i32, i32* %6, align 4
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %59

50:                                               ; preds = %44
  %51 = load i8, i8* %9, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %56, align 8
  br label %59

57:                                               ; preds = %50
  %58 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  store i8 0, i8* %58, align 1
  store i8 0, i8* %9, align 1
  br label %59

59:                                               ; preds = %44, %53, %57
  %60 = phi i1 [ true, %44 ], [ false, %53 ], [ false, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #11
  br label %61

61:                                               ; preds = %18, %59
  %62 = phi i1 [ %60, %59 ], [ false, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #11
  ret i1 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.UConverter* @ucnv_open_69(i8*, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base15CodepageToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIDsNS2_IDsEENS1_9allocatorIDsEEEE(i8*, i64, i8*, i32, %"class.std::__1::basic_string.2"*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast %"class.std::__1::basic_string.2"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i16*, i16** %12, align 8
  store i16 0, i16* %13, align 2
  %14 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %14, align 8
  br label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::basic_string.2"* %4 to i16*
  store i16 0, i16* %16, align 2
  store i8 0, i8* %8, align 1
  br label %17

17:                                               ; preds = %11, %15
  %18 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #11
  store i32 0, i32* %6, align 4
  %19 = call %struct.UConverter* @ucnv_open_69(i8* %2, i32* nonnull %6) #11
  %20 = load i32, i32* %6, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %695, label %22

22:                                               ; preds = %17
  %23 = add i64 %1, 1
  %24 = icmp ult i32 %3, 3
  br i1 %24, label %25, label %29

25:                                               ; preds = %22
  %26 = sext i32 %3 to i64
  %27 = getelementptr inbounds [3 x void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*], [3 x void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*]* @switch.table._ZN4base15CodepageToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIDsNS2_IDsEENS1_9allocatorIDsEEEE, i64 0, i64 %26
  %28 = load void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)** %27, align 8
  call void @ucnv_setToUCallBack_69(%struct.UConverter* %19, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)* nonnull %28, i8* null, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)** null, i8** null, i32* nonnull %6) #11
  br label %29

29:                                               ; preds = %22, %25
  %30 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %23, i64 2)
  %31 = extractvalue { i64, i1 } %30, 1
  %32 = extractvalue { i64, i1 } %30, 0
  %33 = select i1 %31, i64 -1, i64 %32
  %34 = call i8* @_Znam(i64 %33) #12
  %35 = bitcast i8* %34 to i16*
  %36 = trunc i64 %23 to i32
  %37 = trunc i64 %1 to i32
  %38 = call i32 @ucnv_toUChars_69(%struct.UConverter* %19, i16* nonnull %35, i32 %36, i8* %0, i32 %37, i32* nonnull %6) #11
  call void @ucnv_close_69(%struct.UConverter* %19) #11
  %39 = load i32, i32* %6, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %29
  %42 = load i8, i8* %8, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i16*, i16** %45, align 8
  store i16 0, i16* %46, align 2
  %47 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %47, align 8
  br label %693

48:                                               ; preds = %41
  %49 = bitcast %"class.std::__1::basic_string.2"* %4 to i16*
  store i16 0, i16* %49, align 2
  store i8 0, i8* %8, align 1
  br label %693

50:                                               ; preds = %29
  %51 = sext i32 %38 to i64
  %52 = call i1 @llvm.is.constant.i64(i64 %51) #11
  %53 = icmp ult i32 %38, 11
  %54 = and i1 %53, %52
  %55 = load i8, i8* %8, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %54, label %57, label %364

57:                                               ; preds = %50
  br i1 %56, label %58, label %62

58:                                               ; preds = %57
  %59 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %51, i64* %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  br label %65

62:                                               ; preds = %57
  %63 = trunc i32 %38 to i8
  store i8 %63, i8* %8, align 1
  %64 = bitcast %"class.std::__1::basic_string.2"* %4 to i16*
  br label %65

65:                                               ; preds = %62, %58
  %66 = phi i16* [ %61, %58 ], [ %64, %62 ]
  %67 = bitcast i16* %66 to i8*
  %68 = icmp eq i32 %38, 0
  br i1 %68, label %362, label %69

69:                                               ; preds = %65
  %70 = icmp ult i16* %66, %35
  br i1 %70, label %71, label %216

71:                                               ; preds = %69
  %72 = icmp ult i32 %38, 16
  br i1 %72, label %163, label %73

73:                                               ; preds = %71
  %74 = getelementptr i16, i16* %66, i64 %51
  %75 = bitcast i16* %74 to i8*
  %76 = shl nsw i64 %51, 1
  %77 = getelementptr i8, i8* %34, i64 %76
  %78 = icmp ugt i8* %77, %67
  %79 = icmp ult i8* %34, %75
  %80 = and i1 %78, %79
  br i1 %80, label %163, label %81

81:                                               ; preds = %73
  %82 = and i64 %51, -16
  %83 = sub nsw i64 %51, %82
  %84 = getelementptr i16, i16* %35, i64 %82
  %85 = getelementptr i16, i16* %66, i64 %82
  %86 = add nsw i64 %82, -16
  %87 = lshr exact i64 %86, 4
  %88 = add nuw nsw i64 %87, 1
  %89 = and i64 %88, 3
  %90 = icmp ult i64 %86, 48
  br i1 %90, label %142, label %91

91:                                               ; preds = %81
  %92 = sub nsw i64 %88, %89
  br label %93

93:                                               ; preds = %93, %91
  %94 = phi i64 [ 0, %91 ], [ %139, %93 ]
  %95 = phi i64 [ %92, %91 ], [ %140, %93 ]
  %96 = getelementptr i16, i16* %35, i64 %94
  %97 = getelementptr i16, i16* %66, i64 %94
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !2
  %100 = getelementptr i16, i16* %96, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !2
  %103 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !5, !noalias !2
  %104 = getelementptr i16, i16* %97, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 2, !alias.scope !5, !noalias !2
  %106 = or i64 %94, 16
  %107 = getelementptr i16, i16* %35, i64 %106
  %108 = getelementptr i16, i16* %66, i64 %106
  %109 = bitcast i16* %107 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !2
  %111 = getelementptr i16, i16* %107, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !2
  %114 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !5, !noalias !2
  %115 = getelementptr i16, i16* %108, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !5, !noalias !2
  %117 = or i64 %94, 32
  %118 = getelementptr i16, i16* %35, i64 %117
  %119 = getelementptr i16, i16* %66, i64 %117
  %120 = bitcast i16* %118 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !2
  %122 = getelementptr i16, i16* %118, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !2
  %125 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %125, align 2, !alias.scope !5, !noalias !2
  %126 = getelementptr i16, i16* %119, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %127, align 2, !alias.scope !5, !noalias !2
  %128 = or i64 %94, 48
  %129 = getelementptr i16, i16* %35, i64 %128
  %130 = getelementptr i16, i16* %66, i64 %128
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !2
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !2
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !5, !noalias !2
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !5, !noalias !2
  %139 = add i64 %94, 64
  %140 = add i64 %95, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %93, !llvm.loop !7

142:                                              ; preds = %93, %81
  %143 = phi i64 [ 0, %81 ], [ %139, %93 ]
  %144 = icmp eq i64 %89, 0
  br i1 %144, label %161, label %145

145:                                              ; preds = %142, %145
  %146 = phi i64 [ %158, %145 ], [ %143, %142 ]
  %147 = phi i64 [ %159, %145 ], [ %89, %142 ]
  %148 = getelementptr i16, i16* %35, i64 %146
  %149 = getelementptr i16, i16* %66, i64 %146
  %150 = bitcast i16* %148 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2, !alias.scope !2
  %152 = getelementptr i16, i16* %148, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !2
  %155 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %155, align 2, !alias.scope !5, !noalias !2
  %156 = getelementptr i16, i16* %149, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %157, align 2, !alias.scope !5, !noalias !2
  %158 = add i64 %146, 16
  %159 = add i64 %147, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %145, !llvm.loop !9

161:                                              ; preds = %145, %142
  %162 = icmp eq i64 %82, %51
  br i1 %162, label %362, label %163

163:                                              ; preds = %161, %73, %71
  %164 = phi i64 [ %51, %73 ], [ %51, %71 ], [ %83, %161 ]
  %165 = phi i16* [ %35, %73 ], [ %35, %71 ], [ %84, %161 ]
  %166 = phi i16* [ %66, %73 ], [ %66, %71 ], [ %85, %161 ]
  %167 = add nsw i64 %164, -1
  %168 = and i64 %164, 7
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %163, %170
  %171 = phi i64 [ %176, %170 ], [ %164, %163 ]
  %172 = phi i16* [ %178, %170 ], [ %165, %163 ]
  %173 = phi i16* [ %177, %170 ], [ %166, %163 ]
  %174 = phi i64 [ %179, %170 ], [ %168, %163 ]
  %175 = load i16, i16* %172, align 2
  store i16 %175, i16* %173, align 2
  %176 = add i64 %171, -1
  %177 = getelementptr inbounds i16, i16* %173, i64 1
  %178 = getelementptr inbounds i16, i16* %172, i64 1
  %179 = add i64 %174, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %170, !llvm.loop !11

181:                                              ; preds = %170, %163
  %182 = phi i64 [ %164, %163 ], [ %176, %170 ]
  %183 = phi i16* [ %165, %163 ], [ %178, %170 ]
  %184 = phi i16* [ %166, %163 ], [ %177, %170 ]
  %185 = icmp ult i64 %167, 7
  br i1 %185, label %362, label %186

186:                                              ; preds = %181, %186
  %187 = phi i64 [ %212, %186 ], [ %182, %181 ]
  %188 = phi i16* [ %214, %186 ], [ %183, %181 ]
  %189 = phi i16* [ %213, %186 ], [ %184, %181 ]
  %190 = load i16, i16* %188, align 2
  store i16 %190, i16* %189, align 2
  %191 = getelementptr inbounds i16, i16* %189, i64 1
  %192 = getelementptr inbounds i16, i16* %188, i64 1
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %191, align 2
  %194 = getelementptr inbounds i16, i16* %189, i64 2
  %195 = getelementptr inbounds i16, i16* %188, i64 2
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %189, i64 3
  %198 = getelementptr inbounds i16, i16* %188, i64 3
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds i16, i16* %189, i64 4
  %201 = getelementptr inbounds i16, i16* %188, i64 4
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %189, i64 5
  %204 = getelementptr inbounds i16, i16* %188, i64 5
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %189, i64 6
  %207 = getelementptr inbounds i16, i16* %188, i64 6
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %189, i64 7
  %210 = getelementptr inbounds i16, i16* %188, i64 7
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = add i64 %187, -8
  %213 = getelementptr inbounds i16, i16* %189, i64 8
  %214 = getelementptr inbounds i16, i16* %188, i64 8
  %215 = icmp eq i64 %212, 0
  br i1 %215, label %362, label %186, !llvm.loop !12

216:                                              ; preds = %69
  %217 = icmp ugt i16* %66, %35
  br i1 %217, label %218, label %362

218:                                              ; preds = %216
  %219 = getelementptr inbounds i16, i16* %35, i64 %51
  %220 = getelementptr inbounds i16, i16* %66, i64 %51
  %221 = icmp ult i32 %38, 16
  br i1 %221, label %309, label %222

222:                                              ; preds = %218
  %223 = bitcast i16* %220 to i8*
  %224 = shl nsw i64 %51, 1
  %225 = getelementptr i8, i8* %34, i64 %224
  %226 = icmp ugt i8* %225, %67
  %227 = icmp ult i8* %34, %223
  %228 = and i1 %226, %227
  br i1 %228, label %309, label %229

229:                                              ; preds = %222
  %230 = and i64 %51, -16
  %231 = sub nsw i64 %51, %230
  %232 = sub nsw i64 0, %230
  %233 = getelementptr i16, i16* %219, i64 %232
  %234 = sub nsw i64 0, %230
  %235 = getelementptr i16, i16* %220, i64 %234
  %236 = add nsw i64 %230, -16
  %237 = lshr exact i64 %236, 4
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 1
  %240 = icmp eq i64 %236, 0
  br i1 %240, label %287, label %241

241:                                              ; preds = %229
  %242 = sub nuw nsw i64 %238, %239
  %243 = getelementptr i16, i16* %219, i64 -1
  %244 = getelementptr i16, i16* %220, i64 -1
  %245 = getelementptr i16, i16* %219, i64 -1
  %246 = getelementptr i16, i16* %220, i64 -1
  br label %247

247:                                              ; preds = %247, %241
  %248 = phi i64 [ 0, %241 ], [ %282, %247 ]
  %249 = phi i64 [ %242, %241 ], [ %283, %247 ]
  %250 = sub i64 0, %248
  %251 = sub i64 0, %248
  %252 = getelementptr inbounds i16, i16* %244, i64 %251
  %253 = getelementptr inbounds i16, i16* %243, i64 %250
  %254 = getelementptr inbounds i16, i16* %253, i64 -7
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !13
  %257 = getelementptr inbounds i16, i16* %253, i64 -8
  %258 = getelementptr inbounds i16, i16* %257, i64 -7
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 2, !alias.scope !13
  %261 = getelementptr inbounds i16, i16* %252, i64 -7
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %262, align 2, !alias.scope !16, !noalias !13
  %263 = getelementptr inbounds i16, i16* %252, i64 -8
  %264 = getelementptr inbounds i16, i16* %263, i64 -7
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %265, align 2, !alias.scope !16, !noalias !13
  %266 = sub nuw nsw i64 -16, %248
  %267 = sub nuw nsw i64 -16, %248
  %268 = getelementptr inbounds i16, i16* %246, i64 %267
  %269 = getelementptr inbounds i16, i16* %245, i64 %266
  %270 = getelementptr inbounds i16, i16* %269, i64 -7
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !13
  %273 = getelementptr inbounds i16, i16* %269, i64 -8
  %274 = getelementptr inbounds i16, i16* %273, i64 -7
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !13
  %277 = getelementptr inbounds i16, i16* %268, i64 -7
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %278, align 2, !alias.scope !16, !noalias !13
  %279 = getelementptr inbounds i16, i16* %268, i64 -8
  %280 = getelementptr inbounds i16, i16* %279, i64 -7
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %281, align 2, !alias.scope !16, !noalias !13
  %282 = add i64 %248, 32
  %283 = add i64 %249, -2
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %247, !llvm.loop !18

285:                                              ; preds = %247
  %286 = sub nuw nsw i64 -32, %248
  br label %287

287:                                              ; preds = %285, %229
  %288 = phi i64 [ 0, %229 ], [ %286, %285 ]
  %289 = icmp eq i64 %239, 0
  br i1 %289, label %307, label %290

290:                                              ; preds = %287
  %291 = getelementptr i16, i16* %219, i64 -1
  %292 = getelementptr i16, i16* %220, i64 -1
  %293 = getelementptr inbounds i16, i16* %292, i64 %288
  %294 = getelementptr inbounds i16, i16* %291, i64 %288
  %295 = getelementptr inbounds i16, i16* %294, i64 -7
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 2, !alias.scope !13
  %298 = getelementptr inbounds i16, i16* %294, i64 -8
  %299 = getelementptr inbounds i16, i16* %298, i64 -7
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 2, !alias.scope !13
  %302 = getelementptr inbounds i16, i16* %293, i64 -7
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %303, align 2, !alias.scope !16, !noalias !13
  %304 = getelementptr inbounds i16, i16* %293, i64 -8
  %305 = getelementptr inbounds i16, i16* %304, i64 -7
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %306, align 2, !alias.scope !16, !noalias !13
  br label %307

307:                                              ; preds = %287, %290
  %308 = icmp eq i64 %230, %51
  br i1 %308, label %362, label %309

309:                                              ; preds = %307, %222, %218
  %310 = phi i64 [ %51, %222 ], [ %51, %218 ], [ %231, %307 ]
  %311 = phi i16* [ %219, %222 ], [ %219, %218 ], [ %233, %307 ]
  %312 = phi i16* [ %220, %222 ], [ %220, %218 ], [ %235, %307 ]
  %313 = add nsw i64 %310, -1
  %314 = and i64 %310, 7
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %327, label %316

316:                                              ; preds = %309, %316
  %317 = phi i64 [ %324, %316 ], [ %310, %309 ]
  %318 = phi i16* [ %322, %316 ], [ %311, %309 ]
  %319 = phi i16* [ %321, %316 ], [ %312, %309 ]
  %320 = phi i64 [ %325, %316 ], [ %314, %309 ]
  %321 = getelementptr inbounds i16, i16* %319, i64 -1
  %322 = getelementptr inbounds i16, i16* %318, i64 -1
  %323 = load i16, i16* %322, align 2
  store i16 %323, i16* %321, align 2
  %324 = add i64 %317, -1
  %325 = add i64 %320, -1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %316, !llvm.loop !19

327:                                              ; preds = %316, %309
  %328 = phi i64 [ %310, %309 ], [ %324, %316 ]
  %329 = phi i16* [ %311, %309 ], [ %322, %316 ]
  %330 = phi i16* [ %312, %309 ], [ %321, %316 ]
  %331 = icmp ult i64 %313, 7
  br i1 %331, label %362, label %332

332:                                              ; preds = %327, %332
  %333 = phi i64 [ %360, %332 ], [ %328, %327 ]
  %334 = phi i16* [ %358, %332 ], [ %329, %327 ]
  %335 = phi i16* [ %357, %332 ], [ %330, %327 ]
  %336 = getelementptr inbounds i16, i16* %335, i64 -1
  %337 = getelementptr inbounds i16, i16* %334, i64 -1
  %338 = load i16, i16* %337, align 2
  store i16 %338, i16* %336, align 2
  %339 = getelementptr inbounds i16, i16* %335, i64 -2
  %340 = getelementptr inbounds i16, i16* %334, i64 -2
  %341 = load i16, i16* %340, align 2
  store i16 %341, i16* %339, align 2
  %342 = getelementptr inbounds i16, i16* %335, i64 -3
  %343 = getelementptr inbounds i16, i16* %334, i64 -3
  %344 = load i16, i16* %343, align 2
  store i16 %344, i16* %342, align 2
  %345 = getelementptr inbounds i16, i16* %335, i64 -4
  %346 = getelementptr inbounds i16, i16* %334, i64 -4
  %347 = load i16, i16* %346, align 2
  store i16 %347, i16* %345, align 2
  %348 = getelementptr inbounds i16, i16* %335, i64 -5
  %349 = getelementptr inbounds i16, i16* %334, i64 -5
  %350 = load i16, i16* %349, align 2
  store i16 %350, i16* %348, align 2
  %351 = getelementptr inbounds i16, i16* %335, i64 -6
  %352 = getelementptr inbounds i16, i16* %334, i64 -6
  %353 = load i16, i16* %352, align 2
  store i16 %353, i16* %351, align 2
  %354 = getelementptr inbounds i16, i16* %335, i64 -7
  %355 = getelementptr inbounds i16, i16* %334, i64 -7
  %356 = load i16, i16* %355, align 2
  store i16 %356, i16* %354, align 2
  %357 = getelementptr inbounds i16, i16* %335, i64 -8
  %358 = getelementptr inbounds i16, i16* %334, i64 -8
  %359 = load i16, i16* %358, align 2
  store i16 %359, i16* %357, align 2
  %360 = add i64 %333, -8
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %332, !llvm.loop !20

362:                                              ; preds = %327, %332, %181, %186, %307, %161, %216, %65
  %363 = getelementptr inbounds i16, i16* %66, i64 %51
  store i16 0, i16* %363, align 2
  br label %693

364:                                              ; preds = %50
  br i1 %56, label %365, label %370

365:                                              ; preds = %364
  %366 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %367 = load i64, i64* %366, align 8
  %368 = and i64 %367, 9223372036854775807
  %369 = add nsw i64 %368, -1
  br label %370

370:                                              ; preds = %365, %364
  %371 = phi i64 [ %369, %365 ], [ 10, %364 ]
  %372 = icmp ult i64 %371, %51
  br i1 %372, label %684, label %373

373:                                              ; preds = %370
  br i1 %56, label %374, label %377

374:                                              ; preds = %373
  %375 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %376 = load i16*, i16** %375, align 8
  br label %379

377:                                              ; preds = %373
  %378 = bitcast %"class.std::__1::basic_string.2"* %4 to i16*
  br label %379

379:                                              ; preds = %377, %374
  %380 = phi i16* [ %376, %374 ], [ %378, %377 ]
  %381 = bitcast i16* %380 to i8*
  %382 = icmp eq i32 %38, 0
  br i1 %382, label %676, label %383

383:                                              ; preds = %379
  %384 = icmp ult i16* %380, %35
  br i1 %384, label %385, label %530

385:                                              ; preds = %383
  %386 = icmp ult i32 %38, 16
  br i1 %386, label %477, label %387

387:                                              ; preds = %385
  %388 = getelementptr i16, i16* %380, i64 %51
  %389 = bitcast i16* %388 to i8*
  %390 = shl nsw i64 %51, 1
  %391 = getelementptr i8, i8* %34, i64 %390
  %392 = icmp ugt i8* %391, %381
  %393 = icmp ult i8* %34, %389
  %394 = and i1 %392, %393
  br i1 %394, label %477, label %395

395:                                              ; preds = %387
  %396 = and i64 %51, -16
  %397 = sub nsw i64 %51, %396
  %398 = getelementptr i16, i16* %35, i64 %396
  %399 = getelementptr i16, i16* %380, i64 %396
  %400 = add nsw i64 %396, -16
  %401 = lshr exact i64 %400, 4
  %402 = add nuw nsw i64 %401, 1
  %403 = and i64 %402, 3
  %404 = icmp ult i64 %400, 48
  br i1 %404, label %456, label %405

405:                                              ; preds = %395
  %406 = sub nsw i64 %402, %403
  br label %407

407:                                              ; preds = %407, %405
  %408 = phi i64 [ 0, %405 ], [ %453, %407 ]
  %409 = phi i64 [ %406, %405 ], [ %454, %407 ]
  %410 = getelementptr i16, i16* %35, i64 %408
  %411 = getelementptr i16, i16* %380, i64 %408
  %412 = bitcast i16* %410 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2, !alias.scope !21
  %414 = getelementptr i16, i16* %410, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 2, !alias.scope !21
  %417 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %417, align 2, !alias.scope !24, !noalias !21
  %418 = getelementptr i16, i16* %411, i64 8
  %419 = bitcast i16* %418 to <8 x i16>*
  store <8 x i16> %416, <8 x i16>* %419, align 2, !alias.scope !24, !noalias !21
  %420 = or i64 %408, 16
  %421 = getelementptr i16, i16* %35, i64 %420
  %422 = getelementptr i16, i16* %380, i64 %420
  %423 = bitcast i16* %421 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 2, !alias.scope !21
  %425 = getelementptr i16, i16* %421, i64 8
  %426 = bitcast i16* %425 to <8 x i16>*
  %427 = load <8 x i16>, <8 x i16>* %426, align 2, !alias.scope !21
  %428 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %428, align 2, !alias.scope !24, !noalias !21
  %429 = getelementptr i16, i16* %422, i64 8
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %427, <8 x i16>* %430, align 2, !alias.scope !24, !noalias !21
  %431 = or i64 %408, 32
  %432 = getelementptr i16, i16* %35, i64 %431
  %433 = getelementptr i16, i16* %380, i64 %431
  %434 = bitcast i16* %432 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 2, !alias.scope !21
  %436 = getelementptr i16, i16* %432, i64 8
  %437 = bitcast i16* %436 to <8 x i16>*
  %438 = load <8 x i16>, <8 x i16>* %437, align 2, !alias.scope !21
  %439 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %435, <8 x i16>* %439, align 2, !alias.scope !24, !noalias !21
  %440 = getelementptr i16, i16* %433, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %441, align 2, !alias.scope !24, !noalias !21
  %442 = or i64 %408, 48
  %443 = getelementptr i16, i16* %35, i64 %442
  %444 = getelementptr i16, i16* %380, i64 %442
  %445 = bitcast i16* %443 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !21
  %447 = getelementptr i16, i16* %443, i64 8
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 2, !alias.scope !21
  %450 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %446, <8 x i16>* %450, align 2, !alias.scope !24, !noalias !21
  %451 = getelementptr i16, i16* %444, i64 8
  %452 = bitcast i16* %451 to <8 x i16>*
  store <8 x i16> %449, <8 x i16>* %452, align 2, !alias.scope !24, !noalias !21
  %453 = add i64 %408, 64
  %454 = add i64 %409, -4
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %407, !llvm.loop !26

456:                                              ; preds = %407, %395
  %457 = phi i64 [ 0, %395 ], [ %453, %407 ]
  %458 = icmp eq i64 %403, 0
  br i1 %458, label %475, label %459

459:                                              ; preds = %456, %459
  %460 = phi i64 [ %472, %459 ], [ %457, %456 ]
  %461 = phi i64 [ %473, %459 ], [ %403, %456 ]
  %462 = getelementptr i16, i16* %35, i64 %460
  %463 = getelementptr i16, i16* %380, i64 %460
  %464 = bitcast i16* %462 to <8 x i16>*
  %465 = load <8 x i16>, <8 x i16>* %464, align 2, !alias.scope !21
  %466 = getelementptr i16, i16* %462, i64 8
  %467 = bitcast i16* %466 to <8 x i16>*
  %468 = load <8 x i16>, <8 x i16>* %467, align 2, !alias.scope !21
  %469 = bitcast i16* %463 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %469, align 2, !alias.scope !24, !noalias !21
  %470 = getelementptr i16, i16* %463, i64 8
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> %468, <8 x i16>* %471, align 2, !alias.scope !24, !noalias !21
  %472 = add i64 %460, 16
  %473 = add i64 %461, -1
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %475, label %459, !llvm.loop !27

475:                                              ; preds = %459, %456
  %476 = icmp eq i64 %396, %51
  br i1 %476, label %676, label %477

477:                                              ; preds = %475, %387, %385
  %478 = phi i64 [ %51, %387 ], [ %51, %385 ], [ %397, %475 ]
  %479 = phi i16* [ %35, %387 ], [ %35, %385 ], [ %398, %475 ]
  %480 = phi i16* [ %380, %387 ], [ %380, %385 ], [ %399, %475 ]
  %481 = add nsw i64 %478, -1
  %482 = and i64 %478, 7
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %495, label %484

484:                                              ; preds = %477, %484
  %485 = phi i64 [ %490, %484 ], [ %478, %477 ]
  %486 = phi i16* [ %492, %484 ], [ %479, %477 ]
  %487 = phi i16* [ %491, %484 ], [ %480, %477 ]
  %488 = phi i64 [ %493, %484 ], [ %482, %477 ]
  %489 = load i16, i16* %486, align 2
  store i16 %489, i16* %487, align 2
  %490 = add i64 %485, -1
  %491 = getelementptr inbounds i16, i16* %487, i64 1
  %492 = getelementptr inbounds i16, i16* %486, i64 1
  %493 = add i64 %488, -1
  %494 = icmp eq i64 %493, 0
  br i1 %494, label %495, label %484, !llvm.loop !28

495:                                              ; preds = %484, %477
  %496 = phi i64 [ %478, %477 ], [ %490, %484 ]
  %497 = phi i16* [ %479, %477 ], [ %492, %484 ]
  %498 = phi i16* [ %480, %477 ], [ %491, %484 ]
  %499 = icmp ult i64 %481, 7
  br i1 %499, label %676, label %500

500:                                              ; preds = %495, %500
  %501 = phi i64 [ %526, %500 ], [ %496, %495 ]
  %502 = phi i16* [ %528, %500 ], [ %497, %495 ]
  %503 = phi i16* [ %527, %500 ], [ %498, %495 ]
  %504 = load i16, i16* %502, align 2
  store i16 %504, i16* %503, align 2
  %505 = getelementptr inbounds i16, i16* %503, i64 1
  %506 = getelementptr inbounds i16, i16* %502, i64 1
  %507 = load i16, i16* %506, align 2
  store i16 %507, i16* %505, align 2
  %508 = getelementptr inbounds i16, i16* %503, i64 2
  %509 = getelementptr inbounds i16, i16* %502, i64 2
  %510 = load i16, i16* %509, align 2
  store i16 %510, i16* %508, align 2
  %511 = getelementptr inbounds i16, i16* %503, i64 3
  %512 = getelementptr inbounds i16, i16* %502, i64 3
  %513 = load i16, i16* %512, align 2
  store i16 %513, i16* %511, align 2
  %514 = getelementptr inbounds i16, i16* %503, i64 4
  %515 = getelementptr inbounds i16, i16* %502, i64 4
  %516 = load i16, i16* %515, align 2
  store i16 %516, i16* %514, align 2
  %517 = getelementptr inbounds i16, i16* %503, i64 5
  %518 = getelementptr inbounds i16, i16* %502, i64 5
  %519 = load i16, i16* %518, align 2
  store i16 %519, i16* %517, align 2
  %520 = getelementptr inbounds i16, i16* %503, i64 6
  %521 = getelementptr inbounds i16, i16* %502, i64 6
  %522 = load i16, i16* %521, align 2
  store i16 %522, i16* %520, align 2
  %523 = getelementptr inbounds i16, i16* %503, i64 7
  %524 = getelementptr inbounds i16, i16* %502, i64 7
  %525 = load i16, i16* %524, align 2
  store i16 %525, i16* %523, align 2
  %526 = add i64 %501, -8
  %527 = getelementptr inbounds i16, i16* %503, i64 8
  %528 = getelementptr inbounds i16, i16* %502, i64 8
  %529 = icmp eq i64 %526, 0
  br i1 %529, label %676, label %500, !llvm.loop !29

530:                                              ; preds = %383
  %531 = icmp ugt i16* %380, %35
  br i1 %531, label %532, label %676

532:                                              ; preds = %530
  %533 = getelementptr inbounds i16, i16* %35, i64 %51
  %534 = getelementptr inbounds i16, i16* %380, i64 %51
  %535 = icmp ult i32 %38, 16
  br i1 %535, label %623, label %536

536:                                              ; preds = %532
  %537 = bitcast i16* %534 to i8*
  %538 = shl nsw i64 %51, 1
  %539 = getelementptr i8, i8* %34, i64 %538
  %540 = icmp ugt i8* %539, %381
  %541 = icmp ult i8* %34, %537
  %542 = and i1 %540, %541
  br i1 %542, label %623, label %543

543:                                              ; preds = %536
  %544 = and i64 %51, -16
  %545 = sub nsw i64 %51, %544
  %546 = sub nsw i64 0, %544
  %547 = getelementptr i16, i16* %533, i64 %546
  %548 = sub nsw i64 0, %544
  %549 = getelementptr i16, i16* %534, i64 %548
  %550 = add nsw i64 %544, -16
  %551 = lshr exact i64 %550, 4
  %552 = add nuw nsw i64 %551, 1
  %553 = and i64 %552, 1
  %554 = icmp eq i64 %550, 0
  br i1 %554, label %601, label %555

555:                                              ; preds = %543
  %556 = sub nuw nsw i64 %552, %553
  %557 = getelementptr i16, i16* %533, i64 -1
  %558 = getelementptr i16, i16* %534, i64 -1
  %559 = getelementptr i16, i16* %533, i64 -1
  %560 = getelementptr i16, i16* %534, i64 -1
  br label %561

561:                                              ; preds = %561, %555
  %562 = phi i64 [ 0, %555 ], [ %596, %561 ]
  %563 = phi i64 [ %556, %555 ], [ %597, %561 ]
  %564 = sub i64 0, %562
  %565 = sub i64 0, %562
  %566 = getelementptr inbounds i16, i16* %558, i64 %565
  %567 = getelementptr inbounds i16, i16* %557, i64 %564
  %568 = getelementptr inbounds i16, i16* %567, i64 -7
  %569 = bitcast i16* %568 to <8 x i16>*
  %570 = load <8 x i16>, <8 x i16>* %569, align 2, !alias.scope !30
  %571 = getelementptr inbounds i16, i16* %567, i64 -8
  %572 = getelementptr inbounds i16, i16* %571, i64 -7
  %573 = bitcast i16* %572 to <8 x i16>*
  %574 = load <8 x i16>, <8 x i16>* %573, align 2, !alias.scope !30
  %575 = getelementptr inbounds i16, i16* %566, i64 -7
  %576 = bitcast i16* %575 to <8 x i16>*
  store <8 x i16> %570, <8 x i16>* %576, align 2, !alias.scope !33, !noalias !30
  %577 = getelementptr inbounds i16, i16* %566, i64 -8
  %578 = getelementptr inbounds i16, i16* %577, i64 -7
  %579 = bitcast i16* %578 to <8 x i16>*
  store <8 x i16> %574, <8 x i16>* %579, align 2, !alias.scope !33, !noalias !30
  %580 = sub nuw nsw i64 -16, %562
  %581 = sub nuw nsw i64 -16, %562
  %582 = getelementptr inbounds i16, i16* %560, i64 %581
  %583 = getelementptr inbounds i16, i16* %559, i64 %580
  %584 = getelementptr inbounds i16, i16* %583, i64 -7
  %585 = bitcast i16* %584 to <8 x i16>*
  %586 = load <8 x i16>, <8 x i16>* %585, align 2, !alias.scope !30
  %587 = getelementptr inbounds i16, i16* %583, i64 -8
  %588 = getelementptr inbounds i16, i16* %587, i64 -7
  %589 = bitcast i16* %588 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 2, !alias.scope !30
  %591 = getelementptr inbounds i16, i16* %582, i64 -7
  %592 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %592, align 2, !alias.scope !33, !noalias !30
  %593 = getelementptr inbounds i16, i16* %582, i64 -8
  %594 = getelementptr inbounds i16, i16* %593, i64 -7
  %595 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %595, align 2, !alias.scope !33, !noalias !30
  %596 = add i64 %562, 32
  %597 = add i64 %563, -2
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %561, !llvm.loop !35

599:                                              ; preds = %561
  %600 = sub nuw nsw i64 -32, %562
  br label %601

601:                                              ; preds = %599, %543
  %602 = phi i64 [ 0, %543 ], [ %600, %599 ]
  %603 = icmp eq i64 %553, 0
  br i1 %603, label %621, label %604

604:                                              ; preds = %601
  %605 = getelementptr i16, i16* %533, i64 -1
  %606 = getelementptr i16, i16* %534, i64 -1
  %607 = getelementptr inbounds i16, i16* %606, i64 %602
  %608 = getelementptr inbounds i16, i16* %605, i64 %602
  %609 = getelementptr inbounds i16, i16* %608, i64 -7
  %610 = bitcast i16* %609 to <8 x i16>*
  %611 = load <8 x i16>, <8 x i16>* %610, align 2, !alias.scope !30
  %612 = getelementptr inbounds i16, i16* %608, i64 -8
  %613 = getelementptr inbounds i16, i16* %612, i64 -7
  %614 = bitcast i16* %613 to <8 x i16>*
  %615 = load <8 x i16>, <8 x i16>* %614, align 2, !alias.scope !30
  %616 = getelementptr inbounds i16, i16* %607, i64 -7
  %617 = bitcast i16* %616 to <8 x i16>*
  store <8 x i16> %611, <8 x i16>* %617, align 2, !alias.scope !33, !noalias !30
  %618 = getelementptr inbounds i16, i16* %607, i64 -8
  %619 = getelementptr inbounds i16, i16* %618, i64 -7
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %615, <8 x i16>* %620, align 2, !alias.scope !33, !noalias !30
  br label %621

621:                                              ; preds = %601, %604
  %622 = icmp eq i64 %544, %51
  br i1 %622, label %676, label %623

623:                                              ; preds = %621, %536, %532
  %624 = phi i64 [ %51, %536 ], [ %51, %532 ], [ %545, %621 ]
  %625 = phi i16* [ %533, %536 ], [ %533, %532 ], [ %547, %621 ]
  %626 = phi i16* [ %534, %536 ], [ %534, %532 ], [ %549, %621 ]
  %627 = add nsw i64 %624, -1
  %628 = and i64 %624, 7
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %641, label %630

630:                                              ; preds = %623, %630
  %631 = phi i64 [ %638, %630 ], [ %624, %623 ]
  %632 = phi i16* [ %636, %630 ], [ %625, %623 ]
  %633 = phi i16* [ %635, %630 ], [ %626, %623 ]
  %634 = phi i64 [ %639, %630 ], [ %628, %623 ]
  %635 = getelementptr inbounds i16, i16* %633, i64 -1
  %636 = getelementptr inbounds i16, i16* %632, i64 -1
  %637 = load i16, i16* %636, align 2
  store i16 %637, i16* %635, align 2
  %638 = add i64 %631, -1
  %639 = add i64 %634, -1
  %640 = icmp eq i64 %639, 0
  br i1 %640, label %641, label %630, !llvm.loop !36

641:                                              ; preds = %630, %623
  %642 = phi i64 [ %624, %623 ], [ %638, %630 ]
  %643 = phi i16* [ %625, %623 ], [ %636, %630 ]
  %644 = phi i16* [ %626, %623 ], [ %635, %630 ]
  %645 = icmp ult i64 %627, 7
  br i1 %645, label %676, label %646

646:                                              ; preds = %641, %646
  %647 = phi i64 [ %674, %646 ], [ %642, %641 ]
  %648 = phi i16* [ %672, %646 ], [ %643, %641 ]
  %649 = phi i16* [ %671, %646 ], [ %644, %641 ]
  %650 = getelementptr inbounds i16, i16* %649, i64 -1
  %651 = getelementptr inbounds i16, i16* %648, i64 -1
  %652 = load i16, i16* %651, align 2
  store i16 %652, i16* %650, align 2
  %653 = getelementptr inbounds i16, i16* %649, i64 -2
  %654 = getelementptr inbounds i16, i16* %648, i64 -2
  %655 = load i16, i16* %654, align 2
  store i16 %655, i16* %653, align 2
  %656 = getelementptr inbounds i16, i16* %649, i64 -3
  %657 = getelementptr inbounds i16, i16* %648, i64 -3
  %658 = load i16, i16* %657, align 2
  store i16 %658, i16* %656, align 2
  %659 = getelementptr inbounds i16, i16* %649, i64 -4
  %660 = getelementptr inbounds i16, i16* %648, i64 -4
  %661 = load i16, i16* %660, align 2
  store i16 %661, i16* %659, align 2
  %662 = getelementptr inbounds i16, i16* %649, i64 -5
  %663 = getelementptr inbounds i16, i16* %648, i64 -5
  %664 = load i16, i16* %663, align 2
  store i16 %664, i16* %662, align 2
  %665 = getelementptr inbounds i16, i16* %649, i64 -6
  %666 = getelementptr inbounds i16, i16* %648, i64 -6
  %667 = load i16, i16* %666, align 2
  store i16 %667, i16* %665, align 2
  %668 = getelementptr inbounds i16, i16* %649, i64 -7
  %669 = getelementptr inbounds i16, i16* %648, i64 -7
  %670 = load i16, i16* %669, align 2
  store i16 %670, i16* %668, align 2
  %671 = getelementptr inbounds i16, i16* %649, i64 -8
  %672 = getelementptr inbounds i16, i16* %648, i64 -8
  %673 = load i16, i16* %672, align 2
  store i16 %673, i16* %671, align 2
  %674 = add i64 %647, -8
  %675 = icmp eq i64 %674, 0
  br i1 %675, label %676, label %646, !llvm.loop !37

676:                                              ; preds = %641, %646, %495, %500, %621, %475, %530, %379
  %677 = getelementptr inbounds i16, i16* %380, i64 %51
  store i16 0, i16* %677, align 2
  %678 = load i8, i8* %8, align 1
  %679 = icmp slt i8 %678, 0
  br i1 %679, label %680, label %682

680:                                              ; preds = %676
  %681 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %51, i64* %681, align 8
  br label %693

682:                                              ; preds = %676
  %683 = trunc i32 %38 to i8
  store i8 %683, i8* %8, align 1
  br label %693

684:                                              ; preds = %370
  br i1 %56, label %685, label %688

685:                                              ; preds = %684
  %686 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %687 = load i64, i64* %686, align 8
  br label %690

688:                                              ; preds = %684
  %689 = zext i8 %55 to i64
  br label %690

690:                                              ; preds = %688, %685
  %691 = phi i64 [ %687, %685 ], [ %689, %688 ]
  %692 = sub i64 %51, %371
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.2"* %4, i64 %371, i64 %692, i64 %691, i64 0, i64 %691, i64 %51, i16* nonnull %35) #11
  br label %693

693:                                              ; preds = %362, %680, %682, %690, %48, %44
  %694 = phi i1 [ false, %44 ], [ false, %48 ], [ true, %690 ], [ true, %682 ], [ true, %680 ], [ true, %362 ]
  call void @_ZdaPv(i8* nonnull %34) #12
  br label %695

695:                                              ; preds = %17, %693
  %696 = phi i1 [ %694, %693 ], [ false, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #11
  ret i1 %696
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare i32 @ucnv_toUChars_69(%struct.UConverter*, i16*, i32, i8*, i32, i32*) local_unnamed_addr #2

declare void @ucnv_close_69(%struct.UConverter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base25ConvertToUtf8AndNormalizeENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEPS8_(i8*, i64, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %5 = alloca %"class.icu_69::StringByteSink", align 8
  %6 = alloca %"class.std::__1::basic_string.2", align 8
  %7 = alloca i32, align 4
  %8 = alloca %"class.icu_69::UnicodeString", align 8
  %9 = alloca %"class.icu_69::UnicodeString", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %17, align 8
  br label %20

18:                                               ; preds = %4
  %19 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  store i8 0, i8* %19, align 1
  store i8 0, i8* %11, align 1
  br label %20

20:                                               ; preds = %14, %18
  %21 = bitcast %"class.std::__1::basic_string.2"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #11
  %22 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 24, i1 false) #11
  %24 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %31 = select i1 %27, i8* %29, i8* %30
  %32 = call zeroext i1 @_ZN4base15CodepageToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPKcNS_23OnStringConversionError4TypeEPNS1_12basic_stringIDsNS2_IDsEENS1_9allocatorIDsEEEE(i8* %0, i64 %1, i8* %31, i32 0, %"class.std::__1::basic_string.2"* nonnull %6)
  br i1 %32, label %33, label %141

33:                                               ; preds = %20
  %34 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #11
  store i32 0, i32* %7, align 4
  %35 = call %"class.icu_69::Normalizer2"* @_ZN6icu_6911Normalizer214getNFCInstanceER10UErrorCode(i32* nonnull dereferenceable(4) %7) #11
  %36 = load i32, i32* %7, align 4
  %37 = icmp slt i32 %36, 1
  br i1 %37, label %38, label %139

38:                                               ; preds = %33
  %39 = bitcast %"class.std::__1::basic_string.2"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %39, i64 0, i32 1, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %38
  %44 = load i64, i64* %23, align 8
  %45 = trunc i64 %44 to i32
  %46 = bitcast %"class.icu_69::UnicodeString"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %46) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 64, i1 false)
  %47 = load i16*, i16** %22, align 8
  br label %52

48:                                               ; preds = %38
  %49 = zext i8 %41 to i32
  %50 = bitcast %"class.icu_69::UnicodeString"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %50) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 64, i1 false)
  %51 = bitcast %"class.std::__1::basic_string.2"* %6 to i16*
  br label %52

52:                                               ; preds = %43, %48
  %53 = phi i8* [ %46, %43 ], [ %50, %48 ]
  %54 = phi i32 [ %45, %43 ], [ %49, %48 ]
  %55 = phi i16* [ %47, %43 ], [ %51, %48 ]
  call void @_ZN6icu_6913UnicodeStringC1EPKDsi(%"class.icu_69::UnicodeString"* nonnull %8, i16* %55, i32 %54) #11
  %56 = bitcast %"class.icu_69::Normalizer2"* %35 to i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)***
  %57 = load i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)**, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*** %56, align 8
  %58 = getelementptr inbounds i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)** %57, i64 14
  %59 = load i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)** %58, align 8
  %60 = call i32 %59(%"class.icu_69::Normalizer2"* %35, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %8, i32* nonnull dereferenceable(4) %7) #11
  %61 = icmp slt i32 %60, %54
  br i1 %61, label %62, label %94

62:                                               ; preds = %52
  %63 = bitcast %"class.icu_69::UnicodeString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %63) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 64, i1 false)
  call void @_ZN6icu_6913UnicodeStringC1ERKS0_i(%"class.icu_69::UnicodeString"* nonnull %9, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %8, i32 %60) #11
  %64 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %8, i64 0, i32 1, i32 0, i32 0
  %65 = load i16, i16* %64, align 8
  %66 = and i16 %65, 1
  %67 = icmp ne i16 %66, 0
  %68 = icmp eq i32 %60, 0
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %71

70:                                               ; preds = %62
  call void @_ZN6icu_6913UnicodeString7unBogusEv(%"class.icu_69::UnicodeString"* nonnull %8) #11
  br label %88

71:                                               ; preds = %62
  %72 = icmp slt i16 %65, 0
  %73 = lshr i16 %65, 5
  %74 = zext i16 %73 to i32
  %75 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %8, i64 0, i32 1, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = select i1 %72, i32 %76, i32 %74
  %78 = icmp ugt i32 %77, %60
  br i1 %78, label %79, label %88

79:                                               ; preds = %71
  %80 = icmp slt i32 %60, 1024
  br i1 %80, label %81, label %86

81:                                               ; preds = %79
  %82 = and i16 %65, 31
  %83 = trunc i32 %60 to i16
  %84 = shl i16 %83, 5
  %85 = or i16 %82, %84
  store i16 %85, i16* %64, align 8
  br label %88

86:                                               ; preds = %79
  %87 = or i16 %65, -32
  store i16 %87, i16* %64, align 8
  store i32 %60, i32* %75, align 4
  br label %88

88:                                               ; preds = %70, %71, %81, %86
  %89 = bitcast %"class.icu_69::Normalizer2"* %35 to %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)***
  %90 = load %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)**, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*** %89, align 8
  %91 = getelementptr inbounds %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)** %90, i64 5
  %92 = load %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)** %91, align 8
  %93 = call dereferenceable(64) %"class.icu_69::UnicodeString"* %92(%"class.icu_69::Normalizer2"* %35, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %8, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %9, i32* nonnull dereferenceable(4) %7) #11
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %63) #11
  br label %94

94:                                               ; preds = %88, %52
  %95 = load i32, i32* %7, align 4
  %96 = icmp slt i32 %95, 1
  br i1 %96, label %97, label %137

97:                                               ; preds = %94
  %98 = bitcast %"class.icu_69::StringByteSink"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %98) #11
  %99 = getelementptr inbounds %"class.icu_69::StringByteSink", %"class.icu_69::StringByteSink"* %5, i64 0, i32 0, i32 0
  %100 = getelementptr inbounds %"class.icu_69::StringByteSink", %"class.icu_69::StringByteSink"* %5, i64 0, i32 1
  %101 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %8, i64 0, i32 1, i32 0, i32 0
  %102 = load i16, i16* %101, align 8
  %103 = icmp slt i16 %102, 0
  %104 = lshr i16 %102, 5
  %105 = zext i16 %104 to i32
  %106 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %8, i64 0, i32 1, i32 0, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = select i1 %103, i32 %107, i32 %105
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %99, align 8
  store %"class.std::__1::basic_string"* %3, %"class.std::__1::basic_string"** %100, align 8
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %135

110:                                              ; preds = %97
  %111 = zext i32 %108 to i64
  %112 = load i8, i8* %11, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %114, label %121

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %116 = load i64, i64* %115, align 8
  %117 = and i64 %116, 9223372036854775807
  %118 = add nsw i64 %117, -1
  %119 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %120 = load i64, i64* %119, align 8
  br label %123

121:                                              ; preds = %110
  %122 = zext i8 %112 to i64
  br label %123

123:                                              ; preds = %121, %114
  %124 = phi i64 [ %118, %114 ], [ 22, %121 ]
  %125 = phi i64 [ %120, %114 ], [ %122, %121 ]
  %126 = sub i64 %124, %125
  %127 = icmp ult i64 %126, %111
  br i1 %127, label %128, label %135

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = zext i8 %112 to i64
  %132 = select i1 %113, i64 %130, i64 %131
  %133 = sext i32 %108 to i64
  %134 = add i64 %132, %133
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %3, i64 %134) #11
  br label %135

135:                                              ; preds = %97, %123, %128
  %136 = getelementptr inbounds %"class.icu_69::StringByteSink", %"class.icu_69::StringByteSink"* %5, i64 0, i32 0
  call void @_ZNK6icu_6913UnicodeString6toUTF8ERNS_8ByteSinkE(%"class.icu_69::UnicodeString"* nonnull %8, %"class.icu_69::ByteSink"* nonnull dereferenceable(8) %136) #11
  call void @_ZN6icu_698ByteSinkD2Ev(%"class.icu_69::ByteSink"* nonnull %136) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %98) #11
  br label %137

137:                                              ; preds = %94, %135
  %138 = phi i1 [ true, %135 ], [ false, %94 ]
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %53) #11
  br label %139

139:                                              ; preds = %33, %137
  %140 = phi i1 [ %138, %137 ], [ false, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #11
  br label %141

141:                                              ; preds = %20, %139
  %142 = phi i1 [ %140, %139 ], [ false, %20 ]
  %143 = bitcast %"class.std::__1::basic_string.2"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %144 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %143, i64 0, i32 1, i32 1
  %145 = load i8, i8* %144, align 1
  %146 = icmp slt i8 %145, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %141
  %148 = bitcast %"class.std::__1::basic_string.2"* %6 to i8**
  %149 = load i8*, i8** %148, align 8
  call void @_ZdlPv(i8* %149) #12
  br label %150

150:                                              ; preds = %141, %147
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #11
  ret i1 %142
}

declare %"class.icu_69::Normalizer2"* @_ZN6icu_6911Normalizer214getNFCInstanceER10UErrorCode(i32* dereferenceable(4)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6icu_6913UnicodeStringC1EPKDsi(%"class.icu_69::UnicodeString"*, i16*, i32) unnamed_addr #2

declare void @_ZN6icu_6913UnicodeStringC1ERKS0_i(%"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"* dereferenceable(64), i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"*) unnamed_addr #5

declare signext i8 @ucnv_getMaxCharSize_69(%struct.UConverter*) local_unnamed_addr #2

declare void @ucnv_setFromUCallBack_69(%struct.UConverter*, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, i8*, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)**, i8**, i32*) local_unnamed_addr #2

declare void @UCNV_FROM_U_CALLBACK_STOP_69(i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*) #2

declare void @UCNV_FROM_U_CALLBACK_SKIP_69(i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*) #2

declare i32 @ucnv_fromUChars_69(%struct.UConverter*, i8*, i32, i16*, i32, i32*) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #2

declare void @ucnv_setToUCallBack_69(%struct.UConverter*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)**, i8**, i32*) local_unnamed_addr #2

declare void @UCNV_TO_U_CALLBACK_STOP_69(i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*) #2

declare void @UCNV_TO_U_CALLBACK_SKIP_69(i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*) #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base12_GLOBAL__N_127ToUnicodeCallbackSubstituteEPKvP23UConverterToUnicodeArgsPKci24UConverterCallbackReasonP10UErrorCode(i8* readonly, %struct.UConverterToUnicodeArgs*, i8* nocapture readnone, i32, i32, i32*) #0 {
  %7 = icmp slt i32 %4, 3
  br i1 %7, label %8, label %16

8:                                                ; preds = %6
  %9 = icmp eq i8* %0, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %8
  %11 = load i8, i8* %0, align 1
  %12 = icmp eq i8 %11, 105
  %13 = icmp eq i32 %4, 0
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %16

15:                                               ; preds = %10, %8
  store i32 0, i32* %5, align 4
  tail call void @ucnv_cbToUWriteUChars_69(%struct.UConverterToUnicodeArgs* %1, i16* nonnull @_ZZN4base12_GLOBAL__N_127ToUnicodeCallbackSubstituteEPKvP23UConverterToUnicodeArgsPKci24UConverterCallbackReasonP10UErrorCodeE16kReplacementChar, i32 1, i32 0, i32* %5) #11
  br label %16

16:                                               ; preds = %10, %15, %6
  ret void
}

declare void @ucnv_cbToUWriteUChars_69(%struct.UConverterToUnicodeArgs*, i16*, i32, i32, i32*) local_unnamed_addr #2

declare void @_ZN6icu_6913UnicodeString7unBogusEv(%"class.icu_69::UnicodeString"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.2"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.2"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #13
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.2"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.2"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #13
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !38
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !38
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !41, !noalias !38
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !41, !noalias !38
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !38
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !38
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !41, !noalias !38
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !41, !noalias !38
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !38
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !38
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !41, !noalias !38
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !41, !noalias !38
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !38
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !38
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !41, !noalias !38
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !41, !noalias !38
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !43

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !38
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !38
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !41, !noalias !38
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !41, !noalias !38
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !44

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !45

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !46

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !47

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !48

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !49

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !51
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !51
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !54, !noalias !51
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !54, !noalias !51
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !51
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !51
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !54, !noalias !51
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !54, !noalias !51
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !51
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !51
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !54, !noalias !51
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !54, !noalias !51
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !51
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !51
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !54, !noalias !51
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !54, !noalias !51
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !56

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !51
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !51
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !54, !noalias !51
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !54, !noalias !51
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !57

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !58

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !59

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #12
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.2"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZNK6icu_6913UnicodeString6toUTF8ERNS_8ByteSinkE(%"class.icu_69::UnicodeString"*, %"class.icu_69::ByteSink"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6icu_698ByteSinkD2Ev(%"class.icu_69::ByteSink"*) unnamed_addr #5

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEED0Ev(%"class.icu_69::StringByteSink"*) unnamed_addr #10 comdat align 2 {
  %2 = getelementptr inbounds %"class.icu_69::StringByteSink", %"class.icu_69::StringByteSink"* %0, i64 0, i32 0
  tail call void @_ZN6icu_698ByteSinkD2Ev(%"class.icu_69::ByteSink"* %2) #11
  %3 = bitcast %"class.icu_69::StringByteSink"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6icu_6914StringByteSinkINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6AppendEPKci(%"class.icu_69::StringByteSink"*, i8*, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.icu_69::StringByteSink", %"class.icu_69::StringByteSink"* %0, i64 0, i32 1
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = sext i32 %2 to i64
  %7 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %5, i8* %1, i64 %6) #11
  ret void
}

declare i8* @_ZN6icu_698ByteSink15GetAppendBufferEiiPciPi(%"class.icu_69::ByteSink"*, i32, i32, i8*, i32, i32*) unnamed_addr #2

declare void @_ZN6icu_698ByteSink5FlushEv(%"class.icu_69::ByteSink"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6icu_697UMemorydlEPv(i8*) local_unnamed_addr #5

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !10}
!49 = distinct !{!49, !50, !8}
!50 = !{!"llvm.loop.unroll.runtime.disable"}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !8}
