; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/include/report_block_data.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/include/report_block_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::ReportBlockData" = type { %"struct.webrtc::RTCPReportBlock", i64, i64, i64, i64, i64, i64 }
%"struct.webrtc::RTCPReportBlock" = type { i32, i32, i8, i32, i32, i32, i32, i32 }

@_ZN6webrtc15ReportBlockDataC1Ev = hidden unnamed_addr alias void (%"class.webrtc::ReportBlockData"*), void (%"class.webrtc::ReportBlockData"*)* @_ZN6webrtc15ReportBlockDataC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15ReportBlockDataC2Ev(%"class.webrtc::ReportBlockData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 0, i32 3
  %3 = bitcast %"class.webrtc::ReportBlockData"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 9, i1 false) #4
  %4 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 68, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK6webrtc15ReportBlockData8AvgRttMsEv(%"class.webrtc::ReportBlockData"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 5
  %7 = load i64, i64* %6, align 8
  %8 = sitofp i64 %7 to double
  %9 = uitofp i64 %3 to double
  %10 = fdiv double %8, %9
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi double [ %10, %5 ], [ 0.000000e+00, %1 ]
  ret double %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15ReportBlockData14SetReportBlockENS_15RTCPReportBlockEl(%"class.webrtc::ReportBlockData"* nocapture, %"struct.webrtc::RTCPReportBlock"* nocapture readonly byval(%"struct.webrtc::RTCPReportBlock") align 8, i64) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.webrtc::ReportBlockData"* %0 to i8*
  %5 = bitcast %"struct.webrtc::RTCPReportBlock"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* nonnull align 8 %5, i64 32, i1 false)
  %6 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc15ReportBlockData22AddRoundTripTimeSampleEl(%"class.webrtc::ReportBlockData"* nocapture, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  store i64 %1, i64* %3, align 8
  br label %7

7:                                                ; preds = %6, %2
  %8 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 6
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp sgt i64 %13, %1
  br i1 %14, label %15, label %17

15:                                               ; preds = %11, %7
  %16 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 3
  store i64 %1, i64* %16, align 8
  br label %17

17:                                               ; preds = %15, %11
  %18 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 2
  store i64 %1, i64* %18, align 8
  %19 = getelementptr inbounds %"class.webrtc::ReportBlockData", %"class.webrtc::ReportBlockData"* %0, i64 0, i32 5
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, %1
  store i64 %21, i64* %19, align 8
  %22 = add i64 %9, 1
  store i64 %22, i64* %8, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
