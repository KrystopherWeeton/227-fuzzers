; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/str_format/arg.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/str_format/arg.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::str_format_internal::(anonymous namespace)::IntDigits" = type <{ i8*, i64, [44 x i8], [4 x i8] }>
%"class.absl::str_format_internal::FormatSinkImpl" = type { %"class.absl::str_format_internal::FormatRawSinkImpl", i64, i8*, [1024 x i8] }
%"class.absl::str_format_internal::FormatRawSinkImpl" = type { i8*, void (i8*, i8*, i64)* }
%"class.absl::str_format_internal::FormatConversionSpecImpl" = type { i8, i8, i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS0_7VoidPtrEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIbEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIcEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIaEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIhEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIsEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchItEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIiEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIjEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIlEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchImEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIxEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIyEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_6int128EEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_7uint128EEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIfEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIdEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIeEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchIPKcEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

$_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_11string_viewEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv = comdat any

@.str = private unnamed_addr constant [6 x i8] c"(nil)\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@_ZN4absl16numbers_internal9kHexTableE = external local_unnamed_addr constant [513 x i8], align 16
@.str.6 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@_ZN4absl16numbers_internal16two_ASCII_digitsE = external local_unnamed_addr constant [100 x [2 x i8]], align 16

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS0_7VoidPtrEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %6 = trunc i64 %1 to i8
  %7 = icmp eq i8 %6, 18
  br i1 %7, label %73, label %8, !prof !2

8:                                                ; preds = %4
  %9 = and i64 %1, 255
  %10 = shl i64 2, %9
  %11 = and i64 %10, 262144
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %73, label %13, !prof !2

13:                                               ; preds = %8
  %14 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %15 = icmp eq i8* %0, null
  br i1 %15, label %16, label %47

16:                                               ; preds = %13
  %17 = getelementptr inbounds i8, i8* %3, i64 16
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %18, align 8
  %21 = getelementptr inbounds i8, i8* %3, i64 1056
  %22 = getelementptr inbounds i8, i8* %3, i64 24
  %23 = bitcast i8* %22 to i8**
  %24 = bitcast i8* %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i8* %21 to i64
  %27 = sub i64 %26, %25
  %28 = icmp ugt i64 %27, 5
  br i1 %28, label %43, label %29

29:                                               ; preds = %16
  %30 = getelementptr inbounds i8, i8* %3, i64 32
  %31 = ptrtoint i8* %30 to i64
  %32 = sub i64 %25, %31
  %33 = icmp sgt i64 %32, -1
  br i1 %33, label %35, label %34, !prof !3

34:                                               ; preds = %29
  tail call void @llvm.trap() #7
  unreachable

35:                                               ; preds = %29
  %36 = getelementptr inbounds i8, i8* %3, i64 8
  %37 = bitcast i8* %36 to void (i8*, i8*, i64)**
  %38 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %37, align 8
  %39 = bitcast i8* %3 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void %38(i8* %40, i8* %30, i64 %32) #7
  store i8* %30, i8** %23, align 8
  %41 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %37, align 8
  %42 = load i8*, i8** %39, align 8
  tail call void %41(i8* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #7
  br label %73

43:                                               ; preds = %16
  %44 = inttoptr i64 %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #7
  %45 = load i8*, i8** %23, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 5
  store i8* %46, i8** %23, align 8
  br label %73

47:                                               ; preds = %13
  %48 = ptrtoint i8* %0 to i64
  %49 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %49) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 64, i1 false) #7
  %50 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 2, i64 44
  br label %51

51:                                               ; preds = %51, %47
  %52 = phi i8* [ %50, %47 ], [ %54, %51 ]
  %53 = phi i64 [ %48, %47 ], [ %61, %51 ]
  %54 = getelementptr inbounds i8, i8* %52, i64 -2
  %55 = shl i64 %53, 1
  %56 = and i64 %55, 510
  %57 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %56
  %58 = bitcast i8* %57 to i16*
  %59 = bitcast i8* %54 to i16*
  %60 = load i16, i16* %58, align 2
  store i16 %60, i16* %59, align 1
  %61 = lshr i64 %53, 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %51

63:                                               ; preds = %51
  %64 = trunc i16 %60 to i8
  %65 = icmp eq i8 %64, 48
  %66 = getelementptr inbounds i8, i8* %52, i64 -1
  %67 = select i1 %65, i8* %66, i8* %54
  %68 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 0
  store i8* %67, i8** %68, align 8
  %69 = ptrtoint i8* %50 to i64
  %70 = ptrtoint i8* %67 to i64
  %71 = sub i64 %69, %70
  %72 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 1
  store i64 %71, i64* %72, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %5, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %14) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %49) #7
  br label %73

73:                                               ; preds = %8, %63, %43, %35, %4
  %74 = phi i1 [ false, %8 ], [ false, %4 ], [ true, %35 ], [ true, %43 ], [ true, %63 ]
  ret i1 %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplENS0_7VoidPtrENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %7, label %35

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 5
  store i64 %10, i64* %8, align 8
  %11 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %12 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = sub i64 %15, %14
  %17 = icmp ugt i64 %16, 5
  br i1 %17, label %31, label %18

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %20 = ptrtoint i8* %19 to i64
  %21 = sub i64 %14, %20
  %22 = icmp sgt i64 %21, -1
  br i1 %22, label %24, label %23, !prof !3

23:                                               ; preds = %18
  tail call void @llvm.trap() #7
  unreachable

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %26 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %25, align 8
  %27 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  tail call void %26(i8* %28, i8* %19, i64 %21) #7
  store i8* %19, i8** %12, align 8
  %29 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %25, align 8
  %30 = load i8*, i8** %27, align 8
  tail call void %29(i8* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #7
  br label %60

31:                                               ; preds = %7
  %32 = inttoptr i64 %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #7
  %33 = load i8*, i8** %12, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 5
  store i8* %34, i8** %12, align 8
  br label %60

35:                                               ; preds = %4
  %36 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %36) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 64, i1 false)
  %37 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 2, i64 44
  br label %38

38:                                               ; preds = %38, %35
  %39 = phi i8* [ %37, %35 ], [ %41, %38 ]
  %40 = phi i64 [ %0, %35 ], [ %48, %38 ]
  %41 = getelementptr inbounds i8, i8* %39, i64 -2
  %42 = shl i64 %40, 1
  %43 = and i64 %42, 510
  %44 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %43
  %45 = bitcast i8* %44 to i16*
  %46 = bitcast i8* %41 to i16*
  %47 = load i16, i16* %45, align 2
  store i16 %47, i16* %46, align 1
  %48 = lshr i64 %40, 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %38

50:                                               ; preds = %38
  %51 = trunc i16 %47 to i8
  %52 = icmp eq i8 %51, 48
  %53 = getelementptr inbounds i8, i8* %39, i64 -1
  %54 = select i1 %52, i8* %53, i8* %41
  %55 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = ptrtoint i8* %37 to i64
  %57 = ptrtoint i8* %54 to i64
  %58 = sub i64 %56, %57
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 1
  store i64 %58, i64* %59, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %5, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %36) #7
  br label %60

60:                                               ; preds = %31, %24, %50
  ret i8 1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIbEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %12, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 1
  store i32 %11, i32* %8, align 4
  br label %25

12:                                               ; preds = %4
  %13 = and i64 %1, 255
  %14 = shl i64 2, %13
  %15 = and i64 %14, 131067
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %25, label %17, !prof !2

17:                                               ; preds = %12
  %18 = ptrtoint i8* %0 to i64
  %19 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %20 = trunc i64 %18 to i32
  %21 = and i32 %20, 1
  %22 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEiNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i32 %21, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %19) #7
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %12, %17, %7
  %26 = phi i1 [ true, %7 ], [ %24, %17 ], [ false, %12 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIcEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = shl i32 %10, 24
  %12 = ashr exact i32 %11, 24
  store i32 %12, i32* %8, align 4
  br label %25

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = trunc i64 %19 to i8
  %21 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %22 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEcNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext %20, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %21)
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %13, %18, %7
  %26 = phi i1 [ true, %7 ], [ %24, %18 ], [ false, %13 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEcNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %67 [
    i8 0, label %12
    i8 4, label %13
    i8 6, label %25
    i8 7, label %39
    i8 5, label %53
    i8 2, label %58
    i8 3, label %58
    i8 14, label %63
    i8 10, label %63
    i8 8, label %63
    i8 12, label %63
    i8 15, label %63
    i8 11, label %63
    i8 9, label %63
    i8 13, label %63
  ]

12:                                               ; preds = %4
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %0, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8 [ %0, %13 ], [ %21, %15 ]
  %17 = phi i8* [ %14, %13 ], [ %20, %15 ]
  %18 = and i8 %16, 7
  %19 = or i8 %18, 48
  %20 = getelementptr inbounds i8, i8* %17, i64 -1
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %16, 3
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %15

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %20, i8** %24, align 8
  br label %68

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  %27 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 42
  %28 = zext i8 %0 to i64
  %29 = shl nuw nsw i64 %28, 1
  %30 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %29
  %31 = bitcast i8* %30 to i16*
  %32 = bitcast i8* %27 to i16*
  %33 = load i16, i16* %31, align 2
  store i16 %33, i16* %32, align 2
  %34 = trunc i16 %33 to i8
  %35 = icmp eq i8 %34, 48
  %36 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 43
  %37 = select i1 %35, i8* %36, i8* %27
  %38 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %37, i8** %38, align 8
  br label %68

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8 [ %0, %39 ], [ %49, %41 ]
  %43 = phi i8* [ %40, %39 ], [ %48, %41 ]
  %44 = and i8 %42, 15
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %43, i64 -1
  store i8 %47, i8* %48, align 1
  %49 = lshr i8 %42, 4
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %41

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %48, i8** %52, align 8
  br label %68

53:                                               ; preds = %4
  %54 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %55 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = zext i8 %0 to i32
  %57 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %56, i8* %54) #7
  br label %68

58:                                               ; preds = %4, %4
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %60 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %59, i8** %60, align 8
  %61 = sext i8 %0 to i32
  %62 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %61, i8* %59) #7
  br label %68

63:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %64 = sitofp i8 %0 to double
  %65 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %64, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %66 = zext i1 %65 to i8
  br label %116

67:                                               ; preds = %4
  unreachable

68:                                               ; preds = %58, %53, %51, %25, %23
  %69 = phi i8* [ %62, %58 ], [ %57, %53 ], [ %40, %51 ], [ %26, %25 ], [ %14, %23 ]
  %70 = phi i8* [ %59, %58 ], [ %54, %53 ], [ %48, %51 ], [ %37, %25 ], [ %20, %23 ]
  %71 = ptrtoint i8* %69 to i64
  %72 = ptrtoint i8* %70 to i64
  %73 = sub i64 %71, %72
  %74 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %113

78:                                               ; preds = %68
  %79 = icmp sgt i64 %73, -1
  br i1 %79, label %81, label %80, !prof !3

80:                                               ; preds = %78
  call void @llvm.trap() #7
  unreachable

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = icmp eq i64 %73, 0
  br i1 %84, label %116, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %73
  store i64 %88, i64* %86, align 8
  %89 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %90 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i8* %89 to i64
  %94 = sub i64 %93, %92
  %95 = icmp ugt i64 %94, %73
  br i1 %95, label %109, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %98 = ptrtoint i8* %97 to i64
  %99 = sub i64 %92, %98
  %100 = icmp sgt i64 %99, -1
  br i1 %100, label %102, label %101, !prof !3

101:                                              ; preds = %96
  call void @llvm.trap() #7
  unreachable

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %104 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %105 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void %104(i8* %106, i8* %97, i64 %99) #7
  store i8* %97, i8** %90, align 8
  %107 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %108 = load i8*, i8** %105, align 8
  call void %107(i8* %108, i8* %83, i64 %73) #7
  br label %116

109:                                              ; preds = %85
  %110 = inttoptr i64 %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %83, i64 %73, i1 false) #7
  %111 = load i8*, i8** %90, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 %73
  store i8* %112, i8** %90, align 8
  br label %116

113:                                              ; preds = %68
  %114 = load i64, i64* %8, align 8
  %115 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %114, i32 %115, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

116:                                              ; preds = %12, %63, %81, %102, %109, %113
  %117 = phi i8 [ %66, %63 ], [ 1, %113 ], [ 1, %12 ], [ 1, %81 ], [ 1, %102 ], [ 1, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %117
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIaEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = shl i32 %10, 24
  %12 = ashr exact i32 %11, 24
  store i32 %12, i32* %8, align 4
  br label %25

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = trunc i64 %19 to i8
  %21 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %22 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEaNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext %20, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %21)
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %13, %18, %7
  %26 = phi i1 [ true, %7 ], [ %24, %18 ], [ false, %13 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEaNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 signext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %67 [
    i8 0, label %12
    i8 4, label %13
    i8 6, label %25
    i8 7, label %39
    i8 5, label %53
    i8 2, label %58
    i8 3, label %58
    i8 14, label %63
    i8 10, label %63
    i8 8, label %63
    i8 12, label %63
    i8 15, label %63
    i8 11, label %63
    i8 9, label %63
    i8 13, label %63
  ]

12:                                               ; preds = %4
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %0, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8 [ %0, %13 ], [ %21, %15 ]
  %17 = phi i8* [ %14, %13 ], [ %20, %15 ]
  %18 = and i8 %16, 7
  %19 = or i8 %18, 48
  %20 = getelementptr inbounds i8, i8* %17, i64 -1
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %16, 3
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %15

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %20, i8** %24, align 8
  br label %68

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  %27 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 42
  %28 = zext i8 %0 to i64
  %29 = shl nuw nsw i64 %28, 1
  %30 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %29
  %31 = bitcast i8* %30 to i16*
  %32 = bitcast i8* %27 to i16*
  %33 = load i16, i16* %31, align 2
  store i16 %33, i16* %32, align 2
  %34 = trunc i16 %33 to i8
  %35 = icmp eq i8 %34, 48
  %36 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 43
  %37 = select i1 %35, i8* %36, i8* %27
  %38 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %37, i8** %38, align 8
  br label %68

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8 [ %0, %39 ], [ %49, %41 ]
  %43 = phi i8* [ %40, %39 ], [ %48, %41 ]
  %44 = and i8 %42, 15
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %43, i64 -1
  store i8 %47, i8* %48, align 1
  %49 = lshr i8 %42, 4
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %41

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %48, i8** %52, align 8
  br label %68

53:                                               ; preds = %4
  %54 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %55 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = zext i8 %0 to i32
  %57 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %56, i8* %54) #7
  br label %68

58:                                               ; preds = %4, %4
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %60 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %59, i8** %60, align 8
  %61 = sext i8 %0 to i32
  %62 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %61, i8* %59) #7
  br label %68

63:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %64 = sitofp i8 %0 to double
  %65 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %64, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %66 = zext i1 %65 to i8
  br label %116

67:                                               ; preds = %4
  unreachable

68:                                               ; preds = %58, %53, %51, %25, %23
  %69 = phi i8* [ %62, %58 ], [ %57, %53 ], [ %40, %51 ], [ %26, %25 ], [ %14, %23 ]
  %70 = phi i8* [ %59, %58 ], [ %54, %53 ], [ %48, %51 ], [ %37, %25 ], [ %20, %23 ]
  %71 = ptrtoint i8* %69 to i64
  %72 = ptrtoint i8* %70 to i64
  %73 = sub i64 %71, %72
  %74 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %113

78:                                               ; preds = %68
  %79 = icmp sgt i64 %73, -1
  br i1 %79, label %81, label %80, !prof !3

80:                                               ; preds = %78
  call void @llvm.trap() #7
  unreachable

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = icmp eq i64 %73, 0
  br i1 %84, label %116, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %73
  store i64 %88, i64* %86, align 8
  %89 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %90 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i8* %89 to i64
  %94 = sub i64 %93, %92
  %95 = icmp ugt i64 %94, %73
  br i1 %95, label %109, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %98 = ptrtoint i8* %97 to i64
  %99 = sub i64 %92, %98
  %100 = icmp sgt i64 %99, -1
  br i1 %100, label %102, label %101, !prof !3

101:                                              ; preds = %96
  call void @llvm.trap() #7
  unreachable

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %104 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %105 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void %104(i8* %106, i8* %97, i64 %99) #7
  store i8* %97, i8** %90, align 8
  %107 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %108 = load i8*, i8** %105, align 8
  call void %107(i8* %108, i8* %83, i64 %73) #7
  br label %116

109:                                              ; preds = %85
  %110 = inttoptr i64 %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %83, i64 %73, i1 false) #7
  %111 = load i8*, i8** %90, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 %73
  store i8* %112, i8** %90, align 8
  br label %116

113:                                              ; preds = %68
  %114 = load i64, i64* %8, align 8
  %115 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %114, i32 %115, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

116:                                              ; preds = %12, %63, %81, %102, %109, %113
  %117 = phi i8 [ %66, %63 ], [ 1, %113 ], [ 1, %12 ], [ 1, %81 ], [ 1, %102 ], [ 1, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %117
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIhEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %12, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 255
  store i32 %11, i32* %8, align 4
  br label %24

12:                                               ; preds = %4
  %13 = and i64 %1, 255
  %14 = shl i64 2, %13
  %15 = and i64 %14, 131067
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17, !prof !2

17:                                               ; preds = %12
  %18 = ptrtoint i8* %0 to i64
  %19 = trunc i64 %18 to i8
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %19, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %20)
  %22 = and i8 %21, 1
  %23 = icmp ne i8 %22, 0
  br label %24

24:                                               ; preds = %12, %17, %7
  %25 = phi i1 [ true, %7 ], [ %23, %17 ], [ false, %12 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %67 [
    i8 0, label %12
    i8 4, label %13
    i8 6, label %25
    i8 7, label %39
    i8 5, label %53
    i8 2, label %58
    i8 3, label %58
    i8 14, label %63
    i8 10, label %63
    i8 8, label %63
    i8 12, label %63
    i8 15, label %63
    i8 11, label %63
    i8 9, label %63
    i8 13, label %63
  ]

12:                                               ; preds = %4
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %0, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8 [ %0, %13 ], [ %21, %15 ]
  %17 = phi i8* [ %14, %13 ], [ %20, %15 ]
  %18 = and i8 %16, 7
  %19 = or i8 %18, 48
  %20 = getelementptr inbounds i8, i8* %17, i64 -1
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %16, 3
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %15

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %20, i8** %24, align 8
  br label %68

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  %27 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 42
  %28 = zext i8 %0 to i64
  %29 = shl nuw nsw i64 %28, 1
  %30 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %29
  %31 = bitcast i8* %30 to i16*
  %32 = bitcast i8* %27 to i16*
  %33 = load i16, i16* %31, align 2
  store i16 %33, i16* %32, align 2
  %34 = trunc i16 %33 to i8
  %35 = icmp eq i8 %34, 48
  %36 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 43
  %37 = select i1 %35, i8* %36, i8* %27
  %38 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %37, i8** %38, align 8
  br label %68

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8 [ %0, %39 ], [ %49, %41 ]
  %43 = phi i8* [ %40, %39 ], [ %48, %41 ]
  %44 = and i8 %42, 15
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %43, i64 -1
  store i8 %47, i8* %48, align 1
  %49 = lshr i8 %42, 4
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %41

51:                                               ; preds = %41
  %52 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %48, i8** %52, align 8
  br label %68

53:                                               ; preds = %4
  %54 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %55 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %54, i8** %55, align 8
  %56 = zext i8 %0 to i32
  %57 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %56, i8* %54) #7
  br label %68

58:                                               ; preds = %4, %4
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %60 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %59, i8** %60, align 8
  %61 = zext i8 %0 to i32
  %62 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %61, i8* %59) #7
  br label %68

63:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %64 = uitofp i8 %0 to double
  %65 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %64, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %66 = zext i1 %65 to i8
  br label %116

67:                                               ; preds = %4
  unreachable

68:                                               ; preds = %58, %53, %51, %25, %23
  %69 = phi i8* [ %62, %58 ], [ %57, %53 ], [ %40, %51 ], [ %26, %25 ], [ %14, %23 ]
  %70 = phi i8* [ %59, %58 ], [ %54, %53 ], [ %48, %51 ], [ %37, %25 ], [ %20, %23 ]
  %71 = ptrtoint i8* %69 to i64
  %72 = ptrtoint i8* %70 to i64
  %73 = sub i64 %71, %72
  %74 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %113

78:                                               ; preds = %68
  %79 = icmp sgt i64 %73, -1
  br i1 %79, label %81, label %80, !prof !3

80:                                               ; preds = %78
  call void @llvm.trap() #7
  unreachable

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = icmp eq i64 %73, 0
  br i1 %84, label %116, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %73
  store i64 %88, i64* %86, align 8
  %89 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %90 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i8* %89 to i64
  %94 = sub i64 %93, %92
  %95 = icmp ugt i64 %94, %73
  br i1 %95, label %109, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %98 = ptrtoint i8* %97 to i64
  %99 = sub i64 %92, %98
  %100 = icmp sgt i64 %99, -1
  br i1 %100, label %102, label %101, !prof !3

101:                                              ; preds = %96
  call void @llvm.trap() #7
  unreachable

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %104 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %105 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void %104(i8* %106, i8* %97, i64 %99) #7
  store i8* %97, i8** %90, align 8
  %107 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %103, align 8
  %108 = load i8*, i8** %105, align 8
  call void %107(i8* %108, i8* %83, i64 %73) #7
  br label %116

109:                                              ; preds = %85
  %110 = inttoptr i64 %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %83, i64 %73, i1 false) #7
  %111 = load i8*, i8** %90, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 %73
  store i8* %112, i8** %90, align 8
  br label %116

113:                                              ; preds = %68
  %114 = load i64, i64* %8, align 8
  %115 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %114, i32 %115, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %116

116:                                              ; preds = %12, %63, %81, %102, %109, %113
  %117 = phi i8 [ %66, %63 ], [ 1, %113 ], [ 1, %12 ], [ 1, %81 ], [ 1, %102 ], [ 1, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %117
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIsEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = shl i32 %10, 16
  %12 = ashr exact i32 %11, 16
  store i32 %12, i32* %8, align 4
  br label %25

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = trunc i64 %19 to i16
  %21 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %22 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEsNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i16 signext %20, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %21)
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %13, %18, %7
  %26 = phi i1 [ true, %7 ], [ %24, %18 ], [ false, %13 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEsNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i16 signext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %76 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %48
    i8 5, label %62
    i8 2, label %67
    i8 3, label %67
    i8 14, label %72
    i8 10, label %72
    i8 8, label %72
    i8 12, label %72
    i8 15, label %72
    i8 11, label %72
    i8 9, label %72
    i8 13, label %72
  ]

12:                                               ; preds = %4
  %13 = trunc i16 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %125

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i16 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i16 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i16 %17, 3
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %77

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i16 [ %0, %27 ], [ %40, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i16 %31, 1
  %34 = and i16 %33, 510
  %35 = zext i16 %34 to i64
  %36 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %35
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast i8* %32 to i16*
  %39 = load i16, i16* %37, align 2
  store i16 %39, i16* %38, align 1
  %40 = lshr i16 %31, 8
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %29
  %43 = trunc i16 %39 to i8
  %44 = icmp eq i8 %43, 48
  %45 = getelementptr inbounds i8, i8* %30, i64 -1
  %46 = select i1 %44, i8* %45, i8* %32
  %47 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %46, i8** %47, align 8
  br label %77

48:                                               ; preds = %4
  %49 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i16 [ %0, %48 ], [ %58, %50 ]
  %52 = phi i8* [ %49, %48 ], [ %57, %50 ]
  %53 = and i16 %51, 15
  %54 = zext i16 %53 to i64
  %55 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 -1
  store i8 %56, i8* %57, align 1
  %58 = lshr i16 %51, 4
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %60, label %50

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %57, i8** %61, align 8
  br label %77

62:                                               ; preds = %4
  %63 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %64 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = zext i16 %0 to i32
  %66 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %65, i8* %63) #7
  br label %77

67:                                               ; preds = %4, %4
  %68 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %69 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %68, i8** %69, align 8
  %70 = sext i16 %0 to i32
  %71 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %70, i8* %68) #7
  br label %77

72:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %73 = sitofp i16 %0 to double
  %74 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %73, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %75 = zext i1 %74 to i8
  br label %125

76:                                               ; preds = %4
  unreachable

77:                                               ; preds = %67, %62, %60, %42, %25
  %78 = phi i8* [ %71, %67 ], [ %66, %62 ], [ %49, %60 ], [ %28, %42 ], [ %15, %25 ]
  %79 = phi i8* [ %68, %67 ], [ %63, %62 ], [ %57, %60 ], [ %46, %42 ], [ %22, %25 ]
  %80 = ptrtoint i8* %78 to i64
  %81 = ptrtoint i8* %79 to i64
  %82 = sub i64 %80, %81
  %83 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %122

87:                                               ; preds = %77
  %88 = icmp sgt i64 %82, -1
  br i1 %88, label %90, label %89, !prof !3

89:                                               ; preds = %87
  call void @llvm.trap() #7
  unreachable

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = icmp eq i64 %82, 0
  br i1 %93, label %125, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %82
  store i64 %97, i64* %95, align 8
  %98 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %99 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = ptrtoint i8* %98 to i64
  %103 = sub i64 %102, %101
  %104 = icmp ugt i64 %103, %82
  br i1 %104, label %118, label %105

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %107 = ptrtoint i8* %106 to i64
  %108 = sub i64 %101, %107
  %109 = icmp sgt i64 %108, -1
  br i1 %109, label %111, label %110, !prof !3

110:                                              ; preds = %105
  call void @llvm.trap() #7
  unreachable

111:                                              ; preds = %105
  %112 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %113 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %112, align 8
  %114 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  call void %113(i8* %115, i8* %106, i64 %108) #7
  store i8* %106, i8** %99, align 8
  %116 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %112, align 8
  %117 = load i8*, i8** %114, align 8
  call void %116(i8* %117, i8* %92, i64 %82) #7
  br label %125

118:                                              ; preds = %94
  %119 = inttoptr i64 %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 1 %92, i64 %82, i1 false) #7
  %120 = load i8*, i8** %99, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 %82
  store i8* %121, i8** %99, align 8
  br label %125

122:                                              ; preds = %77
  %123 = load i64, i64* %8, align 8
  %124 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %123, i32 %124, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %125

125:                                              ; preds = %12, %72, %90, %111, %118, %122
  %126 = phi i8 [ %75, %72 ], [ 1, %122 ], [ 1, %12 ], [ 1, %90 ], [ 1, %111 ], [ 1, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %126
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchItEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %12, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 65535
  store i32 %11, i32* %8, align 4
  br label %24

12:                                               ; preds = %4
  %13 = and i64 %1, 255
  %14 = shl i64 2, %13
  %15 = and i64 %14, 131067
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17, !prof !2

17:                                               ; preds = %12
  %18 = ptrtoint i8* %0 to i64
  %19 = trunc i64 %18 to i16
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEtNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i16 zeroext %19, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %20)
  %22 = and i8 %21, 1
  %23 = icmp ne i8 %22, 0
  br label %24

24:                                               ; preds = %12, %17, %7
  %25 = phi i1 [ true, %7 ], [ %23, %17 ], [ false, %12 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEtNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i16 zeroext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %76 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %48
    i8 5, label %62
    i8 2, label %67
    i8 3, label %67
    i8 14, label %72
    i8 10, label %72
    i8 8, label %72
    i8 12, label %72
    i8 15, label %72
    i8 11, label %72
    i8 9, label %72
    i8 13, label %72
  ]

12:                                               ; preds = %4
  %13 = trunc i16 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %125

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i16 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i16 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i16 %17, 3
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %77

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i16 [ %0, %27 ], [ %40, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i16 %31, 1
  %34 = and i16 %33, 510
  %35 = zext i16 %34 to i64
  %36 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %35
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast i8* %32 to i16*
  %39 = load i16, i16* %37, align 2
  store i16 %39, i16* %38, align 1
  %40 = lshr i16 %31, 8
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %29
  %43 = trunc i16 %39 to i8
  %44 = icmp eq i8 %43, 48
  %45 = getelementptr inbounds i8, i8* %30, i64 -1
  %46 = select i1 %44, i8* %45, i8* %32
  %47 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %46, i8** %47, align 8
  br label %77

48:                                               ; preds = %4
  %49 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i16 [ %0, %48 ], [ %58, %50 ]
  %52 = phi i8* [ %49, %48 ], [ %57, %50 ]
  %53 = and i16 %51, 15
  %54 = zext i16 %53 to i64
  %55 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 -1
  store i8 %56, i8* %57, align 1
  %58 = lshr i16 %51, 4
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %60, label %50

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %57, i8** %61, align 8
  br label %77

62:                                               ; preds = %4
  %63 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %64 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = zext i16 %0 to i32
  %66 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %65, i8* %63) #7
  br label %77

67:                                               ; preds = %4, %4
  %68 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %69 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %68, i8** %69, align 8
  %70 = zext i16 %0 to i32
  %71 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %70, i8* %68) #7
  br label %77

72:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %73 = uitofp i16 %0 to double
  %74 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %73, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %75 = zext i1 %74 to i8
  br label %125

76:                                               ; preds = %4
  unreachable

77:                                               ; preds = %67, %62, %60, %42, %25
  %78 = phi i8* [ %71, %67 ], [ %66, %62 ], [ %49, %60 ], [ %28, %42 ], [ %15, %25 ]
  %79 = phi i8* [ %68, %67 ], [ %63, %62 ], [ %57, %60 ], [ %46, %42 ], [ %22, %25 ]
  %80 = ptrtoint i8* %78 to i64
  %81 = ptrtoint i8* %79 to i64
  %82 = sub i64 %80, %81
  %83 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %122

87:                                               ; preds = %77
  %88 = icmp sgt i64 %82, -1
  br i1 %88, label %90, label %89, !prof !3

89:                                               ; preds = %87
  call void @llvm.trap() #7
  unreachable

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = icmp eq i64 %82, 0
  br i1 %93, label %125, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %82
  store i64 %97, i64* %95, align 8
  %98 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %99 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = ptrtoint i8* %98 to i64
  %103 = sub i64 %102, %101
  %104 = icmp ugt i64 %103, %82
  br i1 %104, label %118, label %105

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %107 = ptrtoint i8* %106 to i64
  %108 = sub i64 %101, %107
  %109 = icmp sgt i64 %108, -1
  br i1 %109, label %111, label %110, !prof !3

110:                                              ; preds = %105
  call void @llvm.trap() #7
  unreachable

111:                                              ; preds = %105
  %112 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %113 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %112, align 8
  %114 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  call void %113(i8* %115, i8* %106, i64 %108) #7
  store i8* %106, i8** %99, align 8
  %116 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %112, align 8
  %117 = load i8*, i8** %114, align 8
  call void %116(i8* %117, i8* %92, i64 %82) #7
  br label %125

118:                                              ; preds = %94
  %119 = inttoptr i64 %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 1 %92, i64 %82, i1 false) #7
  %120 = load i8*, i8** %99, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 %82
  store i8* %121, i8** %99, align 8
  br label %125

122:                                              ; preds = %77
  %123 = load i64, i64* %8, align 8
  %124 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %123, i32 %124, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %125

125:                                              ; preds = %12, %72, %90, %111, %118, %122
  %126 = phi i8 [ %75, %72 ], [ 1, %122 ], [ 1, %12 ], [ 1, %90 ], [ 1, %111 ], [ 1, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %126
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIiEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %11, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %8, align 4
  br label %23

11:                                               ; preds = %4
  %12 = and i64 %1, 255
  %13 = shl i64 2, %12
  %14 = and i64 %13, 131067
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %23, label %16, !prof !2

16:                                               ; preds = %11
  %17 = ptrtoint i8* %0 to i64
  %18 = trunc i64 %17 to i32
  %19 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %20 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEiNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i32 %18, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %19)
  %21 = and i8 %20, 1
  %22 = icmp ne i8 %21, 0
  br label %23

23:                                               ; preds = %11, %16, %7
  %24 = phi i1 [ true, %7 ], [ %22, %16 ], [ false, %11 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEiNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i32, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %74 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %48
    i8 5, label %62
    i8 2, label %66
    i8 3, label %66
    i8 14, label %70
    i8 10, label %70
    i8 8, label %70
    i8 12, label %70
    i8 15, label %70
    i8 11, label %70
    i8 9, label %70
    i8 13, label %70
  ]

12:                                               ; preds = %4
  %13 = trunc i32 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %123

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i32 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i32 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %17, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %75

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i32 [ %0, %27 ], [ %40, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i32 %31, 1
  %34 = and i32 %33, 510
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %35
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast i8* %32 to i16*
  %39 = load i16, i16* %37, align 2
  store i16 %39, i16* %38, align 1
  %40 = lshr i32 %31, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %29
  %43 = trunc i16 %39 to i8
  %44 = icmp eq i8 %43, 48
  %45 = getelementptr inbounds i8, i8* %30, i64 -1
  %46 = select i1 %44, i8* %45, i8* %32
  %47 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %46, i8** %47, align 8
  br label %75

48:                                               ; preds = %4
  %49 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i32 [ %0, %48 ], [ %58, %50 ]
  %52 = phi i8* [ %49, %48 ], [ %57, %50 ]
  %53 = and i32 %51, 15
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 -1
  store i8 %56, i8* %57, align 1
  %58 = lshr i32 %51, 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %50

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %57, i8** %61, align 8
  br label %75

62:                                               ; preds = %4
  %63 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %64 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %0, i8* %63) #7
  br label %75

66:                                               ; preds = %4, %4
  %67 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %68 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %67, i8** %68, align 8
  %69 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %0, i8* %67) #7
  br label %75

70:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %71 = sitofp i32 %0 to double
  %72 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %71, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %73 = zext i1 %72 to i8
  br label %123

74:                                               ; preds = %4
  unreachable

75:                                               ; preds = %66, %62, %60, %42, %25
  %76 = phi i8* [ %69, %66 ], [ %65, %62 ], [ %49, %60 ], [ %28, %42 ], [ %15, %25 ]
  %77 = phi i8* [ %67, %66 ], [ %63, %62 ], [ %57, %60 ], [ %46, %42 ], [ %22, %25 ]
  %78 = ptrtoint i8* %76 to i64
  %79 = ptrtoint i8* %77 to i64
  %80 = sub i64 %78, %79
  %81 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %120

85:                                               ; preds = %75
  %86 = icmp sgt i64 %80, -1
  br i1 %86, label %88, label %87, !prof !3

87:                                               ; preds = %85
  call void @llvm.trap() #7
  unreachable

88:                                               ; preds = %85
  %89 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i64 %80, 0
  br i1 %91, label %123, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, %80
  store i64 %95, i64* %93, align 8
  %96 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = ptrtoint i8* %96 to i64
  %101 = sub i64 %100, %99
  %102 = icmp ugt i64 %101, %80
  br i1 %102, label %116, label %103

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %105 = ptrtoint i8* %104 to i64
  %106 = sub i64 %99, %105
  %107 = icmp sgt i64 %106, -1
  br i1 %107, label %109, label %108, !prof !3

108:                                              ; preds = %103
  call void @llvm.trap() #7
  unreachable

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %111 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %110, align 8
  %112 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  call void %111(i8* %113, i8* %104, i64 %106) #7
  store i8* %104, i8** %97, align 8
  %114 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %110, align 8
  %115 = load i8*, i8** %112, align 8
  call void %114(i8* %115, i8* %90, i64 %80) #7
  br label %123

116:                                              ; preds = %92
  %117 = inttoptr i64 %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %90, i64 %80, i1 false) #7
  %118 = load i8*, i8** %97, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %80
  store i8* %119, i8** %97, align 8
  br label %123

120:                                              ; preds = %75
  %121 = load i64, i64* %8, align 8
  %122 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %121, i32 %122, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %123

123:                                              ; preds = %12, %70, %88, %109, %116, %120
  %124 = phi i8 [ %73, %70 ], [ 1, %120 ], [ 1, %12 ], [ 1, %88 ], [ 1, %109 ], [ 1, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %124
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIjEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = trunc i64 %9 to i32
  %11 = icmp ult i32 %10, 2147483647
  %12 = select i1 %11, i32 %10, i32 2147483647
  store i32 %12, i32* %8, align 4
  br label %25

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %22 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEjNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i32 %20, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %21)
  %23 = and i8 %22, 1
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %13, %18, %7
  %26 = phi i1 [ true, %7 ], [ %24, %18 ], [ false, %13 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEjNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i32, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %74 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %48
    i8 5, label %62
    i8 2, label %66
    i8 3, label %66
    i8 14, label %70
    i8 10, label %70
    i8 8, label %70
    i8 12, label %70
    i8 15, label %70
    i8 11, label %70
    i8 9, label %70
    i8 13, label %70
  ]

12:                                               ; preds = %4
  %13 = trunc i32 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %123

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i32 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i32 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %17, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %75

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i32 [ %0, %27 ], [ %40, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i32 %31, 1
  %34 = and i32 %33, 510
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %35
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast i8* %32 to i16*
  %39 = load i16, i16* %37, align 2
  store i16 %39, i16* %38, align 1
  %40 = lshr i32 %31, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %29
  %43 = trunc i16 %39 to i8
  %44 = icmp eq i8 %43, 48
  %45 = getelementptr inbounds i8, i8* %30, i64 -1
  %46 = select i1 %44, i8* %45, i8* %32
  %47 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %46, i8** %47, align 8
  br label %75

48:                                               ; preds = %4
  %49 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i32 [ %0, %48 ], [ %58, %50 ]
  %52 = phi i8* [ %49, %48 ], [ %57, %50 ]
  %53 = and i32 %51, 15
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 -1
  store i8 %56, i8* %57, align 1
  %58 = lshr i32 %51, 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %50

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %57, i8** %61, align 8
  br label %75

62:                                               ; preds = %4
  %63 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %64 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %0, i8* %63) #7
  br label %75

66:                                               ; preds = %4, %4
  %67 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %68 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %67, i8** %68, align 8
  %69 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %0, i8* %67) #7
  br label %75

70:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %71 = uitofp i32 %0 to double
  %72 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %71, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %73 = zext i1 %72 to i8
  br label %123

74:                                               ; preds = %4
  unreachable

75:                                               ; preds = %66, %62, %60, %42, %25
  %76 = phi i8* [ %69, %66 ], [ %65, %62 ], [ %49, %60 ], [ %28, %42 ], [ %15, %25 ]
  %77 = phi i8* [ %67, %66 ], [ %63, %62 ], [ %57, %60 ], [ %46, %42 ], [ %22, %25 ]
  %78 = ptrtoint i8* %76 to i64
  %79 = ptrtoint i8* %77 to i64
  %80 = sub i64 %78, %79
  %81 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %120

85:                                               ; preds = %75
  %86 = icmp sgt i64 %80, -1
  br i1 %86, label %88, label %87, !prof !3

87:                                               ; preds = %85
  call void @llvm.trap() #7
  unreachable

88:                                               ; preds = %85
  %89 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i64 %80, 0
  br i1 %91, label %123, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, %80
  store i64 %95, i64* %93, align 8
  %96 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = ptrtoint i8* %96 to i64
  %101 = sub i64 %100, %99
  %102 = icmp ugt i64 %101, %80
  br i1 %102, label %116, label %103

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %105 = ptrtoint i8* %104 to i64
  %106 = sub i64 %99, %105
  %107 = icmp sgt i64 %106, -1
  br i1 %107, label %109, label %108, !prof !3

108:                                              ; preds = %103
  call void @llvm.trap() #7
  unreachable

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %111 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %110, align 8
  %112 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  call void %111(i8* %113, i8* %104, i64 %106) #7
  store i8* %104, i8** %97, align 8
  %114 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %110, align 8
  %115 = load i8*, i8** %112, align 8
  call void %114(i8* %115, i8* %90, i64 %80) #7
  br label %123

116:                                              ; preds = %92
  %117 = inttoptr i64 %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %90, i64 %80, i1 false) #7
  %118 = load i8*, i8** %97, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %80
  store i8* %119, i8** %97, align 8
  br label %123

120:                                              ; preds = %75
  %121 = load i64, i64* %8, align 8
  %122 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %121, i32 %122, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %123

123:                                              ; preds = %12, %70, %88, %109, %116, %120
  %124 = phi i8 [ %73, %70 ], [ 1, %120 ], [ 1, %12 ], [ 1, %88 ], [ 1, %109 ], [ 1, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %124
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIlEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %15, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = icmp sgt i8* %0, inttoptr (i64 2147483647 to i8*)
  %11 = icmp sgt i64 %9, -2147483648
  %12 = select i1 %11, i64 %9, i64 -2147483648
  %13 = trunc i64 %12 to i32
  %14 = select i1 %10, i32 2147483647, i32 %13
  store i32 %14, i32* %8, align 4
  br label %26

15:                                               ; preds = %4
  %16 = and i64 %1, 255
  %17 = shl i64 2, %16
  %18 = and i64 %17, 131067
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %26, label %20, !prof !2

20:                                               ; preds = %15
  %21 = ptrtoint i8* %0 to i64
  %22 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %23 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplElNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %21, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %22)
  %24 = and i8 %23, 1
  %25 = icmp ne i8 %24, 0
  br label %26

26:                                               ; preds = %15, %20, %7
  %27 = phi i1 [ true, %7 ], [ %25, %20 ], [ false, %15 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplElNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %72 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %47
    i8 5, label %60
    i8 2, label %64
    i8 3, label %64
    i8 14, label %68
    i8 10, label %68
    i8 8, label %68
    i8 12, label %68
    i8 15, label %68
    i8 11, label %68
    i8 9, label %68
    i8 13, label %68
  ]

12:                                               ; preds = %4
  %13 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i64 %17, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %73

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i64 [ %0, %27 ], [ %39, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i64 %31, 1
  %34 = and i64 %33, 510
  %35 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %34
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast i8* %32 to i16*
  %38 = load i16, i16* %36, align 2
  store i16 %38, i16* %37, align 1
  %39 = lshr i64 %31, 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29

41:                                               ; preds = %29
  %42 = trunc i16 %38 to i8
  %43 = icmp eq i8 %42, 48
  %44 = getelementptr inbounds i8, i8* %30, i64 -1
  %45 = select i1 %43, i8* %44, i8* %32
  %46 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %45, i8** %46, align 8
  br label %73

47:                                               ; preds = %4
  %48 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %0, %47 ], [ %56, %49 ]
  %51 = phi i8* [ %48, %47 ], [ %55, %49 ]
  %52 = and i64 %50, 15
  %53 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 -1
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %50, 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %49

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %55, i8** %59, align 8
  br label %73

60:                                               ; preds = %4
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %62 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %61, i8** %62, align 8
  %63 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %61) #7
  br label %73

64:                                               ; preds = %4, %4
  %65 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %66 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %65, i8** %66, align 8
  %67 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %0, i8* %65) #7
  br label %73

68:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %69 = sitofp i64 %0 to double
  %70 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %69, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %71 = zext i1 %70 to i8
  br label %121

72:                                               ; preds = %4
  unreachable

73:                                               ; preds = %64, %60, %58, %41, %25
  %74 = phi i8* [ %67, %64 ], [ %63, %60 ], [ %48, %58 ], [ %28, %41 ], [ %15, %25 ]
  %75 = phi i8* [ %65, %64 ], [ %61, %60 ], [ %55, %58 ], [ %45, %41 ], [ %22, %25 ]
  %76 = ptrtoint i8* %74 to i64
  %77 = ptrtoint i8* %75 to i64
  %78 = sub i64 %76, %77
  %79 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %118

83:                                               ; preds = %73
  %84 = icmp sgt i64 %78, -1
  br i1 %84, label %86, label %85, !prof !3

85:                                               ; preds = %83
  call void @llvm.trap() #7
  unreachable

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i64 %78, 0
  br i1 %89, label %121, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, %78
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = ptrtoint i8* %94 to i64
  %99 = sub i64 %98, %97
  %100 = icmp ugt i64 %99, %78
  br i1 %100, label %114, label %101

101:                                              ; preds = %90
  %102 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %97, %103
  %105 = icmp sgt i64 %104, -1
  br i1 %105, label %107, label %106, !prof !3

106:                                              ; preds = %101
  call void @llvm.trap() #7
  unreachable

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %109 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  call void %109(i8* %111, i8* %102, i64 %104) #7
  store i8* %102, i8** %95, align 8
  %112 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %113 = load i8*, i8** %110, align 8
  call void %112(i8* %113, i8* %88, i64 %78) #7
  br label %121

114:                                              ; preds = %90
  %115 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %88, i64 %78, i1 false) #7
  %116 = load i8*, i8** %95, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %78
  store i8* %117, i8** %95, align 8
  br label %121

118:                                              ; preds = %73
  %119 = load i64, i64* %8, align 8
  %120 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %119, i32 %120, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

121:                                              ; preds = %12, %68, %86, %107, %114, %118
  %122 = phi i8 [ %71, %68 ], [ 1, %118 ], [ 1, %12 ], [ 1, %86 ], [ 1, %107 ], [ 1, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %122
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchImEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = icmp ult i64 %9, 2147483647
  %11 = select i1 %10, i64 %9, i64 2147483647
  %12 = trunc i64 %11 to i32
  store i32 %12, i32* %8, align 4
  br label %24

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEmNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %19, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %20)
  %22 = and i8 %21, 1
  %23 = icmp ne i8 %22, 0
  br label %24

24:                                               ; preds = %13, %18, %7
  %25 = phi i1 [ true, %7 ], [ %23, %18 ], [ false, %13 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEmNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %72 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %47
    i8 5, label %60
    i8 2, label %64
    i8 3, label %64
    i8 14, label %68
    i8 10, label %68
    i8 8, label %68
    i8 12, label %68
    i8 15, label %68
    i8 11, label %68
    i8 9, label %68
    i8 13, label %68
  ]

12:                                               ; preds = %4
  %13 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i64 %17, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %73

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i64 [ %0, %27 ], [ %39, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i64 %31, 1
  %34 = and i64 %33, 510
  %35 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %34
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast i8* %32 to i16*
  %38 = load i16, i16* %36, align 2
  store i16 %38, i16* %37, align 1
  %39 = lshr i64 %31, 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29

41:                                               ; preds = %29
  %42 = trunc i16 %38 to i8
  %43 = icmp eq i8 %42, 48
  %44 = getelementptr inbounds i8, i8* %30, i64 -1
  %45 = select i1 %43, i8* %44, i8* %32
  %46 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %45, i8** %46, align 8
  br label %73

47:                                               ; preds = %4
  %48 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %0, %47 ], [ %56, %49 ]
  %51 = phi i8* [ %48, %47 ], [ %55, %49 ]
  %52 = and i64 %50, 15
  %53 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 -1
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %50, 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %49

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %55, i8** %59, align 8
  br label %73

60:                                               ; preds = %4
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %62 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %61, i8** %62, align 8
  %63 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %61) #7
  br label %73

64:                                               ; preds = %4, %4
  %65 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %66 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %65, i8** %66, align 8
  %67 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %65) #7
  br label %73

68:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %69 = uitofp i64 %0 to double
  %70 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %69, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %71 = zext i1 %70 to i8
  br label %121

72:                                               ; preds = %4
  unreachable

73:                                               ; preds = %64, %60, %58, %41, %25
  %74 = phi i8* [ %67, %64 ], [ %63, %60 ], [ %48, %58 ], [ %28, %41 ], [ %15, %25 ]
  %75 = phi i8* [ %65, %64 ], [ %61, %60 ], [ %55, %58 ], [ %45, %41 ], [ %22, %25 ]
  %76 = ptrtoint i8* %74 to i64
  %77 = ptrtoint i8* %75 to i64
  %78 = sub i64 %76, %77
  %79 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %118

83:                                               ; preds = %73
  %84 = icmp sgt i64 %78, -1
  br i1 %84, label %86, label %85, !prof !3

85:                                               ; preds = %83
  call void @llvm.trap() #7
  unreachable

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i64 %78, 0
  br i1 %89, label %121, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, %78
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = ptrtoint i8* %94 to i64
  %99 = sub i64 %98, %97
  %100 = icmp ugt i64 %99, %78
  br i1 %100, label %114, label %101

101:                                              ; preds = %90
  %102 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %97, %103
  %105 = icmp sgt i64 %104, -1
  br i1 %105, label %107, label %106, !prof !3

106:                                              ; preds = %101
  call void @llvm.trap() #7
  unreachable

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %109 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  call void %109(i8* %111, i8* %102, i64 %104) #7
  store i8* %102, i8** %95, align 8
  %112 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %113 = load i8*, i8** %110, align 8
  call void %112(i8* %113, i8* %88, i64 %78) #7
  br label %121

114:                                              ; preds = %90
  %115 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %88, i64 %78, i1 false) #7
  %116 = load i8*, i8** %95, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %78
  store i8* %117, i8** %95, align 8
  br label %121

118:                                              ; preds = %73
  %119 = load i64, i64* %8, align 8
  %120 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %119, i32 %120, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

121:                                              ; preds = %12, %68, %86, %107, %114, %118
  %122 = phi i8 [ %71, %68 ], [ 1, %118 ], [ 1, %12 ], [ 1, %86 ], [ 1, %107 ], [ 1, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %122
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIxEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %15, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = icmp sgt i8* %0, inttoptr (i64 2147483647 to i8*)
  %11 = icmp sgt i64 %9, -2147483648
  %12 = select i1 %11, i64 %9, i64 -2147483648
  %13 = trunc i64 %12 to i32
  %14 = select i1 %10, i32 2147483647, i32 %13
  store i32 %14, i32* %8, align 4
  br label %26

15:                                               ; preds = %4
  %16 = and i64 %1, 255
  %17 = shl i64 2, %16
  %18 = and i64 %17, 131067
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %26, label %20, !prof !2

20:                                               ; preds = %15
  %21 = ptrtoint i8* %0 to i64
  %22 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %23 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplExNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %21, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %22)
  %24 = and i8 %23, 1
  %25 = icmp ne i8 %24, 0
  br label %26

26:                                               ; preds = %15, %20, %7
  %27 = phi i1 [ true, %7 ], [ %25, %20 ], [ false, %15 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplExNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %72 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %47
    i8 5, label %60
    i8 2, label %64
    i8 3, label %64
    i8 14, label %68
    i8 10, label %68
    i8 8, label %68
    i8 12, label %68
    i8 15, label %68
    i8 11, label %68
    i8 9, label %68
    i8 13, label %68
  ]

12:                                               ; preds = %4
  %13 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i64 %17, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %73

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i64 [ %0, %27 ], [ %39, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i64 %31, 1
  %34 = and i64 %33, 510
  %35 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %34
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast i8* %32 to i16*
  %38 = load i16, i16* %36, align 2
  store i16 %38, i16* %37, align 1
  %39 = lshr i64 %31, 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29

41:                                               ; preds = %29
  %42 = trunc i16 %38 to i8
  %43 = icmp eq i8 %42, 48
  %44 = getelementptr inbounds i8, i8* %30, i64 -1
  %45 = select i1 %43, i8* %44, i8* %32
  %46 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %45, i8** %46, align 8
  br label %73

47:                                               ; preds = %4
  %48 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %0, %47 ], [ %56, %49 ]
  %51 = phi i8* [ %48, %47 ], [ %55, %49 ]
  %52 = and i64 %50, 15
  %53 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 -1
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %50, 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %49

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %55, i8** %59, align 8
  br label %73

60:                                               ; preds = %4
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %62 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %61, i8** %62, align 8
  %63 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %61) #7
  br label %73

64:                                               ; preds = %4, %4
  %65 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %66 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %65, i8** %66, align 8
  %67 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %0, i8* %65) #7
  br label %73

68:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %69 = sitofp i64 %0 to double
  %70 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %69, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %71 = zext i1 %70 to i8
  br label %121

72:                                               ; preds = %4
  unreachable

73:                                               ; preds = %64, %60, %58, %41, %25
  %74 = phi i8* [ %67, %64 ], [ %63, %60 ], [ %48, %58 ], [ %28, %41 ], [ %15, %25 ]
  %75 = phi i8* [ %65, %64 ], [ %61, %60 ], [ %55, %58 ], [ %45, %41 ], [ %22, %25 ]
  %76 = ptrtoint i8* %74 to i64
  %77 = ptrtoint i8* %75 to i64
  %78 = sub i64 %76, %77
  %79 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %118

83:                                               ; preds = %73
  %84 = icmp sgt i64 %78, -1
  br i1 %84, label %86, label %85, !prof !3

85:                                               ; preds = %83
  call void @llvm.trap() #7
  unreachable

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i64 %78, 0
  br i1 %89, label %121, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, %78
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = ptrtoint i8* %94 to i64
  %99 = sub i64 %98, %97
  %100 = icmp ugt i64 %99, %78
  br i1 %100, label %114, label %101

101:                                              ; preds = %90
  %102 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %97, %103
  %105 = icmp sgt i64 %104, -1
  br i1 %105, label %107, label %106, !prof !3

106:                                              ; preds = %101
  call void @llvm.trap() #7
  unreachable

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %109 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  call void %109(i8* %111, i8* %102, i64 %104) #7
  store i8* %102, i8** %95, align 8
  %112 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %113 = load i8*, i8** %110, align 8
  call void %112(i8* %113, i8* %88, i64 %78) #7
  br label %121

114:                                              ; preds = %90
  %115 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %88, i64 %78, i1 false) #7
  %116 = load i8*, i8** %95, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %78
  store i8* %117, i8** %95, align 8
  br label %121

118:                                              ; preds = %73
  %119 = load i64, i64* %8, align 8
  %120 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %119, i32 %120, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

121:                                              ; preds = %12, %68, %86, %107, %114, %118
  %122 = phi i8 [ %71, %68 ], [ 1, %118 ], [ 1, %12 ], [ 1, %86 ], [ 1, %107 ], [ 1, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %122
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIyEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %7, label %13, !prof !2

7:                                                ; preds = %4
  %8 = bitcast i8* %3 to i32*
  %9 = ptrtoint i8* %0 to i64
  %10 = icmp ult i64 %9, 2147483647
  %11 = select i1 %10, i64 %9, i64 2147483647
  %12 = trunc i64 %11 to i32
  store i32 %12, i32* %8, align 4
  br label %24

13:                                               ; preds = %4
  %14 = and i64 %1, 255
  %15 = shl i64 2, %14
  %16 = and i64 %15, 131067
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18, !prof !2

18:                                               ; preds = %13
  %19 = ptrtoint i8* %0 to i64
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEyNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %19, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %20)
  %22 = and i8 %21, 1
  %23 = icmp ne i8 %22, 0
  br label %24

24:                                               ; preds = %13, %18, %7
  %25 = phi i1 [ true, %7 ], [ %23, %18 ], [ false, %13 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEyNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %7 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7)
  %8 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %9, align 8
  %10 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 64, i1 false) #7
  %11 = trunc i64 %1 to i8
  switch i8 %11, label %72 [
    i8 0, label %12
    i8 4, label %14
    i8 6, label %27
    i8 7, label %47
    i8 5, label %60
    i8 2, label %64
    i8 3, label %64
    i8 14, label %68
    i8 10, label %68
    i8 8, label %68
    i8 12, label %68
    i8 15, label %68
    i8 11, label %68
    i8 9, label %68
    i8 13, label %68
  ]

12:                                               ; preds = %4
  %13 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ %0, %14 ], [ %23, %16 ]
  %18 = phi i8* [ %15, %14 ], [ %22, %16 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 7
  %21 = or i8 %20, 48
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  store i8 %21, i8* %22, align 1
  %23 = lshr i64 %17, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %16

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %22, i8** %26, align 8
  br label %73

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i8* [ %28, %27 ], [ %32, %29 ]
  %31 = phi i64 [ %0, %27 ], [ %39, %29 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 -2
  %33 = shl i64 %31, 1
  %34 = and i64 %33, 510
  %35 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %34
  %36 = bitcast i8* %35 to i16*
  %37 = bitcast i8* %32 to i16*
  %38 = load i16, i16* %36, align 2
  store i16 %38, i16* %37, align 1
  %39 = lshr i64 %31, 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29

41:                                               ; preds = %29
  %42 = trunc i16 %38 to i8
  %43 = icmp eq i8 %42, 48
  %44 = getelementptr inbounds i8, i8* %30, i64 -1
  %45 = select i1 %43, i8* %44, i8* %32
  %46 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %45, i8** %46, align 8
  br label %73

47:                                               ; preds = %4
  %48 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 44
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ %0, %47 ], [ %56, %49 ]
  %51 = phi i8* [ %48, %47 ], [ %55, %49 ]
  %52 = and i64 %50, 15
  %53 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 -1
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %50, 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %49

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %55, i8** %59, align 8
  br label %73

60:                                               ; preds = %4
  %61 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %62 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %61, i8** %62, align 8
  %63 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %61) #7
  br label %73

64:                                               ; preds = %4, %4
  %65 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 2, i64 0
  %66 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  store i8* %65, i8** %66, align 8
  %67 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %0, i8* %65) #7
  br label %73

68:                                               ; preds = %4, %4, %4, %4, %4, %4, %4, %4
  %69 = uitofp i64 %0 to double
  %70 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %69, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %71 = zext i1 %70 to i8
  br label %121

72:                                               ; preds = %4
  unreachable

73:                                               ; preds = %64, %60, %58, %41, %25
  %74 = phi i8* [ %67, %64 ], [ %63, %60 ], [ %48, %58 ], [ %28, %41 ], [ %15, %25 ]
  %75 = phi i8* [ %65, %64 ], [ %61, %60 ], [ %55, %58 ], [ %45, %41 ], [ %22, %25 ]
  %76 = ptrtoint i8* %74 to i64
  %77 = ptrtoint i8* %75 to i64
  %78 = sub i64 %76, %77
  %79 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 1
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 1
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %118

83:                                               ; preds = %73
  %84 = icmp sgt i64 %78, -1
  br i1 %84, label %86, label %85, !prof !3

85:                                               ; preds = %83
  call void @llvm.trap() #7
  unreachable

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %6, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i64 %78, 0
  br i1 %89, label %121, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, %78
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %96 = bitcast i8** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = ptrtoint i8* %94 to i64
  %99 = sub i64 %98, %97
  %100 = icmp ugt i64 %99, %78
  br i1 %100, label %114, label %101

101:                                              ; preds = %90
  %102 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %97, %103
  %105 = icmp sgt i64 %104, -1
  br i1 %105, label %107, label %106, !prof !3

106:                                              ; preds = %101
  call void @llvm.trap() #7
  unreachable

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %109 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %110 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  call void %109(i8* %111, i8* %102, i64 %104) #7
  store i8* %102, i8** %95, align 8
  %112 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %108, align 8
  %113 = load i8*, i8** %110, align 8
  call void %112(i8* %113, i8* %88, i64 %78) #7
  br label %121

114:                                              ; preds = %90
  %115 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %88, i64 %78, i1 false) #7
  %116 = load i8*, i8** %95, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %78
  store i8* %117, i8** %95, align 8
  br label %121

118:                                              ; preds = %73
  %119 = load i64, i64* %8, align 8
  %120 = load i32, i32* %9, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %6, i64 %119, i32 %120, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  br label %121

121:                                              ; preds = %12, %68, %86, %107, %114, %118
  %122 = phi i8 [ %71, %68 ], [ 1, %118 ], [ 1, %12 ], [ 1, %86 ], [ 1, %107 ], [ 1, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7)
  ret i8 %122
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_6int128EEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %22, label %7, !prof !2

7:                                                ; preds = %4
  %8 = and i64 %1, 255
  %9 = shl i64 2, %8
  %10 = and i64 %9, 131067
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %22, label %12, !prof !2

12:                                               ; preds = %7
  %13 = bitcast i8* %0 to i64*
  %14 = load i64, i64* %13, align 16
  %15 = getelementptr inbounds i8, i8* %0, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %19 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplENS_6int128ENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %14, i64 %17, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %18)
  %20 = and i8 %19, 1
  %21 = icmp ne i8 %20, 0
  br label %22

22:                                               ; preds = %7, %4, %12
  %23 = phi i1 [ %21, %12 ], [ false, %7 ], [ false, %4 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplENS_6int128ENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %6 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %7 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %8)
  %9 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6 to i64*
  store i64 %2, i64* %9, align 8
  %10 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 3
  store i32 %3, i32* %10, align 8
  %11 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false) #7
  %12 = trunc i64 %2 to i8
  switch i8 %12, label %176 [
    i8 0, label %13
    i8 4, label %15
    i8 6, label %40
    i8 7, label %72
    i8 5, label %97
    i8 2, label %125
    i8 3, label %125
    i8 14, label %168
    i8 10, label %168
    i8 8, label %168
    i8 12, label %168
    i8 15, label %168
    i8 11, label %168
    i8 9, label %168
    i8 13, label %168
  ]

13:                                               ; preds = %5
  %14 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %14, i64 %2, i32 %3, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  br label %219

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ %1, %15 ], [ %31, %17 ]
  %19 = phi i64 [ %0, %15 ], [ %30, %17 ]
  %20 = phi i8* [ %16, %15 ], [ %24, %17 ]
  %21 = trunc i64 %19 to i8
  %22 = and i8 %21, 7
  %23 = or i8 %22, 48
  %24 = getelementptr inbounds i8, i8* %20, i64 -1
  store i8 %23, i8* %24, align 1
  %25 = zext i64 %18 to i128
  %26 = shl nuw i128 %25, 64
  %27 = zext i64 %19 to i128
  %28 = or i128 %26, %27
  %29 = lshr i128 %28, 3
  %30 = trunc i128 %29 to i64
  %31 = lshr i64 %18, 3
  %32 = or i64 %31, %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %17

34:                                               ; preds = %17
  %35 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %24, i8** %35, align 8
  %36 = ptrtoint i8* %16 to i64
  %37 = ptrtoint i8* %24 to i64
  %38 = sub i64 %36, %37
  %39 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %38, i64* %39, align 8
  br label %177

40:                                               ; preds = %5
  %41 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ %1, %40 ], [ %59, %42 ]
  %44 = phi i64 [ %0, %40 ], [ %58, %42 ]
  %45 = phi i8* [ %41, %40 ], [ %46, %42 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 -2
  %47 = shl i64 %44, 1
  %48 = and i64 %47, 510
  %49 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %48
  %50 = bitcast i8* %49 to i16*
  %51 = bitcast i8* %46 to i16*
  %52 = load i16, i16* %50, align 2
  store i16 %52, i16* %51, align 1
  %53 = zext i64 %43 to i128
  %54 = shl nuw i128 %53, 64
  %55 = zext i64 %44 to i128
  %56 = or i128 %54, %55
  %57 = lshr i128 %56, 8
  %58 = trunc i128 %57 to i64
  %59 = lshr i64 %43, 8
  %60 = or i64 %59, %58
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %42

62:                                               ; preds = %42
  %63 = trunc i16 %52 to i8
  %64 = icmp eq i8 %63, 48
  %65 = getelementptr inbounds i8, i8* %45, i64 -1
  %66 = select i1 %64, i8* %65, i8* %46
  %67 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %66, i8** %67, align 8
  %68 = ptrtoint i8* %41 to i64
  %69 = ptrtoint i8* %66 to i64
  %70 = sub i64 %68, %69
  %71 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %70, i64* %71, align 8
  br label %177

72:                                               ; preds = %5
  %73 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ %1, %72 ], [ %88, %74 ]
  %76 = phi i64 [ %0, %72 ], [ %87, %74 ]
  %77 = phi i8* [ %73, %72 ], [ %81, %74 ]
  %78 = and i64 %76, 15
  %79 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 -1
  store i8 %80, i8* %81, align 1
  %82 = zext i64 %75 to i128
  %83 = shl nuw i128 %82, 64
  %84 = zext i64 %76 to i128
  %85 = or i128 %83, %84
  %86 = lshr i128 %85, 4
  %87 = trunc i128 %86 to i64
  %88 = lshr i64 %75, 4
  %89 = or i64 %88, %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %74

91:                                               ; preds = %74
  %92 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %81, i8** %92, align 8
  %93 = ptrtoint i8* %73 to i64
  %94 = ptrtoint i8* %81 to i64
  %95 = sub i64 %93, %94
  %96 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %95, i64* %96, align 8
  br label %177

97:                                               ; preds = %5
  %98 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ %0, %97 ], [ %111, %99 ]
  %101 = phi i64 [ %1, %97 ], [ %112, %99 ]
  %102 = phi i8* [ %98, %97 ], [ %103, %99 ]
  %103 = getelementptr inbounds i8, i8* %102, i64 -2
  %104 = tail call { i64, i64 } @_ZN4abslrmENS_7uint128ES0_(i64 %100, i64 %101, i64 100, i64 0) #7
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %105, i64 0
  %107 = bitcast i8* %106 to i16*
  %108 = bitcast i8* %103 to i16*
  %109 = load i16, i16* %107, align 2
  store i16 %109, i16* %108, align 1
  %110 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %100, i64 %101, i64 100, i64 0) #7
  %111 = extractvalue { i64, i64 } %110, 0
  %112 = extractvalue { i64, i64 } %110, 1
  %113 = or i64 %111, %112
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %99

115:                                              ; preds = %99
  %116 = load i8, i8* %103, align 1
  %117 = icmp eq i8 %116, 48
  %118 = getelementptr inbounds i8, i8* %102, i64 -1
  %119 = select i1 %117, i8* %118, i8* %103
  %120 = ptrtoint i8* %98 to i64
  %121 = ptrtoint i8* %119 to i64
  %122 = sub i64 %120, %121
  %123 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %119, i8** %124, align 8
  br label %177

125:                                              ; preds = %5, %5
  %126 = icmp slt i64 %1, 0
  br i1 %126, label %127, label %133

127:                                              ; preds = %125
  %128 = sub i64 0, %1
  %129 = sub i64 0, %0
  %130 = icmp ne i64 %0, 0
  %131 = zext i1 %130 to i64
  %132 = sub nuw i64 %128, %131
  br label %133

133:                                              ; preds = %127, %125
  %134 = phi i64 [ %129, %127 ], [ %0, %125 ]
  %135 = phi i64 [ %132, %127 ], [ %1, %125 ]
  %136 = phi i1 [ true, %127 ], [ false, %125 ]
  %137 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %138

138:                                              ; preds = %138, %133
  %139 = phi i64 [ %134, %133 ], [ %150, %138 ]
  %140 = phi i64 [ %135, %133 ], [ %151, %138 ]
  %141 = phi i8* [ %137, %133 ], [ %142, %138 ]
  %142 = getelementptr inbounds i8, i8* %141, i64 -2
  %143 = tail call { i64, i64 } @_ZN4abslrmENS_7uint128ES0_(i64 %139, i64 %140, i64 100, i64 0) #7
  %144 = extractvalue { i64, i64 } %143, 0
  %145 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %144, i64 0
  %146 = bitcast i8* %145 to i16*
  %147 = bitcast i8* %142 to i16*
  %148 = load i16, i16* %146, align 2
  store i16 %148, i16* %147, align 1
  %149 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %139, i64 %140, i64 100, i64 0) #7
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = extractvalue { i64, i64 } %149, 1
  %152 = or i64 %150, %151
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %138

154:                                              ; preds = %138
  %155 = load i8, i8* %142, align 1
  %156 = icmp eq i8 %155, 48
  %157 = getelementptr inbounds i8, i8* %141, i64 -1
  %158 = select i1 %156, i8* %157, i8* %142
  br i1 %136, label %159, label %161

159:                                              ; preds = %154
  %160 = getelementptr inbounds i8, i8* %158, i64 -1
  store i8 45, i8* %160, align 1
  br label %161

161:                                              ; preds = %159, %154
  %162 = phi i8* [ %160, %159 ], [ %158, %154 ]
  %163 = ptrtoint i8* %137 to i64
  %164 = ptrtoint i8* %162 to i64
  %165 = sub i64 %163, %164
  %166 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %162, i8** %167, align 8
  br label %177

168:                                              ; preds = %5, %5, %5, %5, %5, %5, %5, %5
  %169 = zext i64 %1 to i128
  %170 = shl nuw i128 %169, 64
  %171 = zext i64 %0 to i128
  %172 = or i128 %170, %171
  %173 = sitofp i128 %172 to double
  %174 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %173, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %6, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  %175 = zext i1 %174 to i8
  br label %219

176:                                              ; preds = %5
  unreachable

177:                                              ; preds = %161, %115, %91, %62, %34
  %178 = phi i8* [ %162, %161 ], [ %119, %115 ], [ %81, %91 ], [ %66, %62 ], [ %24, %34 ]
  %179 = phi i64 [ %165, %161 ], [ %122, %115 ], [ %95, %91 ], [ %70, %62 ], [ %38, %34 ]
  %180 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 1
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %216

183:                                              ; preds = %177
  %184 = icmp sgt i64 %179, -1
  br i1 %184, label %186, label %185, !prof !3

185:                                              ; preds = %183
  call void @llvm.trap() #7
  unreachable

186:                                              ; preds = %183
  %187 = icmp eq i64 %179, 0
  br i1 %187, label %219, label %188

188:                                              ; preds = %186
  %189 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = add i64 %190, %179
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %193 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %194 = bitcast i8** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = ptrtoint i8* %192 to i64
  %197 = sub i64 %196, %195
  %198 = icmp ugt i64 %197, %179
  br i1 %198, label %212, label %199

199:                                              ; preds = %188
  %200 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %201 = ptrtoint i8* %200 to i64
  %202 = sub i64 %195, %201
  %203 = icmp sgt i64 %202, -1
  br i1 %203, label %205, label %204, !prof !3

204:                                              ; preds = %199
  call void @llvm.trap() #7
  unreachable

205:                                              ; preds = %199
  %206 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %207 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %206, align 8
  %208 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  %209 = load i8*, i8** %208, align 8
  call void %207(i8* %209, i8* %200, i64 %202) #7
  store i8* %200, i8** %193, align 8
  %210 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %206, align 8
  %211 = load i8*, i8** %208, align 8
  call void %210(i8* %211, i8* %178, i64 %179) #7
  br label %219

212:                                              ; preds = %188
  %213 = inttoptr i64 %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %213, i8* align 1 %178, i64 %179, i1 false) #7
  %214 = load i8*, i8** %193, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 %179
  store i8* %215, i8** %193, align 8
  br label %219

216:                                              ; preds = %177
  %217 = load i64, i64* %9, align 8
  %218 = load i32, i32* %10, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %7, i64 %217, i32 %218, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  br label %219

219:                                              ; preds = %13, %168, %186, %205, %212, %216
  %220 = phi i8 [ %175, %168 ], [ 1, %216 ], [ 1, %13 ], [ 1, %186 ], [ 1, %205 ], [ 1, %212 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %8)
  ret i8 %220
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_7uint128EEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %22, label %7, !prof !2

7:                                                ; preds = %4
  %8 = and i64 %1, 255
  %9 = shl i64 2, %8
  %10 = and i64 %9, 131067
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %22, label %12, !prof !2

12:                                               ; preds = %7
  %13 = bitcast i8* %0 to i64*
  %14 = load i64, i64* %13, align 16
  %15 = getelementptr inbounds i8, i8* %0, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %19 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplENS_7uint128ENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64 %14, i64 %17, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %18)
  %20 = and i8 %19, 1
  %21 = icmp ne i8 %20, 0
  br label %22

22:                                               ; preds = %7, %4, %12
  %23 = phi i1 [ %21, %12 ], [ false, %7 ], [ false, %4 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplENS_7uint128ENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i64, i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %6 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %7 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %8)
  %9 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6 to i64*
  store i64 %2, i64* %9, align 8
  %10 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 3
  store i32 %3, i32* %10, align 8
  %11 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false) #7
  %12 = trunc i64 %2 to i8
  switch i8 %12, label %160 [
    i8 0, label %13
    i8 4, label %15
    i8 6, label %40
    i8 7, label %72
    i8 5, label %97
    i8 2, label %125
    i8 3, label %125
    i8 14, label %153
    i8 10, label %153
    i8 8, label %153
    i8 12, label %153
    i8 15, label %153
    i8 11, label %153
    i8 9, label %153
    i8 13, label %153
  ]

13:                                               ; preds = %5
  %14 = trunc i64 %0 to i8
  tail call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext %14, i64 %2, i32 %3, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  br label %203

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ %1, %15 ], [ %31, %17 ]
  %19 = phi i64 [ %0, %15 ], [ %30, %17 ]
  %20 = phi i8* [ %16, %15 ], [ %24, %17 ]
  %21 = trunc i64 %19 to i8
  %22 = and i8 %21, 7
  %23 = or i8 %22, 48
  %24 = getelementptr inbounds i8, i8* %20, i64 -1
  store i8 %23, i8* %24, align 1
  %25 = zext i64 %18 to i128
  %26 = shl nuw i128 %25, 64
  %27 = zext i64 %19 to i128
  %28 = or i128 %26, %27
  %29 = lshr i128 %28, 3
  %30 = trunc i128 %29 to i64
  %31 = lshr i64 %18, 3
  %32 = or i64 %31, %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %17

34:                                               ; preds = %17
  %35 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %24, i8** %35, align 8
  %36 = ptrtoint i8* %16 to i64
  %37 = ptrtoint i8* %24 to i64
  %38 = sub i64 %36, %37
  %39 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %38, i64* %39, align 8
  br label %161

40:                                               ; preds = %5
  %41 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ %1, %40 ], [ %59, %42 ]
  %44 = phi i64 [ %0, %40 ], [ %58, %42 ]
  %45 = phi i8* [ %41, %40 ], [ %46, %42 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 -2
  %47 = shl i64 %44, 1
  %48 = and i64 %47, 510
  %49 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %48
  %50 = bitcast i8* %49 to i16*
  %51 = bitcast i8* %46 to i16*
  %52 = load i16, i16* %50, align 2
  store i16 %52, i16* %51, align 1
  %53 = zext i64 %43 to i128
  %54 = shl nuw i128 %53, 64
  %55 = zext i64 %44 to i128
  %56 = or i128 %54, %55
  %57 = lshr i128 %56, 8
  %58 = trunc i128 %57 to i64
  %59 = lshr i64 %43, 8
  %60 = or i64 %59, %58
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %42

62:                                               ; preds = %42
  %63 = trunc i16 %52 to i8
  %64 = icmp eq i8 %63, 48
  %65 = getelementptr inbounds i8, i8* %45, i64 -1
  %66 = select i1 %64, i8* %65, i8* %46
  %67 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %66, i8** %67, align 8
  %68 = ptrtoint i8* %41 to i64
  %69 = ptrtoint i8* %66 to i64
  %70 = sub i64 %68, %69
  %71 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %70, i64* %71, align 8
  br label %161

72:                                               ; preds = %5
  %73 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ %1, %72 ], [ %88, %74 ]
  %76 = phi i64 [ %0, %72 ], [ %87, %74 ]
  %77 = phi i8* [ %73, %72 ], [ %81, %74 ]
  %78 = and i64 %76, 15
  %79 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.6, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 -1
  store i8 %80, i8* %81, align 1
  %82 = zext i64 %75 to i128
  %83 = shl nuw i128 %82, 64
  %84 = zext i64 %76 to i128
  %85 = or i128 %83, %84
  %86 = lshr i128 %85, 4
  %87 = trunc i128 %86 to i64
  %88 = lshr i64 %75, 4
  %89 = or i64 %88, %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %74

91:                                               ; preds = %74
  %92 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %81, i8** %92, align 8
  %93 = ptrtoint i8* %73 to i64
  %94 = ptrtoint i8* %81 to i64
  %95 = sub i64 %93, %94
  %96 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %95, i64* %96, align 8
  br label %161

97:                                               ; preds = %5
  %98 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ %0, %97 ], [ %111, %99 ]
  %101 = phi i64 [ %1, %97 ], [ %112, %99 ]
  %102 = phi i8* [ %98, %97 ], [ %103, %99 ]
  %103 = getelementptr inbounds i8, i8* %102, i64 -2
  %104 = tail call { i64, i64 } @_ZN4abslrmENS_7uint128ES0_(i64 %100, i64 %101, i64 100, i64 0) #7
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %105, i64 0
  %107 = bitcast i8* %106 to i16*
  %108 = bitcast i8* %103 to i16*
  %109 = load i16, i16* %107, align 2
  store i16 %109, i16* %108, align 1
  %110 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %100, i64 %101, i64 100, i64 0) #7
  %111 = extractvalue { i64, i64 } %110, 0
  %112 = extractvalue { i64, i64 } %110, 1
  %113 = or i64 %111, %112
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %99

115:                                              ; preds = %99
  %116 = load i8, i8* %103, align 1
  %117 = icmp eq i8 %116, 48
  %118 = getelementptr inbounds i8, i8* %102, i64 -1
  %119 = select i1 %117, i8* %118, i8* %103
  %120 = ptrtoint i8* %98 to i64
  %121 = ptrtoint i8* %119 to i64
  %122 = sub i64 %120, %121
  %123 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %119, i8** %124, align 8
  br label %161

125:                                              ; preds = %5, %5
  %126 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 2, i64 44
  br label %127

127:                                              ; preds = %127, %125
  %128 = phi i64 [ %0, %125 ], [ %139, %127 ]
  %129 = phi i64 [ %1, %125 ], [ %140, %127 ]
  %130 = phi i8* [ %126, %125 ], [ %131, %127 ]
  %131 = getelementptr inbounds i8, i8* %130, i64 -2
  %132 = tail call { i64, i64 } @_ZN4abslrmENS_7uint128ES0_(i64 %128, i64 %129, i64 100, i64 0) #7
  %133 = extractvalue { i64, i64 } %132, 0
  %134 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %133, i64 0
  %135 = bitcast i8* %134 to i16*
  %136 = bitcast i8* %131 to i16*
  %137 = load i16, i16* %135, align 2
  store i16 %137, i16* %136, align 1
  %138 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %128, i64 %129, i64 100, i64 0) #7
  %139 = extractvalue { i64, i64 } %138, 0
  %140 = extractvalue { i64, i64 } %138, 1
  %141 = or i64 %139, %140
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127

143:                                              ; preds = %127
  %144 = load i8, i8* %131, align 1
  %145 = icmp eq i8 %144, 48
  %146 = getelementptr inbounds i8, i8* %130, i64 -1
  %147 = select i1 %145, i8* %146, i8* %131
  %148 = ptrtoint i8* %126 to i64
  %149 = ptrtoint i8* %147 to i64
  %150 = sub i64 %148, %149
  %151 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 1
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %7, i64 0, i32 0
  store i8* %147, i8** %152, align 8
  br label %161

153:                                              ; preds = %5, %5, %5, %5, %5, %5, %5, %5
  %154 = uitofp i64 %0 to double
  %155 = uitofp i64 %1 to double
  %156 = tail call double @ldexp(double %155, i32 64) #7
  %157 = fadd double %156, %154
  %158 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %157, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %6, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  %159 = zext i1 %158 to i8
  br label %203

160:                                              ; preds = %5
  unreachable

161:                                              ; preds = %143, %115, %91, %62, %34
  %162 = phi i8* [ %147, %143 ], [ %119, %115 ], [ %81, %91 ], [ %66, %62 ], [ %24, %34 ]
  %163 = phi i64 [ %150, %143 ], [ %122, %115 ], [ %95, %91 ], [ %70, %62 ], [ %38, %34 ]
  %164 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %6, i64 0, i32 1
  %165 = load i8, i8* %164, align 1
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %200

167:                                              ; preds = %161
  %168 = icmp sgt i64 %163, -1
  br i1 %168, label %170, label %169, !prof !3

169:                                              ; preds = %167
  call void @llvm.trap() #7
  unreachable

170:                                              ; preds = %167
  %171 = icmp eq i64 %163, 0
  br i1 %171, label %203, label %172

172:                                              ; preds = %170
  %173 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %174 = load i64, i64* %173, align 8
  %175 = add i64 %174, %163
  store i64 %175, i64* %173, align 8
  %176 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %177 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %178 = bitcast i8** %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = ptrtoint i8* %176 to i64
  %181 = sub i64 %180, %179
  %182 = icmp ugt i64 %181, %163
  br i1 %182, label %196, label %183

183:                                              ; preds = %172
  %184 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %185 = ptrtoint i8* %184 to i64
  %186 = sub i64 %179, %185
  %187 = icmp sgt i64 %186, -1
  br i1 %187, label %189, label %188, !prof !3

188:                                              ; preds = %183
  call void @llvm.trap() #7
  unreachable

189:                                              ; preds = %183
  %190 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %191 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %190, align 8
  %192 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  call void %191(i8* %193, i8* %184, i64 %186) #7
  store i8* %184, i8** %177, align 8
  %194 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %190, align 8
  %195 = load i8*, i8** %192, align 8
  call void %194(i8* %195, i8* %162, i64 %163) #7
  br label %203

196:                                              ; preds = %172
  %197 = inttoptr i64 %179 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %197, i8* align 1 %162, i64 %163, i1 false) #7
  %198 = load i8*, i8** %177, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 %163
  store i8* %199, i8** %177, align 8
  br label %203

200:                                              ; preds = %161
  %201 = load i64, i64* %9, align 8
  %202 = load i32, i32* %10, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %7, i64 %201, i32 %202, %"class.absl::str_format_internal::FormatSinkImpl"* %4) #7
  br label %203

203:                                              ; preds = %13, %153, %170, %189, %196, %200
  %204 = phi i8 [ %159, %153 ], [ 1, %200 ], [ 1, %13 ], [ 1, %170 ], [ 1, %189 ], [ 1, %196 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %8)
  ret i8 %204
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIfEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = trunc i64 %1 to i8
  %7 = icmp eq i8 %6, 18
  br i1 %7, label %27, label %8, !prof !2

8:                                                ; preds = %4
  %9 = and i64 %1, 255
  %10 = shl i64 2, %9
  %11 = and i64 %10, 130560
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %27, label %13, !prof !2

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #7
  %15 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %15, align 8
  %16 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %16, align 8
  %17 = and i64 %1, 248
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %19, label %25

19:                                               ; preds = %13
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = ptrtoint i8* %0 to i64
  %22 = trunc i64 %21 to i32
  %23 = bitcast i32 %22 to float
  %24 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEfRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(float %23, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %20) #7
  br label %25

25:                                               ; preds = %13, %19
  %26 = phi i1 [ false, %13 ], [ %24, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #7
  br label %27

27:                                               ; preds = %8, %4, %25
  %28 = phi i1 [ %26, %25 ], [ false, %8 ], [ false, %4 ]
  ret i1 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEfNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(float, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6)
  %7 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %8, align 8
  %9 = and i64 %1, 248
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEfRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(float %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %4, %11
  %15 = phi i8 [ 0, %4 ], [ %13, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6)
  ret i8 %15
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIdEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = trunc i64 %1 to i8
  %7 = icmp eq i8 %6, 18
  br i1 %7, label %26, label %8, !prof !2

8:                                                ; preds = %4
  %9 = and i64 %1, 255
  %10 = shl i64 2, %9
  %11 = and i64 %10, 130560
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %26, label %13, !prof !2

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #7
  %15 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %15, align 8
  %16 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %16, align 8
  %17 = and i64 %1, 248
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %21 = ptrtoint i8* %0 to i64
  %22 = bitcast i64 %21 to double
  %23 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %22, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %20) #7
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i1 [ false, %13 ], [ %23, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #7
  br label %26

26:                                               ; preds = %8, %4, %24
  %27 = phi i1 [ %25, %24 ], [ false, %8 ], [ false, %4 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEdNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6)
  %7 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %8, align 8
  %9 = and i64 %1, 248
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %4, %11
  %15 = phi i8 [ 0, %4 ], [ %13, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6)
  ret i8 %15
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIeEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = trunc i64 %1 to i8
  %7 = icmp eq i8 %6, 18
  br i1 %7, label %26, label %8, !prof !2

8:                                                ; preds = %4
  %9 = and i64 %1, 255
  %10 = shl i64 2, %9
  %11 = and i64 %10, 130560
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %26, label %13, !prof !2

13:                                               ; preds = %8
  %14 = bitcast i8* %0 to x86_fp80*
  %15 = load x86_fp80, x86_fp80* %14, align 16
  %16 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %16) #7
  %17 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %17, align 8
  %18 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %18, align 8
  %19 = and i64 %1, 248
  %20 = icmp eq i64 %19, 8
  br i1 %20, label %21, label %24

21:                                               ; preds = %13
  %22 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %23 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEeRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80 %15, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %22) #7
  br label %24

24:                                               ; preds = %13, %21
  %25 = phi i1 [ false, %13 ], [ %23, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #7
  br label %26

26:                                               ; preds = %8, %4, %24
  %27 = phi i1 [ %25, %24 ], [ false, %8 ], [ false, %4 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEeNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::FormatConversionSpecImpl", align 8
  %6 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6)
  %7 = bitcast %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5 to i64*
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::FormatConversionSpecImpl", %"class.absl::str_format_internal::FormatConversionSpecImpl"* %5, i64 0, i32 3
  store i32 %2, i32* %8, align 8
  %9 = and i64 %1, 248
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = call zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEeRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80 %0, %"class.absl::str_format_internal::FormatConversionSpecImpl"* nonnull dereferenceable(12) %5, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %4, %11
  %15 = phi i8 [ 0, %4 ], [ %13, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6)
  ret i8 %15
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchIPKcEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %17, label %7, !prof !2

7:                                                ; preds = %4
  %8 = and i64 %1, 255
  %9 = shl i64 2, %8
  %10 = and i64 %9, 262148
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %17, label %12, !prof !2

12:                                               ; preds = %7
  %13 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %14 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplEPKcNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8* %0, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %13)
  %15 = and i8 %14, 1
  %16 = icmp ne i8 %15, 0
  br label %17

17:                                               ; preds = %7, %4, %12
  %18 = phi i1 [ %16, %12 ], [ false, %7 ], [ false, %4 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplEPKcNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8*, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", align 8
  %6 = trunc i64 %1 to i8
  %7 = icmp eq i8 %6, 17
  %8 = icmp eq i8* %0, null
  br i1 %7, label %9, label %64

9:                                                ; preds = %4
  br i1 %8, label %10, label %38

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, 5
  store i64 %13, i64* %11, align 8
  %14 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %15 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = ptrtoint i8* %14 to i64
  %19 = sub i64 %18, %17
  %20 = icmp ugt i64 %19, 5
  br i1 %20, label %34, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %17, %23
  %25 = icmp sgt i64 %24, -1
  br i1 %25, label %27, label %26, !prof !3

26:                                               ; preds = %21
  tail call void @llvm.trap() #7
  unreachable

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %29 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %28, align 8
  %30 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  tail call void %29(i8* %31, i8* %22, i64 %24) #7
  store i8* %22, i8** %15, align 8
  %32 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %28, align 8
  %33 = load i8*, i8** %30, align 8
  tail call void %32(i8* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #7
  br label %131

34:                                               ; preds = %10
  %35 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #7
  %36 = load i8*, i8** %15, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 5
  store i8* %37, i8** %15, align 8
  br label %131

38:                                               ; preds = %9
  %39 = ptrtoint i8* %0 to i64
  %40 = bitcast %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %40) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 64, i1 false) #7
  %41 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 2, i64 44
  br label %42

42:                                               ; preds = %42, %38
  %43 = phi i8* [ %41, %38 ], [ %45, %42 ]
  %44 = phi i64 [ %39, %38 ], [ %52, %42 ]
  %45 = getelementptr inbounds i8, i8* %43, i64 -2
  %46 = shl i64 %44, 1
  %47 = and i64 %46, 510
  %48 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %47
  %49 = bitcast i8* %48 to i16*
  %50 = bitcast i8* %45 to i16*
  %51 = load i16, i16* %49, align 2
  store i16 %51, i16* %50, align 1
  %52 = lshr i64 %44, 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %42

54:                                               ; preds = %42
  %55 = trunc i16 %51 to i8
  %56 = icmp eq i8 %55, 48
  %57 = getelementptr inbounds i8, i8* %43, i64 -1
  %58 = select i1 %56, i8* %57, i8* %45
  %59 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 0
  store i8* %58, i8** %59, align 8
  %60 = ptrtoint i8* %41 to i64
  %61 = ptrtoint i8* %58 to i64
  %62 = sub i64 %60, %61
  %63 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %5, i64 0, i32 1
  store i64 %62, i64* %63, align 8
  call fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nonnull dereferenceable(64) %5, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %3) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %40) #7
  br label %131

64:                                               ; preds = %4
  br i1 %8, label %89, label %65

65:                                               ; preds = %64
  %66 = icmp slt i32 %2, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %65
  %68 = tail call i64 @strlen(i8* nonnull %0) #8
  br label %85

69:                                               ; preds = %65
  %70 = sext i32 %2 to i64
  %71 = getelementptr inbounds i8, i8* %0, i64 %70
  %72 = icmp eq i32 %2, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %69, %77
  %74 = phi i8* [ %78, %77 ], [ %0, %69 ]
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds i8, i8* %74, i64 1
  %79 = icmp eq i8* %78, %71
  br i1 %79, label %80, label %73

80:                                               ; preds = %73, %77, %69
  %81 = phi i8* [ %0, %69 ], [ %74, %73 ], [ %71, %77 ]
  %82 = ptrtoint i8* %81 to i64
  %83 = ptrtoint i8* %0 to i64
  %84 = sub i64 %82, %83
  br label %85

85:                                               ; preds = %67, %80
  %86 = phi i64 [ %68, %67 ], [ %84, %80 ]
  %87 = icmp sgt i64 %86, -1
  br i1 %87, label %89, label %88, !prof !3

88:                                               ; preds = %85
  tail call void @llvm.trap() #7
  unreachable

89:                                               ; preds = %64, %85
  %90 = phi i64 [ %86, %85 ], [ 0, %64 ]
  %91 = lshr i64 %1, 8
  %92 = trunc i64 %91 to i8
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %124

94:                                               ; preds = %89
  %95 = icmp eq i64 %90, 0
  br i1 %95, label %131, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, %90
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %101 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = ptrtoint i8* %100 to i64
  %105 = sub i64 %104, %103
  %106 = icmp ugt i64 %105, %90
  br i1 %106, label %120, label %107

107:                                              ; preds = %96
  %108 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %109 = ptrtoint i8* %108 to i64
  %110 = sub i64 %103, %109
  %111 = icmp sgt i64 %110, -1
  br i1 %111, label %113, label %112, !prof !3

112:                                              ; preds = %107
  tail call void @llvm.trap() #7
  unreachable

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %115 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %114, align 8
  %116 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  tail call void %115(i8* %117, i8* %108, i64 %110) #7
  store i8* %108, i8** %101, align 8
  %118 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %114, align 8
  %119 = load i8*, i8** %116, align 8
  tail call void %118(i8* %119, i8* %0, i64 %90) #7
  br label %131

120:                                              ; preds = %96
  %121 = inttoptr i64 %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %0, i64 %90, i1 false) #7
  %122 = load i8*, i8** %101, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 %90
  store i8* %123, i8** %101, align 8
  br label %131

124:                                              ; preds = %89
  %125 = lshr i64 %1, 32
  %126 = trunc i64 %125 to i32
  %127 = and i8 %92, 1
  %128 = icmp ne i8 %127, 0
  %129 = tail call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %3, i8* %0, i64 %90, i32 %126, i32 %2, i1 zeroext %128) #7
  %130 = zext i1 %129 to i8
  br label %131

131:                                              ; preds = %124, %120, %113, %94, %54, %34, %27
  %132 = phi i8 [ 1, %27 ], [ 1, %34 ], [ 1, %54 ], [ %130, %124 ], [ 1, %94 ], [ 1, %113 ], [ 1, %120 ]
  ret i8 %132
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %18, label %7, !prof !2

7:                                                ; preds = %4
  %8 = and i64 %1, 255
  %9 = shl i64 2, %8
  %10 = and i64 %9, 4
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %18, label %12, !prof !2

12:                                               ; preds = %7
  %13 = bitcast i8* %0 to %"class.std::__1::basic_string"*
  %14 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %15 = tail call i8 @_ZN4absl19str_format_internal17FormatConvertImplERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.std::__1::basic_string"* dereferenceable(24) %13, i64 %1, i32 %2, %"class.absl::str_format_internal::FormatSinkImpl"* %14)
  %16 = and i8 %15, 1
  %17 = icmp ne i8 %16, 0
  br label %18

18:                                               ; preds = %7, %4, %12
  %19 = phi i1 [ %17, %12 ], [ false, %7 ], [ false, %4 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.std::__1::basic_string"* dereferenceable(24), i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = zext i8 %7 to i64
  %11 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  br label %19

12:                                               ; preds = %4
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp sgt i64 %16, -1
  br i1 %17, label %19, label %18, !prof !3

18:                                               ; preds = %12
  tail call void @llvm.trap() #7
  unreachable

19:                                               ; preds = %9, %12
  %20 = phi i64 [ %14, %12 ], [ %11, %9 ]
  %21 = phi i64 [ %16, %12 ], [ %10, %9 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = lshr i64 %1, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %56

26:                                               ; preds = %19
  %27 = icmp eq i64 %21, 0
  br i1 %27, label %63, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %21
  store i64 %31, i64* %29, align 8
  %32 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %33 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %34 = bitcast i8** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = ptrtoint i8* %32 to i64
  %37 = sub i64 %36, %35
  %38 = icmp ugt i64 %37, %21
  br i1 %38, label %52, label %39

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %41 = ptrtoint i8* %40 to i64
  %42 = sub i64 %35, %41
  %43 = icmp sgt i64 %42, -1
  br i1 %43, label %45, label %44, !prof !3

44:                                               ; preds = %39
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %47 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %46, align 8
  %48 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  tail call void %47(i8* %49, i8* %40, i64 %42) #7
  store i8* %40, i8** %33, align 8
  %50 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %46, align 8
  %51 = load i8*, i8** %48, align 8
  tail call void %50(i8* %51, i8* %22, i64 %21) #7
  br label %63

52:                                               ; preds = %28
  %53 = inttoptr i64 %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %22, i64 %21, i1 false) #7
  %54 = load i8*, i8** %33, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 %21
  store i8* %55, i8** %33, align 8
  br label %63

56:                                               ; preds = %19
  %57 = lshr i64 %1, 32
  %58 = trunc i64 %57 to i32
  %59 = and i8 %24, 1
  %60 = icmp ne i8 %59, 0
  %61 = tail call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %3, i8* %22, i64 %21, i32 %58, i32 %2, i1 zeroext %60) #7
  %62 = zext i1 %61 to i8
  br label %63

63:                                               ; preds = %26, %45, %52, %56
  %64 = phi i8 [ %62, %56 ], [ 1, %26 ], [ 1, %45 ], [ 1, %52 ]
  ret i8 %64
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZN4absl19str_format_internal13FormatArgImpl8DispatchINS_11string_viewEEEbNS1_4DataENS0_24FormatConversionSpecImplEPv(i8*, i64, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %1 to i8
  %6 = icmp eq i8 %5, 18
  br i1 %6, label %61, label %7, !prof !2

7:                                                ; preds = %4
  %8 = and i64 %1, 255
  %9 = shl i64 2, %8
  %10 = and i64 %9, 4
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %61, label %12, !prof !2

12:                                               ; preds = %7
  %13 = bitcast i8* %0 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %1, 8
  %19 = trunc i64 %18 to i8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %54

21:                                               ; preds = %12
  %22 = icmp eq i64 %17, 0
  br i1 %22, label %61, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds i8, i8* %3, i64 16
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %17
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds i8, i8* %3, i64 1056
  %29 = getelementptr inbounds i8, i8* %3, i64 24
  %30 = bitcast i8* %29 to i8**
  %31 = bitcast i8* %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = ptrtoint i8* %28 to i64
  %34 = sub i64 %33, %32
  %35 = icmp ugt i64 %34, %17
  br i1 %35, label %50, label %36

36:                                               ; preds = %23
  %37 = getelementptr inbounds i8, i8* %3, i64 32
  %38 = ptrtoint i8* %37 to i64
  %39 = sub i64 %32, %38
  %40 = icmp sgt i64 %39, -1
  br i1 %40, label %42, label %41, !prof !3

41:                                               ; preds = %36
  tail call void @llvm.trap() #7
  unreachable

42:                                               ; preds = %36
  %43 = getelementptr inbounds i8, i8* %3, i64 8
  %44 = bitcast i8* %43 to void (i8*, i8*, i64)**
  %45 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %44, align 8
  %46 = bitcast i8* %3 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void %45(i8* %47, i8* %37, i64 %39) #7
  store i8* %37, i8** %30, align 8
  %48 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %44, align 8
  %49 = load i8*, i8** %46, align 8
  tail call void %48(i8* %49, i8* %14, i64 %17) #7
  br label %61

50:                                               ; preds = %23
  %51 = inttoptr i64 %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %14, i64 %17, i1 false) #7
  %52 = load i8*, i8** %30, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %17
  store i8* %53, i8** %30, align 8
  br label %61

54:                                               ; preds = %12
  %55 = bitcast i8* %3 to %"class.absl::str_format_internal::FormatSinkImpl"*
  %56 = lshr i64 %1, 32
  %57 = trunc i64 %56 to i32
  %58 = and i8 %19, 1
  %59 = icmp ne i8 %58, 0
  %60 = tail call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %55, i8* %14, i64 %17, i32 %57, i32 %2, i1 zeroext %59) #7
  br label %61

61:                                               ; preds = %54, %50, %42, %21, %7, %4
  %62 = phi i1 [ false, %7 ], [ false, %4 ], [ %60, %54 ], [ true, %21 ], [ true, %42 ], [ true, %50 ]
  ret i1 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden i8 @_ZN4absl19str_format_internal17FormatConvertImplENS_11string_viewENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8*, i64, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #0 {
  %6 = lshr i64 %2, 8
  %7 = trunc i64 %6 to i8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %39

9:                                                ; preds = %5
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %1
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 1024
  %16 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 2
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint i8* %15 to i64
  %20 = sub i64 %19, %18
  %21 = icmp ugt i64 %20, %1
  br i1 %21, label %35, label %22

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 3, i64 0
  %24 = ptrtoint i8* %23 to i64
  %25 = sub i64 %18, %24
  %26 = icmp sgt i64 %25, -1
  br i1 %26, label %28, label %27, !prof !3

27:                                               ; preds = %22
  tail call void @llvm.trap() #7
  unreachable

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 1
  %30 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %29, align 8
  %31 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %4, i64 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  tail call void %30(i8* %32, i8* %23, i64 %25) #7
  store i8* %23, i8** %16, align 8
  %33 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %29, align 8
  %34 = load i8*, i8** %31, align 8
  tail call void %33(i8* %34, i8* %0, i64 %1) #7
  br label %46

35:                                               ; preds = %11
  %36 = inttoptr i64 %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %0, i64 %1, i1 false) #7
  %37 = load i8*, i8** %16, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  store i8* %38, i8** %16, align 8
  br label %46

39:                                               ; preds = %5
  %40 = lshr i64 %2, 32
  %41 = trunc i64 %40 to i32
  %42 = and i8 %7, 1
  %43 = icmp ne i8 %42, 0
  %44 = tail call zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"* %4, i8* %0, i64 %1, i32 %41, i32 %3, i1 zeroext %43) #7
  %45 = zext i1 %44 to i8
  br label %46

46:                                               ; preds = %9, %28, %35, %39
  %47 = phi i8 [ %45, %39 ], [ 1, %9 ], [ 1, %28 ], [ 1, %35 ]
  ret i8 %47
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_123ConvertIntImplInnerSlowERKNS1_9IntDigitsENS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(%"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* nocapture readonly dereferenceable(64), i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %5 = trunc i64 %1 to i8
  %6 = lshr i64 %1, 8
  %7 = trunc i64 %6 to i8
  %8 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 49
  %12 = zext i1 %11 to i64
  %13 = getelementptr inbounds %"class.absl::str_format_internal::(anonymous namespace)::IntDigits", %"class.absl::str_format_internal::(anonymous namespace)::IntDigits"* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = icmp sgt i64 %15, -1
  br i1 %16, label %18, label %17, !prof !3

17:                                               ; preds = %4
  tail call void @llvm.trap() #7
  unreachable

18:                                               ; preds = %4
  %19 = lshr i64 %1, 32
  %20 = trunc i64 %19 to i32
  %21 = icmp sgt i32 %20, -1
  %22 = ashr i64 %1, 32
  %23 = select i1 %21, i64 %22, i64 0
  %24 = getelementptr inbounds i8, i8* %9, i64 %12
  %25 = tail call i64 @llvm.usub.sat.i64(i64 %23, i64 %15) #7
  %26 = icmp eq i8 %10, 45
  %27 = and i64 %1, 254
  %28 = icmp ne i64 %27, 2
  %29 = or i1 %28, %26
  %30 = xor i1 %28, true
  %31 = select i1 %28, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)
  br i1 %29, label %40, label %32

32:                                               ; preds = %18
  %33 = and i8 %7, 2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = and i8 %7, 4
  %37 = icmp eq i8 %36, 0
  %38 = xor i1 %37, true
  %39 = select i1 %37, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)
  br label %40

40:                                               ; preds = %18, %32, %35
  %41 = phi i1 [ %30, %18 ], [ true, %32 ], [ %38, %35 ]
  %42 = phi i8* [ %31, %18 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %32 ], [ %39, %35 ]
  %43 = zext i1 %41 to i64
  %44 = tail call i64 @llvm.usub.sat.i64(i64 %25, i64 %43) #7
  switch i8 %5, label %56 [
    i8 6, label %45
    i8 7, label %45
    i8 17, label %45
  ]

45:                                               ; preds = %40, %40, %40
  %46 = icmp ne i8 %5, 17
  %47 = and i64 %1, 2048
  %48 = icmp eq i64 %47, 0
  %49 = and i1 %48, %46
  %50 = icmp eq i64 %15, 0
  %51 = or i1 %49, %50
  br i1 %51, label %56, label %52

52:                                               ; preds = %45
  %53 = icmp eq i8 %5, 7
  %54 = select i1 %53, [3 x i8]* @.str.4, [3 x i8]* @.str.5
  %55 = getelementptr inbounds [3 x i8], [3 x i8]* %54, i64 0, i64 0
  br label %56

56:                                               ; preds = %40, %45, %52
  %57 = phi i64 [ 2, %52 ], [ 0, %45 ], [ 0, %40 ]
  %58 = phi i8* [ %55, %52 ], [ null, %45 ], [ null, %40 ]
  %59 = tail call i64 @llvm.usub.sat.i64(i64 %44, i64 %57) #7
  %60 = icmp sgt i32 %2, -1
  %61 = select i1 %60, i32 %2, i32 1
  %62 = and i8 %7, 8
  %63 = icmp ne i8 %62, 0
  %64 = icmp eq i8 %5, 4
  %65 = and i1 %64, %63
  br i1 %65, label %66, label %76

66:                                               ; preds = %56
  %67 = icmp eq i64 %15, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %66
  %69 = load i8, i8* %24, align 1
  %70 = icmp eq i8 %69, 48
  br i1 %70, label %76, label %71

71:                                               ; preds = %68, %66
  %72 = trunc i64 %15 to i32
  %73 = add nsw i32 %72, 1
  %74 = icmp slt i32 %61, %73
  %75 = select i1 %74, i32 %73, i32 %61
  br label %76

76:                                               ; preds = %68, %71, %56
  %77 = phi i32 [ %75, %71 ], [ %61, %68 ], [ %61, %56 ]
  %78 = sext i32 %77 to i64
  %79 = tail call i64 @llvm.usub.sat.i64(i64 %78, i64 %15) #7
  %80 = tail call i64 @llvm.usub.sat.i64(i64 %59, i64 %79) #7
  %81 = and i8 %7, 1
  %82 = icmp ne i8 %81, 0
  %83 = select i1 %82, i64 0, i64 %80
  %84 = select i1 %82, i64 %80, i64 0
  br i1 %60, label %89, label %85

85:                                               ; preds = %76
  %86 = and i8 %7, 16
  %87 = icmp eq i8 %86, 0
  %88 = add i64 %83, %79
  br i1 %87, label %89, label %133

89:                                               ; preds = %85, %76
  %90 = icmp eq i64 %83, 0
  br i1 %90, label %133, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %83
  store i64 %94, i64* %92, align 8
  %95 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %96 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %97 = bitcast i8** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = ptrtoint i8* %95 to i64
  %100 = sub i64 %99, %98
  %101 = icmp ult i64 %100, %83
  %102 = inttoptr i64 %98 to i8*
  br i1 %101, label %103, label %128

103:                                              ; preds = %91
  %104 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %105 = ptrtoint i8* %104 to i64
  %106 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %107 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  br label %108

108:                                              ; preds = %124, %103
  %109 = phi i64 [ %98, %103 ], [ %105, %124 ]
  %110 = phi i8* [ %102, %103 ], [ %104, %124 ]
  %111 = phi i64 [ %100, %103 ], [ 1024, %124 ]
  %112 = phi i64 [ %83, %103 ], [ %113, %124 ]
  %113 = sub i64 %112, %111
  %114 = icmp eq i64 %111, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %108
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 32, i64 %111, i1 false) #7
  %116 = load i8*, i8** %96, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %111
  store i8* %117, i8** %96, align 8
  %118 = ptrtoint i8* %117 to i64
  br label %119

119:                                              ; preds = %115, %108
  %120 = phi i64 [ %109, %108 ], [ %118, %115 ]
  %121 = sub i64 %120, %105
  %122 = icmp sgt i64 %121, -1
  br i1 %122, label %124, label %123, !prof !3

123:                                              ; preds = %119
  tail call void @llvm.trap() #7
  unreachable

124:                                              ; preds = %119
  %125 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %106, align 8
  %126 = load i8*, i8** %107, align 8
  tail call void %125(i8* %126, i8* %104, i64 %121) #7
  store i8* %104, i8** %96, align 8
  %127 = icmp ugt i64 %113, 1024
  br i1 %127, label %108, label %128

128:                                              ; preds = %124, %91
  %129 = phi i8* [ %102, %91 ], [ %104, %124 ]
  %130 = phi i64 [ %83, %91 ], [ %113, %124 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 32, i64 %130, i1 false) #7
  %131 = load i8*, i8** %96, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 %130
  store i8* %132, i8** %96, align 8
  br label %133

133:                                              ; preds = %85, %89, %128
  %134 = phi i64 [ %79, %89 ], [ %79, %128 ], [ %88, %85 ]
  br i1 %41, label %135, label %163

135:                                              ; preds = %133
  %136 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, %43
  store i64 %138, i64* %136, align 8
  %139 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %140 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %141 = bitcast i8** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = ptrtoint i8* %139 to i64
  %144 = sub i64 %143, %142
  %145 = icmp ugt i64 %144, %43
  br i1 %145, label %159, label %146

146:                                              ; preds = %135
  %147 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %148 = ptrtoint i8* %147 to i64
  %149 = sub i64 %142, %148
  %150 = icmp sgt i64 %149, -1
  br i1 %150, label %152, label %151, !prof !3

151:                                              ; preds = %146
  tail call void @llvm.trap() #7
  unreachable

152:                                              ; preds = %146
  %153 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %154 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %153, align 8
  %155 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  tail call void %154(i8* %156, i8* %147, i64 %149) #7
  store i8* %147, i8** %140, align 8
  %157 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %153, align 8
  %158 = load i8*, i8** %155, align 8
  tail call void %157(i8* %158, i8* %42, i64 %43) #7
  br label %163

159:                                              ; preds = %135
  %160 = inttoptr i64 %142 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %42, i64 %43, i1 false) #7
  %161 = load i8*, i8** %140, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 %43
  store i8* %162, i8** %140, align 8
  br label %163

163:                                              ; preds = %133, %152, %159
  %164 = icmp eq i64 %57, 0
  br i1 %164, label %193, label %165

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = add i64 %167, %57
  store i64 %168, i64* %166, align 8
  %169 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %170 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %171 = bitcast i8** %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = ptrtoint i8* %169 to i64
  %174 = sub i64 %173, %172
  %175 = icmp ugt i64 %174, %57
  br i1 %175, label %189, label %176

176:                                              ; preds = %165
  %177 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %178 = ptrtoint i8* %177 to i64
  %179 = sub i64 %172, %178
  %180 = icmp sgt i64 %179, -1
  br i1 %180, label %182, label %181, !prof !3

181:                                              ; preds = %176
  tail call void @llvm.trap() #7
  unreachable

182:                                              ; preds = %176
  %183 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %184 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %183, align 8
  %185 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  tail call void %184(i8* %186, i8* %177, i64 %179) #7
  store i8* %177, i8** %170, align 8
  %187 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %183, align 8
  %188 = load i8*, i8** %185, align 8
  tail call void %187(i8* %188, i8* %58, i64 %57) #7
  br label %193

189:                                              ; preds = %165
  %190 = inttoptr i64 %172 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %58, i64 %57, i1 false) #7
  %191 = load i8*, i8** %170, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 %57
  store i8* %192, i8** %170, align 8
  br label %193

193:                                              ; preds = %163, %182, %189
  %194 = icmp eq i64 %134, 0
  br i1 %194, label %237, label %195

195:                                              ; preds = %193
  %196 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = add i64 %197, %134
  store i64 %198, i64* %196, align 8
  %199 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %200 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %201 = bitcast i8** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = ptrtoint i8* %199 to i64
  %204 = sub i64 %203, %202
  %205 = icmp ult i64 %204, %134
  %206 = inttoptr i64 %202 to i8*
  br i1 %205, label %207, label %232

207:                                              ; preds = %195
  %208 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %209 = ptrtoint i8* %208 to i64
  %210 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %211 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  br label %212

212:                                              ; preds = %228, %207
  %213 = phi i64 [ %202, %207 ], [ %209, %228 ]
  %214 = phi i8* [ %206, %207 ], [ %208, %228 ]
  %215 = phi i64 [ %204, %207 ], [ 1024, %228 ]
  %216 = phi i64 [ %134, %207 ], [ %217, %228 ]
  %217 = sub i64 %216, %215
  %218 = icmp eq i64 %215, 0
  br i1 %218, label %223, label %219

219:                                              ; preds = %212
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 48, i64 %215, i1 false) #7
  %220 = load i8*, i8** %200, align 8
  %221 = getelementptr inbounds i8, i8* %220, i64 %215
  store i8* %221, i8** %200, align 8
  %222 = ptrtoint i8* %221 to i64
  br label %223

223:                                              ; preds = %219, %212
  %224 = phi i64 [ %213, %212 ], [ %222, %219 ]
  %225 = sub i64 %224, %209
  %226 = icmp sgt i64 %225, -1
  br i1 %226, label %228, label %227, !prof !3

227:                                              ; preds = %223
  tail call void @llvm.trap() #7
  unreachable

228:                                              ; preds = %223
  %229 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %210, align 8
  %230 = load i8*, i8** %211, align 8
  tail call void %229(i8* %230, i8* %208, i64 %225) #7
  store i8* %208, i8** %200, align 8
  %231 = icmp ugt i64 %217, 1024
  br i1 %231, label %212, label %232

232:                                              ; preds = %228, %195
  %233 = phi i8* [ %206, %195 ], [ %208, %228 ]
  %234 = phi i64 [ %134, %195 ], [ %217, %228 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %233, i8 48, i64 %234, i1 false) #7
  %235 = load i8*, i8** %200, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 %234
  store i8* %236, i8** %200, align 8
  br label %237

237:                                              ; preds = %193, %232
  %238 = icmp eq i64 %15, 0
  br i1 %238, label %267, label %239

239:                                              ; preds = %237
  %240 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %241, %15
  store i64 %242, i64* %240, align 8
  %243 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %244 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %245 = bitcast i8** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = ptrtoint i8* %243 to i64
  %248 = sub i64 %247, %246
  %249 = icmp ugt i64 %248, %15
  br i1 %249, label %263, label %250

250:                                              ; preds = %239
  %251 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %252 = ptrtoint i8* %251 to i64
  %253 = sub i64 %246, %252
  %254 = icmp sgt i64 %253, -1
  br i1 %254, label %256, label %255, !prof !3

255:                                              ; preds = %250
  tail call void @llvm.trap() #7
  unreachable

256:                                              ; preds = %250
  %257 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %258 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %257, align 8
  %259 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %260 = load i8*, i8** %259, align 8
  tail call void %258(i8* %260, i8* %251, i64 %253) #7
  store i8* %251, i8** %244, align 8
  %261 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %257, align 8
  %262 = load i8*, i8** %259, align 8
  tail call void %261(i8* %262, i8* %24, i64 %15) #7
  br label %267

263:                                              ; preds = %239
  %264 = inttoptr i64 %246 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %264, i8* align 1 %24, i64 %15, i1 false) #7
  %265 = load i8*, i8** %244, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 %15
  store i8* %266, i8** %244, align 8
  br label %267

267:                                              ; preds = %237, %256, %263
  %268 = icmp eq i64 %84, 0
  br i1 %268, label %311, label %269

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %271 = load i64, i64* %270, align 8
  %272 = add i64 %271, %84
  store i64 %272, i64* %270, align 8
  %273 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %274 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %275 = bitcast i8** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = ptrtoint i8* %273 to i64
  %278 = sub i64 %277, %276
  %279 = icmp ult i64 %278, %84
  %280 = inttoptr i64 %276 to i8*
  br i1 %279, label %281, label %306

281:                                              ; preds = %269
  %282 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %283 = ptrtoint i8* %282 to i64
  %284 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %285 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  br label %286

286:                                              ; preds = %302, %281
  %287 = phi i64 [ %276, %281 ], [ %283, %302 ]
  %288 = phi i8* [ %280, %281 ], [ %282, %302 ]
  %289 = phi i64 [ %278, %281 ], [ 1024, %302 ]
  %290 = phi i64 [ %80, %281 ], [ %291, %302 ]
  %291 = sub i64 %290, %289
  %292 = icmp eq i64 %289, 0
  br i1 %292, label %297, label %293

293:                                              ; preds = %286
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %288, i8 32, i64 %289, i1 false) #7
  %294 = load i8*, i8** %274, align 8
  %295 = getelementptr inbounds i8, i8* %294, i64 %289
  store i8* %295, i8** %274, align 8
  %296 = ptrtoint i8* %295 to i64
  br label %297

297:                                              ; preds = %293, %286
  %298 = phi i64 [ %287, %286 ], [ %296, %293 ]
  %299 = sub i64 %298, %283
  %300 = icmp sgt i64 %299, -1
  br i1 %300, label %302, label %301, !prof !3

301:                                              ; preds = %297
  tail call void @llvm.trap() #7
  unreachable

302:                                              ; preds = %297
  %303 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %284, align 8
  %304 = load i8*, i8** %285, align 8
  tail call void %303(i8* %304, i8* %282, i64 %299) #7
  store i8* %282, i8** %274, align 8
  %305 = icmp ugt i64 %291, 1024
  br i1 %305, label %286, label %306

306:                                              ; preds = %302, %269
  %307 = phi i8* [ %280, %269 ], [ %282, %302 ]
  %308 = phi i64 [ %80, %269 ], [ %291, %302 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %307, i8 32, i64 %308, i1 false) #7
  %309 = load i8*, i8** %274, align 8
  %310 = getelementptr inbounds i8, i8* %309, i64 %308
  store i8* %310, i8** %274, align 8
  br label %311

311:                                              ; preds = %267, %306
  ret void
}

declare zeroext i1 @_ZN4absl19str_format_internal14FormatSinkImpl15PutPaddedStringENS_11string_viewEiib(%"class.absl::str_format_internal::FormatSinkImpl"*, i8*, i64, i32, i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEfRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(float, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #3

declare zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEdRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(double, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #3

declare zeroext i1 @_ZN4absl19str_format_internal16ConvertFloatImplEeRKNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(x86_fp80, %"class.absl::str_format_internal::FormatConversionSpecImpl"* dereferenceable(12), %"class.absl::str_format_internal::FormatSinkImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl19str_format_internal12_GLOBAL__N_115ConvertCharImplEhNS0_24FormatConversionSpecImplEPNS0_14FormatSinkImplE(i8 zeroext, i64, i32, %"class.absl::str_format_internal::FormatSinkImpl"*) unnamed_addr #0 {
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  %7 = icmp sgt i32 %6, -1
  %8 = ashr i64 %1, 32
  %9 = select i1 %7, i64 %8, i64 0
  %10 = tail call i64 @llvm.usub.sat.i64(i64 %9, i64 1) #7
  %11 = and i64 %1, 256
  %12 = icmp ne i64 %11, 0
  %13 = icmp eq i64 %10, 0
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  br label %62

19:                                               ; preds = %4
  %20 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %10
  store i64 %22, i64* %20, align 8
  %23 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %24 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = ptrtoint i8* %23 to i64
  %28 = sub i64 %27, %26
  %29 = icmp ult i64 %28, %10
  %30 = inttoptr i64 %26 to i8*
  br i1 %29, label %31, label %56

31:                                               ; preds = %19
  %32 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %33 = ptrtoint i8* %32 to i64
  %34 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  br label %36

36:                                               ; preds = %52, %31
  %37 = phi i64 [ %26, %31 ], [ %33, %52 ]
  %38 = phi i8* [ %30, %31 ], [ %32, %52 ]
  %39 = phi i64 [ %28, %31 ], [ 1024, %52 ]
  %40 = phi i64 [ %10, %31 ], [ %41, %52 ]
  %41 = sub i64 %40, %39
  %42 = icmp eq i64 %39, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %36
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 32, i64 %39, i1 false) #7
  %44 = load i8*, i8** %24, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %39
  store i8* %45, i8** %24, align 8
  %46 = ptrtoint i8* %45 to i64
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i64 [ %37, %36 ], [ %46, %43 ]
  %49 = sub i64 %48, %33
  %50 = icmp sgt i64 %49, -1
  br i1 %50, label %52, label %51, !prof !3

51:                                               ; preds = %47
  tail call void @llvm.trap() #7
  unreachable

52:                                               ; preds = %47
  %53 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %34, align 8
  %54 = load i8*, i8** %35, align 8
  tail call void %53(i8* %54, i8* %32, i64 %49) #7
  store i8* %32, i8** %24, align 8
  %55 = icmp ugt i64 %41, 1024
  br i1 %55, label %36, label %56

56:                                               ; preds = %52, %19
  %57 = phi i8* [ %30, %19 ], [ %32, %52 ]
  %58 = phi i64 [ %10, %19 ], [ %41, %52 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 32, i64 %58, i1 false) #7
  %59 = load i8*, i8** %24, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 %58
  store i8* %60, i8** %24, align 8
  %61 = ptrtoint i8* %60 to i64
  br label %62

62:                                               ; preds = %15, %56
  %63 = phi i64 [ %18, %15 ], [ %61, %56 ]
  %64 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  %67 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 1024
  %68 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 2
  %69 = ptrtoint i8* %67 to i64
  %70 = icmp eq i64 %63, %69
  %71 = inttoptr i64 %63 to i8*
  br i1 %70, label %72, label %78

72:                                               ; preds = %62
  %73 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %74 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %76 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %75, align 8
  %77 = load i8*, i8** %74, align 8
  tail call void %76(i8* %77, i8* %73, i64 1024) #7
  store i8* %73, i8** %68, align 8
  br label %78

78:                                               ; preds = %72, %62
  %79 = phi i8* [ %71, %62 ], [ %73, %72 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %0, i64 1, i1 false) #7
  %80 = load i8*, i8** %68, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %81, i8** %68, align 8
  %82 = xor i1 %12, true
  %83 = or i1 %13, %82
  %84 = ptrtoint i8* %81 to i64
  br i1 %83, label %120, label %85

85:                                               ; preds = %78
  %86 = load i64, i64* %64, align 8
  %87 = add i64 %86, %10
  store i64 %87, i64* %64, align 8
  %88 = sub i64 %69, %84
  %89 = icmp ult i64 %88, %10
  br i1 %89, label %90, label %115

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 3, i64 0
  %92 = ptrtoint i8* %91 to i64
  %93 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.absl::str_format_internal::FormatSinkImpl", %"class.absl::str_format_internal::FormatSinkImpl"* %3, i64 0, i32 0, i32 0
  br label %95

95:                                               ; preds = %111, %90
  %96 = phi i64 [ %84, %90 ], [ %92, %111 ]
  %97 = phi i8* [ %81, %90 ], [ %91, %111 ]
  %98 = phi i64 [ %88, %90 ], [ 1024, %111 ]
  %99 = phi i64 [ %10, %90 ], [ %100, %111 ]
  %100 = sub i64 %99, %98
  %101 = icmp eq i64 %98, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %95
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 32, i64 %98, i1 false) #7
  %103 = load i8*, i8** %68, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %98
  store i8* %104, i8** %68, align 8
  %105 = ptrtoint i8* %104 to i64
  br label %106

106:                                              ; preds = %102, %95
  %107 = phi i64 [ %96, %95 ], [ %105, %102 ]
  %108 = sub i64 %107, %92
  %109 = icmp sgt i64 %108, -1
  br i1 %109, label %111, label %110, !prof !3

110:                                              ; preds = %106
  tail call void @llvm.trap() #7
  unreachable

111:                                              ; preds = %106
  %112 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %93, align 8
  %113 = load i8*, i8** %94, align 8
  tail call void %112(i8* %113, i8* %91, i64 %108) #7
  store i8* %91, i8** %68, align 8
  %114 = icmp ugt i64 %100, 1024
  br i1 %114, label %95, label %115

115:                                              ; preds = %111, %85
  %116 = phi i8* [ %81, %85 ], [ %91, %111 ]
  %117 = phi i64 [ %10, %85 ], [ %100, %111 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 32, i64 %117, i1 false) #7
  %118 = load i8*, i8** %68, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %117
  store i8* %119, i8** %68, align 8
  br label %120

120:                                              ; preds = %78, %115
  ret void
}

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32, i8*) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64, i8*) local_unnamed_addr #3

declare { i64, i64 } @_ZN4abslrmENS_7uint128ES0_(i64, i64, i64, i64) local_unnamed_addr #3

declare { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64, i64, i64, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @ldexp(double, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
