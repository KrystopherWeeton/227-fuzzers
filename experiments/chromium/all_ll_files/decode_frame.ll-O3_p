; ModuleID = '../../third_party/opus/src/silk/decode_frame.c'
source_filename = "../../third_party/opus/src/silk/decode_frame.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_decoder_state = type { i32, [320 x i32], [16 x i32], [480 x i16], i32, i8, i32, i32, i32, i32, i32, i32, i32, [16 x i16], i32, i8*, i8*, i32, i32, i32, i16, [3 x i32], i32, [3 x i32], %struct._silk_resampler_state_struct, %struct.silk_NLSF_CB_struct*, %struct.SideInfoIndices, %struct.silk_CNG_struct, i32, i32, i32, %struct.silk_PLC_struct }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.silk_CNG_struct = type { [320 x i32], [16 x i16], [16 x i32], i32, i32, i32 }
%struct.silk_PLC_struct = type { i32, [5 x i16], [16 x i16], i32, i32, i16, i32, i32, i16, [2 x i32], i32, i32, i32 }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_decoder_control = type { [4 x i32], [4 x i32], [2 x [16 x i16]], [20 x i16], i32 }

@.str = private unnamed_addr constant [49 x i8] c"assertion failed: L > 0 && L <= MAX_FRAME_LENGTH\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/opus/src/silk/decode_frame.c\00", align 1
@.str.2 = private unnamed_addr constant [75 x i8] c"assertion failed: psDec->prevSignalType >= 0 && psDec->prevSignalType <= 2\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"assertion failed: psDec->ltp_mem_length >= psDec->frame_length\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_decode_frame(%struct.silk_decoder_state*, %struct.ec_ctx*, i16*, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 9
  %9 = load i32, i32* %8, align 8
  %10 = alloca %struct.silk_decoder_control, align 16
  %11 = bitcast %struct.silk_decoder_control* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 140, i1 false)
  %12 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %10, i64 0, i32 4
  store i32 0, i32* %12, align 8
  %13 = add i32 %9, -1
  %14 = icmp ult i32 %13, 320
  br i1 %14, label %16, label %15

15:                                               ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 58) #4
  unreachable

16:                                               ; preds = %7
  switch i32 %4, label %50 [
    i32 0, label %17
    i32 2, label %20
  ]

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 17
  %19 = load i32, i32* %18, align 8
  br label %27

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 17
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 23, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %50

27:                                               ; preds = %17, %20
  %28 = phi i32 [ %19, %17 ], [ %22, %20 ]
  %29 = add nuw nsw i32 %9, 15
  %30 = and i32 %29, -16
  %31 = sext i32 %30 to i64
  %32 = shl nsw i64 %31, 1
  %33 = alloca i16, i64 %31, align 16
  %34 = bitcast i16* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 %32, i1 false)
  tail call void @silk_decode_indices(%struct.silk_decoder_state* %0, %struct.ec_ctx* %1, i32 %28, i32 %4, i32 %5) #5
  %35 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 5
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 6
  %39 = load i8, i8* %38, align 2
  %40 = sext i8 %39 to i32
  %41 = load i32, i32* %8, align 8
  call void @silk_decode_pulses(%struct.ec_ctx* %1, i16* nonnull %33, i32 %37, i32 %40, i32 %41) #5
  call void @silk_decode_parameters(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* nonnull %10, i32 %5) #5
  call void @silk_decode_core(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* nonnull %10, i16* %2, i16* nonnull %33, i32 %6) #5
  call void @silk_PLC(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* nonnull %10, i16* %2, i32 0, i32 %6) #5
  %42 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  store i32 0, i32* %42, align 8
  %43 = load i8, i8* %35, align 1
  %44 = sext i8 %43 to i32
  %45 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 29
  store i32 %44, i32* %45, align 4
  %46 = icmp ult i8 %43, 3
  br i1 %46, label %48, label %47

47:                                               ; preds = %27
  call void @celt_fatal(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 94) #4
  unreachable

48:                                               ; preds = %27
  %49 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 14
  store i32 0, i32* %49, align 8
  br label %51

50:                                               ; preds = %16, %20
  call void @silk_PLC(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* nonnull %10, i16* %2, i32 1, i32 %6) #5
  br label %51

51:                                               ; preds = %50, %48
  %52 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 11
  %53 = load i32, i32* %52, align 8
  %54 = load i32, i32* %8, align 8
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %57

56:                                               ; preds = %51
  call void @celt_fatal(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 106) #4
  unreachable

57:                                               ; preds = %51
  %58 = sub nsw i32 %53, %54
  %59 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3
  %60 = bitcast [480 x i16]* %59 to i8*
  %61 = sext i32 %54 to i64
  %62 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3, i64 %61
  %63 = bitcast i16* %62 to i8*
  %64 = sext i32 %58 to i64
  %65 = shl nsw i64 %64, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %60, i8* align 2 %63, i64 %65, i1 false)
  %66 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3, i64 %64
  %67 = bitcast i16* %66 to i8*
  %68 = bitcast i16* %2 to i8*
  %69 = load i32, i32* %8, align 8
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %67, i8* align 2 %68, i64 %71, i1 false)
  call void @silk_CNG(%struct.silk_decoder_state* %0, %struct.silk_decoder_control* nonnull %10, i16* %2, i32 %9) #5
  call void @silk_PLC_glue_frames(%struct.silk_decoder_state* %0, i16* %2, i32 %9) #5
  %72 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, -1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %10, i64 0, i32 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 4
  store i32 %77, i32* %78, align 4
  store i32 %9, i32* %3, align 4
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_decode_indices(%struct.silk_decoder_state*, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_decode_pulses(%struct.ec_ctx*, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_decode_parameters(%struct.silk_decoder_state*, %struct.silk_decoder_control*, i32) local_unnamed_addr #3

declare void @silk_decode_core(%struct.silk_decoder_state*, %struct.silk_decoder_control*, i16*, i16*, i32) local_unnamed_addr #3

declare void @silk_PLC(%struct.silk_decoder_state*, %struct.silk_decoder_control*, i16*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_CNG(%struct.silk_decoder_state*, %struct.silk_decoder_control*, i16*, i32) local_unnamed_addr #3

declare void @silk_PLC_glue_frames(%struct.silk_decoder_state*, i16*, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
