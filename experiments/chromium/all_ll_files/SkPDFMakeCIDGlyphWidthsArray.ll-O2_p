; ModuleID = '../../third_party/skia/src/pdf/SkPDFMakeCIDGlyphWidthsArray.cpp'
source_filename = "../../third_party/skia/src/pdf/SkPDFMakeCIDGlyphWidthsArray.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkStrikeSpec = type <{ %class.SkAutoDescriptor, %class.sk_sp, %class.sk_sp.14, %class.sk_sp.15, float, [4 x i8] }>
%class.SkAutoDescriptor = type { %class.SkDescriptor*, [120 x i8] }
%class.SkDescriptor = type { i32, i32, i32 }
%class.sk_sp = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.14 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.15 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%class.SkPDFArray = type { %class.SkPDFObject, %"class.std::__1::vector" }
%class.SkPDFObject = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.SkPDFUnion*, %class.SkPDFUnion*, %"class.std::__1::__compressed_pair.0" }
%class.SkPDFUnion = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %class.SkPDFUnion* }
%class.SkPDFGlyphUse = type <{ %class.SkBitSet, i16, i16, [4 x i8] }>
%class.SkBitSet = type { i64, %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%class.SkBulkGlyphMetricsAndPaths = type { %class.SkAutoSTArray, %class.sk_sp.24 }
%class.SkAutoSTArray = type { i32, %class.SkGlyph**, [160 x i8] }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.16, i32, %"struct.std::__1::atomic.5", %"struct.std::__1::atomic.5", i8, i8 }>
%class.sk_sp.16 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.17, %class.SkTDArray.18, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.17 = type { i8*, i32, i32 }
%class.SkTDArray.18 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.19 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.19 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.20", [3 x i8] }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.sk_sp.24 = type { %"class.SkStrikeCache::Strike"* }
%"class.SkStrikeCache::Strike" = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkStrikeForGPU, %class.SkStrikeCache*, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkScalerCache, %"class.std::__1::unique_ptr.53", i64, i8, [7 x i8] }>
%class.SkStrikeForGPU = type { i32 (...)** }
%class.SkStrikeCache = type { %class.SkStrikeForGPUCacheInterface, %class.SkMutex, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkTHashTable, i64, i64, i32, i32 }
%class.SkStrikeForGPUCacheInterface = type { i32 (...)** }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.25" }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot"* }
%"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot" = type opaque
%class.SkScalerCache = type { %class.SkAutoDescriptor, %"class.std::__1::unique_ptr.31", %struct.SkFontMetrics, %struct.SkGlyphPositionRoundingSpec, %class.SkMutex, %class.SkTHashMap, %"class.std::__1::vector.46", %class.SkArenaAlloc }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.SkScalerContext* }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp.15, %class.sk_sp.14, %class.sk_sp, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.SkTMaskPreBlend = type { %class.sk_sp.34, i8*, i8*, i8* }
%class.sk_sp.34 = type { %class.SkTMaskGamma* }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%struct.SkFontMetrics = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }
%struct.SkGlyphPositionRoundingSpec = type { %struct.SkPoint, %struct.SkIPoint, %struct.SkIPoint }
%struct.SkIPoint = type { i32, i32 }
%class.SkTHashMap = type { %class.SkTHashTable.38 }
%class.SkTHashTable.38 = type { i32, i32, %class.SkAutoTArray.39 }
%class.SkAutoTArray.39 = type { %"class.std::__1::unique_ptr.40" }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %struct.SkPackedGlyphID, %class.SkGlyphDigest }
%class.SkGlyphDigest = type { [3 x i8], i8 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %class.SkGlyph**, %class.SkGlyph**, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.SkGlyph** }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %class.SkStrikePinner* }
%class.SkStrikePinner = type { i32 (...)** }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i16*, i16*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i16* }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %class.SkPDFObject* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

@__const._Z28SkPDFMakeCIDGlyphWidthsArrayRK10SkTypefaceRK13SkPDFGlyphUsePf.strikeSpec = private unnamed_addr constant %class.SkStrikeSpec <{ %class.SkAutoDescriptor { %class.SkDescriptor* inttoptr (i64 -6148914691236517206 to %class.SkDescriptor*), [120 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, %class.sk_sp { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.14 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.15 { %class.SkTypeface* inttoptr (i64 -6148914691236517206 to %class.SkTypeface*) }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkPDFArray* @_Z28SkPDFMakeCIDGlyphWidthsArrayRK10SkTypefaceRK13SkPDFGlyphUsePf(%class.SkTypeface* dereferenceable(48), %class.SkPDFGlyphUse* nocapture readonly dereferenceable(24), float* nocapture) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %class.SkStrikeSpec, align 8
  %6 = alloca %class.SkBulkGlyphMetricsAndPaths, align 8
  %7 = alloca %"class.std::__1::vector.59", align 8
  %8 = alloca %"class.std::__1::unique_ptr.68", align 8
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #8
  store i32 -1431655766, i32* %4, align 4
  %10 = bitcast %class.SkStrikeSpec* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %10) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._Z28SkPDFMakeCIDGlyphWidthsArrayRK10SkTypefaceRK13SkPDFGlyphUsePf.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec13MakePDFVectorERK10SkTypefacePi(%class.SkStrikeSpec* nonnull sret %5, %class.SkTypeface* dereferenceable(48) %0, i32* nonnull %4) #8
  %11 = bitcast %class.SkBulkGlyphMetricsAndPaths* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %11) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 184, i1 false)
  call void @_ZN26SkBulkGlyphMetricsAndPathsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetricsAndPaths* nonnull %6, %class.SkStrikeSpec* nonnull dereferenceable(160) %5) #8
  %12 = call i8* @_Znwm(i64 32) #9
  %13 = bitcast i8* %12 to %class.SkPDFArray*
  call void @_ZN10SkPDFArrayC1Ev(%class.SkPDFArray* nonnull %13) #8
  call void @_ZN10SkPDFArray7reserveEi(%class.SkPDFArray* nonnull %13, i32 0) #8
  %14 = bitcast %"class.std::__1::vector.59"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %7, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %7, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #8
  %18 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = icmp eq i16 %19, 1
  br i1 %20, label %21, label %102

21:                                               ; preds = %3
  %22 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, 31
  %27 = lshr i64 %26, 5
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %188, label %29

29:                                               ; preds = %21
  %30 = bitcast i16** %16 to i64*
  %31 = bitcast %"class.std::__1::vector.59"* %7 to i64*
  %32 = bitcast i16** %17 to i64*
  br label %33

33:                                               ; preds = %99, %29
  %34 = phi i64 [ 0, %29 ], [ %100, %99 ]
  %35 = getelementptr inbounds i32, i32* %23, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %99, label %38

38:                                               ; preds = %33
  %39 = shl i64 %34, 5
  br label %40

40:                                               ; preds = %96, %38
  %41 = phi i64 [ 0, %38 ], [ %97, %96 ]
  %42 = trunc i64 %41 to i32
  %43 = shl i32 1, %42
  %44 = and i32 %43, %36
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %96, label %46

46:                                               ; preds = %40
  %47 = add nuw nsw i64 %41, %39
  %48 = trunc i64 %47 to i16
  %49 = load i16*, i16** %16, align 8
  %50 = load i16*, i16** %17, align 8
  %51 = icmp ult i16* %49, %50
  %52 = ptrtoint i16* %50 to i64
  br i1 %51, label %53, label %56

53:                                               ; preds = %46
  store i16 %48, i16* %49, align 2
  %54 = getelementptr inbounds i16, i16* %49, i64 1
  %55 = ptrtoint i16* %54 to i64
  store i64 %55, i64* %30, align 8
  br label %96

56:                                               ; preds = %46
  %57 = ptrtoint i16* %49 to i64
  %58 = load i64, i64* %31, align 8
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 1
  %61 = add nsw i64 %60, 1
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %56
  %64 = bitcast %"class.std::__1::vector.59"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %64) #10
  unreachable

65:                                               ; preds = %56
  %66 = sub i64 %52, %58
  %67 = ashr exact i64 %66, 1
  %68 = icmp ult i64 %67, 4611686018427387903
  %69 = icmp ult i64 %66, %61
  %70 = select i1 %69, i64 %61, i64 %66
  %71 = select i1 %68, i64 %70, i64 9223372036854775807
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %65
  %74 = icmp slt i64 %71, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %73
  call void @abort() #10
  unreachable

76:                                               ; preds = %73
  %77 = shl i64 %71, 1
  %78 = call i8* @_Znwm(i64 %77) #9
  %79 = bitcast i8* %78 to i16*
  br label %80

80:                                               ; preds = %76, %65
  %81 = phi i8* [ %78, %76 ], [ null, %65 ]
  %82 = phi i16* [ %79, %76 ], [ null, %65 ]
  %83 = getelementptr inbounds i16, i16* %82, i64 %60
  %84 = getelementptr inbounds i16, i16* %82, i64 %71
  %85 = ptrtoint i16* %84 to i64
  store i16 %48, i16* %83, align 2
  %86 = getelementptr inbounds i16, i16* %83, i64 1
  %87 = ptrtoint i16* %86 to i64
  %88 = ptrtoint i16* %82 to i64
  %89 = icmp sgt i64 %59, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %80
  %91 = inttoptr i64 %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %81, i8* align 2 %91, i64 %59, i1 false) #8
  br label %92

92:                                               ; preds = %90, %80
  store i64 %88, i64* %31, align 8
  store i64 %87, i64* %30, align 8
  store i64 %85, i64* %32, align 8
  %93 = icmp eq i64 %58, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %92
  %95 = inttoptr i64 %58 to i8*
  call void @_ZdlPv(i8* %95) #9
  br label %96

96:                                               ; preds = %94, %92, %53, %40
  %97 = add nuw nsw i64 %41, 1
  %98 = icmp eq i64 %97, 32
  br i1 %98, label %99, label %40

99:                                               ; preds = %96, %33
  %100 = add nuw nsw i64 %34, 1
  %101 = icmp eq i64 %100, %27
  br i1 %101, label %188, label %33

102:                                              ; preds = %3
  %103 = add i16 %19, -1
  %104 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %105 = load i32*, i32** %104, align 8
  %106 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = add i64 %107, 31
  %109 = lshr i64 %108, 5
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %188, label %111

111:                                              ; preds = %102
  %112 = bitcast i16** %16 to i64*
  %113 = bitcast %"class.std::__1::vector.59"* %7 to i64*
  %114 = bitcast i16** %17 to i64*
  br label %115

115:                                              ; preds = %185, %111
  %116 = phi i64 [ %186, %185 ], [ 0, %111 ]
  %117 = getelementptr inbounds i32, i32* %105, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %185, label %120

120:                                              ; preds = %115
  %121 = shl i64 %116, 5
  br label %122

122:                                              ; preds = %182, %120
  %123 = phi i64 [ 0, %120 ], [ %183, %182 ]
  %124 = trunc i64 %123 to i32
  %125 = shl i32 1, %124
  %126 = and i32 %125, %118
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %182, label %128

128:                                              ; preds = %122
  %129 = add nuw nsw i64 %123, %121
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 0
  %132 = trunc i64 %129 to i16
  %133 = add i16 %103, %132
  %134 = select i1 %131, i16 0, i16 %133
  %135 = load i16*, i16** %16, align 8
  %136 = load i16*, i16** %17, align 8
  %137 = icmp ult i16* %135, %136
  %138 = ptrtoint i16* %136 to i64
  br i1 %137, label %139, label %142

139:                                              ; preds = %128
  store i16 %134, i16* %135, align 2
  %140 = getelementptr inbounds i16, i16* %135, i64 1
  %141 = ptrtoint i16* %140 to i64
  store i64 %141, i64* %112, align 8
  br label %182

142:                                              ; preds = %128
  %143 = ptrtoint i16* %135 to i64
  %144 = load i64, i64* %113, align 8
  %145 = sub i64 %143, %144
  %146 = ashr exact i64 %145, 1
  %147 = add nsw i64 %146, 1
  %148 = icmp slt i64 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %142
  %150 = bitcast %"class.std::__1::vector.59"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %150) #10
  unreachable

151:                                              ; preds = %142
  %152 = sub i64 %138, %144
  %153 = ashr exact i64 %152, 1
  %154 = icmp ult i64 %153, 4611686018427387903
  %155 = icmp ult i64 %152, %147
  %156 = select i1 %155, i64 %147, i64 %152
  %157 = select i1 %154, i64 %156, i64 9223372036854775807
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %151
  %160 = icmp slt i64 %157, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %159
  call void @abort() #10
  unreachable

162:                                              ; preds = %159
  %163 = shl i64 %157, 1
  %164 = call i8* @_Znwm(i64 %163) #9
  %165 = bitcast i8* %164 to i16*
  br label %166

166:                                              ; preds = %162, %151
  %167 = phi i8* [ %164, %162 ], [ null, %151 ]
  %168 = phi i16* [ %165, %162 ], [ null, %151 ]
  %169 = getelementptr inbounds i16, i16* %168, i64 %146
  %170 = getelementptr inbounds i16, i16* %168, i64 %157
  %171 = ptrtoint i16* %170 to i64
  store i16 %134, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %169, i64 1
  %173 = ptrtoint i16* %172 to i64
  %174 = ptrtoint i16* %168 to i64
  %175 = icmp sgt i64 %145, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %166
  %177 = inttoptr i64 %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %167, i8* align 2 %177, i64 %145, i1 false) #8
  br label %178

178:                                              ; preds = %176, %166
  store i64 %174, i64* %113, align 8
  store i64 %173, i64* %112, align 8
  store i64 %171, i64* %114, align 8
  %179 = icmp eq i64 %144, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %178
  %181 = inttoptr i64 %144 to i8*
  call void @_ZdlPv(i8* %181) #9
  br label %182

182:                                              ; preds = %180, %178, %139, %122
  %183 = add nuw nsw i64 %123, 1
  %184 = icmp eq i64 %183, 32
  br i1 %184, label %185, label %122

185:                                              ; preds = %182, %115
  %186 = add nuw nsw i64 %116, 1
  %187 = icmp eq i64 %186, %109
  br i1 %187, label %188, label %115

188:                                              ; preds = %185, %99, %21, %102
  %189 = load i16*, i16** %15, align 8
  %190 = bitcast i16** %16 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = ptrtoint i16* %189 to i64
  %193 = sub i64 %191, %192
  %194 = ashr exact i64 %193, 1
  %195 = call { %class.SkGlyph**, i64 } @_ZN26SkBulkGlyphMetricsAndPaths6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetricsAndPaths* nonnull %6, i16* %189, i64 %194) #8
  %196 = extractvalue { %class.SkGlyph**, i64 } %195, 0
  %197 = extractvalue { %class.SkGlyph**, i64 } %195, 1
  store float 0.000000e+00, float* %2, align 4
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %203, label %199

199:                                              ; preds = %188
  %200 = bitcast %"class.std::__1::unique_ptr.68"* %8 to i8*
  %201 = bitcast %"class.std::__1::unique_ptr.68"* %8 to i64*
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68"* %8, i64 0, i32 0, i32 0, i32 0
  br label %285

203:                                              ; preds = %425, %188
  %204 = load i16*, i16** %15, align 8
  %205 = icmp eq i16* %204, null
  br i1 %205, label %209, label %206

206:                                              ; preds = %203
  %207 = ptrtoint i16* %204 to i64
  store i64 %207, i64* %190, align 8
  %208 = bitcast i16* %204 to i8*
  call void @_ZdlPv(i8* %208) #9
  br label %209

209:                                              ; preds = %203, %206
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  %210 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %6, i64 0, i32 1, i32 0
  %211 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %210, align 8
  %212 = icmp eq %"class.SkStrikeCache::Strike"* %211, null
  br i1 %212, label %223, label %213

213:                                              ; preds = %209
  %214 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %211, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = atomicrmw add i32* %214, i32 -1 acq_rel
  %216 = icmp eq i32 %215, 1
  br i1 %216, label %217, label %223

217:                                              ; preds = %213
  %218 = bitcast %"class.SkStrikeCache::Strike"* %211 to %class.SkRefCntBase*
  %219 = bitcast %"class.SkStrikeCache::Strike"* %211 to void (%class.SkRefCntBase*)***
  %220 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %219, align 8
  %221 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %220, i64 2
  %222 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %221, align 8
  call void %222(%class.SkRefCntBase* nonnull %218) #8
  br label %223

223:                                              ; preds = %217, %213, %209
  %224 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %6, i64 0, i32 0, i32 1
  %225 = load %class.SkGlyph**, %class.SkGlyph*** %224, align 8
  %226 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %6, i64 0, i32 0, i32 0
  %227 = load i32, i32* %226, align 8
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %225, i64 %228
  br label %230

230:                                              ; preds = %230, %223
  %231 = phi %class.SkGlyph** [ %229, %223 ], [ %233, %230 ]
  %232 = icmp ugt %class.SkGlyph** %231, %225
  %233 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %231, i64 -1
  br i1 %232, label %230, label %234

234:                                              ; preds = %230
  %235 = bitcast %class.SkGlyph** %225 to i8*
  %236 = icmp eq i32 %227, 0
  br i1 %236, label %241, label %237

237:                                              ; preds = %234
  %238 = icmp sgt i32 %227, 20
  br i1 %238, label %239, label %240

239:                                              ; preds = %237
  call void @_Z7sk_freePv(i8* %235) #8
  br label %240

240:                                              ; preds = %239, %237
  store %class.SkGlyph** null, %class.SkGlyph*** %224, align 8
  store i32 0, i32* %226, align 8
  br label %241

241:                                              ; preds = %234, %240
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %11) #8
  %242 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %5, i64 0, i32 3, i32 0
  %243 = load %class.SkTypeface*, %class.SkTypeface** %242, align 8
  %244 = icmp eq %class.SkTypeface* %243, null
  br i1 %244, label %255, label %245

245:                                              ; preds = %241
  %246 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %243, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = atomicrmw add i32* %246, i32 -1 acq_rel
  %248 = icmp eq i32 %247, 1
  br i1 %248, label %249, label %255

249:                                              ; preds = %245
  %250 = bitcast %class.SkTypeface* %243 to %class.SkRefCntBase*
  %251 = bitcast %class.SkTypeface* %243 to void (%class.SkRefCntBase*)***
  %252 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %251, align 8
  %253 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %252, i64 2
  %254 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %253, align 8
  call void %254(%class.SkRefCntBase* nonnull %250) #8
  br label %255

255:                                              ; preds = %249, %245, %241
  %256 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %5, i64 0, i32 2, i32 0
  %257 = load %class.SkPathEffect*, %class.SkPathEffect** %256, align 8
  %258 = icmp eq %class.SkPathEffect* %257, null
  br i1 %258, label %269, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %257, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = atomicrmw add i32* %260, i32 -1 acq_rel
  %262 = icmp eq i32 %261, 1
  br i1 %262, label %263, label %269

263:                                              ; preds = %259
  %264 = bitcast %class.SkPathEffect* %257 to %class.SkRefCntBase*
  %265 = bitcast %class.SkPathEffect* %257 to void (%class.SkRefCntBase*)***
  %266 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %265, align 8
  %267 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %266, i64 2
  %268 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %267, align 8
  call void %268(%class.SkRefCntBase* nonnull %264) #8
  br label %269

269:                                              ; preds = %263, %259, %255
  %270 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %5, i64 0, i32 1, i32 0
  %271 = load %class.SkMaskFilter*, %class.SkMaskFilter** %270, align 8
  %272 = icmp eq %class.SkMaskFilter* %271, null
  br i1 %272, label %283, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %271, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %275 = atomicrmw add i32* %274, i32 -1 acq_rel
  %276 = icmp eq i32 %275, 1
  br i1 %276, label %277, label %283

277:                                              ; preds = %273
  %278 = bitcast %class.SkMaskFilter* %271 to %class.SkRefCntBase*
  %279 = bitcast %class.SkMaskFilter* %271 to void (%class.SkRefCntBase*)***
  %280 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %279, align 8
  %281 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %280, i64 2
  %282 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %281, align 8
  call void %282(%class.SkRefCntBase* nonnull %278) #8
  br label %283

283:                                              ; preds = %269, %273, %277
  %284 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %5, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %284) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #8
  ret %class.SkPDFArray* %13

285:                                              ; preds = %199, %425
  %286 = phi i64 [ 0, %199 ], [ %426, %425 ]
  %287 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %286
  %288 = load %class.SkGlyph*, %class.SkGlyph** %287, align 8
  %289 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %288, i64 0, i32 6
  %290 = load float, float* %289, align 8
  %291 = fptosi float %290 to i16
  br label %292

292:                                              ; preds = %296, %285
  %293 = phi i64 [ %286, %285 ], [ %294, %296 ]
  %294 = add i64 %293, 1
  %295 = icmp ult i64 %294, %197
  br i1 %295, label %296, label %303

296:                                              ; preds = %292
  %297 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %294
  %298 = load %class.SkGlyph*, %class.SkGlyph** %297, align 8
  %299 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %298, i64 0, i32 6
  %300 = load float, float* %299, align 8
  %301 = fptosi float %300 to i16
  %302 = icmp eq i16 %291, %301
  br i1 %302, label %292, label %303

303:                                              ; preds = %296, %292
  %304 = sub i64 %294, %286
  %305 = icmp ugt i64 %304, 1
  %306 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %288, i64 0, i32 10, i32 0
  %307 = load i32, i32* %306, align 4
  %308 = lshr i32 %307, 2
  %309 = and i32 %308, 65535
  call void @_ZN10SkPDFArray9appendIntEi(%class.SkPDFArray* nonnull %13, i32 %309) #8
  br i1 %305, label %310, label %327

310:                                              ; preds = %303
  %311 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %293
  %312 = load %class.SkGlyph*, %class.SkGlyph** %311, align 8
  %313 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %312, i64 0, i32 10, i32 0
  %314 = load i32, i32* %313, align 4
  %315 = lshr i32 %314, 2
  %316 = and i32 %315, 65535
  call void @_ZN10SkPDFArray9appendIntEi(%class.SkPDFArray* nonnull %13, i32 %316) #8
  %317 = load i32, i32* %4, align 4
  %318 = trunc i32 %317 to i16
  %319 = sitofp i16 %291 to float
  %320 = icmp eq i16 %318, 1000
  br i1 %320, label %325, label %321

321:                                              ; preds = %310
  %322 = fmul float %319, 1.000000e+03
  %323 = uitofp i16 %318 to float
  %324 = fdiv float %322, %323
  br label %325

325:                                              ; preds = %321, %310
  %326 = phi float [ %324, %321 ], [ %319, %310 ]
  call void @_ZN10SkPDFArray12appendScalarEf(%class.SkPDFArray* nonnull %13, float %326) #8
  br label %425

327:                                              ; preds = %303
  %328 = call i8* @_Znwm(i64 32) #9
  %329 = bitcast i8* %328 to %class.SkPDFArray*
  call void @_ZN10SkPDFArrayC1Ev(%class.SkPDFArray* nonnull %329) #8
  call void @_ZN10SkPDFArray7reserveEi(%class.SkPDFArray* nonnull %329, i32 0) #8
  %330 = ptrtoint i8* %328 to i64
  %331 = load i32, i32* %4, align 4
  %332 = trunc i32 %331 to i16
  %333 = sitofp i16 %291 to float
  %334 = icmp eq i16 %332, 1000
  br i1 %334, label %339, label %335

335:                                              ; preds = %327
  %336 = fmul float %333, 1.000000e+03
  %337 = uitofp i16 %332 to float
  %338 = fdiv float %336, %337
  br label %339

339:                                              ; preds = %327, %335
  %340 = phi float [ %338, %335 ], [ %333, %327 ]
  call void @_ZN10SkPDFArray12appendScalarEf(%class.SkPDFArray* nonnull %329, float %340) #8
  %341 = add i64 %286, 1
  %342 = icmp ult i64 %341, %197
  br i1 %342, label %343, label %414

343:                                              ; preds = %339, %410
  %344 = phi i64 [ %412, %410 ], [ %341, %339 ]
  %345 = phi i64 [ %344, %410 ], [ %286, %339 ]
  %346 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %344
  %347 = load %class.SkGlyph*, %class.SkGlyph** %346, align 8
  %348 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %347, i64 0, i32 6
  %349 = load float, float* %348, align 8
  %350 = fptosi float %349 to i16
  %351 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %347, i64 0, i32 10, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = lshr i32 %352, 2
  %354 = and i32 %353, 65535
  %355 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %345
  %356 = load %class.SkGlyph*, %class.SkGlyph** %355, align 8
  %357 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %356, i64 0, i32 10, i32 0
  %358 = load i32, i32* %357, align 4
  %359 = lshr i32 %358, 2
  %360 = and i32 %359, 65535
  %361 = xor i32 %360, -1
  %362 = add nsw i32 %354, %361
  %363 = icmp sgt i32 %362, 3
  br i1 %363, label %414, label %364

364:                                              ; preds = %343
  %365 = add i64 %345, 2
  %366 = icmp ult i64 %365, %197
  br i1 %366, label %367, label %382

367:                                              ; preds = %364
  %368 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %365
  %369 = load %class.SkGlyph*, %class.SkGlyph** %368, align 8
  %370 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %369, i64 0, i32 6
  %371 = load float, float* %370, align 8
  %372 = fptosi float %371 to i16
  %373 = icmp eq i16 %350, %372
  br i1 %373, label %374, label %382

374:                                              ; preds = %367
  %375 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %369, i64 0, i32 10, i32 0
  %376 = load i32, i32* %375, align 4
  %377 = lshr i32 %376, 2
  %378 = and i32 %377, 65535
  %379 = sub nuw nsw i32 -2, %360
  %380 = add nsw i32 %379, %378
  %381 = icmp sgt i32 %380, 3
  br i1 %381, label %414, label %382

382:                                              ; preds = %374, %367, %364
  %383 = phi i16 [ 0, %364 ], [ %372, %367 ], [ %350, %374 ]
  %384 = add i64 %345, 3
  %385 = icmp ult i64 %384, %197
  %386 = icmp eq i16 %383, %350
  %387 = and i1 %385, %386
  br i1 %387, label %388, label %395

388:                                              ; preds = %382
  %389 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %196, i64 %384
  %390 = load %class.SkGlyph*, %class.SkGlyph** %389, align 8
  %391 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %390, i64 0, i32 6
  %392 = load float, float* %391, align 8
  %393 = fptosi float %392 to i16
  %394 = icmp eq i16 %350, %393
  br i1 %394, label %414, label %395

395:                                              ; preds = %388, %382
  %396 = icmp sgt i32 %362, 0
  br i1 %396, label %397, label %401

397:                                              ; preds = %395, %397
  %398 = phi i32 [ %399, %397 ], [ %362, %395 ]
  %399 = add nsw i32 %398, -1
  call void @_ZN10SkPDFArray12appendScalarEf(%class.SkPDFArray* nonnull %329, float 0.000000e+00) #8
  %400 = icmp sgt i32 %399, 0
  br i1 %400, label %397, label %401

401:                                              ; preds = %397, %395
  %402 = load i32, i32* %4, align 4
  %403 = trunc i32 %402 to i16
  %404 = sitofp i16 %350 to float
  %405 = icmp eq i16 %403, 1000
  br i1 %405, label %410, label %406

406:                                              ; preds = %401
  %407 = fmul float %404, 1.000000e+03
  %408 = uitofp i16 %403 to float
  %409 = fdiv float %407, %408
  br label %410

410:                                              ; preds = %406, %401
  %411 = phi float [ %409, %406 ], [ %404, %401 ]
  call void @_ZN10SkPDFArray12appendScalarEf(%class.SkPDFArray* nonnull %329, float %411) #8
  %412 = add i64 %344, 1
  %413 = icmp eq i64 %412, %197
  br i1 %413, label %414, label %343

414:                                              ; preds = %343, %388, %374, %410, %339
  %415 = phi i64 [ %286, %339 ], [ %345, %374 ], [ %345, %388 ], [ %345, %343 ], [ %344, %410 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %200) #8
  store i64 %330, i64* %201, align 8
  call void @_ZN10SkPDFArray12appendObjectEONSt3__110unique_ptrI11SkPDFObjectNS0_14default_deleteIS2_EEEE(%class.SkPDFArray* nonnull %13, %"class.std::__1::unique_ptr.68"* nonnull dereferenceable(8) %8) #8
  %416 = load %class.SkPDFObject*, %class.SkPDFObject** %202, align 8
  store %class.SkPDFObject* null, %class.SkPDFObject** %202, align 8
  %417 = icmp eq %class.SkPDFObject* %416, null
  br i1 %417, label %423, label %418

418:                                              ; preds = %414
  %419 = bitcast %class.SkPDFObject* %416 to void (%class.SkPDFObject*)***
  %420 = load void (%class.SkPDFObject*)**, void (%class.SkPDFObject*)*** %419, align 8
  %421 = getelementptr inbounds void (%class.SkPDFObject*)*, void (%class.SkPDFObject*)** %420, i64 2
  %422 = load void (%class.SkPDFObject*)*, void (%class.SkPDFObject*)** %421, align 8
  call void %422(%class.SkPDFObject* nonnull %416) #8
  br label %423

423:                                              ; preds = %418, %414
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %200) #8
  %424 = add i64 %415, 1
  br label %425

425:                                              ; preds = %325, %423
  %426 = phi i64 [ %294, %325 ], [ %424, %423 ]
  %427 = icmp ult i64 %426, %197
  br i1 %427, label %285, label %203
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN12SkStrikeSpec13MakePDFVectorERK10SkTypefacePi(%class.SkStrikeSpec* sret, %class.SkTypeface* dereferenceable(48), i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN26SkBulkGlyphMetricsAndPathsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetricsAndPaths*, %class.SkStrikeSpec* dereferenceable(160)) unnamed_addr #2

declare { %class.SkGlyph**, i64 } @_ZN26SkBulkGlyphMetricsAndPaths6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetricsAndPaths*, i16*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10SkPDFArray9appendIntEi(%class.SkPDFArray*, i32) local_unnamed_addr #2

declare void @_ZN10SkPDFArray12appendScalarEf(%class.SkPDFArray*, float) local_unnamed_addr #2

declare void @_ZN10SkPDFArray12appendObjectEONSt3__110unique_ptrI11SkPDFObjectNS0_14default_deleteIS2_EEEE(%class.SkPDFArray*, %"class.std::__1::unique_ptr.68"* dereferenceable(8)) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN10SkPDFArrayC1Ev(%class.SkPDFArray*) unnamed_addr #2

declare void @_ZN10SkPDFArray7reserveEi(%class.SkPDFArray*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
