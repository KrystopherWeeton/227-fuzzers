; ModuleID = '../../third_party/opus/src/silk/float/find_pred_coefs_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/find_pred_coefs_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }
%struct.silk_encoder_control_FLP = type { [4 x float], [2 x [16 x float]], [20 x float], float, [4 x i32], [96 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, [4 x float], [4 x i32], i8 }

@.str = private unnamed_addr constant [117 x i8] c"assertion failed: psEnc->sCmn.ltp_mem_length - psEnc->sCmn.predictLPCOrder >= psEncCtrl->pitchL[ 0 ] + LTP_ORDER / 2\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"../../third_party/opus/src/silk/float/find_pred_coefs_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_find_pred_coefs_FLP(%struct.silk_encoder_state_FLP*, %struct.silk_encoder_control_FLP*, float*, float*, i32) local_unnamed_addr #0 {
  %6 = alloca [100 x float], align 16
  %7 = alloca [20 x float], align 16
  %8 = alloca [4 x float], align 16
  %9 = alloca [16 x i16], align 16
  %10 = alloca [384 x float], align 16
  %11 = bitcast [100 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 400, i1 false)
  %12 = bitcast [20 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 80, i1 false)
  %13 = bitcast [4 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #4
  %14 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 0
  %15 = bitcast [16 x i16]* %9 to i8*
  %16 = bitcast [4 x float]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #4
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 0
  %18 = bitcast [384 x float]* %10 to i8*
  %19 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 1536, i1 false)
  %20 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0
  %21 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %77

24:                                               ; preds = %5
  %25 = sext i32 %22 to i64
  %26 = icmp ult i32 %22, 4
  br i1 %26, label %67, label %27

27:                                               ; preds = %24
  %28 = and i64 %25, -4
  %29 = add nsw i64 %28, -4
  %30 = lshr exact i64 %29, 2
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %55, label %34

34:                                               ; preds = %27
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %52, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %53, %36 ]
  %39 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %37
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4
  %42 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %43 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 %37
  %44 = bitcast float* %43 to <4 x float>*
  store <4 x float> %42, <4 x float>* %44, align 16
  %45 = or i64 %37, 4
  %46 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %45
  %47 = bitcast float* %46 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4
  %49 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %48
  %50 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 %45
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 16
  %52 = add i64 %37, 8
  %53 = add i64 %38, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %36, !llvm.loop !2

55:                                               ; preds = %36, %27
  %56 = phi i64 [ 0, %27 ], [ %52, %36 ]
  %57 = icmp eq i64 %32, 0
  br i1 %57, label %65, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %56
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4
  %62 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %63 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 %56
  %64 = bitcast float* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 16
  br label %65

65:                                               ; preds = %55, %58
  %66 = icmp eq i64 %28, %25
  br i1 %66, label %77, label %67

67:                                               ; preds = %65, %24
  %68 = phi i64 [ 0, %24 ], [ %28, %65 ]
  br label %69

69:                                               ; preds = %67, %69
  %70 = phi i64 [ %75, %69 ], [ %68, %67 ]
  %71 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %70
  %72 = load float, float* %71, align 4
  %73 = fdiv float 1.000000e+00, %72
  %74 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 %70
  store float %73, float* %74, align 4
  %75 = add nuw nsw i64 %70, 1
  %76 = icmp slt i64 %75, %25
  br i1 %76, label %69, label %77, !llvm.loop !4

77:                                               ; preds = %69, %65, %5
  %78 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 5
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 2
  br i1 %80, label %81, label %113

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 23
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 35
  %85 = load i32, i32* %84, align 8
  %86 = sub nsw i32 %83, %85
  %87 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 4, i64 0
  %88 = load i32, i32* %87, align 4
  %89 = add nsw i32 %88, 2
  %90 = icmp slt i32 %86, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %81
  tail call void @celt_fatal(i8* getelementptr inbounds ([117 x i8], [117 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 62) #5
  unreachable

92:                                               ; preds = %81
  %93 = getelementptr inbounds [100 x float], [100 x float]* %6, i64 0, i64 0
  %94 = getelementptr inbounds [20 x float], [20 x float]* %7, i64 0, i64 0
  %95 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 22
  %96 = load i32, i32* %95, align 4
  call void @silk_find_LTP_FLP(float* nonnull %93, float* nonnull %94, float* %2, i32* %87, i32 %96, i32 %22) #4
  %97 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 2, i64 0
  %98 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 1, i64 0
  %99 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 8
  %100 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 39
  %101 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 14
  %102 = load i32, i32* %95, align 4
  %103 = load i32, i32* %21, align 4
  %104 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 57
  %105 = load i32, i32* %104, align 4
  call void @silk_quant_LTP_gains_FLP(float* %97, i8* %98, i8* %99, i32* %100, float* %101, float* nonnull %93, float* nonnull %94, i32 %102, i32 %103, i32 %105) #4
  call void @silk_LTP_scale_ctrl_FLP(%struct.silk_encoder_state_FLP* %0, %struct.silk_encoder_control_FLP* %1, i32 %4) #4
  %106 = getelementptr inbounds [384 x float], [384 x float]* %10, i64 0, i64 0
  %107 = load i32, i32* %84, align 8
  %108 = sext i32 %107 to i64
  %109 = sub nsw i64 0, %108
  %110 = getelementptr inbounds float, float* %3, i64 %109
  %111 = load i32, i32* %95, align 4
  %112 = load i32, i32* %21, align 4
  call void @silk_LTP_analysis_filter_FLP(float* nonnull %106, float* %110, float* %97, i32* %87, float* nonnull %14, i32 %111, i32 %112, i32 %107) #4
  br label %152

113:                                              ; preds = %77
  %114 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 35
  br i1 %23, label %115, label %143

115:                                              ; preds = %113
  %116 = getelementptr inbounds [384 x float], [384 x float]* %10, i64 0, i64 0
  %117 = load i32, i32* %114, align 8
  %118 = sext i32 %117 to i64
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds float, float* %3, i64 %119
  %121 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 22
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %115, %123
  %124 = phi i32 [ %117, %115 ], [ %133, %123 ]
  %125 = phi i32 [ %122, %115 ], [ %132, %123 ]
  %126 = phi i64 [ 0, %115 ], [ %139, %123 ]
  %127 = phi float* [ %116, %115 ], [ %136, %123 ]
  %128 = phi float* [ %120, %115 ], [ %138, %123 ]
  %129 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i64 %126
  %130 = load float, float* %129, align 4
  %131 = add nsw i32 %124, %125
  call void @silk_scale_copy_vector_FLP(float* %127, float* %128, float %130, i32 %131) #4
  %132 = load i32, i32* %121, align 4
  %133 = load i32, i32* %114, align 8
  %134 = add nsw i32 %133, %132
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %127, i64 %135
  %137 = sext i32 %132 to i64
  %138 = getelementptr inbounds float, float* %128, i64 %137
  %139 = add nuw nsw i64 %126, 1
  %140 = load i32, i32* %21, align 4
  %141 = sext i32 %140 to i64
  %142 = icmp slt i64 %139, %141
  br i1 %142, label %123, label %143

143:                                              ; preds = %123, %113
  %144 = phi i32 [ %22, %113 ], [ %140, %123 ]
  %145 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 2, i64 0
  %146 = bitcast float* %145 to i8*
  %147 = mul nsw i32 %144, 5
  %148 = sext i32 %147 to i64
  %149 = shl nsw i64 %148, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %146, i8 0, i64 %149, i1 false)
  %150 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 14
  store float 0.000000e+00, float* %150, align 4
  %151 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 39
  store i32 0, i32* %151, align 8
  br label %152

152:                                              ; preds = %143, %92
  %153 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 41
  %154 = load i32, i32* %153, align 8
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %169

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 14
  %158 = load float, float* %157, align 4
  %159 = fdiv float %158, 3.000000e+00
  %160 = fpext float %159 to double
  %161 = call double @exp2(double %160) #6
  %162 = fptrunc double %161 to float
  %163 = fdiv float %162, 1.000000e+04
  %164 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 12
  %165 = load float, float* %164, align 4
  %166 = fmul float %165, 7.500000e-01
  %167 = fadd float %166, 2.500000e-01
  %168 = fdiv float %163, %167
  br label %169

169:                                              ; preds = %152, %156
  %170 = phi float [ %168, %156 ], [ 0x3F847AE140000000, %152 ]
  %171 = getelementptr inbounds [384 x float], [384 x float]* %10, i64 0, i64 0
  call void @silk_find_LPC_FLP(%struct.silk_encoder_state* %20, i16* nonnull %17, float* nonnull %171, float %170) #4
  %172 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 1, i64 0
  %173 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 6, i64 0
  call void @silk_process_NLSFs_FLP(%struct.silk_encoder_state* %20, [16 x float]* %172, i16* nonnull %17, i16* %173) #4
  %174 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 15, i64 0
  %175 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 0
  %176 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 22
  %177 = load i32, i32* %176, align 4
  %178 = load i32, i32* %21, align 4
  %179 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 35
  %180 = load i32, i32* %179, align 8
  call void @silk_residual_energy_FLP(float* %174, float* nonnull %171, [16 x float]* %172, float* %175, i32 %177, i32 %178, i32 %180) #4
  %181 = bitcast i16* %173 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %181, i8* nonnull align 16 %15, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %11) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_find_LTP_FLP(float*, float*, float*, i32*, i32, i32) local_unnamed_addr #3

declare void @silk_quant_LTP_gains_FLP(float*, i8*, i8*, i32*, float*, float*, float*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_LTP_scale_ctrl_FLP(%struct.silk_encoder_state_FLP*, %struct.silk_encoder_control_FLP*, i32) local_unnamed_addr #3

declare void @silk_LTP_analysis_filter_FLP(float*, float*, float*, i32*, float*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_scale_copy_vector_FLP(float*, float*, float, i32) local_unnamed_addr #3

declare void @silk_find_LPC_FLP(%struct.silk_encoder_state*, i16*, float*, float) local_unnamed_addr #3

declare void @silk_process_NLSFs_FLP(%struct.silk_encoder_state*, [16 x float]*, i16*, i16*) local_unnamed_addr #3

declare void @silk_residual_energy_FLP(float*, float*, [16 x float]*, float*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare double @exp2(double) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
