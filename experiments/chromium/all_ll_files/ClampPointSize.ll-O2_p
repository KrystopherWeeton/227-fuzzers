; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/ClampPointSize.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/ClampPointSize.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.29, i32 }
%union.anon.29 = type { i32 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.30", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.32" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>

@.str = private unnamed_addr constant [13 x i8] c"gl_PointSize\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@_ZTVN2sh20TIntermConstantUnionE = external unnamed_addr constant { [34 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14ClampPointSizeEPNS_9TCompilerEPNS_12TIntermBlockEfPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, float, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TVector", align 8
  %8 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #4
  %9 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %11 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  store i64 12, i64* %11, align 8
  %12 = call %"class.sh::TIntermSymbol"* @_ZN2sh14FindSymbolNodeEPNS_11TIntermNodeERKNS_15ImmutableStringE(%"class.sh::TIntermNode"* %10, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5) #4
  %13 = icmp eq %"class.sh::TIntermSymbol"* %12, null
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #4
  br i1 %13, label %457, label %14

14:                                               ; preds = %4
  %15 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %16 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #4
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  %18 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_PointSizeEv() #4
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %18) #4
  %19 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %20 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %19, i64 8) #4
  %21 = bitcast i8* %20 to %"class.sh::TConstantUnion"*
  call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %21) #4
  %22 = bitcast i8* %20 to float*
  store float %2, float* %22, align 4
  %23 = getelementptr inbounds i8, i8* %20, i64 4
  %24 = bitcast i8* %23 to i32*
  store i32 1, i32* %24, align 4
  %25 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %26 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 216) #4
  %27 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %27) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 1, i32 3, i32 2, i8 zeroext 1, i8 zeroext 1) #4
  %28 = bitcast i8* %26 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %28, %"class.sh::TType"* nonnull dereferenceable(184) %6) #4
  %29 = bitcast i8* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds i8, i8* %26, i64 208
  %31 = bitcast i8* %30 to i8**
  store i8* %20, i8** %31, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %27) #4
  %32 = bitcast %"class.sh::TVector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #4
  %33 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #4
  %36 = bitcast i8* %16 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %37 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %37, i64 23
  %39 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %38, align 8
  %40 = call %"class.sh::TIntermTyped"* %39(%"class.sh::TIntermSymbol"* %17) #4
  %41 = ptrtoint %"class.sh::TIntermTyped"* %40 to i64
  %42 = bitcast %"class.sh::TIntermNode"*** %34 to i64*
  %43 = bitcast %"class.sh::TVector"* %7 to i64*
  %44 = bitcast %"class.sh::TIntermNode"*** %35 to i64*
  %45 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %46 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %45, i64 8) #4
  %47 = bitcast i8* %46 to %"class.sh::TIntermNode"**
  %48 = getelementptr inbounds i8, i8* %46, i64 8
  %49 = ptrtoint i8* %48 to i64
  %50 = bitcast i8* %46 to i64*
  store i64 %41, i64* %50, align 8
  %51 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %33, align 8
  %52 = ptrtoint %"class.sh::TIntermNode"** %51 to i64
  %53 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %34, align 8
  %54 = bitcast %"class.sh::TIntermNode"** %53 to i8*
  %55 = icmp eq %"class.sh::TIntermNode"** %53, %51
  br i1 %55, label %229, label %56

56:                                               ; preds = %14
  %57 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 -1
  %58 = ptrtoint %"class.sh::TIntermNode"** %57 to i64
  %59 = sub i64 %58, %52
  %60 = lshr i64 %59, 3
  %61 = add nuw nsw i64 %60, 1
  %62 = icmp ult i64 %61, 4
  br i1 %62, label %159, label %63

63:                                               ; preds = %56
  %64 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 -1
  %65 = ptrtoint %"class.sh::TIntermNode"** %64 to i64
  %66 = sub i64 %65, %52
  %67 = lshr i64 %66, 3
  %68 = and i64 %66, -8
  %69 = xor i64 %68, -8
  %70 = getelementptr i8, i8* %46, i64 %69
  %71 = xor i64 %67, -1
  %72 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 %71
  %73 = bitcast %"class.sh::TIntermNode"** %72 to i8*
  %74 = icmp ult i8* %70, %54
  %75 = icmp ugt i8* %46, %73
  %76 = and i1 %74, %75
  br i1 %76, label %159, label %77

77:                                               ; preds = %63
  %78 = and i64 %61, 4611686018427387900
  %79 = sub nsw i64 0, %78
  %80 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %79
  %81 = sub nsw i64 0, %78
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 %81
  %83 = add nsw i64 %78, -4
  %84 = lshr exact i64 %83, 2
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %83, 0
  br i1 %87, label %134, label %88

88:                                               ; preds = %77
  %89 = sub nuw nsw i64 %85, %86
  %90 = getelementptr i8, i8* %46, i64 -8
  %91 = bitcast i8* %90 to %"class.sh::TIntermNode"**
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 -1
  %93 = getelementptr i8, i8* %46, i64 -8
  %94 = bitcast i8* %93 to %"class.sh::TIntermNode"**
  %95 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 -1
  br label %96

96:                                               ; preds = %96, %88
  %97 = phi i64 [ 0, %88 ], [ %131, %96 ]
  %98 = phi i64 [ %89, %88 ], [ %132, %96 ]
  %99 = sub i64 0, %97
  %100 = sub i64 0, %97
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %99
  %102 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %100
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 -1
  %104 = bitcast %"class.sh::TIntermNode"** %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8, !alias.scope !2
  %106 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 -2
  %107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %106, i64 -1
  %108 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8, !alias.scope !2
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %111, align 8, !alias.scope !5, !noalias !2
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 -2
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 -1
  %114 = bitcast %"class.sh::TIntermNode"** %113 to <2 x i64>*
  store <2 x i64> %109, <2 x i64>* %114, align 8, !alias.scope !5, !noalias !2
  %115 = sub nuw nsw i64 -4, %97
  %116 = sub nuw nsw i64 -4, %97
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %115
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 %116
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %120 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 8, !alias.scope !2
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -2
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -1
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !2
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %127, align 8, !alias.scope !5, !noalias !2
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -2
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %130 = bitcast %"class.sh::TIntermNode"** %129 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %130, align 8, !alias.scope !5, !noalias !2
  %131 = add i64 %97, 8
  %132 = add i64 %98, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %96, !llvm.loop !7

134:                                              ; preds = %96, %77
  %135 = phi i64 [ 0, %77 ], [ %131, %96 ]
  %136 = icmp eq i64 %86, 0
  br i1 %136, label %157, label %137

137:                                              ; preds = %134
  %138 = sub i64 0, %135
  %139 = getelementptr i8, i8* %46, i64 -8
  %140 = bitcast i8* %139 to %"class.sh::TIntermNode"**
  %141 = sub i64 0, %135
  %142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %53, i64 -1
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 %138
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 %141
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %146 = bitcast %"class.sh::TIntermNode"** %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !2
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -2
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !2
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %153, align 8, !alias.scope !5, !noalias !2
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -2
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %154, i64 -1
  %156 = bitcast %"class.sh::TIntermNode"** %155 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %156, align 8, !alias.scope !5, !noalias !2
  br label %157

157:                                              ; preds = %134, %137
  %158 = icmp eq i64 %61, %78
  br i1 %158, label %229, label %159

159:                                              ; preds = %157, %63, %56
  %160 = phi %"class.sh::TIntermNode"** [ %47, %63 ], [ %47, %56 ], [ %80, %157 ]
  %161 = phi %"class.sh::TIntermNode"** [ %53, %63 ], [ %53, %56 ], [ %82, %157 ]
  %162 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %163 = ptrtoint %"class.sh::TIntermNode"** %162 to i64
  %164 = sub i64 %163, %52
  %165 = lshr i64 %164, 3
  %166 = add nuw nsw i64 %165, 1
  %167 = and i64 %166, 7
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %180, label %169

169:                                              ; preds = %159, %169
  %170 = phi %"class.sh::TIntermNode"** [ %173, %169 ], [ %160, %159 ]
  %171 = phi %"class.sh::TIntermNode"** [ %174, %169 ], [ %161, %159 ]
  %172 = phi i64 [ %178, %169 ], [ %167, %159 ]
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 -1
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %175 = bitcast %"class.sh::TIntermNode"** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  store i64 %176, i64* %177, align 8
  %178 = add i64 %172, -1
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %169, !llvm.loop !9

180:                                              ; preds = %169, %159
  %181 = phi %"class.sh::TIntermNode"** [ undef, %159 ], [ %173, %169 ]
  %182 = phi %"class.sh::TIntermNode"** [ %160, %159 ], [ %173, %169 ]
  %183 = phi %"class.sh::TIntermNode"** [ %161, %159 ], [ %174, %169 ]
  %184 = icmp ult i64 %164, 56
  br i1 %184, label %229, label %185

185:                                              ; preds = %180, %185
  %186 = phi %"class.sh::TIntermNode"** [ %223, %185 ], [ %182, %180 ]
  %187 = phi %"class.sh::TIntermNode"** [ %224, %185 ], [ %183, %180 ]
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -1
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %190 = bitcast %"class.sh::TIntermNode"** %189 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  store i64 %191, i64* %192, align 8
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -2
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -2
  %195 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  store i64 %196, i64* %197, align 8
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -3
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -3
  %200 = bitcast %"class.sh::TIntermNode"** %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  store i64 %201, i64* %202, align 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -4
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -4
  %205 = bitcast %"class.sh::TIntermNode"** %204 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = bitcast %"class.sh::TIntermNode"** %203 to i64*
  store i64 %206, i64* %207, align 8
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -5
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -5
  %210 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = bitcast %"class.sh::TIntermNode"** %208 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -6
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -6
  %215 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %"class.sh::TIntermNode"** %213 to i64*
  store i64 %216, i64* %217, align 8
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -7
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -7
  %220 = bitcast %"class.sh::TIntermNode"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.sh::TIntermNode"** %218 to i64*
  store i64 %221, i64* %222, align 8
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -8
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -8
  %225 = bitcast %"class.sh::TIntermNode"** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  store i64 %226, i64* %227, align 8
  %228 = icmp eq %"class.sh::TIntermNode"** %224, %51
  br i1 %228, label %229, label %185, !llvm.loop !11

229:                                              ; preds = %180, %185, %157, %14
  %230 = phi %"class.sh::TIntermNode"** [ %47, %14 ], [ %80, %157 ], [ %181, %180 ], [ %223, %185 ]
  %231 = ptrtoint %"class.sh::TIntermNode"** %230 to i64
  store i64 %231, i64* %43, align 8
  store i64 %49, i64* %42, align 8
  store i64 %49, i64* %44, align 8
  %232 = ptrtoint i8* %26 to i64
  %233 = ptrtoint i8* %48 to i64
  %234 = bitcast %"class.sh::TIntermNode"*** %34 to i64*
  %235 = bitcast %"class.sh::TVector"* %7 to i64*
  %236 = sub i64 %233, %231
  %237 = ashr exact i64 %236, 3
  %238 = add nsw i64 %237, 1
  %239 = icmp ugt i64 %238, 2305843009213693951
  br i1 %239, label %240, label %242

240:                                              ; preds = %229
  %241 = bitcast %"class.sh::TVector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %241) #5
  unreachable

242:                                              ; preds = %229
  %243 = ptrtoint i8* %48 to i64
  %244 = bitcast %"class.sh::TIntermNode"*** %35 to i64*
  %245 = sub i64 %243, %231
  %246 = ashr exact i64 %245, 3
  %247 = icmp ult i64 %246, 1152921504606846975
  br i1 %247, label %248, label %253

248:                                              ; preds = %242
  %249 = ashr exact i64 %245, 2
  %250 = icmp ult i64 %249, %238
  %251 = select i1 %250, i64 %238, i64 %249
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %259, label %253

253:                                              ; preds = %248, %242
  %254 = phi i64 [ %251, %248 ], [ 2305843009213693951, %242 ]
  %255 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %256 = shl i64 %254, 3
  %257 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %255, i64 %256) #4
  %258 = bitcast i8* %257 to %"class.sh::TIntermNode"**
  br label %259

259:                                              ; preds = %253, %248
  %260 = phi i64 [ %254, %253 ], [ 0, %248 ]
  %261 = phi %"class.sh::TIntermNode"** [ %258, %253 ], [ null, %248 ]
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 %237
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 %260
  %264 = ptrtoint %"class.sh::TIntermNode"** %263 to i64
  %265 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %232, i64* %265, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 1
  %267 = ptrtoint %"class.sh::TIntermNode"** %266 to i64
  %268 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %33, align 8
  %269 = ptrtoint %"class.sh::TIntermNode"** %268 to i64
  %270 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %34, align 8
  %271 = icmp eq %"class.sh::TIntermNode"** %270, %268
  br i1 %271, label %441, label %272

272:                                              ; preds = %259
  %273 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %274 = ptrtoint %"class.sh::TIntermNode"** %273 to i64
  %275 = sub i64 %274, %269
  %276 = lshr i64 %275, 3
  %277 = add nuw nsw i64 %276, 1
  %278 = icmp ult i64 %277, 4
  br i1 %278, label %371, label %279

279:                                              ; preds = %272
  %280 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %281 = ptrtoint %"class.sh::TIntermNode"** %280 to i64
  %282 = sub i64 %281, %269
  %283 = lshr i64 %282, 3
  %284 = xor i64 %283, -1
  %285 = add nsw i64 %237, %284
  %286 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %261, i64 %285
  %287 = xor i64 %283, -1
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 %287
  %289 = icmp ult %"class.sh::TIntermNode"** %286, %270
  %290 = icmp ult %"class.sh::TIntermNode"** %288, %262
  %291 = and i1 %289, %290
  br i1 %291, label %371, label %292

292:                                              ; preds = %279
  %293 = and i64 %277, 4611686018427387900
  %294 = sub nsw i64 0, %293
  %295 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 %294
  %296 = sub nsw i64 0, %293
  %297 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 %296
  %298 = add nsw i64 %293, -4
  %299 = lshr exact i64 %298, 2
  %300 = add nuw nsw i64 %299, 1
  %301 = and i64 %300, 1
  %302 = icmp eq i64 %298, 0
  br i1 %302, label %349, label %303

303:                                              ; preds = %292
  %304 = sub nuw nsw i64 %300, %301
  %305 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %306 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %308 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  br label %309

309:                                              ; preds = %309, %303
  %310 = phi i64 [ 0, %303 ], [ %344, %309 ]
  %311 = phi i64 [ %304, %303 ], [ %345, %309 ]
  %312 = sub i64 0, %310
  %313 = sub i64 0, %310
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %305, i64 %312
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %306, i64 %313
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 -1
  %317 = bitcast %"class.sh::TIntermNode"** %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 8, !alias.scope !12
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 -2
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 -1
  %321 = bitcast %"class.sh::TIntermNode"** %320 to <2 x i64>*
  %322 = load <2 x i64>, <2 x i64>* %321, align 8, !alias.scope !12
  %323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %324 = bitcast %"class.sh::TIntermNode"** %323 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %324, align 8, !alias.scope !15, !noalias !12
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -2
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 -1
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %322, <2 x i64>* %327, align 8, !alias.scope !15, !noalias !12
  %328 = sub nuw nsw i64 -4, %310
  %329 = sub nuw nsw i64 -4, %310
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 %328
  %331 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 %329
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %333 = bitcast %"class.sh::TIntermNode"** %332 to <2 x i64>*
  %334 = load <2 x i64>, <2 x i64>* %333, align 8, !alias.scope !12
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -2
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %337 = bitcast %"class.sh::TIntermNode"** %336 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 8, !alias.scope !12
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %340 = bitcast %"class.sh::TIntermNode"** %339 to <2 x i64>*
  store <2 x i64> %334, <2 x i64>* %340, align 8, !alias.scope !15, !noalias !12
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -2
  %342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %343 = bitcast %"class.sh::TIntermNode"** %342 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %343, align 8, !alias.scope !15, !noalias !12
  %344 = add i64 %310, 8
  %345 = add i64 %311, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %309, !llvm.loop !17

347:                                              ; preds = %309
  %348 = sub nuw nsw i64 -8, %310
  br label %349

349:                                              ; preds = %347, %292
  %350 = phi i64 [ 0, %292 ], [ %348, %347 ]
  %351 = icmp eq i64 %301, 0
  br i1 %351, label %369, label %352

352:                                              ; preds = %349
  %353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %262, i64 -1
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %353, i64 %350
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %350
  %357 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %358 = bitcast %"class.sh::TIntermNode"** %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 8, !alias.scope !12
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %362 = bitcast %"class.sh::TIntermNode"** %361 to <2 x i64>*
  %363 = load <2 x i64>, <2 x i64>* %362, align 8, !alias.scope !12
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %365 = bitcast %"class.sh::TIntermNode"** %364 to <2 x i64>*
  store <2 x i64> %359, <2 x i64>* %365, align 8, !alias.scope !15, !noalias !12
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -2
  %367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 -1
  %368 = bitcast %"class.sh::TIntermNode"** %367 to <2 x i64>*
  store <2 x i64> %363, <2 x i64>* %368, align 8, !alias.scope !15, !noalias !12
  br label %369

369:                                              ; preds = %349, %352
  %370 = icmp eq i64 %277, %293
  br i1 %370, label %441, label %371

371:                                              ; preds = %369, %279, %272
  %372 = phi %"class.sh::TIntermNode"** [ %262, %279 ], [ %262, %272 ], [ %295, %369 ]
  %373 = phi %"class.sh::TIntermNode"** [ %270, %279 ], [ %270, %272 ], [ %297, %369 ]
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %373, i64 -1
  %375 = ptrtoint %"class.sh::TIntermNode"** %374 to i64
  %376 = sub i64 %375, %269
  %377 = lshr i64 %376, 3
  %378 = add nuw nsw i64 %377, 1
  %379 = and i64 %378, 7
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %371, %381
  %382 = phi %"class.sh::TIntermNode"** [ %385, %381 ], [ %372, %371 ]
  %383 = phi %"class.sh::TIntermNode"** [ %386, %381 ], [ %373, %371 ]
  %384 = phi i64 [ %390, %381 ], [ %379, %371 ]
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %382, i64 -1
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -1
  %387 = bitcast %"class.sh::TIntermNode"** %386 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = bitcast %"class.sh::TIntermNode"** %385 to i64*
  store i64 %388, i64* %389, align 8
  %390 = add i64 %384, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %381, !llvm.loop !18

392:                                              ; preds = %381, %371
  %393 = phi %"class.sh::TIntermNode"** [ undef, %371 ], [ %385, %381 ]
  %394 = phi %"class.sh::TIntermNode"** [ %372, %371 ], [ %385, %381 ]
  %395 = phi %"class.sh::TIntermNode"** [ %373, %371 ], [ %386, %381 ]
  %396 = icmp ult i64 %376, 56
  br i1 %396, label %441, label %397

397:                                              ; preds = %392, %397
  %398 = phi %"class.sh::TIntermNode"** [ %435, %397 ], [ %394, %392 ]
  %399 = phi %"class.sh::TIntermNode"** [ %436, %397 ], [ %395, %392 ]
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -1
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %402 = bitcast %"class.sh::TIntermNode"** %401 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = bitcast %"class.sh::TIntermNode"** %400 to i64*
  store i64 %403, i64* %404, align 8
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -2
  %406 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %407 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = bitcast %"class.sh::TIntermNode"** %405 to i64*
  store i64 %408, i64* %409, align 8
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -3
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -3
  %412 = bitcast %"class.sh::TIntermNode"** %411 to i64*
  %413 = load i64, i64* %412, align 8
  %414 = bitcast %"class.sh::TIntermNode"** %410 to i64*
  store i64 %413, i64* %414, align 8
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -4
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -4
  %417 = bitcast %"class.sh::TIntermNode"** %416 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = bitcast %"class.sh::TIntermNode"** %415 to i64*
  store i64 %418, i64* %419, align 8
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -5
  %421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -5
  %422 = bitcast %"class.sh::TIntermNode"** %421 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = bitcast %"class.sh::TIntermNode"** %420 to i64*
  store i64 %423, i64* %424, align 8
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -6
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -6
  %427 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = bitcast %"class.sh::TIntermNode"** %425 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -7
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -7
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -8
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -8
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = icmp eq %"class.sh::TIntermNode"** %436, %268
  br i1 %440, label %441, label %397, !llvm.loop !19

441:                                              ; preds = %392, %397, %369, %259
  %442 = phi %"class.sh::TIntermNode"** [ %262, %259 ], [ %295, %369 ], [ %393, %392 ], [ %435, %397 ]
  %443 = ptrtoint %"class.sh::TIntermNode"** %442 to i64
  store i64 %443, i64* %235, align 8
  store i64 %267, i64* %234, align 8
  store i64 %264, i64* %244, align 8
  %444 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), %"class.sh::TVector"* nonnull %7, %"class.sh::TSymbolTable"* dereferenceable(1720) %3, i32 100) #4
  %445 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %446 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %445, i64 240) #4
  %447 = bitcast i8* %446 to %"class.sh::TIntermBinary"*
  %448 = bitcast i8* %16 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %447, i8 zeroext -118, %"class.sh::TIntermTyped"* %448, %"class.sh::TIntermTyped"* %444) #4
  %449 = bitcast i8* %446 to %"class.sh::TIntermNode"*
  %450 = call zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermNode"* %449, %"class.sh::TSymbolTable"* %3) #4
  %451 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %33, align 8
  %452 = icmp eq %"class.sh::TIntermNode"** %451, null
  br i1 %452, label %456, label %453

453:                                              ; preds = %441
  %454 = ptrtoint %"class.sh::TIntermNode"** %451 to i64
  %455 = bitcast %"class.sh::TIntermNode"*** %34 to i64*
  store i64 %454, i64* %455, align 8
  br label %456

456:                                              ; preds = %441, %453
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #4
  br label %457

457:                                              ; preds = %4, %456
  %458 = phi i1 [ %450, %456 ], [ true, %4 ]
  ret i1 %458
}

declare %"class.sh::TIntermSymbol"* @_ZN2sh14FindSymbolNodeEPNS_11TIntermNodeERKNS_15ImmutableStringE(%"class.sh::TIntermNode"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_PointSizeEv() local_unnamed_addr #1

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #1

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #1

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #1

declare void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
