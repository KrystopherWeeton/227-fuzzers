; ModuleID = '../../third_party/opus/src/silk/float/find_LPC_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/find_LPC_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }

@.str = private unnamed_addr constant [165 x i8] c"assertion failed: psEncC->indices.NLSFInterpCoef_Q2 == 4 || ( psEncC->useInterpolatedNLSFs && !psEncC->first_frame_after_reset && psEncC->nb_subfr == MAX_NB_SUBFR )\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/opus/src/silk/float/find_LPC_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_find_LPC_FLP(%struct.silk_encoder_state*, i16*, float*, float) local_unnamed_addr #0 {
  %5 = alloca [16 x float], align 16
  %6 = alloca [16 x i16], align 16
  %7 = alloca [16 x float], align 16
  %8 = alloca [384 x float], align 16
  %9 = bitcast [16 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 64, i1 false)
  %10 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %12 = bitcast [16 x float]* %7 to i8*
  %13 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 64, i1 false)
  %14 = bitcast [384 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 1536, i1 false)
  %15 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 22
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 35
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, %16
  %20 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 7
  store i8 4, i8* %20, align 1
  %21 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 0
  %22 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 20
  %23 = load i32, i32* %22, align 4
  %24 = call float @silk_burg_modified_FLP(float* nonnull %21, float* %2, float %3, i32 %19, i32 %23, i32 %18) #4
  %25 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 33
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %89, label %28

28:                                               ; preds = %4
  %29 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 41
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %89

32:                                               ; preds = %28
  %33 = load i32, i32* %22, align 4
  %34 = icmp eq i32 %33, 4
  br i1 %34, label %35, label %89

35:                                               ; preds = %32
  %36 = getelementptr inbounds [16 x float], [16 x float]* %7, i64 0, i64 0
  %37 = shl nsw i32 %19, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %2, i64 %38
  %40 = load i32, i32* %17, align 8
  %41 = call float @silk_burg_modified_FLP(float* nonnull %36, float* %39, float %3, i32 %19, i32 2, i32 %40) #4
  %42 = fsub float %24, %41
  %43 = load i32, i32* %17, align 8
  call void @silk_A2NLSF_FLP(i16* %1, float* nonnull %36, i32 %43) #4
  %44 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 6, i64 0
  %45 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 57
  %46 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 0
  %47 = sext i32 %19 to i64
  %48 = load i32, i32* %17, align 8
  call void @silk_interpolate(i16* nonnull %11, i16* %44, i16* %1, i32 3, i32 %48) #4
  %49 = load i32, i32* %17, align 8
  %50 = load i32, i32* %45, align 4
  call void @silk_NLSF2A_FLP(float* nonnull %36, i16* nonnull %11, i32 %49, i32 %50) #4
  %51 = load i32, i32* %17, align 8
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %46, float* nonnull %36, float* %2, i32 %37, i32 %51) #4
  %52 = load i32, i32* %17, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %53
  %55 = sub nsw i32 %19, %52
  %56 = call double @silk_energy_FLP(float* %54, i32 %55) #4
  %57 = load i32, i32* %17, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %58
  %60 = getelementptr inbounds float, float* %59, i64 %47
  %61 = sub nsw i32 %19, %57
  %62 = call double @silk_energy_FLP(float* %60, i32 %61) #4
  %63 = fadd double %56, %62
  %64 = fptrunc double %63 to float
  %65 = fcmp ogt float %42, %64
  br i1 %65, label %66, label %67

66:                                               ; preds = %35
  store i8 3, i8* %20, align 1
  br label %69

67:                                               ; preds = %35
  %68 = fcmp ogt float %64, 0x47EFFFFFE0000000
  br i1 %68, label %89, label %69

69:                                               ; preds = %67, %66
  %70 = phi float [ %64, %66 ], [ %42, %67 ]
  %71 = load i32, i32* %17, align 8
  call void @silk_interpolate(i16* nonnull %11, i16* %44, i16* %1, i32 2, i32 %71) #4
  %72 = load i32, i32* %17, align 8
  %73 = load i32, i32* %45, align 4
  call void @silk_NLSF2A_FLP(float* nonnull %36, i16* nonnull %11, i32 %72, i32 %73) #4
  %74 = load i32, i32* %17, align 8
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %46, float* nonnull %36, float* %2, i32 %37, i32 %74) #4
  %75 = load i32, i32* %17, align 8
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %76
  %78 = sub nsw i32 %19, %75
  %79 = call double @silk_energy_FLP(float* %77, i32 %78) #4
  %80 = load i32, i32* %17, align 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %81
  %83 = getelementptr inbounds float, float* %82, i64 %47
  %84 = sub nsw i32 %19, %80
  %85 = call double @silk_energy_FLP(float* %83, i32 %84) #4
  %86 = fadd double %79, %85
  %87 = fptrunc double %86 to float
  %88 = fcmp ogt float %70, %87
  br i1 %88, label %110, label %108

89:                                               ; preds = %134, %67, %108, %131, %28, %4, %32
  %90 = load i8, i8* %20, align 1
  %91 = icmp eq i8 %90, 4
  br i1 %91, label %92, label %96

92:                                               ; preds = %89
  %93 = load i32, i32* %17, align 8
  call void @silk_A2NLSF_FLP(i16* %1, float* nonnull %21, i32 %93) #4
  %94 = load i8, i8* %20, align 1
  %95 = icmp eq i8 %94, 4
  br i1 %95, label %107, label %96

96:                                               ; preds = %154, %89, %92
  %97 = load i32, i32* %25, align 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %106, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 41
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %99
  %104 = load i32, i32* %22, align 4
  %105 = icmp eq i32 %104, 4
  br i1 %105, label %107, label %106

106:                                              ; preds = %99, %96, %103
  call void @celt_fatal(i8* getelementptr inbounds ([165 x i8], [165 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 103) #5
  unreachable

107:                                              ; preds = %103, %92
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #4
  ret void

108:                                              ; preds = %69
  %109 = fcmp olt float %64, %87
  br i1 %109, label %89, label %111

110:                                              ; preds = %69
  store i8 2, i8* %20, align 1
  br label %111

111:                                              ; preds = %110, %108
  %112 = phi float [ %87, %110 ], [ %70, %108 ]
  %113 = load i32, i32* %17, align 8
  call void @silk_interpolate(i16* nonnull %11, i16* %44, i16* %1, i32 1, i32 %113) #4
  %114 = load i32, i32* %17, align 8
  %115 = load i32, i32* %45, align 4
  call void @silk_NLSF2A_FLP(float* nonnull %36, i16* nonnull %11, i32 %114, i32 %115) #4
  %116 = load i32, i32* %17, align 8
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %46, float* nonnull %36, float* %2, i32 %37, i32 %116) #4
  %117 = load i32, i32* %17, align 8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %118
  %120 = sub nsw i32 %19, %117
  %121 = call double @silk_energy_FLP(float* %119, i32 %120) #4
  %122 = load i32, i32* %17, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %123
  %125 = getelementptr inbounds float, float* %124, i64 %47
  %126 = sub nsw i32 %19, %122
  %127 = call double @silk_energy_FLP(float* %125, i32 %126) #4
  %128 = fadd double %121, %127
  %129 = fptrunc double %128 to float
  %130 = fcmp ogt float %112, %129
  br i1 %130, label %133, label %131

131:                                              ; preds = %111
  %132 = fcmp olt float %87, %129
  br i1 %132, label %89, label %134

133:                                              ; preds = %111
  store i8 1, i8* %20, align 1
  br label %134

134:                                              ; preds = %133, %131
  %135 = phi float [ %129, %133 ], [ %112, %131 ]
  %136 = load i32, i32* %17, align 8
  call void @silk_interpolate(i16* nonnull %11, i16* %44, i16* %1, i32 0, i32 %136) #4
  %137 = load i32, i32* %17, align 8
  %138 = load i32, i32* %45, align 4
  call void @silk_NLSF2A_FLP(float* nonnull %36, i16* nonnull %11, i32 %137, i32 %138) #4
  %139 = load i32, i32* %17, align 8
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %46, float* nonnull %36, float* %2, i32 %37, i32 %139) #4
  %140 = load i32, i32* %17, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %141
  %143 = sub nsw i32 %19, %140
  %144 = call double @silk_energy_FLP(float* %142, i32 %143) #4
  %145 = load i32, i32* %17, align 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [384 x float], [384 x float]* %8, i64 0, i64 %146
  %148 = getelementptr inbounds float, float* %147, i64 %47
  %149 = sub nsw i32 %19, %145
  %150 = call double @silk_energy_FLP(float* %148, i32 %149) #4
  %151 = fadd double %144, %150
  %152 = fptrunc double %151 to float
  %153 = fcmp ogt float %135, %152
  br i1 %153, label %154, label %89

154:                                              ; preds = %134
  store i8 0, i8* %20, align 1
  br label %96
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare float @silk_burg_modified_FLP(float*, float*, float, i32, i32, i32) local_unnamed_addr #2

declare void @silk_A2NLSF_FLP(i16*, float*, i32) local_unnamed_addr #2

declare void @silk_interpolate(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @silk_NLSF2A_FLP(float*, i16*, i32, i32) local_unnamed_addr #2

declare void @silk_LPC_analysis_filter_FLP(float*, float*, float*, i32, i32) local_unnamed_addr #2

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
