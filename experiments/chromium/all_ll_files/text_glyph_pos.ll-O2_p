; ModuleID = '../../third_party/pdfium/core/fxge/text_glyph_pos.cpp'
source_filename = "../../third_party/pdfium/core/fxge/text_glyph_pos.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.TextGlyphPos = type { %"class.fxcrt::UnownedPtr", %class.CFX_PTemplate, %class.CFX_PTemplate.1 }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_GlyphBitmap* }
%class.CFX_GlyphBitmap = type { i32, i32, %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%class.CFX_PTemplate = type { i32, i32 }
%class.CFX_PTemplate.1 = type { float, float }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %class.CFX_PTemplate }

@_ZN12TextGlyphPosC1Ev = hidden unnamed_addr alias void (%class.TextGlyphPos*), void (%class.TextGlyphPos*)* @_ZN12TextGlyphPosC2Ev
@_ZN12TextGlyphPosC1ERKS_ = hidden unnamed_addr alias void (%class.TextGlyphPos*, %class.TextGlyphPos*), void (%class.TextGlyphPos*, %class.TextGlyphPos*)* @_ZN12TextGlyphPosC2ERKS_
@_ZN12TextGlyphPosD1Ev = hidden unnamed_addr alias void (%class.TextGlyphPos*), void (%class.TextGlyphPos*)* @_ZN12TextGlyphPosD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12TextGlyphPosC2Ev(%class.TextGlyphPos* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.TextGlyphPos* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12TextGlyphPosC2ERKS_(%class.TextGlyphPos* nocapture, %class.TextGlyphPos* nocapture readonly dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = bitcast %class.TextGlyphPos* %1 to i64*
  %4 = bitcast %class.TextGlyphPos* %0 to i64*
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %0, i64 0, i32 1, i32 1
  %10 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %0, i64 0, i32 2
  %13 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 2
  %14 = bitcast %class.CFX_PTemplate.1* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %class.CFX_PTemplate.1* %12 to i32*
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 2, i32 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = bitcast float* %17 to i32*
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12TextGlyphPosD2Ev(%class.TextGlyphPos* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12TextGlyphPos9GetOriginERK13CFX_PTemplateIiE(%"class.pdfium::Optional"* noalias nocapture sret, %class.TextGlyphPos* nocapture readonly, %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 0, i32 0
  %7 = load %class.CFX_GlyphBitmap*, %class.CFX_GlyphBitmap** %6, align 8
  %8 = getelementptr inbounds %class.CFX_GlyphBitmap, %class.CFX_GlyphBitmap* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %5, i32 %9) #6
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %19, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = extractvalue { i32, i1 } %10, 0
  %16 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %15, i32 %14) #6
  %17 = extractvalue { i32, i1 } %16, 1
  %18 = extractvalue { i32, i1 } %16, 0
  br i1 %17, label %19, label %21

19:                                               ; preds = %12, %3
  %20 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 12, i1 false)
  br label %43

21:                                               ; preds = %12
  %22 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.CFX_GlyphBitmap, %class.CFX_GlyphBitmap* %7, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 %25) #6
  %27 = extractvalue { i32, i1 } %26, 1
  br i1 %27, label %28, label %30

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %37

30:                                               ; preds = %21
  %31 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = extractvalue { i32, i1 } %26, 0
  %34 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %33, i32 %32) #6
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %35, label %37, label %39

37:                                               ; preds = %30, %28
  %38 = phi i8* [ %29, %28 ], [ %36, %30 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 12, i1 false)
  br label %43

39:                                               ; preds = %30
  %40 = extractvalue { i32, i1 } %34, 0
  store i8 1, i8* %36, align 4
  %41 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %18, i32* %41, align 4
  %42 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 %40, i32* %42, align 4
  br label %43

43:                                               ; preds = %37, %39, %19
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
