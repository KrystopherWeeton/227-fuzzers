; ModuleID = '../../third_party/abseil-cpp/absl/time/duration.cc'
source_filename = "../../third_party/abseil-cpp/absl/time/duration.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.absl::(anonymous namespace)::DisplayUnit" = type { %"class.absl::string_view", i32, double }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::uint128" = type { i64, i64 }
%"class.absl::Duration" = type <{ i64, i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [24 x i8] c"-2562047788015215h30m8s\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@_ZN4absl12_GLOBAL__N_112kDisplayNanoE = internal unnamed_addr constant %"struct.absl::(anonymous namespace)::DisplayUnit" { %"class.absl::string_view" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i64 2 }, i32 2, double 1.000000e+02 }, align 8
@_ZN4absl12_GLOBAL__N_113kDisplayMicroE = internal unnamed_addr constant %"struct.absl::(anonymous namespace)::DisplayUnit" { %"class.absl::string_view" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i64 2 }, i32 5, double 1.000000e+05 }, align 8
@_ZN4absl12_GLOBAL__N_113kDisplayMilliE = internal unnamed_addr constant %"struct.absl::(anonymous namespace)::DisplayUnit" { %"class.absl::string_view" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i64 2 }, i32 8, double 1.000000e+08 }, align 8
@_ZN4absl12_GLOBAL__N_111kDisplaySecE = internal unnamed_addr constant %"struct.absl::(anonymous namespace)::DisplayUnit" { %"class.absl::string_view" { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i64 1 }, i32 11, double 1.000000e+11 }, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"us\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@_ZN4absl11kuint128maxE = external local_unnamed_addr global %"class.absl::uint128", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext, i64, i32, i64, i32, %"class.absl::Duration"* nocapture) local_unnamed_addr #0 {
  %7 = icmp eq i32 %2, -1
  %8 = icmp eq i32 %4, -1
  %9 = or i1 %7, %8
  br i1 %9, label %94, label %10

10:                                               ; preds = %6
  %11 = icmp eq i64 %3, 0
  %12 = icmp eq i32 %4, 4
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = icmp ult i64 %1, 9223372032
  br i1 %15, label %16, label %96

16:                                               ; preds = %14
  %17 = mul nsw i64 %1, 1000000000
  %18 = lshr i32 %2, 2
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %17, %19
  %21 = and i32 %2, 3
  %22 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %21, i32* %23, align 8
  br label %222

24:                                               ; preds = %10
  %25 = icmp eq i32 %4, 400
  %26 = and i1 %11, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %24
  %28 = icmp ult i64 %1, 922337203285
  br i1 %28, label %29, label %96

29:                                               ; preds = %27
  %30 = mul nsw i64 %1, 10000000
  %31 = udiv i32 %2, 400
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %30, %32
  %34 = urem i32 %2, 400
  %35 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 0, i64* %35, align 8
  %36 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8
  br label %222

37:                                               ; preds = %24
  %38 = icmp eq i32 %4, 4000
  %39 = and i1 %11, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %37
  %41 = icmp ult i64 %1, 9223372032854
  br i1 %41, label %42, label %96

42:                                               ; preds = %40
  %43 = mul nsw i64 %1, 1000000
  %44 = udiv i32 %2, 4000
  %45 = zext i32 %44 to i64
  %46 = add nuw nsw i64 %43, %45
  %47 = urem i32 %2, 4000
  %48 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %47, i32* %49, align 8
  br label %222

50:                                               ; preds = %37
  %51 = icmp eq i32 %4, 4000000
  %52 = and i1 %11, %51
  br i1 %52, label %53, label %63

53:                                               ; preds = %50
  %54 = icmp ult i64 %1, 9223372032854775
  br i1 %54, label %55, label %96

55:                                               ; preds = %53
  %56 = mul nsw i64 %1, 1000
  %57 = udiv i32 %2, 4000000
  %58 = zext i32 %57 to i64
  %59 = add nuw nsw i64 %56, %58
  %60 = urem i32 %2, 4000000
  %61 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 0, i64* %61, align 8
  %62 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %60, i32* %62, align 8
  br label %222

63:                                               ; preds = %50
  %64 = icmp sgt i64 %3, 0
  %65 = icmp eq i32 %4, 0
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %94

67:                                               ; preds = %63
  %68 = icmp sgt i64 %1, -1
  br i1 %68, label %69, label %79

69:                                               ; preds = %67
  %70 = icmp eq i64 %3, 1
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 0, i64* %72, align 8
  %73 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %2, i32* %73, align 8
  br label %222

74:                                               ; preds = %69
  %75 = udiv i64 %1, %3
  %76 = urem i64 %1, %3
  %77 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 %76, i64* %77, align 8
  %78 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %2, i32* %78, align 8
  br label %222

79:                                               ; preds = %67
  %80 = icmp ne i32 %2, 0
  %81 = zext i1 %80 to i64
  %82 = add nsw i64 %81, %1
  %83 = sdiv i64 %82, %3
  %84 = srem i64 %82, %3
  %85 = icmp sgt i64 %84, 0
  %86 = zext i1 %85 to i64
  %87 = add nsw i64 %83, %86
  %88 = sub nsw i64 0, %3
  %89 = select i1 %85, i64 %88, i64 0
  %90 = sub nsw i64 %84, %81
  %91 = add i64 %90, %89
  %92 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %2, i32* %93, align 8
  br label %222

94:                                               ; preds = %63, %6
  %95 = icmp eq i64 %1, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %14, %27, %40, %53, %94
  %97 = icmp slt i64 %1, 0
  br label %98

98:                                               ; preds = %94, %96
  %99 = phi i1 [ %97, %96 ], [ false, %94 ]
  %100 = icmp eq i64 %3, 0
  %101 = icmp slt i64 %3, 0
  %102 = xor i1 %101, %99
  %103 = icmp eq i32 %4, 0
  %104 = and i1 %100, %103
  %105 = or i1 %7, %104
  br i1 %105, label %106, label %111

106:                                              ; preds = %98
  %107 = select i1 %99, i64 -9223372036854775808, i64 9223372036854775807
  %108 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 -1, i32* %109, align 8
  %110 = select i1 %102, i64 -9223372036854775808, i64 9223372036854775807
  br label %222

111:                                              ; preds = %98
  br i1 %8, label %112, label %115

112:                                              ; preds = %111
  %113 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 %1, i64* %113, align 8
  %114 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %2, i32* %114, align 8
  br label %222

115:                                              ; preds = %111
  %116 = icmp slt i64 %1, 0
  %117 = sub i32 -294967296, %2
  %118 = select i1 %116, i32 %117, i32 %2
  %119 = ashr i64 %1, 63
  %120 = xor i64 %119, %1
  %121 = zext i64 %120 to i128
  %122 = mul nuw nsw i128 %121, 4000000000
  %123 = trunc i128 %122 to i64
  %124 = lshr i128 %122, 64
  %125 = trunc i128 %124 to i64
  %126 = zext i32 %118 to i64
  %127 = add i64 %123, %126
  %128 = icmp ult i64 %127, %123
  %129 = zext i1 %128 to i64
  %130 = add nuw nsw i64 %129, %125
  %131 = sub i32 -294967296, %4
  %132 = select i1 %101, i32 %131, i32 %4
  %133 = ashr i64 %3, 63
  %134 = xor i64 %133, %3
  %135 = zext i64 %134 to i128
  %136 = mul nuw nsw i128 %135, 4000000000
  %137 = trunc i128 %136 to i64
  %138 = lshr i128 %136, 64
  %139 = trunc i128 %138 to i64
  %140 = zext i32 %132 to i64
  %141 = add i64 %137, %140
  %142 = icmp ult i64 %141, %137
  %143 = zext i1 %142 to i64
  %144 = add nuw nsw i64 %143, %139
  %145 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %127, i64 %130, i64 %141, i64 %144) #11
  %146 = extractvalue { i64, i64 } %145, 0
  %147 = extractvalue { i64, i64 } %145, 1
  br i1 %0, label %148, label %157

148:                                              ; preds = %115
  %149 = zext i64 %147 to i128
  %150 = shl nuw i128 %149, 64
  %151 = zext i64 %146 to i128
  %152 = or i128 %150, %151
  %153 = icmp ugt i128 %152, 9223372036854775807
  %154 = select i1 %102, i64 -9223372036854775808, i64 9223372036854775807
  %155 = select i1 %153, i64 %154, i64 %146
  %156 = select i1 %153, i64 0, i64 %147
  br label %157

157:                                              ; preds = %148, %115
  %158 = phi i64 [ %146, %115 ], [ %155, %148 ]
  %159 = phi i64 [ %147, %115 ], [ %156, %148 ]
  %160 = zext i64 %159 to i128
  %161 = shl nuw i128 %160, 64
  %162 = zext i64 %158 to i128
  %163 = or i128 %161, %162
  %164 = zext i64 %144 to i128
  %165 = shl nuw nsw i128 %164, 64
  %166 = zext i64 %141 to i128
  %167 = or i128 %165, %166
  %168 = mul i128 %163, %167
  %169 = trunc i128 %168 to i64
  %170 = lshr i128 %168, 64
  %171 = trunc i128 %170 to i64
  %172 = sub i64 %130, %171
  %173 = sub i64 %127, %169
  %174 = icmp ult i64 %127, %169
  %175 = zext i1 %174 to i64
  %176 = sub i64 %172, %175
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %180

178:                                              ; preds = %157
  %179 = udiv i64 %173, 4000000000
  br label %196

180:                                              ; preds = %157
  %181 = icmp ugt i64 %176, 1999999999
  br i1 %181, label %182, label %193

182:                                              ; preds = %180
  %183 = icmp eq i64 %176, 2000000000
  %184 = and i1 %99, %183
  %185 = icmp eq i64 %173, 0
  %186 = and i1 %185, %184
  %187 = xor i1 %99, true
  %188 = or i1 %186, %187
  %189 = select i1 %186, i64 -9223372036854775808, i64 9223372036854775807
  %190 = select i1 %188, i64 %189, i64 -9223372036854775808
  %191 = xor i1 %186, true
  %192 = sext i1 %191 to i32
  br label %207

193:                                              ; preds = %180
  %194 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %173, i64 %176, i64 4000000000, i64 0) #11
  %195 = extractvalue { i64, i64 } %194, 0
  br label %196

196:                                              ; preds = %193, %178
  %197 = phi i64 [ %179, %178 ], [ %195, %193 ]
  %198 = mul i64 %197, -4000000000
  %199 = add i64 %198, %173
  %200 = trunc i64 %199 to i32
  br i1 %99, label %201, label %207

201:                                              ; preds = %196
  %202 = sub nsw i64 0, %197
  %203 = icmp eq i32 %200, 0
  br i1 %203, label %207, label %204

204:                                              ; preds = %201
  %205 = xor i64 %197, -1
  %206 = sub i32 -294967296, %200
  br label %207

207:                                              ; preds = %182, %196, %201, %204
  %208 = phi i64 [ %190, %182 ], [ %205, %204 ], [ %202, %201 ], [ %197, %196 ]
  %209 = phi i32 [ %192, %182 ], [ %206, %204 ], [ 0, %201 ], [ %200, %196 ]
  %210 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 0
  store i64 %208, i64* %210, align 8
  %211 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %5, i64 0, i32 1
  store i32 %209, i32* %211, align 8
  %212 = xor i1 %102, true
  %213 = or i64 %159, %158
  %214 = icmp eq i64 %213, 0
  %215 = or i1 %214, %212
  br i1 %215, label %216, label %218

216:                                              ; preds = %207
  %217 = and i64 %158, 9223372036854775807
  br label %222

218:                                              ; preds = %207
  %219 = add i64 %158, 9223372036854775807
  %220 = or i64 %219, -9223372036854775808
  %221 = xor i64 %220, 9223372036854775807
  br label %222

222:                                              ; preds = %79, %74, %71, %55, %42, %29, %16, %106, %112, %218, %216
  %223 = phi i64 [ %110, %106 ], [ 0, %112 ], [ %217, %216 ], [ %221, %218 ], [ %87, %79 ], [ %75, %74 ], [ %1, %71 ], [ %59, %55 ], [ %46, %42 ], [ %33, %29 ], [ %20, %16 ]
  ret i64 %223
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationpLES0_(%"class.absl::Duration"* returned, i64, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %32, label %8

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, -1
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  store i64 %1, i64* %4, align 8
  store i32 -1, i32* %5, align 8
  br label %32

11:                                               ; preds = %8
  %12 = load i64, i64* %4, align 8
  %13 = add i64 %12, %1
  store i64 %13, i64* %4, align 8
  %14 = zext i32 %6 to i64
  %15 = zext i32 %2 to i64
  %16 = sub nsw i64 4000000000, %15
  %17 = icmp sgt i64 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %11
  %19 = add i64 %13, 1
  store i64 %19, i64* %4, align 8
  %20 = add i32 %6, 294967296
  store i32 %20, i32* %5, align 8
  br label %21

21:                                               ; preds = %11, %18
  %22 = phi i64 [ %13, %11 ], [ %19, %18 ]
  %23 = phi i32 [ %6, %11 ], [ %20, %18 ]
  %24 = add i32 %23, %2
  store i32 %24, i32* %5, align 8
  %25 = icmp slt i64 %1, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = icmp sgt i64 %22, %12
  br i1 %27, label %30, label %32

28:                                               ; preds = %21
  %29 = icmp slt i64 %22, %12
  br i1 %29, label %30, label %32

30:                                               ; preds = %26, %28
  %31 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %26 ]
  store i64 %31, i64* %4, align 8
  store i32 -1, i32* %5, align 8
  br label %32

32:                                               ; preds = %30, %28, %26, %3, %10
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmIES0_(%"class.absl::Duration"* returned, i64, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %31, label %8

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, -1
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  store i64 %12, i64* %4, align 8
  store i32 -1, i32* %5, align 8
  br label %31

13:                                               ; preds = %8
  %14 = load i64, i64* %4, align 8
  %15 = sub i64 %14, %1
  store i64 %15, i64* %4, align 8
  %16 = icmp ult i32 %6, %2
  br i1 %16, label %17, label %20

17:                                               ; preds = %13
  %18 = add i64 %15, -1
  store i64 %18, i64* %4, align 8
  %19 = add i32 %6, -294967296
  store i32 %19, i32* %5, align 8
  br label %20

20:                                               ; preds = %17, %13
  %21 = phi i64 [ %18, %17 ], [ %15, %13 ]
  %22 = phi i32 [ %19, %17 ], [ %6, %13 ]
  %23 = sub i32 %22, %2
  store i32 %23, i32* %5, align 8
  %24 = icmp slt i64 %1, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = icmp slt i64 %21, %14
  br i1 %26, label %29, label %31

27:                                               ; preds = %20
  %28 = icmp sgt i64 %21, %14
  br i1 %28, label %29, label %31

29:                                               ; preds = %27, %25
  %30 = phi i64 [ 9223372036854775807, %25 ], [ -9223372036854775808, %27 ]
  store i64 %30, i64* %4, align 8
  store i32 -1, i32* %5, align 8
  br label %31

31:                                               ; preds = %29, %27, %25, %3, %10
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmLEl(%"class.absl::Duration"* returned, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %15

7:                                                ; preds = %2
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i32
  %10 = load i64, i64* %3, align 8
  %11 = lshr i64 %10, 63
  %12 = trunc i64 %11 to i32
  %13 = icmp eq i32 %9, %12
  %14 = select i1 %13, i64 9223372036854775807, i64 -9223372036854775808
  br label %134

15:                                               ; preds = %2
  %16 = load i64, i64* %3, align 8
  %17 = icmp slt i64 %16, 0
  %18 = sub i32 -294967296, %5
  %19 = select i1 %17, i32 %18, i32 %5
  %20 = ashr i64 %16, 63
  %21 = xor i64 %20, %16
  %22 = zext i64 %21 to i128
  %23 = mul nuw nsw i128 %22, 4000000000
  %24 = trunc i128 %23 to i64
  %25 = lshr i128 %23, 64
  %26 = trunc i128 %25 to i64
  %27 = zext i32 %19 to i64
  %28 = add i64 %24, %27
  %29 = icmp ult i64 %28, %24
  %30 = zext i1 %29 to i64
  %31 = add nuw nsw i64 %30, %26
  %32 = lshr i64 %1, 63
  %33 = ashr i64 %1, 63
  %34 = xor i64 %33, %1
  %35 = add i64 %34, %32
  %36 = icmp ult i64 %35, %32
  %37 = zext i1 %36 to i64
  %38 = icmp eq i64 %31, 0
  br i1 %38, label %39, label %54

39:                                               ; preds = %15
  %40 = or i64 %28, %35
  %41 = icmp ult i64 %40, 4294967296
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = mul i64 %28, %35
  br label %84

44:                                               ; preds = %39
  %45 = zext i64 %28 to i128
  %46 = zext i1 %36 to i128
  %47 = shl nuw nsw i128 %46, 64
  %48 = zext i64 %35 to i128
  %49 = or i128 %47, %48
  %50 = mul i128 %49, %45
  %51 = trunc i128 %50 to i64
  %52 = lshr i128 %50, 64
  %53 = trunc i128 %52 to i64
  br label %94

54:                                               ; preds = %15
  %55 = or i64 %35, %37
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %84, label %57

57:                                               ; preds = %54
  %58 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZN4absl11kuint128maxE, i64 0, i32 0), align 16
  %59 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZN4absl11kuint128maxE, i64 0, i32 1), align 8
  %60 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %58, i64 %59, i64 %35, i64 %37) #11
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = extractvalue { i64, i64 } %60, 1
  %63 = zext i64 %62 to i128
  %64 = shl nuw i128 %63, 64
  %65 = zext i64 %61 to i128
  %66 = or i128 %64, %65
  %67 = zext i64 %31 to i128
  %68 = shl nuw nsw i128 %67, 64
  %69 = zext i64 %28 to i128
  %70 = or i128 %68, %69
  %71 = icmp ult i128 %66, %70
  br i1 %71, label %72, label %75

72:                                               ; preds = %57
  %73 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZN4absl11kuint128maxE, i64 0, i32 0), align 16
  %74 = load i64, i64* getelementptr inbounds (%"class.absl::uint128", %"class.absl::uint128"* @_ZN4absl11kuint128maxE, i64 0, i32 1), align 8
  br label %94

75:                                               ; preds = %57
  %76 = zext i1 %36 to i128
  %77 = shl nuw nsw i128 %76, 64
  %78 = zext i64 %35 to i128
  %79 = or i128 %77, %78
  %80 = mul i128 %70, %79
  %81 = trunc i128 %80 to i64
  %82 = lshr i128 %80, 64
  %83 = trunc i128 %82 to i64
  br label %94

84:                                               ; preds = %54, %42
  %85 = phi i64 [ 0, %54 ], [ %43, %42 ]
  %86 = lshr i64 %16, 63
  %87 = trunc i64 %86 to i32
  %88 = trunc i64 %32 to i32
  %89 = icmp eq i32 %87, %88
  %90 = udiv i64 %85, 4000000000
  %91 = mul i64 %90, -4000000000
  %92 = add i64 %91, %85
  %93 = trunc i64 %92 to i32
  br i1 %89, label %134, label %126

94:                                               ; preds = %75, %72, %44
  %95 = phi i64 [ %51, %44 ], [ %73, %72 ], [ %81, %75 ]
  %96 = phi i64 [ %53, %44 ], [ %74, %72 ], [ %83, %75 ]
  %97 = lshr i64 %16, 63
  %98 = trunc i64 %97 to i32
  %99 = trunc i64 %32 to i32
  %100 = icmp ne i32 %98, %99
  %101 = icmp eq i64 %96, 0
  br i1 %101, label %102, label %107

102:                                              ; preds = %94
  %103 = udiv i64 %95, 4000000000
  %104 = mul i64 %103, -4000000000
  %105 = add i64 %104, %95
  %106 = trunc i64 %105 to i32
  br i1 %100, label %126, label %134

107:                                              ; preds = %94
  %108 = icmp ugt i64 %96, 1999999999
  br i1 %108, label %109, label %120

109:                                              ; preds = %107
  %110 = icmp eq i64 %96, 2000000000
  %111 = and i1 %100, %110
  %112 = icmp eq i64 %95, 0
  %113 = and i1 %112, %111
  %114 = xor i1 %100, true
  %115 = or i1 %113, %114
  %116 = select i1 %113, i64 -9223372036854775808, i64 9223372036854775807
  %117 = select i1 %115, i64 %116, i64 -9223372036854775808
  %118 = xor i1 %113, true
  %119 = sext i1 %118 to i32
  br label %134

120:                                              ; preds = %107
  %121 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %95, i64 %96, i64 4000000000, i64 0) #11
  %122 = extractvalue { i64, i64 } %121, 0
  %123 = mul i64 %122, -4000000000
  %124 = add i64 %123, %95
  %125 = trunc i64 %124 to i32
  br i1 %100, label %126, label %134

126:                                              ; preds = %120, %102, %84
  %127 = phi i32 [ %106, %102 ], [ %125, %120 ], [ %93, %84 ]
  %128 = phi i64 [ %103, %102 ], [ %122, %120 ], [ %90, %84 ]
  %129 = sub nsw i64 0, %128
  %130 = icmp eq i32 %127, 0
  br i1 %130, label %134, label %131

131:                                              ; preds = %126
  %132 = xor i64 %128, -1
  %133 = sub i32 -294967296, %127
  br label %134

134:                                              ; preds = %7, %131, %126, %120, %109, %102, %84
  %135 = phi i64 [ %14, %7 ], [ %117, %109 ], [ %132, %131 ], [ %129, %126 ], [ %122, %120 ], [ %103, %102 ], [ %90, %84 ]
  %136 = phi i32 [ -1, %7 ], [ %119, %109 ], [ %133, %131 ], [ 0, %126 ], [ %125, %120 ], [ %106, %102 ], [ %93, %84 ]
  store i64 %135, i64* %3, align 8
  store i32 %136, i32* %4, align 8
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmLEd(%"class.absl::Duration"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = fcmp ord double %1, 0.000000e+00
  %11 = fcmp une double %1, 0x7FF0000000000000
  %12 = and i1 %10, %11
  %13 = fcmp une double %1, 0xFFF0000000000000
  %14 = and i1 %13, %12
  br i1 %14, label %24, label %15

15:                                               ; preds = %9, %2
  %16 = bitcast double %1 to i64
  %17 = lshr i64 %16, 63
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %5, align 8
  %20 = lshr i64 %19, 63
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %18, %21
  %23 = select i1 %22, i64 9223372036854775807, i64 -9223372036854775808
  br label %71

24:                                               ; preds = %9
  %25 = load i64, i64* %5, align 8
  %26 = sitofp i64 %25 to double
  %27 = fmul double %26, %1
  %28 = uitofp i32 %7 to double
  %29 = fmul double %28, %1
  %30 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #11
  store double 0.000000e+00, double* %3, align 8
  %31 = call double @modf(double %27, double* nonnull %3) #11
  %32 = fdiv double %29, 4.000000e+09
  %33 = fadd double %32, %31
  %34 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #11
  store double 0.000000e+00, double* %4, align 8
  %35 = call double @modf(double %33, double* nonnull %4) #11
  %36 = fmul double %35, 4.000000e+09
  %37 = fcmp olt double %36, 0.000000e+00
  %38 = fadd double %36, -5.000000e-01
  %39 = tail call double @llvm.ceil.f64(double %38) #11
  %40 = fadd double %36, 5.000000e-01
  %41 = tail call double @llvm.floor.f64(double %40) #11
  %42 = select i1 %37, double %39, double %41
  %43 = fptosi double %42 to i64
  %44 = load double, double* %3, align 8
  %45 = load double, double* %4, align 8
  %46 = fadd double %44, %45
  %47 = fcmp ult double %46, 0x43E0000000000000
  br i1 %47, label %48, label %68

48:                                               ; preds = %24
  %49 = fcmp ugt double %46, 0xC3E0000000000000
  br i1 %49, label %50, label %68

50:                                               ; preds = %48
  %51 = fptosi double %46 to i64
  %52 = sitofp i64 %51 to double
  %53 = sdiv i64 %43, 4000000000
  %54 = srem i64 %43, 4000000000
  %55 = sitofp i64 %53 to double
  %56 = fadd double %52, %55
  %57 = fcmp ult double %56, 0x43E0000000000000
  br i1 %57, label %58, label %68

58:                                               ; preds = %50
  %59 = fcmp ugt double %56, 0xC3E0000000000000
  br i1 %59, label %60, label %68

60:                                               ; preds = %58
  %61 = fptosi double %56 to i64
  %62 = icmp slt i64 %54, 0
  %63 = add nsw i64 %54, 4000000000
  %64 = select i1 %62, i64 %63, i64 %54
  %65 = ashr i64 %54, 63
  %66 = add nsw i64 %65, %61
  %67 = trunc i64 %64 to i32
  br label %68

68:                                               ; preds = %24, %48, %50, %58, %60
  %69 = phi i64 [ -9223372036854775808, %48 ], [ 9223372036854775807, %24 ], [ %66, %60 ], [ -9223372036854775808, %58 ], [ 9223372036854775807, %50 ]
  %70 = phi i32 [ -1, %48 ], [ -1, %24 ], [ %67, %60 ], [ -1, %58 ], [ -1, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #11
  br label %71

71:                                               ; preds = %15, %68
  %72 = phi i64 [ %69, %68 ], [ %23, %15 ]
  %73 = phi i32 [ %70, %68 ], [ -1, %15 ]
  store i64 %72, i64* %5, align 8
  store i32 %73, i32* %6, align 8
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationdVEl(%"class.absl::Duration"* returned, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, -1
  %7 = icmp eq i64 %1, 0
  %8 = or i1 %7, %6
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = lshr i64 %1, 63
  %11 = trunc i64 %10 to i32
  %12 = load i64, i64* %3, align 8
  %13 = lshr i64 %12, 63
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %11, %14
  %16 = select i1 %15, i64 9223372036854775807, i64 -9223372036854775808
  br label %77

17:                                               ; preds = %2
  %18 = load i64, i64* %3, align 8
  %19 = icmp slt i64 %18, 0
  %20 = sub i32 -294967296, %5
  %21 = select i1 %19, i32 %20, i32 %5
  %22 = ashr i64 %18, 63
  %23 = xor i64 %22, %18
  %24 = zext i64 %23 to i128
  %25 = mul nuw nsw i128 %24, 4000000000
  %26 = trunc i128 %25 to i64
  %27 = lshr i128 %25, 64
  %28 = trunc i128 %27 to i64
  %29 = zext i32 %21 to i64
  %30 = add i64 %26, %29
  %31 = icmp ult i64 %30, %26
  %32 = zext i1 %31 to i64
  %33 = add nuw nsw i64 %32, %28
  %34 = lshr i64 %1, 63
  %35 = ashr i64 %1, 63
  %36 = xor i64 %35, %1
  %37 = add i64 %36, %34
  %38 = icmp ult i64 %37, %34
  %39 = zext i1 %38 to i64
  %40 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %30, i64 %33, i64 %37, i64 %39) #11
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = extractvalue { i64, i64 } %40, 1
  %43 = lshr i64 %18, 63
  %44 = trunc i64 %43 to i32
  %45 = trunc i64 %34 to i32
  %46 = icmp ne i32 %44, %45
  %47 = icmp eq i64 %42, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %17
  %49 = udiv i64 %41, 4000000000
  br label %66

50:                                               ; preds = %17
  %51 = icmp ugt i64 %42, 1999999999
  br i1 %51, label %52, label %63

52:                                               ; preds = %50
  %53 = icmp eq i64 %42, 2000000000
  %54 = and i1 %46, %53
  %55 = icmp eq i64 %41, 0
  %56 = and i1 %55, %54
  %57 = xor i1 %46, true
  %58 = or i1 %56, %57
  %59 = select i1 %56, i64 -9223372036854775808, i64 9223372036854775807
  %60 = select i1 %58, i64 %59, i64 -9223372036854775808
  %61 = xor i1 %56, true
  %62 = sext i1 %61 to i32
  br label %77

63:                                               ; preds = %50
  %64 = tail call { i64, i64 } @_ZN4absldvENS_7uint128ES0_(i64 %41, i64 %42, i64 4000000000, i64 0) #11
  %65 = extractvalue { i64, i64 } %64, 0
  br label %66

66:                                               ; preds = %63, %48
  %67 = phi i64 [ %49, %48 ], [ %65, %63 ]
  %68 = mul i64 %67, -4000000000
  %69 = add i64 %68, %41
  %70 = trunc i64 %69 to i32
  br i1 %46, label %71, label %77

71:                                               ; preds = %66
  %72 = sub nsw i64 0, %67
  %73 = icmp eq i32 %70, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %71
  %75 = xor i64 %67, -1
  %76 = sub i32 -294967296, %70
  br label %77

77:                                               ; preds = %9, %74, %71, %66, %52
  %78 = phi i64 [ %16, %9 ], [ %60, %52 ], [ %75, %74 ], [ %72, %71 ], [ %67, %66 ]
  %79 = phi i32 [ -1, %9 ], [ %62, %52 ], [ %76, %74 ], [ 0, %71 ], [ %70, %66 ]
  store i64 %78, i64* %3, align 8
  store i32 %79, i32* %4, align 8
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationdVEd(%"class.absl::Duration"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, -1
  %9 = fcmp one double %1, 0.000000e+00
  %10 = and i1 %9, %8
  br i1 %10, label %20, label %11

11:                                               ; preds = %2
  %12 = bitcast double %1 to i64
  %13 = lshr i64 %12, 63
  %14 = trunc i64 %13 to i32
  %15 = load i64, i64* %5, align 8
  %16 = lshr i64 %15, 63
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %14, %17
  %19 = select i1 %18, i64 9223372036854775807, i64 -9223372036854775808
  br label %67

20:                                               ; preds = %2
  %21 = load i64, i64* %5, align 8
  %22 = sitofp i64 %21 to double
  %23 = fdiv double %22, %1
  %24 = uitofp i32 %7 to double
  %25 = fdiv double %24, %1
  %26 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #11
  store double 0.000000e+00, double* %3, align 8
  %27 = call double @modf(double %23, double* nonnull %3) #11
  %28 = fdiv double %25, 4.000000e+09
  %29 = fadd double %28, %27
  %30 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #11
  store double 0.000000e+00, double* %4, align 8
  %31 = call double @modf(double %29, double* nonnull %4) #11
  %32 = fmul double %31, 4.000000e+09
  %33 = fcmp olt double %32, 0.000000e+00
  %34 = fadd double %32, -5.000000e-01
  %35 = tail call double @llvm.ceil.f64(double %34) #11
  %36 = fadd double %32, 5.000000e-01
  %37 = tail call double @llvm.floor.f64(double %36) #11
  %38 = select i1 %33, double %35, double %37
  %39 = fptosi double %38 to i64
  %40 = load double, double* %3, align 8
  %41 = load double, double* %4, align 8
  %42 = fadd double %40, %41
  %43 = fcmp ult double %42, 0x43E0000000000000
  br i1 %43, label %44, label %64

44:                                               ; preds = %20
  %45 = fcmp ugt double %42, 0xC3E0000000000000
  br i1 %45, label %46, label %64

46:                                               ; preds = %44
  %47 = fptosi double %42 to i64
  %48 = sitofp i64 %47 to double
  %49 = sdiv i64 %39, 4000000000
  %50 = srem i64 %39, 4000000000
  %51 = sitofp i64 %49 to double
  %52 = fadd double %48, %51
  %53 = fcmp ult double %52, 0x43E0000000000000
  br i1 %53, label %54, label %64

54:                                               ; preds = %46
  %55 = fcmp ugt double %52, 0xC3E0000000000000
  br i1 %55, label %56, label %64

56:                                               ; preds = %54
  %57 = fptosi double %52 to i64
  %58 = icmp slt i64 %50, 0
  %59 = add nsw i64 %50, 4000000000
  %60 = select i1 %58, i64 %59, i64 %50
  %61 = ashr i64 %50, 63
  %62 = add nsw i64 %61, %57
  %63 = trunc i64 %60 to i32
  br label %64

64:                                               ; preds = %20, %44, %46, %54, %56
  %65 = phi i64 [ -9223372036854775808, %44 ], [ 9223372036854775807, %20 ], [ %62, %56 ], [ -9223372036854775808, %54 ], [ 9223372036854775807, %46 ]
  %66 = phi i32 [ -1, %44 ], [ -1, %20 ], [ %63, %56 ], [ -1, %54 ], [ -1, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #11
  br label %67

67:                                               ; preds = %11, %64
  %68 = phi i64 [ %65, %64 ], [ %19, %11 ]
  %69 = phi i32 [ %66, %64 ], [ -1, %11 ]
  store i64 %68, i64* %5, align 8
  store i32 %69, i32* %6, align 8
  ret %"class.absl::Duration"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationrMES0_(%"class.absl::Duration"* returned, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = tail call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext false, i64 %5, i32 %7, i64 %1, i32 %2, %"class.absl::Duration"* %0)
  ret %"class.absl::Duration"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl12FDivDurationENS_8DurationES0_(i64, i32, i64, i32) local_unnamed_addr #4 {
  %5 = icmp eq i32 %1, -1
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = icmp eq i64 %2, 0
  %8 = icmp eq i32 %3, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %14

10:                                               ; preds = %4, %6
  %11 = xor i64 %2, %0
  %12 = icmp slt i64 %11, 0
  %13 = select i1 %12, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %26

14:                                               ; preds = %6
  %15 = icmp eq i32 %3, -1
  br i1 %15, label %26, label %16

16:                                               ; preds = %14
  %17 = sitofp i64 %0 to double
  %18 = fmul double %17, 4.000000e+09
  %19 = uitofp i32 %1 to double
  %20 = fadd double %18, %19
  %21 = sitofp i64 %2 to double
  %22 = fmul double %21, 4.000000e+09
  %23 = uitofp i32 %3 to double
  %24 = fadd double %22, %23
  %25 = fdiv double %20, %24
  br label %26

26:                                               ; preds = %14, %16, %10
  %27 = phi double [ %13, %10 ], [ %25, %16 ], [ 0.000000e+00, %14 ]
  ret double %27
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN4absl5TruncENS_8DurationES0_(i64, i32, i64, i32) local_unnamed_addr #0 {
  %5 = alloca { i64, i32 }, align 8
  %6 = bitcast { i64, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6)
  %7 = bitcast { i64, i32 }* %5 to %"class.absl::Duration"*
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 1
  store i32 %1, i32* %9, align 8
  %10 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext false, i64 %0, i32 %1, i64 %2, i32 %3, %"class.absl::Duration"* nonnull %7) #11
  %11 = load i64, i64* %8, align 8
  %12 = load i32, i32* %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6)
  %13 = icmp eq i32 %1, -1
  br i1 %13, label %34, label %14

14:                                               ; preds = %4
  %15 = icmp eq i32 %12, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = icmp sgt i64 %11, -1
  %18 = select i1 %17, i64 -9223372036854775808, i64 9223372036854775807
  br label %34

19:                                               ; preds = %14
  %20 = sub i64 %0, %11
  %21 = icmp ugt i32 %12, %1
  %22 = add i32 %1, -294967296
  %23 = zext i1 %21 to i64
  %24 = sub i64 %20, %23
  %25 = select i1 %21, i32 %22, i32 %1
  %26 = sub i32 %25, %12
  %27 = icmp slt i64 %11, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  %29 = icmp slt i64 %24, %0
  br i1 %29, label %32, label %34

30:                                               ; preds = %19
  %31 = icmp sgt i64 %24, %0
  br i1 %31, label %32, label %34

32:                                               ; preds = %30, %28
  %33 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %30 ]
  br label %34

34:                                               ; preds = %4, %16, %28, %30, %32
  %35 = phi i32 [ -1, %4 ], [ -1, %16 ], [ -1, %32 ], [ %26, %28 ], [ %26, %30 ]
  %36 = phi i64 [ %0, %4 ], [ %18, %16 ], [ %33, %32 ], [ %24, %28 ], [ %24, %30 ]
  %37 = insertvalue { i64, i32 } undef, i64 %36, 0
  %38 = insertvalue { i64, i32 } %37, i32 %35, 1
  ret { i64, i32 } %38
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN4absl5FloorENS_8DurationES0_(i64, i32, i64, i32) local_unnamed_addr #0 {
  %5 = alloca { i64, i32 }, align 8
  %6 = bitcast { i64, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  %7 = bitcast { i64, i32 }* %5 to %"class.absl::Duration"*
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 1
  store i32 %1, i32* %9, align 8
  %10 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext false, i64 %0, i32 %1, i64 %2, i32 %3, %"class.absl::Duration"* nonnull %7) #11
  %11 = load i64, i64* %8, align 8
  %12 = load i32, i32* %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  %13 = icmp eq i32 %1, -1
  br i1 %13, label %40, label %14

14:                                               ; preds = %4
  %15 = icmp eq i32 %12, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = icmp sgt i64 %11, -1
  %18 = select i1 %17, i64 -9223372036854775808, i64 9223372036854775807
  br label %34

19:                                               ; preds = %14
  %20 = sub i64 %0, %11
  %21 = icmp ugt i32 %12, %1
  %22 = add i32 %1, -294967296
  %23 = zext i1 %21 to i64
  %24 = sub i64 %20, %23
  %25 = select i1 %21, i32 %22, i32 %1
  %26 = sub i32 %25, %12
  %27 = icmp slt i64 %11, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  %29 = icmp slt i64 %24, %0
  br i1 %29, label %32, label %34

30:                                               ; preds = %19
  %31 = icmp sgt i64 %24, %0
  br i1 %31, label %32, label %34

32:                                               ; preds = %30, %28
  %33 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %30 ]
  br label %34

34:                                               ; preds = %16, %28, %30, %32
  %35 = phi i32 [ -1, %16 ], [ -1, %32 ], [ %26, %28 ], [ %26, %30 ]
  %36 = phi i64 [ %18, %16 ], [ %33, %32 ], [ %24, %28 ], [ %24, %30 ]
  %37 = icmp eq i64 %36, %0
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = icmp sgt i64 %36, %0
  br i1 %39, label %49, label %88

40:                                               ; preds = %4, %34
  %41 = phi i32 [ %35, %34 ], [ -1, %4 ]
  %42 = icmp eq i64 %0, -9223372036854775808
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = add i32 %1, 1
  %45 = add i32 %41, 1
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %49, label %88

47:                                               ; preds = %40
  %48 = icmp ugt i32 %41, %1
  br i1 %48, label %49, label %88

49:                                               ; preds = %43, %38, %47
  %50 = phi i32 [ %35, %38 ], [ %41, %47 ], [ %41, %43 ]
  %51 = phi i64 [ %36, %38 ], [ %0, %47 ], [ -9223372036854775808, %43 ]
  %52 = icmp eq i64 %2, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %49
  %54 = icmp slt i64 %2, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %53
  switch i32 %3, label %61 [
    i32 0, label %56
    i32 -1, label %64
  ]

56:                                               ; preds = %55
  %57 = icmp eq i64 %2, -9223372036854775808
  %58 = sub nsw i64 0, %2
  %59 = select i1 %57, i64 9223372036854775807, i64 %58
  %60 = sext i1 %57 to i32
  br label %64

61:                                               ; preds = %55
  %62 = xor i64 %2, -1
  %63 = sub i32 -294967296, %3
  br label %64

64:                                               ; preds = %49, %53, %55, %56, %61
  %65 = phi i64 [ %2, %53 ], [ 0, %49 ], [ %62, %61 ], [ %59, %56 ], [ 9223372036854775807, %55 ]
  %66 = phi i32 [ %3, %53 ], [ %3, %49 ], [ %63, %61 ], [ %60, %56 ], [ %3, %55 ]
  %67 = icmp eq i32 %50, -1
  br i1 %67, label %88, label %68

68:                                               ; preds = %64
  %69 = icmp eq i32 %66, -1
  br i1 %69, label %70, label %73

70:                                               ; preds = %68
  %71 = icmp sgt i64 %65, -1
  %72 = select i1 %71, i64 -9223372036854775808, i64 9223372036854775807
  br label %88

73:                                               ; preds = %68
  %74 = sub i64 %51, %65
  %75 = icmp ult i32 %50, %66
  %76 = add i32 %50, -294967296
  %77 = zext i1 %75 to i64
  %78 = sub i64 %74, %77
  %79 = select i1 %75, i32 %76, i32 %50
  %80 = sub i32 %79, %66
  %81 = icmp slt i64 %65, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %73
  %83 = icmp slt i64 %78, %51
  br i1 %83, label %86, label %88

84:                                               ; preds = %73
  %85 = icmp sgt i64 %78, %51
  br i1 %85, label %86, label %88

86:                                               ; preds = %84, %82
  %87 = phi i64 [ 9223372036854775807, %82 ], [ -9223372036854775808, %84 ]
  br label %88

88:                                               ; preds = %43, %38, %86, %84, %82, %70, %64, %47
  %89 = phi i64 [ %0, %47 ], [ %51, %64 ], [ %72, %70 ], [ %87, %86 ], [ %78, %82 ], [ %78, %84 ], [ %36, %38 ], [ -9223372036854775808, %43 ]
  %90 = phi i32 [ %41, %47 ], [ -1, %64 ], [ -1, %70 ], [ -1, %86 ], [ %80, %82 ], [ %80, %84 ], [ %35, %38 ], [ %41, %43 ]
  %91 = insertvalue { i64, i32 } undef, i64 %89, 0
  %92 = insertvalue { i64, i32 } %91, i32 %90, 1
  ret { i64, i32 } %92
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN4absl4CeilENS_8DurationES0_(i64, i32, i64, i32) local_unnamed_addr #0 {
  %5 = alloca { i64, i32 }, align 8
  %6 = bitcast { i64, i32 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  %7 = bitcast { i64, i32 }* %5 to %"class.absl::Duration"*
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 1
  store i32 %1, i32* %9, align 8
  %10 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext false, i64 %0, i32 %1, i64 %2, i32 %3, %"class.absl::Duration"* nonnull %7) #11
  %11 = load i64, i64* %8, align 8
  %12 = load i32, i32* %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  %13 = icmp eq i32 %1, -1
  br i1 %13, label %40, label %14

14:                                               ; preds = %4
  %15 = icmp eq i32 %12, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = icmp sgt i64 %11, -1
  %18 = select i1 %17, i64 -9223372036854775808, i64 9223372036854775807
  br label %34

19:                                               ; preds = %14
  %20 = sub i64 %0, %11
  %21 = icmp ugt i32 %12, %1
  %22 = add i32 %1, -294967296
  %23 = zext i1 %21 to i64
  %24 = sub i64 %20, %23
  %25 = select i1 %21, i32 %22, i32 %1
  %26 = sub i32 %25, %12
  %27 = icmp slt i64 %11, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  %29 = icmp slt i64 %24, %0
  br i1 %29, label %32, label %34

30:                                               ; preds = %19
  %31 = icmp sgt i64 %24, %0
  br i1 %31, label %32, label %34

32:                                               ; preds = %30, %28
  %33 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %30 ]
  br label %34

34:                                               ; preds = %16, %28, %30, %32
  %35 = phi i32 [ -1, %16 ], [ -1, %32 ], [ %26, %28 ], [ %26, %30 ]
  %36 = phi i64 [ %18, %16 ], [ %33, %32 ], [ %24, %28 ], [ %24, %30 ]
  %37 = icmp eq i64 %36, %0
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = icmp slt i64 %36, %0
  br i1 %39, label %49, label %89

40:                                               ; preds = %4, %34
  %41 = phi i32 [ %35, %34 ], [ -1, %4 ]
  %42 = icmp eq i64 %0, -9223372036854775808
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = add i32 %41, 1
  %45 = add i32 %1, 1
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %49, label %89

47:                                               ; preds = %40
  %48 = icmp ult i32 %41, %1
  br i1 %48, label %49, label %89

49:                                               ; preds = %43, %38, %47
  %50 = phi i32 [ %35, %38 ], [ %41, %47 ], [ %41, %43 ]
  %51 = phi i64 [ %36, %38 ], [ %0, %47 ], [ -9223372036854775808, %43 ]
  %52 = icmp eq i64 %2, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %49
  %54 = icmp slt i64 %2, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %53
  switch i32 %3, label %61 [
    i32 0, label %56
    i32 -1, label %64
  ]

56:                                               ; preds = %55
  %57 = icmp eq i64 %2, -9223372036854775808
  %58 = sub nsw i64 0, %2
  %59 = select i1 %57, i64 9223372036854775807, i64 %58
  %60 = sext i1 %57 to i32
  br label %64

61:                                               ; preds = %55
  %62 = xor i64 %2, -1
  %63 = sub i32 -294967296, %3
  br label %64

64:                                               ; preds = %49, %53, %55, %56, %61
  %65 = phi i64 [ %2, %53 ], [ 0, %49 ], [ %62, %61 ], [ %59, %56 ], [ 9223372036854775807, %55 ]
  %66 = phi i32 [ %3, %53 ], [ %3, %49 ], [ %63, %61 ], [ %60, %56 ], [ %3, %55 ]
  %67 = icmp eq i32 %50, -1
  br i1 %67, label %89, label %68

68:                                               ; preds = %64
  %69 = icmp eq i32 %66, -1
  br i1 %69, label %89, label %70

70:                                               ; preds = %68
  %71 = add i64 %65, %51
  %72 = zext i32 %50 to i64
  %73 = zext i32 %66 to i64
  %74 = sub nsw i64 4000000000, %73
  %75 = icmp sgt i64 %74, %72
  %76 = add i32 %50, 294967296
  %77 = xor i1 %75, true
  %78 = zext i1 %77 to i64
  %79 = add i64 %71, %78
  %80 = select i1 %75, i32 %50, i32 %76
  %81 = add i32 %80, %66
  %82 = icmp slt i64 %65, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %70
  %84 = icmp sgt i64 %79, %51
  br i1 %84, label %87, label %89

85:                                               ; preds = %70
  %86 = icmp slt i64 %79, %51
  br i1 %86, label %87, label %89

87:                                               ; preds = %85, %83
  %88 = phi i64 [ 9223372036854775807, %85 ], [ -9223372036854775808, %83 ]
  br label %89

89:                                               ; preds = %43, %38, %87, %85, %83, %68, %64, %47
  %90 = phi i64 [ %0, %47 ], [ %51, %64 ], [ %88, %87 ], [ %79, %83 ], [ %79, %85 ], [ %65, %68 ], [ %36, %38 ], [ -9223372036854775808, %43 ]
  %91 = phi i32 [ %41, %47 ], [ -1, %64 ], [ -1, %87 ], [ %81, %83 ], [ %81, %85 ], [ -1, %68 ], [ %35, %38 ], [ %41, %43 ]
  %92 = insertvalue { i64, i32 } undef, i64 %90, 0
  %93 = insertvalue { i64, i32 } %92, i32 %91, 1
  ret { i64, i32 } %93
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN4absl20DurationFromTimespecE8timespec(i64, i64) local_unnamed_addr #4 {
  %3 = icmp ult i64 %1, 1000000000
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = trunc i64 %1 to i32
  %6 = shl i32 %5, 2
  br label %32

7:                                                ; preds = %2
  %8 = sdiv i64 %1, 1000000000
  %9 = srem i64 %1, 1000000000
  %10 = shl nsw i64 %9, 2
  %11 = icmp slt i64 %9, 0
  %12 = add nsw i64 %10, 4000000000
  %13 = ashr i64 %9, 61
  %14 = add nsw i64 %13, %8
  %15 = select i1 %11, i64 %12, i64 %10
  %16 = trunc i64 %15 to i32
  %17 = add i64 %14, %0
  %18 = and i64 %15, 4294965248
  %19 = icmp ult i64 %18, 4000000000
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i64
  %22 = add i64 %17, %21
  %23 = select i1 %19, i32 0, i32 294967296
  %24 = add i32 %23, %16
  %25 = icmp slt i64 %14, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %7
  %27 = icmp sgt i64 %22, %0
  br i1 %27, label %30, label %32

28:                                               ; preds = %7
  %29 = icmp slt i64 %22, %0
  br i1 %29, label %30, label %32

30:                                               ; preds = %28, %26
  %31 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %26 ]
  br label %32

32:                                               ; preds = %30, %28, %26, %4
  %33 = phi i64 [ %0, %4 ], [ %31, %30 ], [ %22, %26 ], [ %22, %28 ]
  %34 = phi i32 [ %6, %4 ], [ -1, %30 ], [ %24, %26 ], [ %24, %28 ]
  %35 = insertvalue { i64, i32 } undef, i64 %33, 0
  %36 = insertvalue { i64, i32 } %35, i32 %34, 1
  ret { i64, i32 } %36
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZN4absl19DurationFromTimevalE7timeval(i64, i64) local_unnamed_addr #4 {
  %3 = icmp ult i64 %1, 1000000
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = trunc i64 %1 to i32
  %6 = mul i32 %5, 4000
  br label %32

7:                                                ; preds = %2
  %8 = sdiv i64 %1, 1000000
  %9 = srem i64 %1, 1000000
  %10 = mul nsw i64 %9, 4000
  %11 = icmp slt i64 %9, 0
  %12 = add nsw i64 %10, 4000000000
  %13 = ashr i64 %10, 63
  %14 = add nsw i64 %13, %8
  %15 = select i1 %11, i64 %12, i64 %10
  %16 = trunc i64 %15 to i32
  %17 = add i64 %14, %0
  %18 = and i64 %15, 4294965248
  %19 = icmp ult i64 %18, 4000000000
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i64
  %22 = add i64 %17, %21
  %23 = select i1 %19, i32 0, i32 294967296
  %24 = add i32 %23, %16
  %25 = icmp slt i64 %14, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %7
  %27 = icmp sgt i64 %22, %0
  br i1 %27, label %30, label %32

28:                                               ; preds = %7
  %29 = icmp slt i64 %22, %0
  br i1 %29, label %30, label %32

30:                                               ; preds = %28, %26
  %31 = phi i64 [ 9223372036854775807, %28 ], [ -9223372036854775808, %26 ]
  br label %32

32:                                               ; preds = %30, %28, %26, %4
  %33 = phi i64 [ %0, %4 ], [ %31, %30 ], [ %22, %26 ], [ %22, %28 ]
  %34 = phi i32 [ %6, %4 ], [ -1, %30 ], [ %24, %26 ], [ %24, %28 ]
  %35 = insertvalue { i64, i32 } undef, i64 %33, 0
  %36 = insertvalue { i64, i32 } %35, i32 %34, 1
  ret { i64, i32 } %36
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4absl18ToInt64NanosecondsENS_8DurationE(i64, i32) local_unnamed_addr #5 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp ult i64 %0, 8589934592
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = mul i64 %0, 1000000000
  %7 = lshr i32 %1, 2
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %6, %8
  br label %16

10:                                               ; preds = %2
  %11 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %13 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %13, align 8
  %14 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %14, align 8
  %15 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4, %"class.absl::Duration"* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  br label %16

16:                                               ; preds = %10, %5
  %17 = phi i64 [ %9, %5 ], [ %15, %10 ]
  ret i64 %17
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4absl19ToInt64MicrosecondsENS_8DurationE(i64, i32) local_unnamed_addr #5 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp ult i64 %0, 8796093022208
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = mul i64 %0, 1000000
  %7 = udiv i32 %1, 4000
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %6, %8
  br label %16

10:                                               ; preds = %2
  %11 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %13 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %13, align 8
  %14 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %14, align 8
  %15 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4000, %"class.absl::Duration"* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  br label %16

16:                                               ; preds = %10, %5
  %17 = phi i64 [ %9, %5 ], [ %15, %10 ]
  ret i64 %17
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4absl19ToInt64MillisecondsENS_8DurationE(i64, i32) local_unnamed_addr #5 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp ult i64 %0, 9007199254740992
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = mul nsw i64 %0, 1000
  %7 = udiv i32 %1, 4000000
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %6, %8
  br label %16

10:                                               ; preds = %2
  %11 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %13 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %13, align 8
  %14 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %14, align 8
  %15 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4000000, %"class.absl::Duration"* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  br label %16

16:                                               ; preds = %10, %5
  %17 = phi i64 [ %9, %5 ], [ %15, %10 ]
  ret i64 %17
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl14ToInt64SecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp ne i32 %1, -1
  %4 = icmp slt i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = icmp ne i32 %1, 0
  %8 = zext i1 %7 to i64
  %9 = add nsw i64 %8, %0
  ret i64 %9

10:                                               ; preds = %2
  ret i64 %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl14ToInt64MinutesENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = icmp ne i32 %1, 0
  %8 = zext i1 %7 to i64
  %9 = add nsw i64 %8, %0
  br label %10

10:                                               ; preds = %6, %4
  %11 = phi i64 [ %0, %4 ], [ %9, %6 ]
  %12 = sdiv i64 %11, 60
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi i64 [ %12, %10 ], [ %0, %2 ]
  ret i64 %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl12ToInt64HoursENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = icmp ne i32 %1, 0
  %8 = zext i1 %7 to i64
  %9 = add nsw i64 %8, %0
  br label %10

10:                                               ; preds = %6, %4
  %11 = phi i64 [ %0, %4 ], [ %9, %6 ]
  %12 = sdiv i64 %11, 3600
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi i64 [ %12, %10 ], [ %0, %2 ]
  ret i64 %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl19ToDoubleNanosecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fmul double %11, 2.500000e-01
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl20ToDoubleMicrosecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fdiv double %11, 4.000000e+03
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl20ToDoubleMillisecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fdiv double %11, 4.000000e+06
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl15ToDoubleSecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fdiv double %11, 4.000000e+09
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl15ToDoubleMinutesENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fdiv double %11, 2.400000e+11
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4absl13ToDoubleHoursENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  %6 = select i1 %5, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %13

7:                                                ; preds = %2
  %8 = sitofp i64 %0 to double
  %9 = fmul double %8, 4.000000e+09
  %10 = uitofp i32 %1 to double
  %11 = fadd double %9, %10
  %12 = fdiv double %11, 1.440000e+13
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi double [ %6, %4 ], [ %12, %7 ]
  ret double %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @_ZN4absl10ToTimespecENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %17, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %4
  %7 = add i32 %1, 3
  %8 = icmp ugt i32 %7, -294967297
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = add nsw i64 %0, 1
  %11 = add nsw i32 %1, 294967299
  br label %12

12:                                               ; preds = %6, %9, %4
  %13 = phi i32 [ %11, %9 ], [ %7, %6 ], [ %1, %4 ]
  %14 = phi i64 [ %10, %9 ], [ %0, %6 ], [ %0, %4 ]
  %15 = lshr i32 %13, 2
  %16 = zext i32 %15 to i64
  br label %21

17:                                               ; preds = %2
  %18 = icmp sgt i64 %0, -1
  %19 = select i1 %18, i64 9223372036854775807, i64 -9223372036854775808
  %20 = select i1 %18, i64 999999999, i64 0
  br label %21

21:                                               ; preds = %17, %12
  %22 = phi i64 [ %14, %12 ], [ %19, %17 ]
  %23 = phi i64 [ %16, %12 ], [ %20, %17 ]
  %24 = insertvalue { i64, i64 } undef, i64 %22, 0
  %25 = insertvalue { i64, i64 } %24, i64 %23, 1
  ret { i64, i64 } %25
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @_ZN4absl9ToTimevalENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %0, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = lshr i32 %1, 2
  %8 = zext i32 %7 to i64
  br label %33

9:                                                ; preds = %4
  %10 = add i32 %1, 3
  %11 = icmp ugt i32 %10, -294967297
  br i1 %11, label %19, label %12

12:                                               ; preds = %9
  %13 = lshr i32 %10, 2
  %14 = zext i32 %13 to i64
  br label %25

15:                                               ; preds = %2
  %16 = icmp sgt i64 %0, -1
  %17 = select i1 %16, i64 9223372036854775807, i64 -9223372036854775808
  %18 = select i1 %16, i64 999999999, i64 999
  br label %33

19:                                               ; preds = %9
  %20 = add nsw i64 %0, 1
  %21 = add nsw i32 %1, 294967299
  %22 = lshr i32 %21, 2
  %23 = zext i32 %22 to i64
  %24 = icmp slt i64 %20, 0
  br i1 %24, label %25, label %33

25:                                               ; preds = %12, %19
  %26 = phi i64 [ %23, %19 ], [ %14, %12 ]
  %27 = phi i64 [ %20, %19 ], [ %0, %12 ]
  %28 = add nuw nsw i64 %26, 999
  %29 = icmp ugt i64 %28, 999999999
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = add nsw i64 %27, 1
  %32 = add nsw i64 %26, -999999001
  br label %33

33:                                               ; preds = %15, %6, %25, %30, %19
  %34 = phi i64 [ %31, %30 ], [ %27, %25 ], [ 0, %19 ], [ %0, %6 ], [ %17, %15 ]
  %35 = phi i64 [ %32, %30 ], [ %28, %25 ], [ %23, %19 ], [ %8, %6 ], [ %18, %15 ]
  %36 = trunc i64 %35 to i32
  %37 = udiv i32 %36, 1000
  %38 = zext i32 %37 to i64
  %39 = insertvalue { i64, i64 } undef, i64 %34, 0
  %40 = insertvalue { i64, i64 } %39, i64 %38, 1
  ret { i64, i64 } %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl19ToChronoNanosecondsENS_8DurationE(i64, i32) local_unnamed_addr #0 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp eq i32 %1, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = icmp slt i64 %0, 0
  %7 = select i1 %6, i64 -9223372036854775808, i64 9223372036854775807
  br label %21

8:                                                ; preds = %2
  %9 = icmp ult i64 %0, 8589934592
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = mul i64 %0, 1000000000
  %12 = lshr i32 %1, 2
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %11, %13
  br label %21

15:                                               ; preds = %8
  %16 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %17 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %18 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %19, align 8
  %20 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4, %"class.absl::Duration"* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %21

21:                                               ; preds = %10, %15, %5
  %22 = phi i64 [ %7, %5 ], [ %14, %10 ], [ %20, %15 ]
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl20ToChronoMicrosecondsENS_8DurationE(i64, i32) local_unnamed_addr #0 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp eq i32 %1, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = icmp slt i64 %0, 0
  %7 = select i1 %6, i64 -9223372036854775808, i64 9223372036854775807
  br label %21

8:                                                ; preds = %2
  %9 = icmp ult i64 %0, 8796093022208
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = mul i64 %0, 1000000
  %12 = udiv i32 %1, 4000
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %11, %13
  br label %21

15:                                               ; preds = %8
  %16 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %17 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %18 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %19, align 8
  %20 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4000, %"class.absl::Duration"* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %21

21:                                               ; preds = %10, %15, %5
  %22 = phi i64 [ %7, %5 ], [ %14, %10 ], [ %20, %15 ]
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl20ToChronoMillisecondsENS_8DurationE(i64, i32) local_unnamed_addr #0 {
  %3 = alloca { i64, i32 }, align 8
  %4 = icmp eq i32 %1, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = icmp slt i64 %0, 0
  %7 = select i1 %6, i64 -9223372036854775808, i64 9223372036854775807
  br label %21

8:                                                ; preds = %2
  %9 = icmp ult i64 %0, 9007199254740992
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = mul nsw i64 %0, 1000
  %12 = udiv i32 %1, 4000000
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %11, %13
  br label %21

15:                                               ; preds = %8
  %16 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %17 = bitcast { i64, i32 }* %3 to %"class.absl::Duration"*
  %18 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 0
  store i64 %0, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %3, i64 0, i32 1
  store i32 %1, i32* %19, align 8
  %20 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %0, i32 %1, i64 0, i32 4000000, %"class.absl::Duration"* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %21

21:                                               ; preds = %10, %15, %5
  %22 = phi i64 [ %7, %5 ], [ %14, %10 ], [ %20, %15 ]
  ret i64 %22
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl15ToChronoSecondsENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  %4 = icmp slt i64 %0, 0
  br i1 %3, label %5, label %7

5:                                                ; preds = %2
  %6 = select i1 %4, i64 -9223372036854775808, i64 9223372036854775807
  br label %12

7:                                                ; preds = %2
  br i1 %4, label %8, label %12

8:                                                ; preds = %7
  %9 = icmp ne i32 %1, 0
  %10 = zext i1 %9 to i64
  %11 = add nsw i64 %10, %0
  br label %12

12:                                               ; preds = %7, %8, %5
  %13 = phi i64 [ %6, %5 ], [ %11, %8 ], [ %0, %7 ]
  ret i64 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl15ToChronoMinutesENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  %4 = icmp slt i64 %0, 0
  br i1 %3, label %5, label %7

5:                                                ; preds = %2
  %6 = select i1 %4, i64 -9223372036854775808, i64 9223372036854775807
  br label %15

7:                                                ; preds = %2
  br i1 %4, label %8, label %12

8:                                                ; preds = %7
  %9 = icmp ne i32 %1, 0
  %10 = zext i1 %9 to i64
  %11 = add nsw i64 %10, %0
  br label %12

12:                                               ; preds = %8, %7
  %13 = phi i64 [ %0, %7 ], [ %11, %8 ]
  %14 = sdiv i64 %13, 60
  br label %15

15:                                               ; preds = %12, %5
  %16 = phi i64 [ %6, %5 ], [ %14, %12 ]
  ret i64 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl13ToChronoHoursENS_8DurationE(i64, i32) local_unnamed_addr #4 {
  %3 = icmp eq i32 %1, -1
  %4 = icmp slt i64 %0, 0
  br i1 %3, label %5, label %7

5:                                                ; preds = %2
  %6 = select i1 %4, i64 -9223372036854775808, i64 9223372036854775807
  br label %15

7:                                                ; preds = %2
  br i1 %4, label %8, label %12

8:                                                ; preds = %7
  %9 = icmp ne i32 %1, 0
  %10 = zext i1 %9 to i64
  %11 = add nsw i64 %10, %0
  br label %12

12:                                               ; preds = %8, %7
  %13 = phi i64 [ %0, %7 ], [ %11, %8 ]
  %14 = sdiv i64 %13, 3600
  br label %15

15:                                               ; preds = %12, %5
  %16 = phi i64 [ %6, %5 ], [ %14, %12 ]
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl14FormatDurationENS_8DurationE(%"class.std::__1::basic_string"* noalias sret, i64, i32) local_unnamed_addr #0 {
  %4 = alloca [17 x i8], align 16
  %5 = alloca { i64, i32 }, align 8
  %6 = bitcast { i64, i32 }* %5 to %"class.absl::Duration"*
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 1
  store i32 %2, i32* %9, align 8
  %10 = icmp eq i64 %1, -9223372036854775808
  %11 = icmp eq i32 %2, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %3
  %14 = tail call i8* @_Znwm(i64 32) #12
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast i64* %16 to <2 x i64>*
  store <2 x i64> <i64 23, i64 -9223372036854775776>, <2 x i64>* %17, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %14, i8* align 1 getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i64 23, i1 false) #11
  %18 = getelementptr inbounds i8, i8* %14, i64 23
  store i8 0, i8* %18, align 1
  br label %194

19:                                               ; preds = %3
  %20 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #11
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #11
  %23 = icmp slt i64 %1, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %19
  %25 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #11
  switch i32 %2, label %30 [
    i32 0, label %26
    i32 -1, label %33
  ]

26:                                               ; preds = %24
  %27 = sub nsw i64 0, %1
  %28 = select i1 %10, i64 9223372036854775807, i64 %27
  %29 = sext i1 %10 to i32
  br label %33

30:                                               ; preds = %24
  %31 = xor i64 %1, -1
  %32 = sub i32 -294967296, %2
  br label %33

33:                                               ; preds = %24, %26, %30
  %34 = phi i64 [ %31, %30 ], [ %28, %26 ], [ 9223372036854775807, %24 ]
  %35 = phi i32 [ %32, %30 ], [ %29, %26 ], [ %2, %24 ]
  store i64 %34, i64* %8, align 8
  store i32 %35, i32* %9, align 8
  br label %36

36:                                               ; preds = %19, %33
  %37 = phi i32 [ %35, %33 ], [ %2, %19 ]
  %38 = phi i64 [ %34, %33 ], [ %1, %19 ]
  %39 = icmp eq i64 %38, 9223372036854775807
  %40 = icmp eq i32 %37, -1
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %36
  %43 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)) #11
  br label %170

44:                                               ; preds = %36
  %45 = icmp slt i64 %38, 1
  br i1 %45, label %46, label %73

46:                                               ; preds = %44
  %47 = icmp ne i64 %38, 0
  %48 = icmp ult i32 %37, 4000
  %49 = or i1 %48, %47
  br i1 %49, label %50, label %62

50:                                               ; preds = %46
  br i1 %40, label %51, label %54

51:                                               ; preds = %50
  %52 = icmp slt i64 %38, 0
  %53 = select i1 %52, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %60

54:                                               ; preds = %50
  %55 = sitofp i64 %38 to double
  %56 = fmul double %55, 4.000000e+09
  %57 = uitofp i32 %37 to double
  %58 = fadd double %56, %57
  %59 = fmul double %58, 2.500000e-01
  br label %60

60:                                               ; preds = %51, %54
  %61 = phi double [ %53, %51 ], [ %59, %54 ]
  call fastcc void @_ZN4absl12_GLOBAL__N_116AppendNumberUnitEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS0_11DisplayUnitE(%"class.std::__1::basic_string"* nonnull %7, double %61, %"struct.absl::(anonymous namespace)::DisplayUnit"* nonnull byval(%"struct.absl::(anonymous namespace)::DisplayUnit") align 8 @_ZN4absl12_GLOBAL__N_112kDisplayNanoE)
  br label %170

62:                                               ; preds = %46
  %63 = icmp ult i32 %37, 4000000
  br i1 %63, label %64, label %67

64:                                               ; preds = %62
  %65 = uitofp i32 %37 to double
  %66 = fdiv double %65, 4.000000e+03
  call fastcc void @_ZN4absl12_GLOBAL__N_116AppendNumberUnitEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS0_11DisplayUnitE(%"class.std::__1::basic_string"* nonnull %7, double %66, %"struct.absl::(anonymous namespace)::DisplayUnit"* nonnull byval(%"struct.absl::(anonymous namespace)::DisplayUnit") align 8 @_ZN4absl12_GLOBAL__N_113kDisplayMicroE)
  br label %170

67:                                               ; preds = %62
  br i1 %40, label %71, label %68

68:                                               ; preds = %67
  %69 = uitofp i32 %37 to double
  %70 = fdiv double %69, 4.000000e+06
  br label %71

71:                                               ; preds = %67, %68
  %72 = phi double [ %70, %68 ], [ 0x7FF0000000000000, %67 ]
  call fastcc void @_ZN4absl12_GLOBAL__N_116AppendNumberUnitEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS0_11DisplayUnitE(%"class.std::__1::basic_string"* nonnull %7, double %72, %"struct.absl::(anonymous namespace)::DisplayUnit"* nonnull byval(%"struct.absl::(anonymous namespace)::DisplayUnit") align 8 @_ZN4absl12_GLOBAL__N_113kDisplayMilliE)
  br label %170

73:                                               ; preds = %44
  %74 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %38, i32 %37, i64 3600, i32 0, %"class.absl::Duration"* nonnull %6) #11
  %75 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %75) #11
  %76 = getelementptr inbounds [17 x i8], [17 x i8]* %4, i64 0, i64 17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 17, i1 false) #11
  br label %77

77:                                               ; preds = %77, %73
  %78 = phi i64 [ 0, %73 ], [ %85, %77 ]
  %79 = phi i32 [ 0, %73 ], [ %81, %77 ]
  %80 = phi i64 [ %74, %73 ], [ %87, %77 ]
  %81 = add nsw i32 %79, -1
  %82 = srem i64 %80, 10
  %83 = trunc i64 %82 to i8
  %84 = add nsw i8 %83, 48
  %85 = add nsw i64 %78, -1
  %86 = getelementptr inbounds i8, i8* %76, i64 %85
  store i8 %84, i8* %86, align 1
  %87 = sdiv i64 %80, 10
  %88 = add i64 %80, 9
  %89 = icmp ugt i64 %88, 18
  br i1 %89, label %77, label %90

90:                                               ; preds = %77
  %91 = icmp sgt i32 %81, 0
  br i1 %91, label %92, label %103

92:                                               ; preds = %90
  %93 = getelementptr inbounds i8, i8* %76, i64 %85
  %94 = add nsw i32 %79, -2
  %95 = zext i32 %94 to i64
  %96 = xor i64 %95, -1
  %97 = getelementptr i8, i8* %93, i64 %96
  %98 = zext i32 %81 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 48, i64 %98, i1 false) #11
  %99 = add i64 %78, -2
  %100 = sub i64 %99, %95
  %101 = getelementptr inbounds i8, i8* %76, i64 %100
  %102 = load i8, i8* %101, align 1
  br label %103

103:                                              ; preds = %92, %90
  %104 = phi i8 [ %84, %90 ], [ %102, %92 ]
  %105 = phi i64 [ %85, %90 ], [ %100, %92 ]
  %106 = icmp eq i8 %104, 48
  %107 = icmp eq i64 %105, -1
  %108 = and i1 %106, %107
  br i1 %108, label %114, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds i8, i8* %76, i64 %105
  %111 = sub i64 0, %105
  %112 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %7, i8* %110, i64 %111) #11
  %113 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i64 1) #11
  br label %114

114:                                              ; preds = %103, %109
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %75) #11
  %115 = load i64, i64* %8, align 8
  %116 = load i32, i32* %9, align 8
  %117 = call i64 @_ZN4absl13time_internal12IDivDurationEbNS_8DurationES1_PS1_(i1 zeroext true, i64 %115, i32 %116, i64 60, i32 0, %"class.absl::Duration"* nonnull %6) #11
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %75) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 17, i1 false) #11
  br label %118

118:                                              ; preds = %118, %114
  %119 = phi i64 [ 0, %114 ], [ %126, %118 ]
  %120 = phi i32 [ 0, %114 ], [ %122, %118 ]
  %121 = phi i64 [ %117, %114 ], [ %128, %118 ]
  %122 = add nsw i32 %120, -1
  %123 = srem i64 %121, 10
  %124 = trunc i64 %123 to i8
  %125 = add nsw i8 %124, 48
  %126 = add nsw i64 %119, -1
  %127 = getelementptr inbounds i8, i8* %76, i64 %126
  store i8 %125, i8* %127, align 1
  %128 = sdiv i64 %121, 10
  %129 = add i64 %121, 9
  %130 = icmp ugt i64 %129, 18
  br i1 %130, label %118, label %131

131:                                              ; preds = %118
  %132 = icmp sgt i32 %122, 0
  br i1 %132, label %133, label %144

133:                                              ; preds = %131
  %134 = getelementptr inbounds i8, i8* %76, i64 %126
  %135 = add nsw i32 %120, -2
  %136 = zext i32 %135 to i64
  %137 = xor i64 %136, -1
  %138 = getelementptr i8, i8* %134, i64 %137
  %139 = zext i32 %122 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 48, i64 %139, i1 false) #11
  %140 = add i64 %119, -2
  %141 = sub i64 %140, %136
  %142 = getelementptr inbounds i8, i8* %76, i64 %141
  %143 = load i8, i8* %142, align 1
  br label %144

144:                                              ; preds = %133, %131
  %145 = phi i8 [ %125, %131 ], [ %143, %133 ]
  %146 = phi i64 [ %126, %131 ], [ %141, %133 ]
  %147 = icmp eq i8 %145, 48
  %148 = icmp eq i64 %146, -1
  %149 = and i1 %147, %148
  br i1 %149, label %155, label %150

150:                                              ; preds = %144
  %151 = getelementptr inbounds i8, i8* %76, i64 %146
  %152 = sub i64 0, %146
  %153 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %7, i8* %151, i64 %152) #11
  %154 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i64 1) #11
  br label %155

155:                                              ; preds = %144, %150
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %75) #11
  %156 = load i64, i64* %8, align 8
  %157 = load i32, i32* %9, align 8
  %158 = icmp eq i32 %157, -1
  br i1 %158, label %159, label %162

159:                                              ; preds = %155
  %160 = icmp slt i64 %156, 0
  %161 = select i1 %160, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %168

162:                                              ; preds = %155
  %163 = sitofp i64 %156 to double
  %164 = fmul double %163, 4.000000e+09
  %165 = uitofp i32 %157 to double
  %166 = fadd double %164, %165
  %167 = fdiv double %166, 4.000000e+09
  br label %168

168:                                              ; preds = %159, %162
  %169 = phi double [ %161, %159 ], [ %167, %162 ]
  call fastcc void @_ZN4absl12_GLOBAL__N_116AppendNumberUnitEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS0_11DisplayUnitE(%"class.std::__1::basic_string"* nonnull %7, double %169, %"struct.absl::(anonymous namespace)::DisplayUnit"* nonnull byval(%"struct.absl::(anonymous namespace)::DisplayUnit") align 8 @_ZN4absl12_GLOBAL__N_111kDisplaySecE)
  br label %170

170:                                              ; preds = %168, %64, %71, %60, %42
  %171 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %172 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %171, i64 0, i32 1, i32 0
  %173 = load i8, i8* %172, align 1
  %174 = icmp slt i8 %173, 0
  %175 = load i64, i64* %22, align 8
  %176 = zext i8 %173 to i64
  %177 = select i1 %174, i64 %175, i64 %176
  switch i64 %177, label %192 [
    i64 0, label %183
    i64 1, label %178
  ]

178:                                              ; preds = %170
  %179 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %7, i64 0, i64 -1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #11
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %192

181:                                              ; preds = %178
  %182 = load i8, i8* %172, align 1
  br label %183

183:                                              ; preds = %170, %181
  %184 = phi i8 [ %182, %181 ], [ %173, %170 ]
  %185 = icmp slt i8 %184, 0
  br i1 %185, label %186, label %188

186:                                              ; preds = %183
  store i64 1, i64* %22, align 8
  %187 = load i8*, i8** %21, align 8
  br label %189

188:                                              ; preds = %183
  store i8 1, i8* %172, align 1
  br label %189

189:                                              ; preds = %186, %188
  %190 = phi i8* [ %187, %186 ], [ %20, %188 ]
  store i8 48, i8* %190, align 1
  %191 = getelementptr inbounds i8, i8* %190, i64 1
  store i8 0, i8* %191, align 1
  br label %192

192:                                              ; preds = %170, %178, %189
  %193 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* nonnull align 8 %20, i64 24, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #11
  br label %194

194:                                              ; preds = %192, %13
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl12_GLOBAL__N_116AppendNumberUnitEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdNS0_11DisplayUnitE(%"class.std::__1::basic_string"*, double, %"struct.absl::(anonymous namespace)::DisplayUnit"* nocapture readonly byval(%"struct.absl::(anonymous namespace)::DisplayUnit") align 8) unnamed_addr #0 {
  %4 = alloca [15 x i8], align 1
  %5 = alloca double, align 8
  %6 = getelementptr inbounds %"struct.absl::(anonymous namespace)::DisplayUnit", %"struct.absl::(anonymous namespace)::DisplayUnit"* %2, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 15
  %9 = select i1 %8, i32 %7, i32 15
  %10 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %10) #11
  %11 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 15
  %12 = bitcast double* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %10, i8 -86, i64 15, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  store double 0.000000e+00, double* %5, align 8
  %13 = call double @modf(double %1, double* nonnull %5) #11
  %14 = getelementptr inbounds %"struct.absl::(anonymous namespace)::DisplayUnit", %"struct.absl::(anonymous namespace)::DisplayUnit"* %2, i64 0, i32 2
  %15 = load double, double* %14, align 8
  %16 = fmul double %13, %15
  %17 = fcmp olt double %16, 0.000000e+00
  %18 = fadd double %16, -5.000000e-01
  %19 = tail call double @llvm.ceil.f64(double %18) #11
  %20 = fadd double %16, 5.000000e-01
  %21 = tail call double @llvm.floor.f64(double %20) #11
  %22 = select i1 %17, double %19, double %21
  %23 = fptosi double %22 to i64
  %24 = load double, double* %5, align 8
  %25 = fptosi double %24 to i64
  %26 = or i64 %23, %25
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %102, label %28

28:                                               ; preds = %3, %28
  %29 = phi i8* [ %36, %28 ], [ %11, %3 ]
  %30 = phi i32 [ %32, %28 ], [ 0, %3 ]
  %31 = phi i64 [ %37, %28 ], [ %25, %3 ]
  %32 = add nsw i32 %30, -1
  %33 = srem i64 %31, 10
  %34 = trunc i64 %33 to i8
  %35 = add nsw i8 %34, 48
  %36 = getelementptr inbounds i8, i8* %29, i64 -1
  store i8 %35, i8* %36, align 1
  %37 = sdiv i64 %31, 10
  %38 = add i64 %31, 9
  %39 = icmp ugt i64 %38, 18
  br i1 %39, label %28, label %40

40:                                               ; preds = %28
  %41 = icmp eq i64 %23, 0
  %42 = icmp sgt i32 %32, 0
  br i1 %42, label %43, label %53

43:                                               ; preds = %40
  %44 = add nsw i32 %30, -2
  %45 = zext i32 %44 to i64
  %46 = xor i64 %45, -1
  %47 = getelementptr i8, i8* %36, i64 %46
  %48 = zext i32 %32 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 48, i64 %48, i1 false) #11
  %49 = add nsw i32 %30, -2
  %50 = zext i32 %49 to i64
  %51 = xor i64 %50, -1
  %52 = getelementptr i8, i8* %36, i64 %51
  br label %53

53:                                               ; preds = %43, %40
  %54 = phi i8* [ %36, %40 ], [ %52, %43 ]
  %55 = ptrtoint i8* %11 to i64
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %54, i64 %57) #11
  br i1 %41, label %96, label %59

59:                                               ; preds = %53
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 46) #11
  br label %60

60:                                               ; preds = %60, %59
  %61 = phi i8* [ %11, %59 ], [ %68, %60 ]
  %62 = phi i32 [ %9, %59 ], [ %64, %60 ]
  %63 = phi i64 [ %23, %59 ], [ %69, %60 ]
  %64 = add nsw i32 %62, -1
  %65 = srem i64 %63, 10
  %66 = trunc i64 %65 to i8
  %67 = add nsw i8 %66, 48
  %68 = getelementptr inbounds i8, i8* %61, i64 -1
  store i8 %67, i8* %68, align 1
  %69 = sdiv i64 %63, 10
  %70 = add i64 %63, 9
  %71 = icmp ugt i64 %70, 18
  br i1 %71, label %60, label %72

72:                                               ; preds = %60
  %73 = icmp sgt i32 %64, 0
  br i1 %73, label %74, label %84

74:                                               ; preds = %72
  %75 = add nsw i32 %62, -2
  %76 = zext i32 %75 to i64
  %77 = xor i64 %76, -1
  %78 = getelementptr i8, i8* %68, i64 %77
  %79 = zext i32 %64 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 48, i64 %79, i1 false) #11
  %80 = add nsw i32 %62, -2
  %81 = zext i32 %80 to i64
  %82 = xor i64 %81, -1
  %83 = getelementptr i8, i8* %68, i64 %82
  br label %84

84:                                               ; preds = %74, %72
  %85 = phi i8* [ %68, %72 ], [ %83, %74 ]
  br label %86

86:                                               ; preds = %86, %84
  %87 = phi i8* [ %11, %84 ], [ %88, %86 ]
  %88 = getelementptr inbounds i8, i8* %87, i64 -1
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 48
  br i1 %90, label %86, label %91

91:                                               ; preds = %86
  %92 = ptrtoint i8* %87 to i64
  %93 = ptrtoint i8* %85 to i64
  %94 = sub i64 %92, %93
  %95 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %85, i64 %94) #11
  br label %96

96:                                               ; preds = %53, %91
  %97 = getelementptr inbounds %"struct.absl::(anonymous namespace)::DisplayUnit", %"struct.absl::(anonymous namespace)::DisplayUnit"* %2, i64 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %"struct.absl::(anonymous namespace)::DisplayUnit", %"struct.absl::(anonymous namespace)::DisplayUnit"* %2, i64 0, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %98, i64 %100) #11
  br label %102

102:                                              ; preds = %3, %96
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %10) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl13ParseDurationENS_11string_viewEPNS_8DurationE(i8*, i64, %"class.absl::Duration"* nocapture) local_unnamed_addr #0 {
  %4 = alloca { i64, i32 }, align 8
  %5 = alloca { i64, i32 }, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca { i64, i32 }, align 8
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %225, label %9

9:                                                ; preds = %3
  %10 = load i8, i8* %0, align 1
  switch i8 %10, label %17 [
    i8 45, label %11
    i8 43, label %14
  ]

11:                                               ; preds = %9
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = add i64 %1, -1
  br label %17

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %0, i64 1
  %16 = add i64 %1, -1
  br label %17

17:                                               ; preds = %9, %14, %11
  %18 = phi i8* [ %12, %11 ], [ %15, %14 ], [ %0, %9 ]
  %19 = phi i64 [ %13, %11 ], [ %16, %14 ], [ %1, %9 ]
  %20 = phi i64 [ -1, %11 ], [ 1, %14 ], [ 1, %9 ]
  switch i64 %19, label %42 [
    i64 0, label %225
    i64 1, label %21
    i64 3, label %27
  ]

21:                                               ; preds = %17
  %22 = load i8, i8* %18, align 1
  %23 = icmp eq i8 %22, 48
  br i1 %23, label %24, label %42

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 0
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 1
  store i32 0, i32* %26, align 8
  br label %225

27:                                               ; preds = %17
  %28 = tail call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 %19) #11
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %27
  %31 = bitcast { i64, i32 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31)
  %32 = bitcast { i64, i32 }* %4 to %"class.absl::Duration"*
  %33 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %4, i64 0, i32 0
  store i64 9223372036854775807, i64* %33, align 8
  %34 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %4, i64 0, i32 1
  store i32 -1, i32* %34, align 8
  %35 = call dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmLEl(%"class.absl::Duration"* nonnull %32, i64 %20) #11
  %36 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %35, i64 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %35, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31)
  %40 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 0
  store i64 %37, i64* %40, align 8
  %41 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 1
  store i32 %39, i32* %41, align 8
  br label %225

42:                                               ; preds = %27, %17, %21
  %43 = phi i64 [ %19, %17 ], [ 3, %27 ], [ 1, %21 ]
  %44 = getelementptr inbounds i8, i8* %18, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast { i64, i32 }* %5 to i8*
  %47 = bitcast { i64, i32 }* %5 to %"class.absl::Duration"*
  %48 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 0
  %49 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %5, i64 0, i32 1
  %50 = bitcast { i64, i32 }* %6 to i8*
  %51 = bitcast { i64, i32 }* %6 to %"class.absl::Duration"*
  %52 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %6, i64 0, i32 0
  %53 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %6, i64 0, i32 1
  %54 = bitcast { i64, i32 }* %7 to i8*
  %55 = bitcast { i64, i32 }* %7 to %"class.absl::Duration"*
  %56 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i64 0, i32 0
  %57 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i64 0, i32 1
  br label %58

58:                                               ; preds = %42, %218
  %59 = phi i8* [ %18, %42 ], [ %149, %218 ]
  %60 = phi i32 [ 0, %42 ], [ %220, %218 ]
  %61 = phi i64 [ 0, %42 ], [ %219, %218 ]
  br label %62

62:                                               ; preds = %58, %76
  %63 = phi i64 [ %77, %76 ], [ 0, %58 ]
  %64 = phi i8* [ %78, %76 ], [ %59, %58 ]
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = add nsw i32 %66, -48
  %68 = icmp ugt i32 %67, 9
  br i1 %68, label %80, label %69

69:                                               ; preds = %62
  %70 = icmp sgt i64 %63, 922337203685477580
  br i1 %70, label %225, label %71

71:                                               ; preds = %69
  %72 = mul nsw i64 %63, 10
  %73 = sext i32 %67 to i64
  %74 = sub nuw nsw i64 9223372036854775807, %73
  %75 = icmp sgt i64 %72, %74
  br i1 %75, label %225, label %76

76:                                               ; preds = %71
  %77 = add nsw i64 %72, %73
  %78 = getelementptr inbounds i8, i8* %64, i64 1
  %79 = icmp eq i8* %78, %44
  br i1 %79, label %116, label %62

80:                                               ; preds = %62
  %81 = icmp eq i8* %64, %59
  %82 = icmp ne i8* %64, %44
  %83 = icmp eq i8 %65, 46
  %84 = and i1 %82, %83
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds i8, i8* %64, i64 1
  %87 = icmp eq i8* %86, %44
  br i1 %87, label %109, label %89

88:                                               ; preds = %80
  br i1 %81, label %225, label %116

89:                                               ; preds = %85, %104
  %90 = phi i64 [ %105, %104 ], [ 0, %85 ]
  %91 = phi i64 [ %106, %104 ], [ 1, %85 ]
  %92 = phi i8* [ %107, %104 ], [ %86, %85 ]
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = add nsw i32 %94, -48
  %96 = icmp ugt i32 %95, 9
  br i1 %96, label %109, label %97

97:                                               ; preds = %89
  %98 = icmp slt i64 %91, 922337203685477581
  br i1 %98, label %99, label %104

99:                                               ; preds = %97
  %100 = mul nsw i64 %90, 10
  %101 = sext i32 %95 to i64
  %102 = add nsw i64 %100, %101
  %103 = mul nsw i64 %91, 10
  br label %104

104:                                              ; preds = %99, %97
  %105 = phi i64 [ %102, %99 ], [ %90, %97 ]
  %106 = phi i64 [ %103, %99 ], [ %91, %97 ]
  %107 = getelementptr inbounds i8, i8* %92, i64 1
  %108 = icmp eq i8* %107, %44
  br i1 %108, label %109, label %89

109:                                              ; preds = %104, %89, %85
  %110 = phi i64 [ 0, %85 ], [ %105, %104 ], [ %90, %89 ]
  %111 = phi i64 [ 1, %85 ], [ %106, %104 ], [ %91, %89 ]
  %112 = phi i8* [ %44, %85 ], [ %44, %104 ], [ %92, %89 ]
  %113 = xor i1 %81, true
  %114 = icmp ne i64 %111, 1
  %115 = or i1 %114, %113
  br i1 %115, label %116, label %225

116:                                              ; preds = %76, %88, %109
  %117 = phi i8* [ %64, %88 ], [ %112, %109 ], [ %44, %76 ]
  %118 = phi i64 [ 1, %88 ], [ %111, %109 ], [ 1, %76 ]
  %119 = phi i64 [ 0, %88 ], [ %110, %109 ], [ 0, %76 ]
  %120 = phi i64 [ %63, %88 ], [ %63, %109 ], [ %77, %76 ]
  %121 = ptrtoint i8* %117 to i64
  %122 = sub i64 %45, %121
  switch i64 %122, label %125 [
    i64 0, label %225
    i64 1, label %123
  ]

123:                                              ; preds = %116
  %124 = load i8, i8* %117, align 1
  br label %140

125:                                              ; preds = %116
  %126 = load i8, i8* %117, align 1
  %127 = sext i8 %126 to i32
  switch i32 %127, label %140 [
    i32 110, label %128
    i32 117, label %132
    i32 109, label %136
  ]

128:                                              ; preds = %125
  %129 = getelementptr inbounds i8, i8* %117, i64 1
  %130 = load i8, i8* %129, align 1
  %131 = icmp eq i8 %130, 115
  br i1 %131, label %145, label %140

132:                                              ; preds = %125
  %133 = getelementptr inbounds i8, i8* %117, i64 1
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 115
  br i1 %135, label %145, label %140

136:                                              ; preds = %125
  %137 = getelementptr inbounds i8, i8* %117, i64 1
  %138 = load i8, i8* %137, align 1
  %139 = icmp eq i8 %138, 115
  br i1 %139, label %145, label %140

140:                                              ; preds = %136, %132, %128, %125, %123
  %141 = phi i8 [ %124, %123 ], [ %126, %128 ], [ %126, %132 ], [ %126, %136 ], [ %126, %125 ]
  %142 = sext i8 %141 to i32
  switch i32 %142, label %225 [
    i32 115, label %145
    i32 109, label %143
    i32 104, label %144
  ]

143:                                              ; preds = %140
  br label %145

144:                                              ; preds = %140
  br label %145

145:                                              ; preds = %140, %136, %132, %128, %144, %143
  %146 = phi i64 [ 1, %144 ], [ 1, %143 ], [ 2, %128 ], [ 2, %132 ], [ 2, %136 ], [ 1, %140 ]
  %147 = phi i32 [ 0, %144 ], [ 0, %143 ], [ 4, %128 ], [ 4000, %132 ], [ 4000000, %136 ], [ 0, %140 ]
  %148 = phi i64 [ 3600, %144 ], [ 60, %143 ], [ 0, %128 ], [ 0, %132 ], [ 0, %136 ], [ 1, %140 ]
  %149 = getelementptr inbounds i8, i8* %117, i64 %146
  %150 = icmp eq i64 %120, 0
  br i1 %150, label %180, label %151

151:                                              ; preds = %145
  %152 = mul nsw i64 %120, %20
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46)
  store i64 %148, i64* %48, align 8
  store i32 %147, i32* %49, align 8
  %153 = call dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmLEl(%"class.absl::Duration"* nonnull %47, i64 %152) #11
  %154 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %153, i64 0, i32 0
  %155 = load i64, i64* %154, align 8
  %156 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %153, i64 0, i32 1
  %157 = load i32, i32* %156, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46)
  %158 = icmp eq i32 %60, -1
  br i1 %158, label %180, label %159

159:                                              ; preds = %151
  %160 = icmp eq i32 %157, -1
  br i1 %160, label %180, label %161

161:                                              ; preds = %159
  %162 = add i64 %155, %61
  %163 = zext i32 %60 to i64
  %164 = zext i32 %157 to i64
  %165 = sub nsw i64 4000000000, %164
  %166 = icmp sgt i64 %165, %163
  %167 = add i32 %60, 294967296
  %168 = xor i1 %166, true
  %169 = zext i1 %168 to i64
  %170 = add i64 %162, %169
  %171 = select i1 %166, i32 %60, i32 %167
  %172 = add i32 %171, %157
  %173 = icmp slt i64 %155, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %161
  %175 = icmp sgt i64 %170, %61
  br i1 %175, label %178, label %180

176:                                              ; preds = %161
  %177 = icmp slt i64 %170, %61
  br i1 %177, label %178, label %180

178:                                              ; preds = %176, %174
  %179 = phi i64 [ 9223372036854775807, %176 ], [ -9223372036854775808, %174 ]
  br label %180

180:                                              ; preds = %178, %176, %174, %151, %159, %145
  %181 = phi i64 [ %61, %145 ], [ %61, %151 ], [ %179, %178 ], [ %170, %174 ], [ %170, %176 ], [ %155, %159 ]
  %182 = phi i32 [ %60, %145 ], [ -1, %151 ], [ -1, %178 ], [ %172, %174 ], [ %172, %176 ], [ -1, %159 ]
  %183 = icmp eq i64 %119, 0
  br i1 %183, label %218, label %184

184:                                              ; preds = %180
  %185 = mul nsw i64 %119, %20
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %50)
  store i64 %148, i64* %52, align 8
  store i32 %147, i32* %53, align 8
  %186 = call dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationmLEl(%"class.absl::Duration"* nonnull %51, i64 %185) #11
  %187 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %186, i64 0, i32 0
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %186, i64 0, i32 1
  %190 = load i32, i32* %189, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  store i64 %188, i64* %56, align 8
  store i32 %190, i32* %57, align 8
  %191 = call dereferenceable(16) %"class.absl::Duration"* @_ZN4absl8DurationdVEl(%"class.absl::Duration"* nonnull %55, i64 %118) #11
  %192 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %191, i64 0, i32 0
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %191, i64 0, i32 1
  %195 = load i32, i32* %194, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  %196 = icmp eq i32 %182, -1
  br i1 %196, label %218, label %197

197:                                              ; preds = %184
  %198 = icmp eq i32 %195, -1
  br i1 %198, label %218, label %199

199:                                              ; preds = %197
  %200 = add i64 %193, %181
  %201 = zext i32 %182 to i64
  %202 = zext i32 %195 to i64
  %203 = sub nsw i64 4000000000, %202
  %204 = icmp sgt i64 %203, %201
  %205 = add i32 %182, 294967296
  %206 = xor i1 %204, true
  %207 = zext i1 %206 to i64
  %208 = add i64 %200, %207
  %209 = select i1 %204, i32 %182, i32 %205
  %210 = add i32 %209, %195
  %211 = icmp slt i64 %193, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %199
  %213 = icmp sgt i64 %208, %181
  br i1 %213, label %216, label %218

214:                                              ; preds = %199
  %215 = icmp slt i64 %208, %181
  br i1 %215, label %216, label %218

216:                                              ; preds = %214, %212
  %217 = phi i64 [ 9223372036854775807, %214 ], [ -9223372036854775808, %212 ]
  br label %218

218:                                              ; preds = %216, %214, %212, %184, %197, %180
  %219 = phi i64 [ %181, %180 ], [ %181, %184 ], [ %217, %216 ], [ %208, %212 ], [ %208, %214 ], [ %193, %197 ]
  %220 = phi i32 [ %182, %180 ], [ -1, %184 ], [ -1, %216 ], [ %210, %212 ], [ %210, %214 ], [ -1, %197 ]
  %221 = icmp eq i8* %149, %44
  br i1 %221, label %222, label %58

222:                                              ; preds = %218
  %223 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 0
  store i64 %219, i64* %223, align 8
  %224 = getelementptr inbounds %"class.absl::Duration", %"class.absl::Duration"* %2, i64 0, i32 1
  store i32 %220, i32* %224, align 8
  br label %225

225:                                              ; preds = %88, %109, %140, %116, %71, %69, %3, %17, %222, %30, %24
  %226 = phi i1 [ true, %24 ], [ true, %30 ], [ false, %17 ], [ true, %222 ], [ false, %3 ], [ false, %69 ], [ false, %71 ], [ false, %116 ], [ false, %140 ], [ false, %109 ], [ false, %88 ]
  ret i1 %226
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl13AbslParseFlagENS_11string_viewEPNS_8DurationEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8*, i64, %"class.absl::Duration"* nocapture, %"class.std::__1::basic_string"* nocapture readnone) local_unnamed_addr #0 {
  %5 = tail call zeroext i1 @_ZN4absl13ParseDurationENS_11string_viewEPNS_8DurationE(i8* %0, i64 %1, %"class.absl::Duration"* %2)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl15AbslUnparseFlagENS_8DurationE(%"class.std::__1::basic_string"* noalias sret, i64, i32) local_unnamed_addr #0 {
  tail call void @_ZN4absl14FormatDurationENS_8DurationE(%"class.std::__1::basic_string"* sret %0, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl9ParseFlagERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_8DurationEPS6_(%"class.std::__1::basic_string"* dereferenceable(24), %"class.absl::Duration"* nocapture, %"class.std::__1::basic_string"* nocapture readnone) local_unnamed_addr #0 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = zext i8 %6 to i64
  %10 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  br label %18

11:                                               ; preds = %3
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp sgt i64 %15, -1
  br i1 %16, label %18, label %17, !prof !2

17:                                               ; preds = %11
  tail call void @llvm.trap() #11
  unreachable

18:                                               ; preds = %8, %11
  %19 = phi i64 [ %13, %11 ], [ %10, %8 ]
  %20 = phi i64 [ %15, %11 ], [ %9, %8 ]
  %21 = inttoptr i64 %19 to i8*
  %22 = tail call zeroext i1 @_ZN4absl13ParseDurationENS_11string_viewEPNS_8DurationE(i8* %21, i64 %20, %"class.absl::Duration"* %1)
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl11UnparseFlagENS_8DurationE(%"class.std::__1::basic_string"* noalias sret, i64, i32) local_unnamed_addr #0 {
  tail call void @_ZN4absl14FormatDurationENS_8DurationE(%"class.std::__1::basic_string"* sret %0, i64 %1, i32 %2)
  ret void
}

; Function Attrs: nofree nounwind
declare double @modf(double, double* nocapture) local_unnamed_addr #6

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
