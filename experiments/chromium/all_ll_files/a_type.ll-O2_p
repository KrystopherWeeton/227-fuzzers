; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_type.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_type.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.ASN1_VALUE_st = type opaque
%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ASN1_TYPE_get(%struct.asn1_type_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %4 [
    i32 1, label %8
    i32 5, label %8
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %1, %1, %4
  br label %9

9:                                                ; preds = %4, %8
  %10 = phi i32 [ %3, %8 ], [ 0, %4 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @asn1_type_value_as_pointer(%struct.asn1_type_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %10 [
    i32 1, label %4
    i32 5, label %13
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1
  %6 = bitcast %union.anon* %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i8* null, i8* inttoptr (i64 255 to i8*)
  br label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  br label %13

13:                                               ; preds = %1, %10, %4
  %14 = phi i8* [ %9, %4 ], [ %12, %10 ], [ null, %1 ]
  ret i8* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ASN1_TYPE_set(%struct.asn1_type_st*, i32, i8*) local_unnamed_addr #1 {
  %4 = alloca %struct.asn1_type_st*, align 8
  store %struct.asn1_type_st* %0, %struct.asn1_type_st** %4, align 8
  %5 = bitcast %struct.asn1_type_st** %4 to %struct.ASN1_VALUE_st**
  call void @ASN1_primitive_free(%struct.ASN1_VALUE_st** nonnull %5, %struct.ASN1_ITEM_st* null) #4
  %6 = load %struct.asn1_type_st*, %struct.asn1_type_st** %4, align 8
  %7 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %6, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = icmp eq i32 %1, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = icmp eq i8* %2, null
  %11 = select i1 %10, i32 0, i32 255
  %12 = load %struct.asn1_type_st*, %struct.asn1_type_st** %4, align 8
  %13 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %12, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i32*
  store i32 %11, i32* %14, align 8
  br label %18

15:                                               ; preds = %3
  %16 = load %struct.asn1_type_st*, %struct.asn1_type_st** %4, align 8
  %17 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %16, i64 0, i32 1, i32 0
  store i8* %2, i8** %17, align 8
  br label %18

18:                                               ; preds = %15, %9
  ret void
}

declare void @ASN1_primitive_free(%struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_TYPE_set1(%struct.asn1_type_st*, i32, i8*) local_unnamed_addr #1 {
  %4 = alloca %struct.asn1_type_st*, align 8
  %5 = alloca %struct.asn1_type_st*, align 8
  %6 = alloca %struct.asn1_type_st*, align 8
  %7 = icmp eq i8* %2, null
  %8 = icmp eq i32 %1, 1
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %24

10:                                               ; preds = %3
  %11 = bitcast %struct.asn1_type_st** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  store %struct.asn1_type_st* %0, %struct.asn1_type_st** %6, align 8
  %12 = bitcast %struct.asn1_type_st** %6 to %struct.ASN1_VALUE_st**
  call void @ASN1_primitive_free(%struct.ASN1_VALUE_st** nonnull %12, %struct.ASN1_ITEM_st* null) #4
  %13 = load %struct.asn1_type_st*, %struct.asn1_type_st** %6, align 8
  %14 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %13, i64 0, i32 0
  store i32 %1, i32* %14, align 8
  br i1 %8, label %15, label %20

15:                                               ; preds = %10
  %16 = select i1 %7, i32 0, i32 255
  %17 = load %struct.asn1_type_st*, %struct.asn1_type_st** %6, align 8
  %18 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %17, i64 0, i32 1
  %19 = bitcast %union.anon* %18 to i32*
  store i32 %16, i32* %19, align 8
  br label %23

20:                                               ; preds = %10
  %21 = load %struct.asn1_type_st*, %struct.asn1_type_st** %6, align 8
  %22 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %21, i64 0, i32 1, i32 0
  store i8* %2, i8** %22, align 8
  br label %23

23:                                               ; preds = %15, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  br label %50

24:                                               ; preds = %3
  %25 = icmp eq i32 %1, 6
  br i1 %25, label %26, label %38

26:                                               ; preds = %24
  %27 = bitcast i8* %2 to %struct.asn1_object_st*
  %28 = tail call %struct.asn1_object_st* @OBJ_dup(%struct.asn1_object_st* %27) #4
  %29 = icmp eq %struct.asn1_object_st* %28, null
  br i1 %29, label %50, label %30

30:                                               ; preds = %26
  %31 = bitcast %struct.asn1_type_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31)
  store %struct.asn1_type_st* %0, %struct.asn1_type_st** %5, align 8
  %32 = bitcast %struct.asn1_type_st** %5 to %struct.ASN1_VALUE_st**
  call void @ASN1_primitive_free(%struct.ASN1_VALUE_st** nonnull %32, %struct.ASN1_ITEM_st* null) #4
  %33 = load %struct.asn1_type_st*, %struct.asn1_type_st** %5, align 8
  %34 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %33, i64 0, i32 0
  store i32 6, i32* %34, align 8
  %35 = load %struct.asn1_type_st*, %struct.asn1_type_st** %5, align 8
  %36 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %35, i64 0, i32 1, i32 0
  %37 = bitcast i8** %36 to %struct.asn1_object_st**
  store %struct.asn1_object_st* %28, %struct.asn1_object_st** %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31)
  br label %50

38:                                               ; preds = %24
  %39 = bitcast i8* %2 to %struct.asn1_string_st*
  %40 = tail call %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st* %39) #4
  %41 = icmp eq %struct.asn1_string_st* %40, null
  br i1 %41, label %50, label %42

42:                                               ; preds = %38
  %43 = bitcast %struct.asn1_type_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43)
  store %struct.asn1_type_st* %0, %struct.asn1_type_st** %4, align 8
  %44 = bitcast %struct.asn1_type_st** %4 to %struct.ASN1_VALUE_st**
  call void @ASN1_primitive_free(%struct.ASN1_VALUE_st** nonnull %44, %struct.ASN1_ITEM_st* null) #4
  %45 = load %struct.asn1_type_st*, %struct.asn1_type_st** %4, align 8
  %46 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %45, i64 0, i32 0
  store i32 %1, i32* %46, align 8
  %47 = load %struct.asn1_type_st*, %struct.asn1_type_st** %4, align 8
  %48 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %47, i64 0, i32 1, i32 0
  %49 = bitcast i8** %48 to %struct.asn1_string_st**
  store %struct.asn1_string_st* %40, %struct.asn1_string_st** %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  br label %50

50:                                               ; preds = %23, %30, %42, %38, %26
  %51 = phi i32 [ 0, %26 ], [ 0, %38 ], [ 1, %42 ], [ 1, %30 ], [ 1, %23 ]
  ret i32 %51
}

declare %struct.asn1_object_st* @OBJ_dup(%struct.asn1_object_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_TYPE_cmp(%struct.asn1_type_st* readonly, %struct.asn1_type_st* readonly) local_unnamed_addr #1 {
  %3 = icmp ne %struct.asn1_type_st* %0, null
  %4 = icmp ne %struct.asn1_type_st* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %37

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %37

12:                                               ; preds = %6
  switch i32 %8, label %29 [
    i32 6, label %13
    i32 5, label %37
    i32 1, label %21
  ]

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to %struct.asn1_object_st**
  %16 = load %struct.asn1_object_st*, %struct.asn1_object_st** %15, align 8
  %17 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %1, i64 0, i32 1
  %18 = bitcast %union.anon* %17 to %struct.asn1_object_st**
  %19 = load %struct.asn1_object_st*, %struct.asn1_object_st** %18, align 8
  %20 = tail call i32 @OBJ_cmp(%struct.asn1_object_st* %16, %struct.asn1_object_st* %19) #4
  br label %37

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %1, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = sub nsw i32 %24, %27
  br label %37

29:                                               ; preds = %12
  %30 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %0, i64 0, i32 1
  %31 = bitcast %union.anon* %30 to %struct.asn1_string_st**
  %32 = load %struct.asn1_string_st*, %struct.asn1_string_st** %31, align 8
  %33 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %1, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to %struct.asn1_string_st**
  %35 = load %struct.asn1_string_st*, %struct.asn1_string_st** %34, align 8
  %36 = tail call i32 @ASN1_STRING_cmp(%struct.asn1_string_st* %32, %struct.asn1_string_st* %35) #4
  br label %37

37:                                               ; preds = %13, %21, %29, %12, %2, %6
  %38 = phi i32 [ -1, %6 ], [ -1, %2 ], [ %36, %29 ], [ %28, %21 ], [ %20, %13 ], [ 0, %12 ]
  ret i32 %38
}

declare i32 @OBJ_cmp(%struct.asn1_object_st*, %struct.asn1_object_st*) local_unnamed_addr #2

declare i32 @ASN1_STRING_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
