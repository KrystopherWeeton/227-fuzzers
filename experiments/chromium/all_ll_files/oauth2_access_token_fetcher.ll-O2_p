; ModuleID = '../../google_apis/gaia/oauth2_access_token_fetcher.cc'
source_filename = "../../google_apis/gaia/oauth2_access_token_fetcher.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.OAuth2AccessTokenFetcher = type { i32 (...)**, %class.OAuth2AccessTokenConsumer* }
%class.OAuth2AccessTokenConsumer = type { i32 (...)** }
%"struct.OAuth2AccessTokenConsumer::TokenResponse" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.GoogleServiceAuthError = type opaque

@_ZTV24OAuth2AccessTokenFetcher = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.OAuth2AccessTokenFetcher*)* @_ZN24OAuth2AccessTokenFetcherD2Ev to i8*), i8* bitcast (void (%class.OAuth2AccessTokenFetcher*)* @_ZN24OAuth2AccessTokenFetcherD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN24OAuth2AccessTokenFetcherD1Ev = hidden unnamed_addr alias void (%class.OAuth2AccessTokenFetcher*), void (%class.OAuth2AccessTokenFetcher*)* @_ZN24OAuth2AccessTokenFetcherD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN24OAuth2AccessTokenFetcherC2EP25OAuth2AccessTokenConsumer(%class.OAuth2AccessTokenFetcher* nocapture, %class.OAuth2AccessTokenConsumer*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.OAuth2AccessTokenFetcher, %class.OAuth2AccessTokenFetcher* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV24OAuth2AccessTokenFetcher, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.OAuth2AccessTokenFetcher, %class.OAuth2AccessTokenFetcher* %0, i64 0, i32 1
  store %class.OAuth2AccessTokenConsumer* %1, %class.OAuth2AccessTokenConsumer** %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN24OAuth2AccessTokenFetcherD2Ev(%class.OAuth2AccessTokenFetcher* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN24OAuth2AccessTokenFetcherD0Ev(%class.OAuth2AccessTokenFetcher* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #5
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24OAuth2AccessTokenFetcher21FireOnGetTokenSuccessERKN25OAuth2AccessTokenConsumer13TokenResponseE(%class.OAuth2AccessTokenFetcher* nocapture readonly, %"struct.OAuth2AccessTokenConsumer::TokenResponse"* dereferenceable(80)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.OAuth2AccessTokenFetcher, %class.OAuth2AccessTokenFetcher* %0, i64 0, i32 1
  %4 = load %class.OAuth2AccessTokenConsumer*, %class.OAuth2AccessTokenConsumer** %3, align 8
  %5 = bitcast %class.OAuth2AccessTokenConsumer* %4 to void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)***
  %6 = load void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)**, void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)*** %5, align 8
  %7 = getelementptr inbounds void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)*, void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)** %6, i64 2
  %8 = load void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)*, void (%class.OAuth2AccessTokenConsumer*, %"struct.OAuth2AccessTokenConsumer::TokenResponse"*)** %7, align 8
  tail call void %8(%class.OAuth2AccessTokenConsumer* %4, %"struct.OAuth2AccessTokenConsumer::TokenResponse"* dereferenceable(80) %1) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24OAuth2AccessTokenFetcher21FireOnGetTokenFailureERK22GoogleServiceAuthError(%class.OAuth2AccessTokenFetcher* nocapture readonly, %class.GoogleServiceAuthError*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.OAuth2AccessTokenFetcher, %class.OAuth2AccessTokenFetcher* %0, i64 0, i32 1
  %4 = load %class.OAuth2AccessTokenConsumer*, %class.OAuth2AccessTokenConsumer** %3, align 8
  %5 = bitcast %class.OAuth2AccessTokenConsumer* %4 to void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)***
  %6 = load void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)**, void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)*** %5, align 8
  %7 = getelementptr inbounds void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)*, void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)** %6, i64 3
  %8 = load void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)*, void (%class.OAuth2AccessTokenConsumer*, %class.GoogleServiceAuthError*)** %7, align 8
  tail call void %8(%class.OAuth2AccessTokenConsumer* %4, %class.GoogleServiceAuthError* %1) #6
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
