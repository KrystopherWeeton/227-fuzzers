; ModuleID = '../../net/third_party/quiche/src/spdy/core/recording_headers_handler.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/recording_headers_handler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.spdy::RecordingHeadersHandler" = type { %"class.spdy::SpdyHeadersHandlerInterface", %"class.spdy::SpdyHeadersHandlerInterface"*, %"class.spdy::Http2HeaderBlock", i64, i64 }
%"class.spdy::SpdyHeadersHandlerInterface" = type { i32 (...)** }
%"class.spdy::Http2HeaderBlock" = type { %"class.quiche::QuicheLinkedHashMap", %"class.spdy::SpdyHeaderStorage", i64, i64 }
%"class.quiche::QuicheLinkedHashMap" = type { %"class.absl::node_hash_map", %"class.std::__1::list" }
%"class.absl::node_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"struct.std::__1::pair"**, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"struct.std::__1::pair" = type { %"class.absl::string_view", %"class.std::__1::__list_iterator" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.spdy::SpdyHeaderStorage" = type { %"class.spdy::SpdySimpleArena" }
%"class.spdy::SpdySimpleArena" = type { i64, %"class.std::__1::vector", %"class.spdy::SpdySimpleArena::Status" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spdy::SpdySimpleArena::Block"*, %"struct.spdy::SpdySimpleArena::Block"*, %"class.std::__1::__compressed_pair.10" }
%"struct.spdy::SpdySimpleArena::Block" = type { %"class.std::__1::unique_ptr", i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i8* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.spdy::SpdySimpleArena::Block"* }
%"class.spdy::SpdySimpleArena::Status" = type { i64 }

$_ZN4spdy23RecordingHeadersHandlerD2Ev = comdat any

$_ZN4spdy23RecordingHeadersHandlerD0Ev = comdat any

@_ZTVN4spdy23RecordingHeadersHandlerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spdy::RecordingHeadersHandler"*)* @_ZN4spdy23RecordingHeadersHandlerD2Ev to i8*), i8* bitcast (void (%"class.spdy::RecordingHeadersHandler"*)* @_ZN4spdy23RecordingHeadersHandlerD0Ev to i8*), i8* bitcast (void (%"class.spdy::RecordingHeadersHandler"*)* @_ZN4spdy23RecordingHeadersHandler18OnHeaderBlockStartEv to i8*), i8* bitcast (void (%"class.spdy::RecordingHeadersHandler"*, i8*, i64, i8*, i64)* @_ZN4spdy23RecordingHeadersHandler8OnHeaderEN4absl11string_viewES2_ to i8*), i8* bitcast (void (%"class.spdy::RecordingHeadersHandler"*, i64, i64)* @_ZN4spdy23RecordingHeadersHandler16OnHeaderBlockEndEmm to i8*)] }, align 8

@_ZN4spdy23RecordingHeadersHandlerC1EPNS_27SpdyHeadersHandlerInterfaceE = hidden unnamed_addr alias void (%"class.spdy::RecordingHeadersHandler"*, %"class.spdy::SpdyHeadersHandlerInterface"*), void (%"class.spdy::RecordingHeadersHandler"*, %"class.spdy::SpdyHeadersHandlerInterface"*)* @_ZN4spdy23RecordingHeadersHandlerC2EPNS_27SpdyHeadersHandlerInterfaceE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy23RecordingHeadersHandlerC2EPNS_27SpdyHeadersHandlerInterfaceE(%"class.spdy::RecordingHeadersHandler"*, %"class.spdy::SpdyHeadersHandlerInterface"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4spdy23RecordingHeadersHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 1
  store %"class.spdy::SpdyHeadersHandlerInterface"* %1, %"class.spdy::SpdyHeadersHandlerInterface"** %4, align 8
  %5 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 2
  tail call void @_ZN4spdy16Http2HeaderBlockC1Ev(%"class.spdy::Http2HeaderBlock"* %5) #6
  %6 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 3
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  ret void
}

declare void @_ZN4spdy16Http2HeaderBlockC1Ev(%"class.spdy::Http2HeaderBlock"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy23RecordingHeadersHandler18OnHeaderBlockStartEv(%"class.spdy::RecordingHeadersHandler"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 2
  tail call void @_ZN4spdy16Http2HeaderBlock5clearEv(%"class.spdy::Http2HeaderBlock"* %2) #6
  %3 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 1
  %4 = load %"class.spdy::SpdyHeadersHandlerInterface"*, %"class.spdy::SpdyHeadersHandlerInterface"** %3, align 8
  %5 = icmp eq %"class.spdy::SpdyHeadersHandlerInterface"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.spdy::SpdyHeadersHandlerInterface"* %4 to void (%"class.spdy::SpdyHeadersHandlerInterface"*)***
  %8 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*)**, void (%"class.spdy::SpdyHeadersHandlerInterface"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.spdy::SpdyHeadersHandlerInterface"*)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*)** %8, i64 2
  %10 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*)** %9, align 8
  tail call void %10(%"class.spdy::SpdyHeadersHandlerInterface"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

declare void @_ZN4spdy16Http2HeaderBlock5clearEv(%"class.spdy::Http2HeaderBlock"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy23RecordingHeadersHandler8OnHeaderEN4absl11string_viewES2_(%"class.spdy::RecordingHeadersHandler"*, i8*, i64, i8*, i64) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 2
  tail call void @_ZN4spdy16Http2HeaderBlock22AppendValueOrAddHeaderEN4absl11string_viewES2_(%"class.spdy::Http2HeaderBlock"* %6, i8* %1, i64 %2, i8* %3, i64 %4) #6
  %7 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 1
  %8 = load %"class.spdy::SpdyHeadersHandlerInterface"*, %"class.spdy::SpdyHeadersHandlerInterface"** %7, align 8
  %9 = icmp eq %"class.spdy::SpdyHeadersHandlerInterface"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %5
  %11 = bitcast %"class.spdy::SpdyHeadersHandlerInterface"* %8 to void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)***
  %12 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)**, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)** %12, i64 3
  %14 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i8*, i64, i8*, i64)** %13, align 8
  tail call void %14(%"class.spdy::SpdyHeadersHandlerInterface"* nonnull %8, i8* %1, i64 %2, i8* %3, i64 %4) #6
  br label %15

15:                                               ; preds = %5, %10
  ret void
}

declare void @_ZN4spdy16Http2HeaderBlock22AppendValueOrAddHeaderEN4absl11string_viewES2_(%"class.spdy::Http2HeaderBlock"*, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy23RecordingHeadersHandler16OnHeaderBlockEndEmm(%"class.spdy::RecordingHeadersHandler"* nocapture, i64, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 3
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 4
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 1
  %7 = load %"class.spdy::SpdyHeadersHandlerInterface"*, %"class.spdy::SpdyHeadersHandlerInterface"** %6, align 8
  %8 = icmp eq %"class.spdy::SpdyHeadersHandlerInterface"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.spdy::SpdyHeadersHandlerInterface"* %7 to void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)***
  %11 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)**, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)** %11, i64 4
  %13 = load void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)*, void (%"class.spdy::SpdyHeadersHandlerInterface"*, i64, i64)** %12, align 8
  tail call void %13(%"class.spdy::SpdyHeadersHandlerInterface"* nonnull %7, i64 %1, i64 %2) #6
  br label %14

14:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4spdy23RecordingHeadersHandlerD2Ev(%"class.spdy::RecordingHeadersHandler"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4spdy23RecordingHeadersHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 2
  tail call void @_ZN4spdy16Http2HeaderBlockD1Ev(%"class.spdy::Http2HeaderBlock"* %3) #6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4spdy23RecordingHeadersHandlerD0Ev(%"class.spdy::RecordingHeadersHandler"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4spdy23RecordingHeadersHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spdy::RecordingHeadersHandler", %"class.spdy::RecordingHeadersHandler"* %0, i64 0, i32 2
  tail call void @_ZN4spdy16Http2HeaderBlockD1Ev(%"class.spdy::Http2HeaderBlock"* %3) #6
  %4 = bitcast %"class.spdy::RecordingHeadersHandler"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4spdy16Http2HeaderBlockD1Ev(%"class.spdy::Http2HeaderBlock"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
