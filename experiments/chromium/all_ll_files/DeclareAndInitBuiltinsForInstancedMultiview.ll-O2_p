; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/DeclareAndInitBuiltinsForInstancedMultiview.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/DeclareAndInitBuiltinsForInstancedMultiview.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

@_ZN2sh12_GLOBAL__N_119kViewIDVariableNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i64 10 }, align 8
@_ZN2sh12_GLOBAL__N_123kInstanceIDVariableNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i64 10 }, align 8
@_ZN2sh12_GLOBAL__N_140kMultiviewBaseViewLayerIndexVariableNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0), i64 27 }, align 8
@.str = private unnamed_addr constant [11 x i8] c"ViewID_OVR\00", align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 3, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"InstanceID\00", align 1
@_ZTVN2sh20TIntermConstantUnionE = external unnamed_addr constant { [34 x i8*] }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE6ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE6ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 3, i32 6, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE6ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@.str.4 = private unnamed_addr constant [28 x i8] c"multiviewBaseViewLayerIndex\00", align 1
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh43DeclareAndInitBuiltinsForInstancedMultiviewEPNS_9TCompilerEPNS_12TIntermBlockEjjm14ShShaderOutputPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, i32, i32, i64, i32, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %8 = alloca %"class.sh::TVector.31", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TType", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TVector.31", align 8
  %13 = alloca %"class.sh::TType", align 8
  %14 = alloca %"class.sh::TVector.31", align 8
  %15 = alloca %"class.sh::TType", align 8
  %16 = alloca %"class.sh::TVector.31", align 16
  %17 = alloca %"class.sh::TIntermNode"*, align 8
  %18 = icmp eq i32 %3, 35633
  %19 = select i1 %18, i32 45, i32 50
  %20 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %21 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %20, i64 40) #4
  %22 = bitcast i8* %21 to %"class.sh::TVariable"*
  %23 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %24 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %23, i64 184) #4
  %25 = bitcast i8* %24 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %25, i32 4, i32 3, i32 %19, i8 zeroext 1, i8 zeroext 1) #4
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %22, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_119kViewIDVariableNameE, %"class.sh::TType"* %25, i8 zeroext 2, i8 zeroext 0) #4
  tail call void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %22) #4
  %26 = tail call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_ViewID_OVREv() #4
  %27 = tail call zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %26, %"class.sh::TVariable"* %22) #4
  br i1 %27, label %28, label %1487

28:                                               ; preds = %7
  br i1 %18, label %29, label %1484

29:                                               ; preds = %28
  %30 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %31 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %30, i64 40) #4
  %32 = bitcast i8* %31 to %"class.sh::TVariable"*
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %32, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_123kInstanceIDVariableNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #4
  tail call void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %32) #4
  %33 = tail call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_InstanceIDEv() #4
  %34 = tail call zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %33, %"class.sh::TVariable"* %32) #4
  br i1 %34, label %35, label %1487

35:                                               ; preds = %29
  %36 = bitcast %"class.sh::TVector.31"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #4
  %37 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %16, i64 0, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %16, i64 0, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %16, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 24, i1 false) #4
  %40 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %40, i64 8) #4
  %42 = bitcast i8* %41 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %42) #4
  %43 = bitcast i8* %41 to i32*
  store i32 %2, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 4, i32* %45, align 4
  %46 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %47 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %46, i64 216) #4
  %48 = bitcast i8* %47 to %"class.sh::TIntermConstantUnion"*
  %49 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %49) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %11, i32 4, i32 3, i32 2, i8 zeroext 1, i8 zeroext 1) #4
  %50 = bitcast i8* %47 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %50, %"class.sh::TType"* nonnull dereferenceable(184) %11) #4
  %51 = bitcast i8* %47 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %51, align 8
  %52 = getelementptr inbounds i8, i8* %47, i64 208
  %53 = bitcast i8* %52 to i8**
  store i8* %41, i8** %53, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %49) #4
  %54 = bitcast %"class.sh::TVector.31"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54) #4
  %55 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %12, i64 0, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %12, i64 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %12, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 0, i64 24, i1 false) #4
  %58 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %59 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %58, i64 32) #4
  %60 = bitcast i8* %59 to %"class.sh::TIntermSymbol"*
  %61 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_InstanceIDEv() #4
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %60, %"class.sh::TVariable"* %61) #4
  %62 = ptrtoint i8* %59 to i64
  %63 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  %64 = bitcast %"class.sh::TVector.31"* %12 to i64*
  %65 = bitcast %"class.sh::TIntermNode"*** %57 to i64*
  %66 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %67 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %66, i64 8) #4
  %68 = bitcast i8* %67 to %"class.sh::TIntermNode"**
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  %70 = ptrtoint i8* %69 to i64
  %71 = bitcast i8* %67 to i64*
  store i64 %62, i64* %71, align 8
  %72 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %55, align 8
  %73 = ptrtoint %"class.sh::TIntermNode"** %72 to i64
  %74 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %56, align 8
  %75 = bitcast %"class.sh::TIntermNode"** %74 to i8*
  %76 = icmp eq %"class.sh::TIntermNode"** %74, %72
  br i1 %76, label %250, label %77

77:                                               ; preds = %35
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %79 = ptrtoint %"class.sh::TIntermNode"** %78 to i64
  %80 = sub i64 %79, %73
  %81 = lshr i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = icmp ult i64 %82, 4
  br i1 %83, label %180, label %84

84:                                               ; preds = %77
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %86 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %87 = sub i64 %86, %73
  %88 = lshr i64 %87, 3
  %89 = and i64 %87, -8
  %90 = xor i64 %89, -8
  %91 = getelementptr i8, i8* %67, i64 %90
  %92 = xor i64 %88, -1
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %92
  %94 = bitcast %"class.sh::TIntermNode"** %93 to i8*
  %95 = icmp ult i8* %91, %75
  %96 = icmp ugt i8* %67, %94
  %97 = and i1 %95, %96
  br i1 %97, label %180, label %98

98:                                               ; preds = %84
  %99 = and i64 %82, 4611686018427387900
  %100 = sub nsw i64 0, %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 %100
  %102 = sub nsw i64 0, %99
  %103 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %102
  %104 = add nsw i64 %99, -4
  %105 = lshr exact i64 %104, 2
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 1
  %108 = icmp eq i64 %104, 0
  br i1 %108, label %155, label %109

109:                                              ; preds = %98
  %110 = sub nuw nsw i64 %106, %107
  %111 = getelementptr i8, i8* %67, i64 -8
  %112 = bitcast i8* %111 to %"class.sh::TIntermNode"**
  %113 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %114 = getelementptr i8, i8* %67, i64 -8
  %115 = bitcast i8* %114 to %"class.sh::TIntermNode"**
  %116 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  br label %117

117:                                              ; preds = %117, %109
  %118 = phi i64 [ 0, %109 ], [ %152, %117 ]
  %119 = phi i64 [ %110, %109 ], [ %153, %117 ]
  %120 = sub i64 0, %118
  %121 = sub i64 0, %118
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 %120
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 %121
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 -1
  %125 = bitcast %"class.sh::TIntermNode"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !2
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 -2
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %132, align 8, !alias.scope !5, !noalias !2
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -2
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 -1
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %135, align 8, !alias.scope !5, !noalias !2
  %136 = sub nuw nsw i64 -4, %118
  %137 = sub nuw nsw i64 -4, %118
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 %136
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %137
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 -1
  %141 = bitcast %"class.sh::TIntermNode"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !2
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 -2
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -1
  %145 = bitcast %"class.sh::TIntermNode"** %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8, !alias.scope !2
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 -1
  %148 = bitcast %"class.sh::TIntermNode"** %147 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %148, align 8, !alias.scope !5, !noalias !2
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 -2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %151, align 8, !alias.scope !5, !noalias !2
  %152 = add i64 %118, 8
  %153 = add i64 %119, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %117, !llvm.loop !7

155:                                              ; preds = %117, %98
  %156 = phi i64 [ 0, %98 ], [ %152, %117 ]
  %157 = icmp eq i64 %107, 0
  br i1 %157, label %178, label %158

158:                                              ; preds = %155
  %159 = sub i64 0, %156
  %160 = getelementptr i8, i8* %67, i64 -8
  %161 = bitcast i8* %160 to %"class.sh::TIntermNode"**
  %162 = sub i64 0, %156
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 %159
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 %162
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !2
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -2
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %171 = bitcast %"class.sh::TIntermNode"** %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %174, align 8, !alias.scope !5, !noalias !2
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %177 = bitcast %"class.sh::TIntermNode"** %176 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %177, align 8, !alias.scope !5, !noalias !2
  br label %178

178:                                              ; preds = %155, %158
  %179 = icmp eq i64 %82, %99
  br i1 %179, label %250, label %180

180:                                              ; preds = %178, %84, %77
  %181 = phi %"class.sh::TIntermNode"** [ %68, %84 ], [ %68, %77 ], [ %101, %178 ]
  %182 = phi %"class.sh::TIntermNode"** [ %74, %84 ], [ %74, %77 ], [ %103, %178 ]
  %183 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = ptrtoint %"class.sh::TIntermNode"** %183 to i64
  %185 = sub i64 %184, %73
  %186 = lshr i64 %185, 3
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %180, %190
  %191 = phi %"class.sh::TIntermNode"** [ %194, %190 ], [ %181, %180 ]
  %192 = phi %"class.sh::TIntermNode"** [ %195, %190 ], [ %182, %180 ]
  %193 = phi i64 [ %199, %190 ], [ %188, %180 ]
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 -1
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 -1
  %196 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = add i64 %193, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !9

201:                                              ; preds = %190, %180
  %202 = phi %"class.sh::TIntermNode"** [ undef, %180 ], [ %194, %190 ]
  %203 = phi %"class.sh::TIntermNode"** [ %181, %180 ], [ %194, %190 ]
  %204 = phi %"class.sh::TIntermNode"** [ %182, %180 ], [ %195, %190 ]
  %205 = icmp ult i64 %185, 56
  br i1 %205, label %250, label %206

206:                                              ; preds = %201, %206
  %207 = phi %"class.sh::TIntermNode"** [ %244, %206 ], [ %203, %201 ]
  %208 = phi %"class.sh::TIntermNode"** [ %245, %206 ], [ %204, %201 ]
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -1
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -1
  %211 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -2
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -2
  %216 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -3
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -3
  %221 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TIntermNode"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -4
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -4
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.sh::TIntermNode"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -5
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -5
  %231 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.sh::TIntermNode"** %229 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -6
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -6
  %236 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.sh::TIntermNode"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -7
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -7
  %241 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.sh::TIntermNode"** %239 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -8
  %246 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.sh::TIntermNode"** %244 to i64*
  store i64 %247, i64* %248, align 8
  %249 = icmp eq %"class.sh::TIntermNode"** %245, %72
  br i1 %249, label %250, label %206, !llvm.loop !11

250:                                              ; preds = %201, %206, %178, %35
  %251 = phi %"class.sh::TIntermNode"** [ %68, %35 ], [ %101, %178 ], [ %202, %201 ], [ %244, %206 ]
  %252 = ptrtoint %"class.sh::TIntermNode"** %251 to i64
  store i64 %252, i64* %64, align 8
  store i64 %70, i64* %63, align 8
  store i64 %70, i64* %65, align 8
  %253 = bitcast %"class.sh::TType"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %253) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %13, i32 4, i32 3, i32 0, i8 zeroext 1, i8 zeroext 1) #4
  %254 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %13, %"class.sh::TVector.31"* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %253) #4
  %255 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %256 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %255, i64 240) #4
  %257 = bitcast i8* %256 to %"class.sh::TIntermBinary"*
  %258 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %254, i64 0, i32 0, i32 0, i32 0
  %259 = bitcast i8* %47 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %257, i8 zeroext 16, %"class.sh::TIntermTyped"* %258, %"class.sh::TIntermTyped"* %259) #4
  %260 = bitcast %"class.sh::TVector.31"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %260) #4
  %261 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %14, i64 0, i32 0, i32 0, i32 0
  %262 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %14, i64 0, i32 0, i32 0, i32 1
  %263 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %14, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %260, i8 0, i64 24, i1 false) #4
  %264 = ptrtoint i8* %256 to i64
  %265 = bitcast %"class.sh::TIntermNode"*** %262 to i64*
  %266 = bitcast %"class.sh::TVector.31"* %14 to i64*
  %267 = bitcast %"class.sh::TIntermNode"*** %263 to i64*
  %268 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %269 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %268, i64 8) #4
  %270 = bitcast i8* %269 to %"class.sh::TIntermNode"**
  %271 = getelementptr inbounds i8, i8* %269, i64 8
  %272 = ptrtoint i8* %271 to i64
  %273 = bitcast i8* %269 to i64*
  store i64 %264, i64* %273, align 8
  %274 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %261, align 8
  %275 = ptrtoint %"class.sh::TIntermNode"** %274 to i64
  %276 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %262, align 8
  %277 = bitcast %"class.sh::TIntermNode"** %276 to i8*
  %278 = icmp eq %"class.sh::TIntermNode"** %276, %274
  br i1 %278, label %452, label %279

279:                                              ; preds = %250
  %280 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 -1
  %281 = ptrtoint %"class.sh::TIntermNode"** %280 to i64
  %282 = sub i64 %281, %275
  %283 = lshr i64 %282, 3
  %284 = add nuw nsw i64 %283, 1
  %285 = icmp ult i64 %284, 4
  br i1 %285, label %382, label %286

286:                                              ; preds = %279
  %287 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 -1
  %288 = ptrtoint %"class.sh::TIntermNode"** %287 to i64
  %289 = sub i64 %288, %275
  %290 = lshr i64 %289, 3
  %291 = and i64 %289, -8
  %292 = xor i64 %291, -8
  %293 = getelementptr i8, i8* %269, i64 %292
  %294 = xor i64 %290, -1
  %295 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 %294
  %296 = bitcast %"class.sh::TIntermNode"** %295 to i8*
  %297 = icmp ult i8* %293, %277
  %298 = icmp ugt i8* %269, %296
  %299 = and i1 %297, %298
  br i1 %299, label %382, label %300

300:                                              ; preds = %286
  %301 = and i64 %284, 4611686018427387900
  %302 = sub nsw i64 0, %301
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 %302
  %304 = sub nsw i64 0, %301
  %305 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 %304
  %306 = add nsw i64 %301, -4
  %307 = lshr exact i64 %306, 2
  %308 = add nuw nsw i64 %307, 1
  %309 = and i64 %308, 1
  %310 = icmp eq i64 %306, 0
  br i1 %310, label %357, label %311

311:                                              ; preds = %300
  %312 = sub nuw nsw i64 %308, %309
  %313 = getelementptr i8, i8* %269, i64 -8
  %314 = bitcast i8* %313 to %"class.sh::TIntermNode"**
  %315 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 -1
  %316 = getelementptr i8, i8* %269, i64 -8
  %317 = bitcast i8* %316 to %"class.sh::TIntermNode"**
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 -1
  br label %319

319:                                              ; preds = %319, %311
  %320 = phi i64 [ 0, %311 ], [ %354, %319 ]
  %321 = phi i64 [ %312, %311 ], [ %355, %319 ]
  %322 = sub i64 0, %320
  %323 = sub i64 0, %320
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 %322
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %315, i64 %323
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 -1
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  %328 = load <2 x i64>, <2 x i64>* %327, align 8, !alias.scope !12
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 -2
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 -1
  %331 = bitcast %"class.sh::TIntermNode"** %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 8, !alias.scope !12
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %334 = bitcast %"class.sh::TIntermNode"** %333 to <2 x i64>*
  store <2 x i64> %328, <2 x i64>* %334, align 8, !alias.scope !15, !noalias !12
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -2
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %337 = bitcast %"class.sh::TIntermNode"** %336 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %337, align 8, !alias.scope !15, !noalias !12
  %338 = sub nuw nsw i64 -4, %320
  %339 = sub nuw nsw i64 -4, %320
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %317, i64 %338
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 %339
  %342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %343 = bitcast %"class.sh::TIntermNode"** %342 to <2 x i64>*
  %344 = load <2 x i64>, <2 x i64>* %343, align 8, !alias.scope !12
  %345 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -2
  %346 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 -1
  %347 = bitcast %"class.sh::TIntermNode"** %346 to <2 x i64>*
  %348 = load <2 x i64>, <2 x i64>* %347, align 8, !alias.scope !12
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %350 = bitcast %"class.sh::TIntermNode"** %349 to <2 x i64>*
  store <2 x i64> %344, <2 x i64>* %350, align 8, !alias.scope !15, !noalias !12
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -2
  %352 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %351, i64 -1
  %353 = bitcast %"class.sh::TIntermNode"** %352 to <2 x i64>*
  store <2 x i64> %348, <2 x i64>* %353, align 8, !alias.scope !15, !noalias !12
  %354 = add i64 %320, 8
  %355 = add i64 %321, -2
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %319, !llvm.loop !17

357:                                              ; preds = %319, %300
  %358 = phi i64 [ 0, %300 ], [ %354, %319 ]
  %359 = icmp eq i64 %309, 0
  br i1 %359, label %380, label %360

360:                                              ; preds = %357
  %361 = sub i64 0, %358
  %362 = getelementptr i8, i8* %269, i64 -8
  %363 = bitcast i8* %362 to %"class.sh::TIntermNode"**
  %364 = sub i64 0, %358
  %365 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %276, i64 -1
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 %361
  %367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %364
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 -1
  %369 = bitcast %"class.sh::TIntermNode"** %368 to <2 x i64>*
  %370 = load <2 x i64>, <2 x i64>* %369, align 8, !alias.scope !12
  %371 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 -2
  %372 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %371, i64 -1
  %373 = bitcast %"class.sh::TIntermNode"** %372 to <2 x i64>*
  %374 = load <2 x i64>, <2 x i64>* %373, align 8, !alias.scope !12
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 -1
  %376 = bitcast %"class.sh::TIntermNode"** %375 to <2 x i64>*
  store <2 x i64> %370, <2 x i64>* %376, align 8, !alias.scope !15, !noalias !12
  %377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 -2
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %379 = bitcast %"class.sh::TIntermNode"** %378 to <2 x i64>*
  store <2 x i64> %374, <2 x i64>* %379, align 8, !alias.scope !15, !noalias !12
  br label %380

380:                                              ; preds = %357, %360
  %381 = icmp eq i64 %284, %301
  br i1 %381, label %452, label %382

382:                                              ; preds = %380, %286, %279
  %383 = phi %"class.sh::TIntermNode"** [ %270, %286 ], [ %270, %279 ], [ %303, %380 ]
  %384 = phi %"class.sh::TIntermNode"** [ %276, %286 ], [ %276, %279 ], [ %305, %380 ]
  %385 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %386 = ptrtoint %"class.sh::TIntermNode"** %385 to i64
  %387 = sub i64 %386, %275
  %388 = lshr i64 %387, 3
  %389 = add nuw nsw i64 %388, 1
  %390 = and i64 %389, 7
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %403, label %392

392:                                              ; preds = %382, %392
  %393 = phi %"class.sh::TIntermNode"** [ %396, %392 ], [ %383, %382 ]
  %394 = phi %"class.sh::TIntermNode"** [ %397, %392 ], [ %384, %382 ]
  %395 = phi i64 [ %401, %392 ], [ %390, %382 ]
  %396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 -1
  %398 = bitcast %"class.sh::TIntermNode"** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = bitcast %"class.sh::TIntermNode"** %396 to i64*
  store i64 %399, i64* %400, align 8
  %401 = add i64 %395, -1
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %403, label %392, !llvm.loop !18

403:                                              ; preds = %392, %382
  %404 = phi %"class.sh::TIntermNode"** [ undef, %382 ], [ %396, %392 ]
  %405 = phi %"class.sh::TIntermNode"** [ %383, %382 ], [ %396, %392 ]
  %406 = phi %"class.sh::TIntermNode"** [ %384, %382 ], [ %397, %392 ]
  %407 = icmp ult i64 %387, 56
  br i1 %407, label %452, label %408

408:                                              ; preds = %403, %408
  %409 = phi %"class.sh::TIntermNode"** [ %446, %408 ], [ %405, %403 ]
  %410 = phi %"class.sh::TIntermNode"** [ %447, %408 ], [ %406, %403 ]
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -1
  %413 = bitcast %"class.sh::TIntermNode"** %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %"class.sh::TIntermNode"** %411 to i64*
  store i64 %414, i64* %415, align 8
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -2
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -2
  %418 = bitcast %"class.sh::TIntermNode"** %417 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.sh::TIntermNode"** %416 to i64*
  store i64 %419, i64* %420, align 8
  %421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -3
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -3
  %423 = bitcast %"class.sh::TIntermNode"** %422 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.sh::TIntermNode"** %421 to i64*
  store i64 %424, i64* %425, align 8
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -4
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -4
  %428 = bitcast %"class.sh::TIntermNode"** %427 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  store i64 %429, i64* %430, align 8
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -5
  %432 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -5
  %433 = bitcast %"class.sh::TIntermNode"** %432 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  store i64 %434, i64* %435, align 8
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -6
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -6
  %438 = bitcast %"class.sh::TIntermNode"** %437 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  store i64 %439, i64* %440, align 8
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -7
  %442 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -7
  %443 = bitcast %"class.sh::TIntermNode"** %442 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  store i64 %444, i64* %445, align 8
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -8
  %447 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -8
  %448 = bitcast %"class.sh::TIntermNode"** %447 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  store i64 %449, i64* %450, align 8
  %451 = icmp eq %"class.sh::TIntermNode"** %447, %274
  br i1 %451, label %452, label %408, !llvm.loop !19

452:                                              ; preds = %403, %408, %380, %250
  %453 = phi %"class.sh::TIntermNode"** [ %270, %250 ], [ %303, %380 ], [ %404, %403 ], [ %446, %408 ]
  %454 = ptrtoint %"class.sh::TIntermNode"** %453 to i64
  store i64 %454, i64* %266, align 8
  store i64 %272, i64* %265, align 8
  store i64 %272, i64* %267, align 8
  %455 = bitcast %"class.sh::TType"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %455) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %15, i32 3, i32 3, i32 0, i8 zeroext 1, i8 zeroext 1) #4
  %456 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %15, %"class.sh::TVector.31"* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %455) #4
  %457 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %458 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %457, i64 240) #4
  %459 = bitcast i8* %458 to %"class.sh::TIntermBinary"*
  %460 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %461 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %460, i64 32) #4
  %462 = bitcast i8* %461 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %462, %"class.sh::TVariable"* %32) #4
  %463 = bitcast i8* %461 to %"class.sh::TIntermTyped"*
  %464 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %456, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %459, i8 zeroext -118, %"class.sh::TIntermTyped"* %463, %"class.sh::TIntermTyped"* %464) #4
  %465 = ptrtoint i8* %458 to i64
  %466 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %467 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %39, align 16
  %468 = icmp ult %"class.sh::TIntermNode"** %466, %467
  %469 = ptrtoint %"class.sh::TIntermNode"** %467 to i64
  br i1 %468, label %470, label %475

470:                                              ; preds = %452
  %471 = bitcast %"class.sh::TIntermNode"** %466 to i64*
  store i64 %465, i64* %471, align 8
  %472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 1
  %473 = ptrtoint %"class.sh::TIntermNode"** %472 to i64
  %474 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  store i64 %473, i64* %474, align 8
  br label %687

475:                                              ; preds = %452
  %476 = ptrtoint %"class.sh::TIntermNode"** %466 to i64
  %477 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  %478 = bitcast %"class.sh::TVector.31"* %16 to i64*
  %479 = load i64, i64* %478, align 16
  %480 = sub i64 %476, %479
  %481 = ashr exact i64 %480, 3
  %482 = add nsw i64 %481, 1
  %483 = icmp ugt i64 %482, 2305843009213693951
  br i1 %483, label %484, label %486

484:                                              ; preds = %475
  %485 = bitcast %"class.sh::TVector.31"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %485) #5
  unreachable

486:                                              ; preds = %475
  %487 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  %488 = sub i64 %469, %479
  %489 = ashr exact i64 %488, 3
  %490 = icmp ult i64 %489, 1152921504606846975
  br i1 %490, label %491, label %496

491:                                              ; preds = %486
  %492 = ashr exact i64 %488, 2
  %493 = icmp ult i64 %492, %482
  %494 = select i1 %493, i64 %482, i64 %492
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %502, label %496

496:                                              ; preds = %491, %486
  %497 = phi i64 [ %494, %491 ], [ 2305843009213693951, %486 ]
  %498 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %499 = shl i64 %497, 3
  %500 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %498, i64 %499) #4
  %501 = bitcast i8* %500 to %"class.sh::TIntermNode"**
  br label %502

502:                                              ; preds = %496, %491
  %503 = phi i64 [ %497, %496 ], [ 0, %491 ]
  %504 = phi %"class.sh::TIntermNode"** [ %501, %496 ], [ null, %491 ]
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %504, i64 %481
  %506 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %504, i64 %503
  %507 = ptrtoint %"class.sh::TIntermNode"** %506 to i64
  %508 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  store i64 %465, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 1
  %510 = ptrtoint %"class.sh::TIntermNode"** %509 to i64
  %511 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 16
  %512 = ptrtoint %"class.sh::TIntermNode"** %511 to i64
  %513 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %514 = icmp eq %"class.sh::TIntermNode"** %513, %511
  br i1 %514, label %684, label %515

515:                                              ; preds = %502
  %516 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  %517 = ptrtoint %"class.sh::TIntermNode"** %516 to i64
  %518 = sub i64 %517, %512
  %519 = lshr i64 %518, 3
  %520 = add nuw nsw i64 %519, 1
  %521 = icmp ult i64 %520, 4
  br i1 %521, label %614, label %522

522:                                              ; preds = %515
  %523 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  %524 = ptrtoint %"class.sh::TIntermNode"** %523 to i64
  %525 = sub i64 %524, %512
  %526 = lshr i64 %525, 3
  %527 = xor i64 %526, -1
  %528 = add nsw i64 %481, %527
  %529 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %504, i64 %528
  %530 = xor i64 %526, -1
  %531 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 %530
  %532 = icmp ult %"class.sh::TIntermNode"** %529, %513
  %533 = icmp ult %"class.sh::TIntermNode"** %531, %505
  %534 = and i1 %532, %533
  br i1 %534, label %614, label %535

535:                                              ; preds = %522
  %536 = and i64 %520, 4611686018427387900
  %537 = sub nsw i64 0, %536
  %538 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 %537
  %539 = sub nsw i64 0, %536
  %540 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 %539
  %541 = add nsw i64 %536, -4
  %542 = lshr exact i64 %541, 2
  %543 = add nuw nsw i64 %542, 1
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %541, 0
  br i1 %545, label %590, label %546

546:                                              ; preds = %535
  %547 = sub nuw nsw i64 %543, %544
  %548 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 -1
  %549 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  %550 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 -1
  %551 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  br label %552

552:                                              ; preds = %552, %546
  %553 = phi i64 [ 0, %546 ], [ %587, %552 ]
  %554 = phi i64 [ %547, %546 ], [ %588, %552 ]
  %555 = sub i64 0, %553
  %556 = sub i64 0, %553
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %548, i64 %555
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %549, i64 %556
  %559 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %558, i64 -1
  %560 = bitcast %"class.sh::TIntermNode"** %559 to <2 x i64>*
  %561 = load <2 x i64>, <2 x i64>* %560, align 8, !alias.scope !20
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %558, i64 -2
  %563 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %562, i64 -1
  %564 = bitcast %"class.sh::TIntermNode"** %563 to <2 x i64>*
  %565 = load <2 x i64>, <2 x i64>* %564, align 8, !alias.scope !20
  %566 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %567 = bitcast %"class.sh::TIntermNode"** %566 to <2 x i64>*
  store <2 x i64> %561, <2 x i64>* %567, align 8, !alias.scope !23, !noalias !20
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %569 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %568, i64 -1
  %570 = bitcast %"class.sh::TIntermNode"** %569 to <2 x i64>*
  store <2 x i64> %565, <2 x i64>* %570, align 8, !alias.scope !23, !noalias !20
  %571 = sub nuw nsw i64 -4, %553
  %572 = sub nuw nsw i64 -4, %553
  %573 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %550, i64 %571
  %574 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %551, i64 %572
  %575 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = bitcast %"class.sh::TIntermNode"** %575 to <2 x i64>*
  %577 = load <2 x i64>, <2 x i64>* %576, align 8, !alias.scope !20
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -2
  %579 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %578, i64 -1
  %580 = bitcast %"class.sh::TIntermNode"** %579 to <2 x i64>*
  %581 = load <2 x i64>, <2 x i64>* %580, align 8, !alias.scope !20
  %582 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %573, i64 -1
  %583 = bitcast %"class.sh::TIntermNode"** %582 to <2 x i64>*
  store <2 x i64> %577, <2 x i64>* %583, align 8, !alias.scope !23, !noalias !20
  %584 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %573, i64 -2
  %585 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %586 = bitcast %"class.sh::TIntermNode"** %585 to <2 x i64>*
  store <2 x i64> %581, <2 x i64>* %586, align 8, !alias.scope !23, !noalias !20
  %587 = add i64 %553, 8
  %588 = add i64 %554, -2
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %552, !llvm.loop !25

590:                                              ; preds = %552, %535
  %591 = phi i64 [ 0, %535 ], [ %587, %552 ]
  %592 = icmp eq i64 %544, 0
  br i1 %592, label %612, label %593

593:                                              ; preds = %590
  %594 = sub i64 0, %591
  %595 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 -1
  %596 = sub i64 0, %591
  %597 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  %598 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %595, i64 %594
  %599 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %597, i64 %596
  %600 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %601 = bitcast %"class.sh::TIntermNode"** %600 to <2 x i64>*
  %602 = load <2 x i64>, <2 x i64>* %601, align 8, !alias.scope !20
  %603 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %604 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %603, i64 -1
  %605 = bitcast %"class.sh::TIntermNode"** %604 to <2 x i64>*
  %606 = load <2 x i64>, <2 x i64>* %605, align 8, !alias.scope !20
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %598, i64 -1
  %608 = bitcast %"class.sh::TIntermNode"** %607 to <2 x i64>*
  store <2 x i64> %602, <2 x i64>* %608, align 8, !alias.scope !23, !noalias !20
  %609 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %598, i64 -2
  %610 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %609, i64 -1
  %611 = bitcast %"class.sh::TIntermNode"** %610 to <2 x i64>*
  store <2 x i64> %606, <2 x i64>* %611, align 8, !alias.scope !23, !noalias !20
  br label %612

612:                                              ; preds = %590, %593
  %613 = icmp eq i64 %520, %536
  br i1 %613, label %684, label %614

614:                                              ; preds = %612, %522, %515
  %615 = phi %"class.sh::TIntermNode"** [ %505, %522 ], [ %505, %515 ], [ %538, %612 ]
  %616 = phi %"class.sh::TIntermNode"** [ %513, %522 ], [ %513, %515 ], [ %540, %612 ]
  %617 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %616, i64 -1
  %618 = ptrtoint %"class.sh::TIntermNode"** %617 to i64
  %619 = sub i64 %618, %512
  %620 = lshr i64 %619, 3
  %621 = add nuw nsw i64 %620, 1
  %622 = and i64 %621, 7
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %635, label %624

624:                                              ; preds = %614, %624
  %625 = phi %"class.sh::TIntermNode"** [ %628, %624 ], [ %615, %614 ]
  %626 = phi %"class.sh::TIntermNode"** [ %629, %624 ], [ %616, %614 ]
  %627 = phi i64 [ %633, %624 ], [ %622, %614 ]
  %628 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %625, i64 -1
  %629 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %630 = bitcast %"class.sh::TIntermNode"** %629 to i64*
  %631 = load i64, i64* %630, align 8
  %632 = bitcast %"class.sh::TIntermNode"** %628 to i64*
  store i64 %631, i64* %632, align 8
  %633 = add i64 %627, -1
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %624, !llvm.loop !26

635:                                              ; preds = %624, %614
  %636 = phi %"class.sh::TIntermNode"** [ undef, %614 ], [ %628, %624 ]
  %637 = phi %"class.sh::TIntermNode"** [ %615, %614 ], [ %628, %624 ]
  %638 = phi %"class.sh::TIntermNode"** [ %616, %614 ], [ %629, %624 ]
  %639 = icmp ult i64 %619, 56
  br i1 %639, label %684, label %640

640:                                              ; preds = %635, %640
  %641 = phi %"class.sh::TIntermNode"** [ %678, %640 ], [ %637, %635 ]
  %642 = phi %"class.sh::TIntermNode"** [ %679, %640 ], [ %638, %635 ]
  %643 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -1
  %644 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -1
  %645 = bitcast %"class.sh::TIntermNode"** %644 to i64*
  %646 = load i64, i64* %645, align 8
  %647 = bitcast %"class.sh::TIntermNode"** %643 to i64*
  store i64 %646, i64* %647, align 8
  %648 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -2
  %649 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -2
  %650 = bitcast %"class.sh::TIntermNode"** %649 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = bitcast %"class.sh::TIntermNode"** %648 to i64*
  store i64 %651, i64* %652, align 8
  %653 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -3
  %654 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -3
  %655 = bitcast %"class.sh::TIntermNode"** %654 to i64*
  %656 = load i64, i64* %655, align 8
  %657 = bitcast %"class.sh::TIntermNode"** %653 to i64*
  store i64 %656, i64* %657, align 8
  %658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -4
  %659 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -4
  %660 = bitcast %"class.sh::TIntermNode"** %659 to i64*
  %661 = load i64, i64* %660, align 8
  %662 = bitcast %"class.sh::TIntermNode"** %658 to i64*
  store i64 %661, i64* %662, align 8
  %663 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -5
  %664 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -5
  %665 = bitcast %"class.sh::TIntermNode"** %664 to i64*
  %666 = load i64, i64* %665, align 8
  %667 = bitcast %"class.sh::TIntermNode"** %663 to i64*
  store i64 %666, i64* %667, align 8
  %668 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -6
  %669 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -6
  %670 = bitcast %"class.sh::TIntermNode"** %669 to i64*
  %671 = load i64, i64* %670, align 8
  %672 = bitcast %"class.sh::TIntermNode"** %668 to i64*
  store i64 %671, i64* %672, align 8
  %673 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -7
  %674 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -7
  %675 = bitcast %"class.sh::TIntermNode"** %674 to i64*
  %676 = load i64, i64* %675, align 8
  %677 = bitcast %"class.sh::TIntermNode"** %673 to i64*
  store i64 %676, i64* %677, align 8
  %678 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -8
  %679 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %642, i64 -8
  %680 = bitcast %"class.sh::TIntermNode"** %679 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = bitcast %"class.sh::TIntermNode"** %678 to i64*
  store i64 %681, i64* %682, align 8
  %683 = icmp eq %"class.sh::TIntermNode"** %679, %511
  br i1 %683, label %684, label %640, !llvm.loop !27

684:                                              ; preds = %635, %640, %612, %502
  %685 = phi %"class.sh::TIntermNode"** [ %505, %502 ], [ %538, %612 ], [ %636, %635 ], [ %678, %640 ]
  %686 = ptrtoint %"class.sh::TIntermNode"** %685 to i64
  store i64 %686, i64* %478, align 16
  store i64 %510, i64* %477, align 8
  store i64 %507, i64* %487, align 16
  br label %687

687:                                              ; preds = %684, %470
  %688 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %689 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %688, i64 240) #4
  %690 = bitcast i8* %689 to %"class.sh::TIntermBinary"*
  %691 = bitcast %"class.sh::TIntermAggregate"* %254 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)***
  %692 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*** %691, align 8
  %693 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)** %692, i64 23
  %694 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)** %693, align 8
  %695 = call %"class.sh::TIntermTyped"* %694(%"class.sh::TIntermAggregate"* %254) #4
  %696 = bitcast i8* %47 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)***
  %697 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*** %696, align 8
  %698 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %697, i64 23
  %699 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %698, align 8
  %700 = call %"class.sh::TIntermTyped"* %699(%"class.sh::TIntermConstantUnion"* %48) #4
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %690, i8 zeroext 17, %"class.sh::TIntermTyped"* %695, %"class.sh::TIntermTyped"* %700) #4
  %701 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %702 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %701, i64 240) #4
  %703 = bitcast i8* %702 to %"class.sh::TIntermBinary"*
  %704 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %705 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %704, i64 32) #4
  %706 = bitcast i8* %705 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %706, %"class.sh::TVariable"* %22) #4
  %707 = bitcast i8* %705 to %"class.sh::TIntermTyped"*
  %708 = bitcast i8* %689 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %703, i8 zeroext -118, %"class.sh::TIntermTyped"* %707, %"class.sh::TIntermTyped"* %708) #4
  %709 = ptrtoint i8* %702 to i64
  %710 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %711 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %39, align 16
  %712 = icmp ult %"class.sh::TIntermNode"** %710, %711
  %713 = ptrtoint %"class.sh::TIntermNode"** %711 to i64
  br i1 %712, label %714, label %719

714:                                              ; preds = %687
  %715 = bitcast %"class.sh::TIntermNode"** %710 to i64*
  store i64 %709, i64* %715, align 8
  %716 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 1
  %717 = ptrtoint %"class.sh::TIntermNode"** %716 to i64
  %718 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  store i64 %717, i64* %718, align 8
  br label %931

719:                                              ; preds = %687
  %720 = ptrtoint %"class.sh::TIntermNode"** %710 to i64
  %721 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  %722 = bitcast %"class.sh::TVector.31"* %16 to i64*
  %723 = load i64, i64* %722, align 16
  %724 = sub i64 %720, %723
  %725 = ashr exact i64 %724, 3
  %726 = add nsw i64 %725, 1
  %727 = icmp ugt i64 %726, 2305843009213693951
  br i1 %727, label %728, label %730

728:                                              ; preds = %719
  %729 = bitcast %"class.sh::TVector.31"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %729) #5
  unreachable

730:                                              ; preds = %719
  %731 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  %732 = sub i64 %713, %723
  %733 = ashr exact i64 %732, 3
  %734 = icmp ult i64 %733, 1152921504606846975
  br i1 %734, label %735, label %740

735:                                              ; preds = %730
  %736 = ashr exact i64 %732, 2
  %737 = icmp ult i64 %736, %726
  %738 = select i1 %737, i64 %726, i64 %736
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %746, label %740

740:                                              ; preds = %735, %730
  %741 = phi i64 [ %738, %735 ], [ 2305843009213693951, %730 ]
  %742 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %743 = shl i64 %741, 3
  %744 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %742, i64 %743) #4
  %745 = bitcast i8* %744 to %"class.sh::TIntermNode"**
  br label %746

746:                                              ; preds = %740, %735
  %747 = phi i64 [ %741, %740 ], [ 0, %735 ]
  %748 = phi %"class.sh::TIntermNode"** [ %745, %740 ], [ null, %735 ]
  %749 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %748, i64 %725
  %750 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %748, i64 %747
  %751 = ptrtoint %"class.sh::TIntermNode"** %750 to i64
  %752 = bitcast %"class.sh::TIntermNode"** %749 to i64*
  store i64 %709, i64* %752, align 8
  %753 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 1
  %754 = ptrtoint %"class.sh::TIntermNode"** %753 to i64
  %755 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 16
  %756 = ptrtoint %"class.sh::TIntermNode"** %755 to i64
  %757 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %758 = icmp eq %"class.sh::TIntermNode"** %757, %755
  br i1 %758, label %928, label %759

759:                                              ; preds = %746
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %756
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = icmp ult i64 %764, 4
  br i1 %765, label %858, label %766

766:                                              ; preds = %759
  %767 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  %768 = ptrtoint %"class.sh::TIntermNode"** %767 to i64
  %769 = sub i64 %768, %756
  %770 = lshr i64 %769, 3
  %771 = xor i64 %770, -1
  %772 = add nsw i64 %725, %771
  %773 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %748, i64 %772
  %774 = xor i64 %770, -1
  %775 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 %774
  %776 = icmp ult %"class.sh::TIntermNode"** %773, %757
  %777 = icmp ult %"class.sh::TIntermNode"** %775, %749
  %778 = and i1 %776, %777
  br i1 %778, label %858, label %779

779:                                              ; preds = %766
  %780 = and i64 %764, 4611686018427387900
  %781 = sub nsw i64 0, %780
  %782 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 %781
  %783 = sub nsw i64 0, %780
  %784 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 %783
  %785 = add nsw i64 %780, -4
  %786 = lshr exact i64 %785, 2
  %787 = add nuw nsw i64 %786, 1
  %788 = and i64 %787, 1
  %789 = icmp eq i64 %785, 0
  br i1 %789, label %834, label %790

790:                                              ; preds = %779
  %791 = sub nuw nsw i64 %787, %788
  %792 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 -1
  %793 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  %794 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 -1
  %795 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  br label %796

796:                                              ; preds = %796, %790
  %797 = phi i64 [ 0, %790 ], [ %831, %796 ]
  %798 = phi i64 [ %791, %790 ], [ %832, %796 ]
  %799 = sub i64 0, %797
  %800 = sub i64 0, %797
  %801 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %792, i64 %799
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %793, i64 %800
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %802, i64 -1
  %804 = bitcast %"class.sh::TIntermNode"** %803 to <2 x i64>*
  %805 = load <2 x i64>, <2 x i64>* %804, align 8, !alias.scope !28
  %806 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %802, i64 -2
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %806, i64 -1
  %808 = bitcast %"class.sh::TIntermNode"** %807 to <2 x i64>*
  %809 = load <2 x i64>, <2 x i64>* %808, align 8, !alias.scope !28
  %810 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %801, i64 -1
  %811 = bitcast %"class.sh::TIntermNode"** %810 to <2 x i64>*
  store <2 x i64> %805, <2 x i64>* %811, align 8, !alias.scope !31, !noalias !28
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %801, i64 -2
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %812, i64 -1
  %814 = bitcast %"class.sh::TIntermNode"** %813 to <2 x i64>*
  store <2 x i64> %809, <2 x i64>* %814, align 8, !alias.scope !31, !noalias !28
  %815 = sub nuw nsw i64 -4, %797
  %816 = sub nuw nsw i64 -4, %797
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %794, i64 %815
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %795, i64 %816
  %819 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %818, i64 -1
  %820 = bitcast %"class.sh::TIntermNode"** %819 to <2 x i64>*
  %821 = load <2 x i64>, <2 x i64>* %820, align 8, !alias.scope !28
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %818, i64 -2
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %822, i64 -1
  %824 = bitcast %"class.sh::TIntermNode"** %823 to <2 x i64>*
  %825 = load <2 x i64>, <2 x i64>* %824, align 8, !alias.scope !28
  %826 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %817, i64 -1
  %827 = bitcast %"class.sh::TIntermNode"** %826 to <2 x i64>*
  store <2 x i64> %821, <2 x i64>* %827, align 8, !alias.scope !31, !noalias !28
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %817, i64 -2
  %829 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %828, i64 -1
  %830 = bitcast %"class.sh::TIntermNode"** %829 to <2 x i64>*
  store <2 x i64> %825, <2 x i64>* %830, align 8, !alias.scope !31, !noalias !28
  %831 = add i64 %797, 8
  %832 = add i64 %798, -2
  %833 = icmp eq i64 %832, 0
  br i1 %833, label %834, label %796, !llvm.loop !33

834:                                              ; preds = %796, %779
  %835 = phi i64 [ 0, %779 ], [ %831, %796 ]
  %836 = icmp eq i64 %788, 0
  br i1 %836, label %856, label %837

837:                                              ; preds = %834
  %838 = sub i64 0, %835
  %839 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %749, i64 -1
  %840 = sub i64 0, %835
  %841 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  %842 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %839, i64 %838
  %843 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %841, i64 %840
  %844 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 -1
  %845 = bitcast %"class.sh::TIntermNode"** %844 to <2 x i64>*
  %846 = load <2 x i64>, <2 x i64>* %845, align 8, !alias.scope !28
  %847 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %843, i64 -2
  %848 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %847, i64 -1
  %849 = bitcast %"class.sh::TIntermNode"** %848 to <2 x i64>*
  %850 = load <2 x i64>, <2 x i64>* %849, align 8, !alias.scope !28
  %851 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %842, i64 -1
  %852 = bitcast %"class.sh::TIntermNode"** %851 to <2 x i64>*
  store <2 x i64> %846, <2 x i64>* %852, align 8, !alias.scope !31, !noalias !28
  %853 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %842, i64 -2
  %854 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %853, i64 -1
  %855 = bitcast %"class.sh::TIntermNode"** %854 to <2 x i64>*
  store <2 x i64> %850, <2 x i64>* %855, align 8, !alias.scope !31, !noalias !28
  br label %856

856:                                              ; preds = %834, %837
  %857 = icmp eq i64 %764, %780
  br i1 %857, label %928, label %858

858:                                              ; preds = %856, %766, %759
  %859 = phi %"class.sh::TIntermNode"** [ %749, %766 ], [ %749, %759 ], [ %782, %856 ]
  %860 = phi %"class.sh::TIntermNode"** [ %757, %766 ], [ %757, %759 ], [ %784, %856 ]
  %861 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %860, i64 -1
  %862 = ptrtoint %"class.sh::TIntermNode"** %861 to i64
  %863 = sub i64 %862, %756
  %864 = lshr i64 %863, 3
  %865 = add nuw nsw i64 %864, 1
  %866 = and i64 %865, 7
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %879, label %868

868:                                              ; preds = %858, %868
  %869 = phi %"class.sh::TIntermNode"** [ %872, %868 ], [ %859, %858 ]
  %870 = phi %"class.sh::TIntermNode"** [ %873, %868 ], [ %860, %858 ]
  %871 = phi i64 [ %877, %868 ], [ %866, %858 ]
  %872 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %869, i64 -1
  %873 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %870, i64 -1
  %874 = bitcast %"class.sh::TIntermNode"** %873 to i64*
  %875 = load i64, i64* %874, align 8
  %876 = bitcast %"class.sh::TIntermNode"** %872 to i64*
  store i64 %875, i64* %876, align 8
  %877 = add i64 %871, -1
  %878 = icmp eq i64 %877, 0
  br i1 %878, label %879, label %868, !llvm.loop !34

879:                                              ; preds = %868, %858
  %880 = phi %"class.sh::TIntermNode"** [ undef, %858 ], [ %872, %868 ]
  %881 = phi %"class.sh::TIntermNode"** [ %859, %858 ], [ %872, %868 ]
  %882 = phi %"class.sh::TIntermNode"** [ %860, %858 ], [ %873, %868 ]
  %883 = icmp ult i64 %863, 56
  br i1 %883, label %928, label %884

884:                                              ; preds = %879, %884
  %885 = phi %"class.sh::TIntermNode"** [ %922, %884 ], [ %881, %879 ]
  %886 = phi %"class.sh::TIntermNode"** [ %923, %884 ], [ %882, %879 ]
  %887 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -1
  %888 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -1
  %889 = bitcast %"class.sh::TIntermNode"** %888 to i64*
  %890 = load i64, i64* %889, align 8
  %891 = bitcast %"class.sh::TIntermNode"** %887 to i64*
  store i64 %890, i64* %891, align 8
  %892 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -2
  %893 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -2
  %894 = bitcast %"class.sh::TIntermNode"** %893 to i64*
  %895 = load i64, i64* %894, align 8
  %896 = bitcast %"class.sh::TIntermNode"** %892 to i64*
  store i64 %895, i64* %896, align 8
  %897 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -3
  %898 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -3
  %899 = bitcast %"class.sh::TIntermNode"** %898 to i64*
  %900 = load i64, i64* %899, align 8
  %901 = bitcast %"class.sh::TIntermNode"** %897 to i64*
  store i64 %900, i64* %901, align 8
  %902 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -4
  %903 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -4
  %904 = bitcast %"class.sh::TIntermNode"** %903 to i64*
  %905 = load i64, i64* %904, align 8
  %906 = bitcast %"class.sh::TIntermNode"** %902 to i64*
  store i64 %905, i64* %906, align 8
  %907 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -5
  %908 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -5
  %909 = bitcast %"class.sh::TIntermNode"** %908 to i64*
  %910 = load i64, i64* %909, align 8
  %911 = bitcast %"class.sh::TIntermNode"** %907 to i64*
  store i64 %910, i64* %911, align 8
  %912 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -6
  %913 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -6
  %914 = bitcast %"class.sh::TIntermNode"** %913 to i64*
  %915 = load i64, i64* %914, align 8
  %916 = bitcast %"class.sh::TIntermNode"** %912 to i64*
  store i64 %915, i64* %916, align 8
  %917 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -7
  %918 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -7
  %919 = bitcast %"class.sh::TIntermNode"** %918 to i64*
  %920 = load i64, i64* %919, align 8
  %921 = bitcast %"class.sh::TIntermNode"** %917 to i64*
  store i64 %920, i64* %921, align 8
  %922 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -8
  %923 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -8
  %924 = bitcast %"class.sh::TIntermNode"** %923 to i64*
  %925 = load i64, i64* %924, align 8
  %926 = bitcast %"class.sh::TIntermNode"** %922 to i64*
  store i64 %925, i64* %926, align 8
  %927 = icmp eq %"class.sh::TIntermNode"** %923, %755
  br i1 %927, label %928, label %884, !llvm.loop !35

928:                                              ; preds = %879, %884, %856, %746
  %929 = phi %"class.sh::TIntermNode"** [ %749, %746 ], [ %782, %856 ], [ %880, %879 ], [ %922, %884 ]
  %930 = ptrtoint %"class.sh::TIntermNode"** %929 to i64
  store i64 %930, i64* %722, align 16
  store i64 %754, i64* %721, align 8
  store i64 %751, i64* %731, align 16
  br label %931

931:                                              ; preds = %928, %714
  %932 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %261, align 8
  %933 = icmp eq %"class.sh::TIntermNode"** %932, null
  br i1 %933, label %936, label %934

934:                                              ; preds = %931
  %935 = ptrtoint %"class.sh::TIntermNode"** %932 to i64
  store i64 %935, i64* %265, align 8
  br label %936

936:                                              ; preds = %934, %931
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %260) #4
  %937 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %55, align 8
  %938 = icmp eq %"class.sh::TIntermNode"** %937, null
  br i1 %938, label %941, label %939

939:                                              ; preds = %936
  %940 = ptrtoint %"class.sh::TIntermNode"** %937 to i64
  store i64 %940, i64* %63, align 8
  br label %941

941:                                              ; preds = %936, %939
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54) #4
  %942 = trunc i64 %4 to i32
  %943 = icmp slt i32 %942, 0
  br i1 %943, label %944, label %1437

944:                                              ; preds = %941
  %945 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %946 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %945, i64 40) #4
  %947 = bitcast i8* %946 to %"class.sh::TVariable"*
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %947, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_140kMultiviewBaseViewLayerIndexVariableNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE6ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #4
  call void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %947) #4
  %948 = bitcast %"class.sh::TVector.31"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %948) #4
  %949 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 0
  %950 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 1
  %951 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %948, i8 0, i64 24, i1 false) #4
  %952 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %953 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %952, i64 32) #4
  %954 = bitcast i8* %953 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %954, %"class.sh::TVariable"* %22) #4
  %955 = ptrtoint i8* %953 to i64
  %956 = bitcast %"class.sh::TIntermNode"*** %950 to i64*
  %957 = bitcast %"class.sh::TVector.31"* %8 to i64*
  %958 = bitcast %"class.sh::TIntermNode"*** %951 to i64*
  %959 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %960 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %959, i64 8) #4
  %961 = bitcast i8* %960 to %"class.sh::TIntermNode"**
  %962 = getelementptr inbounds i8, i8* %960, i64 8
  %963 = ptrtoint i8* %962 to i64
  %964 = bitcast i8* %960 to i64*
  store i64 %955, i64* %964, align 8
  %965 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %949, align 8
  %966 = ptrtoint %"class.sh::TIntermNode"** %965 to i64
  %967 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %950, align 8
  %968 = bitcast %"class.sh::TIntermNode"** %967 to i8*
  %969 = icmp eq %"class.sh::TIntermNode"** %967, %965
  br i1 %969, label %1143, label %970

970:                                              ; preds = %944
  %971 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 -1
  %972 = ptrtoint %"class.sh::TIntermNode"** %971 to i64
  %973 = sub i64 %972, %966
  %974 = lshr i64 %973, 3
  %975 = add nuw nsw i64 %974, 1
  %976 = icmp ult i64 %975, 4
  br i1 %976, label %1073, label %977

977:                                              ; preds = %970
  %978 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 -1
  %979 = ptrtoint %"class.sh::TIntermNode"** %978 to i64
  %980 = sub i64 %979, %966
  %981 = lshr i64 %980, 3
  %982 = and i64 %980, -8
  %983 = xor i64 %982, -8
  %984 = getelementptr i8, i8* %960, i64 %983
  %985 = xor i64 %981, -1
  %986 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 %985
  %987 = bitcast %"class.sh::TIntermNode"** %986 to i8*
  %988 = icmp ult i8* %984, %968
  %989 = icmp ugt i8* %960, %987
  %990 = and i1 %988, %989
  br i1 %990, label %1073, label %991

991:                                              ; preds = %977
  %992 = and i64 %975, 4611686018427387900
  %993 = sub nsw i64 0, %992
  %994 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %961, i64 %993
  %995 = sub nsw i64 0, %992
  %996 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 %995
  %997 = add nsw i64 %992, -4
  %998 = lshr exact i64 %997, 2
  %999 = add nuw nsw i64 %998, 1
  %1000 = and i64 %999, 1
  %1001 = icmp eq i64 %997, 0
  br i1 %1001, label %1048, label %1002

1002:                                             ; preds = %991
  %1003 = sub nuw nsw i64 %999, %1000
  %1004 = getelementptr i8, i8* %960, i64 -8
  %1005 = bitcast i8* %1004 to %"class.sh::TIntermNode"**
  %1006 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 -1
  %1007 = getelementptr i8, i8* %960, i64 -8
  %1008 = bitcast i8* %1007 to %"class.sh::TIntermNode"**
  %1009 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 -1
  br label %1010

1010:                                             ; preds = %1010, %1002
  %1011 = phi i64 [ 0, %1002 ], [ %1045, %1010 ]
  %1012 = phi i64 [ %1003, %1002 ], [ %1046, %1010 ]
  %1013 = sub i64 0, %1011
  %1014 = sub i64 0, %1011
  %1015 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1005, i64 %1013
  %1016 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1006, i64 %1014
  %1017 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1016, i64 -1
  %1018 = bitcast %"class.sh::TIntermNode"** %1017 to <2 x i64>*
  %1019 = load <2 x i64>, <2 x i64>* %1018, align 8, !alias.scope !36
  %1020 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1016, i64 -2
  %1021 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1020, i64 -1
  %1022 = bitcast %"class.sh::TIntermNode"** %1021 to <2 x i64>*
  %1023 = load <2 x i64>, <2 x i64>* %1022, align 8, !alias.scope !36
  %1024 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1015, i64 -1
  %1025 = bitcast %"class.sh::TIntermNode"** %1024 to <2 x i64>*
  store <2 x i64> %1019, <2 x i64>* %1025, align 8, !alias.scope !39, !noalias !36
  %1026 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1015, i64 -2
  %1027 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1026, i64 -1
  %1028 = bitcast %"class.sh::TIntermNode"** %1027 to <2 x i64>*
  store <2 x i64> %1023, <2 x i64>* %1028, align 8, !alias.scope !39, !noalias !36
  %1029 = sub nuw nsw i64 -4, %1011
  %1030 = sub nuw nsw i64 -4, %1011
  %1031 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1008, i64 %1029
  %1032 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1009, i64 %1030
  %1033 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1032, i64 -1
  %1034 = bitcast %"class.sh::TIntermNode"** %1033 to <2 x i64>*
  %1035 = load <2 x i64>, <2 x i64>* %1034, align 8, !alias.scope !36
  %1036 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1032, i64 -2
  %1037 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1036, i64 -1
  %1038 = bitcast %"class.sh::TIntermNode"** %1037 to <2 x i64>*
  %1039 = load <2 x i64>, <2 x i64>* %1038, align 8, !alias.scope !36
  %1040 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1031, i64 -1
  %1041 = bitcast %"class.sh::TIntermNode"** %1040 to <2 x i64>*
  store <2 x i64> %1035, <2 x i64>* %1041, align 8, !alias.scope !39, !noalias !36
  %1042 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1031, i64 -2
  %1043 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1042, i64 -1
  %1044 = bitcast %"class.sh::TIntermNode"** %1043 to <2 x i64>*
  store <2 x i64> %1039, <2 x i64>* %1044, align 8, !alias.scope !39, !noalias !36
  %1045 = add i64 %1011, 8
  %1046 = add i64 %1012, -2
  %1047 = icmp eq i64 %1046, 0
  br i1 %1047, label %1048, label %1010, !llvm.loop !41

1048:                                             ; preds = %1010, %991
  %1049 = phi i64 [ 0, %991 ], [ %1045, %1010 ]
  %1050 = icmp eq i64 %1000, 0
  br i1 %1050, label %1071, label %1051

1051:                                             ; preds = %1048
  %1052 = sub i64 0, %1049
  %1053 = getelementptr i8, i8* %960, i64 -8
  %1054 = bitcast i8* %1053 to %"class.sh::TIntermNode"**
  %1055 = sub i64 0, %1049
  %1056 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %967, i64 -1
  %1057 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1054, i64 %1052
  %1058 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 %1055
  %1059 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1058, i64 -1
  %1060 = bitcast %"class.sh::TIntermNode"** %1059 to <2 x i64>*
  %1061 = load <2 x i64>, <2 x i64>* %1060, align 8, !alias.scope !36
  %1062 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1058, i64 -2
  %1063 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, i64 -1
  %1064 = bitcast %"class.sh::TIntermNode"** %1063 to <2 x i64>*
  %1065 = load <2 x i64>, <2 x i64>* %1064, align 8, !alias.scope !36
  %1066 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1057, i64 -1
  %1067 = bitcast %"class.sh::TIntermNode"** %1066 to <2 x i64>*
  store <2 x i64> %1061, <2 x i64>* %1067, align 8, !alias.scope !39, !noalias !36
  %1068 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1057, i64 -2
  %1069 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1068, i64 -1
  %1070 = bitcast %"class.sh::TIntermNode"** %1069 to <2 x i64>*
  store <2 x i64> %1065, <2 x i64>* %1070, align 8, !alias.scope !39, !noalias !36
  br label %1071

1071:                                             ; preds = %1048, %1051
  %1072 = icmp eq i64 %975, %992
  br i1 %1072, label %1143, label %1073

1073:                                             ; preds = %1071, %977, %970
  %1074 = phi %"class.sh::TIntermNode"** [ %961, %977 ], [ %961, %970 ], [ %994, %1071 ]
  %1075 = phi %"class.sh::TIntermNode"** [ %967, %977 ], [ %967, %970 ], [ %996, %1071 ]
  %1076 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1075, i64 -1
  %1077 = ptrtoint %"class.sh::TIntermNode"** %1076 to i64
  %1078 = sub i64 %1077, %966
  %1079 = lshr i64 %1078, 3
  %1080 = add nuw nsw i64 %1079, 1
  %1081 = and i64 %1080, 7
  %1082 = icmp eq i64 %1081, 0
  br i1 %1082, label %1094, label %1083

1083:                                             ; preds = %1073, %1083
  %1084 = phi %"class.sh::TIntermNode"** [ %1087, %1083 ], [ %1074, %1073 ]
  %1085 = phi %"class.sh::TIntermNode"** [ %1088, %1083 ], [ %1075, %1073 ]
  %1086 = phi i64 [ %1092, %1083 ], [ %1081, %1073 ]
  %1087 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1084, i64 -1
  %1088 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1085, i64 -1
  %1089 = bitcast %"class.sh::TIntermNode"** %1088 to i64*
  %1090 = load i64, i64* %1089, align 8
  %1091 = bitcast %"class.sh::TIntermNode"** %1087 to i64*
  store i64 %1090, i64* %1091, align 8
  %1092 = add i64 %1086, -1
  %1093 = icmp eq i64 %1092, 0
  br i1 %1093, label %1094, label %1083, !llvm.loop !42

1094:                                             ; preds = %1083, %1073
  %1095 = phi %"class.sh::TIntermNode"** [ undef, %1073 ], [ %1087, %1083 ]
  %1096 = phi %"class.sh::TIntermNode"** [ %1074, %1073 ], [ %1087, %1083 ]
  %1097 = phi %"class.sh::TIntermNode"** [ %1075, %1073 ], [ %1088, %1083 ]
  %1098 = icmp ult i64 %1078, 56
  br i1 %1098, label %1143, label %1099

1099:                                             ; preds = %1094, %1099
  %1100 = phi %"class.sh::TIntermNode"** [ %1137, %1099 ], [ %1096, %1094 ]
  %1101 = phi %"class.sh::TIntermNode"** [ %1138, %1099 ], [ %1097, %1094 ]
  %1102 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -1
  %1103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -1
  %1104 = bitcast %"class.sh::TIntermNode"** %1103 to i64*
  %1105 = load i64, i64* %1104, align 8
  %1106 = bitcast %"class.sh::TIntermNode"** %1102 to i64*
  store i64 %1105, i64* %1106, align 8
  %1107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -2
  %1108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -2
  %1109 = bitcast %"class.sh::TIntermNode"** %1108 to i64*
  %1110 = load i64, i64* %1109, align 8
  %1111 = bitcast %"class.sh::TIntermNode"** %1107 to i64*
  store i64 %1110, i64* %1111, align 8
  %1112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -3
  %1113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -3
  %1114 = bitcast %"class.sh::TIntermNode"** %1113 to i64*
  %1115 = load i64, i64* %1114, align 8
  %1116 = bitcast %"class.sh::TIntermNode"** %1112 to i64*
  store i64 %1115, i64* %1116, align 8
  %1117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -4
  %1118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -4
  %1119 = bitcast %"class.sh::TIntermNode"** %1118 to i64*
  %1120 = load i64, i64* %1119, align 8
  %1121 = bitcast %"class.sh::TIntermNode"** %1117 to i64*
  store i64 %1120, i64* %1121, align 8
  %1122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -5
  %1123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -5
  %1124 = bitcast %"class.sh::TIntermNode"** %1123 to i64*
  %1125 = load i64, i64* %1124, align 8
  %1126 = bitcast %"class.sh::TIntermNode"** %1122 to i64*
  store i64 %1125, i64* %1126, align 8
  %1127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -6
  %1128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -6
  %1129 = bitcast %"class.sh::TIntermNode"** %1128 to i64*
  %1130 = load i64, i64* %1129, align 8
  %1131 = bitcast %"class.sh::TIntermNode"** %1127 to i64*
  store i64 %1130, i64* %1131, align 8
  %1132 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -7
  %1133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -7
  %1134 = bitcast %"class.sh::TIntermNode"** %1133 to i64*
  %1135 = load i64, i64* %1134, align 8
  %1136 = bitcast %"class.sh::TIntermNode"** %1132 to i64*
  store i64 %1135, i64* %1136, align 8
  %1137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 -8
  %1138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 -8
  %1139 = bitcast %"class.sh::TIntermNode"** %1138 to i64*
  %1140 = load i64, i64* %1139, align 8
  %1141 = bitcast %"class.sh::TIntermNode"** %1137 to i64*
  store i64 %1140, i64* %1141, align 8
  %1142 = icmp eq %"class.sh::TIntermNode"** %1138, %965
  br i1 %1142, label %1143, label %1099, !llvm.loop !43

1143:                                             ; preds = %1094, %1099, %1071, %944
  %1144 = phi %"class.sh::TIntermNode"** [ %961, %944 ], [ %994, %1071 ], [ %1095, %1094 ], [ %1137, %1099 ]
  %1145 = ptrtoint %"class.sh::TIntermNode"** %1144 to i64
  store i64 %1145, i64* %957, align 8
  store i64 %963, i64* %956, align 8
  store i64 %963, i64* %958, align 8
  %1146 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %1146) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %9, i32 3, i32 3, i32 0, i8 zeroext 1, i8 zeroext 1) #4
  %1147 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %9, %"class.sh::TVector.31"* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %1146) #4
  %1148 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1149 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1148, i64 32) #4
  %1150 = bitcast i8* %1149 to %"class.sh::TIntermSymbol"*
  %1151 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable16gl_ViewportIndexEv() #4
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1150, %"class.sh::TVariable"* %1151) #4
  %1152 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1153 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1152, i64 64) #4
  %1154 = bitcast i8* %1153 to %"class.sh::TIntermBlock"*
  %1155 = bitcast i8* %1153 to i32 (...)***
  %1156 = getelementptr inbounds i8, i8* %1153, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1156, i8 0, i64 16, i1 false) #4
  %1157 = getelementptr inbounds i8, i8* %1153, i64 24
  %1158 = bitcast i8* %1157 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1155, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1158, align 8
  %1159 = getelementptr inbounds i8, i8* %1153, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1159, i8 0, i64 25, i1 false) #4
  %1160 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1161 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1160, i64 240) #4
  %1162 = bitcast i8* %1161 to %"class.sh::TIntermBinary"*
  %1163 = bitcast i8* %1149 to %"class.sh::TIntermTyped"*
  %1164 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1147, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1162, i8 zeroext -118, %"class.sh::TIntermTyped"* %1163, %"class.sh::TIntermTyped"* %1164) #4
  %1165 = bitcast i8* %1161 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1154, %"class.sh::TIntermNode"* %1165) #4
  %1166 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1167 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1166, i64 32) #4
  %1168 = bitcast i8* %1167 to %"class.sh::TIntermSymbol"*
  %1169 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable10gl_LayerVSEv() #4
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1168, %"class.sh::TVariable"* %1169) #4
  %1170 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1171 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1170, i64 240) #4
  %1172 = bitcast i8* %1171 to %"class.sh::TIntermBinary"*
  %1173 = bitcast %"class.sh::TIntermAggregate"* %1147 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)***
  %1174 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*** %1173, align 8
  %1175 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)** %1174, i64 23
  %1176 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)** %1175, align 8
  %1177 = call %"class.sh::TIntermTyped"* %1176(%"class.sh::TIntermAggregate"* %1147) #4
  %1178 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1179 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1178, i64 32) #4
  %1180 = bitcast i8* %1179 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1180, %"class.sh::TVariable"* %947) #4
  %1181 = bitcast i8* %1179 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1172, i8 zeroext 13, %"class.sh::TIntermTyped"* %1177, %"class.sh::TIntermTyped"* %1181) #4
  %1182 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1183 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1182, i64 64) #4
  %1184 = bitcast i8* %1183 to %"class.sh::TIntermBlock"*
  %1185 = bitcast i8* %1183 to i32 (...)***
  %1186 = getelementptr inbounds i8, i8* %1183, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1186, i8 0, i64 16, i1 false) #4
  %1187 = getelementptr inbounds i8, i8* %1183, i64 24
  %1188 = bitcast i8* %1187 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1185, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1188, align 8
  %1189 = getelementptr inbounds i8, i8* %1183, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1189, i8 0, i64 25, i1 false) #4
  %1190 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1191 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1190, i64 240) #4
  %1192 = bitcast i8* %1191 to %"class.sh::TIntermBinary"*
  %1193 = bitcast i8* %1167 to %"class.sh::TIntermTyped"*
  %1194 = bitcast i8* %1171 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1192, i8 zeroext -118, %"class.sh::TIntermTyped"* %1193, %"class.sh::TIntermTyped"* %1194) #4
  %1195 = bitcast i8* %1191 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1184, %"class.sh::TIntermNode"* %1195) #4
  %1196 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1197 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1196, i64 240) #4
  %1198 = bitcast i8* %1197 to %"class.sh::TIntermBinary"*
  %1199 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1200 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1199, i64 32) #4
  %1201 = bitcast i8* %1200 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1201, %"class.sh::TVariable"* %947) #4
  %1202 = bitcast i8* %1200 to %"class.sh::TIntermTyped"*
  %1203 = bitcast %"class.sh::TType"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %1203) #4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %10, i32 3, i32 3, i32 2, i8 zeroext 1, i8 zeroext 1) #4
  %1204 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* nonnull dereferenceable(184) %10) #4
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1198, i8 zeroext 20, %"class.sh::TIntermTyped"* %1202, %"class.sh::TIntermTyped"* %1204) #4
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %1203) #4
  %1205 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1206 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1205, i64 48) #4
  %1207 = bitcast i8* %1206 to %"class.sh::TIntermIfElse"*
  %1208 = bitcast i8* %1197 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %1207, %"class.sh::TIntermTyped"* %1208, %"class.sh::TIntermBlock"* %1154, %"class.sh::TIntermBlock"* %1184) #4
  %1209 = ptrtoint i8* %1206 to i64
  %1210 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %1211 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %39, align 16
  %1212 = icmp ult %"class.sh::TIntermNode"** %1210, %1211
  %1213 = ptrtoint %"class.sh::TIntermNode"** %1211 to i64
  br i1 %1212, label %1214, label %1219

1214:                                             ; preds = %1143
  %1215 = bitcast %"class.sh::TIntermNode"** %1210 to i64*
  store i64 %1209, i64* %1215, align 8
  %1216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1210, i64 1
  %1217 = ptrtoint %"class.sh::TIntermNode"** %1216 to i64
  %1218 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  store i64 %1217, i64* %1218, align 8
  br label %1431

1219:                                             ; preds = %1143
  %1220 = ptrtoint %"class.sh::TIntermNode"** %1210 to i64
  %1221 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  %1222 = bitcast %"class.sh::TVector.31"* %16 to i64*
  %1223 = load i64, i64* %1222, align 16
  %1224 = sub i64 %1220, %1223
  %1225 = ashr exact i64 %1224, 3
  %1226 = add nsw i64 %1225, 1
  %1227 = icmp ugt i64 %1226, 2305843009213693951
  br i1 %1227, label %1228, label %1230

1228:                                             ; preds = %1219
  %1229 = bitcast %"class.sh::TVector.31"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1229) #5
  unreachable

1230:                                             ; preds = %1219
  %1231 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  %1232 = sub i64 %1213, %1223
  %1233 = ashr exact i64 %1232, 3
  %1234 = icmp ult i64 %1233, 1152921504606846975
  br i1 %1234, label %1235, label %1240

1235:                                             ; preds = %1230
  %1236 = ashr exact i64 %1232, 2
  %1237 = icmp ult i64 %1236, %1226
  %1238 = select i1 %1237, i64 %1226, i64 %1236
  %1239 = icmp eq i64 %1238, 0
  br i1 %1239, label %1246, label %1240

1240:                                             ; preds = %1235, %1230
  %1241 = phi i64 [ %1238, %1235 ], [ 2305843009213693951, %1230 ]
  %1242 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1243 = shl i64 %1241, 3
  %1244 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1242, i64 %1243) #4
  %1245 = bitcast i8* %1244 to %"class.sh::TIntermNode"**
  br label %1246

1246:                                             ; preds = %1240, %1235
  %1247 = phi i64 [ %1241, %1240 ], [ 0, %1235 ]
  %1248 = phi %"class.sh::TIntermNode"** [ %1245, %1240 ], [ null, %1235 ]
  %1249 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1248, i64 %1225
  %1250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1248, i64 %1247
  %1251 = ptrtoint %"class.sh::TIntermNode"** %1250 to i64
  %1252 = bitcast %"class.sh::TIntermNode"** %1249 to i64*
  store i64 %1209, i64* %1252, align 8
  %1253 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1249, i64 1
  %1254 = ptrtoint %"class.sh::TIntermNode"** %1253 to i64
  %1255 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 16
  %1256 = ptrtoint %"class.sh::TIntermNode"** %1255 to i64
  %1257 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %1258 = icmp eq %"class.sh::TIntermNode"** %1257, %1255
  br i1 %1258, label %1428, label %1259

1259:                                             ; preds = %1246
  %1260 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 -1
  %1261 = ptrtoint %"class.sh::TIntermNode"** %1260 to i64
  %1262 = sub i64 %1261, %1256
  %1263 = lshr i64 %1262, 3
  %1264 = add nuw nsw i64 %1263, 1
  %1265 = icmp ult i64 %1264, 4
  br i1 %1265, label %1358, label %1266

1266:                                             ; preds = %1259
  %1267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 -1
  %1268 = ptrtoint %"class.sh::TIntermNode"** %1267 to i64
  %1269 = sub i64 %1268, %1256
  %1270 = lshr i64 %1269, 3
  %1271 = xor i64 %1270, -1
  %1272 = add nsw i64 %1225, %1271
  %1273 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1248, i64 %1272
  %1274 = xor i64 %1270, -1
  %1275 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 %1274
  %1276 = icmp ult %"class.sh::TIntermNode"** %1273, %1257
  %1277 = icmp ult %"class.sh::TIntermNode"** %1275, %1249
  %1278 = and i1 %1276, %1277
  br i1 %1278, label %1358, label %1279

1279:                                             ; preds = %1266
  %1280 = and i64 %1264, 4611686018427387900
  %1281 = sub nsw i64 0, %1280
  %1282 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1249, i64 %1281
  %1283 = sub nsw i64 0, %1280
  %1284 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 %1283
  %1285 = add nsw i64 %1280, -4
  %1286 = lshr exact i64 %1285, 2
  %1287 = add nuw nsw i64 %1286, 1
  %1288 = and i64 %1287, 1
  %1289 = icmp eq i64 %1285, 0
  br i1 %1289, label %1336, label %1290

1290:                                             ; preds = %1279
  %1291 = sub nuw nsw i64 %1287, %1288
  %1292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1249, i64 -1
  %1293 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 -1
  %1294 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1249, i64 -1
  %1295 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 -1
  br label %1296

1296:                                             ; preds = %1296, %1290
  %1297 = phi i64 [ 0, %1290 ], [ %1331, %1296 ]
  %1298 = phi i64 [ %1291, %1290 ], [ %1332, %1296 ]
  %1299 = sub i64 0, %1297
  %1300 = sub i64 0, %1297
  %1301 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1292, i64 %1299
  %1302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1293, i64 %1300
  %1303 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1302, i64 -1
  %1304 = bitcast %"class.sh::TIntermNode"** %1303 to <2 x i64>*
  %1305 = load <2 x i64>, <2 x i64>* %1304, align 8, !alias.scope !44
  %1306 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1302, i64 -2
  %1307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1306, i64 -1
  %1308 = bitcast %"class.sh::TIntermNode"** %1307 to <2 x i64>*
  %1309 = load <2 x i64>, <2 x i64>* %1308, align 8, !alias.scope !44
  %1310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1301, i64 -1
  %1311 = bitcast %"class.sh::TIntermNode"** %1310 to <2 x i64>*
  store <2 x i64> %1305, <2 x i64>* %1311, align 8, !alias.scope !47, !noalias !44
  %1312 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1301, i64 -2
  %1313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1312, i64 -1
  %1314 = bitcast %"class.sh::TIntermNode"** %1313 to <2 x i64>*
  store <2 x i64> %1309, <2 x i64>* %1314, align 8, !alias.scope !47, !noalias !44
  %1315 = sub nuw nsw i64 -4, %1297
  %1316 = sub nuw nsw i64 -4, %1297
  %1317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1294, i64 %1315
  %1318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1295, i64 %1316
  %1319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1318, i64 -1
  %1320 = bitcast %"class.sh::TIntermNode"** %1319 to <2 x i64>*
  %1321 = load <2 x i64>, <2 x i64>* %1320, align 8, !alias.scope !44
  %1322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1318, i64 -2
  %1323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 -1
  %1324 = bitcast %"class.sh::TIntermNode"** %1323 to <2 x i64>*
  %1325 = load <2 x i64>, <2 x i64>* %1324, align 8, !alias.scope !44
  %1326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1317, i64 -1
  %1327 = bitcast %"class.sh::TIntermNode"** %1326 to <2 x i64>*
  store <2 x i64> %1321, <2 x i64>* %1327, align 8, !alias.scope !47, !noalias !44
  %1328 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1317, i64 -2
  %1329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1328, i64 -1
  %1330 = bitcast %"class.sh::TIntermNode"** %1329 to <2 x i64>*
  store <2 x i64> %1325, <2 x i64>* %1330, align 8, !alias.scope !47, !noalias !44
  %1331 = add i64 %1297, 8
  %1332 = add i64 %1298, -2
  %1333 = icmp eq i64 %1332, 0
  br i1 %1333, label %1334, label %1296, !llvm.loop !49

1334:                                             ; preds = %1296
  %1335 = sub nuw nsw i64 -8, %1297
  br label %1336

1336:                                             ; preds = %1334, %1279
  %1337 = phi i64 [ 0, %1279 ], [ %1335, %1334 ]
  %1338 = icmp eq i64 %1288, 0
  br i1 %1338, label %1356, label %1339

1339:                                             ; preds = %1336
  %1340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1249, i64 -1
  %1341 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1257, i64 -1
  %1342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1340, i64 %1337
  %1343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1341, i64 %1337
  %1344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1343, i64 -1
  %1345 = bitcast %"class.sh::TIntermNode"** %1344 to <2 x i64>*
  %1346 = load <2 x i64>, <2 x i64>* %1345, align 8, !alias.scope !44
  %1347 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1343, i64 -2
  %1348 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1347, i64 -1
  %1349 = bitcast %"class.sh::TIntermNode"** %1348 to <2 x i64>*
  %1350 = load <2 x i64>, <2 x i64>* %1349, align 8, !alias.scope !44
  %1351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1342, i64 -1
  %1352 = bitcast %"class.sh::TIntermNode"** %1351 to <2 x i64>*
  store <2 x i64> %1346, <2 x i64>* %1352, align 8, !alias.scope !47, !noalias !44
  %1353 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1342, i64 -2
  %1354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1353, i64 -1
  %1355 = bitcast %"class.sh::TIntermNode"** %1354 to <2 x i64>*
  store <2 x i64> %1350, <2 x i64>* %1355, align 8, !alias.scope !47, !noalias !44
  br label %1356

1356:                                             ; preds = %1336, %1339
  %1357 = icmp eq i64 %1264, %1280
  br i1 %1357, label %1428, label %1358

1358:                                             ; preds = %1356, %1266, %1259
  %1359 = phi %"class.sh::TIntermNode"** [ %1249, %1266 ], [ %1249, %1259 ], [ %1282, %1356 ]
  %1360 = phi %"class.sh::TIntermNode"** [ %1257, %1266 ], [ %1257, %1259 ], [ %1284, %1356 ]
  %1361 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1360, i64 -1
  %1362 = ptrtoint %"class.sh::TIntermNode"** %1361 to i64
  %1363 = sub i64 %1362, %1256
  %1364 = lshr i64 %1363, 3
  %1365 = add nuw nsw i64 %1364, 1
  %1366 = and i64 %1365, 7
  %1367 = icmp eq i64 %1366, 0
  br i1 %1367, label %1379, label %1368

1368:                                             ; preds = %1358, %1368
  %1369 = phi %"class.sh::TIntermNode"** [ %1372, %1368 ], [ %1359, %1358 ]
  %1370 = phi %"class.sh::TIntermNode"** [ %1373, %1368 ], [ %1360, %1358 ]
  %1371 = phi i64 [ %1377, %1368 ], [ %1366, %1358 ]
  %1372 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1369, i64 -1
  %1373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1370, i64 -1
  %1374 = bitcast %"class.sh::TIntermNode"** %1373 to i64*
  %1375 = load i64, i64* %1374, align 8
  %1376 = bitcast %"class.sh::TIntermNode"** %1372 to i64*
  store i64 %1375, i64* %1376, align 8
  %1377 = add i64 %1371, -1
  %1378 = icmp eq i64 %1377, 0
  br i1 %1378, label %1379, label %1368, !llvm.loop !50

1379:                                             ; preds = %1368, %1358
  %1380 = phi %"class.sh::TIntermNode"** [ undef, %1358 ], [ %1372, %1368 ]
  %1381 = phi %"class.sh::TIntermNode"** [ %1359, %1358 ], [ %1372, %1368 ]
  %1382 = phi %"class.sh::TIntermNode"** [ %1360, %1358 ], [ %1373, %1368 ]
  %1383 = icmp ult i64 %1363, 56
  br i1 %1383, label %1428, label %1384

1384:                                             ; preds = %1379, %1384
  %1385 = phi %"class.sh::TIntermNode"** [ %1422, %1384 ], [ %1381, %1379 ]
  %1386 = phi %"class.sh::TIntermNode"** [ %1423, %1384 ], [ %1382, %1379 ]
  %1387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -1
  %1388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -1
  %1389 = bitcast %"class.sh::TIntermNode"** %1388 to i64*
  %1390 = load i64, i64* %1389, align 8
  %1391 = bitcast %"class.sh::TIntermNode"** %1387 to i64*
  store i64 %1390, i64* %1391, align 8
  %1392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -2
  %1393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -2
  %1394 = bitcast %"class.sh::TIntermNode"** %1393 to i64*
  %1395 = load i64, i64* %1394, align 8
  %1396 = bitcast %"class.sh::TIntermNode"** %1392 to i64*
  store i64 %1395, i64* %1396, align 8
  %1397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -3
  %1398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -3
  %1399 = bitcast %"class.sh::TIntermNode"** %1398 to i64*
  %1400 = load i64, i64* %1399, align 8
  %1401 = bitcast %"class.sh::TIntermNode"** %1397 to i64*
  store i64 %1400, i64* %1401, align 8
  %1402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -4
  %1403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -4
  %1404 = bitcast %"class.sh::TIntermNode"** %1403 to i64*
  %1405 = load i64, i64* %1404, align 8
  %1406 = bitcast %"class.sh::TIntermNode"** %1402 to i64*
  store i64 %1405, i64* %1406, align 8
  %1407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -5
  %1408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -5
  %1409 = bitcast %"class.sh::TIntermNode"** %1408 to i64*
  %1410 = load i64, i64* %1409, align 8
  %1411 = bitcast %"class.sh::TIntermNode"** %1407 to i64*
  store i64 %1410, i64* %1411, align 8
  %1412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -6
  %1413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -6
  %1414 = bitcast %"class.sh::TIntermNode"** %1413 to i64*
  %1415 = load i64, i64* %1414, align 8
  %1416 = bitcast %"class.sh::TIntermNode"** %1412 to i64*
  store i64 %1415, i64* %1416, align 8
  %1417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -7
  %1418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -7
  %1419 = bitcast %"class.sh::TIntermNode"** %1418 to i64*
  %1420 = load i64, i64* %1419, align 8
  %1421 = bitcast %"class.sh::TIntermNode"** %1417 to i64*
  store i64 %1420, i64* %1421, align 8
  %1422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1385, i64 -8
  %1423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -8
  %1424 = bitcast %"class.sh::TIntermNode"** %1423 to i64*
  %1425 = load i64, i64* %1424, align 8
  %1426 = bitcast %"class.sh::TIntermNode"** %1422 to i64*
  store i64 %1425, i64* %1426, align 8
  %1427 = icmp eq %"class.sh::TIntermNode"** %1423, %1255
  br i1 %1427, label %1428, label %1384, !llvm.loop !51

1428:                                             ; preds = %1379, %1384, %1356, %1246
  %1429 = phi %"class.sh::TIntermNode"** [ %1249, %1246 ], [ %1282, %1356 ], [ %1380, %1379 ], [ %1422, %1384 ]
  %1430 = ptrtoint %"class.sh::TIntermNode"** %1429 to i64
  store i64 %1430, i64* %1222, align 16
  store i64 %1254, i64* %1221, align 8
  store i64 %1251, i64* %1231, align 16
  br label %1431

1431:                                             ; preds = %1428, %1214
  %1432 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %949, align 8
  %1433 = icmp eq %"class.sh::TIntermNode"** %1432, null
  br i1 %1433, label %1436, label %1434

1434:                                             ; preds = %1431
  %1435 = ptrtoint %"class.sh::TIntermNode"** %1432 to i64
  store i64 %1435, i64* %956, align 8
  br label %1436

1436:                                             ; preds = %1431, %1434
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %948) #4
  br label %1437

1437:                                             ; preds = %1436, %941
  %1438 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %1439 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1438, i64 64) #4
  %1440 = bitcast i8* %1439 to %"class.sh::TIntermBlock"*
  %1441 = bitcast i8* %1439 to i32 (...)***
  %1442 = getelementptr inbounds i8, i8* %1439, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1442, i8 0, i64 16, i1 false) #4
  %1443 = getelementptr inbounds i8, i8* %1439, i64 24
  %1444 = bitcast i8* %1443 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1441, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1444, align 8
  %1445 = getelementptr inbounds i8, i8* %1439, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1445, i8 0, i64 25, i1 false) #4
  %1446 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**), align 8
  %1447 = call %"class.sh::TVector.31"* %1446(%"class.sh::TIntermBlock"* %1440) #4
  %1448 = bitcast %"class.sh::TVector.31"* %1447 to i64*
  %1449 = bitcast %"class.sh::TVector.31"* %16 to i64*
  %1450 = load i64, i64* %1449, align 16
  %1451 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1447, i64 0, i32 0, i32 0, i32 1
  %1452 = bitcast %"class.sh::TIntermNode"*** %1451 to i64*
  %1453 = bitcast %"class.sh::TVector.31"* %1447 to <2 x i64>*
  %1454 = load <2 x i64>, <2 x i64>* %1453, align 8
  store i64 %1450, i64* %1448, align 8
  %1455 = bitcast %"class.sh::TIntermNode"*** %38 to i64*
  %1456 = load i64, i64* %1455, align 8
  store i64 %1456, i64* %1452, align 8
  %1457 = bitcast %"class.sh::TVector.31"* %16 to <2 x i64>*
  store <2 x i64> %1454, <2 x i64>* %1457, align 16
  %1458 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1447, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1459 = bitcast %"class.sh::TIntermNode"*** %1458 to i64*
  %1460 = load i64, i64* %1459, align 8
  %1461 = bitcast %"class.sh::TIntermNode"*** %39 to i64*
  %1462 = load i64, i64* %1461, align 16
  store i64 %1462, i64* %1459, align 8
  store i64 %1460, i64* %1461, align 16
  %1463 = call %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %1) #4
  %1464 = bitcast %"class.sh::TIntermBlock"* %1463 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %1465 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %1464, align 8
  %1466 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %1465, i64 27
  %1467 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %1466, align 8
  %1468 = call %"class.sh::TVector.31"* %1467(%"class.sh::TIntermBlock"* %1463) #4
  %1469 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1468, i64 0, i32 0
  %1470 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %1464, align 8
  %1471 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %1470, i64 27
  %1472 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %1471, align 8
  %1473 = call %"class.sh::TVector.31"* %1472(%"class.sh::TIntermBlock"* %1463) #4
  %1474 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1473, i64 0, i32 0, i32 0, i32 0
  %1475 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1474, align 8
  %1476 = bitcast %"class.sh::TIntermNode"** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1476) #4
  %1477 = bitcast %"class.sh::TIntermNode"** %17 to i8**
  store i8* %1439, i8** %1477, align 8
  %1478 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"* %1469, %"class.sh::TIntermNode"** %1475, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %17)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1476) #4
  %1479 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 16
  %1480 = icmp eq %"class.sh::TIntermNode"** %1479, null
  br i1 %1480, label %1483, label %1481

1481:                                             ; preds = %1437
  %1482 = ptrtoint %"class.sh::TIntermNode"** %1479 to i64
  store i64 %1482, i64* %1455, align 8
  br label %1483

1483:                                             ; preds = %1437, %1481
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #4
  br label %1484

1484:                                             ; preds = %1483, %28
  %1485 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %1486 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1485) #4
  br label %1487

1487:                                             ; preds = %29, %7, %1484
  %1488 = phi i1 [ %1486, %1484 ], [ false, %7 ], [ false, %29 ]
  ret i1 %1488
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"*, %"class.sh::TVariable"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TVariable"*, %"class.sh::TVariable"*) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_ViewID_OVREv() local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_InstanceIDEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %164

14:                                               ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %21 = ptrtoint %"class.sh::TIntermNode"** %20 to i64
  %22 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %578

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %25 = ptrtoint %"class.sh::TIntermNode"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %27
  %29 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %30 = icmp ult %"class.sh::TIntermNode"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %32
  %34 = bitcast %"class.sh::TIntermNode"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.sh::TIntermNode"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.sh::TIntermNode"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %55
  %57 = icmp ult %"class.sh::TIntermNode"** %8, %56
  %58 = icmp ult %"class.sh::TIntermNode"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %61
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %72
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %72
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !52
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !52
  %81 = bitcast %"class.sh::TIntermNode"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !55, !noalias !52
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !55, !noalias !52
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %84
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !52
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !52
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !55, !noalias !52
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !55, !noalias !52
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !52
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !52
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !55, !noalias !52
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !55, !noalias !52
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !52
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !52
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !55, !noalias !52
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !55, !noalias !52
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !57

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %124
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %124
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !52
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 2
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !52
  %133 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !55, !noalias !52
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 2
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !55, !noalias !52
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !58

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi %"class.sh::TIntermNode"** [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint %"class.sh::TIntermNode"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %148
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #4
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi %"class.sh::TIntermNode"** [ %158, %151 ], [ %42, %41 ]
  %153 = phi %"class.sh::TIntermNode"** [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.sh::TIntermNode"** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 1
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  %159 = icmp ult %"class.sh::TIntermNode"** %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !59

160:                                              ; preds = %144, %147
  %161 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %162, i64* %163, align 8
  br label %578

164:                                              ; preds = %3
  %165 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %166 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %12, %167
  %169 = ashr exact i64 %168, 3
  %170 = add nsw i64 %169, 1
  %171 = icmp ugt i64 %170, 2305843009213693951
  br i1 %171, label %172, label %174

172:                                              ; preds = %164
  %173 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %173) #5
  unreachable

174:                                              ; preds = %164
  %175 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %176 = sub i64 %13, %167
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %182, label %179

179:                                              ; preds = %174
  %180 = sub i64 %4, %167
  %181 = ashr exact i64 %180, 3
  br label %189

182:                                              ; preds = %174
  %183 = ashr exact i64 %176, 2
  %184 = icmp ult i64 %183, %170
  %185 = select i1 %184, i64 %170, i64 %183
  %186 = sub i64 %4, %167
  %187 = ashr exact i64 %186, 3
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %196, label %189

189:                                              ; preds = %179, %182
  %190 = phi i64 [ %181, %179 ], [ %187, %182 ]
  %191 = phi i64 [ 2305843009213693951, %179 ], [ %185, %182 ]
  %192 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %193 = shl i64 %191, 3
  %194 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %192, i64 %193) #4
  %195 = bitcast i8* %194 to %"class.sh::TIntermNode"**
  br label %196

196:                                              ; preds = %182, %189
  %197 = phi i64 [ %190, %189 ], [ %187, %182 ]
  %198 = phi i64 [ %191, %189 ], [ 0, %182 ]
  %199 = phi %"class.sh::TIntermNode"** [ %195, %189 ], [ null, %182 ]
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %197
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %198
  %202 = ptrtoint %"class.sh::TIntermNode"** %201 to i64
  %203 = icmp eq i64 %197, %198
  br i1 %203, label %204, label %222

204:                                              ; preds = %196
  %205 = icmp sgt i64 %197, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = add nuw nsw i64 %197, 1
  %208 = sdiv i64 %207, -2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 %208
  br label %222

210:                                              ; preds = %204
  %211 = shl nsw i64 %197, 1
  %212 = icmp eq i64 %197, 0
  %213 = select i1 %212, i64 1, i64 %211
  %214 = lshr i64 %213, 2
  %215 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %216 = shl i64 %213, 3
  %217 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %215, i64 %216) #4
  %218 = bitcast i8* %217 to %"class.sh::TIntermNode"**
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %214
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %213
  %221 = ptrtoint %"class.sh::TIntermNode"** %220 to i64
  br label %222

222:                                              ; preds = %196, %206, %210
  %223 = phi %"class.sh::TIntermNode"** [ %209, %206 ], [ %219, %210 ], [ %200, %196 ]
  %224 = phi i64 [ %202, %206 ], [ %221, %210 ], [ %202, %196 ]
  %225 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %226 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %225, align 8
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 1
  %229 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  %231 = icmp eq %"class.sh::TIntermNode"** %229, %1
  br i1 %231, label %399, label %232

232:                                              ; preds = %222
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  %235 = sub i64 %234, %230
  %236 = lshr i64 %235, 3
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ult i64 %237, 4
  br i1 %238, label %329, label %239

239:                                              ; preds = %232
  %240 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %241 = ptrtoint %"class.sh::TIntermNode"** %240 to i64
  %242 = sub i64 %241, %230
  %243 = lshr i64 %242, 3
  %244 = xor i64 %243, -1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %244
  %246 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %244
  %247 = icmp ult %"class.sh::TIntermNode"** %245, %1
  %248 = icmp ult %"class.sh::TIntermNode"** %246, %223
  %249 = and i1 %247, %248
  br i1 %249, label %329, label %250

250:                                              ; preds = %239
  %251 = and i64 %237, 4611686018427387900
  %252 = sub nsw i64 0, %251
  %253 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %252
  %254 = sub nsw i64 0, %251
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %254
  %256 = add nsw i64 %251, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 1
  %260 = icmp eq i64 %256, 0
  br i1 %260, label %305, label %261

261:                                              ; preds = %250
  %262 = sub nuw nsw i64 %258, %259
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %264 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %267

267:                                              ; preds = %267, %261
  %268 = phi i64 [ 0, %261 ], [ %302, %267 ]
  %269 = phi i64 [ %262, %261 ], [ %303, %267 ]
  %270 = sub i64 0, %268
  %271 = sub i64 0, %268
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %270
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %271
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -1
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !60
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -2
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 -1
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !60
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %282, align 8, !alias.scope !63, !noalias !60
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 -1
  %285 = bitcast %"class.sh::TIntermNode"** %284 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %285, align 8, !alias.scope !63, !noalias !60
  %286 = sub nuw nsw i64 -4, %268
  %287 = sub nuw nsw i64 -4, %268
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 %286
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 %287
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -1
  %291 = bitcast %"class.sh::TIntermNode"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !60
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -2
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -1
  %295 = bitcast %"class.sh::TIntermNode"** %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !alias.scope !60
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -1
  %298 = bitcast %"class.sh::TIntermNode"** %297 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %298, align 8, !alias.scope !63, !noalias !60
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -2
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 -1
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %301, align 8, !alias.scope !63, !noalias !60
  %302 = add i64 %268, 8
  %303 = add i64 %269, -2
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %267, !llvm.loop !65

305:                                              ; preds = %267, %250
  %306 = phi i64 [ 0, %250 ], [ %302, %267 ]
  %307 = icmp eq i64 %259, 0
  br i1 %307, label %327, label %308

308:                                              ; preds = %305
  %309 = sub i64 0, %306
  %310 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %311 = sub i64 0, %306
  %312 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 %309
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %312, i64 %311
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !60
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -2
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 -1
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !60
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -1
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %323, align 8, !alias.scope !63, !noalias !60
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -2
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %326, align 8, !alias.scope !63, !noalias !60
  br label %327

327:                                              ; preds = %305, %308
  %328 = icmp eq i64 %237, %251
  br i1 %328, label %399, label %329

329:                                              ; preds = %327, %239, %232
  %330 = phi %"class.sh::TIntermNode"** [ %223, %239 ], [ %223, %232 ], [ %253, %327 ]
  %331 = phi %"class.sh::TIntermNode"** [ %1, %239 ], [ %1, %232 ], [ %255, %327 ]
  %332 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %333 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %334 = sub i64 %333, %230
  %335 = lshr i64 %334, 3
  %336 = add nuw nsw i64 %335, 1
  %337 = and i64 %336, 7
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %350, label %339

339:                                              ; preds = %329, %339
  %340 = phi %"class.sh::TIntermNode"** [ %343, %339 ], [ %330, %329 ]
  %341 = phi %"class.sh::TIntermNode"** [ %344, %339 ], [ %331, %329 ]
  %342 = phi i64 [ %348, %339 ], [ %337, %329 ]
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to i64*
  %346 = load i64, i64* %345, align 8
  %347 = bitcast %"class.sh::TIntermNode"** %343 to i64*
  store i64 %346, i64* %347, align 8
  %348 = add i64 %342, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %339, !llvm.loop !66

350:                                              ; preds = %339, %329
  %351 = phi %"class.sh::TIntermNode"** [ undef, %329 ], [ %343, %339 ]
  %352 = phi %"class.sh::TIntermNode"** [ %330, %329 ], [ %343, %339 ]
  %353 = phi %"class.sh::TIntermNode"** [ %331, %329 ], [ %344, %339 ]
  %354 = icmp ult i64 %334, 56
  br i1 %354, label %399, label %355

355:                                              ; preds = %350, %355
  %356 = phi %"class.sh::TIntermNode"** [ %393, %355 ], [ %352, %350 ]
  %357 = phi %"class.sh::TIntermNode"** [ %394, %355 ], [ %353, %350 ]
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %360 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = bitcast %"class.sh::TIntermNode"** %358 to i64*
  store i64 %361, i64* %362, align 8
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %365 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.sh::TIntermNode"** %363 to i64*
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -3
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -3
  %370 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = bitcast %"class.sh::TIntermNode"** %368 to i64*
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -4
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -4
  %375 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.sh::TIntermNode"** %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -5
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -5
  %380 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.sh::TIntermNode"** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -6
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -6
  %385 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.sh::TIntermNode"** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -7
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -7
  %390 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -8
  %395 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.sh::TIntermNode"** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = icmp eq %"class.sh::TIntermNode"** %394, %229
  br i1 %398, label %399, label %355, !llvm.loop !67

399:                                              ; preds = %350, %355, %327, %222
  %400 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %253, %327 ], [ %351, %350 ], [ %393, %355 ]
  %401 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %402 = icmp eq %"class.sh::TIntermNode"** %401, %1
  br i1 %402, label %574, label %403

403:                                              ; preds = %399
  %404 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %405 = ptrtoint %"class.sh::TIntermNode"** %404 to i64
  %406 = sub i64 %405, %4
  %407 = lshr i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = icmp ult i64 %408, 4
  br i1 %409, label %503, label %410

410:                                              ; preds = %403
  %411 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = sub i64 %412, %4
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 2
  %416 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %415
  %417 = add nuw nsw i64 %414, 1
  %418 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %417
  %419 = icmp ult %"class.sh::TIntermNode"** %228, %418
  %420 = icmp ugt %"class.sh::TIntermNode"** %416, %1
  %421 = and i1 %419, %420
  br i1 %421, label %503, label %422

422:                                              ; preds = %410
  %423 = and i64 %408, 4611686018427387900
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %423
  %425 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %423
  %426 = add nsw i64 %423, -4
  %427 = lshr exact i64 %426, 2
  %428 = add nuw nsw i64 %427, 1
  %429 = and i64 %428, 3
  %430 = icmp ult i64 %426, 12
  br i1 %430, label %482, label %431

431:                                              ; preds = %422
  %432 = sub nsw i64 %428, %429
  br label %433

433:                                              ; preds = %433, %431
  %434 = phi i64 [ 0, %431 ], [ %479, %433 ]
  %435 = phi i64 [ %432, %431 ], [ %480, %433 ]
  %436 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %434
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %434
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !68
  %440 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %437, i64 2
  %441 = bitcast %"class.sh::TIntermNode"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !68
  %443 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %443, align 8, !alias.scope !71, !noalias !68
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 2
  %445 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %445, align 8, !alias.scope !71, !noalias !68
  %446 = or i64 %434, 4
  %447 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %446
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %446
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !68
  %451 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 2
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !68
  %454 = bitcast %"class.sh::TIntermNode"** %447 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %454, align 8, !alias.scope !71, !noalias !68
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %447, i64 2
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %456, align 8, !alias.scope !71, !noalias !68
  %457 = or i64 %434, 8
  %458 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %457
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %457
  %460 = bitcast %"class.sh::TIntermNode"** %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !68
  %462 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 2
  %463 = bitcast %"class.sh::TIntermNode"** %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 8, !alias.scope !68
  %465 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %465, align 8, !alias.scope !71, !noalias !68
  %466 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 2
  %467 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %467, align 8, !alias.scope !71, !noalias !68
  %468 = or i64 %434, 12
  %469 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %468
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %468
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !68
  %473 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %470, i64 2
  %474 = bitcast %"class.sh::TIntermNode"** %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 8, !alias.scope !68
  %476 = bitcast %"class.sh::TIntermNode"** %469 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %476, align 8, !alias.scope !71, !noalias !68
  %477 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 2
  %478 = bitcast %"class.sh::TIntermNode"** %477 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %478, align 8, !alias.scope !71, !noalias !68
  %479 = add i64 %434, 16
  %480 = add i64 %435, -4
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %433, !llvm.loop !73

482:                                              ; preds = %433, %422
  %483 = phi i64 [ 0, %422 ], [ %479, %433 ]
  %484 = icmp eq i64 %429, 0
  br i1 %484, label %501, label %485

485:                                              ; preds = %482, %485
  %486 = phi i64 [ %498, %485 ], [ %483, %482 ]
  %487 = phi i64 [ %499, %485 ], [ %429, %482 ]
  %488 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %486
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %486
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !68
  %492 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %489, i64 2
  %493 = bitcast %"class.sh::TIntermNode"** %492 to <2 x i64>*
  %494 = load <2 x i64>, <2 x i64>* %493, align 8, !alias.scope !68
  %495 = bitcast %"class.sh::TIntermNode"** %488 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %495, align 8, !alias.scope !71, !noalias !68
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 2
  %497 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %494, <2 x i64>* %497, align 8, !alias.scope !71, !noalias !68
  %498 = add i64 %486, 4
  %499 = add i64 %487, -1
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %485, !llvm.loop !74

501:                                              ; preds = %485, %482
  %502 = icmp eq i64 %408, %423
  br i1 %502, label %574, label %503

503:                                              ; preds = %501, %410, %403
  %504 = phi %"class.sh::TIntermNode"** [ %228, %410 ], [ %228, %403 ], [ %424, %501 ]
  %505 = phi %"class.sh::TIntermNode"** [ %1, %410 ], [ %1, %403 ], [ %425, %501 ]
  %506 = ptrtoint %"class.sh::TIntermNode"** %505 to i64
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %508 = ptrtoint %"class.sh::TIntermNode"** %507 to i64
  %509 = sub i64 %508, %506
  %510 = lshr i64 %509, 3
  %511 = add nuw nsw i64 %510, 1
  %512 = and i64 %511, 7
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %525, label %514

514:                                              ; preds = %503, %514
  %515 = phi %"class.sh::TIntermNode"** [ %522, %514 ], [ %504, %503 ]
  %516 = phi %"class.sh::TIntermNode"** [ %521, %514 ], [ %505, %503 ]
  %517 = phi i64 [ %523, %514 ], [ %512, %503 ]
  %518 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %519 = bitcast %"class.sh::TIntermNode"** %516 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %518, align 8
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 1
  %522 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 1
  %523 = add i64 %517, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %514, !llvm.loop !75

525:                                              ; preds = %514, %503
  %526 = phi %"class.sh::TIntermNode"** [ undef, %503 ], [ %522, %514 ]
  %527 = phi %"class.sh::TIntermNode"** [ %504, %503 ], [ %522, %514 ]
  %528 = phi %"class.sh::TIntermNode"** [ %505, %503 ], [ %521, %514 ]
  %529 = icmp ult i64 %509, 56
  br i1 %529, label %574, label %530

530:                                              ; preds = %525, %530
  %531 = phi %"class.sh::TIntermNode"** [ %572, %530 ], [ %527, %525 ]
  %532 = phi %"class.sh::TIntermNode"** [ %571, %530 ], [ %528, %525 ]
  %533 = bitcast %"class.sh::TIntermNode"** %531 to i64*
  %534 = bitcast %"class.sh::TIntermNode"** %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %533, align 8
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 1
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to i64*
  %539 = bitcast %"class.sh::TIntermNode"** %536 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %538, align 8
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 2
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 2
  %543 = bitcast %"class.sh::TIntermNode"** %542 to i64*
  %544 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %543, align 8
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 3
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 3
  %548 = bitcast %"class.sh::TIntermNode"** %547 to i64*
  %549 = bitcast %"class.sh::TIntermNode"** %546 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %548, align 8
  %551 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 4
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 4
  %553 = bitcast %"class.sh::TIntermNode"** %552 to i64*
  %554 = bitcast %"class.sh::TIntermNode"** %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %553, align 8
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 5
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 5
  %558 = bitcast %"class.sh::TIntermNode"** %557 to i64*
  %559 = bitcast %"class.sh::TIntermNode"** %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %558, align 8
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 6
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 6
  %563 = bitcast %"class.sh::TIntermNode"** %562 to i64*
  %564 = bitcast %"class.sh::TIntermNode"** %561 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %563, align 8
  %566 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 7
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 7
  %568 = bitcast %"class.sh::TIntermNode"** %567 to i64*
  %569 = bitcast %"class.sh::TIntermNode"** %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %568, align 8
  %571 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 8
  %573 = icmp eq %"class.sh::TIntermNode"** %571, %401
  br i1 %573, label %574, label %530, !llvm.loop !76

574:                                              ; preds = %525, %530, %501, %399
  %575 = phi %"class.sh::TIntermNode"** [ %228, %399 ], [ %424, %501 ], [ %526, %525 ], [ %572, %530 ]
  %576 = ptrtoint %"class.sh::TIntermNode"** %400 to i64
  %577 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  store i64 %576, i64* %166, align 8
  store i64 %577, i64* %165, align 8
  store i64 %224, i64* %175, align 8
  ret %"class.sh::TIntermNode"** %223

578:                                              ; preds = %16, %160
  ret %"class.sh::TIntermNode"** %1
}

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.31"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable16gl_ViewportIndexEv() local_unnamed_addr #2

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable10gl_LayerVSEv() local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #2

declare void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !8}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !10}
!51 = distinct !{!51, !8}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !10}
!67 = distinct !{!67, !8}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !8}
!74 = distinct !{!74, !10}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !8}
