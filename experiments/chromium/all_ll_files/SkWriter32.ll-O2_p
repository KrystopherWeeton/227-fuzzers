; ModuleID = '../../third_party/skia/src/core/SkWriter32.cpp'
source_filename = "../../third_party/skia/src/core/SkWriter32.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkMatrix = type { [9 x float], i32 }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkWriter3211writeMatrixERK8SkMatrix(%class.SkWriter32* nocapture, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @_ZNK8SkMatrix13writeToMemoryEPv(%class.SkMatrix* %1, i8* null) #5
  %4 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  %7 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %6, %8
  br i1 %9, label %10, label %44

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, %12
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i1 [ false, %10 ], [ %17, %14 ]
  %20 = lshr i64 %8, 1
  %21 = add i64 %20, %8
  %22 = icmp ugt i64 %21, %6
  %23 = select i1 %22, i64 %21, i64 %6
  %24 = add i64 %23, 4096
  store i64 %24, i64* %7, align 8
  %25 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 4
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %18
  %28 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %25, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %29, i64 %24) #5
  br label %31

31:                                               ; preds = %27, %18
  %32 = phi i8* [ %30, %27 ], [ null, %18 ]
  %33 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %25, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  store i8* %32, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  tail call void @_Z7sk_freePv(i8* nonnull %34) #5
  %37 = load i8*, i8** %33, align 8
  br label %38

38:                                               ; preds = %36, %31
  %39 = phi i8* [ %32, %31 ], [ %37, %36 ]
  %40 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  store i8* %39, i8** %40, align 8
  br i1 %19, label %41, label %44

41:                                               ; preds = %38
  %42 = load i8*, i8** %11, align 8
  %43 = load i64, i64* %4, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %42, i64 %43, i1 false) #5
  br label %44

44:                                               ; preds = %2, %38, %41
  store i64 %6, i64* %4, align 8
  %45 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 %5
  %48 = tail call i64 @_ZNK8SkMatrix13writeToMemoryEPv(%class.SkMatrix* %1, i8* %47) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkWriter3211writeStringEPKcm(%class.SkWriter32* nocapture, i8* readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %1, null
  %5 = select i1 %4, i64 0, i64 %2
  %6 = select i1 %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %1
  %7 = icmp slt i64 %5, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %3
  %9 = tail call i64 @strlen(i8* %6) #6
  br label %10

10:                                               ; preds = %8, %3
  %11 = phi i64 [ %9, %8 ], [ %5, %3 ]
  %12 = add i64 %11, 5
  %13 = add i64 %11, 8
  %14 = and i64 %13, -4
  %15 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %14, %16
  %18 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %17, %19
  br i1 %20, label %21, label %55

21:                                               ; preds = %10
  %22 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, %23
  br label %29

29:                                               ; preds = %25, %21
  %30 = phi i1 [ false, %21 ], [ %28, %25 ]
  %31 = lshr i64 %19, 1
  %32 = add i64 %31, %19
  %33 = icmp ugt i64 %32, %17
  %34 = select i1 %33, i64 %32, i64 %17
  %35 = add i64 %34, 4096
  store i64 %35, i64* %18, align 8
  %36 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 4
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %36, i64 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  store i8* null, i8** %39, align 8
  %41 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %40, i64 %35) #5
  br label %42

42:                                               ; preds = %38, %29
  %43 = phi i8* [ %41, %38 ], [ null, %29 ]
  %44 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %36, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  store i8* %43, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  tail call void @_Z7sk_freePv(i8* nonnull %45) #5
  %48 = load i8*, i8** %44, align 8
  br label %49

49:                                               ; preds = %47, %42
  %50 = phi i8* [ %43, %42 ], [ %48, %47 ]
  %51 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  store i8* %50, i8** %51, align 8
  br i1 %30, label %52, label %55

52:                                               ; preds = %49
  %53 = load i8*, i8** %22, align 8
  %54 = load i64, i64* %15, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %53, i64 %54, i1 false) #5
  br label %55

55:                                               ; preds = %10, %49, %52
  store i64 %17, i64* %15, align 8
  %56 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %16
  %59 = bitcast i8* %58 to i32*
  %60 = icmp eq i64 %14, %12
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = lshr i64 %13, 2
  %63 = add nsw i64 %62, -1
  %64 = getelementptr inbounds i32, i32* %59, i64 %63
  store i32 0, i32* %64, align 4
  br label %65

65:                                               ; preds = %55, %61
  %66 = trunc i64 %11 to i32
  store i32 %66, i32* %59, align 4
  %67 = getelementptr inbounds i8, i8* %58, i64 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %6, i64 %11, i1 false)
  %68 = getelementptr inbounds i8, i8* %67, i64 %11
  store i8 0, i8* %68, align 1
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN10SkWriter3215WriteStringSizeEPKcm(i8* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64 @strlen(i8* %0) #6
  br label %6

6:                                                ; preds = %4, %2
  %7 = phi i64 [ %5, %4 ], [ %1, %2 ]
  %8 = add i64 %7, 8
  %9 = and i64 %8, -4
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, %4
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i1 [ false, %2 ], [ %9, %6 ]
  %12 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = lshr i64 %13, 1
  %15 = add i64 %14, %13
  %16 = icmp ugt i64 %15, %1
  %17 = select i1 %16, i64 %15, i64 %1
  %18 = add i64 %17, 4096
  store i64 %18, i64* %12, align 8
  %19 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 4
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  store i8* null, i8** %22, align 8
  %24 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %23, i64 %18) #5
  br label %25

25:                                               ; preds = %21, %10
  %26 = phi i8* [ %24, %21 ], [ null, %10 ]
  %27 = getelementptr inbounds %class.SkAutoTMalloc, %class.SkAutoTMalloc* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* %26, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  tail call void @_Z7sk_freePv(i8* nonnull %28) #5
  %31 = load i8*, i8** %27, align 8
  br label %32

32:                                               ; preds = %25, %30
  %33 = phi i8* [ %26, %25 ], [ %31, %30 ]
  %34 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 0
  store i8* %33, i8** %34, align 8
  br i1 %11, label %35, label %39

35:                                               ; preds = %32
  %36 = load i8*, i8** %3, align 8
  %37 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %0, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %36, i64 %38, i1 false)
  br label %39

39:                                               ; preds = %35, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkWriter3214snapshotAsDataEv(%class.sk_sp* noalias sret, %class.SkWriter32* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN6SkData12MakeWithCopyEPKvm(%class.sk_sp* sret %0, i8* %4, i64 %6) #5
  ret void
}

declare void @_ZN6SkData12MakeWithCopyEPKvm(%class.sk_sp* sret, i8*, i64) local_unnamed_addr #4

declare i64 @_ZNK8SkMatrix13writeToMemoryEPv(%class.SkMatrix*, i8*) local_unnamed_addr #4

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #4

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
