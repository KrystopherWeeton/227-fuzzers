; ModuleID = '../../third_party/perfetto/src/protozero/filtering/filter_bytecode_parser.cc'
source_filename = "../../third_party/perfetto/src/protozero/filtering/filter_bytecode_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.protozero::FilterBytecodeParser" = type <{ %"class.std::__1::vector", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%class.anon.1 = type { %"class.std::__1::vector"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [77 x i8] c"../../third_party/perfetto/src/protozero/filtering/filter_bytecode_parser.cc\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Filter bytecode checksum failed. Expected: %x, actual: %x\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9protozero20FilterBytecodeParser5ResetEv(%"class.protozero::FilterBytecodeParser"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = ptrtoint i32* %5 to i64
  %9 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = bitcast i32* %5 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  %12 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #10
  br label %13

13:                                               ; preds = %1, %7
  %14 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %16 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false)
  %17 = load i32*, i32** %15, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %13
  %20 = ptrtoint i32* %17 to i64
  %21 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* %23) #9
  %24 = bitcast %"class.std::__1::vector"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #10
  br label %25

25:                                               ; preds = %13, %19
  %26 = bitcast %"class.std::__1::vector"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false)
  store i8 %3, i8* %2, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9protozero20FilterBytecodeParser4LoadEPKvm(%"class.protozero::FilterBytecodeParser"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i8*
  br label %17

11:                                               ; preds = %3
  %12 = ptrtoint i32* %7 to i64
  %13 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = bitcast i32* %7 to i8*
  tail call void @_ZdlPv(i8* %15) #9
  %16 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #10
  br label %17

17:                                               ; preds = %9, %11
  %18 = phi i8* [ %10, %9 ], [ %16, %11 ]
  %19 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %19, i64 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #10
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = bitcast %"class.std::__1::vector"* %19 to i8*
  br label %31

25:                                               ; preds = %17
  %26 = ptrtoint i32* %21 to i64
  %27 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %28 = bitcast i32** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = bitcast i32* %21 to i8*
  tail call void @_ZdlPv(i8* %29) #9
  %30 = bitcast %"class.std::__1::vector"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #10
  br label %31

31:                                               ; preds = %23, %25
  %32 = phi i8* [ %24, %23 ], [ %30, %25 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #10
  store i8 %5, i8* %4, align 8
  %33 = tail call zeroext i1 @_ZN9protozero20FilterBytecodeParser12LoadInternalEPKhm(%"class.protozero::FilterBytecodeParser"* %0, i8* %1, i64 %2)
  br i1 %33, label %52, label %34

34:                                               ; preds = %31
  %35 = load i8, i8* %4, align 8, !range !2
  %36 = load i32*, i32** %6, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  tail call void @_ZdlPv(i8* %42) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #10
  br label %43

43:                                               ; preds = %38, %34
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #10
  %44 = load i32*, i32** %20, align 8
  %45 = icmp eq i32* %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %43
  %47 = ptrtoint i32* %44 to i64
  %48 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %49 = bitcast i32** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast i32* %44 to i8*
  tail call void @_ZdlPv(i8* %50) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #10
  br label %51

51:                                               ; preds = %43, %46
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #10
  store i8 %35, i8* %4, align 8
  br label %52

52:                                               ; preds = %51, %31
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9protozero20FilterBytecodeParser12LoadInternalEPKhm(%"class.protozero::FilterBytecodeParser"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %class.anon.1, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #10
  %12 = bitcast i32** %11 to i64*
  %13 = bitcast %"class.std::__1::vector"* %4 to i64*
  %14 = icmp eq i64 %2, 0
  br i1 %14, label %159, label %15

15:                                               ; preds = %3
  %16 = icmp ugt i64 %2, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @abort() #11
  unreachable

18:                                               ; preds = %15
  %19 = bitcast i32** %10 to i64*
  %20 = shl i64 %2, 2
  %21 = tail call i8* @_Znwm(i64 %20) #9
  %22 = bitcast i8* %21 to i32*
  %23 = ptrtoint i8* %21 to i64
  %24 = getelementptr inbounds i32, i32* %22, i64 %2
  %25 = ptrtoint i32* %24 to i64
  %26 = ptrtoint i8* %21 to i64
  store i64 %26, i64* %13, align 8
  store i64 %23, i64* %19, align 8
  store i64 %25, i64* %12, align 8
  %27 = icmp eq i8* %1, null
  %28 = getelementptr inbounds i8, i8* %1, i64 %2
  %29 = select i1 %27, i8* null, i8* %28
  %30 = icmp eq i8* %29, %1
  br i1 %30, label %159, label %31, !prof !3

31:                                               ; preds = %18
  %32 = icmp ugt i8* %29, %1
  br i1 %32, label %37, label %601

33:                                               ; preds = %37
  %34 = icmp ult i8* %41, %29
  %35 = icmp ult i64 %48, 64
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %601

37:                                               ; preds = %31, %33
  %38 = phi i64 [ %48, %33 ], [ 0, %31 ]
  %39 = phi i64 [ %46, %33 ], [ 0, %31 ]
  %40 = phi i8* [ %41, %33 ], [ %1, %31 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = load i8, i8* %40, align 1
  %43 = and i8 %42, 127
  %44 = zext i8 %43 to i64
  %45 = shl i64 %44, %38
  %46 = or i64 %45, %39
  %47 = icmp sgt i8 %42, -1
  %48 = add nuw nsw i64 %38, 7
  br i1 %47, label %49, label %33

49:                                               ; preds = %37
  %50 = icmp eq i8* %41, %1
  %51 = zext i1 %50 to i8
  br i1 %50, label %55, label %52

52:                                               ; preds = %49
  %53 = trunc i64 %46 to i32
  %54 = bitcast i32** %10 to i64*
  br label %60

55:                                               ; preds = %124, %151, %49
  %56 = phi i64 [ %23, %49 ], [ %122, %151 ], [ %122, %124 ]
  %57 = phi i32* [ %22, %49 ], [ %121, %151 ], [ %121, %124 ]
  %58 = phi i8 [ %51, %49 ], [ %67, %124 ], [ %152, %151 ]
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %159, label %601

60:                                               ; preds = %157, %52
  %61 = phi i64 [ %23, %52 ], [ %122, %157 ]
  %62 = phi i32* [ %24, %52 ], [ %158, %157 ]
  %63 = phi i32* [ %22, %52 ], [ %121, %157 ]
  %64 = phi i8 [ 1, %52 ], [ %155, %157 ]
  %65 = phi i32 [ %53, %52 ], [ %154, %157 ]
  %66 = phi i8* [ %41, %52 ], [ %153, %157 ]
  %67 = phi i8 [ %51, %52 ], [ %152, %157 ]
  %68 = icmp ult i32* %63, %62
  %69 = ptrtoint i32* %62 to i64
  br i1 %68, label %70, label %73

70:                                               ; preds = %60
  store i32 %65, i32* %63, align 4
  %71 = getelementptr inbounds i32, i32* %63, i64 1
  %72 = ptrtoint i32* %71 to i64
  store i64 %72, i64* %54, align 8
  br label %120

73:                                               ; preds = %60
  %74 = ptrtoint i32* %63 to i64
  %75 = load i64, i64* %13, align 8
  %76 = sub i64 %74, %75
  %77 = ashr exact i64 %76, 2
  %78 = add nsw i64 %77, 1
  %79 = icmp ugt i64 %78, 4611686018427387903
  br i1 %79, label %80, label %82

80:                                               ; preds = %73
  %81 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %81) #11
  unreachable

82:                                               ; preds = %73
  %83 = sub i64 %69, %75
  %84 = ashr exact i64 %83, 2
  %85 = icmp ult i64 %84, 2305843009213693951
  br i1 %85, label %86, label %94

86:                                               ; preds = %82
  %87 = ashr exact i64 %83, 1
  %88 = icmp ult i64 %87, %78
  %89 = select i1 %88, i64 %78, i64 %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = icmp ugt i64 %89, 4611686018427387903
  br i1 %92, label %93, label %94

93:                                               ; preds = %91
  tail call void @abort() #11
  unreachable

94:                                               ; preds = %91, %82
  %95 = phi i64 [ %89, %91 ], [ 4611686018427387903, %82 ]
  %96 = shl i64 %95, 2
  %97 = tail call i8* @_Znwm(i64 %96) #9
  %98 = bitcast i8* %97 to i32*
  br label %99

99:                                               ; preds = %94, %86
  %100 = phi i64 [ %95, %94 ], [ 0, %86 ]
  %101 = phi i32* [ %98, %94 ], [ null, %86 ]
  %102 = getelementptr inbounds i32, i32* %101, i64 %77
  %103 = getelementptr inbounds i32, i32* %101, i64 %100
  %104 = ptrtoint i32* %103 to i64
  store i32 %65, i32* %102, align 4
  %105 = getelementptr inbounds i32, i32* %102, i64 1
  %106 = ptrtoint i32* %105 to i64
  %107 = sub i64 %61, %75
  %108 = ashr exact i64 %107, 2
  %109 = sub nsw i64 0, %108
  %110 = getelementptr inbounds i32, i32* %102, i64 %109
  %111 = ptrtoint i32* %110 to i64
  %112 = icmp sgt i64 %107, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %99
  %114 = bitcast i32* %110 to i8*
  %115 = inttoptr i64 %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 4 %115, i64 %107, i1 false) #10
  br label %116

116:                                              ; preds = %113, %99
  store i64 %111, i64* %13, align 8
  store i64 %106, i64* %54, align 8
  store i64 %104, i64* %12, align 8
  %117 = icmp eq i64 %75, 0
  br i1 %117, label %120, label %118

118:                                              ; preds = %116
  %119 = inttoptr i64 %75 to i8*
  tail call void @_ZdlPv(i8* %119) #9
  br label %120

120:                                              ; preds = %70, %116, %118
  %121 = phi i32* [ %71, %70 ], [ %105, %116 ], [ %105, %118 ]
  %122 = phi i64 [ %72, %70 ], [ %106, %116 ], [ %106, %118 ]
  %123 = icmp eq i8 %64, 1
  br i1 %123, label %124, label %151, !prof !4

124:                                              ; preds = %120
  %125 = icmp eq i8* %66, %29
  br i1 %125, label %55, label %126, !prof !5

126:                                              ; preds = %124
  %127 = icmp ult i8* %66, %29
  br i1 %127, label %132, label %601

128:                                              ; preds = %132
  %129 = icmp ult i8* %136, %29
  %130 = icmp ult i64 %143, 64
  %131 = and i1 %130, %129
  br i1 %131, label %132, label %601

132:                                              ; preds = %126, %128
  %133 = phi i64 [ %143, %128 ], [ 0, %126 ]
  %134 = phi i64 [ %141, %128 ], [ 0, %126 ]
  %135 = phi i8* [ %136, %128 ], [ %66, %126 ]
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  %137 = load i8, i8* %135, align 1
  %138 = and i8 %137, 127
  %139 = zext i8 %138 to i64
  %140 = shl i64 %139, %133
  %141 = or i64 %140, %134
  %142 = icmp sgt i8 %137, -1
  %143 = add nuw nsw i64 %133, 7
  br i1 %142, label %144, label %128

144:                                              ; preds = %132
  %145 = icmp eq i8* %136, %66
  %146 = trunc i64 %141 to i32
  %147 = select i1 %145, i8 1, i8 %67, !prof !5
  %148 = select i1 %145, i32 %65, i32 %146, !prof !5
  %149 = xor i1 %145, true
  %150 = zext i1 %149 to i8
  br label %151

151:                                              ; preds = %144, %120
  %152 = phi i8 [ %67, %120 ], [ %147, %144 ]
  %153 = phi i8* [ %66, %120 ], [ %136, %144 ]
  %154 = phi i32 [ %65, %120 ], [ %148, %144 ]
  %155 = phi i8 [ %64, %120 ], [ %150, %144 ]
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %55, label %157

157:                                              ; preds = %151
  %158 = load i32*, i32** %11, align 8
  br label %60

159:                                              ; preds = %3, %18, %55
  %160 = phi i32* [ %57, %55 ], [ null, %3 ], [ %22, %18 ]
  %161 = phi i64 [ %56, %55 ], [ 0, %3 ], [ %23, %18 ]
  %162 = load i32*, i32** %9, align 8
  %163 = icmp eq i32* %162, %160
  %164 = ptrtoint i32* %162 to i64
  br i1 %163, label %604, label %165

165:                                              ; preds = %159
  %166 = bitcast i32** %10 to i64*
  %167 = sub i64 %161, %164
  %168 = icmp eq i64 %167, 4
  br i1 %168, label %172, label %169

169:                                              ; preds = %165
  %170 = ashr exact i64 %167, 2
  %171 = add nsw i64 %170, -1
  br label %178

172:                                              ; preds = %178, %165
  %173 = phi i64 [ -3750763034362895579, %165 ], [ %200, %178 ]
  %174 = trunc i64 %173 to i32
  %175 = getelementptr inbounds i32, i32* %160, i64 -1
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, %174
  br i1 %177, label %219, label %203

178:                                              ; preds = %169, %178
  %179 = phi i64 [ 0, %169 ], [ %201, %178 ]
  %180 = phi i64 [ -3750763034362895579, %169 ], [ %200, %178 ]
  %181 = getelementptr inbounds i32, i32* %162, i64 %179
  %182 = load i32, i32* %181, align 4
  %183 = and i32 %182, 255
  %184 = zext i32 %183 to i64
  %185 = xor i64 %180, %184
  %186 = mul i64 %185, 1099511628211
  %187 = lshr i32 %182, 8
  %188 = and i32 %187, 255
  %189 = zext i32 %188 to i64
  %190 = xor i64 %186, %189
  %191 = mul i64 %190, 1099511628211
  %192 = lshr i32 %182, 16
  %193 = and i32 %192, 255
  %194 = zext i32 %193 to i64
  %195 = xor i64 %191, %194
  %196 = mul i64 %195, 1099511628211
  %197 = lshr i32 %182, 24
  %198 = zext i32 %197 to i64
  %199 = xor i64 %196, %198
  %200 = mul i64 %199, 1099511628211
  %201 = add nuw i64 %179, 1
  %202 = icmp ult i64 %201, %171
  br i1 %202, label %178, label %172

203:                                              ; preds = %172
  %204 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 2
  %205 = load i8, i8* %204, align 8, !range !2
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %207, label %601

207:                                              ; preds = %203, %210
  %208 = phi i64 [ %211, %210 ], [ 76, %203 ]
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %217, label %210

210:                                              ; preds = %207
  %211 = add nsw i64 %208, -1
  %212 = getelementptr inbounds [77 x i8], [77 x i8]* @.str, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = icmp eq i8 %213, 47
  %215 = icmp slt i64 %208, 77
  %216 = and i1 %215, %214
  br i1 %216, label %217, label %207

217:                                              ; preds = %207, %210
  %218 = getelementptr inbounds [77 x i8], [77 x i8]* @.str, i64 0, i64 %208
  tail call void (i32, i8*, i32, i8*, ...) @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32 3, i8* %218, i32 67, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 %174, i32 %176) #10
  br label %601

219:                                              ; preds = %172
  store i32* %175, i32** %10, align 8
  %220 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %220) #10
  %221 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %222 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 0, i64 24, i1 false) #10
  %223 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %223) #10
  %224 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %225 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 0, i64 24, i1 false) #10
  %226 = bitcast %class.anon.1* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %226) #10
  %227 = getelementptr inbounds %class.anon.1, %class.anon.1* %7, i64 0, i32 0
  store %"class.std::__1::vector"* %6, %"class.std::__1::vector"** %227, align 8
  %228 = ptrtoint i32* %175 to i64
  %229 = sub i64 %228, %164
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %494, label %231

231:                                              ; preds = %219
  %232 = ashr exact i64 %229, 2
  %233 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %234 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0
  %235 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 1
  %236 = bitcast i32** %235 to i64*
  %237 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i64*
  %238 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %239 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %240 = bitcast i32** %238 to i64*
  %241 = bitcast %"class.std::__1::vector"* %233 to i64*
  %242 = bitcast i32** %239 to i64*
  %243 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %233, i64 0, i32 0, i32 0
  %244 = bitcast i32** %222 to i64*
  %245 = bitcast %"class.std::__1::vector"* %5 to i64*
  %246 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %247 = bitcast i32** %246 to i64*
  %248 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 0
  %249 = bitcast %"class.std::__1::vector"* %6 to i64*
  %250 = bitcast i32** %225 to i64*
  br label %251

251:                                              ; preds = %231, %482
  %252 = phi i32* [ %162, %231 ], [ %491, %482 ]
  %253 = phi i64 [ %232, %231 ], [ %489, %482 ]
  %254 = phi i64 [ 0, %231 ], [ %485, %482 ]
  %255 = phi i32 [ 0, %231 ], [ %484, %482 ]
  %256 = getelementptr inbounds i32, i32* %252, i64 %254
  %257 = load i32, i32* %256, align 4
  %258 = add nsw i64 %253, -1
  %259 = icmp ult i64 %254, %258
  %260 = and i32 %257, 7
  %261 = lshr i32 %257, 3
  %262 = icmp eq i32 %261, 0
  %263 = icmp ne i32 %260, 0
  %264 = and i1 %262, %263
  br i1 %264, label %585, label %265

265:                                              ; preds = %251
  %266 = or i32 %260, 2
  %267 = icmp eq i32 %266, 3
  br i1 %267, label %268, label %300

268:                                              ; preds = %265
  %269 = icmp eq i32 %260, 1
  br i1 %269, label %277, label %270

270:                                              ; preds = %268
  br i1 %259, label %271, label %585

271:                                              ; preds = %270
  %272 = add nuw i64 %254, 1
  %273 = getelementptr inbounds i32, i32* %252, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = icmp ult i32 %255, %274
  %276 = select i1 %275, i32 %274, i32 %255
  br label %277

277:                                              ; preds = %268, %271
  %278 = phi i32 [ %274, %271 ], [ 2147483647, %268 ]
  %279 = phi i64 [ %272, %271 ], [ %254, %268 ]
  %280 = phi i32 [ %276, %271 ], [ %255, %268 ]
  %281 = icmp ult i32 %257, 1024
  br i1 %281, label %282, label %298

282:                                              ; preds = %277
  %283 = load i64, i64* %244, align 8
  %284 = load i64, i64* %245, align 8
  %285 = sub i64 %283, %284
  %286 = ashr exact i64 %285, 2
  %287 = zext i32 %261 to i64
  %288 = icmp ugt i64 %286, %287
  %289 = inttoptr i64 %284 to i32*
  br i1 %288, label %294, label %290

290:                                              ; preds = %282
  %291 = add nuw nsw i64 %287, 1
  %292 = sub nsw i64 %291, %286
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* nonnull %5, i64 %292) #10
  %293 = load i32*, i32** %221, align 8
  br label %294

294:                                              ; preds = %282, %290
  %295 = phi i32* [ %289, %282 ], [ %293, %290 ]
  %296 = or i32 %278, -2147483648
  %297 = getelementptr inbounds i32, i32* %295, i64 %287
  store i32 %296, i32* %297, align 4
  br label %482

298:                                              ; preds = %277
  %299 = add nuw nsw i32 %261, 1
  call fastcc void @"_ZZN9protozero20FilterBytecodeParser12LoadInternalEPKhmENK3$_1clEjjj"(%class.anon.1* nonnull %7, i32 %261, i32 %299, i32 %278)
  br label %482

300:                                              ; preds = %265
  switch i32 %260, label %585 [
    i32 2, label %301
    i32 0, label %340
  ]

301:                                              ; preds = %300
  br i1 %259, label %302, label %585

302:                                              ; preds = %301
  %303 = add nuw i64 %254, 1
  %304 = getelementptr inbounds i32, i32* %252, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = add i32 %305, %261
  %307 = icmp ult i32 %261, %306
  %308 = icmp ult i32 %257, 1024
  %309 = and i1 %307, %308
  br i1 %309, label %310, label %337

310:                                              ; preds = %302
  %311 = lshr i32 %257, 3
  %312 = zext i32 %311 to i64
  %313 = zext i32 %306 to i64
  br label %314

314:                                              ; preds = %310, %328
  %315 = phi i64 [ %312, %310 ], [ %329, %328 ]
  %316 = load i64, i64* %244, align 8
  %317 = load i64, i64* %245, align 8
  %318 = sub i64 %316, %317
  %319 = ashr exact i64 %318, 2
  %320 = icmp ugt i64 %319, %315
  br i1 %320, label %321, label %324

321:                                              ; preds = %314
  %322 = inttoptr i64 %317 to i32*
  %323 = add nuw nsw i64 %315, 1
  br label %328

324:                                              ; preds = %314
  %325 = add nuw nsw i64 %315, 1
  %326 = sub nsw i64 %325, %319
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* nonnull %5, i64 %326) #10
  %327 = load i32*, i32** %221, align 8
  br label %328

328:                                              ; preds = %321, %324
  %329 = phi i64 [ %323, %321 ], [ %325, %324 ]
  %330 = phi i32* [ %322, %321 ], [ %327, %324 ]
  %331 = getelementptr inbounds i32, i32* %330, i64 %315
  store i32 -1, i32* %331, align 4
  %332 = icmp ult i64 %329, %313
  %333 = icmp ult i64 %329, 128
  %334 = and i1 %332, %333
  br i1 %334, label %314, label %335

335:                                              ; preds = %328
  %336 = trunc i64 %329 to i32
  br i1 %332, label %338, label %482

337:                                              ; preds = %302
  br i1 %307, label %338, label %482

338:                                              ; preds = %335, %337
  %339 = phi i32 [ %336, %335 ], [ %261, %337 ]
  call fastcc void @"_ZZN9protozero20FilterBytecodeParser12LoadInternalEPKhmENK3$_1clEjjj"(%class.anon.1* nonnull %7, i32 %339, i32 %306, i32 2147483647)
  br label %482

340:                                              ; preds = %300
  %341 = load i64, i64* %236, align 8
  %342 = load i64, i64* %237, align 8
  %343 = sub i64 %341, %342
  %344 = lshr exact i64 %343, 2
  %345 = trunc i64 %344 to i32
  %346 = load i32*, i32** %238, align 8
  %347 = load i32*, i32** %239, align 8
  %348 = icmp ult i32* %346, %347
  %349 = ptrtoint i32* %347 to i64
  br i1 %348, label %350, label %353

350:                                              ; preds = %340
  store i32 %345, i32* %346, align 4
  %351 = getelementptr inbounds i32, i32* %346, i64 1
  %352 = ptrtoint i32* %351 to i64
  store i64 %352, i64* %240, align 8
  br label %405

353:                                              ; preds = %340
  %354 = ptrtoint i32* %346 to i64
  %355 = load i64, i64* %241, align 8
  %356 = sub i64 %354, %355
  %357 = ashr exact i64 %356, 2
  %358 = add nsw i64 %357, 1
  %359 = icmp ugt i64 %358, 4611686018427387903
  br i1 %359, label %360, label %362

360:                                              ; preds = %353
  %361 = bitcast %"class.std::__1::vector"* %233 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %361) #11
  unreachable

362:                                              ; preds = %353
  %363 = sub i64 %349, %355
  %364 = ashr exact i64 %363, 2
  %365 = icmp ult i64 %364, 2305843009213693951
  br i1 %365, label %366, label %374

366:                                              ; preds = %362
  %367 = ashr exact i64 %363, 1
  %368 = icmp ult i64 %367, %358
  %369 = select i1 %368, i64 %358, i64 %367
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %379, label %371

371:                                              ; preds = %366
  %372 = icmp ugt i64 %369, 4611686018427387903
  br i1 %372, label %373, label %374

373:                                              ; preds = %371
  call void @abort() #11
  unreachable

374:                                              ; preds = %371, %362
  %375 = phi i64 [ %369, %371 ], [ 4611686018427387903, %362 ]
  %376 = shl i64 %375, 2
  %377 = call i8* @_Znwm(i64 %376) #9
  %378 = bitcast i8* %377 to i32*
  br label %379

379:                                              ; preds = %374, %366
  %380 = phi i64 [ %375, %374 ], [ 0, %366 ]
  %381 = phi i32* [ %378, %374 ], [ null, %366 ]
  %382 = getelementptr inbounds i32, i32* %381, i64 %357
  %383 = getelementptr inbounds i32, i32* %381, i64 %380
  %384 = ptrtoint i32* %383 to i64
  store i32 %345, i32* %382, align 4
  %385 = getelementptr inbounds i32, i32* %382, i64 1
  %386 = ptrtoint i32* %385 to i64
  %387 = load i32*, i32** %243, align 8
  %388 = load i64, i64* %240, align 8
  %389 = ptrtoint i32* %387 to i64
  %390 = sub i64 %388, %389
  %391 = ashr exact i64 %390, 2
  %392 = sub nsw i64 0, %391
  %393 = getelementptr inbounds i32, i32* %382, i64 %392
  %394 = ptrtoint i32* %393 to i64
  %395 = icmp sgt i64 %390, 0
  br i1 %395, label %396, label %400

396:                                              ; preds = %379
  %397 = bitcast i32* %393 to i8*
  %398 = bitcast i32* %387 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %397, i8* align 4 %398, i64 %390, i1 false) #10
  %399 = load i32*, i32** %243, align 8
  br label %400

400:                                              ; preds = %396, %379
  %401 = phi i32* [ %387, %379 ], [ %399, %396 ]
  store i64 %394, i64* %241, align 8
  store i64 %386, i64* %240, align 8
  store i64 %384, i64* %242, align 8
  %402 = icmp eq i32* %401, null
  br i1 %402, label %405, label %403

403:                                              ; preds = %400
  %404 = bitcast i32* %401 to i8*
  call void @_ZdlPv(i8* %404) #9
  br label %405

405:                                              ; preds = %350, %400, %403
  %406 = load i64, i64* %244, align 8
  %407 = load i64, i64* %245, align 8
  %408 = sub i64 %406, %407
  %409 = lshr exact i64 %408, 2
  %410 = trunc i64 %409 to i32
  %411 = load i32*, i32** %235, align 8
  %412 = load i32*, i32** %246, align 8
  %413 = icmp ult i32* %411, %412
  %414 = ptrtoint i32* %412 to i64
  br i1 %413, label %415, label %418

415:                                              ; preds = %405
  store i32 %410, i32* %411, align 4
  %416 = getelementptr inbounds i32, i32* %411, i64 1
  %417 = ptrtoint i32* %416 to i64
  store i64 %417, i64* %236, align 8
  br label %471

418:                                              ; preds = %405
  %419 = ptrtoint i32* %411 to i64
  %420 = load i64, i64* %237, align 8
  %421 = sub i64 %419, %420
  %422 = ashr exact i64 %421, 2
  %423 = add nsw i64 %422, 1
  %424 = icmp ugt i64 %423, 4611686018427387903
  br i1 %424, label %425, label %427

425:                                              ; preds = %418
  %426 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %426) #11
  unreachable

427:                                              ; preds = %418
  %428 = sub i64 %414, %420
  %429 = ashr exact i64 %428, 2
  %430 = icmp ult i64 %429, 2305843009213693951
  br i1 %430, label %431, label %439

431:                                              ; preds = %427
  %432 = ashr exact i64 %428, 1
  %433 = icmp ult i64 %432, %423
  %434 = select i1 %433, i64 %423, i64 %432
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %444, label %436

436:                                              ; preds = %431
  %437 = icmp ugt i64 %434, 4611686018427387903
  br i1 %437, label %438, label %439

438:                                              ; preds = %436
  call void @abort() #11
  unreachable

439:                                              ; preds = %436, %427
  %440 = phi i64 [ %434, %436 ], [ 4611686018427387903, %427 ]
  %441 = shl i64 %440, 2
  %442 = call i8* @_Znwm(i64 %441) #9
  %443 = bitcast i8* %442 to i32*
  br label %444

444:                                              ; preds = %439, %431
  %445 = phi i64 [ %440, %439 ], [ 0, %431 ]
  %446 = phi i32* [ %443, %439 ], [ null, %431 ]
  %447 = getelementptr inbounds i32, i32* %446, i64 %422
  %448 = getelementptr inbounds i32, i32* %446, i64 %445
  %449 = ptrtoint i32* %448 to i64
  store i32 %410, i32* %447, align 4
  %450 = getelementptr inbounds i32, i32* %447, i64 1
  %451 = ptrtoint i32* %450 to i64
  %452 = load i32*, i32** %248, align 8
  %453 = load i64, i64* %236, align 8
  %454 = ptrtoint i32* %452 to i64
  %455 = sub i64 %453, %454
  %456 = ashr exact i64 %455, 2
  %457 = sub nsw i64 0, %456
  %458 = getelementptr inbounds i32, i32* %447, i64 %457
  %459 = ptrtoint i32* %458 to i64
  %460 = icmp sgt i64 %455, 0
  br i1 %460, label %461, label %465

461:                                              ; preds = %444
  %462 = bitcast i32* %458 to i8*
  %463 = bitcast i32* %452 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %462, i8* align 4 %463, i64 %455, i1 false) #10
  %464 = load i32*, i32** %248, align 8
  br label %465

465:                                              ; preds = %461, %444
  %466 = phi i32* [ %452, %444 ], [ %464, %461 ]
  store i64 %459, i64* %237, align 8
  store i64 %451, i64* %236, align 8
  store i64 %449, i64* %247, align 8
  %467 = icmp eq i32* %466, null
  br i1 %467, label %471, label %468

468:                                              ; preds = %465
  %469 = bitcast i32* %466 to i8*
  call void @_ZdlPv(i8* %469) #9
  %470 = load i32*, i32** %235, align 8
  br label %471

471:                                              ; preds = %415, %465, %468
  %472 = phi i32* [ %416, %415 ], [ %450, %465 ], [ %470, %468 ]
  %473 = load i32*, i32** %221, align 8
  %474 = load i32*, i32** %222, align 8
  %475 = call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector"* %234, i32* %472, i32* %473, i32* %474)
  %476 = load i32*, i32** %235, align 8
  %477 = load i32*, i32** %224, align 8
  %478 = load i32*, i32** %225, align 8
  %479 = call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector"* %234, i32* %476, i32* %477, i32* %478)
  %480 = load i64, i64* %245, align 8
  store i64 %480, i64* %244, align 8
  %481 = load i64, i64* %249, align 8
  store i64 %481, i64* %250, align 8
  br label %482

482:                                              ; preds = %335, %294, %298, %337, %338, %471
  %483 = phi i64 [ %303, %337 ], [ %303, %338 ], [ %254, %471 ], [ %279, %298 ], [ %279, %294 ], [ %303, %335 ]
  %484 = phi i32 [ %255, %337 ], [ %255, %338 ], [ %255, %471 ], [ %280, %298 ], [ %280, %294 ], [ %255, %335 ]
  %485 = add i64 %483, 1
  %486 = load i64, i64* %166, align 8
  %487 = load i64, i64* %13, align 8
  %488 = sub i64 %486, %487
  %489 = ashr exact i64 %488, 2
  %490 = icmp ult i64 %485, %489
  %491 = inttoptr i64 %487 to i32*
  br i1 %490, label %251, label %492

492:                                              ; preds = %482
  %493 = icmp eq i32 %484, 0
  br i1 %493, label %494, label %497

494:                                              ; preds = %219, %492
  %495 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %496 = load i32*, i32** %495, align 8
  br label %509

497:                                              ; preds = %492
  %498 = zext i32 %484 to i64
  %499 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %500 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %501 = bitcast i32** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.std::__1::vector"* %499 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = sub i64 %502, %504
  %506 = ashr exact i64 %505, 2
  %507 = icmp ugt i64 %506, %498
  %508 = inttoptr i64 %502 to i32*
  br i1 %507, label %509, label %585

509:                                              ; preds = %494, %497
  %510 = phi i32* [ %496, %494 ], [ %508, %497 ]
  %511 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %512 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 1
  %513 = bitcast i32** %512 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = bitcast %"class.protozero::FilterBytecodeParser"* %0 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = sub i64 %514, %516
  %518 = lshr exact i64 %517, 2
  %519 = trunc i64 %518 to i32
  %520 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %521 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %522 = load i32*, i32** %521, align 8
  %523 = icmp ult i32* %510, %522
  %524 = ptrtoint i32* %522 to i64
  br i1 %523, label %525, label %529

525:                                              ; preds = %509
  store i32 %519, i32* %510, align 4
  %526 = getelementptr inbounds i32, i32* %510, i64 1
  %527 = ptrtoint i32* %526 to i64
  %528 = bitcast i32** %520 to i64*
  store i64 %527, i64* %528, align 8
  br label %585

529:                                              ; preds = %509
  %530 = ptrtoint i32* %510 to i64
  %531 = bitcast i32** %520 to i64*
  %532 = bitcast %"class.std::__1::vector"* %511 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = sub i64 %530, %533
  %535 = ashr exact i64 %534, 2
  %536 = add nsw i64 %535, 1
  %537 = icmp ugt i64 %536, 4611686018427387903
  br i1 %537, label %538, label %540

538:                                              ; preds = %529
  %539 = bitcast %"class.std::__1::vector"* %511 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %539) #11
  unreachable

540:                                              ; preds = %529
  %541 = bitcast i32** %521 to i64*
  %542 = sub i64 %524, %533
  %543 = ashr exact i64 %542, 2
  %544 = icmp ult i64 %543, 2305843009213693951
  br i1 %544, label %545, label %553

545:                                              ; preds = %540
  %546 = ashr exact i64 %542, 1
  %547 = icmp ult i64 %546, %536
  %548 = select i1 %547, i64 %536, i64 %546
  %549 = icmp eq i64 %548, 0
  br i1 %549, label %558, label %550

550:                                              ; preds = %545
  %551 = icmp ugt i64 %548, 4611686018427387903
  br i1 %551, label %552, label %553

552:                                              ; preds = %550
  call void @abort() #11
  unreachable

553:                                              ; preds = %550, %540
  %554 = phi i64 [ %548, %550 ], [ 4611686018427387903, %540 ]
  %555 = shl i64 %554, 2
  %556 = call i8* @_Znwm(i64 %555) #9
  %557 = bitcast i8* %556 to i32*
  br label %558

558:                                              ; preds = %553, %545
  %559 = phi i64 [ %554, %553 ], [ 0, %545 ]
  %560 = phi i32* [ %557, %553 ], [ null, %545 ]
  %561 = getelementptr inbounds i32, i32* %560, i64 %535
  %562 = getelementptr inbounds i32, i32* %560, i64 %559
  %563 = ptrtoint i32* %562 to i64
  store i32 %519, i32* %561, align 4
  %564 = getelementptr inbounds i32, i32* %561, i64 1
  %565 = ptrtoint i32* %564 to i64
  %566 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %511, i64 0, i32 0, i32 0
  %567 = load i32*, i32** %566, align 8
  %568 = load i64, i64* %531, align 8
  %569 = ptrtoint i32* %567 to i64
  %570 = sub i64 %568, %569
  %571 = ashr exact i64 %570, 2
  %572 = sub nsw i64 0, %571
  %573 = getelementptr inbounds i32, i32* %561, i64 %572
  %574 = ptrtoint i32* %573 to i64
  %575 = icmp sgt i64 %570, 0
  br i1 %575, label %576, label %580

576:                                              ; preds = %558
  %577 = bitcast i32* %573 to i8*
  %578 = bitcast i32* %567 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %577, i8* align 4 %578, i64 %570, i1 false) #10
  %579 = load i32*, i32** %566, align 8
  br label %580

580:                                              ; preds = %576, %558
  %581 = phi i32* [ %567, %558 ], [ %579, %576 ]
  store i64 %574, i64* %532, align 8
  store i64 %565, i64* %531, align 8
  store i64 %563, i64* %541, align 8
  %582 = icmp eq i32* %581, null
  br i1 %582, label %585, label %583

583:                                              ; preds = %580
  %584 = bitcast i32* %581 to i8*
  call void @_ZdlPv(i8* %584) #9
  br label %585

585:                                              ; preds = %300, %301, %270, %251, %583, %580, %525, %497
  %586 = phi i1 [ false, %497 ], [ true, %525 ], [ true, %580 ], [ true, %583 ], [ false, %251 ], [ false, %270 ], [ false, %301 ], [ false, %300 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #10
  %587 = load i32*, i32** %224, align 8
  %588 = icmp eq i32* %587, null
  br i1 %588, label %593, label %589

589:                                              ; preds = %585
  %590 = ptrtoint i32* %587 to i64
  %591 = bitcast i32** %225 to i64*
  store i64 %590, i64* %591, align 8
  %592 = bitcast i32* %587 to i8*
  call void @_ZdlPv(i8* %592) #9
  br label %593

593:                                              ; preds = %585, %589
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %223) #10
  %594 = load i32*, i32** %221, align 8
  %595 = icmp eq i32* %594, null
  br i1 %595, label %600, label %596

596:                                              ; preds = %593
  %597 = ptrtoint i32* %594 to i64
  %598 = bitcast i32** %222 to i64*
  store i64 %597, i64* %598, align 8
  %599 = bitcast i32* %594 to i8*
  call void @_ZdlPv(i8* %599) #9
  br label %600

600:                                              ; preds = %593, %596
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %220) #10
  br label %601

601:                                              ; preds = %33, %126, %128, %31, %55, %217, %203, %600
  %602 = phi i1 [ false, %217 ], [ false, %203 ], [ %586, %600 ], [ false, %55 ], [ false, %31 ], [ false, %128 ], [ false, %126 ], [ false, %33 ]
  %603 = load i32*, i32** %9, align 8
  br label %604

604:                                              ; preds = %601, %159
  %605 = phi i32* [ %603, %601 ], [ %160, %159 ]
  %606 = phi i1 [ %602, %601 ], [ false, %159 ]
  %607 = icmp eq i32* %605, null
  br i1 %607, label %612, label %608

608:                                              ; preds = %604
  %609 = ptrtoint i32* %605 to i64
  %610 = bitcast i32** %10 to i64*
  store i64 %609, i64* %610, align 8
  %611 = bitcast i32* %605 to i8*
  call void @_ZdlPv(i8* %611) #9
  br label %612

612:                                              ; preds = %604, %608
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret i1 %606
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN9protozero20FilterBytecodeParser12LoadInternalEPKhmENK3$_1clEjjj"(%class.anon.1* nocapture readonly, i32, i32, i32) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 0
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = icmp ult i32* %8, %10
  %12 = ptrtoint i32* %10 to i64
  br i1 %11, label %13, label %17

13:                                               ; preds = %4
  store i32 %1, i32* %8, align 4
  %14 = getelementptr inbounds i32, i32* %8, i64 1
  %15 = ptrtoint i32* %14 to i64
  %16 = bitcast i32** %7 to i64*
  store i64 %15, i64* %16, align 8
  br label %73

17:                                               ; preds = %4
  %18 = ptrtoint i32* %8 to i64
  %19 = bitcast i32** %7 to i64*
  %20 = bitcast %"class.std::__1::vector"* %6 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 2
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 4611686018427387903
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #11
  unreachable

28:                                               ; preds = %17
  %29 = bitcast i32** %9 to i64*
  %30 = sub i64 %12, %21
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %31, 2305843009213693951
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 1
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 4611686018427387903
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 4611686018427387903, %28 ]
  %43 = shl i64 %42, 2
  %44 = tail call i8* @_Znwm(i64 %43) #9
  %45 = bitcast i8* %44 to i32*
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi i32* [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds i32, i32* %48, i64 %23
  %50 = getelementptr inbounds i32, i32* %48, i64 %47
  %51 = ptrtoint i32* %50 to i64
  store i32 %1, i32* %49, align 4
  %52 = getelementptr inbounds i32, i32* %49, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %19, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %49, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %46
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #10
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %46
  %69 = phi i32* [ %55, %46 ], [ %67, %64 ]
  store i64 %62, i64* %20, align 8
  store i64 %53, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #9
  br label %73

73:                                               ; preds = %13, %68, %71
  %74 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %5, align 8
  %75 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %74, i64 0, i32 0, i32 1
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %74, i64 0, i32 0, i32 2, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8
  %79 = icmp ult i32* %76, %78
  %80 = ptrtoint i32* %78 to i64
  br i1 %79, label %81, label %85

81:                                               ; preds = %73
  store i32 %2, i32* %76, align 4
  %82 = getelementptr inbounds i32, i32* %76, i64 1
  %83 = ptrtoint i32* %82 to i64
  %84 = bitcast i32** %75 to i64*
  store i64 %83, i64* %84, align 8
  br label %141

85:                                               ; preds = %73
  %86 = ptrtoint i32* %76 to i64
  %87 = bitcast i32** %75 to i64*
  %88 = bitcast %"class.std::__1::vector"* %74 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = sub i64 %86, %89
  %91 = ashr exact i64 %90, 2
  %92 = add nsw i64 %91, 1
  %93 = icmp ugt i64 %92, 4611686018427387903
  br i1 %93, label %94, label %96

94:                                               ; preds = %85
  %95 = bitcast %"class.std::__1::vector"* %74 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %95) #11
  unreachable

96:                                               ; preds = %85
  %97 = bitcast i32** %77 to i64*
  %98 = sub i64 %80, %89
  %99 = ashr exact i64 %98, 2
  %100 = icmp ult i64 %99, 2305843009213693951
  br i1 %100, label %101, label %109

101:                                              ; preds = %96
  %102 = ashr exact i64 %98, 1
  %103 = icmp ult i64 %102, %92
  %104 = select i1 %103, i64 %92, i64 %102
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %101
  %107 = icmp ugt i64 %104, 4611686018427387903
  br i1 %107, label %108, label %109

108:                                              ; preds = %106
  tail call void @abort() #11
  unreachable

109:                                              ; preds = %106, %96
  %110 = phi i64 [ %104, %106 ], [ 4611686018427387903, %96 ]
  %111 = shl i64 %110, 2
  %112 = tail call i8* @_Znwm(i64 %111) #9
  %113 = bitcast i8* %112 to i32*
  br label %114

114:                                              ; preds = %109, %101
  %115 = phi i64 [ %110, %109 ], [ 0, %101 ]
  %116 = phi i32* [ %113, %109 ], [ null, %101 ]
  %117 = getelementptr inbounds i32, i32* %116, i64 %91
  %118 = getelementptr inbounds i32, i32* %116, i64 %115
  %119 = ptrtoint i32* %118 to i64
  store i32 %2, i32* %117, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 1
  %121 = ptrtoint i32* %120 to i64
  %122 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %74, i64 0, i32 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = load i64, i64* %87, align 8
  %125 = ptrtoint i32* %123 to i64
  %126 = sub i64 %124, %125
  %127 = ashr exact i64 %126, 2
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i32, i32* %117, i64 %128
  %130 = ptrtoint i32* %129 to i64
  %131 = icmp sgt i64 %126, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %114
  %133 = bitcast i32* %129 to i8*
  %134 = bitcast i32* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* align 4 %134, i64 %126, i1 false) #10
  %135 = load i32*, i32** %122, align 8
  br label %136

136:                                              ; preds = %132, %114
  %137 = phi i32* [ %123, %114 ], [ %135, %132 ]
  store i64 %130, i64* %88, align 8
  store i64 %121, i64* %87, align 8
  store i64 %119, i64* %97, align 8
  %138 = icmp eq i32* %137, null
  br i1 %138, label %141, label %139

139:                                              ; preds = %136
  %140 = bitcast i32* %137 to i8*
  tail call void @_ZdlPv(i8* %140) #9
  br label %141

141:                                              ; preds = %81, %136, %139
  %142 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %5, align 8
  %143 = or i32 %3, -2147483648
  %144 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %142, i64 0, i32 0, i32 1
  %145 = load i32*, i32** %144, align 8
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %142, i64 0, i32 0, i32 2, i32 0, i32 0
  %147 = load i32*, i32** %146, align 8
  %148 = icmp ult i32* %145, %147
  %149 = ptrtoint i32* %147 to i64
  br i1 %148, label %150, label %154

150:                                              ; preds = %141
  store i32 %143, i32* %145, align 4
  %151 = getelementptr inbounds i32, i32* %145, i64 1
  %152 = ptrtoint i32* %151 to i64
  %153 = bitcast i32** %144 to i64*
  store i64 %152, i64* %153, align 8
  br label %210

154:                                              ; preds = %141
  %155 = ptrtoint i32* %145 to i64
  %156 = bitcast i32** %144 to i64*
  %157 = bitcast %"class.std::__1::vector"* %142 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = sub i64 %155, %158
  %160 = ashr exact i64 %159, 2
  %161 = add nsw i64 %160, 1
  %162 = icmp ugt i64 %161, 4611686018427387903
  br i1 %162, label %163, label %165

163:                                              ; preds = %154
  %164 = bitcast %"class.std::__1::vector"* %142 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %164) #11
  unreachable

165:                                              ; preds = %154
  %166 = bitcast i32** %146 to i64*
  %167 = sub i64 %149, %158
  %168 = ashr exact i64 %167, 2
  %169 = icmp ult i64 %168, 2305843009213693951
  br i1 %169, label %170, label %178

170:                                              ; preds = %165
  %171 = ashr exact i64 %167, 1
  %172 = icmp ult i64 %171, %161
  %173 = select i1 %172, i64 %161, i64 %171
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %183, label %175

175:                                              ; preds = %170
  %176 = icmp ugt i64 %173, 4611686018427387903
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  tail call void @abort() #11
  unreachable

178:                                              ; preds = %175, %165
  %179 = phi i64 [ %173, %175 ], [ 4611686018427387903, %165 ]
  %180 = shl i64 %179, 2
  %181 = tail call i8* @_Znwm(i64 %180) #9
  %182 = bitcast i8* %181 to i32*
  br label %183

183:                                              ; preds = %178, %170
  %184 = phi i64 [ %179, %178 ], [ 0, %170 ]
  %185 = phi i32* [ %182, %178 ], [ null, %170 ]
  %186 = getelementptr inbounds i32, i32* %185, i64 %160
  %187 = getelementptr inbounds i32, i32* %185, i64 %184
  %188 = ptrtoint i32* %187 to i64
  store i32 %143, i32* %186, align 4
  %189 = getelementptr inbounds i32, i32* %186, i64 1
  %190 = ptrtoint i32* %189 to i64
  %191 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %142, i64 0, i32 0, i32 0
  %192 = load i32*, i32** %191, align 8
  %193 = load i64, i64* %156, align 8
  %194 = ptrtoint i32* %192 to i64
  %195 = sub i64 %193, %194
  %196 = ashr exact i64 %195, 2
  %197 = sub nsw i64 0, %196
  %198 = getelementptr inbounds i32, i32* %186, i64 %197
  %199 = ptrtoint i32* %198 to i64
  %200 = icmp sgt i64 %195, 0
  br i1 %200, label %201, label %205

201:                                              ; preds = %183
  %202 = bitcast i32* %198 to i8*
  %203 = bitcast i32* %192 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %202, i8* align 4 %203, i64 %195, i1 false) #10
  %204 = load i32*, i32** %191, align 8
  br label %205

205:                                              ; preds = %201, %183
  %206 = phi i32* [ %192, %183 ], [ %204, %201 ]
  store i64 %199, i64* %157, align 8
  store i64 %190, i64* %156, align 8
  store i64 %188, i64* %166, align 8
  %207 = icmp eq i32* %206, null
  br i1 %207, label %210, label %208

208:                                              ; preds = %205
  %209 = bitcast i32* %206 to i8*
  tail call void @_ZdlPv(i8* %209) #9
  br label %210

210:                                              ; preds = %150, %205, %208
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector"*, i32*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !6
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !6
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !9, !noalias !6
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !9, !noalias !6
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !6
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !6
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !9, !noalias !6
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !9, !noalias !6
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !6
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !6
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !9, !noalias !6
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !9, !noalias !6
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !6
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !6
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !9, !noalias !6
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !9, !noalias !6
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !11

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !6
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !6
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !9, !noalias !6
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !9, !noalias !6
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !13

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !15

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !16

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !17
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !17
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !20, !noalias !17
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !20, !noalias !17
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !17
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !17
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !20, !noalias !17
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !20, !noalias !17
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !17
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !17
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !20, !noalias !17
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !20, !noalias !17
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !17
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !17
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !20, !noalias !17
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !20, !noalias !17
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !22

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !17
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !17
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !20, !noalias !17
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !20, !noalias !17
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !23

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #10
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !24

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #10
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #11
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 4611686018427387903
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #11
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 4611686018427387903, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 2
  %369 = tail call i8* @_Znwm(i64 %368) #9
  %370 = bitcast i8* %369 to i32*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i32* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i32, i32* %374, i64 %372
  %376 = getelementptr inbounds i32, i32* %374, i64 %373
  %377 = ptrtoint i32* %376 to i64
  %378 = getelementptr inbounds i32, i32* %375, i64 %12
  %379 = add i64 %11, -4
  %380 = lshr i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 8
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -4
  %385 = lshr i64 %384, 2
  %386 = add nsw i64 %372, %385
  %387 = add i64 %386, 1
  %388 = getelementptr i32, i32* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i32, i32* %2, i64 %389
  %391 = icmp ult i32* %375, %390
  %392 = icmp ugt i32* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 9223372036854775800
  %396 = getelementptr i32, i32* %375, i64 %395
  %397 = getelementptr i32, i32* %2, i64 %395
  %398 = add nsw i64 %395, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i32, i32* %375, i64 %406
  %409 = getelementptr i32, i32* %2, i64 %406
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4, !alias.scope !25
  %412 = getelementptr i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !alias.scope !25
  %415 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 4, !alias.scope !28, !noalias !25
  %416 = getelementptr i32, i32* %408, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %417, align 4, !alias.scope !28, !noalias !25
  %418 = or i64 %406, 8
  %419 = getelementptr i32, i32* %375, i64 %418
  %420 = getelementptr i32, i32* %2, i64 %418
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4, !alias.scope !25
  %423 = getelementptr i32, i32* %420, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !25
  %426 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 4, !alias.scope !28, !noalias !25
  %427 = getelementptr i32, i32* %419, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %428, align 4, !alias.scope !28, !noalias !25
  %429 = or i64 %406, 16
  %430 = getelementptr i32, i32* %375, i64 %429
  %431 = getelementptr i32, i32* %2, i64 %429
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !25
  %434 = getelementptr i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !25
  %437 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %437, align 4, !alias.scope !28, !noalias !25
  %438 = getelementptr i32, i32* %430, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %439, align 4, !alias.scope !28, !noalias !25
  %440 = or i64 %406, 24
  %441 = getelementptr i32, i32* %375, i64 %440
  %442 = getelementptr i32, i32* %2, i64 %440
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !25
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !25
  %448 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %448, align 4, !alias.scope !28, !noalias !25
  %449 = getelementptr i32, i32* %441, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %450, align 4, !alias.scope !28, !noalias !25
  %451 = add i64 %406, 32
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !30

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i32, i32* %375, i64 %458
  %461 = getelementptr i32, i32* %2, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4, !alias.scope !25
  %464 = getelementptr i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4, !alias.scope !25
  %467 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %467, align 4, !alias.scope !28, !noalias !25
  %468 = getelementptr i32, i32* %460, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %469, align 4, !alias.scope !28, !noalias !25
  %470 = add i64 %458, 8
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !31

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i32* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i32* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i32* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i32, i32* %374, i64 %480
  %482 = ptrtoint i32* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i32* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i32* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i32, i32* %490, align 4
  store i32 %492, i32* %489, align 4
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = getelementptr inbounds i32, i32* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !32

497:                                              ; preds = %488, %475
  %498 = phi i32* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i32* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 28
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i32* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i32* [ %527, %501 ], [ %499, %497 ]
  %504 = load i32, i32* %503, align 4
  store i32 %504, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = getelementptr inbounds i32, i32* %503, i64 1
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %505, align 4
  %508 = getelementptr inbounds i32, i32* %502, i64 2
  %509 = getelementptr inbounds i32, i32* %503, i64 2
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %508, align 4
  %511 = getelementptr inbounds i32, i32* %502, i64 3
  %512 = getelementptr inbounds i32, i32* %503, i64 3
  %513 = load i32, i32* %512, align 4
  store i32 %513, i32* %511, align 4
  %514 = getelementptr inbounds i32, i32* %502, i64 4
  %515 = getelementptr inbounds i32, i32* %503, i64 4
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %514, align 4
  %517 = getelementptr inbounds i32, i32* %502, i64 5
  %518 = getelementptr inbounds i32, i32* %503, i64 5
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %517, align 4
  %520 = getelementptr inbounds i32, i32* %502, i64 6
  %521 = getelementptr inbounds i32, i32* %503, i64 6
  %522 = load i32, i32* %521, align 4
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds i32, i32* %502, i64 7
  %524 = getelementptr inbounds i32, i32* %503, i64 7
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %523, align 4
  %526 = getelementptr inbounds i32, i32* %502, i64 8
  %527 = getelementptr inbounds i32, i32* %503, i64 8
  %528 = icmp eq i32* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !33

529:                                              ; preds = %497, %501, %473
  %530 = load i32*, i32** %9, align 8
  %531 = ptrtoint i32* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 2
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i32, i32* %375, i64 %534
  %536 = ptrtoint i32* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i32* %535 to i8*
  %540 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %539, i8* align 4 %540, i64 %532, i1 false) #10
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i32*, i32** %18, align 8
  %543 = icmp eq i32* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i32, i32* %542, i64 -1
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 2
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 8
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i32, i32* %542, i64 -1
  %554 = ptrtoint i32* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 2
  %557 = add nsw i64 %552, %556
  %558 = add i64 %557, 1
  %559 = getelementptr i32, i32* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i32, i32* %1, i64 %560
  %562 = icmp ult i32* %378, %561
  %563 = icmp ugt i32* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 9223372036854775800
  %567 = getelementptr i32, i32* %378, i64 %566
  %568 = getelementptr i32, i32* %1, i64 %566
  %569 = add nsw i64 %566, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i32, i32* %378, i64 %577
  %580 = getelementptr i32, i32* %1, i64 %577
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !34
  %583 = getelementptr i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !34
  %586 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %586, align 4, !alias.scope !37, !noalias !34
  %587 = getelementptr i32, i32* %579, i64 4
  %588 = bitcast i32* %587 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %588, align 4, !alias.scope !37, !noalias !34
  %589 = or i64 %577, 8
  %590 = getelementptr i32, i32* %378, i64 %589
  %591 = getelementptr i32, i32* %1, i64 %589
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !34
  %594 = getelementptr i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !34
  %597 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %597, align 4, !alias.scope !37, !noalias !34
  %598 = getelementptr i32, i32* %590, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %599, align 4, !alias.scope !37, !noalias !34
  %600 = or i64 %577, 16
  %601 = getelementptr i32, i32* %378, i64 %600
  %602 = getelementptr i32, i32* %1, i64 %600
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4, !alias.scope !34
  %605 = getelementptr i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !34
  %608 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %608, align 4, !alias.scope !37, !noalias !34
  %609 = getelementptr i32, i32* %601, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %610, align 4, !alias.scope !37, !noalias !34
  %611 = or i64 %577, 24
  %612 = getelementptr i32, i32* %378, i64 %611
  %613 = getelementptr i32, i32* %1, i64 %611
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !alias.scope !34
  %616 = getelementptr i32, i32* %613, i64 4
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !34
  %619 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %619, align 4, !alias.scope !37, !noalias !34
  %620 = getelementptr i32, i32* %612, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %621, align 4, !alias.scope !37, !noalias !34
  %622 = add i64 %577, 32
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !39

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i32, i32* %378, i64 %629
  %632 = getelementptr i32, i32* %1, i64 %629
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !34
  %635 = getelementptr i32, i32* %632, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !34
  %638 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %638, align 4, !alias.scope !37, !noalias !34
  %639 = getelementptr i32, i32* %631, i64 4
  %640 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %640, align 4, !alias.scope !37, !noalias !34
  %641 = add i64 %629, 8
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !40

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i32* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i32* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i32* %648 to i64
  %650 = getelementptr i32, i32* %542, i64 -1
  %651 = ptrtoint i32* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 2
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i32* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i32* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i32, i32* %659, align 4
  store i32 %661, i32* %658, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 1
  %663 = getelementptr inbounds i32, i32* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !41

666:                                              ; preds = %657, %646
  %667 = phi i32* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i32* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i32* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 28
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i32* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i32* [ %696, %671 ], [ %669, %666 ]
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %673, i64 1
  %676 = getelementptr inbounds i32, i32* %672, i64 1
  %677 = load i32, i32* %675, align 4
  store i32 %677, i32* %676, align 4
  %678 = getelementptr inbounds i32, i32* %673, i64 2
  %679 = getelementptr inbounds i32, i32* %672, i64 2
  %680 = load i32, i32* %678, align 4
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %673, i64 3
  %682 = getelementptr inbounds i32, i32* %672, i64 3
  %683 = load i32, i32* %681, align 4
  store i32 %683, i32* %682, align 4
  %684 = getelementptr inbounds i32, i32* %673, i64 4
  %685 = getelementptr inbounds i32, i32* %672, i64 4
  %686 = load i32, i32* %684, align 4
  store i32 %686, i32* %685, align 4
  %687 = getelementptr inbounds i32, i32* %673, i64 5
  %688 = getelementptr inbounds i32, i32* %672, i64 5
  %689 = load i32, i32* %687, align 4
  store i32 %689, i32* %688, align 4
  %690 = getelementptr inbounds i32, i32* %673, i64 6
  %691 = getelementptr inbounds i32, i32* %672, i64 6
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %673, i64 7
  %694 = getelementptr inbounds i32, i32* %672, i64 7
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %673, i64 8
  %697 = getelementptr inbounds i32, i32* %672, i64 8
  %698 = icmp eq i32* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !42

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i32* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i32* %700 to i64
  %702 = load i32*, i32** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i32* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #9
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i32* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i32* %707
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN9protozero20FilterBytecodeParser5QueryEjj(%"class.protozero::FilterBytecodeParser"* nocapture readonly, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = zext i32 %1 to i64
  %5 = add nuw nsw i64 %4, 1
  %6 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %5, %13
  %15 = inttoptr i64 %11 to i32*
  br i1 %14, label %16, label %63

16:                                               ; preds = %3
  %17 = getelementptr inbounds i32, i32* %15, i64 %4
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.protozero::FilterBytecodeParser", %"class.protozero::FilterBytecodeParser"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds i32, i32* %21, i64 %19
  %23 = add i32 %1, 1
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %15, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %21, i64 %27
  %29 = getelementptr inbounds i32, i32* %22, i64 1
  %30 = load i32, i32* %22, align 4
  %31 = icmp ugt i32 %30, %2
  br i1 %31, label %32, label %36, !prof !4

32:                                               ; preds = %16
  %33 = zext i32 %2 to i64
  %34 = getelementptr inbounds i32, i32* %29, i64 %33
  %35 = load i32, i32* %34, align 4
  br label %56

36:                                               ; preds = %16
  %37 = zext i32 %30 to i64
  %38 = getelementptr inbounds i32, i32* %29, i64 %37
  %39 = getelementptr inbounds i32, i32* %38, i64 2
  %40 = icmp ult i32* %39, %28
  br i1 %40, label %41, label %56

41:                                               ; preds = %36, %51
  %42 = phi i32* [ %52, %51 ], [ %39, %36 ]
  %43 = phi i32* [ %45, %51 ], [ %38, %36 ]
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds i32, i32* %43, i64 3
  %46 = icmp ugt i32 %44, %2
  br i1 %46, label %51, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds i32, i32* %43, i64 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp ugt i32 %49, %2
  br i1 %50, label %54, label %51

51:                                               ; preds = %47, %41
  %52 = getelementptr inbounds i32, i32* %43, i64 5
  %53 = icmp ult i32* %52, %28
  br i1 %53, label %41, label %56

54:                                               ; preds = %47
  %55 = load i32, i32* %42, align 4
  br label %56

56:                                               ; preds = %51, %36, %54, %32
  %57 = phi i32 [ %35, %32 ], [ %55, %54 ], [ 0, %36 ], [ 0, %51 ]
  %58 = lshr i32 %57, 31
  %59 = zext i32 %58 to i64
  %60 = and i32 %57, 2147483647
  %61 = zext i32 %60 to i64
  %62 = shl nuw nsw i64 %61, 32
  br label %63

63:                                               ; preds = %3, %56
  %64 = phi i64 [ 0, %3 ], [ %62, %56 ]
  %65 = phi i64 [ 0, %3 ], [ %59, %56 ]
  %66 = or i64 %65, %64
  ret i64 %66
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2002, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !14}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !12}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !12}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !14}
!33 = distinct !{!33, !12}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !12}
!40 = distinct !{!40, !14}
!41 = distinct !{!41, !14}
!42 = distinct !{!42, !12}
