; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/dec_jpeg_data.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/dec_jpeg_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22", %"class.std::__1::vector.31", %"class.std::__1::vector.45", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.17" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.24", %"struct.std::__1::array.25", i32, i8, [3 x i8] }>
%"struct.std::__1::array.24" = type { [17 x i32] }
%"struct.std::__1::array.25" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.40" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i16*, i16*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i16* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.47", i32, %"class.std::__1::vector.48", %"class.std::__1::vector.55" }
%"struct.std::__1::array.47" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%struct.BrotliDecoderStateStruct = type opaque

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

@_ZN3jxl4jpegL14kIccProfileTagE = internal unnamed_addr constant [12 x i8] c"ICC_PROFILE\00", align 1
@_ZN3jxl4jpegL8kExifTagE = internal unnamed_addr constant [6 x i8] c"Exif\00\00", align 1
@_ZN3jxl4jpegL7kXMPTagE = internal unnamed_addr constant [29 x i8] c"http://ns.adobe.com/xap/1.0/\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg14DecodeJPEGDataENS_4SpanIKhEEPNS0_8JPEGDataE(i8*, i64, %"struct.jxl::jpeg::JPEGData"*) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %"class.jxl::BitReader", align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = ptrtoint i8* %0 to i64
  %19 = bitcast i8** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #4
  store i8* %0, i8** %12, align 8
  %20 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  store i64 %1, i64* %13, align 8
  %21 = bitcast %"class.jxl::BitReader"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %21) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 56, i1 false)
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 16, i1 false) #4
  store i8* %0, i8** %22, align 8
  %23 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 3
  %24 = getelementptr inbounds i8, i8* %0, i64 -8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  store i8* %25, i8** %23, align 8
  %26 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 4
  %27 = bitcast i8** %26 to i64*
  store i64 %18, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 5
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 6
  store i8 0, i8* %29, align 8
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 7
  store i64 0, i64* %30, align 8
  %31 = icmp ult i8* %25, %0
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %3
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %14) #4
  br label %39

33:                                               ; preds = %3
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 1
  %36 = bitcast i8* %0 to i64*
  %37 = load i64, i64* %36, align 1
  store i64 %37, i64* %34, align 8
  %38 = getelementptr inbounds i8, i8* %0, i64 7
  store i8* %38, i8** %22, align 8
  store i64 56, i64* %35, align 8
  br label %39

39:                                               ; preds = %32, %33
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 0
  %41 = call i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"* nonnull %14, %"class.jxl::Fields"* %40) #4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %109

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 0, %45
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %79, label %49

49:                                               ; preds = %43
  %50 = sub nuw nsw i64 8, %47
  %51 = load i8*, i8** %22, align 8
  %52 = load i8*, i8** %23, align 8
  %53 = icmp ugt i8* %51, %52
  br i1 %53, label %54, label %58, !prof !2

54:                                               ; preds = %49
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %14) #4
  %55 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = load i64, i64* %44, align 8
  br label %69

58:                                               ; preds = %49
  %59 = bitcast i8* %51 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = shl i64 %60, %45
  %62 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = sub i64 63, %45
  %66 = lshr i64 %65, 3
  %67 = getelementptr inbounds i8, i8* %51, i64 %66
  store i8* %67, i8** %22, align 8
  %68 = or i64 %45, 56
  store i64 %68, i64* %44, align 8
  br label %69

69:                                               ; preds = %54, %58
  %70 = phi i64 [ %57, %54 ], [ %68, %58 ]
  %71 = phi i64 [ %56, %54 ], [ %64, %58 ]
  %72 = shl nsw i64 -1, %50
  %73 = xor i64 %72, -1
  %74 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %14, i64 0, i32 0
  %75 = and i64 %71, %73
  %76 = sub i64 %70, %50
  store i64 %76, i64* %44, align 8
  %77 = lshr i64 %71, %50
  store i64 %77, i64* %74, align 8
  %78 = icmp eq i64 %75, 0
  br i1 %78, label %79, label %109

79:                                               ; preds = %43, %69
  %80 = phi i64 [ %45, %43 ], [ %76, %69 ]
  %81 = bitcast i8** %22 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = load i64, i64* %27, align 8
  %84 = sub i64 %82, %83
  %85 = load i64, i64* %28, align 8
  %86 = add i64 %84, %85
  %87 = shl i64 %86, 3
  %88 = sub i64 %87, %80
  %89 = lshr i64 %88, 3
  %90 = load i8*, i8** %12, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %89
  store i8* %91, i8** %12, align 8
  %92 = load i64, i64* %13, align 8
  %93 = sub i64 %92, %89
  store i64 %93, i64* %13, align 8
  store i8 1, i8* %29, align 8
  %94 = icmp eq i64 %83, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %79
  %96 = add i64 %85, %82
  %97 = sub i64 %96, %83
  %98 = shl i64 %97, 3
  %99 = sub i64 %98, %80
  %100 = load i64, i64* %30, align 8
  %101 = icmp ugt i64 %99, %100
  br i1 %101, label %102, label %112

102:                                              ; preds = %95
  %103 = load i8*, i8** %23, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 8
  %105 = ptrtoint i8* %104 to i64
  %106 = sub i64 %105, %83
  %107 = shl i64 %106, 3
  %108 = icmp ugt i64 %99, %107
  br i1 %108, label %111, label %112

109:                                              ; preds = %69, %39
  %110 = phi i32 [ %41, %39 ], [ 1, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #4
  br label %431

111:                                              ; preds = %102
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #4
  br label %431

112:                                              ; preds = %79, %102, %95
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #4
  %113 = call %struct.BrotliDecoderStateStruct* @BrotliDecoderCreateInstance(i8* (i8*, i64)* null, void (i8*, i8*)* null, i8* null) #4
  %114 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 4
  %115 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 4, i32 0, i32 1
  %116 = bitcast %"class.std::__1::vector.0"** %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"class.std::__1::vector"* %114 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = icmp eq i64 %117, %119
  br i1 %120, label %218, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 5, i32 0, i32 0
  %123 = bitcast i64* %4 to i8*
  %124 = bitcast i8** %5 to i8*
  %125 = bitcast i8** %5 to i64*
  br label %131

126:                                              ; preds = %210
  %127 = icmp eq i64 %213, %214
  br i1 %127, label %218, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 5, i32 0, i32 0
  %130 = trunc i64 %211 to i8
  br label %230

131:                                              ; preds = %121, %210
  %132 = phi i64 [ %119, %121 ], [ %214, %210 ]
  %133 = phi i64 [ 0, %121 ], [ %211, %210 ]
  %134 = phi i64 [ 0, %121 ], [ %212, %210 ]
  %135 = inttoptr i64 %132 to %"class.std::__1::vector.0"*
  %136 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %135, i64 %134
  %137 = load i32*, i32** %122, align 8
  %138 = getelementptr inbounds i32, i32* %137, i64 %134
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %174, label %141

141:                                              ; preds = %131
  %142 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %135, i64 %134, i32 0, i32 1
  %143 = bitcast i8** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.std::__1::vector.0"* %136 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = xor i64 %146, -1
  %148 = add i64 %144, %147
  %149 = lshr i64 %148, 8
  %150 = trunc i64 %149 to i8
  %151 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %136, i64 0, i32 0, i32 0
  %152 = inttoptr i64 %146 to i8*
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  store i8 %150, i8* %153, align 1
  %154 = trunc i64 %148 to i8
  %155 = load i8*, i8** %151, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 2
  store i8 %154, i8* %156, align 1
  %157 = load i32*, i32** %122, align 8
  %158 = getelementptr inbounds i32, i32* %157, i64 %134
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %161, label %210

161:                                              ; preds = %141
  %162 = load i64, i64* %143, align 8
  %163 = load i64, i64* %145, align 8
  %164 = sub i64 %162, %163
  %165 = icmp ult i64 %164, 17
  br i1 %165, label %429, label %166

166:                                              ; preds = %161
  %167 = inttoptr i64 %163 to i8*
  store i8 -30, i8* %167, align 1
  %168 = load i8*, i8** %151, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3jxl4jpegL14kIccProfileTagE, i64 0, i64 0), i64 12, i1 false)
  %170 = add i64 %133, 1
  %171 = trunc i64 %170 to i8
  %172 = load i8*, i8** %151, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 15
  store i8 %171, i8* %173, align 1
  br label %210

174:                                              ; preds = %131
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #4
  %175 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %135, i64 %134, i32 0, i32 1
  %176 = bitcast i8** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast %"class.std::__1::vector.0"* %136 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = sub i64 %177, %179
  store i64 %180, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #4
  store i64 %179, i64* %125, align 8
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %194, label %182

182:                                              ; preds = %174, %190
  %183 = call i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* %113) #4
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %193

185:                                              ; preds = %182
  %186 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* %113, i64* nonnull %13, i8** nonnull %12, i64* nonnull %4, i8** nonnull %5, i64* null) #4
  switch i32 %186, label %187 [
    i32 3, label %190
    i32 1, label %190
  ]

187:                                              ; preds = %185
  %188 = call i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct* %113) #4
  %189 = call i8* @BrotliDecoderErrorString(i32 %188) #4
  br label %193

190:                                              ; preds = %185, %185
  %191 = load i64, i64* %4, align 8
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %194, label %182

193:                                              ; preds = %182, %187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #4
  br label %429

194:                                              ; preds = %190, %174
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #4
  %195 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %136, i64 0, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr inbounds i8, i8* %196, i64 1
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i64
  %200 = shl nuw nsw i64 %199, 8
  %201 = getelementptr inbounds i8, i8* %196, i64 2
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = or i64 %200, %203
  %205 = add nuw nsw i64 %204, 1
  %206 = load i64, i64* %176, align 8
  %207 = ptrtoint i8* %196 to i64
  %208 = sub i64 %206, %207
  %209 = icmp eq i64 %205, %208
  br i1 %209, label %210, label %429

210:                                              ; preds = %141, %166, %194
  %211 = phi i64 [ %133, %194 ], [ %133, %141 ], [ %170, %166 ]
  %212 = add nuw i64 %134, 1
  %213 = load i64, i64* %116, align 8
  %214 = load i64, i64* %118, align 8
  %215 = sub i64 %213, %214
  %216 = sdiv exact i64 %215, 24
  %217 = icmp ult i64 %212, %216
  br i1 %217, label %131, label %126

218:                                              ; preds = %281, %112, %126
  %219 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 6
  %220 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 6, i32 0, i32 1
  %221 = bitcast %"class.std::__1::vector.0"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.std::__1::vector"* %219 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = icmp eq i64 %222, %224
  br i1 %225, label %294, label %226

226:                                              ; preds = %218
  %227 = bitcast i64* %6 to i8*
  %228 = bitcast i8** %7 to i8*
  %229 = bitcast i8** %7 to i64*
  br label %306

230:                                              ; preds = %128, %281
  %231 = phi i64 [ %214, %128 ], [ %284, %281 ]
  %232 = phi i64 [ 0, %128 ], [ %282, %281 ]
  %233 = inttoptr i64 %231 to %"class.std::__1::vector.0"*
  %234 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %233, i64 %232
  %235 = load i32*, i32** %129, align 8
  %236 = getelementptr inbounds i32, i32* %235, i64 %232
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, 1
  br i1 %238, label %239, label %246

239:                                              ; preds = %230
  %240 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %234, i64 0, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = getelementptr inbounds i8, i8* %241, i64 16
  store i8 %130, i8* %242, align 1
  %243 = load i32*, i32** %129, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 %232
  %245 = load i32, i32* %244, align 4
  br label %246

246:                                              ; preds = %239, %230
  %247 = phi i32 [ %245, %239 ], [ %237, %230 ]
  %248 = icmp eq i32 %247, 2
  br i1 %248, label %249, label %265

249:                                              ; preds = %246
  %250 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %234, i64 0, i32 0, i32 0
  %251 = load i8*, i8** %250, align 8
  store i8 -31, i8* %251, align 1
  %252 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %233, i64 %232, i32 0, i32 1
  %253 = bitcast i8** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = bitcast %"class.std::__1::vector.0"* %234 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = sub i64 %254, %256
  %258 = icmp ult i64 %257, 9
  br i1 %258, label %429, label %259

259:                                              ; preds = %249
  %260 = inttoptr i64 %256 to i8*
  %261 = getelementptr inbounds i8, i8* %260, i64 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %261, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @_ZN3jxl4jpegL8kExifTagE, i64 0, i64 0), i64 6, i1 false)
  %262 = load i32*, i32** %129, align 8
  %263 = getelementptr inbounds i32, i32* %262, i64 %232
  %264 = load i32, i32* %263, align 4
  br label %265

265:                                              ; preds = %259, %246
  %266 = phi i32 [ %264, %259 ], [ %247, %246 ]
  %267 = icmp eq i32 %266, 3
  br i1 %267, label %268, label %281

268:                                              ; preds = %265
  %269 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %234, i64 0, i32 0, i32 0
  %270 = load i8*, i8** %269, align 8
  store i8 -31, i8* %270, align 1
  %271 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %233, i64 %232, i32 0, i32 1
  %272 = bitcast i8** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::vector.0"* %234 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = sub i64 %273, %275
  %277 = icmp ult i64 %276, 32
  br i1 %277, label %429, label %278

278:                                              ; preds = %268
  %279 = inttoptr i64 %275 to i8*
  %280 = getelementptr inbounds i8, i8* %279, i64 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %280, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @_ZN3jxl4jpegL7kXMPTagE, i64 0, i64 0), i64 29, i1 false)
  br label %281

281:                                              ; preds = %278, %265
  %282 = add nuw i64 %232, 1
  %283 = load i64, i64* %116, align 8
  %284 = load i64, i64* %118, align 8
  %285 = sub i64 %283, %284
  %286 = sdiv exact i64 %285, 24
  %287 = icmp ult i64 %282, %286
  br i1 %287, label %230, label %218

288:                                              ; preds = %330
  %289 = load i64, i64* %221, align 8
  %290 = load i64, i64* %223, align 8
  %291 = sub i64 %289, %290
  %292 = sdiv exact i64 %291, 24
  %293 = icmp ult i64 %346, %292
  br i1 %293, label %306, label %294

294:                                              ; preds = %288, %218
  %295 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 12
  %296 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 12, i32 0, i32 1
  %297 = bitcast %"class.std::__1::vector.0"** %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast %"class.std::__1::vector"* %295 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = icmp eq i64 %298, %300
  br i1 %301, label %382, label %302

302:                                              ; preds = %294
  %303 = bitcast i64* %8 to i8*
  %304 = bitcast i8** %9 to i8*
  %305 = bitcast i8** %9 to i64*
  br label %347

306:                                              ; preds = %226, %288
  %307 = phi i64 [ %224, %226 ], [ %290, %288 ]
  %308 = phi i64 [ 0, %226 ], [ %346, %288 ]
  %309 = inttoptr i64 %307 to %"class.std::__1::vector.0"*
  %310 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %309, i64 %308
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %227) #4
  %311 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %309, i64 %308, i32 0, i32 1
  %312 = bitcast i8** %311 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = bitcast %"class.std::__1::vector.0"* %310 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = sub i64 %313, %315
  store i64 %316, i64* %6, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %228) #4
  store i64 %315, i64* %229, align 8
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %330, label %318

318:                                              ; preds = %306, %326
  %319 = call i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* %113) #4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %329

321:                                              ; preds = %318
  %322 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* %113, i64* nonnull %13, i8** nonnull %12, i64* nonnull %6, i8** nonnull %7, i64* null) #4
  switch i32 %322, label %323 [
    i32 3, label %326
    i32 1, label %326
  ]

323:                                              ; preds = %321
  %324 = call i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct* %113) #4
  %325 = call i8* @BrotliDecoderErrorString(i32 %324) #4
  br label %329

326:                                              ; preds = %321, %321
  %327 = load i64, i64* %6, align 8
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %330, label %318

329:                                              ; preds = %318, %323
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #4
  br label %429

330:                                              ; preds = %326, %306
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #4
  %331 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %310, i64 0, i32 0, i32 0
  %332 = load i8*, i8** %331, align 8
  %333 = getelementptr inbounds i8, i8* %332, i64 1
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i64
  %336 = shl nuw nsw i64 %335, 8
  %337 = getelementptr inbounds i8, i8* %332, i64 2
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i64
  %340 = or i64 %336, %339
  %341 = add nuw nsw i64 %340, 1
  %342 = load i64, i64* %312, align 8
  %343 = ptrtoint i8* %332 to i64
  %344 = sub i64 %342, %343
  %345 = icmp eq i64 %341, %344
  %346 = add nuw i64 %308, 1
  br i1 %345, label %288, label %429

347:                                              ; preds = %302, %375
  %348 = phi i64 [ %300, %302 ], [ %376, %375 ]
  %349 = phi i64 [ %298, %302 ], [ %377, %375 ]
  %350 = phi i64 [ 0, %302 ], [ %378, %375 ]
  %351 = inttoptr i64 %348 to %"class.std::__1::vector.0"*
  %352 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %351, i64 %350
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #4
  %353 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %351, i64 %350, i32 0, i32 1
  %354 = bitcast i8** %353 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast %"class.std::__1::vector.0"* %352 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = sub i64 %355, %357
  store i64 %358, i64* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %304) #4
  store i64 %357, i64* %305, align 8
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %375, label %360

360:                                              ; preds = %347, %368
  %361 = call i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* %113) #4
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %371

363:                                              ; preds = %360
  %364 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* %113, i64* nonnull %13, i8** nonnull %12, i64* nonnull %8, i8** nonnull %9, i64* null) #4
  switch i32 %364, label %365 [
    i32 3, label %368
    i32 1, label %368
  ]

365:                                              ; preds = %363
  %366 = call i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct* %113) #4
  %367 = call i8* @BrotliDecoderErrorString(i32 %366) #4
  br label %371

368:                                              ; preds = %363, %363
  %369 = load i64, i64* %8, align 8
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %372, label %360

371:                                              ; preds = %360, %365
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %304) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #4
  br label %429

372:                                              ; preds = %368
  %373 = load i64, i64* %297, align 8
  %374 = load i64, i64* %299, align 8
  br label %375

375:                                              ; preds = %372, %347
  %376 = phi i64 [ %374, %372 ], [ %348, %347 ]
  %377 = phi i64 [ %373, %372 ], [ %349, %347 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %304) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #4
  %378 = add nuw i64 %350, 1
  %379 = sub i64 %377, %376
  %380 = sdiv exact i64 %379, 24
  %381 = icmp ult i64 %378, %380
  br i1 %381, label %347, label %382

382:                                              ; preds = %375, %294
  %383 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 13
  %384 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %384) #4
  %385 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %2, i64 0, i32 13, i32 0, i32 1
  %386 = bitcast i8** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.std::__1::vector.0"* %383 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = sub i64 %387, %389
  store i64 %390, i64* %10, align 8
  %391 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %391) #4
  %392 = bitcast i8** %11 to i64*
  store i64 %389, i64* %392, align 8
  %393 = icmp eq i64 %390, 0
  br i1 %393, label %406, label %394

394:                                              ; preds = %382, %402
  %395 = call i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* %113) #4
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %405

397:                                              ; preds = %394
  %398 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* %113, i64* nonnull %13, i8** nonnull %12, i64* nonnull %10, i8** nonnull %11, i64* null) #4
  switch i32 %398, label %399 [
    i32 3, label %402
    i32 1, label %402
  ]

399:                                              ; preds = %397
  %400 = call i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct* %113) #4
  %401 = call i8* @BrotliDecoderErrorString(i32 %400) #4
  br label %405

402:                                              ; preds = %397, %397
  %403 = load i64, i64* %10, align 8
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %406, label %394

405:                                              ; preds = %394, %399
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %384) #4
  br label %429

406:                                              ; preds = %402, %382
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %384) #4
  %407 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %407) #4
  store i64 1, i64* %15, align 8
  %408 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %408) #4
  store i64 -6148914691236517206, i64* %16, align 8
  %409 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %409) #4
  %410 = bitcast i8** %17 to i64**
  store i64* %16, i64** %410, align 8
  %411 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* %113, i64* nonnull %13, i8** nonnull %12, i64* nonnull %15, i8** nonnull %17, i64* null) #4
  %412 = load i64, i64* %15, align 8
  %413 = icmp eq i64 %412, 0
  %414 = or i32 %411, 1
  %415 = icmp eq i32 %414, 3
  %416 = or i1 %415, %413
  br i1 %416, label %427, label %417

417:                                              ; preds = %406
  %418 = call i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* %113) #4
  %419 = icmp ne i32 %418, 0
  %420 = icmp eq i32 %411, 1
  %421 = and i1 %420, %419
  %422 = load i64, i64* %13, align 8
  %423 = icmp eq i64 %422, 0
  %424 = and i1 %421, %423
  %425 = xor i1 %424, true
  %426 = zext i1 %425 to i32
  br label %427

427:                                              ; preds = %417, %406
  %428 = phi i32 [ 1, %406 ], [ %426, %417 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %409) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %408) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %407) #4
  br label %429

429:                                              ; preds = %161, %194, %268, %249, %330, %329, %193, %371, %427, %405
  %430 = phi i32 [ 1, %371 ], [ %428, %427 ], [ 1, %405 ], [ 1, %193 ], [ 1, %329 ], [ 1, %330 ], [ 1, %249 ], [ 1, %268 ], [ 1, %194 ], [ 1, %161 ]
  call void @BrotliDecoderDestroyInstance(%struct.BrotliDecoderStateStruct* %113) #4
  br label %431

431:                                              ; preds = %109, %429, %111
  %432 = phi i32 [ %430, %429 ], [ 1, %111 ], [ %110, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #4
  ret i32 %432
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.BrotliDecoderStateStruct* @BrotliDecoderCreateInstance(i8* (i8*, i64)*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct*, i64*, i8**, i64*, i8**, i64*) local_unnamed_addr #2

declare i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare i8* @BrotliDecoderErrorString(i32) local_unnamed_addr #2

declare i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #2

declare void @BrotliDecoderDestroyInstance(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
