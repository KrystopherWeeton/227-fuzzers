; ModuleID = '../../net/third_party/quiche/src/quic/core/qpack/qpack_header_table.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/qpack/qpack_header_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::QpackEncoderHeaderTable" = type { %"class.quic::QpackHeaderTableBase.base", %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map.18"*, %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.18" }
%"class.quic::QpackHeaderTableBase.base" = type <{ i32 (...)**, %"class.std::__1::deque", i64, i64, i64, i64, i64, i8 }>
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::__split_buffer" = type { %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.std::__1::__compressed_pair.1" }
%"class.spdy::HpackEntry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.spdy::HpackEntry"** }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.spdy::HpackLookupEntry", i64 }
%"struct.spdy::HpackLookupEntry" = type { %"class.absl::string_view", %"class.absl::string_view" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.absl::flat_hash_map.18" = type { %"class.absl::container_internal::raw_hash_map.19" }
%"class.absl::container_internal::raw_hash_map.19" = type { %"class.absl::container_internal::raw_hash_set.20" }
%"class.absl::container_internal::raw_hash_set.20" = type { i8*, %"union.absl::container_internal::map_slot_type.21"*, i64, i64, %"class.absl::container_internal::CompressedTuple.24" }
%"union.absl::container_internal::map_slot_type.21" = type { %"struct.std::__1::pair.22" }
%"struct.std::__1::pair.22" = type { %"class.absl::string_view", i64 }
%"class.absl::container_internal::CompressedTuple.24" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.25" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.25" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.quic::QpackDecoderHeaderTable" = type { %"class.quic::QpackHeaderTableBase.base.39", %"class.std::__1::vector"*, %"class.std::__1::multimap" }
%"class.quic::QpackHeaderTableBase.base.39" = type <{ i32 (...)**, %"class.quiche::QuicheCircularDeque", i64, i64, i64, i64, i64, i8 }>
%"class.quiche::QuicheCircularDeque" = type { i64, i64, %"struct.quiche::QuicheCircularDeque<spdy::HpackEntry, 3, std::__1::allocator<spdy::HpackEntry> >::AllocatorAndData" }
%"struct.quiche::QuicheCircularDeque<spdy::HpackEntry, 3, std::__1::allocator<spdy::HpackEntry> >::AllocatorAndData" = type { %"class.spdy::HpackEntry"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.spdy::HpackEntry"* }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.40", %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.spdy::HpackStaticTable" = type { %"class.std::__1::vector", %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.18" }
%"struct.std::__1::pair.11" = type { %"struct.spdy::HpackLookupEntry", i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::pair.23" = type { %"class.absl::string_view", i64 }
%"class.quic::QpackHeaderTableBase" = type <{ i32 (...)**, %"class.std::__1::deque", i64, i64, i64, i64, i64, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.48" }
%"struct.std::__1::pair.48" = type { i64, %"class.quic::QpackDecoderHeaderTable::Observer"* }
%"class.quic::QpackDecoderHeaderTable::Observer" = type { i32 (...)** }
%"class.quic::QpackHeaderTableBase.38" = type <{ i32 (...)**, %"class.quiche::QuicheCircularDeque", i64, i64, i64, i64, i64, i8, [7 x i8] }>
%"struct.std::__1::__split_buffer.55" = type { %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.std::__1::allocator.4"* }
%"class.std::__1::allocator.4" = type { i8 }

$_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESA_ = comdat any

$_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_ = comdat any

$_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE18RemoveEntryFromEndEv = comdat any

$_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESB_ = comdat any

$_ZN4quic23QpackEncoderHeaderTableD2Ev = comdat any

$_ZN4quic23QpackEncoderHeaderTableD0Ev = comdat any

$_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE18RemoveEntryFromEndEv = comdat any

$_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED2Ev = comdat any

$_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED0Ev = comdat any

$_ZNK6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE12DestroyRangeEmm = comdat any

$_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED2Ev = comdat any

$_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED0Ev = comdat any

$_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv = comdat any

$_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m = comdat any

$_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE = comdat any

$_ZN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE8RelocateEm = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZTVN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEEE = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

$_ZTVN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEEE = comdat any

@_ZTVN4quic23QpackEncoderHeaderTableE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QpackEncoderHeaderTable"*)* @_ZN4quic23QpackEncoderHeaderTableD2Ev to i8*), i8* bitcast (void (%"class.quic::QpackEncoderHeaderTable"*)* @_ZN4quic23QpackEncoderHeaderTableD0Ev to i8*), i8* bitcast (i64 (%"class.quic::QpackEncoderHeaderTable"*, i8*, i64, i8*, i64)* @_ZN4quic23QpackEncoderHeaderTable11InsertEntryEN4absl11string_viewES2_ to i8*), i8* bitcast (void (%"class.quic::QpackEncoderHeaderTable"*)* @_ZN4quic23QpackEncoderHeaderTable18RemoveEntryFromEndEv to i8*)] }, align 8
@.str = private unnamed_addr constant [71 x i8] c"../../net/third_party/quiche/src/quic/core/qpack/qpack_header_table.cc\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"result.second\00", align 1
@_ZTVN4quic23QpackDecoderHeaderTableE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QpackDecoderHeaderTable"*)* @_ZN4quic23QpackDecoderHeaderTableD2Ev to i8*), i8* bitcast (void (%"class.quic::QpackDecoderHeaderTable"*)* @_ZN4quic23QpackDecoderHeaderTableD0Ev to i8*), i8* bitcast (i64 (%"class.quic::QpackDecoderHeaderTable"*, i8*, i64, i8*, i64)* @_ZN4quic23QpackDecoderHeaderTable11InsertEntryEN4absl11string_viewES2_ to i8*), i8* bitcast (void (%"class.quic::QpackHeaderTableBase.38"*)* @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE18RemoveEntryFromEndEv to i8*)] }, align 8
@_ZTVN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEEE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QpackHeaderTableBase.38"*)* @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED2Ev to i8*), i8* bitcast (void (%"class.quic::QpackHeaderTableBase.38"*)* @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED0Ev to i8*), i8* bitcast (i64 (%"class.quic::QpackHeaderTableBase.38"*, i8*, i64, i8*, i64)* @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESB_ to i8*), i8* bitcast (void (%"class.quic::QpackHeaderTableBase.38"*)* @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE18RemoveEntryFromEndEv to i8*)] }, comdat, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZTVN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEEE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QpackHeaderTableBase"*)* @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED2Ev to i8*), i8* bitcast (void (%"class.quic::QpackHeaderTableBase"*)* @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED0Ev to i8*), i8* bitcast (i64 (%"class.quic::QpackHeaderTableBase"*, i8*, i64, i8*, i64)* @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESA_ to i8*), i8* bitcast (void (%"class.quic::QpackHeaderTableBase"*)* @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE18RemoveEntryFromEndEv to i8*)] }, comdat, align 8
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8

@_ZN4quic23QpackEncoderHeaderTableC1Ev = hidden unnamed_addr alias void (%"class.quic::QpackEncoderHeaderTable"*), void (%"class.quic::QpackEncoderHeaderTable"*)* @_ZN4quic23QpackEncoderHeaderTableC2Ev
@_ZN4quic23QpackDecoderHeaderTableC1Ev = hidden unnamed_addr alias void (%"class.quic::QpackDecoderHeaderTable"*), void (%"class.quic::QpackDecoderHeaderTable"*)* @_ZN4quic23QpackDecoderHeaderTableC2Ev
@_ZN4quic23QpackDecoderHeaderTableD1Ev = hidden unnamed_addr alias void (%"class.quic::QpackDecoderHeaderTable"*), void (%"class.quic::QpackDecoderHeaderTable"*)* @_ZN4quic23QpackDecoderHeaderTableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackEncoderHeaderTableC2Ev(%"class.quic::QpackEncoderHeaderTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::deque"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 89, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic23QpackEncoderHeaderTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %5 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 1
  %6 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4quic22ObtainQpackStaticTableEv() #12
  %7 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %6, i64 0, i32 1
  store %"class.absl::flat_hash_map"* %7, %"class.absl::flat_hash_map"** %5, align 8
  %8 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 2
  %9 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4quic22ObtainQpackStaticTableEv() #12
  %10 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %9, i64 0, i32 2
  store %"class.absl::flat_hash_map.18"* %10, %"class.absl::flat_hash_map.18"** %8, align 8
  %11 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %11, align 8
  %12 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = bitcast %"union.absl::container_internal::map_slot_type"** %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #12
  %14 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %16 = bitcast %"union.absl::container_internal::map_slot_type.21"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 32, i1 false) #12
  ret void
}

declare dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4quic22ObtainQpackStaticTableEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic23QpackEncoderHeaderTable11InsertEntryEN4absl11string_viewES2_(%"class.quic::QpackEncoderHeaderTable"*, i8*, i64, i8*, i64) unnamed_addr #2 align 2 {
  %6 = alloca %"struct.std::__1::pair.11", align 8
  %7 = alloca %"struct.std::__1::pair.11", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"struct.std::__1::pair.23", align 8
  %10 = alloca %"struct.std::__1::pair.23", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = bitcast %"class.quic::QpackEncoderHeaderTable"* %0 to %"class.quic::QpackHeaderTableBase"*
  %13 = tail call i64 @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESA_(%"class.quic::QpackHeaderTableBase"* %12, i8* %1, i64 %2, i8* %3, i64 %4)
  %14 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %15, -1
  %19 = add i64 %18, %17
  %20 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %20, align 8
  %22 = udiv i64 %19, 85
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %21, i64 %22
  %24 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, align 8
  %25 = urem i64 %19, 85
  %26 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %24, i64 %25
  %27 = bitcast %"class.spdy::HpackEntry"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %5
  %32 = zext i8 %29 to i64
  %33 = ptrtoint %"class.spdy::HpackEntry"* %26 to i64
  br label %41

34:                                               ; preds = %5
  %35 = bitcast %"class.spdy::HpackEntry"* %26 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %24, i64 %25, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = icmp sgt i64 %38, -1
  br i1 %39, label %41, label %40, !prof !2

40:                                               ; preds = %34
  tail call void @llvm.trap() #12
  unreachable

41:                                               ; preds = %31, %34
  %42 = phi i64 [ %36, %34 ], [ %33, %31 ]
  %43 = phi i64 [ %38, %34 ], [ %32, %31 ]
  %44 = inttoptr i64 %42 to i8*
  %45 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %24, i64 %25, i32 1
  %46 = bitcast %"class.std::__1::basic_string"* %45 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %41
  %51 = zext i8 %48 to i64
  %52 = ptrtoint %"class.std::__1::basic_string"* %45 to i64
  br label %60

53:                                               ; preds = %41
  %54 = bitcast %"class.std::__1::basic_string"* %45 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %24, i64 %25, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = icmp sgt i64 %57, -1
  br i1 %58, label %60, label %59, !prof !2

59:                                               ; preds = %53
  tail call void @llvm.trap() #12
  unreachable

60:                                               ; preds = %50, %53
  %61 = phi i64 [ %55, %53 ], [ %52, %50 ]
  %62 = phi i64 [ %57, %53 ], [ %51, %50 ]
  %63 = inttoptr i64 %61 to i8*
  %64 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0
  %65 = bitcast %"struct.std::__1::pair.11"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %65) #12
  %66 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* %44, i8** %66, align 8
  %67 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 0, i32 0, i32 1
  store i64 %43, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 0, i32 1, i32 0
  store i8* %63, i8** %68, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 0, i32 1, i32 1
  store i64 %62, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 1
  store i64 %13, i64* %70, align 8, !alias.scope !3
  %71 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %6, i64 0, i32 0
  %72 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %64, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %71) #12, !noalias !6
  %73 = extractvalue { i64, i8 } %72, 0
  %74 = extractvalue { i64, i8 } %72, 1
  %75 = and i8 %74, 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %84, label %77

77:                                               ; preds = %60
  %78 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %79 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %78, align 8, !noalias !6
  %80 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %79, i64 %73
  %81 = bitcast %"union.absl::container_internal::map_slot_type"* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* nonnull align 8 %65, i64 32, i1 false) #12, !noalias !6
  %82 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %79, i64 %73, i32 0, i32 1
  %83 = load i64, i64* %70, align 8, !noalias !6
  store i64 %83, i64* %82, align 8, !noalias !6
  br label %84

84:                                               ; preds = %60, %77
  %85 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %64, i64 0, i32 0
  %86 = load i8*, i8** %85, align 8, !noalias !6
  %87 = getelementptr inbounds i8, i8* %86, i64 %73
  %88 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %89 = icmp ne i8* %87, null
  call void @llvm.assume(i1 %89) #12, !noalias !6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %65) #12
  %90 = icmp eq i8 %74, 0
  br i1 %90, label %91, label %164

91:                                               ; preds = %84
  %92 = load i8, i8* %87, align 1
  %93 = icmp sgt i8 %92, -1
  br i1 %93, label %95, label %94, !prof !2

94:                                               ; preds = %91
  call void @llvm.trap() #12
  unreachable

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, -1
  store i64 %98, i64* %96, align 8
  %99 = add i64 %73, -16
  %100 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %99, %101
  %103 = bitcast i8* %87 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = icmp eq <16 x i8> %104, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %106 = bitcast <16 x i1> %105 to i16
  %107 = getelementptr inbounds i8, i8* %86, i64 %102
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1
  %110 = icmp eq <16 x i8> %109, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %111 = bitcast <16 x i1> %110 to i16
  %112 = icmp ne i16 %111, 0
  %113 = icmp ne i16 %106, 0
  %114 = and i1 %113, %112
  br i1 %114, label %115, label %125

115:                                              ; preds = %95
  %116 = zext i16 %106 to i32
  %117 = zext i16 %111 to i32
  %118 = call i32 @llvm.cttz.i32(i32 %116, i1 false) #12, !range !21
  %119 = shl nuw i32 %117, 16
  %120 = call i32 @llvm.ctlz.i32(i32 %119, i1 false) #12, !range !21
  %121 = add nuw nsw i32 %120, %118
  %122 = icmp ult i32 %121, 16
  %123 = zext i1 %122 to i64
  %124 = select i1 %122, i8 -128, i8 -2
  br label %125

125:                                              ; preds = %95, %115
  %126 = phi i64 [ 0, %95 ], [ %123, %115 ]
  %127 = phi i8 [ -2, %95 ], [ %124, %115 ]
  store i8 %127, i8* %87, align 1
  %128 = load i8*, i8** %85, align 8
  %129 = add i64 %73, -15
  %130 = load i64, i64* %100, align 8
  %131 = and i64 %130, %129
  %132 = and i64 %130, 15
  %133 = add i64 %131, %132
  %134 = getelementptr inbounds i8, i8* %128, i64 %133
  store i8 %127, i8* %134, align 1
  %135 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, %126
  store i64 %137, i64* %135, align 8
  %138 = bitcast %"struct.std::__1::pair.11"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %138) #12
  %139 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 0, i32 0, i32 0
  store i8* %44, i8** %139, align 8
  %140 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 0, i32 0, i32 1
  store i64 %43, i64* %140, align 8
  %141 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 0, i32 1, i32 0
  store i8* %63, i8** %141, align 8
  %142 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 0, i32 1, i32 1
  store i64 %62, i64* %142, align 8
  %143 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 1
  store i64 %13, i64* %143, align 8, !alias.scope !22
  %144 = getelementptr inbounds %"struct.std::__1::pair.11", %"struct.std::__1::pair.11"* %7, i64 0, i32 0
  %145 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %64, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %144) #12, !noalias !25
  %146 = extractvalue { i64, i8 } %145, 0
  %147 = extractvalue { i64, i8 } %145, 1
  %148 = and i8 %147, 1
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %156, label %150

150:                                              ; preds = %125
  %151 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %88, align 8, !noalias !25
  %152 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %146
  %153 = bitcast %"union.absl::container_internal::map_slot_type"* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %153, i8* nonnull align 8 %138, i64 32, i1 false) #12, !noalias !25
  %154 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %146, i32 0, i32 1
  %155 = load i64, i64* %143, align 8, !noalias !25
  store i64 %155, i64* %154, align 8, !noalias !25
  br label %156

156:                                              ; preds = %125, %150
  %157 = load i8*, i8** %85, align 8, !noalias !25
  %158 = getelementptr inbounds i8, i8* %157, i64 %146
  %159 = icmp ne i8* %158, null
  call void @llvm.assume(i1 %159) #12, !noalias !25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %138) #12
  %160 = icmp eq i8 %147, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %156
  %162 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %162) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #12
  %163 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %162) #12
  br label %164

164:                                              ; preds = %161, %156, %84
  %165 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %166 = bitcast %"struct.std::__1::pair.23"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %166) #12
  %167 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %9, i64 0, i32 0, i32 0
  store i8* %44, i8** %167, align 8
  %168 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %9, i64 0, i32 0, i32 1
  store i64 %43, i64* %168, align 8
  %169 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %9, i64 0, i32 1
  store i64 %13, i64* %169, align 8
  %170 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %9, i64 0, i32 0
  %171 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.20"* %165, %"class.absl::string_view"* nonnull dereferenceable(16) %170) #12, !noalias !40
  %172 = extractvalue { i64, i8 } %171, 0
  %173 = extractvalue { i64, i8 } %171, 1
  %174 = and i8 %173, 1
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %183, label %176

176:                                              ; preds = %164
  %177 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %178 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %177, align 8, !noalias !40
  %179 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %178, i64 %172
  %180 = bitcast %"union.absl::container_internal::map_slot_type.21"* %179 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %180, i8* nonnull align 8 %166, i64 16, i1 false) #12, !noalias !40
  %181 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %178, i64 %172, i32 0, i32 1
  %182 = load i64, i64* %169, align 8, !noalias !40
  store i64 %182, i64* %181, align 8, !noalias !40
  br label %183

183:                                              ; preds = %164, %176
  %184 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %165, i64 0, i32 0
  %185 = load i8*, i8** %184, align 8, !noalias !40
  %186 = getelementptr inbounds i8, i8* %185, i64 %172
  %187 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %188 = icmp ne i8* %186, null
  call void @llvm.assume(i1 %188) #12, !noalias !40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %166) #12
  %189 = icmp eq i8 %173, 0
  br i1 %189, label %190, label %261

190:                                              ; preds = %183
  %191 = load i8, i8* %186, align 1
  %192 = icmp sgt i8 %191, -1
  br i1 %192, label %194, label %193, !prof !2

193:                                              ; preds = %190
  call void @llvm.trap() #12
  unreachable

194:                                              ; preds = %190
  %195 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %196, -1
  store i64 %197, i64* %195, align 8
  %198 = add i64 %172, -16
  %199 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %200 = load i64, i64* %199, align 8
  %201 = and i64 %198, %200
  %202 = bitcast i8* %186 to <16 x i8>*
  %203 = load <16 x i8>, <16 x i8>* %202, align 1
  %204 = icmp eq <16 x i8> %203, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %205 = bitcast <16 x i1> %204 to i16
  %206 = getelementptr inbounds i8, i8* %185, i64 %201
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1
  %209 = icmp eq <16 x i8> %208, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %210 = bitcast <16 x i1> %209 to i16
  %211 = icmp ne i16 %210, 0
  %212 = icmp ne i16 %205, 0
  %213 = and i1 %212, %211
  br i1 %213, label %214, label %224

214:                                              ; preds = %194
  %215 = zext i16 %205 to i32
  %216 = zext i16 %210 to i32
  %217 = call i32 @llvm.cttz.i32(i32 %215, i1 false) #12, !range !21
  %218 = shl nuw i32 %216, 16
  %219 = call i32 @llvm.ctlz.i32(i32 %218, i1 false) #12, !range !21
  %220 = add nuw nsw i32 %219, %217
  %221 = icmp ult i32 %220, 16
  %222 = zext i1 %221 to i64
  %223 = select i1 %221, i8 -128, i8 -2
  br label %224

224:                                              ; preds = %194, %214
  %225 = phi i64 [ 0, %194 ], [ %222, %214 ]
  %226 = phi i8 [ -2, %194 ], [ %223, %214 ]
  store i8 %226, i8* %186, align 1
  %227 = load i8*, i8** %184, align 8
  %228 = add i64 %172, -15
  %229 = load i64, i64* %199, align 8
  %230 = and i64 %229, %228
  %231 = and i64 %229, 15
  %232 = add i64 %230, %231
  %233 = getelementptr inbounds i8, i8* %227, i64 %232
  store i8 %226, i8* %233, align 1
  %234 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %235 = load i64, i64* %234, align 8
  %236 = add i64 %235, %225
  store i64 %236, i64* %234, align 8
  %237 = bitcast %"struct.std::__1::pair.23"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %237) #12
  %238 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %10, i64 0, i32 0, i32 0
  store i8* %44, i8** %238, align 8
  %239 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %10, i64 0, i32 0, i32 1
  store i64 %43, i64* %239, align 8
  %240 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %10, i64 0, i32 1
  store i64 %13, i64* %240, align 8
  %241 = getelementptr inbounds %"struct.std::__1::pair.23", %"struct.std::__1::pair.23"* %10, i64 0, i32 0
  %242 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.20"* %165, %"class.absl::string_view"* nonnull dereferenceable(16) %241) #12, !noalias !55
  %243 = extractvalue { i64, i8 } %242, 0
  %244 = extractvalue { i64, i8 } %242, 1
  %245 = and i8 %244, 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %253, label %247

247:                                              ; preds = %224
  %248 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %187, align 8, !noalias !55
  %249 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %248, i64 %243
  %250 = bitcast %"union.absl::container_internal::map_slot_type.21"* %249 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %250, i8* nonnull align 8 %237, i64 16, i1 false) #12, !noalias !55
  %251 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %248, i64 %243, i32 0, i32 1
  %252 = load i64, i64* %240, align 8, !noalias !55
  store i64 %252, i64* %251, align 8, !noalias !55
  br label %253

253:                                              ; preds = %224, %247
  %254 = load i8*, i8** %184, align 8, !noalias !55
  %255 = getelementptr inbounds i8, i8* %254, i64 %243
  %256 = icmp ne i8* %255, null
  call void @llvm.assume(i1 %256) #12, !noalias !55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %237) #12
  %257 = icmp eq i8 %244, 0
  br i1 %257, label %258, label %261

258:                                              ; preds = %253
  %259 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %259) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 47, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #12
  %260 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %259) #12
  br label %261

261:                                              ; preds = %258, %253, %183
  ret i64 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESA_(%"class.quic::QpackHeaderTableBase"*, i8*, i64, i8*, i64) unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.spdy::HpackEntry", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 6
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %10
  %15 = bitcast %"class.spdy::HpackEntry"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %15) #12
  %16 = icmp eq i8* %1, null
  %17 = bitcast %"class.spdy::HpackEntry"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 48, i1 false)
  br i1 %16, label %18, label %20

18:                                               ; preds = %5
  %19 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #12, !alias.scope !70
  br label %45

20:                                               ; preds = %5
  %21 = icmp ugt i64 %2, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %23) #15
  unreachable

24:                                               ; preds = %20
  %25 = icmp ult i64 %2, 23
  br i1 %25, label %34, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %2, 16
  %28 = and i64 %27, -16
  %29 = tail call i8* @_Znwm(i64 %28) #16
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8, !alias.scope !70
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8, !alias.scope !70
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %33, align 8, !alias.scope !70
  br label %40

34:                                               ; preds = %24
  %35 = trunc i64 %2 to i8
  %36 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  store i8 %35, i8* %37, align 1, !alias.scope !70
  %38 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %39 = icmp eq i64 %2, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %34, %26
  %41 = phi i8* [ %29, %26 ], [ %38, %34 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %41, i8* nonnull align 1 %1, i64 %2, i1 false) #12
  br label %42

42:                                               ; preds = %40, %34
  %43 = phi i8* [ %38, %34 ], [ %41, %40 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %2
  store i8 0, i8* %44, align 1
  br label %45

45:                                               ; preds = %18, %42
  %46 = icmp eq i8* %3, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 0, i64 24, i1 false) #12, !alias.scope !73
  br label %74

49:                                               ; preds = %45
  %50 = icmp ugt i64 %4, -17
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %52) #15
  unreachable

53:                                               ; preds = %49
  %54 = icmp ult i64 %4, 23
  br i1 %54, label %63, label %55

55:                                               ; preds = %53
  %56 = add nuw i64 %4, 16
  %57 = and i64 %56, -16
  %58 = tail call i8* @_Znwm(i64 %57) #16
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %58, i8** %59, align 8, !alias.scope !73
  %60 = or i64 %57, -9223372036854775808
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %60, i64* %61, align 8, !alias.scope !73
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %4, i64* %62, align 8, !alias.scope !73
  br label %69

63:                                               ; preds = %53
  %64 = trunc i64 %4 to i8
  %65 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  store i8 %64, i8* %66, align 1, !alias.scope !73
  %67 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %68 = icmp eq i64 %4, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %63, %55
  %70 = phi i8* [ %58, %55 ], [ %67, %63 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %70, i8* nonnull align 1 %3, i64 %4, i1 false) #12
  br label %71

71:                                               ; preds = %69, %63
  %72 = phi i8* [ %67, %63 ], [ %70, %69 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 %4
  store i8 0, i8* %73, align 1
  br label %74

74:                                               ; preds = %47, %71
  call void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"* nonnull %6, %"class.std::__1::basic_string"* nonnull %7, %"class.std::__1::basic_string"* nonnull %8) #12
  %75 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %75, i64 0, i32 1, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  call void @_ZdlPv(i8* %81) #16
  br label %82

82:                                               ; preds = %74, %79
  %83 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %83, i64 0, i32 1, i32 0
  %85 = load i8, i8* %84, align 1
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  call void @_ZdlPv(i8* %89) #16
  br label %90

90:                                               ; preds = %82, %87
  %91 = call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* nonnull %6) #12
  %92 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 3
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %93, %91
  %95 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 2
  %96 = load i64, i64* %95, align 8
  %97 = icmp ugt i64 %96, %94
  br i1 %97, label %98, label %106

98:                                               ; preds = %90
  %99 = bitcast %"class.quic::QpackHeaderTableBase"* %0 to void (%"class.quic::QpackHeaderTableBase"*)***
  br label %100

100:                                              ; preds = %100, %98
  %101 = load void (%"class.quic::QpackHeaderTableBase"*)**, void (%"class.quic::QpackHeaderTableBase"*)*** %99, align 8
  %102 = getelementptr inbounds void (%"class.quic::QpackHeaderTableBase"*)*, void (%"class.quic::QpackHeaderTableBase"*)** %101, i64 3
  %103 = load void (%"class.quic::QpackHeaderTableBase"*)*, void (%"class.quic::QpackHeaderTableBase"*)** %102, align 8
  call void %103(%"class.quic::QpackHeaderTableBase"* %0) #12
  %104 = load i64, i64* %95, align 8
  %105 = icmp ugt i64 %104, %94
  br i1 %105, label %100, label %106

106:                                              ; preds = %100, %90
  %107 = phi i64 [ %96, %90 ], [ %104, %100 ]
  %108 = add i64 %107, %91
  store i64 %108, i64* %95, align 8
  %109 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %110 = bitcast %"class.spdy::HpackEntry"*** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %113 = bitcast %"class.spdy::HpackEntry"*** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = sub i64 %111, %114
  %116 = ashr exact i64 %115, 3
  %117 = icmp eq i64 %115, 0
  %118 = mul i64 %116, 85
  %119 = add i64 %118, -1
  %120 = select i1 %117, i64 0, i64 %119
  %121 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = load i64, i64* %12, align 8
  %124 = add i64 %123, %122
  %125 = icmp eq i64 %120, %124
  %126 = inttoptr i64 %114 to %"class.spdy::HpackEntry"**
  %127 = inttoptr i64 %111 to %"class.spdy::HpackEntry"**
  br i1 %125, label %128, label %134

128:                                              ; preds = %106
  call void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #12
  %129 = load i64, i64* %12, align 8
  %130 = load i64, i64* %121, align 8
  %131 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %112, align 8
  %132 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %109, align 8
  %133 = add i64 %130, %129
  br label %134

134:                                              ; preds = %128, %106
  %135 = phi i64 [ %133, %128 ], [ %124, %106 ]
  %136 = phi %"class.spdy::HpackEntry"** [ %132, %128 ], [ %127, %106 ]
  %137 = phi %"class.spdy::HpackEntry"** [ %131, %128 ], [ %126, %106 ]
  %138 = icmp eq %"class.spdy::HpackEntry"** %136, %137
  br i1 %138, label %145, label %139

139:                                              ; preds = %134
  %140 = udiv i64 %135, 85
  %141 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %137, i64 %140
  %142 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %141, align 8
  %143 = urem i64 %135, 85
  %144 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %142, i64 %143
  br label %145

145:                                              ; preds = %134, %139
  %146 = phi %"class.spdy::HpackEntry"* [ %144, %139 ], [ null, %134 ]
  %147 = bitcast %"class.spdy::HpackEntry"* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* nonnull align 8 %15, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #12
  %148 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %146, i64 0, i32 1
  %149 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %6, i64 0, i32 1
  %150 = bitcast %"class.std::__1::basic_string"* %148 to i8*
  %151 = bitcast %"class.std::__1::basic_string"* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 24, i1 false) #12
  %152 = load i64, i64* %12, align 8
  %153 = add i64 %152, 1
  store i64 %153, i64* %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %15) #12
  ret i64 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4quic23QpackEncoderHeaderTable15FindHeaderFieldEN4absl11string_viewES2_PbPm(%"class.quic::QpackEncoderHeaderTable"*, i8*, i64, i8*, i64, i8* nocapture, i64* nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.absl::string_view", align 8
  %9 = alloca %"struct.spdy::HpackLookupEntry", align 8
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %8, i64 0, i32 0
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %8, i64 0, i32 1
  store i64 %2, i64* %11, align 8
  %12 = bitcast %"struct.spdy::HpackLookupEntry"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #12
  %13 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %9, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %9, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %9, i64 0, i32 1, i32 0
  %16 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %9, i64 0, i32 1, i32 1
  %17 = bitcast %"class.absl::string_view"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* nonnull align 8 %17, i64 16, i1 false)
  store i8* %3, i8** %15, align 8
  store i64 %4, i64* %16, align 8
  %18 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 1
  %19 = bitcast %"class.absl::flat_hash_map"** %18 to %"class.absl::container_internal::raw_hash_set"**
  %20 = load %"class.absl::container_internal::raw_hash_set"*, %"class.absl::container_internal::raw_hash_set"** %19, align 8
  %21 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %22 = load i8*, i8** %13, align 8
  %23 = load i64, i64* %14, align 8
  %24 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %21, i8* %22, i64 %23) #12
  %25 = add i64 %24, %23
  %26 = zext i64 %25 to i128
  %27 = mul nuw i128 %26, 11376068507788127593
  %28 = lshr i128 %27, 64
  %29 = xor i128 %28, %27
  %30 = trunc i128 %29 to i64
  %31 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %30, i8* %3, i64 %4) #12
  %32 = add i64 %31, %4
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %20, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %9, i64 %37) #12
  %39 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %38, 0
  %40 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %38, 1
  %41 = icmp eq i8* %39, null
  br i1 %41, label %48, label %42

42:                                               ; preds = %7
  %43 = load i8, i8* %39, align 1
  %44 = icmp sgt i8 %43, -1
  br i1 %44, label %46, label %45, !prof !2

45:                                               ; preds = %42
  call void @llvm.trap() #12
  unreachable

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %40, i64 0, i32 0, i32 1
  br label %104

48:                                               ; preds = %7
  %49 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0
  %50 = load i8*, i8** %13, align 8
  %51 = load i64, i64* %14, align 8
  %52 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %21, i8* %50, i64 %51) #12
  %53 = add i64 %52, %51
  %54 = zext i64 %53 to i128
  %55 = mul nuw i128 %54, 11376068507788127593
  %56 = lshr i128 %55, 64
  %57 = xor i128 %56, %55
  %58 = trunc i128 %57 to i64
  %59 = load i8*, i8** %15, align 8
  %60 = load i64, i64* %16, align 8
  %61 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %58, i8* %59, i64 %60) #12
  %62 = add i64 %61, %60
  %63 = zext i64 %62 to i128
  %64 = mul nuw i128 %63, 11376068507788127593
  %65 = lshr i128 %64, 64
  %66 = xor i128 %65, %64
  %67 = trunc i128 %66 to i64
  %68 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %49, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %9, i64 %67) #12
  %69 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %68, 0
  %70 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %68, 1
  %71 = icmp eq i8* %69, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %48
  %73 = load i8, i8* %69, align 1
  %74 = icmp sgt i8 %73, -1
  br i1 %74, label %76, label %75, !prof !2

75:                                               ; preds = %72
  call void @llvm.trap() #12
  unreachable

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %70, i64 0, i32 0, i32 1
  br label %104

78:                                               ; preds = %48
  %79 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 2
  %80 = bitcast %"class.absl::flat_hash_map.18"** %79 to %"class.absl::container_internal::raw_hash_set.20"**
  %81 = load %"class.absl::container_internal::raw_hash_set.20"*, %"class.absl::container_internal::raw_hash_set.20"** %80, align 8
  %82 = call { i8*, %"union.absl::container_internal::map_slot_type.21"* } @_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_(%"class.absl::container_internal::raw_hash_set.20"* %81, %"class.absl::string_view"* nonnull dereferenceable(16) %8)
  %83 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %82, 0
  %84 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %82, 1
  %85 = icmp eq i8* %83, null
  br i1 %85, label %92, label %86

86:                                               ; preds = %78
  %87 = load i8, i8* %83, align 1
  %88 = icmp sgt i8 %87, -1
  br i1 %88, label %90, label %89, !prof !2

89:                                               ; preds = %86
  call void @llvm.trap() #12
  unreachable

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %84, i64 0, i32 0, i32 1
  br label %104

92:                                               ; preds = %78
  %93 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %94 = call { i8*, %"union.absl::container_internal::map_slot_type.21"* } @_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_(%"class.absl::container_internal::raw_hash_set.20"* %93, %"class.absl::string_view"* nonnull dereferenceable(16) %8)
  %95 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %94, 0
  %96 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %94, 1
  %97 = icmp eq i8* %95, null
  br i1 %97, label %109, label %98

98:                                               ; preds = %92
  %99 = load i8, i8* %95, align 1
  %100 = icmp sgt i8 %99, -1
  br i1 %100, label %102, label %101, !prof !2

101:                                              ; preds = %98
  call void @llvm.trap() #12
  unreachable

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %96, i64 0, i32 0, i32 1
  br label %104

104:                                              ; preds = %46, %76, %102, %90
  %105 = phi i64* [ %91, %90 ], [ %103, %102 ], [ %77, %76 ], [ %47, %46 ]
  %106 = phi i8 [ 1, %90 ], [ 0, %102 ], [ 0, %76 ], [ 1, %46 ]
  %107 = phi i32 [ 1, %90 ], [ 1, %102 ], [ 0, %76 ], [ 0, %46 ]
  %108 = load i64, i64* %105, align 8
  store i64 %108, i64* %6, align 8
  store i8 %106, i8* %5, align 1
  br label %109

109:                                              ; preds = %104, %92
  %110 = phi i32 [ 2, %92 ], [ %107, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #12
  ret i32 %110
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.21"* } @_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_(%"class.absl::container_internal::raw_hash_set.20"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #12
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %71, %2
  %32 = phi i64 [ %22, %2 ], [ %73, %71 ]
  %33 = phi i64 [ 0, %2 ], [ %72, %71 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %67, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %27, align 8
  br label %44

44:                                               ; preds = %60, %41
  %45 = phi i32 [ %42, %41 ], [ %62, %60 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #12, !range !21
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %29
  br i1 %55, label %56, label %60, !prof !76

56:                                               ; preds = %44
  br i1 %30, label %64, label %57

57:                                               ; preds = %56
  %58 = tail call i32 @bcmp(i8* %52, i8* %28, i64 %29) #12
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60, !prof !2

60:                                               ; preds = %57, %44
  %61 = add i32 %45, -1
  %62 = and i32 %61, %45
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %44

64:                                               ; preds = %57, %56
  %65 = getelementptr inbounds i8, i8* %16, i64 %49
  %66 = icmp ne i8* %65, null
  tail call void @llvm.assume(i1 %66) #12
  br label %74

67:                                               ; preds = %60, %31
  %68 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %71, label %74, !prof !77

71:                                               ; preds = %67
  %72 = add i64 %33, 16
  %73 = add i64 %72, %34
  br label %31

74:                                               ; preds = %67, %64
  %75 = phi %"union.absl::container_internal::map_slot_type.21"* [ %50, %64 ], [ undef, %67 ]
  %76 = phi i8* [ %65, %64 ], [ null, %67 ]
  %77 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } undef, i8* %76, 0
  %78 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %77, %"union.absl::container_internal::map_slot_type.21"* %75, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.21"* } %78
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic23QpackEncoderHeaderTable38MaxInsertSizeWithoutEvictingGivenEntryEm(%"class.quic::QpackEncoderHeaderTable"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = icmp ult i64 %7, %1
  %9 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 3
  %10 = load i64, i64* %9, align 8
  br i1 %8, label %62, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %10, %13
  %15 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %16 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %15, align 8
  %17 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = udiv i64 %18, 85
  %20 = urem i64 %18, 85
  %21 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %16, i64 %19
  %22 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %23 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %22, align 8
  %24 = icmp eq %"class.spdy::HpackEntry"** %23, %16
  br i1 %24, label %62, label %25

25:                                               ; preds = %11
  %26 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %21, align 8
  %27 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %26, i64 %20
  %28 = add i64 %4, %18
  %29 = udiv i64 %28, 85
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %16, i64 %29
  %31 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %30, align 8
  %32 = urem i64 %28, 85
  %33 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 %32
  %34 = icmp ne %"class.spdy::HpackEntry"* %33, %27
  %35 = icmp ult i64 %6, %1
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %62

37:                                               ; preds = %25, %55
  %38 = phi %"class.spdy::HpackEntry"* [ %58, %55 ], [ %27, %25 ]
  %39 = phi i64 [ %42, %55 ], [ %6, %25 ]
  %40 = phi i64 [ %44, %55 ], [ %14, %25 ]
  %41 = phi %"class.spdy::HpackEntry"** [ %57, %55 ], [ %21, %25 ]
  %42 = add nuw i64 %39, 1
  %43 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %38) #12
  %44 = add i64 %43, %40
  %45 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %38, i64 1
  %46 = ptrtoint %"class.spdy::HpackEntry"* %45 to i64
  %47 = bitcast %"class.spdy::HpackEntry"** %41 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = icmp eq i64 %49, 4080
  br i1 %50, label %51, label %55

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %41, i64 1
  %53 = bitcast %"class.spdy::HpackEntry"** %52 to i64*
  %54 = load i64, i64* %53, align 8
  br label %55

55:                                               ; preds = %37, %51
  %56 = phi i64 [ %54, %51 ], [ %46, %37 ]
  %57 = phi %"class.spdy::HpackEntry"** [ %52, %51 ], [ %41, %37 ]
  %58 = inttoptr i64 %56 to %"class.spdy::HpackEntry"*
  %59 = icmp ne %"class.spdy::HpackEntry"* %33, %58
  %60 = icmp ult i64 %42, %1
  %61 = and i1 %59, %60
  br i1 %61, label %37, label %62

62:                                               ; preds = %55, %11, %25, %2
  %63 = phi i64 [ %10, %2 ], [ %14, %25 ], [ %14, %11 ], [ %44, %55 ]
  ret i64 %63
}

declare i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic23QpackEncoderHeaderTable14draining_indexEf(%"class.quic::QpackEncoderHeaderTable"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = uitofp i64 %4 to float
  %6 = fmul float %5, %1
  %7 = fptoui float %6 to i64
  %8 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %4, %9
  %11 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ne i64 %12, 0
  %14 = icmp ult i64 %10, %7
  %15 = and i1 %13, %14
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %18 = load i64, i64* %17, align 8
  br label %81

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %20, align 8
  %22 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = udiv i64 %23, 85
  %25 = urem i64 %23, 85
  %26 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %21, i64 %24
  %27 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %28 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %27, align 8
  %29 = icmp eq %"class.spdy::HpackEntry"** %28, %21
  br i1 %29, label %34, label %30

30:                                               ; preds = %19
  %31 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %26, align 8
  %32 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 %25
  %33 = ptrtoint %"class.spdy::HpackEntry"* %32 to i64
  br label %34

34:                                               ; preds = %19, %30
  %35 = phi i64 [ %33, %30 ], [ 0, %19 ]
  %36 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %37 = load i64, i64* %36, align 8
  br label %38

38:                                               ; preds = %74, %34
  %39 = phi %"class.spdy::HpackEntry"** [ %26, %34 ], [ %59, %74 ]
  %40 = phi i64 [ %35, %34 ], [ %60, %74 ]
  %41 = phi i64 [ %10, %34 ], [ %47, %74 ]
  %42 = phi i64 [ %37, %34 ], [ %61, %74 ]
  %43 = icmp ult i64 %41, %7
  br i1 %43, label %44, label %81

44:                                               ; preds = %38
  %45 = inttoptr i64 %40 to %"class.spdy::HpackEntry"*
  %46 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %45) #12
  %47 = add i64 %46, %41
  %48 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %45, i64 1
  %49 = ptrtoint %"class.spdy::HpackEntry"* %48 to i64
  %50 = bitcast %"class.spdy::HpackEntry"** %39 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %49, %51
  %53 = icmp eq i64 %52, 4080
  br i1 %53, label %54, label %58

54:                                               ; preds = %44
  %55 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %39, i64 1
  %56 = bitcast %"class.spdy::HpackEntry"** %55 to i64*
  %57 = load i64, i64* %56, align 8
  br label %58

58:                                               ; preds = %44, %54
  %59 = phi %"class.spdy::HpackEntry"** [ %55, %54 ], [ %39, %44 ]
  %60 = phi i64 [ %57, %54 ], [ %49, %44 ]
  %61 = add i64 %42, 1
  %62 = load i64, i64* %11, align 8
  %63 = load i64, i64* %22, align 8
  %64 = add i64 %63, %62
  %65 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %20, align 8
  %66 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %27, align 8
  %67 = icmp eq %"class.spdy::HpackEntry"** %66, %65
  br i1 %67, label %74, label %68

68:                                               ; preds = %58
  %69 = udiv i64 %64, 85
  %70 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %65, i64 %69
  %71 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, align 8
  %72 = urem i64 %64, 85
  %73 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %71, i64 %72
  br label %74

74:                                               ; preds = %58, %68
  %75 = phi %"class.spdy::HpackEntry"* [ %73, %68 ], [ null, %58 ]
  %76 = inttoptr i64 %60 to %"class.spdy::HpackEntry"*
  %77 = icmp eq %"class.spdy::HpackEntry"* %75, %76
  br i1 %77, label %78, label %38

78:                                               ; preds = %74
  %79 = load i64, i64* %36, align 8
  %80 = add i64 %79, %62
  br label %81

81:                                               ; preds = %38, %78, %16
  %82 = phi i64 [ %18, %16 ], [ %80, %78 ], [ %42, %38 ]
  ret i64 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackEncoderHeaderTable18RemoveEntryFromEndEv(%"class.quic::QpackEncoderHeaderTable"*) unnamed_addr #2 align 2 {
  %2 = alloca %"struct.spdy::HpackLookupEntry", align 8
  %3 = alloca %"class.absl::string_view", align 8
  %4 = bitcast %"class.quic::QpackEncoderHeaderTable"* %0 to %"class.quic::QpackHeaderTableBase"*
  %5 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = udiv i64 %8, 85
  %10 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %6, i64 %9
  %11 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %10, align 8
  %12 = urem i64 %8, 85
  %13 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %12
  %14 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0
  %17 = bitcast %"struct.spdy::HpackLookupEntry"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #12
  %18 = bitcast %"class.spdy::HpackEntry"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %1
  %23 = zext i8 %20 to i64
  %24 = ptrtoint %"class.spdy::HpackEntry"* %13 to i64
  br label %32

25:                                               ; preds = %1
  %26 = bitcast %"class.spdy::HpackEntry"* %13 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %12, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp sgt i64 %29, -1
  br i1 %30, label %32, label %31, !prof !2

31:                                               ; preds = %25
  tail call void @llvm.trap() #12
  unreachable

32:                                               ; preds = %22, %25
  %33 = phi i64 [ %27, %25 ], [ %24, %22 ]
  %34 = phi i64 [ %29, %25 ], [ %23, %22 ]
  %35 = inttoptr i64 %33 to i8*
  %36 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %2, i64 0, i32 0, i32 0
  store i8* %35, i8** %36, align 8
  %37 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %2, i64 0, i32 0, i32 1
  store i64 %34, i64* %37, align 8
  %38 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %12, i32 1
  %39 = bitcast %"class.std::__1::basic_string"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %32
  %44 = zext i8 %41 to i64
  %45 = ptrtoint %"class.std::__1::basic_string"* %38 to i64
  br label %53

46:                                               ; preds = %32
  %47 = bitcast %"class.std::__1::basic_string"* %38 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %12, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp sgt i64 %50, -1
  br i1 %51, label %53, label %52, !prof !2

52:                                               ; preds = %46
  tail call void @llvm.trap() #12
  unreachable

53:                                               ; preds = %43, %46
  %54 = phi i64 [ %48, %46 ], [ %45, %43 ]
  %55 = phi i64 [ %50, %46 ], [ %44, %43 ]
  %56 = inttoptr i64 %54 to i8*
  %57 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %2, i64 0, i32 1, i32 0
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %2, i64 0, i32 1, i32 1
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %60 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %59, i8* %35, i64 %34) #12
  %61 = add i64 %60, %34
  %62 = zext i64 %61 to i128
  %63 = mul nuw i128 %62, 11376068507788127593
  %64 = lshr i128 %63, 64
  %65 = xor i128 %64, %63
  %66 = trunc i128 %65 to i64
  %67 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %66, i8* %56, i64 %55) #12
  %68 = add i64 %67, %55
  %69 = zext i64 %68 to i128
  %70 = mul nuw i128 %69, 11376068507788127593
  %71 = lshr i128 %70, 64
  %72 = xor i128 %71, %70
  %73 = trunc i128 %72 to i64
  %74 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %16, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %2, i64 %73) #12
  %75 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %74, 0
  %76 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %74, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #12
  %77 = icmp eq i8* %75, null
  br i1 %77, label %136, label %78

78:                                               ; preds = %53
  %79 = load i8, i8* %75, align 1
  %80 = icmp sgt i8 %79, -1
  br i1 %80, label %82, label %81, !prof !2

81:                                               ; preds = %78
  call void @llvm.trap() #12
  unreachable

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %76, i64 0, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %84, %15
  br i1 %85, label %86, label %136

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, -1
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %16, i64 0, i32 0
  %91 = bitcast %"class.absl::container_internal::raw_hash_set"* %16 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i8* %75 to i64
  %94 = sub i64 %93, %92
  %95 = add i64 %94, -16
  %96 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %97 = load i64, i64* %96, align 8
  %98 = and i64 %95, %97
  %99 = bitcast i8* %75 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = icmp eq <16 x i8> %100, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = bitcast <16 x i1> %101 to i16
  %103 = inttoptr i64 %92 to i8*
  %104 = getelementptr inbounds i8, i8* %103, i64 %98
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1
  %107 = icmp eq <16 x i8> %106, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %108 = bitcast <16 x i1> %107 to i16
  %109 = icmp ne i16 %108, 0
  %110 = icmp ne i16 %102, 0
  %111 = and i1 %110, %109
  br i1 %111, label %112, label %122

112:                                              ; preds = %86
  %113 = zext i16 %102 to i32
  %114 = zext i16 %108 to i32
  %115 = call i32 @llvm.cttz.i32(i32 %113, i1 false) #12, !range !21
  %116 = shl nuw i32 %114, 16
  %117 = call i32 @llvm.ctlz.i32(i32 %116, i1 false) #12, !range !21
  %118 = add nuw nsw i32 %117, %115
  %119 = icmp ult i32 %118, 16
  %120 = zext i1 %119 to i64
  %121 = select i1 %119, i8 -128, i8 -2
  br label %122

122:                                              ; preds = %86, %112
  %123 = phi i64 [ 0, %86 ], [ %120, %112 ]
  %124 = phi i8 [ -2, %86 ], [ %121, %112 ]
  %125 = getelementptr inbounds i8, i8* %103, i64 %94
  store i8 %124, i8* %125, align 1
  %126 = load i8*, i8** %90, align 8
  %127 = add i64 %94, -15
  %128 = load i64, i64* %96, align 8
  %129 = and i64 %128, %127
  %130 = and i64 %128, 15
  %131 = add i64 %129, %130
  %132 = getelementptr inbounds i8, i8* %126, i64 %131
  store i8 %124, i8* %132, align 1
  %133 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, %123
  store i64 %135, i64* %133, align 8
  br label %136

136:                                              ; preds = %53, %122, %82
  %137 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %138 = bitcast %"class.absl::string_view"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %138) #12
  %139 = load i8, i8* %19, align 1
  %140 = icmp slt i8 %139, 0
  br i1 %140, label %144, label %141

141:                                              ; preds = %136
  %142 = zext i8 %139 to i64
  %143 = ptrtoint %"class.spdy::HpackEntry"* %13 to i64
  br label %151

144:                                              ; preds = %136
  %145 = bitcast %"class.spdy::HpackEntry"* %13 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %12, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %148 = load i64, i64* %147, align 8
  %149 = icmp sgt i64 %148, -1
  br i1 %149, label %151, label %150, !prof !2

150:                                              ; preds = %144
  call void @llvm.trap() #12
  unreachable

151:                                              ; preds = %141, %144
  %152 = phi i64 [ %146, %144 ], [ %143, %141 ]
  %153 = phi i64 [ %148, %144 ], [ %142, %141 ]
  %154 = inttoptr i64 %152 to i8*
  %155 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %3, i64 0, i32 0
  store i8* %154, i8** %155, align 8
  %156 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %3, i64 0, i32 1
  store i64 %153, i64* %156, align 8
  %157 = call { i8*, %"union.absl::container_internal::map_slot_type.21"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_(%"class.absl::container_internal::raw_hash_set.20"* %137, %"class.absl::string_view"* nonnull dereferenceable(16) %3)
  %158 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %157, 0
  %159 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %157, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %138) #12
  %160 = icmp eq i8* %158, null
  br i1 %160, label %219, label %161

161:                                              ; preds = %151
  %162 = load i8, i8* %158, align 1
  %163 = icmp sgt i8 %162, -1
  br i1 %163, label %165, label %164, !prof !2

164:                                              ; preds = %161
  call void @llvm.trap() #12
  unreachable

165:                                              ; preds = %161
  %166 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %159, i64 0, i32 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = icmp eq i64 %167, %15
  br i1 %168, label %169, label %219

169:                                              ; preds = %165
  %170 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, -1
  store i64 %172, i64* %170, align 8
  %173 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %137, i64 0, i32 0
  %174 = bitcast %"class.absl::container_internal::raw_hash_set.20"* %137 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = ptrtoint i8* %158 to i64
  %177 = sub i64 %176, %175
  %178 = add i64 %177, -16
  %179 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %178, %180
  %182 = bitcast i8* %158 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = icmp eq <16 x i8> %183, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %185 = bitcast <16 x i1> %184 to i16
  %186 = inttoptr i64 %175 to i8*
  %187 = getelementptr inbounds i8, i8* %186, i64 %181
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1
  %190 = icmp eq <16 x i8> %189, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %191 = bitcast <16 x i1> %190 to i16
  %192 = icmp ne i16 %191, 0
  %193 = icmp ne i16 %185, 0
  %194 = and i1 %193, %192
  br i1 %194, label %195, label %205

195:                                              ; preds = %169
  %196 = zext i16 %185 to i32
  %197 = zext i16 %191 to i32
  %198 = call i32 @llvm.cttz.i32(i32 %196, i1 false) #12, !range !21
  %199 = shl nuw i32 %197, 16
  %200 = call i32 @llvm.ctlz.i32(i32 %199, i1 false) #12, !range !21
  %201 = add nuw nsw i32 %200, %198
  %202 = icmp ult i32 %201, 16
  %203 = zext i1 %202 to i64
  %204 = select i1 %202, i8 -128, i8 -2
  br label %205

205:                                              ; preds = %169, %195
  %206 = phi i64 [ 0, %169 ], [ %203, %195 ]
  %207 = phi i8 [ -2, %169 ], [ %204, %195 ]
  %208 = getelementptr inbounds i8, i8* %186, i64 %177
  store i8 %207, i8* %208, align 1
  %209 = load i8*, i8** %173, align 8
  %210 = add i64 %177, -15
  %211 = load i64, i64* %179, align 8
  %212 = and i64 %211, %210
  %213 = and i64 %211, 15
  %214 = add i64 %212, %213
  %215 = getelementptr inbounds i8, i8* %209, i64 %214
  store i8 %207, i8* %215, align 1
  %216 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %217 = load i64, i64* %216, align 8
  %218 = add i64 %217, %206
  store i64 %218, i64* %216, align 8
  br label %219

219:                                              ; preds = %151, %205, %165
  call void @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE18RemoveEntryFromEndEv(%"class.quic::QpackHeaderTableBase"* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.21"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_(%"class.absl::container_internal::raw_hash_set.20"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #12
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %71, %2
  %32 = phi i64 [ %22, %2 ], [ %73, %71 ]
  %33 = phi i64 [ 0, %2 ], [ %72, %71 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %67, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %27, align 8
  br label %44

44:                                               ; preds = %60, %41
  %45 = phi i32 [ %42, %41 ], [ %62, %60 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #12, !range !21
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %29
  br i1 %55, label %56, label %60, !prof !76

56:                                               ; preds = %44
  br i1 %30, label %64, label %57

57:                                               ; preds = %56
  %58 = tail call i32 @bcmp(i8* %52, i8* %28, i64 %29) #12
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60, !prof !2

60:                                               ; preds = %57, %44
  %61 = add i32 %45, -1
  %62 = and i32 %61, %45
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %44

64:                                               ; preds = %57, %56
  %65 = getelementptr inbounds i8, i8* %16, i64 %49
  %66 = icmp ne i8* %65, null
  tail call void @llvm.assume(i1 %66) #12
  br label %74

67:                                               ; preds = %60, %31
  %68 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %71, label %74, !prof !77

71:                                               ; preds = %67
  %72 = add i64 %33, 16
  %73 = add i64 %72, %34
  br label %31

74:                                               ; preds = %67, %64
  %75 = phi %"union.absl::container_internal::map_slot_type.21"* [ %50, %64 ], [ undef, %67 ]
  %76 = phi i8* [ %65, %64 ], [ null, %67 ]
  %77 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } undef, i8* %76, 0
  %78 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.21"* } %77, %"union.absl::container_internal::map_slot_type.21"* %75, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.21"* } %78
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEE18RemoveEntryFromEndEv(%"class.quic::QpackHeaderTableBase"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %3 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %4 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 85
  %7 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, i64 %6
  %8 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %7, align 8
  %9 = urem i64 %5, 85
  %10 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %8, i64 %9
  %11 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %10) #12
  %12 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %11
  store i64 %14, i64* %12, align 8
  %15 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %16 = load i64, i64* %4, align 8
  %17 = udiv i64 %16, 85
  %18 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %15, i64 %17
  %19 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %18, align 8
  %20 = urem i64 %16, 85
  %21 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %19, i64 %20
  %22 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %19, i64 %20, i32 1
  %23 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %1
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #16
  br label %30

30:                                               ; preds = %27, %1
  %31 = bitcast %"class.spdy::HpackEntry"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  tail call void @_ZdlPv(i8* %37) #16
  br label %38

38:                                               ; preds = %35, %30
  %39 = bitcast i64* %4 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 8
  %41 = add <2 x i64> %40, <i64 1, i64 -1>
  %42 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %42, align 8
  %43 = extractelement <2 x i64> %41, i32 0
  %44 = icmp ult i64 %43, 170
  br i1 %44, label %53, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.spdy::HpackEntry"*** %2 to i8***
  %47 = load i8**, i8*** %46, align 8
  %48 = load i8*, i8** %47, align 8
  tail call void @_ZdlPv(i8* %48) #16
  %49 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %50 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %49, i64 1
  store %"class.spdy::HpackEntry"** %50, %"class.spdy::HpackEntry"*** %2, align 8
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %51, -85
  store i64 %52, i64* %4, align 8
  br label %53

53:                                               ; preds = %38, %45
  %54 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 6
  %55 = load i64, i64* %54, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %54, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackDecoderHeaderTableC2Ev(%"class.quic::QpackDecoderHeaderTable"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.quiche::QuicheCircularDeque"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 73, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic23QpackDecoderHeaderTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %5 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 1
  %6 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4quic22ObtainQpackStaticTableEv() #12
  %7 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %6, i64 0, i32 0
  store %"class.std::__1::vector"* %7, %"class.std::__1::vector"** %5, align 8
  %8 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = bitcast %"class.std::__1::__tree_node_base"** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %9, %"class.std::__1::__tree_end_node"** %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackDecoderHeaderTableD2Ev(%"class.quic::QpackDecoderHeaderTable"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic23QpackDecoderHeaderTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %4, align 8
  %6 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %7 = icmp eq %"class.std::__1::__tree_end_node"* %5, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %61, %1
  %9 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %3, i64 0, i32 0
  %10 = bitcast %"class.std::__1::__tree_end_node"* %6 to %"class.std::__1::__tree_node"**
  %11 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %10, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %9, %"class.std::__1::__tree_node"* %11) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %12, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 1
  %16 = load i64, i64* %15, align 8
  tail call void @_ZNK6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque"* %12, i64 %14, i64 %16) #12
  %17 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %8
  %21 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 0
  %22 = bitcast %"class.spdy::HpackEntry"** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #16
  br label %24

24:                                               ; preds = %8, %20
  ret void

25:                                               ; preds = %1, %61
  %26 = phi %"class.std::__1::__tree_end_node"* [ %62, %61 ], [ %5, %1 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %26, i64 5
  %28 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.quic::QpackDecoderHeaderTable::Observer"**
  %29 = load %"class.quic::QpackDecoderHeaderTable::Observer"*, %"class.quic::QpackDecoderHeaderTable::Observer"** %28, align 8
  %30 = bitcast %"class.quic::QpackDecoderHeaderTable::Observer"* %29 to void (%"class.quic::QpackDecoderHeaderTable::Observer"*)***
  %31 = load void (%"class.quic::QpackDecoderHeaderTable::Observer"*)**, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)** %31, i64 3
  %33 = load void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)** %32, align 8
  tail call void %33(%"class.quic::QpackDecoderHeaderTable::Observer"* %29) #12
  %34 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %26, i64 1, i32 0
  %35 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %34, align 8
  %36 = icmp eq %"class.std::__1::__tree_node_base"* %35, null
  br i1 %36, label %37, label %45

37:                                               ; preds = %25
  %38 = bitcast %"class.std::__1::__tree_end_node"* %26 to %"class.std::__1::__tree_node_base"*
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %26, i64 2
  %40 = bitcast %"class.std::__1::__tree_end_node"* %39 to %"class.std::__1::__tree_end_node"**
  %41 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %41, i64 0, i32 0
  %43 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %42, align 8
  %44 = icmp eq %"class.std::__1::__tree_node_base"* %43, %38
  br i1 %44, label %61, label %52

45:                                               ; preds = %25, %45
  %46 = phi %"class.std::__1::__tree_node_base"* [ %48, %45 ], [ %35, %25 ]
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 0, i32 0
  %48 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %47, align 8
  %49 = icmp eq %"class.std::__1::__tree_node_base"* %48, null
  br i1 %49, label %50, label %45

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 0
  br label %61

52:                                               ; preds = %37, %52
  %53 = phi %"class.std::__1::__tree_end_node"** [ %56, %52 ], [ %40, %37 ]
  %54 = bitcast %"class.std::__1::__tree_end_node"** %53 to %"class.std::__1::__tree_node_base"**
  %55 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %55, i64 0, i32 2
  %57 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %56, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %57, i64 0, i32 0
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = icmp eq %"class.std::__1::__tree_node_base"* %59, %55
  br i1 %60, label %61, label %52

61:                                               ; preds = %52, %37, %50
  %62 = phi %"class.std::__1::__tree_end_node"* [ %51, %50 ], [ %41, %37 ], [ %57, %52 ]
  %63 = icmp eq %"class.std::__1::__tree_end_node"* %62, %6
  br i1 %63, label %8, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackDecoderHeaderTableD0Ev(%"class.quic::QpackDecoderHeaderTable"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4quic23QpackDecoderHeaderTableD2Ev(%"class.quic::QpackDecoderHeaderTable"* %0) #12
  %2 = bitcast %"class.quic::QpackDecoderHeaderTable"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic23QpackDecoderHeaderTable11InsertEntryEN4absl11string_viewES2_(%"class.quic::QpackDecoderHeaderTable"*, i8*, i64, i8*, i64) unnamed_addr #0 align 2 {
  %6 = bitcast %"class.quic::QpackDecoderHeaderTable"* %0 to %"class.quic::QpackHeaderTableBase.38"*
  %7 = tail call i64 @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESB_(%"class.quic::QpackHeaderTableBase.38"* %6, i8* %1, i64 %2, i8* %3, i64 %4)
  %8 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %8, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0
  %15 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 1
  %16 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 1
  %17 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %18 = bitcast %"class.std::__1::multimap"* %8 to i64*
  %19 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %20

20:                                               ; preds = %12, %70
  %21 = phi i64 [ %10, %12 ], [ %81, %70 ]
  %22 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %13, align 8
  %23 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 4
  %24 = bitcast %"class.std::__1::__tree_end_node"* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = load i64, i64* %15, align 8
  %28 = icmp ult i64 %27, %26
  br i1 %28, label %29, label %32

29:                                               ; preds = %20
  %30 = load i64, i64* %16, align 8
  %31 = add i64 %30, %27
  br label %32

32:                                               ; preds = %20, %29
  %33 = phi i64 [ %31, %29 ], [ %27, %20 ]
  %34 = sub i64 %33, %26
  %35 = load i64, i64* %17, align 8
  %36 = add i64 %34, %35
  %37 = icmp ugt i64 %25, %36
  br i1 %37, label %83, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 5
  %40 = bitcast %"class.std::__1::__tree_end_node"* %39 to %"class.quic::QpackDecoderHeaderTable::Observer"**
  %41 = load %"class.quic::QpackDecoderHeaderTable::Observer"*, %"class.quic::QpackDecoderHeaderTable::Observer"** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 1, i32 0
  %43 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %42, align 8
  %44 = icmp eq %"class.std::__1::__tree_node_base"* %43, null
  br i1 %44, label %45, label %53

45:                                               ; preds = %38
  %46 = bitcast %"class.std::__1::__tree_end_node"* %22 to %"class.std::__1::__tree_node_base"*
  %47 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 2
  %48 = bitcast %"class.std::__1::__tree_end_node"* %47 to %"class.std::__1::__tree_end_node"**
  %49 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %48, align 8
  %50 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %49, i64 0, i32 0
  %51 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %50, align 8
  %52 = icmp eq %"class.std::__1::__tree_node_base"* %51, %46
  br i1 %52, label %70, label %61

53:                                               ; preds = %38, %53
  %54 = phi %"class.std::__1::__tree_node_base"* [ %56, %53 ], [ %43, %38 ]
  %55 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %54, i64 0, i32 0, i32 0
  %56 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %55, align 8
  %57 = icmp eq %"class.std::__1::__tree_node_base"* %56, null
  br i1 %57, label %58, label %53

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %54, i64 0, i32 0
  %60 = bitcast %"class.std::__1::__tree_end_node"* %22 to %"class.std::__1::__tree_node_base"*
  br label %70

61:                                               ; preds = %45, %61
  %62 = phi %"class.std::__1::__tree_end_node"** [ %65, %61 ], [ %48, %45 ]
  %63 = bitcast %"class.std::__1::__tree_end_node"** %62 to %"class.std::__1::__tree_node_base"**
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %64, i64 0, i32 2
  %66 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %65, align 8
  %67 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %66, i64 0, i32 0
  %68 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %67, align 8
  %69 = icmp eq %"class.std::__1::__tree_node_base"* %68, %64
  br i1 %69, label %70, label %61

70:                                               ; preds = %61, %58, %45
  %71 = phi %"class.std::__1::__tree_node_base"* [ %60, %58 ], [ %46, %45 ], [ %46, %61 ]
  %72 = phi %"class.std::__1::__tree_end_node"* [ %59, %58 ], [ %49, %45 ], [ %66, %61 ]
  %73 = ptrtoint %"class.std::__1::__tree_end_node"* %72 to i64
  store i64 %73, i64* %18, align 8
  %74 = add i64 %21, -1
  store i64 %74, i64* %9, align 8
  %75 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %19, align 8
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %75, %"class.std::__1::__tree_node_base"* %71) #12
  %76 = bitcast %"class.std::__1::__tree_end_node"* %22 to i8*
  tail call void @_ZdlPv(i8* %76) #16
  %77 = bitcast %"class.quic::QpackDecoderHeaderTable::Observer"* %41 to void (%"class.quic::QpackDecoderHeaderTable::Observer"*)***
  %78 = load void (%"class.quic::QpackDecoderHeaderTable::Observer"*)**, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*** %77, align 8
  %79 = getelementptr inbounds void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)** %78, i64 2
  %80 = load void (%"class.quic::QpackDecoderHeaderTable::Observer"*)*, void (%"class.quic::QpackDecoderHeaderTable::Observer"*)** %79, align 8
  tail call void %80(%"class.quic::QpackDecoderHeaderTable::Observer"* %41) #12
  %81 = load i64, i64* %9, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %20

83:                                               ; preds = %70, %32, %5
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE11InsertEntryEN4absl11string_viewESB_(%"class.quic::QpackHeaderTableBase.38"*, i8*, i64, i8*, i64) unnamed_addr #0 comdat align 2 {
  %6 = alloca %"class.spdy::HpackEntry", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 6
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %11, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, %13
  br i1 %16, label %17, label %21

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %19, %15
  br label %21

21:                                               ; preds = %5, %17
  %22 = phi i64 [ %20, %17 ], [ %15, %5 ]
  %23 = sub i64 %10, %13
  %24 = add i64 %23, %22
  %25 = bitcast %"class.spdy::HpackEntry"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = icmp eq i8* %1, null
  %28 = bitcast %"class.spdy::HpackEntry"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 48, i1 false)
  br i1 %27, label %29, label %31

29:                                               ; preds = %21
  %30 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #12, !alias.scope !78
  br label %56

31:                                               ; preds = %21
  %32 = icmp ugt i64 %2, -17
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %34) #15
  unreachable

35:                                               ; preds = %31
  %36 = icmp ult i64 %2, 23
  br i1 %36, label %45, label %37

37:                                               ; preds = %35
  %38 = add nuw i64 %2, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #16
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %40, i8** %41, align 8, !alias.scope !78
  %42 = or i64 %39, -9223372036854775808
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %42, i64* %43, align 8, !alias.scope !78
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %44, align 8, !alias.scope !78
  br label %51

45:                                               ; preds = %35
  %46 = trunc i64 %2 to i8
  %47 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  store i8 %46, i8* %48, align 1, !alias.scope !78
  %49 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %50 = icmp eq i64 %2, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %45, %37
  %52 = phi i8* [ %40, %37 ], [ %49, %45 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %52, i8* nonnull align 1 %1, i64 %2, i1 false) #12
  br label %53

53:                                               ; preds = %51, %45
  %54 = phi i8* [ %49, %45 ], [ %52, %51 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %2
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %29, %53
  %57 = icmp eq i8* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 24, i1 false) #12, !alias.scope !81
  br label %85

60:                                               ; preds = %56
  %61 = icmp ugt i64 %4, -17
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %63) #15
  unreachable

64:                                               ; preds = %60
  %65 = icmp ult i64 %4, 23
  br i1 %65, label %74, label %66

66:                                               ; preds = %64
  %67 = add nuw i64 %4, 16
  %68 = and i64 %67, -16
  %69 = tail call i8* @_Znwm(i64 %68) #16
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %69, i8** %70, align 8, !alias.scope !81
  %71 = or i64 %68, -9223372036854775808
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %71, i64* %72, align 8, !alias.scope !81
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %4, i64* %73, align 8, !alias.scope !81
  br label %80

74:                                               ; preds = %64
  %75 = trunc i64 %4 to i8
  %76 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  store i8 %75, i8* %77, align 1, !alias.scope !81
  %78 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %79 = icmp eq i64 %4, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %74, %66
  %81 = phi i8* [ %69, %66 ], [ %78, %74 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %81, i8* nonnull align 1 %3, i64 %4, i1 false) #12
  br label %82

82:                                               ; preds = %80, %74
  %83 = phi i8* [ %78, %74 ], [ %81, %80 ]
  %84 = getelementptr inbounds i8, i8* %83, i64 %4
  store i8 0, i8* %84, align 1
  br label %85

85:                                               ; preds = %58, %82
  call void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"* nonnull %6, %"class.std::__1::basic_string"* nonnull %7, %"class.std::__1::basic_string"* nonnull %8) #12
  %86 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %87 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %86, i64 0, i32 1, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  call void @_ZdlPv(i8* %92) #16
  br label %93

93:                                               ; preds = %85, %90
  %94 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %94, i64 0, i32 1, i32 0
  %96 = load i8, i8* %95, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  call void @_ZdlPv(i8* %100) #16
  br label %101

101:                                              ; preds = %93, %98
  %102 = call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* nonnull %6) #12
  %103 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 3
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %104, %102
  %106 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 2
  %107 = load i64, i64* %106, align 8
  %108 = icmp ugt i64 %107, %105
  br i1 %108, label %109, label %117

109:                                              ; preds = %101
  %110 = bitcast %"class.quic::QpackHeaderTableBase.38"* %0 to void (%"class.quic::QpackHeaderTableBase.38"*)***
  br label %111

111:                                              ; preds = %111, %109
  %112 = load void (%"class.quic::QpackHeaderTableBase.38"*)**, void (%"class.quic::QpackHeaderTableBase.38"*)*** %110, align 8
  %113 = getelementptr inbounds void (%"class.quic::QpackHeaderTableBase.38"*)*, void (%"class.quic::QpackHeaderTableBase.38"*)** %112, i64 3
  %114 = load void (%"class.quic::QpackHeaderTableBase.38"*)*, void (%"class.quic::QpackHeaderTableBase.38"*)** %113, align 8
  call void %114(%"class.quic::QpackHeaderTableBase.38"* %0) #12
  %115 = load i64, i64* %106, align 8
  %116 = icmp ugt i64 %115, %105
  br i1 %116, label %111, label %117

117:                                              ; preds = %111, %101
  %118 = phi i64 [ %107, %101 ], [ %115, %111 ]
  %119 = add i64 %118, %102
  store i64 %119, i64* %106, align 8
  %120 = load i64, i64* %12, align 8
  %121 = load i64, i64* %14, align 8
  %122 = icmp ult i64 %121, %120
  %123 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = select i1 %122, i64 %124, i64 0
  %126 = sub i64 1, %120
  %127 = add i64 %126, %121
  %128 = add i64 %127, %125
  %129 = icmp eq i64 %124, 0
  %130 = add i64 %124, -1
  %131 = select i1 %129, i64 0, i64 %130
  %132 = icmp ult i64 %131, %128
  br i1 %132, label %133, label %141

133:                                              ; preds = %117
  %134 = lshr i64 %131, 2
  %135 = icmp ugt i64 %134, 3
  %136 = select i1 %135, i64 %134, i64 3
  %137 = add i64 %136, %131
  %138 = icmp ult i64 %128, %137
  %139 = select i1 %138, i64 %137, i64 %128
  call void @_ZN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque"* %11, i64 %139) #12
  %140 = load i64, i64* %14, align 8
  br label %141

141:                                              ; preds = %117, %133
  %142 = phi i64 [ %121, %117 ], [ %140, %133 ]
  %143 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 0
  %144 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %143, align 8
  %145 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %144, i64 %142
  %146 = bitcast %"class.spdy::HpackEntry"* %145 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* nonnull align 8 %25, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #12
  %147 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %144, i64 %142, i32 1
  %148 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %6, i64 0, i32 1
  %149 = bitcast %"class.std::__1::basic_string"* %147 to i8*
  %150 = bitcast %"class.std::__1::basic_string"* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 24, i1 false) #12
  %151 = load i64, i64* %14, align 8
  %152 = load i64, i64* %123, align 8
  %153 = add i64 %152, -1
  %154 = icmp eq i64 %153, %151
  %155 = add i64 %151, 1
  %156 = select i1 %154, i64 0, i64 %155
  store i64 %156, i64* %14, align 8
  %157 = bitcast %"class.spdy::HpackEntry"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %158 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %157, i64 0, i32 1, i32 0
  %159 = load i8, i8* %158, align 1
  %160 = icmp slt i8 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %141
  %162 = load i8*, i8** %26, align 8
  call void @_ZdlPv(i8* %162) #16
  br label %163

163:                                              ; preds = %141, %161
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %25) #12
  ret i64 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.spdy::HpackEntry"* @_ZNK4quic23QpackDecoderHeaderTable11LookupEntryEbm(%"class.quic::QpackDecoderHeaderTable"* nocapture readonly, i1 zeroext, i64) local_unnamed_addr #6 align 2 {
  br i1 %1, label %4, label %18

4:                                                ; preds = %3
  %5 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 1
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %8 = bitcast %"class.spdy::HpackEntry"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 48
  %14 = icmp ugt i64 %13, %2
  br i1 %14, label %15, label %51

15:                                               ; preds = %4
  %16 = inttoptr i64 %11 to %"class.spdy::HpackEntry"*
  %17 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %16, i64 %2
  br label %51

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 6
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %20, %2
  br i1 %21, label %51, label %22

22:                                               ; preds = %18
  %23 = sub i64 %2, %20
  %24 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %27, %25
  br i1 %28, label %29, label %33

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %27
  br label %33

33:                                               ; preds = %22, %29
  %34 = phi i64 [ %32, %29 ], [ %27, %22 ]
  %35 = sub i64 %34, %25
  %36 = icmp ult i64 %23, %35
  br i1 %36, label %37, label %51

37:                                               ; preds = %33
  %38 = add i64 %25, %23
  %39 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 0
  %44 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %43, align 8
  %45 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %44, i64 %38
  br label %51

46:                                               ; preds = %37
  %47 = sub i64 %38, %40
  %48 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 2, i32 0
  %49 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %48, align 8
  %50 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %49, i64 %47
  br label %51

51:                                               ; preds = %46, %42, %33, %18, %4, %15
  %52 = phi %"class.spdy::HpackEntry"* [ %17, %15 ], [ null, %4 ], [ null, %18 ], [ null, %33 ], [ %45, %42 ], [ %50, %46 ]
  ret %"class.spdy::HpackEntry"* %52
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackDecoderHeaderTable16RegisterObserverEmPNS0_8ObserverE(%"class.quic::QpackDecoderHeaderTable"*, i64, %"class.quic::QpackDecoderHeaderTable::Observer"*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.quic::QpackDecoderHeaderTable::Observer"* %2 to i64
  %5 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2
  %6 = tail call i8* @_Znwm(i64 48) #16, !noalias !84
  %7 = getelementptr inbounds i8, i8* %6, i64 32
  %8 = bitcast i8* %7 to i64*
  store i64 %1, i64* %8, align 8, !noalias !84
  %9 = getelementptr inbounds i8, i8* %6, i64 40
  %10 = bitcast i8* %9 to i64*
  store i64 %4, i64* %10, align 8, !noalias !84
  %11 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %12 = bitcast %"class.std::__1::__tree_end_node"* %11 to %"class.std::__1::__tree_node"**
  %13 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node"* %13, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %3, %34
  %16 = phi %"class.std::__1::__tree_node"* [ %36, %34 ], [ %13, %3 ]
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 1, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, %1
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %21, align 8
  %23 = icmp eq %"class.std::__1::__tree_node_base"* %22, null
  br i1 %23, label %24, label %34

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 0
  br label %39

27:                                               ; preds = %15
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 1
  %29 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %28, align 8
  %30 = icmp eq %"class.std::__1::__tree_node_base"* %29, null
  br i1 %30, label %31, label %34

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %16, i64 0, i32 0, i32 0
  br label %39

34:                                               ; preds = %27, %20
  %35 = phi %"class.std::__1::__tree_node_base"* [ %22, %20 ], [ %29, %27 ]
  %36 = bitcast %"class.std::__1::__tree_node_base"* %35 to %"class.std::__1::__tree_node"*
  br label %15

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %11, i64 0, i32 0
  br label %39

39:                                               ; preds = %37, %31, %24
  %40 = phi %"class.std::__1::__tree_end_node"* [ %11, %37 ], [ %26, %24 ], [ %33, %31 ]
  %41 = phi %"class.std::__1::__tree_node_base"** [ %38, %37 ], [ %25, %24 ], [ %32, %31 ]
  %42 = bitcast i8* %6 to %"class.std::__1::__tree_node_base"*
  %43 = getelementptr inbounds i8, i8* %6, i64 16
  %44 = bitcast i8* %43 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %40, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_node_base"** %41 to i8**
  store i8* %6, i8** %45, align 8
  %46 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %5, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %46, align 8
  %48 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %47, i64 0, i32 0
  %49 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %48, align 8
  %50 = icmp eq %"class.std::__1::__tree_node_base"* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %39
  %52 = ptrtoint %"class.std::__1::__tree_node_base"* %49 to i64
  %53 = bitcast %"class.std::__1::multimap"* %5 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %41, align 8
  br label %55

55:                                               ; preds = %39, %51
  %56 = phi %"class.std::__1::__tree_node_base"* [ %42, %39 ], [ %54, %51 ]
  %57 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %58 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %57, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %58, %"class.std::__1::__tree_node_base"* %56) #12
  %59 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %59, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QpackDecoderHeaderTable18UnregisterObserverEmPNS0_8ObserverE(%"class.quic::QpackDecoderHeaderTable"*, i64, %"class.quic::QpackDecoderHeaderTable::Observer"* readnone) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %6 = bitcast %"class.std::__1::__tree_end_node"* %5 to %"class.std::__1::__tree_node"**
  %7 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %6, align 8
  %8 = icmp eq %"class.std::__1::__tree_node"* %7, null
  %9 = bitcast %"class.std::__1::__tree_node"* %7 to %"class.std::__1::__tree_node_base"*
  br i1 %8, label %107, label %10

10:                                               ; preds = %3, %10
  %11 = phi %"class.std::__1::__tree_end_node"* [ %21, %10 ], [ %5, %3 ]
  %12 = phi %"class.std::__1::__tree_node"* [ %22, %10 ], [ %7, %3 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 1, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, %1
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::__tree_node_base"** %16 to %"class.std::__1::__tree_node"**
  %18 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %12, i64 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::__tree_node"* %12 to %"class.std::__1::__tree_node"**
  %20 = select i1 %15, %"class.std::__1::__tree_node"** %17, %"class.std::__1::__tree_node"** %19
  %21 = select i1 %15, %"class.std::__1::__tree_end_node"* %11, %"class.std::__1::__tree_end_node"* %18
  %22 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %20, align 8
  %23 = icmp eq %"class.std::__1::__tree_node"* %22, null
  br i1 %23, label %24, label %10

24:                                               ; preds = %10
  %25 = icmp eq %"class.std::__1::__tree_end_node"* %21, %5
  br i1 %25, label %107, label %26

26:                                               ; preds = %24, %104
  %27 = phi %"class.std::__1::__tree_end_node"* [ %105, %104 ], [ %21, %24 ]
  %28 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 4
  %29 = bitcast %"class.std::__1::__tree_end_node"* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, %1
  br i1 %31, label %32, label %107

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 5
  %34 = bitcast %"class.std::__1::__tree_end_node"* %33 to %"class.quic::QpackDecoderHeaderTable::Observer"**
  %35 = load %"class.quic::QpackDecoderHeaderTable::Observer"*, %"class.quic::QpackDecoderHeaderTable::Observer"** %34, align 8
  %36 = icmp eq %"class.quic::QpackDecoderHeaderTable::Observer"* %35, %2
  %37 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 1, i32 0
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = icmp eq %"class.std::__1::__tree_node_base"* %38, null
  br i1 %36, label %40, label %79

40:                                               ; preds = %32
  br i1 %39, label %41, label %49

41:                                               ; preds = %40
  %42 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node_base"*
  %43 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 2
  %44 = bitcast %"class.std::__1::__tree_end_node"* %43 to %"class.std::__1::__tree_end_node"**
  %45 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %45, i64 0, i32 0
  %47 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %46, align 8
  %48 = icmp eq %"class.std::__1::__tree_node_base"* %47, %42
  br i1 %48, label %65, label %56

49:                                               ; preds = %40, %49
  %50 = phi %"class.std::__1::__tree_node_base"* [ %52, %49 ], [ %38, %40 ]
  %51 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %51, align 8
  %53 = icmp eq %"class.std::__1::__tree_node_base"* %52, null
  br i1 %53, label %54, label %49

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %50, i64 0, i32 0
  br label %65

56:                                               ; preds = %41, %56
  %57 = phi %"class.std::__1::__tree_end_node"** [ %60, %56 ], [ %44, %41 ]
  %58 = bitcast %"class.std::__1::__tree_end_node"** %57 to %"class.std::__1::__tree_node_base"**
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %59, i64 0, i32 2
  %61 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %61, i64 0, i32 0
  %63 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %62, align 8
  %64 = icmp eq %"class.std::__1::__tree_node_base"* %63, %59
  br i1 %64, label %65, label %56

65:                                               ; preds = %56, %54, %41
  %66 = phi %"class.std::__1::__tree_end_node"* [ %55, %54 ], [ %45, %41 ], [ %61, %56 ]
  %67 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %4, i64 0, i32 0, i32 0
  %68 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %67, align 8
  %69 = icmp eq %"class.std::__1::__tree_end_node"* %68, %27
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = ptrtoint %"class.std::__1::__tree_end_node"* %66 to i64
  %72 = bitcast %"class.std::__1::multimap"* %4 to i64*
  store i64 %71, i64* %72, align 8
  br label %73

73:                                               ; preds = %65, %70
  %74 = getelementptr inbounds %"class.quic::QpackDecoderHeaderTable", %"class.quic::QpackDecoderHeaderTable"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* nonnull %9, %"class.std::__1::__tree_node_base"* %77) #12
  %78 = bitcast %"class.std::__1::__tree_end_node"* %27 to i8*
  tail call void @_ZdlPv(i8* %78) #16
  br label %107

79:                                               ; preds = %32
  br i1 %39, label %80, label %88

80:                                               ; preds = %79
  %81 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node_base"*
  %82 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 2
  %83 = bitcast %"class.std::__1::__tree_end_node"* %82 to %"class.std::__1::__tree_end_node"**
  %84 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %84, i64 0, i32 0
  %86 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %85, align 8
  %87 = icmp eq %"class.std::__1::__tree_node_base"* %86, %81
  br i1 %87, label %104, label %95

88:                                               ; preds = %79, %88
  %89 = phi %"class.std::__1::__tree_node_base"* [ %91, %88 ], [ %38, %79 ]
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %89, i64 0, i32 0, i32 0
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %90, align 8
  %92 = icmp eq %"class.std::__1::__tree_node_base"* %91, null
  br i1 %92, label %93, label %88

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %89, i64 0, i32 0
  br label %104

95:                                               ; preds = %80, %95
  %96 = phi %"class.std::__1::__tree_end_node"** [ %99, %95 ], [ %83, %80 ]
  %97 = bitcast %"class.std::__1::__tree_end_node"** %96 to %"class.std::__1::__tree_node_base"**
  %98 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %97, align 8
  %99 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %98, i64 0, i32 2
  %100 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %99, align 8
  %101 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %100, i64 0, i32 0
  %102 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %101, align 8
  %103 = icmp eq %"class.std::__1::__tree_node_base"* %102, %98
  br i1 %103, label %104, label %95

104:                                              ; preds = %95, %80, %93
  %105 = phi %"class.std::__1::__tree_end_node"* [ %94, %93 ], [ %84, %80 ], [ %100, %95 ]
  %106 = icmp eq %"class.std::__1::__tree_end_node"* %105, %5
  br i1 %106, label %107, label %26

107:                                              ; preds = %26, %104, %3, %24, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic23QpackEncoderHeaderTableD2Ev(%"class.quic::QpackEncoderHeaderTable"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic23QpackEncoderHeaderTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type.21"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #12
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %17, align 8
  %19 = bitcast %"union.absl::container_internal::map_slot_type"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #12
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.quic::QpackEncoderHeaderTable"* %0 to %"class.quic::QpackHeaderTableBase"*
  tail call void @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED2Ev(%"class.quic::QpackHeaderTableBase"* %21) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic23QpackEncoderHeaderTableD0Ev(%"class.quic::QpackEncoderHeaderTable"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic23QpackEncoderHeaderTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type.21"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #12
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %17, align 8
  %19 = bitcast %"union.absl::container_internal::map_slot_type"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #12
  br label %20

20:                                               ; preds = %11, %15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %21 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %21) #12
  %22 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %22, align 8
  %24 = getelementptr inbounds %"class.quic::QpackEncoderHeaderTable", %"class.quic::QpackEncoderHeaderTable"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %25 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %24, align 8
  %26 = icmp eq %"class.spdy::HpackEntry"** %23, %25
  br i1 %26, label %45, label %27

27:                                               ; preds = %20, %27
  %28 = phi %"class.spdy::HpackEntry"** [ %31, %27 ], [ %23, %20 ]
  %29 = bitcast %"class.spdy::HpackEntry"** %28 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZdlPv(i8* %30) #16
  %31 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %28, i64 1
  %32 = icmp eq %"class.spdy::HpackEntry"** %31, %25
  br i1 %32, label %33, label %27

33:                                               ; preds = %27
  %34 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %22, align 8
  %35 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %24, align 8
  %36 = icmp eq %"class.spdy::HpackEntry"** %35, %34
  br i1 %36, label %45, label %37

37:                                               ; preds = %33
  %38 = ptrtoint %"class.spdy::HpackEntry"** %34 to i64
  %39 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 -1
  %40 = ptrtoint %"class.spdy::HpackEntry"** %39 to i64
  %41 = sub i64 %40, %38
  %42 = lshr i64 %41, 3
  %43 = xor i64 %42, -1
  %44 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 %43
  store %"class.spdy::HpackEntry"** %44, %"class.spdy::HpackEntry"*** %24, align 8
  br label %45

45:                                               ; preds = %37, %33, %20
  %46 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %21, i64 0, i32 0, i32 0
  %47 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %46, align 8
  %48 = icmp eq %"class.spdy::HpackEntry"** %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %45
  %50 = bitcast %"class.spdy::HpackEntry"** %47 to i8*
  tail call void @_ZdlPv(i8* %50) #16
  br label %51

51:                                               ; preds = %45, %49
  %52 = bitcast %"class.quic::QpackEncoderHeaderTable"* %0 to i8*
  tail call void @_ZdlPv(i8* %52) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEE18RemoveEntryFromEndEv(%"class.quic::QpackHeaderTableBase.38"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 0
  %5 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %4, align 8
  %6 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %5, i64 %3
  %7 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %6) #12
  %8 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  store i64 %10, i64* %8, align 8
  %11 = load i64, i64* %2, align 8
  %12 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %4, align 8
  %13 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %12, i64 %11
  %14 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %12, i64 %11, i32 1
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %1
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void @_ZdlPv(i8* %21) #16
  br label %22

22:                                               ; preds = %19, %1
  %23 = bitcast %"class.spdy::HpackEntry"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #16
  br label %30

30:                                               ; preds = %22, %27
  %31 = load i64, i64* %2, align 8
  %32 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, -1
  %35 = icmp eq i64 %34, %31
  %36 = add i64 %31, 1
  %37 = select i1 %35, i64 0, i64 %36
  store i64 %37, i64* %2, align 8
  %38 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 6
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED2Ev(%"class.quic::QpackHeaderTableBase.38"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 1
  %7 = load i64, i64* %6, align 8
  tail call void @_ZNK6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque"* %3, i64 %5, i64 %7) #12
  %8 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 0
  %13 = bitcast %"class.spdy::HpackEntry"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #16
  br label %15

15:                                               ; preds = %1, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEED0Ev(%"class.quic::QpackHeaderTableBase.38"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseIN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 1
  %7 = load i64, i64* %6, align 8
  tail call void @_ZNK6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque"* %3, i64 %5, i64 %7) #12
  %8 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.quic::QpackHeaderTableBase.38", %"class.quic::QpackHeaderTableBase.38"* %0, i64 0, i32 1, i32 2, i32 0
  %13 = bitcast %"class.spdy::HpackEntry"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #16
  br label %15

15:                                               ; preds = %1, %11
  %16 = bitcast %"class.quic::QpackHeaderTableBase.38"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE12DestroyRangeEmm(%"class.quiche::QuicheCircularDeque"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ult i64 %2, %1
  br i1 %4, label %32, label %5

5:                                                ; preds = %3
  %6 = icmp eq i64 %1, %2
  br i1 %6, label %88, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  br label %9

9:                                                ; preds = %29, %7
  %10 = phi i64 [ %1, %7 ], [ %30, %29 ]
  %11 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %8, align 8
  %12 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %10
  %13 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %11, i64 %10, i32 1
  %14 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void @_ZdlPv(i8* %20) #16
  br label %21

21:                                               ; preds = %18, %9
  %22 = bitcast %"class.spdy::HpackEntry"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZdlPv(i8* %28) #16
  br label %29

29:                                               ; preds = %26, %21
  %30 = add i64 %10, 1
  %31 = icmp eq i64 %30, %2
  br i1 %31, label %88, label %9

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %61, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  br label %38

38:                                               ; preds = %58, %36
  %39 = phi i64 [ %1, %36 ], [ %59, %58 ]
  %40 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %37, align 8
  %41 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %40, i64 %39
  %42 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %40, i64 %39, i32 1
  %43 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  tail call void @_ZdlPv(i8* %49) #16
  br label %50

50:                                               ; preds = %47, %38
  %51 = bitcast %"class.spdy::HpackEntry"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  tail call void @_ZdlPv(i8* %57) #16
  br label %58

58:                                               ; preds = %55, %50
  %59 = add i64 %39, 1
  %60 = icmp eq i64 %59, %34
  br i1 %60, label %61, label %38

61:                                               ; preds = %58, %32
  %62 = icmp eq i64 %2, 0
  br i1 %62, label %88, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  br label %65

65:                                               ; preds = %85, %63
  %66 = phi i64 [ 0, %63 ], [ %86, %85 ]
  %67 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %64, align 8
  %68 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %67, i64 %66
  %69 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %67, i64 %66, i32 1
  %70 = bitcast %"class.std::__1::basic_string"* %69 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  tail call void @_ZdlPv(i8* %76) #16
  br label %77

77:                                               ; preds = %74, %65
  %78 = bitcast %"class.spdy::HpackEntry"* %68 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %78, i64 0, i32 1, i32 0
  %80 = load i8, i8* %79, align 1
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  tail call void @_ZdlPv(i8* %84) #16
  br label %85

85:                                               ; preds = %82, %77
  %86 = add nuw i64 %66, 1
  %87 = icmp eq i64 %86, %2
  br i1 %87, label %88, label %65

88:                                               ; preds = %29, %85, %61, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED2Ev(%"class.quic::QpackHeaderTableBase"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %3) #12
  %4 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %5 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %4, align 8
  %6 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %7 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %8 = icmp eq %"class.spdy::HpackEntry"** %5, %7
  br i1 %8, label %27, label %9

9:                                                ; preds = %1, %9
  %10 = phi %"class.spdy::HpackEntry"** [ %13, %9 ], [ %5, %1 ]
  %11 = bitcast %"class.spdy::HpackEntry"** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #16
  %13 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %10, i64 1
  %14 = icmp eq %"class.spdy::HpackEntry"** %13, %7
  br i1 %14, label %15, label %9

15:                                               ; preds = %9
  %16 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %4, align 8
  %17 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %18 = icmp eq %"class.spdy::HpackEntry"** %17, %16
  br i1 %18, label %27, label %19

19:                                               ; preds = %15
  %20 = ptrtoint %"class.spdy::HpackEntry"** %16 to i64
  %21 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %17, i64 -1
  %22 = ptrtoint %"class.spdy::HpackEntry"** %21 to i64
  %23 = sub i64 %22, %20
  %24 = lshr i64 %23, 3
  %25 = xor i64 %24, -1
  %26 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %17, i64 %25
  store %"class.spdy::HpackEntry"** %26, %"class.spdy::HpackEntry"*** %6, align 8
  br label %27

27:                                               ; preds = %19, %15, %1
  %28 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %3, i64 0, i32 0, i32 0
  %29 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %28, align 8
  %30 = icmp eq %"class.spdy::HpackEntry"** %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = bitcast %"class.spdy::HpackEntry"** %29 to i8*
  tail call void @_ZdlPv(i8* %32) #16
  br label %33

33:                                               ; preds = %27, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEED0Ev(%"class.quic::QpackHeaderTableBase"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4quic20QpackHeaderTableBaseINSt3__15dequeIN4spdy10HpackEntryENS1_9allocatorIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %3) #12
  %4 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %5 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %4, align 8
  %6 = getelementptr inbounds %"class.quic::QpackHeaderTableBase", %"class.quic::QpackHeaderTableBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %7 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %8 = icmp eq %"class.spdy::HpackEntry"** %5, %7
  br i1 %8, label %27, label %9

9:                                                ; preds = %1, %9
  %10 = phi %"class.spdy::HpackEntry"** [ %13, %9 ], [ %5, %1 ]
  %11 = bitcast %"class.spdy::HpackEntry"** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #16
  %13 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %10, i64 1
  %14 = icmp eq %"class.spdy::HpackEntry"** %13, %7
  br i1 %14, label %15, label %9

15:                                               ; preds = %9
  %16 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %4, align 8
  %17 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %18 = icmp eq %"class.spdy::HpackEntry"** %17, %16
  br i1 %18, label %27, label %19

19:                                               ; preds = %15
  %20 = ptrtoint %"class.spdy::HpackEntry"** %16 to i64
  %21 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %17, i64 -1
  %22 = ptrtoint %"class.spdy::HpackEntry"** %21 to i64
  %23 = sub i64 %22, %20
  %24 = lshr i64 %23, 3
  %25 = xor i64 %24, -1
  %26 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %17, i64 %25
  store %"class.spdy::HpackEntry"** %26, %"class.spdy::HpackEntry"*** %6, align 8
  br label %27

27:                                               ; preds = %19, %15, %1
  %28 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %3, i64 0, i32 0, i32 0
  %29 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %28, align 8
  %30 = icmp eq %"class.spdy::HpackEntry"** %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = bitcast %"class.spdy::HpackEntry"** %29 to i8*
  tail call void @_ZdlPv(i8* %32) #16
  br label %33

33:                                               ; preds = %27, %31
  %34 = bitcast %"class.quic::QpackHeaderTableBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %34) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 85
  %7 = urem i64 %5, 85
  %8 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, i64 %6
  %9 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %10 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %9, align 8
  %11 = icmp eq %"class.spdy::HpackEntry"** %10, %3
  %12 = ptrtoint %"class.spdy::HpackEntry"** %10 to i64
  %13 = ptrtoint %"class.spdy::HpackEntry"** %3 to i64
  %14 = bitcast %"class.spdy::HpackEntry"** %3 to i8**
  br i1 %11, label %15, label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

17:                                               ; preds = %1
  %18 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %8, align 8
  %19 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %18, i64 %7
  %20 = ptrtoint %"class.spdy::HpackEntry"* %19 to i64
  %21 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %5
  %24 = udiv i64 %23, 85
  %25 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, i64 %24
  %26 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %27 = urem i64 %23, 85
  %28 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %26, i64 %27
  br label %29

29:                                               ; preds = %15, %17
  %30 = phi i64* [ %21, %17 ], [ %16, %15 ]
  %31 = phi i64 [ %20, %17 ], [ 0, %15 ]
  %32 = phi %"class.spdy::HpackEntry"* [ %28, %17 ], [ null, %15 ]
  %33 = inttoptr i64 %31 to %"class.spdy::HpackEntry"*
  %34 = icmp eq %"class.spdy::HpackEntry"* %32, %33
  br i1 %34, label %35, label %51

35:                                               ; preds = %29
  %36 = bitcast %"class.spdy::HpackEntry"*** %9 to i64*
  br label %43

37:                                               ; preds = %82
  %38 = bitcast %"class.spdy::HpackEntry"*** %9 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.spdy::HpackEntry"*** %2 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = inttoptr i64 %41 to i8**
  br label %43

43:                                               ; preds = %35, %37
  %44 = phi i64* [ %36, %35 ], [ %38, %37 ]
  %45 = phi i8** [ %14, %35 ], [ %42, %37 ]
  %46 = phi i64 [ %13, %35 ], [ %41, %37 ]
  %47 = phi i64 [ %12, %35 ], [ %39, %37 ]
  store i64 0, i64* %30, align 8
  %48 = sub i64 %47, %46
  %49 = ashr exact i64 %48, 3
  %50 = icmp ugt i64 %49, 2
  br i1 %50, label %87, label %98

51:                                               ; preds = %29, %82
  %52 = phi %"class.spdy::HpackEntry"* [ %85, %82 ], [ %33, %29 ]
  %53 = phi %"class.spdy::HpackEntry"** [ %84, %82 ], [ %8, %29 ]
  %54 = phi i64 [ %83, %82 ], [ %31, %29 ]
  %55 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 0, i32 1
  %56 = bitcast %"class.std::__1::basic_string"* %55 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %51
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  tail call void @_ZdlPv(i8* %62) #16
  br label %63

63:                                               ; preds = %60, %51
  %64 = inttoptr i64 %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  tail call void @_ZdlPv(i8* %70) #16
  br label %71

71:                                               ; preds = %63, %68
  %72 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 1
  %73 = ptrtoint %"class.spdy::HpackEntry"* %72 to i64
  %74 = bitcast %"class.spdy::HpackEntry"** %53 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %73, %75
  %77 = icmp eq i64 %76, 4080
  br i1 %77, label %78, label %82

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 1
  %80 = bitcast %"class.spdy::HpackEntry"** %79 to i64*
  %81 = load i64, i64* %80, align 8
  br label %82

82:                                               ; preds = %71, %78
  %83 = phi i64 [ %81, %78 ], [ %73, %71 ]
  %84 = phi %"class.spdy::HpackEntry"** [ %79, %78 ], [ %53, %71 ]
  %85 = inttoptr i64 %83 to %"class.spdy::HpackEntry"*
  %86 = icmp eq %"class.spdy::HpackEntry"* %32, %85
  br i1 %86, label %37, label %51

87:                                               ; preds = %43, %87
  %88 = phi i8** [ %97, %87 ], [ %45, %43 ]
  %89 = load i8*, i8** %88, align 8
  tail call void @_ZdlPv(i8* %89) #16
  %90 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %91 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  store %"class.spdy::HpackEntry"** %91, %"class.spdy::HpackEntry"*** %2, align 8
  %92 = load i64, i64* %44, align 8
  %93 = ptrtoint %"class.spdy::HpackEntry"** %91 to i64
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = icmp ugt i64 %95, 2
  %97 = bitcast %"class.spdy::HpackEntry"** %91 to i8**
  br i1 %96, label %87, label %98

98:                                               ; preds = %87, %43
  %99 = phi i64 [ %49, %43 ], [ %95, %87 ]
  switch i64 %99, label %103 [
    i64 1, label %101
    i64 2, label %100
  ]

100:                                              ; preds = %98
  br label %101

101:                                              ; preds = %98, %100
  %102 = phi i64 [ 85, %100 ], [ 42, %98 ]
  store i64 %102, i64* %4, align 8
  br label %103

103:                                              ; preds = %101, %98
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.spdy::HpackEntry"*, align 8
  %3 = alloca %"class.spdy::HpackEntry"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.55", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 84
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -85
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  %12 = bitcast %"class.spdy::HpackEntry"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, i64 1
  store %"class.spdy::HpackEntry"** %14, %"class.spdy::HpackEntry"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %17, align 8
  %19 = icmp eq %"class.spdy::HpackEntry"** %16, %18
  %20 = ptrtoint %"class.spdy::HpackEntry"** %18 to i64
  %21 = bitcast %"class.spdy::HpackEntry"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %23, align 8
  %25 = icmp ugt %"class.spdy::HpackEntry"** %14, %24
  %26 = ptrtoint %"class.spdy::HpackEntry"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"class.spdy::HpackEntry"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %14, i64 %32
  %34 = ptrtoint %"class.spdy::HpackEntry"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"class.spdy::HpackEntry"** %33 to i8*
  %40 = bitcast %"class.spdy::HpackEntry"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #12
  %41 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"class.spdy::HpackEntry"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %33, i64 %36
  store %"class.spdy::HpackEntry"** %44, %"class.spdy::HpackEntry"*** %15, align 8
  %45 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %43, i64 %32
  store %"class.spdy::HpackEntry"** %45, %"class.spdy::HpackEntry"*** %10, align 8
  %46 = bitcast %"class.spdy::HpackEntry"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"class.spdy::HpackEntry"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #15
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #16
  %60 = bitcast i8* %59 to %"class.spdy::HpackEntry"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %60, i64 %57
  %63 = ptrtoint %"class.spdy::HpackEntry"** %62 to i64
  %64 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %60, i64 %53
  %65 = ptrtoint %"class.spdy::HpackEntry"** %64 to i64
  %66 = ptrtoint %"class.spdy::HpackEntry"** %14 to i64
  %67 = ptrtoint %"class.spdy::HpackEntry"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"class.spdy::HpackEntry"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"class.spdy::HpackEntry"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"class.spdy::HpackEntry"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %79, i64 1
  %87 = ptrtoint %"class.spdy::HpackEntry"** %86 to i64
  %88 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !87

91:                                               ; preds = %78
  %92 = ptrtoint %"class.spdy::HpackEntry"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"class.spdy::HpackEntry"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"class.spdy::HpackEntry"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"class.spdy::HpackEntry"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"class.spdy::HpackEntry"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 1
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 1
  %107 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.spdy::HpackEntry"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 2
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 2
  %112 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.spdy::HpackEntry"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 3
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 3
  %117 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.spdy::HpackEntry"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 4
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 4
  %122 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.spdy::HpackEntry"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 5
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 5
  %127 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.spdy::HpackEntry"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 6
  %131 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 6
  %132 = bitcast %"class.spdy::HpackEntry"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.spdy::HpackEntry"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 7
  %136 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 7
  %137 = bitcast %"class.spdy::HpackEntry"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.spdy::HpackEntry"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 8
  %141 = ptrtoint %"class.spdy::HpackEntry"** %140 to i64
  %142 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %101, i64 8
  %143 = icmp eq %"class.spdy::HpackEntry"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"class.spdy::HpackEntry"** %70 to i64
  %146 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"class.spdy::HpackEntry"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"class.spdy::HpackEntry"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"class.spdy::HpackEntry"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"class.spdy::HpackEntry"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"class.spdy::HpackEntry"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #16
  %156 = bitcast %"class.spdy::HpackEntry"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %15, align 8
  %161 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %160, i64 1
  store %"class.spdy::HpackEntry"** %161, %"class.spdy::HpackEntry"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"class.spdy::HpackEntry"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"class.spdy::HpackEntry"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"class.spdy::HpackEntry"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"class.spdy::HpackEntry"**
  %181 = inttoptr i64 %169 to %"class.spdy::HpackEntry"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"class.spdy::HpackEntry"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #12
  %186 = tail call i8* @_Znwm(i64 4080) #16
  %187 = bitcast %"class.spdy::HpackEntry"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* %163, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #12
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"class.spdy::HpackEntry"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #12
  %190 = tail call i8* @_Znwm(i64 4080) #16
  %191 = bitcast %"class.spdy::HpackEntry"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"* %163, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #12
  %192 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %167, align 8
  %193 = bitcast %"class.spdy::HpackEntry"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %192, i64 1
  store %"class.spdy::HpackEntry"** %195, %"class.spdy::HpackEntry"*** %167, align 8
  %196 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %164, align 8
  %197 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %172, align 8
  %198 = icmp eq %"class.spdy::HpackEntry"** %196, %197
  %199 = ptrtoint %"class.spdy::HpackEntry"** %197 to i64
  %200 = bitcast %"class.spdy::HpackEntry"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %202, align 8
  %204 = icmp ugt %"class.spdy::HpackEntry"** %195, %203
  %205 = ptrtoint %"class.spdy::HpackEntry"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"class.spdy::HpackEntry"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %195, i64 %211
  %213 = ptrtoint %"class.spdy::HpackEntry"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"class.spdy::HpackEntry"** %212 to i8*
  %219 = bitcast %"class.spdy::HpackEntry"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #12
  %220 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"class.spdy::HpackEntry"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %212, i64 %215
  store %"class.spdy::HpackEntry"** %223, %"class.spdy::HpackEntry"*** %164, align 8
  %224 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %222, i64 %211
  store %"class.spdy::HpackEntry"** %224, %"class.spdy::HpackEntry"*** %167, align 8
  %225 = bitcast %"class.spdy::HpackEntry"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #15
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #16
  %237 = bitcast i8* %236 to %"class.spdy::HpackEntry"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %237, i64 %234
  %240 = ptrtoint %"class.spdy::HpackEntry"** %239 to i64
  %241 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %237, i64 %230
  %242 = ptrtoint %"class.spdy::HpackEntry"** %241 to i64
  %243 = ptrtoint %"class.spdy::HpackEntry"** %195 to i64
  %244 = ptrtoint %"class.spdy::HpackEntry"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"class.spdy::HpackEntry"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"class.spdy::HpackEntry"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"class.spdy::HpackEntry"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %256, i64 1
  %264 = ptrtoint %"class.spdy::HpackEntry"** %263 to i64
  %265 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !89

268:                                              ; preds = %255
  %269 = ptrtoint %"class.spdy::HpackEntry"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"class.spdy::HpackEntry"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"class.spdy::HpackEntry"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"class.spdy::HpackEntry"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"class.spdy::HpackEntry"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"class.spdy::HpackEntry"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 1
  %283 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 1
  %284 = bitcast %"class.spdy::HpackEntry"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.spdy::HpackEntry"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 2
  %288 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 2
  %289 = bitcast %"class.spdy::HpackEntry"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.spdy::HpackEntry"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 3
  %293 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 3
  %294 = bitcast %"class.spdy::HpackEntry"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.spdy::HpackEntry"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 4
  %298 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 4
  %299 = bitcast %"class.spdy::HpackEntry"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"class.spdy::HpackEntry"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 5
  %303 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 5
  %304 = bitcast %"class.spdy::HpackEntry"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.spdy::HpackEntry"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 6
  %308 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 6
  %309 = bitcast %"class.spdy::HpackEntry"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"class.spdy::HpackEntry"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 7
  %313 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 7
  %314 = bitcast %"class.spdy::HpackEntry"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"class.spdy::HpackEntry"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %276, i64 8
  %318 = ptrtoint %"class.spdy::HpackEntry"** %317 to i64
  %319 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %278, i64 8
  %320 = icmp eq %"class.spdy::HpackEntry"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"class.spdy::HpackEntry"** %247 to i64
  %323 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"class.spdy::HpackEntry"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"class.spdy::HpackEntry"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"class.spdy::HpackEntry"** %325 to i8*
  call void @_ZdlPv(i8* %330) #16
  %331 = bitcast %"class.spdy::HpackEntry"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %164, align 8
  %336 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %335, i64 1
  store %"class.spdy::HpackEntry"** %336, %"class.spdy::HpackEntry"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #12
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"class.spdy::HpackEntry"** null, %"class.spdy::HpackEntry"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.4"** %342 to %"class.std::__1::__compressed_pair.1"**
  store %"class.std::__1::__compressed_pair.1"* %346, %"class.std::__1::__compressed_pair.1"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #15
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #16
  %354 = bitcast i8* %353 to %"class.spdy::HpackEntry"**
  %355 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %354, i64 %171
  store %"class.spdy::HpackEntry"** %356, %"class.spdy::HpackEntry"*** %340, align 8
  store %"class.spdy::HpackEntry"** %356, %"class.spdy::HpackEntry"*** %339, align 8
  %357 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %354, i64 %345
  store %"class.spdy::HpackEntry"** %357, %"class.spdy::HpackEntry"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4080) #16
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"class.spdy::HpackEntry"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"class.spdy::HpackEntry"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"class.spdy::HpackEntry"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %356, i64 %370
  store %"class.spdy::HpackEntry"** %371, %"class.spdy::HpackEntry"*** %340, align 8
  store %"class.spdy::HpackEntry"** %371, %"class.spdy::HpackEntry"*** %339, align 8
  %372 = ptrtoint %"class.spdy::HpackEntry"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #15
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i64*
  %382 = bitcast %"class.spdy::HpackEntry"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #16
  %386 = bitcast i8* %385 to %"class.spdy::HpackEntry"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %386, i64 %383
  %389 = ptrtoint %"class.spdy::HpackEntry"** %388 to i64
  %390 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %386, i64 %377
  %391 = ptrtoint %"class.spdy::HpackEntry"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"class.spdy::HpackEntry"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"class.spdy::HpackEntry"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #16
  %394 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %164, align 8
  %395 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %167, align 8
  %396 = ptrtoint %"class.spdy::HpackEntry"** %395 to i64
  %397 = ptrtoint %"class.spdy::HpackEntry"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"class.spdy::HpackEntry"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"class.spdy::HpackEntry"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"class.spdy::HpackEntry"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"class.spdy::HpackEntry"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %406, i64 1
  store %"class.spdy::HpackEntry"** %408, %"class.spdy::HpackEntry"*** %340, align 8
  %409 = icmp eq %"class.spdy::HpackEntry"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"class.spdy::HpackEntry"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i64*
  %413 = bitcast %"class.spdy::HpackEntry"*** %339 to i64*
  %414 = bitcast %"class.spdy::HpackEntry"*** %340 to i64*
  %415 = bitcast %"class.spdy::HpackEntry"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"class.spdy::HpackEntry"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.55"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.spdy::HpackEntry"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"class.spdy::HpackEntry"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.spdy::HpackEntry"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"class.spdy::HpackEntry"**
  %441 = inttoptr i64 %434 to %"class.spdy::HpackEntry"**
  %442 = icmp eq %"class.spdy::HpackEntry"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %441, i64 -1
  %445 = ptrtoint %"class.spdy::HpackEntry"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %441, i64 %448
  store %"class.spdy::HpackEntry"** %449, %"class.spdy::HpackEntry"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #16
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #12
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"class.spdy::HpackEntry"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.55"* nonnull %4, %"class.spdy::HpackEntry"** dereferenceable(8) %457)
  %458 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %167, align 8
  %459 = icmp eq %"class.spdy::HpackEntry"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  %9 = bitcast %"class.spdy::HpackEntry"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8
  %15 = icmp ugt %"class.spdy::HpackEntry"** %12, %14
  %16 = ptrtoint %"class.spdy::HpackEntry"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.spdy::HpackEntry"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %12, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.spdy::HpackEntry"** %23 to i8*
  %30 = bitcast %"class.spdy::HpackEntry"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #12
  %31 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.spdy::HpackEntry"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %26
  store %"class.spdy::HpackEntry"** %34, %"class.spdy::HpackEntry"*** %3, align 8
  %35 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %33, i64 %22
  store %"class.spdy::HpackEntry"** %35, %"class.spdy::HpackEntry"*** %11, align 8
  %36 = bitcast %"class.spdy::HpackEntry"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.spdy::HpackEntry"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #16
  %50 = bitcast i8* %49 to %"class.spdy::HpackEntry"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %50, i64 %47
  %53 = ptrtoint %"class.spdy::HpackEntry"** %52 to i64
  %54 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %50, i64 %43
  %55 = ptrtoint %"class.spdy::HpackEntry"** %54 to i64
  %56 = ptrtoint %"class.spdy::HpackEntry"** %12 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.spdy::HpackEntry"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.spdy::HpackEntry"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.spdy::HpackEntry"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %69, i64 1
  %77 = ptrtoint %"class.spdy::HpackEntry"** %76 to i64
  %78 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !90

81:                                               ; preds = %68
  %82 = ptrtoint %"class.spdy::HpackEntry"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.spdy::HpackEntry"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.spdy::HpackEntry"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.spdy::HpackEntry"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.spdy::HpackEntry"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.spdy::HpackEntry"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 1
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 1
  %97 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.spdy::HpackEntry"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 2
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 2
  %102 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.spdy::HpackEntry"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 3
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 3
  %107 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.spdy::HpackEntry"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 4
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 4
  %112 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.spdy::HpackEntry"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 5
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 5
  %117 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.spdy::HpackEntry"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 6
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 6
  %122 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.spdy::HpackEntry"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 7
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 7
  %127 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.spdy::HpackEntry"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 8
  %131 = ptrtoint %"class.spdy::HpackEntry"** %130 to i64
  %132 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 8
  %133 = icmp eq %"class.spdy::HpackEntry"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.spdy::HpackEntry"** %60 to i64
  %136 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.spdy::HpackEntry"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.spdy::HpackEntry"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.spdy::HpackEntry"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.spdy::HpackEntry"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #16
  %146 = bitcast %"class.spdy::HpackEntry"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %153 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %152, i64 1
  store %"class.spdy::HpackEntry"** %153, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %12, align 8
  %14 = icmp ult %"class.spdy::HpackEntry"** %11, %13
  %15 = bitcast %"class.spdy::HpackEntry"*** %12 to i64*
  %16 = ptrtoint %"class.spdy::HpackEntry"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %29
  %31 = bitcast %"class.spdy::HpackEntry"** %30 to i8*
  %32 = bitcast %"class.spdy::HpackEntry"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.spdy::HpackEntry"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.spdy::HpackEntry"** [ %30, %27 ], [ %23, %17 ]
  store %"class.spdy::HpackEntry"** %36, %"class.spdy::HpackEntry"*** %3, align 8
  %37 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 %22
  store %"class.spdy::HpackEntry"** %37, %"class.spdy::HpackEntry"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #16
  %51 = bitcast i8* %50 to %"class.spdy::HpackEntry"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %48
  %54 = ptrtoint %"class.spdy::HpackEntry"** %53 to i64
  %55 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %43
  %56 = ptrtoint %"class.spdy::HpackEntry"** %55 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.spdy::HpackEntry"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.spdy::HpackEntry"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.spdy::HpackEntry"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, i64 1
  %78 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !91

82:                                               ; preds = %69
  %83 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.spdy::HpackEntry"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.spdy::HpackEntry"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.spdy::HpackEntry"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.spdy::HpackEntry"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.spdy::HpackEntry"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  %97 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 1
  %98 = bitcast %"class.spdy::HpackEntry"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 2
  %102 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 2
  %103 = bitcast %"class.spdy::HpackEntry"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 3
  %107 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 3
  %108 = bitcast %"class.spdy::HpackEntry"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 4
  %112 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 4
  %113 = bitcast %"class.spdy::HpackEntry"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 5
  %117 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 5
  %118 = bitcast %"class.spdy::HpackEntry"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 6
  %122 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 6
  %123 = bitcast %"class.spdy::HpackEntry"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 7
  %127 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 7
  %128 = bitcast %"class.spdy::HpackEntry"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 8
  %132 = ptrtoint %"class.spdy::HpackEntry"** %131 to i64
  %133 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 8
  %134 = icmp eq %"class.spdy::HpackEntry"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.spdy::HpackEntry"** %61 to i64
  %137 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.spdy::HpackEntry"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.spdy::HpackEntry"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.spdy::HpackEntry"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.spdy::HpackEntry"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #16
  %146 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.spdy::HpackEntry"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %148, i64 -1
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.spdy::HpackEntry"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %154 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %153, i64 -1
  store %"class.spdy::HpackEntry"** %154, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.55"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %0, i64 0, i32 1
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %0, i64 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %0, i64 0, i32 2
  %11 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.55", %"struct.std::__1::__split_buffer.55"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %12, align 8
  %14 = icmp ult %"class.spdy::HpackEntry"** %11, %13
  %15 = bitcast %"class.spdy::HpackEntry"*** %12 to i64*
  %16 = ptrtoint %"class.spdy::HpackEntry"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %29
  %31 = bitcast %"class.spdy::HpackEntry"** %30 to i8*
  %32 = bitcast %"class.spdy::HpackEntry"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.spdy::HpackEntry"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.spdy::HpackEntry"** [ %30, %27 ], [ %23, %17 ]
  store %"class.spdy::HpackEntry"** %36, %"class.spdy::HpackEntry"*** %3, align 8
  %37 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 %22
  store %"class.spdy::HpackEntry"** %37, %"class.spdy::HpackEntry"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.55"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #16
  %51 = bitcast i8* %50 to %"class.spdy::HpackEntry"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %48
  %54 = ptrtoint %"class.spdy::HpackEntry"** %53 to i64
  %55 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %43
  %56 = ptrtoint %"class.spdy::HpackEntry"** %55 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.spdy::HpackEntry"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.spdy::HpackEntry"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.spdy::HpackEntry"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, i64 1
  %78 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !92

82:                                               ; preds = %69
  %83 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.spdy::HpackEntry"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.spdy::HpackEntry"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.spdy::HpackEntry"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.spdy::HpackEntry"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.spdy::HpackEntry"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  %97 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 1
  %98 = bitcast %"class.spdy::HpackEntry"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 2
  %102 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 2
  %103 = bitcast %"class.spdy::HpackEntry"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 3
  %107 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 3
  %108 = bitcast %"class.spdy::HpackEntry"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 4
  %112 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 4
  %113 = bitcast %"class.spdy::HpackEntry"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 5
  %117 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 5
  %118 = bitcast %"class.spdy::HpackEntry"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 6
  %122 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 6
  %123 = bitcast %"class.spdy::HpackEntry"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 7
  %127 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 7
  %128 = bitcast %"class.spdy::HpackEntry"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 8
  %132 = ptrtoint %"class.spdy::HpackEntry"** %131 to i64
  %133 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 8
  %134 = icmp eq %"class.spdy::HpackEntry"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.spdy::HpackEntry"** %61 to i64
  %137 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.spdy::HpackEntry"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.spdy::HpackEntry"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.spdy::HpackEntry"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.spdy::HpackEntry"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #16
  %146 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.spdy::HpackEntry"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %148, i64 -1
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.spdy::HpackEntry"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %154 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %153, i64 -1
  store %"class.spdy::HpackEntry"** %154, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"*, %"struct.spdy::HpackLookupEntry"* dereferenceable(32)) local_unnamed_addr #2 comdat align 2 {
  %3 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %4 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %3, i8* %5, i64 %7) #12
  %9 = add i64 %8, %7
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %14, i8* %16, i64 %18) #12
  %20 = add i64 %19, %18
  %21 = zext i64 %20 to i128
  %22 = mul nuw i128 %21, 11376068507788127593
  %23 = lshr i128 %22, 64
  %24 = xor i128 %23, %22
  %25 = trunc i128 %24 to i64
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %25, 7
  %31 = ptrtoint i8* %27 to i64
  %32 = lshr i64 %31, 12
  %33 = xor i64 %30, %32
  %34 = trunc i128 %24 to i8
  %35 = and i8 %34, 127
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %39 = load i8*, i8** %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = load i8*, i8** %15, align 8
  %42 = load i64, i64* %17, align 8
  %43 = icmp eq i64 %40, 0
  %44 = icmp eq i64 %42, 0
  br label %45

45:                                               ; preds = %91, %2
  %46 = phi i64 [ %33, %2 ], [ %93, %91 ]
  %47 = phi i64 [ 0, %2 ], [ %92, %91 ]
  %48 = and i64 %46, %29
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = icmp eq <16 x i8> %37, %51
  %53 = bitcast <16 x i1> %52 to i16
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %87, label %55

55:                                               ; preds = %45
  %56 = zext i16 %53 to i32
  %57 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %38, align 8
  br label %58

58:                                               ; preds = %55, %83
  %59 = phi i32 [ %56, %55 ], [ %85, %83 ]
  %60 = tail call i32 @llvm.cttz.i32(i32 %59, i1 false) #12, !range !21
  %61 = zext i32 %60 to i64
  %62 = add i64 %48, %61
  %63 = and i64 %62, %29
  %64 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, %40
  br i1 %68, label %69, label %83, !prof !76

69:                                               ; preds = %58
  br i1 %43, label %73, label %70

70:                                               ; preds = %69
  %71 = tail call i32 @bcmp(i8* %65, i8* %39, i64 %40) #12
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %83, !prof !76

73:                                               ; preds = %70, %69
  %74 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, %42
  br i1 %78, label %79, label %83, !prof !76

79:                                               ; preds = %73
  br i1 %44, label %96, label %80

80:                                               ; preds = %79
  %81 = tail call i32 @bcmp(i8* %75, i8* %41, i64 %42) #12
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %96, label %83, !prof !2

83:                                               ; preds = %58, %73, %70, %80
  %84 = add i32 %59, -1
  %85 = and i32 %84, %59
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %58

87:                                               ; preds = %83, %45
  %88 = icmp eq <16 x i8> %51, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %89 = bitcast <16 x i1> %88 to i16
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %91, label %94, !prof !77

91:                                               ; preds = %87
  %92 = add i64 %47, 16
  %93 = add i64 %92, %48
  br label %45

94:                                               ; preds = %87
  %95 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %25)
  br label %96

96:                                               ; preds = %80, %79, %94
  %97 = phi i64 [ %95, %94 ], [ %63, %79 ], [ %63, %80 ]
  %98 = phi i8 [ 1, %94 ], [ 0, %79 ], [ 0, %80 ]
  %99 = insertvalue { i64, i8 } undef, i64 %97, 0
  %100 = insertvalue { i64, i8 } %99, i8 %98, 1
  ret { i64, i8 } %100
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !21
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !21
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ugt i64 %2, 16
  br i1 %4, label %5, label %11

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, 1024
  br i1 %6, label %7, label %9, !prof !77

7:                                                ; preds = %5
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64 %0, i8* %1, i64 %2) #12
  br label %75

9:                                                ; preds = %5
  %10 = tail call i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8* %1, i64 %2) #12
  br label %66

11:                                               ; preds = %3
  %12 = icmp ugt i64 %2, 8
  br i1 %12, label %13, label %29

13:                                               ; preds = %11
  %14 = bitcast i8* %1 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  %17 = getelementptr inbounds i8, i8* %16, i64 -8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = shl i64 %2, 3
  %21 = sub nuw nsw i64 128, %20
  %22 = lshr i64 %19, %21
  %23 = add i64 %15, %0
  %24 = zext i64 %23 to i128
  %25 = mul nuw i128 %24, 11376068507788127593
  %26 = lshr i128 %25, 64
  %27 = xor i128 %26, %25
  %28 = trunc i128 %27 to i64
  br label %66

29:                                               ; preds = %11
  %30 = icmp ugt i64 %2, 3
  br i1 %30, label %31, label %44

31:                                               ; preds = %29
  %32 = bitcast i8* %1 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %2
  %35 = getelementptr inbounds i8, i8* %34, i64 -4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = zext i32 %37 to i64
  %39 = shl i64 %2, 3
  %40 = add nsw i64 %39, -32
  %41 = shl i64 %38, %40
  %42 = zext i32 %33 to i64
  %43 = or i64 %41, %42
  br label %66

44:                                               ; preds = %29
  %45 = icmp eq i64 %2, 0
  br i1 %45, label %75, label %46

46:                                               ; preds = %44
  %47 = load i8, i8* %1, align 1
  %48 = lshr i64 %2, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = add nsw i64 %2, -1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %47 to i32
  %55 = zext i8 %50 to i32
  %56 = shl i64 %48, 3
  %57 = trunc i64 %56 to i32
  %58 = shl i32 %55, %57
  %59 = or i32 %58, %54
  %60 = zext i8 %53 to i32
  %61 = trunc i64 %51 to i32
  %62 = shl i32 %61, 3
  %63 = shl i32 %60, %62
  %64 = or i32 %59, %63
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %46, %31, %13, %9
  %67 = phi i64 [ %10, %9 ], [ %22, %13 ], [ %43, %31 ], [ %65, %46 ]
  %68 = phi i64 [ %0, %9 ], [ %28, %13 ], [ %0, %31 ], [ %0, %46 ]
  %69 = add i64 %68, %67
  %70 = zext i64 %69 to i128
  %71 = mul nuw i128 %70, 11376068507788127593
  %72 = lshr i128 %71, 64
  %73 = xor i128 %72, %71
  %74 = trunc i128 %73 to i64
  br label %75

75:                                               ; preds = %7, %44, %66
  %76 = phi i64 [ %8, %7 ], [ %74, %66 ], [ %0, %44 ]
  ret i64 %76
}

declare i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64, i8*, i64) local_unnamed_addr #1

declare i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 40
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %108, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %104
  br i1 %24, label %108, label %107

28:                                               ; preds = %25, %104
  %29 = phi i64 [ 0, %25 ], [ %105, %104 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %104

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #12
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %45, i8* %47, i64 %49) #12
  %51 = add i64 %50, %49
  %52 = zext i64 %51 to i128
  %53 = mul nuw i128 %52, 11376068507788127593
  %54 = lshr i128 %53, 64
  %55 = xor i128 %54, %53
  %56 = trunc i128 %55 to i64
  %57 = load i8*, i8** %3, align 8
  %58 = load i64, i64* %7, align 8
  %59 = lshr i64 %56, 7
  %60 = ptrtoint i8* %57 to i64
  %61 = lshr i64 %60, 12
  %62 = xor i64 %59, %61
  %63 = and i64 %62, %58
  %64 = getelementptr inbounds i8, i8* %57, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = icmp slt <16 x i8> %66, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %68 = bitcast <16 x i1> %67 to i16
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %33, %70
  %71 = phi i64 [ %75, %70 ], [ %63, %33 ]
  %72 = phi i64 [ %73, %70 ], [ 0, %33 ]
  %73 = add i64 %72, 16
  %74 = add i64 %73, %71
  %75 = and i64 %74, %58
  %76 = getelementptr inbounds i8, i8* %57, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = icmp slt <16 x i8> %78, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %80 = bitcast <16 x i1> %79 to i16
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %70, label %82

82:                                               ; preds = %70, %33
  %83 = phi i64 [ %63, %33 ], [ %75, %70 ]
  %84 = phi i16 [ %68, %33 ], [ %80, %70 ]
  %85 = zext i16 %84 to i32
  %86 = tail call i32 @llvm.cttz.i32(i32 %85, i1 false) #12, !range !21
  %87 = zext i32 %86 to i64
  %88 = add i64 %83, %87
  %89 = and i64 %88, %58
  %90 = trunc i128 %55 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %57, i64 %89
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %89, -15
  %95 = load i64, i64* %7, align 8
  %96 = and i64 %94, %95
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %100, i64 %89
  %102 = bitcast %"union.absl::container_internal::map_slot_type"* %101 to i8*
  %103 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 40, i1 false) #12
  br label %104

104:                                              ; preds = %28, %82
  %105 = add nuw i64 %29, 1
  %106 = icmp eq i64 %105, %8
  br i1 %106, label %27, label %28

107:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %108

108:                                              ; preds = %2, %27, %107
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #11 comdat align 2 {
  %2 = alloca %"struct.std::__1::pair", align 8
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %4, i64 %6) #12
  %7 = bitcast %"struct.std::__1::pair"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %12 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %21

13:                                               ; preds = %137, %1
  %14 = phi i64 [ 0, %1 ], [ %139, %137 ]
  %15 = lshr i64 %14, 3
  %16 = sub i64 %14, %15
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %19, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7)
  ret void

21:                                               ; preds = %10, %137
  %22 = phi i64 [ 0, %10 ], [ %139, %137 ]
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, -2
  br i1 %26, label %27, label %137

27:                                               ; preds = %21
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %12, i8* %30, i64 %32) #12
  %34 = add i64 %33, %32
  %35 = zext i64 %34 to i128
  %36 = mul nuw i128 %35, 11376068507788127593
  %37 = lshr i128 %36, 64
  %38 = xor i128 %37, %36
  %39 = trunc i128 %38 to i64
  %40 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %39, i8* %41, i64 %43) #12
  %45 = add i64 %44, %43
  %46 = zext i64 %45 to i128
  %47 = mul nuw i128 %46, 11376068507788127593
  %48 = lshr i128 %47, 64
  %49 = xor i128 %48, %47
  %50 = trunc i128 %49 to i64
  %51 = load i8*, i8** %3, align 8
  %52 = load i64, i64* %5, align 8
  %53 = lshr i64 %50, 7
  %54 = ptrtoint i8* %51 to i64
  %55 = lshr i64 %54, 12
  %56 = xor i64 %53, %55
  %57 = and i64 %56, %52
  %58 = getelementptr inbounds i8, i8* %51, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = icmp slt <16 x i8> %60, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %62 = bitcast <16 x i1> %61 to i16
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %64, label %76

64:                                               ; preds = %27, %64
  %65 = phi i64 [ %69, %64 ], [ %57, %27 ]
  %66 = phi i64 [ %67, %64 ], [ 0, %27 ]
  %67 = add i64 %66, 16
  %68 = add i64 %67, %65
  %69 = and i64 %68, %52
  %70 = getelementptr inbounds i8, i8* %51, i64 %69
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = icmp slt <16 x i8> %72, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %74 = bitcast <16 x i1> %73 to i16
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %64, label %76

76:                                               ; preds = %64, %27
  %77 = phi i64 [ %57, %27 ], [ %69, %64 ]
  %78 = phi i16 [ %62, %27 ], [ %74, %64 ]
  %79 = zext i16 %78 to i32
  %80 = tail call i32 @llvm.cttz.i32(i32 %79, i1 false) #12, !range !21
  %81 = zext i32 %80 to i64
  %82 = add i64 %77, %81
  %83 = and i64 %82, %52
  %84 = sub i64 %83, %57
  %85 = sub i64 %22, %57
  %86 = xor i64 %84, %85
  %87 = and i64 %86, %52
  %88 = icmp ult i64 %87, 16
  br i1 %88, label %89, label %100, !prof !2

89:                                               ; preds = %76
  %90 = trunc i128 %49 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %51, i64 %22
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %22, -15
  %95 = load i64, i64* %5, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  br label %137

100:                                              ; preds = %76
  %101 = getelementptr inbounds i8, i8* %51, i64 %83
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, -128
  %104 = trunc i128 %49 to i8
  %105 = and i8 %104, 127
  store i8 %105, i8* %101, align 1
  %106 = load i8*, i8** %3, align 8
  %107 = add i64 %83, -15
  %108 = load i64, i64* %5, align 8
  %109 = and i64 %108, %107
  %110 = and i64 %108, 15
  %111 = add i64 %109, %110
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  store i8 %105, i8* %112, align 1
  %113 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  br i1 %103, label %114, label %128

114:                                              ; preds = %100
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %117 = bitcast %"union.absl::container_internal::map_slot_type"* %115 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 40, i1 false) #12
  %119 = load i8*, i8** %3, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 %22
  store i8 -128, i8* %120, align 1
  %121 = load i8*, i8** %3, align 8
  %122 = add i64 %22, -15
  %123 = load i64, i64* %5, align 8
  %124 = and i64 %123, %122
  %125 = and i64 %123, 15
  %126 = add i64 %124, %125
  %127 = getelementptr inbounds i8, i8* %121, i64 %126
  store i8 -128, i8* %127, align 1
  br label %137

128:                                              ; preds = %100
  %129 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %130 = bitcast %"union.absl::container_internal::map_slot_type"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %130, i64 40, i1 false)
  %131 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %132 = bitcast %"union.absl::container_internal::map_slot_type"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %132, i64 40, i1 false) #12
  %133 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %134 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %133, i64 %83
  %135 = bitcast %"union.absl::container_internal::map_slot_type"* %134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* nonnull align 8 %7, i64 40, i1 false)
  %136 = add i64 %22, -1
  br label %137

137:                                              ; preds = %89, %128, %114, %21
  %138 = phi i64 [ %22, %21 ], [ %22, %89 ], [ %22, %114 ], [ %136, %128 ]
  %139 = add i64 %138, 1
  %140 = load i64, i64* %5, align 8
  %141 = icmp eq i64 %139, %140
  br i1 %141, label %13, label %21
}

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.20"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #12
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %67, %2
  %32 = phi i64 [ %22, %2 ], [ %69, %67 ]
  %33 = phi i64 [ 0, %2 ], [ %68, %67 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %63, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %27, align 8
  br label %44

44:                                               ; preds = %41, %59
  %45 = phi i32 [ %42, %41 ], [ %61, %59 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #12, !range !21
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %43, i64 %49, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, %29
  br i1 %54, label %55, label %59, !prof !76

55:                                               ; preds = %44
  br i1 %30, label %72, label %56

56:                                               ; preds = %55
  %57 = tail call i32 @bcmp(i8* %51, i8* %28, i64 %29) #12
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59, !prof !2

59:                                               ; preds = %44, %56
  %60 = add i32 %45, -1
  %61 = and i32 %60, %45
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %44

63:                                               ; preds = %59, %31
  %64 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %65 = bitcast <16 x i1> %64 to i16
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %67, label %70, !prof !77

67:                                               ; preds = %63
  %68 = add i64 %33, 16
  %69 = add i64 %68, %34
  br label %31

70:                                               ; preds = %63
  %71 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.20"* %0, i64 %14)
  br label %72

72:                                               ; preds = %56, %55, %70
  %73 = phi i64 [ %71, %70 ], [ %49, %55 ], [ %49, %56 ]
  %74 = phi i8 [ 1, %70 ], [ 0, %55 ], [ 0, %56 ]
  %75 = insertvalue { i64, i8 } undef, i64 %73, 0
  %76 = insertvalue { i64, i8 } %75, i8 %74, 1
  ret { i64, i8 } %76
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.20"*, i64) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #12, !range !21
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.20"* %0, i64 1) #12
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.20"* %0) #12
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.20"* %0, i64 %58) #12
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #12, !range !21
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.20"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 24
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.21"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %97, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %93
  br i1 %24, label %97, label %96

28:                                               ; preds = %25, %93
  %29 = phi i64 [ 0, %25 ], [ %94, %93 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %6, i64 %29, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #12
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = load i8*, i8** %3, align 8
  %47 = load i64, i64* %7, align 8
  %48 = lshr i64 %45, 7
  %49 = ptrtoint i8* %46 to i64
  %50 = lshr i64 %49, 12
  %51 = xor i64 %48, %50
  %52 = and i64 %51, %47
  %53 = getelementptr inbounds i8, i8* %46, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = icmp slt <16 x i8> %55, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = bitcast <16 x i1> %56 to i16
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %59, label %71

59:                                               ; preds = %33, %59
  %60 = phi i64 [ %64, %59 ], [ %52, %33 ]
  %61 = phi i64 [ %62, %59 ], [ 0, %33 ]
  %62 = add i64 %61, 16
  %63 = add i64 %62, %60
  %64 = and i64 %63, %47
  %65 = getelementptr inbounds i8, i8* %46, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = icmp slt <16 x i8> %67, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %59, label %71

71:                                               ; preds = %59, %33
  %72 = phi i64 [ %52, %33 ], [ %64, %59 ]
  %73 = phi i16 [ %57, %33 ], [ %69, %59 ]
  %74 = zext i16 %73 to i32
  %75 = tail call i32 @llvm.cttz.i32(i32 %74, i1 false) #12, !range !21
  %76 = zext i32 %75 to i64
  %77 = add i64 %72, %76
  %78 = and i64 %77, %47
  %79 = trunc i128 %44 to i8
  %80 = and i8 %79, 127
  %81 = getelementptr inbounds i8, i8* %46, i64 %78
  store i8 %80, i8* %81, align 1
  %82 = load i8*, i8** %3, align 8
  %83 = add i64 %78, -15
  %84 = load i64, i64* %7, align 8
  %85 = and i64 %83, %84
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %80, i8* %88, align 1
  %89 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %5, align 8
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %89, i64 %78
  %91 = bitcast %"union.absl::container_internal::map_slot_type.21"* %90 to i8*
  %92 = bitcast %"union.absl::container_internal::map_slot_type.21"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #12
  br label %93

93:                                               ; preds = %28, %71
  %94 = add nuw i64 %29, 1
  %95 = icmp eq i64 %94, %8
  br i1 %95, label %27, label %28

96:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %97

97:                                               ; preds = %2, %27, %96
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.20"*) local_unnamed_addr #11 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #12
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %153, %1
  %12 = phi i64 [ 0, %1 ], [ %155, %153 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.20", %"class.absl::container_internal::raw_hash_set.20"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %153
  %20 = phi i64 [ 0, %8 ], [ %155, %153 ]
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -2
  br i1 %24, label %25, label %153

25:                                               ; preds = %19
  %26 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %9, align 8
  %27 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %26, i64 %20, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %26, i64 %20, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %10, i8* %28, i64 %30) #12
  %32 = add i64 %31, %30
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = load i8*, i8** %2, align 8
  %39 = load i64, i64* %4, align 8
  %40 = lshr i64 %37, 7
  %41 = ptrtoint i8* %38 to i64
  %42 = lshr i64 %41, 12
  %43 = xor i64 %40, %42
  %44 = and i64 %43, %39
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = icmp slt <16 x i8> %47, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = bitcast <16 x i1> %48 to i16
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %25, %51
  %52 = phi i64 [ %56, %51 ], [ %44, %25 ]
  %53 = phi i64 [ %54, %51 ], [ 0, %25 ]
  %54 = add i64 %53, 16
  %55 = add i64 %54, %52
  %56 = and i64 %55, %39
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp slt <16 x i8> %59, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %51, label %63

63:                                               ; preds = %51, %25
  %64 = phi i64 [ %44, %25 ], [ %56, %51 ]
  %65 = phi i16 [ %49, %25 ], [ %61, %51 ]
  %66 = zext i16 %65 to i32
  %67 = tail call i32 @llvm.cttz.i32(i32 %66, i1 false) #12, !range !21
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = and i64 %69, %39
  %71 = sub i64 %70, %44
  %72 = sub i64 %20, %44
  %73 = xor i64 %71, %72
  %74 = and i64 %73, %39
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %76, label %87, !prof !2

76:                                               ; preds = %63
  %77 = trunc i128 %36 to i8
  %78 = and i8 %77, 127
  %79 = getelementptr inbounds i8, i8* %38, i64 %20
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %2, align 8
  %81 = add i64 %20, -15
  %82 = load i64, i64* %4, align 8
  %83 = and i64 %82, %81
  %84 = and i64 %82, 15
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  store i8 %78, i8* %86, align 1
  br label %153

87:                                               ; preds = %63
  %88 = getelementptr inbounds i8, i8* %38, i64 %70
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, -128
  %91 = trunc i128 %36 to i8
  %92 = and i8 %91, 127
  store i8 %92, i8* %88, align 1
  %93 = load i8*, i8** %2, align 8
  %94 = add i64 %70, -15
  %95 = load i64, i64* %4, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %92, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %9, align 8
  br i1 %90, label %101, label %115

101:                                              ; preds = %87
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %100, i64 %70
  %103 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %100, i64 %20
  %104 = bitcast %"union.absl::container_internal::map_slot_type.21"* %102 to i8*
  %105 = bitcast %"union.absl::container_internal::map_slot_type.21"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #12
  %106 = load i8*, i8** %2, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %20
  store i8 -128, i8* %107, align 1
  %108 = load i8*, i8** %2, align 8
  %109 = add i64 %20, -15
  %110 = load i64, i64* %4, align 8
  %111 = and i64 %110, %109
  %112 = and i64 %110, 15
  %113 = add i64 %111, %112
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  store i8 -128, i8* %114, align 1
  br label %153

115:                                              ; preds = %87
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %100, i64 %20
  %117 = bitcast %"union.absl::container_internal::map_slot_type.21"* %116 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type.21"* %116 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %100, i64 %20, i32 0, i32 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = getelementptr inbounds i8, i8* %117, i64 17
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %117, i64 18
  %126 = load i8, i8* %125, align 2
  %127 = getelementptr inbounds i8, i8* %117, i64 19
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %117, i64 20
  %130 = load i8, i8* %129, align 4
  %131 = getelementptr inbounds i8, i8* %117, i64 21
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %117, i64 22
  %134 = load i8, i8* %133, align 2
  %135 = getelementptr inbounds i8, i8* %117, i64 23
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %100, i64 %70
  %138 = bitcast %"union.absl::container_internal::map_slot_type.21"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %138, i64 24, i1 false) #12
  %139 = load %"union.absl::container_internal::map_slot_type.21"*, %"union.absl::container_internal::map_slot_type.21"** %9, align 8
  %140 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %139, i64 %70
  %141 = bitcast %"union.absl::container_internal::map_slot_type.21"* %140 to i8*
  %142 = bitcast %"union.absl::container_internal::map_slot_type.21"* %140 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %142, align 8
  %143 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.21", %"union.absl::container_internal::map_slot_type.21"* %139, i64 %70, i32 0, i32 1
  %144 = bitcast i64* %143 to i8*
  store i8 %122, i8* %144, align 8
  %145 = getelementptr inbounds i8, i8* %141, i64 17
  store i8 %124, i8* %145, align 1
  %146 = getelementptr inbounds i8, i8* %141, i64 18
  store i8 %126, i8* %146, align 2
  %147 = getelementptr inbounds i8, i8* %141, i64 19
  store i8 %128, i8* %147, align 1
  %148 = getelementptr inbounds i8, i8* %141, i64 20
  store i8 %130, i8* %148, align 4
  %149 = getelementptr inbounds i8, i8* %141, i64 21
  store i8 %132, i8* %149, align 1
  %150 = getelementptr inbounds i8, i8* %141, i64 22
  store i8 %134, i8* %150, align 2
  %151 = getelementptr inbounds i8, i8* %141, i64 23
  store i8 %136, i8* %151, align 1
  %152 = add i64 %20, -1
  br label %153

153:                                              ; preds = %76, %115, %101, %19
  %154 = phi i64 [ %20, %19 ], [ %20, %76 ], [ %20, %101 ], [ %152, %115 ]
  %155 = add i64 %154, 1
  %156 = load i64, i64* %4, align 8
  %157 = icmp eq i64 %155, %156
  br i1 %157, label %11, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"*, %"struct.spdy::HpackLookupEntry"* dereferenceable(32), i64) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %2, 7
  %9 = ptrtoint i8* %5 to i64
  %10 = lshr i64 %9, 12
  %11 = xor i64 %10, %8
  %12 = trunc i64 %2 to i8
  %13 = and i8 %12, 127
  %14 = insertelement <16 x i8> undef, i8 %13, i32 0
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> zeroinitializer
  %16 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %20, 0
  %26 = icmp eq i64 %24, 0
  br label %27

27:                                               ; preds = %77, %3
  %28 = phi i64 [ %11, %3 ], [ %79, %77 ]
  %29 = phi i64 [ 0, %3 ], [ %78, %77 ]
  %30 = and i64 %28, %7
  %31 = getelementptr inbounds i8, i8* %5, i64 %30
  %32 = bitcast i8* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1
  %34 = icmp eq <16 x i8> %15, %33
  %35 = bitcast <16 x i1> %34 to i16
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %27
  %38 = zext i16 %35 to i32
  %39 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %16, align 8
  br label %40

40:                                               ; preds = %37, %66
  %41 = phi i32 [ %38, %37 ], [ %68, %66 ]
  %42 = tail call i32 @llvm.cttz.i32(i32 %41, i1 false) #12, !range !21
  %43 = zext i32 %42 to i64
  %44 = add i64 %30, %43
  %45 = and i64 %44, %7
  %46 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45
  %47 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %52, label %66, !prof !76

52:                                               ; preds = %40
  br i1 %25, label %56, label %53

53:                                               ; preds = %52
  %54 = tail call i32 @bcmp(i8* %48, i8* %18, i64 %20) #12
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %66, !prof !76

56:                                               ; preds = %53, %52
  %57 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 1, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 1, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, %24
  br i1 %61, label %62, label %66, !prof !76

62:                                               ; preds = %56
  br i1 %26, label %70, label %63

63:                                               ; preds = %62
  %64 = tail call i32 @bcmp(i8* %58, i8* %22, i64 %24) #12
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %70, label %66, !prof !2

66:                                               ; preds = %40, %56, %53, %63
  %67 = add i32 %41, -1
  %68 = and i32 %67, %41
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %73, label %40

70:                                               ; preds = %62, %63
  %71 = getelementptr inbounds i8, i8* %5, i64 %45
  %72 = icmp ne i8* %71, null
  tail call void @llvm.assume(i1 %72) #12
  br label %80

73:                                               ; preds = %66, %27
  %74 = icmp eq <16 x i8> %33, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %75 = bitcast <16 x i1> %74 to i16
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %77, label %80, !prof !77

77:                                               ; preds = %73
  %78 = add i64 %29, 16
  %79 = add i64 %78, %30
  br label %27

80:                                               ; preds = %73, %70
  %81 = phi %"union.absl::container_internal::map_slot_type"* [ %46, %70 ], [ undef, %73 ]
  %82 = phi i8* [ %71, %70 ], [ null, %73 ]
  %83 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type"* } undef, i8* %82, 0
  %84 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %83, %"union.absl::container_internal::map_slot_type"* %81, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type"* } %84
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #12
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #12
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #16
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6quiche19QuicheCircularDequeIN4spdy10HpackEntryELm3ENSt3__19allocatorIS2_EEE8RelocateEm(%"class.quiche::QuicheCircularDeque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %4
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %6
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i64 [ %11, %8 ], [ %6, %2 ]
  %14 = sub i64 %13, %4
  %15 = add i64 %1, 1
  %16 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2
  %17 = icmp ugt i64 %15, 384307168202282325
  br i1 %17, label %18, label %19

18:                                               ; preds = %12
  tail call void @abort() #15
  unreachable

19:                                               ; preds = %12
  %20 = mul i64 %15, 48
  %21 = tail call i8* @_Znwm(i64 %20) #16
  %22 = bitcast i8* %21 to %"class.spdy::HpackEntry"*
  %23 = icmp ult i64 %4, %6
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  %26 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %27 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %26, i64 %6
  %28 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %26, i64 %4
  br label %29

29:                                               ; preds = %45, %24
  %30 = phi %"class.spdy::HpackEntry"* [ %47, %45 ], [ %28, %24 ]
  %31 = phi %"class.spdy::HpackEntry"* [ %46, %45 ], [ %22, %24 ]
  %32 = bitcast %"class.spdy::HpackEntry"* %31 to i8*
  %33 = bitcast %"class.spdy::HpackEntry"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #12
  %34 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 0, i32 1
  %35 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %30, i64 0, i32 1
  %36 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %37 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #12
  %38 = bitcast %"class.spdy::HpackEntry"* %30 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %29
  %43 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  tail call void @_ZdlPv(i8* %44) #16
  br label %45

45:                                               ; preds = %42, %29
  %46 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 1
  %47 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %30, i64 1
  %48 = icmp eq %"class.spdy::HpackEntry"* %47, %27
  br i1 %48, label %110, label %29

49:                                               ; preds = %19
  br i1 %7, label %50, label %110

50:                                               ; preds = %49
  %51 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %52, %4
  %54 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 0
  %55 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, align 8
  %56 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %55, i64 %52
  %57 = icmp eq i64 %52, %4
  br i1 %57, label %83, label %58

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %55, i64 %4
  br label %60

60:                                               ; preds = %76, %58
  %61 = phi %"class.spdy::HpackEntry"* [ %78, %76 ], [ %59, %58 ]
  %62 = phi %"class.spdy::HpackEntry"* [ %77, %76 ], [ %22, %58 ]
  %63 = bitcast %"class.spdy::HpackEntry"* %62 to i8*
  %64 = bitcast %"class.spdy::HpackEntry"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 24, i1 false) #12
  %65 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %62, i64 0, i32 1
  %66 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %61, i64 0, i32 1
  %67 = bitcast %"class.std::__1::basic_string"* %65 to i8*
  %68 = bitcast %"class.std::__1::basic_string"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #12
  %69 = bitcast %"class.spdy::HpackEntry"* %61 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %60
  %74 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  tail call void @_ZdlPv(i8* %75) #16
  br label %76

76:                                               ; preds = %73, %60
  %77 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %62, i64 1
  %78 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %61, i64 1
  %79 = icmp eq %"class.spdy::HpackEntry"* %78, %56
  br i1 %79, label %80, label %60

80:                                               ; preds = %76
  %81 = load i64, i64* %5, align 8
  %82 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, align 8
  br label %83

83:                                               ; preds = %80, %50
  %84 = phi %"class.spdy::HpackEntry"* [ %82, %80 ], [ %55, %50 ]
  %85 = phi i64 [ %81, %80 ], [ %6, %50 ]
  %86 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %84, i64 %85
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %110, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %22, i64 %53
  br label %90

90:                                               ; preds = %88, %106
  %91 = phi %"class.spdy::HpackEntry"* [ %108, %106 ], [ %84, %88 ]
  %92 = phi %"class.spdy::HpackEntry"* [ %107, %106 ], [ %89, %88 ]
  %93 = bitcast %"class.spdy::HpackEntry"* %92 to i8*
  %94 = bitcast %"class.spdy::HpackEntry"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 24, i1 false) #12
  %95 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %92, i64 0, i32 1
  %96 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %91, i64 0, i32 1
  %97 = bitcast %"class.std::__1::basic_string"* %95 to i8*
  %98 = bitcast %"class.std::__1::basic_string"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 24, i1 false) #12
  %99 = bitcast %"class.spdy::HpackEntry"* %91 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %99, i64 0, i32 1, i32 0
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %90
  %104 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  tail call void @_ZdlPv(i8* %105) #16
  br label %106

106:                                              ; preds = %103, %90
  %107 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %92, i64 1
  %108 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %91, i64 1
  %109 = icmp eq %"class.spdy::HpackEntry"* %108, %86
  br i1 %109, label %110, label %90

110:                                              ; preds = %106, %45, %83, %49
  %111 = getelementptr inbounds %"class.quiche::QuicheCircularDeque", %"class.quiche::QuicheCircularDeque"* %0, i64 0, i32 2, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %112, 0
  %114 = bitcast %"struct.quiche::QuicheCircularDeque<spdy::HpackEntry, 3, std::__1::allocator<spdy::HpackEntry> >::AllocatorAndData"* %16 to i8**
  br i1 %113, label %117, label %115

115:                                              ; preds = %110
  %116 = load i8*, i8** %114, align 8
  tail call void @_ZdlPv(i8* %116) #16
  br label %117

117:                                              ; preds = %110, %115
  store i8* %21, i8** %114, align 8
  store i64 %15, i64* %111, align 8
  store i64 0, i64* %3, align 8
  store i64 %14, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !93
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !93
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %56, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %56
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %56, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %57, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %99
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !93
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %98, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %138, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %140, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !93
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !93
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %142
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !93
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %142, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !93
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %143
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %143, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %143, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !93
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %98, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %272, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %274, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !93
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !93
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !93
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %276
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !93
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %277
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %277, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %277, %306 ], [ %277, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !93
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %142, %165 ], [ %276, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !93
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !93
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !93
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { noreturn nounwind }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!6 = !{!7, !9, !11, !13, !15, !17, !19}
!7 = distinct !{!7, !8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE: argument 0"}
!10 = distinct !{!10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE"}
!11 = distinct !{!11, !12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_: argument 0"}
!12 = distinct !{!12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_"}
!13 = distinct !{!13, !14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_: argument 0"}
!14 = distinct !{!14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_"}
!15 = distinct !{!15, !16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_: argument 0"}
!16 = distinct !{!16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_"}
!17 = distinct !{!17, !18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_: argument 0"}
!18 = distinct !{!18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_"}
!19 = distinct !{!19, !20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE: argument 0"}
!20 = distinct !{!20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE"}
!21 = !{i32 0, i32 33}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!24 = distinct !{!24, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!25 = !{!26, !28, !30, !32, !34, !36, !38}
!26 = distinct !{!26, !27, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_: argument 0"}
!27 = distinct !{!27, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_"}
!28 = distinct !{!28, !29, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE: argument 0"}
!29 = distinct !{!29, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE"}
!30 = distinct !{!30, !31, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_: argument 0"}
!31 = distinct !{!31, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_"}
!32 = distinct !{!32, !33, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_: argument 0"}
!33 = distinct !{!33, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_"}
!34 = distinct !{!34, !35, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_: argument 0"}
!35 = distinct !{!35, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_"}
!36 = distinct !{!36, !37, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_: argument 0"}
!37 = distinct !{!37, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_"}
!38 = distinct !{!38, !39, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE: argument 0"}
!39 = distinct !{!39, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE"}
!40 = !{!41, !43, !45, !47, !49, !51, !53}
!41 = distinct !{!41, !42, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_: argument 0"}
!42 = distinct !{!42, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_"}
!43 = distinct !{!43, !44, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE: argument 0"}
!44 = distinct !{!44, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE"}
!45 = distinct !{!45, !46, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_: argument 0"}
!46 = distinct !{!46, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_"}
!47 = distinct !{!47, !48, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_: argument 0"}
!48 = distinct !{!48, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_"}
!49 = distinct !{!49, !50, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_: argument 0"}
!50 = distinct !{!50, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_"}
!51 = distinct !{!51, !52, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_: argument 0"}
!52 = distinct !{!52, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_"}
!53 = distinct !{!53, !54, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE: argument 0"}
!54 = distinct !{!54, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE"}
!55 = !{!56, !58, !60, !62, !64, !66, !68}
!56 = distinct !{!56, !57, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_: argument 0"}
!57 = distinct !{!57, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_"}
!58 = distinct !{!58, !59, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE: argument 0"}
!59 = distinct !{!59, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE"}
!60 = distinct !{!60, !61, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_: argument 0"}
!61 = distinct !{!61, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_"}
!62 = distinct !{!62, !63, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_: argument 0"}
!63 = distinct !{!63, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_"}
!64 = distinct !{!64, !65, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_: argument 0"}
!65 = distinct !{!65, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_"}
!66 = distinct !{!66, !67, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_: argument 0"}
!67 = distinct !{!67, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_"}
!68 = distinct !{!68, !69, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE: argument 0"}
!69 = distinct !{!69, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!72 = distinct !{!72, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!75 = distinct !{!75, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!76 = !{!"branch_weights", i32 2146410443, i32 1073205}
!77 = !{!"branch_weights", i32 1, i32 2000}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!80 = distinct !{!80, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!83 = distinct !{!83, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE16__construct_nodeIJNS_4pairIKmS5_EEEEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINSB_ISL_EEEEEEDpOT_: argument 0"}
!86 = distinct !{!86, !"_ZNSt3__16__treeINS_12__value_typeImPN4quic23QpackDecoderHeaderTable8ObserverEEENS_19__map_value_compareImS6_NS_4lessImEELb1EEENS_9allocatorIS6_EEE16__construct_nodeIJNS_4pairIKmS5_EEEEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINSB_ISL_EEEEEEDpOT_"}
!87 = distinct !{!87, !88}
!88 = !{!"llvm.loop.unroll.disable"}
!89 = distinct !{!89, !88}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !88}
!92 = distinct !{!92, !88}
!93 = !{i8 0, i8 2}
