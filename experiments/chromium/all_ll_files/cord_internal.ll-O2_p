; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/cord_internal.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/cord_internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.absl::cord_internal::CordRep" = type <{ i64, %"class.absl::cord_internal::Refcount", i8, [1 x i8], [2 x i8] }>
%"class.absl::cord_internal::Refcount" = type { %"struct.std::__1::atomic.0" }
%"struct.std::__1::atomic.0" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i32 }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.5" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.5" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Allocated", [360 x i8] }
%"struct.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Allocated" = type { %"struct.absl::cord_internal::CordRep"**, i64 }
%"class.absl::cord_internal::CordRepRing" = type { %"struct.absl::cord_internal::CordRep.base", i32, i32, i32, i64, [8 x i8] }
%"struct.absl::cord_internal::CordRep.base" = type <{ i64, %"class.absl::cord_internal::Refcount", i8, [1 x i8] }>
%"struct.absl::cord_internal::CordRepExternal" = type { %"struct.absl::cord_internal::CordRep.base", i8*, void (%"struct.absl::cord_internal::CordRepExternal"*)* }

$_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15EmplaceBackSlowIJRKS4_EEERS4_DpOT_ = comdat any

@_ZN4absl13cord_internal24cord_ring_buffer_enabledE = hidden local_unnamed_addr global { { i8 } } zeroinitializer, align 1
@_ZN4absl13cord_internal24shallow_subcords_enabledE = hidden local_unnamed_addr global { { i8 } } zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal7CordRep7DestroyEPS1_(%"struct.absl::cord_internal::CordRep"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::InlinedVector", align 8
  %3 = alloca %"struct.absl::cord_internal::CordRep"*, align 8
  %4 = bitcast %"class.absl::InlinedVector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0, i32 1
  %6 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 376, i1 false)
  %7 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = bitcast %"struct.absl::cord_internal::CordRep"** %3 to i8*
  %9 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0, i32 1, i32 0, i32 1
  %10 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0, i32 1
  %11 = ptrtoint %"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data"* %10 to i64
  %12 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = bitcast %"struct.absl::cord_internal::CordRep"*** %12 to i64*
  %14 = bitcast %"struct.absl::cord_internal::CordRep"** %3 to i64*
  %15 = getelementptr inbounds %"class.absl::InlinedVector", %"class.absl::InlinedVector"* %2, i64 0, i32 0
  %16 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data"* %10 to %"struct.absl::cord_internal::CordRep"**
  br label %17

17:                                               ; preds = %84, %1
  %18 = phi %"struct.absl::cord_internal::CordRep"* [ %0, %1 ], [ %85, %84 ]
  %19 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %18, i64 0, i32 2
  %20 = load i8, i8* %19, align 4
  switch i8 %20, label %89 [
    i8 0, label %21
    i8 3, label %66
    i8 1, label %68
    i8 2, label %73
  ]

21:                                               ; preds = %17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %22 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %18, i64 1, i32 1
  %23 = bitcast %"class.absl::cord_internal::Refcount"* %22 to %"struct.absl::cord_internal::CordRep"**
  %24 = load %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %23, align 8
  store %"struct.absl::cord_internal::CordRep"* %24, %"struct.absl::cord_internal::CordRep"** %3, align 8
  %25 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %24, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %31, label %28

28:                                               ; preds = %21
  %29 = atomicrmw sub i32* %25, i32 2 acq_rel
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %31, label %50

31:                                               ; preds = %28, %21
  %32 = load i64, i64* %7, align 8, !noalias !2
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  %35 = load i64, i64* %9, align 8
  %36 = select i1 %34, i64 47, i64 %35
  %37 = lshr i64 %32, 1
  %38 = icmp eq i64 %37, %36
  br i1 %38, label %48, label %39, !prof !5

39:                                               ; preds = %31
  %40 = load i64, i64* %13, align 8
  %41 = select i1 %34, i64 %11, i64 %40
  %42 = inttoptr i64 %41 to %"struct.absl::cord_internal::CordRep"**
  %43 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %42, i64 %37
  %44 = bitcast %"struct.absl::cord_internal::CordRep"** %43 to i64*
  %45 = load i64, i64* %14, align 8
  store i64 %45, i64* %44, align 8
  %46 = load i64, i64* %7, align 8
  %47 = add i64 %46, 2
  store i64 %47, i64* %7, align 8
  br label %50

48:                                               ; preds = %31
  %49 = call dereferenceable(8) %"struct.absl::cord_internal::CordRep"** @_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15EmplaceBackSlowIJRKS4_EEERS4_DpOT_(%"class.absl::inlined_vector_internal::Storage"* nonnull %15, %"struct.absl::cord_internal::CordRep"** nonnull dereferenceable(8) %3) #7
  br label %50

50:                                               ; preds = %28, %48, %39
  %51 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %18, i64 1
  %52 = bitcast %"struct.absl::cord_internal::CordRep"* %51 to %"struct.absl::cord_internal::CordRep"**
  %53 = load %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %52, align 8
  %54 = icmp eq %"struct.absl::cord_internal::CordRep"* %18, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %50
  %56 = bitcast %"struct.absl::cord_internal::CordRep"* %18 to i8*
  call void @_ZdlPv(i8* %56) #8
  br label %57

57:                                               ; preds = %55, %50
  %58 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %53, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 acquire, align 4
  %60 = icmp eq i32 %59, 2
  br i1 %60, label %65, label %61

61:                                               ; preds = %57
  %62 = atomicrmw sub i32* %58, i32 2 acq_rel
  %63 = icmp eq i32 %62, 2
  br i1 %63, label %65, label %64

64:                                               ; preds = %61
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  br label %91

65:                                               ; preds = %61, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  br label %84

66:                                               ; preds = %17
  %67 = bitcast %"struct.absl::cord_internal::CordRep"* %18 to %"class.absl::cord_internal::CordRepRing"*
  call void @_ZN4absl13cord_internal11CordRepRing7DestroyEPS1_(%"class.absl::cord_internal::CordRepRing"* %67) #7
  br label %91

68:                                               ; preds = %17
  %69 = bitcast %"struct.absl::cord_internal::CordRep"* %18 to %"struct.absl::cord_internal::CordRepExternal"*
  %70 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %18, i64 1, i32 1
  %71 = bitcast %"class.absl::cord_internal::Refcount"* %70 to void (%"struct.absl::cord_internal::CordRepExternal"*)**
  %72 = load void (%"struct.absl::cord_internal::CordRepExternal"*)*, void (%"struct.absl::cord_internal::CordRepExternal"*)** %71, align 8
  call void %72(%"struct.absl::cord_internal::CordRepExternal"* %69) #7
  br label %91

73:                                               ; preds = %17
  %74 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %18, i64 1, i32 1
  %75 = bitcast %"class.absl::cord_internal::Refcount"* %74 to %"struct.absl::cord_internal::CordRep"**
  %76 = load %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %75, align 8
  %77 = icmp eq %"struct.absl::cord_internal::CordRep"* %18, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %73
  %79 = bitcast %"struct.absl::cord_internal::CordRep"* %18 to i8*
  call void @_ZdlPv(i8* %79) #8
  br label %80

80:                                               ; preds = %78, %73
  %81 = getelementptr inbounds %"struct.absl::cord_internal::CordRep", %"struct.absl::cord_internal::CordRep"* %76, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = icmp eq i32 %82, 2
  br i1 %83, label %84, label %86

84:                                               ; preds = %80, %86, %96, %65
  %85 = phi %"struct.absl::cord_internal::CordRep"* [ %102, %96 ], [ %53, %65 ], [ %76, %86 ], [ %76, %80 ]
  br label %17

86:                                               ; preds = %80
  %87 = atomicrmw sub i32* %81, i32 2 acq_rel
  %88 = icmp eq i32 %87, 2
  br i1 %88, label %84, label %91

89:                                               ; preds = %17
  %90 = bitcast %"struct.absl::cord_internal::CordRep"* %18 to i8*
  call void @_ZdlPv(i8* %90) #7
  br label %91

91:                                               ; preds = %86, %64, %66, %89, %68
  %92 = load i64, i64* %7, align 8
  %93 = icmp ult i64 %92, 2
  %94 = and i64 %92, 1
  %95 = icmp eq i64 %94, 0
  br i1 %93, label %104, label %96

96:                                               ; preds = %91
  %97 = load %"struct.absl::cord_internal::CordRep"**, %"struct.absl::cord_internal::CordRep"*** %12, align 8
  %98 = select i1 %95, %"struct.absl::cord_internal::CordRep"** %16, %"struct.absl::cord_internal::CordRep"** %97
  %99 = lshr i64 %92, 1
  %100 = add nsw i64 %99, -1
  %101 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %98, i64 %100
  %102 = load %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %101, align 8
  %103 = add i64 %92, -2
  store i64 %103, i64* %7, align 8
  br label %84

104:                                              ; preds = %91
  br i1 %95, label %108, label %105

105:                                              ; preds = %104
  %106 = bitcast %"struct.absl::cord_internal::CordRep"*** %12 to i8**
  %107 = load i8*, i8** %106, align 8
  call void @_ZdlPv(i8* %107) #8
  br label %108

108:                                              ; preds = %104, %105
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %4) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4absl13cord_internal11CordRepRing7DestroyEPS1_(%"class.absl::cord_internal::CordRepRing"*) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"struct.absl::cord_internal::CordRep"** @_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15EmplaceBackSlowIJRKS4_EEERS4_DpOT_(%"class.absl::inlined_vector_internal::Storage"*, %"struct.absl::cord_internal::CordRep"** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !6
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<absl::cord_internal::CordRep *, 47, std::__1::allocator<absl::cord_internal::CordRep *> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast %"struct.absl::cord_internal::CordRep"*** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !6
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !6
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 2305843009213693951
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #9
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 94, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = lshr i64 %4, 1
  %23 = shl i64 %20, 3
  %24 = tail call i8* @_Znwm(i64 %23) #8
  %25 = bitcast i8* %24 to %"struct.absl::cord_internal::CordRep"**
  %26 = ptrtoint i8* %24 to i64
  %27 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %22
  %28 = bitcast %"struct.absl::cord_internal::CordRep"** %27 to i64*
  %29 = bitcast %"struct.absl::cord_internal::CordRep"** %1 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %28, align 8
  %31 = icmp eq i64 %22, 0
  br i1 %31, label %115, label %32

32:                                               ; preds = %19
  %33 = inttoptr i64 %21 to %"struct.absl::cord_internal::CordRep"**
  %34 = inttoptr i64 %21 to i64*
  %35 = add nsw i64 %22, -1
  %36 = and i64 %22, 7
  %37 = icmp ult i64 %35, 7
  br i1 %37, label %97, label %38

38:                                               ; preds = %32
  %39 = sub nsw i64 %22, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi %"struct.absl::cord_internal::CordRep"** [ %33, %38 ], [ %90, %40 ]
  %42 = phi i64* [ %34, %38 ], [ %92, %40 ]
  %43 = phi i64 [ 0, %38 ], [ %91, %40 ]
  %44 = phi i64 [ %39, %38 ], [ %93, %40 ]
  %45 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %43
  %46 = bitcast %"struct.absl::cord_internal::CordRep"** %45 to i64*
  %47 = load i64, i64* %42, align 8
  store i64 %47, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 1
  %49 = or i64 %43, 1
  %50 = bitcast %"struct.absl::cord_internal::CordRep"** %48 to i64*
  %51 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %49
  %52 = bitcast %"struct.absl::cord_internal::CordRep"** %51 to i64*
  %53 = load i64, i64* %50, align 8
  store i64 %53, i64* %52, align 8
  %54 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 2
  %55 = or i64 %43, 2
  %56 = bitcast %"struct.absl::cord_internal::CordRep"** %54 to i64*
  %57 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %55
  %58 = bitcast %"struct.absl::cord_internal::CordRep"** %57 to i64*
  %59 = load i64, i64* %56, align 8
  store i64 %59, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 3
  %61 = or i64 %43, 3
  %62 = bitcast %"struct.absl::cord_internal::CordRep"** %60 to i64*
  %63 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %61
  %64 = bitcast %"struct.absl::cord_internal::CordRep"** %63 to i64*
  %65 = load i64, i64* %62, align 8
  store i64 %65, i64* %64, align 8
  %66 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 4
  %67 = or i64 %43, 4
  %68 = bitcast %"struct.absl::cord_internal::CordRep"** %66 to i64*
  %69 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %67
  %70 = bitcast %"struct.absl::cord_internal::CordRep"** %69 to i64*
  %71 = load i64, i64* %68, align 8
  store i64 %71, i64* %70, align 8
  %72 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 5
  %73 = or i64 %43, 5
  %74 = bitcast %"struct.absl::cord_internal::CordRep"** %72 to i64*
  %75 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %73
  %76 = bitcast %"struct.absl::cord_internal::CordRep"** %75 to i64*
  %77 = load i64, i64* %74, align 8
  store i64 %77, i64* %76, align 8
  %78 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 6
  %79 = or i64 %43, 6
  %80 = bitcast %"struct.absl::cord_internal::CordRep"** %78 to i64*
  %81 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %79
  %82 = bitcast %"struct.absl::cord_internal::CordRep"** %81 to i64*
  %83 = load i64, i64* %80, align 8
  store i64 %83, i64* %82, align 8
  %84 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 7
  %85 = or i64 %43, 7
  %86 = bitcast %"struct.absl::cord_internal::CordRep"** %84 to i64*
  %87 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %85
  %88 = bitcast %"struct.absl::cord_internal::CordRep"** %87 to i64*
  %89 = load i64, i64* %86, align 8
  store i64 %89, i64* %88, align 8
  %90 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %41, i64 8
  %91 = add nuw nsw i64 %43, 8
  %92 = bitcast %"struct.absl::cord_internal::CordRep"** %90 to i64*
  %93 = add i64 %44, -8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %40

95:                                               ; preds = %40
  %96 = bitcast %"struct.absl::cord_internal::CordRep"** %90 to i64*
  br label %97

97:                                               ; preds = %95, %32
  %98 = phi %"struct.absl::cord_internal::CordRep"** [ %33, %32 ], [ %90, %95 ]
  %99 = phi i64* [ %34, %32 ], [ %96, %95 ]
  %100 = phi i64 [ 0, %32 ], [ %91, %95 ]
  %101 = icmp eq i64 %36, 0
  br i1 %101, label %115, label %102

102:                                              ; preds = %97, %102
  %103 = phi %"struct.absl::cord_internal::CordRep"** [ %110, %102 ], [ %98, %97 ]
  %104 = phi i64* [ %112, %102 ], [ %99, %97 ]
  %105 = phi i64 [ %111, %102 ], [ %100, %97 ]
  %106 = phi i64 [ %113, %102 ], [ %36, %97 ]
  %107 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %25, i64 %105
  %108 = bitcast %"struct.absl::cord_internal::CordRep"** %107 to i64*
  %109 = load i64, i64* %104, align 8
  store i64 %109, i64* %108, align 8
  %110 = getelementptr inbounds %"struct.absl::cord_internal::CordRep"*, %"struct.absl::cord_internal::CordRep"** %103, i64 1
  %111 = add nuw nsw i64 %105, 1
  %112 = bitcast %"struct.absl::cord_internal::CordRep"** %110 to i64*
  %113 = add i64 %106, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %102, !llvm.loop !9

115:                                              ; preds = %97, %102, %19
  br i1 %6, label %121, label %116

116:                                              ; preds = %115
  %117 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %118 = bitcast %"struct.absl::cord_internal::CordRep"*** %117 to i8**
  %119 = load i8*, i8** %118, align 8
  tail call void @_ZdlPv(i8* %119) #8
  %120 = load i64, i64* %3, align 8
  br label %121

121:                                              ; preds = %116, %115
  %122 = phi i64 [ %120, %116 ], [ %4, %115 ]
  %123 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %124 = bitcast %"struct.absl::cord_internal::CordRep"*** %123 to i64*
  store i64 %26, i64* %124, align 8
  %125 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %125, align 8
  %126 = or i64 %122, 1
  %127 = add i64 %126, 2
  store i64 %127, i64* %3, align 8
  ret %"struct.absl::cord_internal::CordRep"** %27
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15MakeStorageViewEv: argument 0"}
!4 = distinct !{!4, !"_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15MakeStorageViewEv"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15MakeStorageViewEv: argument 0"}
!8 = distinct !{!8, !"_ZN4absl23inlined_vector_internal7StorageIPNS_13cord_internal7CordRepELm47ENSt3__19allocatorIS4_EEE15MakeStorageViewEv"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
