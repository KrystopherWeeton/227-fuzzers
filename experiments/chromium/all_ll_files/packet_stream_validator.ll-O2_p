; ModuleID = '../../third_party/perfetto/src/tracing/core/packet_stream_validator.cc'
source_filename = "../../third_party/perfetto/src/tracing/core/packet_stream_validator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.perfetto::Slice"*, %"struct.perfetto::Slice"*, %"class.std::__1::__compressed_pair.1" }
%"struct.perfetto::Slice" = type { i8*, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.perfetto::Slice"* }

@switch.table._ZN8perfetto21PacketStreamValidator8ValidateERKNSt3__16vectorINS_5SliceENS1_9allocatorIS3_EEEE = private unnamed_addr constant [6 x i32] [i32 1, i32 0, i32 2, i32 4, i32 4, i32 0], align 4
@switch.table._ZN8perfetto21PacketStreamValidator8ValidateERKNSt3__16vectorINS_5SliceENS1_9allocatorIS3_EEEE.1 = private unnamed_addr constant [6 x i64] [i64 0, i64 8, i64 0, i64 0, i64 0, i64 4], align 8

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN8perfetto21PacketStreamValidator8ValidateERKNSt3__16vectorINS_5SliceENS1_9allocatorIS3_EEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %3 = load %"struct.perfetto::Slice"*, %"struct.perfetto::Slice"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = load %"struct.perfetto::Slice"*, %"struct.perfetto::Slice"** %4, align 8
  %6 = icmp eq %"struct.perfetto::Slice"* %3, %5
  br i1 %6, label %18, label %7

7:                                                ; preds = %1, %26
  %8 = phi i32 [ %30, %26 ], [ 0, %1 ]
  %9 = phi i64 [ %29, %26 ], [ 0, %1 ]
  %10 = phi %"struct.perfetto::Slice"* [ %31, %26 ], [ %3, %1 ]
  %11 = phi i64 [ %28, %26 ], [ 0, %1 ]
  %12 = phi i32 [ %27, %26 ], [ 0, %1 ]
  %13 = getelementptr inbounds %"struct.perfetto::Slice", %"struct.perfetto::Slice"* %10, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"struct.perfetto::Slice", %"struct.perfetto::Slice"* %10, i64 0, i32 0
  br label %33

18:                                               ; preds = %26, %1
  %19 = phi i32 [ 0, %1 ], [ %27, %26 ]
  %20 = phi i64 [ 0, %1 ], [ %28, %26 ]
  %21 = phi i32 [ 0, %1 ], [ %30, %26 ]
  %22 = icmp eq i64 %20, 0
  %23 = or i32 %21, %19
  %24 = icmp eq i32 %23, 0
  %25 = and i1 %22, %24
  ret i1 %25

26:                                               ; preds = %77, %7
  %27 = phi i32 [ %12, %7 ], [ %78, %77 ]
  %28 = phi i64 [ %11, %7 ], [ %81, %77 ]
  %29 = phi i64 [ %9, %7 ], [ %79, %77 ]
  %30 = phi i32 [ %8, %7 ], [ %80, %77 ]
  %31 = getelementptr inbounds %"struct.perfetto::Slice", %"struct.perfetto::Slice"* %10, i64 1
  %32 = icmp eq %"struct.perfetto::Slice"* %31, %5
  br i1 %32, label %18, label %7

33:                                               ; preds = %16, %77
  %34 = phi i64 [ 0, %16 ], [ %83, %77 ]
  %35 = phi i32 [ %8, %16 ], [ %80, %77 ]
  %36 = phi i64 [ %9, %16 ], [ %79, %77 ]
  %37 = phi i64 [ %11, %16 ], [ %81, %77 ]
  %38 = phi i32 [ %12, %16 ], [ %78, %77 ]
  %39 = sub i64 %14, %34
  %40 = icmp ult i64 %39, %37
  %41 = select i1 %40, i64 %39, i64 %37
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %33
  %44 = sub i64 %37, %41
  br label %77

45:                                               ; preds = %33
  %46 = load i8*, i8** %17, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 %34
  %48 = load i8, i8* %47, align 1
  %49 = and i8 %48, 127
  %50 = zext i8 %49 to i64
  %51 = zext i32 %35 to i64
  %52 = shl i64 %50, %51
  %53 = or i64 %52, %36
  %54 = icmp slt i8 %48, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %45
  %56 = add i32 %35, 7
  %57 = icmp ugt i32 %56, 63
  %58 = select i1 %57, i32 6, i32 %38
  %59 = select i1 %57, i32 0, i32 %56
  br label %77

60:                                               ; preds = %45
  switch i32 %38, label %77 [
    i32 0, label %61
    i32 1, label %64
    i32 2, label %65
  ]

61:                                               ; preds = %60
  %62 = lshr i64 %53, 3
  %63 = trunc i64 %62 to i32
  switch i32 %63, label %69 [
    i32 3, label %77
    i32 10, label %77
    i32 33, label %77
    i32 35, label %77
    i32 50, label %77
    i32 36, label %77
  ]

64:                                               ; preds = %60
  br label %77

65:                                               ; preds = %60
  %66 = icmp ugt i64 %53, 268435455
  %67 = select i1 %66, i32 5, i32 0
  %68 = select i1 %66, i64 0, i64 %53
  br label %77

69:                                               ; preds = %61
  %70 = and i64 %53, 7
  %71 = icmp ult i64 %70, 6
  br i1 %71, label %72, label %77

72:                                               ; preds = %69
  %73 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table._ZN8perfetto21PacketStreamValidator8ValidateERKNSt3__16vectorINS_5SliceENS1_9allocatorIS3_EEEE, i64 0, i64 %70
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [6 x i64], [6 x i64]* @switch.table._ZN8perfetto21PacketStreamValidator8ValidateERKNSt3__16vectorINS_5SliceENS1_9allocatorIS3_EEEE.1, i64 0, i64 %70
  %76 = load i64, i64* %75, align 8
  br label %77

77:                                               ; preds = %69, %72, %65, %55, %64, %60, %61, %61, %61, %61, %61, %61, %43
  %78 = phi i32 [ %38, %43 ], [ %38, %60 ], [ 0, %64 ], [ 3, %61 ], [ 3, %61 ], [ 3, %61 ], [ 3, %61 ], [ 3, %61 ], [ 3, %61 ], [ %58, %55 ], [ %67, %65 ], [ %74, %72 ], [ 4, %69 ]
  %79 = phi i64 [ %36, %43 ], [ 0, %60 ], [ 0, %64 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ %53, %55 ], [ 0, %65 ], [ 0, %72 ], [ 0, %69 ]
  %80 = phi i32 [ %35, %43 ], [ 0, %60 ], [ 0, %64 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ %59, %55 ], [ 0, %65 ], [ 0, %72 ], [ 0, %69 ]
  %81 = phi i64 [ %44, %43 ], [ 0, %60 ], [ 0, %64 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %61 ], [ 0, %55 ], [ %68, %65 ], [ %76, %72 ], [ 0, %69 ]
  %82 = phi i64 [ %41, %43 ], [ 1, %60 ], [ 1, %64 ], [ 1, %61 ], [ 1, %61 ], [ 1, %61 ], [ 1, %61 ], [ 1, %61 ], [ 1, %61 ], [ 1, %55 ], [ 1, %65 ], [ 1, %72 ], [ 1, %69 ]
  %83 = add i64 %82, %34
  %84 = icmp ugt i64 %14, %83
  br i1 %84, label %33, label %26
}

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
