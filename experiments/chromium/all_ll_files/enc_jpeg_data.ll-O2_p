; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_data.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22", %"class.std::__1::vector.31", %"class.std::__1::vector.45", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.17" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.24", %"struct.std::__1::array.25", i32, i8, [3 x i8] }>
%"struct.std::__1::array.24" = type { [17 x i32] }
%"struct.std::__1::array.25" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.40" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i16*, i16*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i16* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.47", i32, %"class.std::__1::vector.48", %"class.std::__1::vector.55" }
%"struct.std::__1::array.47" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%struct.BrotliEncoderStateStruct = type opaque
%class.anon = type { %"class.jxl::PaddedBytes"**, i64*, i64*, %struct.BrotliEncoderStateStruct**, i64* }
%"struct.jxl::AuxOut" = type opaque
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.99", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.69" }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.76" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.81", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.83" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.88", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.92", i64 }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::vector.106" = type { %"class.std::__1::__vector_base.107" }
%"class.std::__1::__vector_base.107" = type { %"class.jxl::Span"*, %"class.jxl::Span"*, %"class.std::__1::__compressed_pair.108" }
%"class.jxl::Span" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.jxl::Span"* }
%"class.std::__1::vector.113" = type { i64*, i64, %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3jxl22YCbCrChromaSubsampling3SetEPKhS2_ = comdat any

$_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb = comdat any

$_ZNSt3__16vectorIN3jxl4SpanIKhEENS_9allocatorIS4_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_ = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEmRKS3_ = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_data.cc\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"app_markers < jpeg_data->app_data.size()\00", align 1
@_ZN3jxl4jpegL14kIccProfileTagE = internal constant [12 x i8] c"ICC_PROFILE\00", align 1
@_ZN3jxl4jpegL8kExifTagE = internal constant [6 x i8] c"Exif\00\00", align 1
@_ZN3jxl4jpegL7kXMPTagE = internal constant [29 x i8] c"http://ns.adobe.com/xap/1.0/\00", align 16
@.str.13 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.16 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.17 = private unnamed_addr constant [34 x i8] c"bits_written_ % kBitsPerByte == 0\00", align 1
@.str.18 = private unnamed_addr constant [155 x i8] c"BrotliEncoderCompressStream( brotli_enc, last ? BROTLI_OPERATION_FINISH : BROTLI_OPERATION_PROCESS, &available_in, &in, &brotli_capacity, &out, &enc_size)\00", align 1
@.str.19 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.20 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@.str.31 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.32 = private unnamed_addr constant [32 x i8] c"metadata.size.Set(xsize, ysize)\00", align 1
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.33 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl4jpeg8JPEGDataE = external unnamed_addr constant { [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"class.jxl::PaddedBytes"*) local_unnamed_addr #0 {
  %3 = alloca %"class.jxl::PaddedBytes"*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %"struct.jxl::BitWriter", align 8
  %6 = alloca %struct.BrotliEncoderStateStruct*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.anon, align 8
  store %"class.jxl::PaddedBytes"* %1, %"class.jxl::PaddedBytes"** %3, align 8
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %12 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4, i32 0, i32 1
  %14 = bitcast %"class.std::__1::vector.0"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = sdiv exact i64 %18, 24
  %20 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #9
  store i32 0, i32* %4, align 4
  %21 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector.8"* %11 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = ashr exact i64 %26, 2
  %28 = icmp ugt i64 %19, %27
  %29 = inttoptr i64 %25 to i32*
  br i1 %28, label %30, label %34

30:                                               ; preds = %2
  %31 = sub nsw i64 %19, %27
  call void @_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEmRKS3_(%"class.std::__1::vector.8"* %11, i64 %31, i32* nonnull dereferenceable(4) %4) #9
  %32 = load i64, i64* %14, align 8
  %33 = load i64, i64* %16, align 8
  br label %38

34:                                               ; preds = %2
  %35 = icmp ult i64 %19, %27
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = getelementptr inbounds i32, i32* %29, i64 %19
  store i32* %37, i32** %21, align 8
  br label %38

38:                                               ; preds = %30, %34, %36
  %39 = phi i64 [ %33, %30 ], [ %17, %34 ], [ %17, %36 ]
  %40 = phi i64 [ %32, %30 ], [ %15, %34 ], [ %15, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #9
  %41 = icmp eq i64 %40, %39
  br i1 %41, label %166, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 0
  br label %44

44:                                               ; preds = %87, %42
  %45 = phi i64 [ %39, %42 ], [ %88, %87 ]
  %46 = phi i64 [ %40, %42 ], [ %89, %87 ]
  %47 = phi i64 [ 0, %42 ], [ %91, %87 ]
  %48 = phi i64 [ 0, %42 ], [ %90, %87 ]
  %49 = phi i64 [ 0, %42 ], [ %92, %87 ]
  %50 = inttoptr i64 %45 to %"class.std::__1::vector.0"*
  %51 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %50, i64 %49, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, -30
  br i1 %54, label %55, label %87

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %52, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = shl nuw nsw i64 %58, 8
  %60 = getelementptr inbounds i8, i8* %52, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = or i64 %59, %62
  %64 = icmp ult i64 %63, 14
  br i1 %64, label %87, label %65

65:                                               ; preds = %55
  %66 = getelementptr inbounds i8, i8* %52, i64 3
  %67 = call i32 @bcmp(i8* %66, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3jxl4jpegL14kIccProfileTagE, i64 0, i64 0), i64 12) #9
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %87

69:                                               ; preds = %65
  %70 = getelementptr inbounds i8, i8* %52, i64 15
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = add i64 %47, 1
  %74 = icmp eq i64 %73, %72
  br i1 %74, label %75, label %87

75:                                               ; preds = %69
  %76 = getelementptr inbounds i8, i8* %52, i64 16
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i64 %48, 0
  %79 = zext i8 %77 to i64
  %80 = select i1 %78, i64 %79, i64 %48
  %81 = icmp eq i64 %80, %79
  br i1 %81, label %82, label %87

82:                                               ; preds = %75
  %83 = load i32*, i32** %43, align 8
  %84 = getelementptr inbounds i32, i32* %83, i64 %49
  store i32 1, i32* %84, align 4
  %85 = load i64, i64* %14, align 8
  %86 = load i64, i64* %16, align 8
  br label %87

87:                                               ; preds = %82, %75, %69, %65, %55, %44
  %88 = phi i64 [ %45, %44 ], [ %45, %55 ], [ %45, %65 ], [ %86, %82 ], [ %45, %69 ], [ %45, %75 ]
  %89 = phi i64 [ %46, %44 ], [ %46, %55 ], [ %46, %65 ], [ %85, %82 ], [ %46, %69 ], [ %46, %75 ]
  %90 = phi i64 [ %48, %44 ], [ %48, %55 ], [ %48, %65 ], [ %79, %82 ], [ %48, %69 ], [ %80, %75 ]
  %91 = phi i64 [ %47, %44 ], [ %47, %55 ], [ %47, %65 ], [ %72, %82 ], [ %47, %69 ], [ %47, %75 ]
  %92 = add nuw i64 %49, 1
  %93 = sub i64 %89, %88
  %94 = sdiv exact i64 %93, 24
  %95 = icmp ult i64 %92, %94
  br i1 %95, label %44, label %96

96:                                               ; preds = %87
  %97 = icmp eq i64 %91, %90
  br i1 %97, label %98, label %420

98:                                               ; preds = %96
  %99 = icmp eq i64 %89, %88
  br i1 %99, label %166, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 0
  br label %102

102:                                              ; preds = %157, %100
  %103 = phi i64 [ %88, %100 ], [ %162, %157 ]
  %104 = phi i64 [ 0, %100 ], [ %160, %157 ]
  %105 = phi i8 [ 0, %100 ], [ %159, %157 ]
  %106 = phi i8 [ 0, %100 ], [ %158, %157 ]
  %107 = inttoptr i64 %103 to %"class.std::__1::vector.0"*
  %108 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %107, i64 %104, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %107, i64 %104, i32 0, i32 1
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %109, %111
  %113 = ptrtoint i8* %111 to i64
  %114 = ptrtoint i8* %109 to i64
  br i1 %112, label %157, label %115

115:                                              ; preds = %102
  %116 = load i8, i8* %109, align 1
  %117 = icmp eq i8 %116, -31
  br i1 %117, label %118, label %157

118:                                              ; preds = %115
  %119 = sub i64 %113, %114
  %120 = icmp ult i64 %119, 3
  br i1 %120, label %157, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds i8, i8* %109, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds i8, i8* %109, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = shl nuw nsw i64 %124, 8
  %129 = or i64 %128, %127
  %130 = add i64 %119, -1
  %131 = icmp eq i64 %129, %130
  br i1 %131, label %132, label %157

132:                                              ; preds = %121
  %133 = getelementptr inbounds i8, i8* %109, i64 3
  %134 = add i64 %119, -3
  %135 = and i8 %106, 1
  %136 = icmp eq i8 %135, 0
  %137 = icmp ugt i64 %134, 5
  %138 = and i1 %136, %137
  br i1 %138, label %139, label %145

139:                                              ; preds = %132
  %140 = call i32 @bcmp(i8* %133, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @_ZN3jxl4jpegL8kExifTagE, i64 0, i64 0), i64 6) #9
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %139
  %143 = load i32*, i32** %101, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 %104
  store i32 2, i32* %144, align 4
  br label %145

145:                                              ; preds = %142, %139, %132
  %146 = phi i8 [ %106, %132 ], [ %106, %139 ], [ 1, %142 ]
  %147 = and i8 %105, 1
  %148 = icmp eq i8 %147, 0
  %149 = icmp ugt i64 %134, 28
  %150 = and i1 %148, %149
  br i1 %150, label %151, label %157

151:                                              ; preds = %145
  %152 = call i32 @bcmp(i8* %133, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @_ZN3jxl4jpegL7kXMPTagE, i64 0, i64 0), i64 29) #9
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %157

154:                                              ; preds = %151
  %155 = load i32*, i32** %101, align 8
  %156 = getelementptr inbounds i32, i32* %155, i64 %104
  store i32 3, i32* %156, align 4
  br label %157

157:                                              ; preds = %154, %151, %145, %121, %118, %115, %102
  %158 = phi i8 [ %106, %115 ], [ %106, %102 ], [ %146, %151 ], [ %146, %145 ], [ %146, %154 ], [ %106, %118 ], [ %106, %121 ]
  %159 = phi i8 [ %105, %115 ], [ %105, %102 ], [ %105, %151 ], [ %105, %145 ], [ 1, %154 ], [ %105, %118 ], [ %105, %121 ]
  %160 = add nuw i64 %104, 1
  %161 = load i64, i64* %14, align 8
  %162 = load i64, i64* %16, align 8
  %163 = sub i64 %161, %162
  %164 = sdiv exact i64 %163, 24
  %165 = icmp ult i64 %160, %164
  br i1 %165, label %102, label %166

166:                                              ; preds = %157, %38, %98
  %167 = bitcast %"struct.jxl::BitWriter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %167) #9
  %168 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 0
  %169 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 1, i32 1
  %170 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %167, i8 0, i64 40, i1 false) #9
  %171 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0
  %172 = call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %171, %"struct.jxl::BitWriter"* nonnull %5, i64 0, %"struct.jxl::AuxOut"* null) #9
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %414

174:                                              ; preds = %166
  %175 = load i64, i64* %168, align 8
  %176 = add i64 %175, 7
  %177 = and i64 %176, -8
  %178 = sub i64 %177, %175
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %187, label %180

180:                                              ; preds = %174
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %5, i64 %178, i64 0) #9
  %181 = load i64, i64* %168, align 8
  %182 = and i64 %181, 7
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %187, label %184

184:                                              ; preds = %180
  %185 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17, i64 0, i64 0)) #9
  %186 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

187:                                              ; preds = %174, %180
  %188 = phi i64 [ %175, %174 ], [ %181, %180 ]
  %189 = and i64 %188, 7
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %194, label %191

191:                                              ; preds = %187
  %192 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17, i64 0, i64 0)) #9
  %193 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 1
  %196 = lshr i64 %188, 3
  %197 = load i64, i64* %169, align 8
  %198 = icmp ult i64 %197, %196
  br i1 %198, label %199, label %200

199:                                              ; preds = %194
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %195, i64 %196) #9
  br label %200

200:                                              ; preds = %194, %199
  %201 = load i8*, i8** %170, align 8
  %202 = icmp eq i8* %201, null
  %203 = select i1 %202, i64 0, i64 %196
  %204 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %195, i64 0, i32 0
  store i64 %203, i64* %204, align 8
  %205 = load %"class.jxl::PaddedBytes"*, %"class.jxl::PaddedBytes"** %3, align 8
  %206 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %205, i64 0, i32 0
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %169, align 8
  %208 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %205, i64 0, i32 1
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %5, i64 0, i32 1, i32 2
  %210 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %205, i64 0, i32 2
  %211 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %209, i64 0, i32 0, i32 0, i32 0
  %212 = bitcast %"class.std::__1::unique_ptr"* %209 to i64*
  %213 = load i64, i64* %212, align 8
  store i8* null, i8** %211, align 8
  %214 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %210, i64 0, i32 0, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  %216 = bitcast %"class.std::__1::unique_ptr"* %210 to i64*
  store i64 %213, i64* %216, align 8
  %217 = icmp eq i8* %215, null
  br i1 %217, label %219, label %218

218:                                              ; preds = %200
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %215) #9
  br label %219

219:                                              ; preds = %218, %200
  %220 = icmp eq %"class.jxl::PaddedBytes"* %195, %205
  br i1 %220, label %223, label %221

221:                                              ; preds = %219
  %222 = bitcast %"class.jxl::PaddedBytes"* %195 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %222, i8 0, i64 16, i1 false) #9
  br label %223

223:                                              ; preds = %219, %221
  %224 = bitcast %struct.BrotliEncoderStateStruct** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #9
  %225 = call %struct.BrotliEncoderStateStruct* @BrotliEncoderCreateInstance(i8* (i8*, i64)* null, void (i8*, i8*)* null, i8* null) #9
  store %struct.BrotliEncoderStateStruct* %225, %struct.BrotliEncoderStateStruct** %6, align 8
  %226 = call i32 @BrotliEncoderSetParameter(%struct.BrotliEncoderStateStruct* %225, i32 1, i32 11) #9
  %227 = load i64, i64* %14, align 8
  %228 = load i64, i64* %16, align 8
  %229 = icmp eq i64 %227, %228
  %230 = inttoptr i64 %228 to %"class.std::__1::vector.0"*
  br i1 %229, label %236, label %231

231:                                              ; preds = %223
  %232 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %11, i64 0, i32 0, i32 0
  %233 = load i32*, i32** %232, align 8
  %234 = sub i64 %227, %228
  %235 = sdiv exact i64 %234, 24
  br label %249

236:                                              ; preds = %264, %223
  %237 = phi i64 [ 0, %223 ], [ %265, %264 ]
  %238 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %239 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6, i32 0, i32 1
  %240 = bitcast %"class.std::__1::vector.0"** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.std::__1::vector"* %238 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = icmp eq i64 %241, %243
  %245 = inttoptr i64 %243 to %"class.std::__1::vector.0"*
  br i1 %244, label %268, label %246

246:                                              ; preds = %236
  %247 = sub i64 %241, %243
  %248 = sdiv exact i64 %247, 24
  br label %281

249:                                              ; preds = %231, %264
  %250 = phi i64 [ 0, %231 ], [ %266, %264 ]
  %251 = phi i64 [ 0, %231 ], [ %265, %264 ]
  %252 = getelementptr inbounds i32, i32* %233, i64 %250
  %253 = load i32, i32* %252, align 4
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %264

255:                                              ; preds = %249
  %256 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %230, i64 %250
  %257 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %230, i64 %250, i32 0, i32 1
  %258 = bitcast i8** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.std::__1::vector.0"* %256 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = add i64 %259, %251
  %263 = sub i64 %262, %261
  br label %264

264:                                              ; preds = %249, %255
  %265 = phi i64 [ %251, %249 ], [ %263, %255 ]
  %266 = add nuw i64 %250, 1
  %267 = icmp ult i64 %266, %235
  br i1 %267, label %249, label %236

268:                                              ; preds = %281, %236
  %269 = phi i64 [ %237, %236 ], [ %291, %281 ]
  %270 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %271 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 1
  %272 = bitcast %"class.std::__1::vector.0"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::vector"* %270 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = icmp eq i64 %273, %275
  %277 = inttoptr i64 %275 to %"class.std::__1::vector.0"*
  br i1 %276, label %294, label %278

278:                                              ; preds = %268
  %279 = sub i64 %273, %275
  %280 = sdiv exact i64 %279, 24
  br label %335

281:                                              ; preds = %246, %281
  %282 = phi i64 [ 0, %246 ], [ %292, %281 ]
  %283 = phi i64 [ %237, %246 ], [ %291, %281 ]
  %284 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %245, i64 %282
  %285 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %245, i64 %282, i32 0, i32 1
  %286 = bitcast i8** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %"class.std::__1::vector.0"* %284 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = add i64 %287, %283
  %291 = sub i64 %290, %289
  %292 = add nuw i64 %282, 1
  %293 = icmp ult i64 %292, %248
  br i1 %293, label %281, label %268

294:                                              ; preds = %335, %268
  %295 = phi i64 [ %269, %268 ], [ %345, %335 ]
  %296 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %297 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  %298 = bitcast i8** %297 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = bitcast %"class.std::__1::vector.0"* %296 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = sub i64 %299, %301
  %303 = add i64 %302, %295
  %304 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %304) #9
  store i64 -6148914691236517206, i64* %7, align 8
  %305 = load %"class.jxl::PaddedBytes"*, %"class.jxl::PaddedBytes"** %3, align 8
  %306 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %305, i64 0, i32 0
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %7, align 8
  %308 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %308) #9
  %309 = call i64 @BrotliEncoderMaxCompressedSize(i64 %303) #9
  store i64 %309, i64* %8, align 8
  %310 = trunc i64 %303 to i32
  %311 = call i32 @BrotliEncoderSetParameter(%struct.BrotliEncoderStateStruct* %225, i32 5, i32 %310) #9
  %312 = load i64, i64* %306, align 8
  %313 = add i64 %309, %312
  %314 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %305, i64 0, i32 1
  %315 = load i64, i64* %314, align 8
  %316 = icmp ult i64 %315, %313
  br i1 %316, label %317, label %318

317:                                              ; preds = %294
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %305, i64 %313) #9
  br label %318

318:                                              ; preds = %294, %317
  %319 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %305, i64 0, i32 2, i32 0, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  %321 = icmp eq i8* %320, null
  %322 = select i1 %321, i64 0, i64 %313
  store i64 %322, i64* %306, align 8
  %323 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %323) #9
  store i64 0, i64* %9, align 8
  %324 = bitcast %class.anon* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %324) #9
  %325 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 0
  %326 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 1
  %327 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 2
  %328 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 3
  %329 = getelementptr inbounds %class.anon, %class.anon* %10, i64 0, i32 4
  store %"class.jxl::PaddedBytes"** %3, %"class.jxl::PaddedBytes"*** %325, align 8
  store i64* %7, i64** %326, align 8
  store i64* %9, i64** %327, align 8
  store %struct.BrotliEncoderStateStruct** %6, %struct.BrotliEncoderStateStruct*** %328, align 8
  store i64* %8, i64** %329, align 8
  %330 = load i64, i64* %14, align 8
  %331 = load i64, i64* %16, align 8
  %332 = icmp eq i64 %330, %331
  br i1 %332, label %348, label %333

333:                                              ; preds = %318
  %334 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %11, i64 0, i32 0, i32 0
  br label %352

335:                                              ; preds = %278, %335
  %336 = phi i64 [ 0, %278 ], [ %346, %335 ]
  %337 = phi i64 [ %269, %278 ], [ %345, %335 ]
  %338 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %277, i64 %336
  %339 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %277, i64 %336, i32 0, i32 1
  %340 = bitcast i8** %339 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = bitcast %"class.std::__1::vector.0"* %338 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = add i64 %341, %337
  %345 = sub i64 %344, %343
  %346 = add nuw i64 %336, 1
  %347 = icmp ult i64 %346, %280
  br i1 %347, label %335, label %294

348:                                              ; preds = %365, %318
  %349 = load i64, i64* %240, align 8
  %350 = load i64, i64* %242, align 8
  %351 = icmp eq i64 %349, %350
  br i1 %351, label %372, label %376

352:                                              ; preds = %333, %365
  %353 = phi i64 [ %331, %333 ], [ %366, %365 ]
  %354 = phi i64 [ %330, %333 ], [ %367, %365 ]
  %355 = phi i64 [ 0, %333 ], [ %368, %365 ]
  %356 = load i32*, i32** %334, align 8
  %357 = getelementptr inbounds i32, i32* %356, i64 %355
  %358 = load i32, i32* %357, align 4
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %365

360:                                              ; preds = %352
  %361 = inttoptr i64 %353 to %"class.std::__1::vector.0"*
  %362 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %361, i64 %355
  call fastcc void @"_ZZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesEENK3$_0clERKNSt3__16vectorIhNS6_9allocatorIhEEEEb"(%class.anon* nonnull %10, %"class.std::__1::vector.0"* dereferenceable(24) %362, i1 zeroext false)
  %363 = load i64, i64* %14, align 8
  %364 = load i64, i64* %16, align 8
  br label %365

365:                                              ; preds = %352, %360
  %366 = phi i64 [ %353, %352 ], [ %364, %360 ]
  %367 = phi i64 [ %354, %352 ], [ %363, %360 ]
  %368 = add nuw i64 %355, 1
  %369 = sub i64 %367, %366
  %370 = sdiv exact i64 %369, 24
  %371 = icmp ult i64 %368, %370
  br i1 %371, label %352, label %348

372:                                              ; preds = %376, %348
  %373 = load i64, i64* %272, align 8
  %374 = load i64, i64* %274, align 8
  %375 = icmp eq i64 %373, %374
  br i1 %375, label %387, label %403

376:                                              ; preds = %348, %376
  %377 = phi i64 [ %383, %376 ], [ %350, %348 ]
  %378 = phi i64 [ %381, %376 ], [ 0, %348 ]
  %379 = inttoptr i64 %377 to %"class.std::__1::vector.0"*
  %380 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %379, i64 %378
  call fastcc void @"_ZZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesEENK3$_0clERKNSt3__16vectorIhNS6_9allocatorIhEEEEb"(%class.anon* nonnull %10, %"class.std::__1::vector.0"* dereferenceable(24) %380, i1 zeroext false)
  %381 = add nuw i64 %378, 1
  %382 = load i64, i64* %240, align 8
  %383 = load i64, i64* %242, align 8
  %384 = sub i64 %382, %383
  %385 = sdiv exact i64 %384, 24
  %386 = icmp ult i64 %381, %385
  br i1 %386, label %376, label %372

387:                                              ; preds = %403, %372
  call fastcc void @"_ZZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesEENK3$_0clERKNSt3__16vectorIhNS6_9allocatorIhEEEEb"(%class.anon* nonnull %10, %"class.std::__1::vector.0"* dereferenceable(24) %296, i1 zeroext true)
  %388 = load %struct.BrotliEncoderStateStruct*, %struct.BrotliEncoderStateStruct** %6, align 8
  call void @BrotliEncoderDestroyInstance(%struct.BrotliEncoderStateStruct* %388) #9
  %389 = load %"class.jxl::PaddedBytes"*, %"class.jxl::PaddedBytes"** %3, align 8
  %390 = load i64, i64* %7, align 8
  %391 = load i64, i64* %9, align 8
  %392 = add i64 %391, %390
  %393 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %389, i64 0, i32 1
  %394 = load i64, i64* %393, align 8
  %395 = icmp ult i64 %394, %392
  br i1 %395, label %396, label %397

396:                                              ; preds = %387
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %389, i64 %392) #9
  br label %397

397:                                              ; preds = %387, %396
  %398 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %389, i64 0, i32 2, i32 0, i32 0, i32 0
  %399 = load i8*, i8** %398, align 8
  %400 = icmp eq i8* %399, null
  %401 = select i1 %400, i64 0, i64 %392
  %402 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %389, i64 0, i32 0
  store i64 %401, i64* %402, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %324) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %323) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %308) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %304) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #9
  br label %414

403:                                              ; preds = %372, %403
  %404 = phi i64 [ %410, %403 ], [ %374, %372 ]
  %405 = phi i64 [ %408, %403 ], [ 0, %372 ]
  %406 = inttoptr i64 %404 to %"class.std::__1::vector.0"*
  %407 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %406, i64 %405
  call fastcc void @"_ZZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesEENK3$_0clERKNSt3__16vectorIhNS6_9allocatorIhEEEEb"(%class.anon* nonnull %10, %"class.std::__1::vector.0"* dereferenceable(24) %407, i1 zeroext false)
  %408 = add nuw i64 %405, 1
  %409 = load i64, i64* %272, align 8
  %410 = load i64, i64* %274, align 8
  %411 = sub i64 %409, %410
  %412 = sdiv exact i64 %411, 24
  %413 = icmp ult i64 %408, %412
  br i1 %413, label %403, label %387

414:                                              ; preds = %166, %397
  %415 = phi i32 [ 0, %397 ], [ %172, %166 ]
  %416 = load i8*, i8** %170, align 8
  store i8* null, i8** %170, align 8
  %417 = icmp eq i8* %416, null
  br i1 %417, label %419, label %418

418:                                              ; preds = %414
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %416) #9
  br label %419

419:                                              ; preds = %414, %418
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %167) #9
  br label %420

420:                                              ; preds = %96, %419
  %421 = phi i32 [ %415, %419 ], [ 1, %96 ]
  ret i32 %421
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare %struct.BrotliEncoderStateStruct* @BrotliEncoderCreateInstance(i8* (i8*, i64)*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare i32 @BrotliEncoderSetParameter(%struct.BrotliEncoderStateStruct*, i32, i32) local_unnamed_addr #2

declare i64 @BrotliEncoderMaxCompressedSize(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl4jpeg14EncodeJPEGDataERNS0_8JPEGDataEPNS_11PaddedBytesEENK3$_0clERKNSt3__16vectorIhNS6_9allocatorIhEEEEb"(%class.anon* nocapture readonly, %"class.std::__1::vector.0"* nocapture readonly dereferenceable(24), i1 zeroext) unnamed_addr #3 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.0"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  store i64 %13, i64* %4, align 8
  %14 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  %15 = bitcast i8** %5 to i64*
  store i64 %12, i64* %15, align 8
  %16 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %17 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 0
  %18 = load %"class.jxl::PaddedBytes"**, %"class.jxl::PaddedBytes"*** %17, align 8
  %19 = load %"class.jxl::PaddedBytes"*, %"class.jxl::PaddedBytes"** %18, align 8
  %20 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 2
  %24 = load i64*, i64** %23, align 8
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %22
  %27 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %19, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %28, %26
  br i1 %29, label %30, label %33

30:                                               ; preds = %3
  %31 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.19, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i64 0, i64 0)) #9
  %32 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

33:                                               ; preds = %3
  %34 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %19, i64 0, i32 2, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %26
  store i8* %36, i8** %6, align 8
  %37 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 3
  %38 = select i1 %2, i32 2, i32 0
  %39 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 4
  %40 = load %struct.BrotliEncoderStateStruct**, %struct.BrotliEncoderStateStruct*** %37, align 8
  %41 = load %struct.BrotliEncoderStateStruct*, %struct.BrotliEncoderStateStruct** %40, align 8
  %42 = load i64*, i64** %39, align 8
  %43 = call i32 @BrotliEncoderCompressStream(%struct.BrotliEncoderStateStruct* %41, i32 %38, i64* nonnull %4, i8** nonnull %5, i64* %42, i8** nonnull %6, i64* %24) #9
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %56, %33
  %46 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 274, i8* getelementptr inbounds ([155 x i8], [155 x i8]* @.str.18, i64 0, i64 0)) #9
  %47 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

48:                                               ; preds = %33, %56
  %49 = load %struct.BrotliEncoderStateStruct**, %struct.BrotliEncoderStateStruct*** %37, align 8
  %50 = load %struct.BrotliEncoderStateStruct*, %struct.BrotliEncoderStateStruct** %49, align 8
  %51 = call i32 @BrotliEncoderHasMoreOutput(%struct.BrotliEncoderStateStruct* %50) #9
  %52 = icmp ne i32 %51, 0
  %53 = load i64, i64* %4, align 8
  %54 = icmp ne i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %63

56:                                               ; preds = %48
  %57 = load i64*, i64** %23, align 8
  %58 = load %struct.BrotliEncoderStateStruct**, %struct.BrotliEncoderStateStruct*** %37, align 8
  %59 = load %struct.BrotliEncoderStateStruct*, %struct.BrotliEncoderStateStruct** %58, align 8
  %60 = load i64*, i64** %39, align 8
  %61 = call i32 @BrotliEncoderCompressStream(%struct.BrotliEncoderStateStruct* %59, i32 %38, i64* nonnull %4, i8** nonnull %5, i64* %60, i8** nonnull %6, i64* %57) #9
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %45, label %48

63:                                               ; preds = %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #9
  ret void
}

declare void @BrotliEncoderDestroyInstance(%struct.BrotliEncoderStateStruct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg14DecodeImageJPGENS_4SpanIKhEEPNS_10CodecInOutE(i8*, i64, %"class.jxl::CodecInOut"*) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.106", align 8
  %5 = alloca %"class.std::__1::vector.113", align 8
  %6 = alloca %"class.jxl::PaddedBytes", align 8
  %7 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %8 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %9 = alloca [3 x i8], align 1
  %10 = alloca [3 x i8], align 1
  %11 = alloca [3 x i8], align 1
  %12 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 0
  %13 = alloca [3 x i8], align 1
  %14 = getelementptr inbounds [3 x i8], [3 x i8]* %13, i64 0, i64 0
  %15 = alloca %"class.jxl::Image3", align 8
  %16 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 8
  %17 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %17, align 8
  %19 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 8, i32 0, i32 1
  %20 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %19, align 8
  %21 = icmp eq %"class.jxl::ImageBundle"* %20, %18
  br i1 %21, label %26, label %22

22:                                               ; preds = %3, %22
  %23 = phi %"class.jxl::ImageBundle"* [ %24, %22 ], [ %20, %3 ]
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %24) #9
  %25 = icmp eq %"class.jxl::ImageBundle"* %24, %18
  br i1 %25, label %26, label %22

26:                                               ; preds = %22, %3
  store %"class.jxl::ImageBundle"* %18, %"class.jxl::ImageBundle"** %19, align 8
  tail call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.99"* %16, i64 1)
  %27 = bitcast %"struct.jxl::ImageMetadata"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  %28 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0
  store %"struct.jxl::ImageMetadata"* %28, %"struct.jxl::ImageMetadata"** %7, align 8
  %29 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %19, align 8
  %30 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %31 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %30, align 8
  %32 = icmp ult %"class.jxl::ImageBundle"* %29, %31
  br i1 %32, label %33, label %52

33:                                               ; preds = %26
  %34 = ptrtoint %"struct.jxl::ImageMetadata"* %28 to i64
  %35 = bitcast %"class.jxl::ImageBundle"* %29 to i64*
  store i64 0, i64* %35, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 1
  store i32 1, i32* %36, align 8
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %37) #9
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 4, i32 0
  %39 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 8
  %40 = bitcast %"class.std::__1::basic_string"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #9
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 9
  %42 = bitcast i32* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 14, i1 false) #9
  %43 = bitcast %"struct.jxl::ImageMetadata"** %41 to i64*
  store i64 %34, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 10
  %45 = bitcast %"class.jxl::Image3"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 96, i1 false) #9
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %46) #9
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 0, i32 12
  %48 = bitcast %"class.std::__1::vector.92"* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 32, i1 false) #9
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 1
  %50 = ptrtoint %"class.jxl::ImageBundle"* %49 to i64
  %51 = bitcast %"class.jxl::ImageBundle"** %19 to i64*
  store i64 %50, i64* %51, align 8
  br label %54

52:                                               ; preds = %26
  call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.99"* %16, %"struct.jxl::ImageMetadata"** nonnull dereferenceable(8) %7) #9
  %53 = bitcast %"class.jxl::ImageBundle"** %19 to i64*
  br label %54

54:                                               ; preds = %33, %52
  %55 = phi i64* [ %51, %33 ], [ %53, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  %56 = call i8* @_Znwm(i64 296) #11
  %57 = bitcast i8* %56 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %58 = getelementptr inbounds i8, i8* %56, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 0, i32* %59, align 8
  %60 = getelementptr inbounds i8, i8* %56, i64 12
  %61 = bitcast i8* %60 to i32*
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds i8, i8* %56, i64 16
  %63 = bitcast i8* %62 to i32*
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds i8, i8* %56, i64 24
  %65 = getelementptr inbounds i8, i8* %56, i64 272
  call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 245, i1 false) #9
  %66 = ptrtoint i8* %56 to i64
  %67 = load i64, i64* %55, align 8
  %68 = bitcast %"class.std::__1::vector.99"* %16 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %67, %69
  %71 = inttoptr i64 %69 to %"class.jxl::ImageBundle"*
  br i1 %70, label %83, label %72

72:                                               ; preds = %54
  %73 = sub i64 %67, %69
  %74 = sdiv exact i64 %73, 368
  br label %75

75:                                               ; preds = %80, %72
  %76 = phi i64 [ 0, %72 ], [ %81, %80 ]
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %71, i64 %76, i32 5
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %75
  %81 = add nuw i64 %76, 1
  %82 = icmp ult i64 %81, %74
  br i1 %82, label %75, label %83

83:                                               ; preds = %75, %80, %54
  %84 = phi i64 [ 0, %54 ], [ %76, %80 ], [ %76, %75 ]
  %85 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %71, i64 %84, i32 0
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.88"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %86, align 8
  %88 = bitcast %"class.std::__1::unique_ptr.88"* %85 to i64*
  store i64 %66, i64* %88, align 8
  %89 = icmp eq %"struct.jxl::jpeg::JPEGData"* %87, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %83
  %91 = bitcast %"struct.jxl::jpeg::JPEGData"* %87 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %92 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %91, align 8
  %93 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %92, i64 1
  %94 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %93, align 8
  call void %94(%"struct.jxl::jpeg::JPEGData"* nonnull %87) #9
  br label %95

95:                                               ; preds = %90, %83
  %96 = load i64, i64* %55, align 8
  %97 = load i64, i64* %68, align 8
  %98 = icmp eq i64 %96, %97
  %99 = inttoptr i64 %97 to %"class.jxl::ImageBundle"*
  br i1 %98, label %111, label %100

100:                                              ; preds = %95
  %101 = sub i64 %96, %97
  %102 = sdiv exact i64 %101, 368
  br label %103

103:                                              ; preds = %108, %100
  %104 = phi i64 [ 0, %100 ], [ %109, %108 ]
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %99, i64 %104, i32 5
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %103
  %109 = add nuw i64 %104, 1
  %110 = icmp ult i64 %109, %102
  br i1 %110, label %103, label %111

111:                                              ; preds = %103, %108, %95
  %112 = phi i64 [ 0, %95 ], [ %104, %108 ], [ %104, %103 ]
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %99, i64 %112, i32 0, i32 0, i32 0, i32 0
  %114 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %113, align 8
  %115 = call zeroext i1 @_ZN3jxl4jpeg8ReadJpegEPKhmNS0_12JpegReadModeEPNS0_8JPEGDataE(i8* %0, i64 %1, i32 2, %"struct.jxl::jpeg::JPEGData"* %114) #9
  br i1 %115, label %116, label %702

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7
  %118 = bitcast %"class.jxl::PaddedBytes"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %118) #9
  %119 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 0
  %120 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 1
  %121 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %122 = bitcast %"class.std::__1::vector.106"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 24, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %122) #9
  %123 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %4, i64 0, i32 0, i32 0
  %124 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %122, i8 0, i64 24, i1 false) #9
  %125 = bitcast %"class.std::__1::vector.113"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #9
  %126 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %5, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #9
  %127 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 4, i32 0, i32 0
  %128 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %127, align 8
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 4, i32 0, i32 1
  %130 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %129, align 8
  %131 = icmp eq %"class.std::__1::vector.0"* %128, %130
  br i1 %131, label %262, label %132

132:                                              ; preds = %116
  %133 = bitcast %"class.jxl::Span"** %124 to i64*
  %134 = bitcast %"class.std::__1::vector.106"* %4 to i64*
  br label %137

135:                                              ; preds = %228
  %136 = icmp eq i64 %229, 0
  br i1 %136, label %262, label %234

137:                                              ; preds = %228, %132
  %138 = phi i64 [ 0, %132 ], [ %229, %228 ]
  %139 = phi i8 [ 1, %132 ], [ %230, %228 ]
  %140 = phi i64 [ 0, %132 ], [ %231, %228 ]
  %141 = phi %"class.std::__1::vector.0"* [ %128, %132 ], [ %232, %228 ]
  %142 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %141, i64 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %141, i64 0, i32 0, i32 1
  %145 = load i8*, i8** %144, align 8
  %146 = icmp eq i8* %143, %145
  %147 = ptrtoint i8* %145 to i64
  %148 = ptrtoint i8* %143 to i64
  br i1 %146, label %228, label %149

149:                                              ; preds = %137
  %150 = load i8, i8* %143, align 1
  %151 = icmp eq i8 %150, -30
  br i1 %151, label %152, label %228

152:                                              ; preds = %149
  %153 = sub i64 %147, %148
  %154 = icmp ult i64 %153, 3
  br i1 %154, label %228, label %155

155:                                              ; preds = %152
  %156 = getelementptr inbounds i8, i8* %143, i64 1
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds i8, i8* %143, i64 2
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i64
  %162 = shl nuw nsw i64 %158, 8
  %163 = or i64 %162, %161
  %164 = add i64 %153, -1
  %165 = icmp ne i64 %163, %164
  %166 = add i64 %153, -3
  %167 = icmp ult i64 %166, 12
  %168 = or i1 %167, %165
  br i1 %168, label %228, label %169

169:                                              ; preds = %155
  %170 = getelementptr inbounds i8, i8* %143, i64 3
  %171 = call i32 @bcmp(i8* %170, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3jxl4jpegL14kIccProfileTagE, i64 0, i64 0), i64 12) #9
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %228

173:                                              ; preds = %169
  %174 = add i64 %153, -15
  %175 = icmp ult i64 %174, 2
  br i1 %175, label %262, label %176

176:                                              ; preds = %173
  %177 = getelementptr inbounds i8, i8* %143, i64 15
  %178 = load i8, i8* %177, align 1
  %179 = getelementptr inbounds i8, i8* %143, i64 16
  %180 = load i8, i8* %179, align 1
  %181 = add i64 %140, 1
  %182 = zext i8 %178 to i64
  %183 = icmp eq i64 %181, %182
  br i1 %183, label %184, label %262

184:                                              ; preds = %176
  %185 = getelementptr inbounds i8, i8* %143, i64 17
  %186 = add i64 %153, -17
  %187 = zext i8 %180 to i64
  %188 = icmp eq i8 %180, 0
  br i1 %188, label %262, label %189

189:                                              ; preds = %184
  %190 = and i8 %139, 1
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %207, label %192

192:                                              ; preds = %189
  %193 = add nuw nsw i64 %187, 1
  %194 = load i64, i64* %133, align 8
  %195 = load i64, i64* %134, align 8
  %196 = sub i64 %194, %195
  %197 = ashr exact i64 %196, 4
  %198 = icmp ugt i64 %197, %187
  %199 = inttoptr i64 %195 to %"class.jxl::Span"*
  br i1 %198, label %202, label %200

200:                                              ; preds = %192
  %201 = sub nsw i64 %193, %197
  call void @_ZNSt3__16vectorIN3jxl4SpanIKhEENS_9allocatorIS4_EEE8__appendEm(%"class.std::__1::vector.106"* nonnull %4, i64 %201) #9
  br label %206

202:                                              ; preds = %192
  %203 = icmp ult i64 %193, %197
  br i1 %203, label %204, label %206

204:                                              ; preds = %202
  %205 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %199, i64 %193
  store %"class.jxl::Span"* %205, %"class.jxl::Span"** %124, align 8
  br label %206

206:                                              ; preds = %204, %202, %200
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.113"* nonnull %5, i64 %193, i1 zeroext false) #9
  br label %209

207:                                              ; preds = %189
  %208 = icmp eq i64 %138, %187
  br i1 %208, label %209, label %262

209:                                              ; preds = %207, %206
  %210 = phi i8 [ 0, %206 ], [ %139, %207 ]
  %211 = phi i64 [ %187, %206 ], [ %138, %207 ]
  %212 = add i8 %178, -1
  %213 = icmp ult i8 %212, %180
  br i1 %213, label %214, label %262

214:                                              ; preds = %209
  %215 = load i64*, i64** %126, align 8
  %216 = lshr i64 %181, 6
  %217 = getelementptr inbounds i64, i64* %215, i64 %216
  %218 = and i64 %181, 63
  %219 = shl i64 1, %218
  %220 = load i64, i64* %217, align 8
  %221 = and i64 %220, %219
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %262

223:                                              ; preds = %214
  %224 = or i64 %220, %219
  store i64 %224, i64* %217, align 8
  %225 = load %"class.jxl::Span"*, %"class.jxl::Span"** %123, align 8
  %226 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %225, i64 %181, i32 0
  store i8* %185, i8** %226, align 8
  %227 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %225, i64 %181, i32 1
  store i64 %186, i64* %227, align 8
  br label %228

228:                                              ; preds = %223, %169, %155, %152, %149, %137
  %229 = phi i64 [ %138, %149 ], [ %138, %137 ], [ %211, %223 ], [ %138, %169 ], [ %138, %152 ], [ %138, %155 ]
  %230 = phi i8 [ %139, %149 ], [ %139, %137 ], [ %210, %223 ], [ %139, %169 ], [ %139, %152 ], [ %139, %155 ]
  %231 = phi i64 [ %140, %149 ], [ %140, %137 ], [ %181, %223 ], [ %140, %169 ], [ %140, %152 ], [ %140, %155 ]
  %232 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %141, i64 1
  %233 = icmp eq %"class.std::__1::vector.0"* %232, %130
  br i1 %233, label %135, label %137

234:                                              ; preds = %135, %256
  %235 = phi i64 [ %236, %256 ], [ 0, %135 ]
  %236 = add nuw i64 %235, 1
  %237 = load i64*, i64** %126, align 8
  %238 = lshr i64 %236, 6
  %239 = getelementptr inbounds i64, i64* %237, i64 %238
  %240 = and i64 %236, 63
  %241 = shl i64 1, %240
  %242 = load i64, i64* %239, align 8
  %243 = and i64 %241, %242
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %262, label %245

245:                                              ; preds = %234
  %246 = load %"class.jxl::Span"*, %"class.jxl::Span"** %123, align 8
  %247 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %246, i64 %236, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %246, i64 %236, i32 1
  %250 = load i64, i64* %249, align 8
  %251 = load i64, i64* %119, align 8
  %252 = add i64 %251, %250
  %253 = load i64, i64* %120, align 8
  %254 = icmp ult i64 %253, %252
  br i1 %254, label %255, label %256

255:                                              ; preds = %245
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %6, i64 %252) #9
  br label %256

256:                                              ; preds = %255, %245
  %257 = load i8*, i8** %121, align 8
  %258 = icmp eq i8* %257, null
  %259 = select i1 %258, i64 0, i64 %252
  store i64 %259, i64* %119, align 8
  %260 = getelementptr inbounds i8, i8* %257, i64 %251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %260, i8* align 1 %248, i64 %250, i1 false) #9
  %261 = icmp eq i64 %236, %229
  br i1 %261, label %262, label %234

262:                                              ; preds = %214, %209, %207, %184, %176, %173, %256, %234, %135, %116
  %263 = phi i32 [ 0, %135 ], [ 0, %116 ], [ 0, %256 ], [ 1, %234 ], [ 1, %173 ], [ 1, %176 ], [ 1, %184 ], [ 1, %207 ], [ 1, %209 ], [ 1, %214 ]
  %264 = load i64*, i64** %126, align 8
  %265 = icmp eq i64* %264, null
  br i1 %265, label %268, label %266

266:                                              ; preds = %262
  %267 = bitcast i64* %264 to i8*
  call void @_ZdlPv(i8* %267) #11
  br label %268

268:                                              ; preds = %266, %262
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #9
  %269 = load %"class.jxl::Span"*, %"class.jxl::Span"** %123, align 8
  %270 = icmp eq %"class.jxl::Span"* %269, null
  br i1 %270, label %275, label %271

271:                                              ; preds = %268
  %272 = ptrtoint %"class.jxl::Span"* %269 to i64
  %273 = bitcast %"class.jxl::Span"** %124 to i64*
  store i64 %272, i64* %273, align 8
  %274 = bitcast %"class.jxl::Span"* %269 to i8*
  call void @_ZdlPv(i8* %274) #11
  br label %275

275:                                              ; preds = %271, %268
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %122) #9
  %276 = icmp eq i32 %263, 0
  br i1 %276, label %278, label %277

277:                                              ; preds = %275
  store i64 0, i64* %119, align 8
  br label %281

278:                                              ; preds = %275
  %279 = load i64, i64* %119, align 8
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %341

281:                                              ; preds = %278, %277
  %282 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 9
  %283 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 9, i32 0, i32 1
  %284 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.std::__1::vector.31"* %282 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = sub i64 %285, %287
  %289 = icmp eq i64 %288, 48
  %290 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %289) #9
  %291 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 1
  %292 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 8 %292, i64 12, i1 false) #9
  %293 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %294 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 4, i32 1
  %295 = bitcast i32* %293 to i8*
  %296 = bitcast i32* %294 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %295, i8* align 8 %296, i64 16, i1 false) #9
  %297 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 5
  %298 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 5
  %299 = bitcast i32* %297 to i8*
  %300 = bitcast i32* %298 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %299, i8* align 8 %300, i64 6, i1 false) #9
  %301 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8
  %302 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 8, i32 0
  %303 = load i64, i64* %302, align 8
  %304 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %305 = load i64, i64* %304, align 8
  %306 = icmp ult i64 %305, %303
  br i1 %306, label %307, label %308

307:                                              ; preds = %281
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %301, i64 %303) #9
  br label %308

308:                                              ; preds = %307, %281
  %309 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  %311 = icmp eq i8* %310, null
  %312 = select i1 %311, i64 0, i64 %303
  %313 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %301, i64 0, i32 0
  store i64 %312, i64* %313, align 8
  br i1 %311, label %317, label %314

314:                                              ; preds = %308
  %315 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %316 = load i8*, i8** %315, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %310, i8* align 1 %316, i64 %312, i1 false) #9
  br label %317

317:                                              ; preds = %314, %308
  %318 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 9
  %319 = load i32, i32* %318, align 8
  %320 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 9
  store i32 %319, i32* %320, align 8
  %321 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %322 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 10, i32 1
  %323 = bitcast i32* %322 to i64*
  %324 = bitcast i32* %321 to i64*
  %325 = load i64, i64* %323, align 8
  store i64 %325, i64* %324, align 8
  %326 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %327 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 11, i32 1
  %328 = bitcast i32* %327 to i64*
  %329 = bitcast i32* %326 to i64*
  %330 = load i64, i64* %328, align 8
  store i64 %330, i64* %329, align 8
  %331 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %332 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 12, i32 1
  %333 = bitcast i32* %332 to i64*
  %334 = bitcast i32* %331 to i64*
  %335 = load i64, i64* %333, align 8
  store i64 %335, i64* %334, align 8
  %336 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %337 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %290, i64 0, i32 13, i32 1
  %338 = bitcast i32* %337 to i64*
  %339 = bitcast i32* %336 to i64*
  %340 = load i64, i64* %338, align 8
  store i64 %340, i64* %339, align 8
  br label %363

341:                                              ; preds = %278
  %342 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8
  %343 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %342, i64 0, i32 0
  store i64 %279, i64* %343, align 8
  %344 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %345 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %346 = bitcast i64* %120 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %346, align 8
  store i8* null, i8** %345, align 8
  %348 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  %350 = bitcast i64* %344 to <2 x i64>*
  store <2 x i64> %347, <2 x i64>* %350, align 8
  %351 = icmp eq i8* %349, null
  br i1 %351, label %353, label %352

352:                                              ; preds = %341
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %349) #9
  br label %353

353:                                              ; preds = %352, %341
  %354 = icmp eq %"class.jxl::PaddedBytes"* %342, %6
  br i1 %354, label %356, label %355

355:                                              ; preds = %353
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 16, i1 false) #9
  br label %356

356:                                              ; preds = %355, %353
  %357 = call i32 @_ZN3jxl13ColorEncoding16SetFieldsFromICCEv(%"struct.jxl::ColorEncoding"* %117) #9
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %361, label %359

359:                                              ; preds = %356
  %360 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 8, i32 0
  store i64 0, i64* %360, align 8
  br label %363

361:                                              ; preds = %356
  %362 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 7, i32 6
  store i8 1, i8* %362, align 4
  br label %363

363:                                              ; preds = %361, %359, %317
  %364 = phi i32 [ 0, %317 ], [ 0, %361 ], [ 1, %359 ]
  %365 = load i8*, i8** %121, align 8
  store i8* null, i8** %121, align 8
  %366 = icmp eq i8* %365, null
  br i1 %366, label %368, label %367

367:                                              ; preds = %363
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %365) #9
  br label %368

368:                                              ; preds = %363, %367
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118) #9
  %369 = icmp eq i32 %364, 0
  br i1 %369, label %370, label %702

370:                                              ; preds = %368
  %371 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5
  %372 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 4
  %373 = bitcast %"class.std::__1::vector.0"** %129 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = bitcast %"class.std::__1::vector"* %372 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = icmp eq i64 %374, %376
  br i1 %377, label %460, label %378

378:                                              ; preds = %370
  %379 = getelementptr inbounds %"struct.jxl::Blobs", %"struct.jxl::Blobs"* %371, i64 0, i32 0
  %380 = getelementptr inbounds %"struct.jxl::Blobs", %"struct.jxl::Blobs"* %371, i64 0, i32 0, i32 0
  %381 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5, i32 0, i32 1
  %382 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0
  %383 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5, i32 3
  %384 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %383, i64 0, i32 0
  %385 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5, i32 3, i32 1
  %386 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 5, i32 3, i32 2, i32 0, i32 0, i32 0
  br label %387

387:                                              ; preds = %453, %378
  %388 = phi i64 [ %376, %378 ], [ %456, %453 ]
  %389 = phi i64 [ 0, %378 ], [ %454, %453 ]
  %390 = inttoptr i64 %388 to %"class.std::__1::vector.0"*
  %391 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %390, i64 %389, i32 0, i32 0
  %392 = load i8*, i8** %391, align 8
  %393 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %390, i64 %389, i32 0, i32 1
  %394 = load i8*, i8** %393, align 8
  %395 = icmp eq i8* %392, %394
  %396 = ptrtoint i8* %394 to i64
  %397 = ptrtoint i8* %392 to i64
  br i1 %395, label %453, label %398

398:                                              ; preds = %387
  %399 = load i8, i8* %392, align 1
  %400 = icmp eq i8 %399, -31
  br i1 %400, label %401, label %453

401:                                              ; preds = %398
  %402 = sub i64 %396, %397
  %403 = icmp ult i64 %402, 3
  br i1 %403, label %453, label %404

404:                                              ; preds = %401
  %405 = getelementptr inbounds i8, i8* %392, i64 1
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i64
  %408 = getelementptr inbounds i8, i8* %392, i64 2
  %409 = load i8, i8* %408, align 1
  %410 = zext i8 %409 to i64
  %411 = shl nuw nsw i64 %407, 8
  %412 = or i64 %411, %410
  %413 = add i64 %402, -1
  %414 = icmp eq i64 %412, %413
  br i1 %414, label %415, label %453

415:                                              ; preds = %404
  %416 = getelementptr inbounds i8, i8* %392, i64 3
  %417 = add i64 %402, -3
  %418 = icmp ugt i64 %417, 5
  br i1 %418, label %419, label %453

419:                                              ; preds = %415
  %420 = call i32 @bcmp(i8* %416, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @_ZN3jxl4jpegL8kExifTagE, i64 0, i64 0), i64 6) #9
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %435

422:                                              ; preds = %419
  %423 = load i64, i64* %380, align 8
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %425, label %435

425:                                              ; preds = %422
  %426 = add i64 %402, -9
  %427 = load i64, i64* %381, align 8
  %428 = icmp ult i64 %427, %426
  br i1 %428, label %429, label %430

429:                                              ; preds = %425
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %379, i64 %426) #9
  br label %430

430:                                              ; preds = %429, %425
  %431 = load i8*, i8** %382, align 8
  %432 = icmp eq i8* %431, null
  %433 = select i1 %432, i64 0, i64 %426
  store i64 %433, i64* %380, align 8
  %434 = getelementptr inbounds i8, i8* %392, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %431, i8* align 1 %434, i64 %426, i1 false) #9
  br label %435

435:                                              ; preds = %430, %422, %419
  %436 = icmp ugt i64 %417, 28
  br i1 %436, label %437, label %453

437:                                              ; preds = %435
  %438 = call i32 @bcmp(i8* %416, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @_ZN3jxl4jpegL7kXMPTagE, i64 0, i64 0), i64 29) #9
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %453

440:                                              ; preds = %437
  %441 = load i64, i64* %384, align 8
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %453

443:                                              ; preds = %440
  %444 = add i64 %402, -32
  %445 = load i64, i64* %385, align 8
  %446 = icmp ult i64 %445, %444
  br i1 %446, label %447, label %448

447:                                              ; preds = %443
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %383, i64 %444) #9
  br label %448

448:                                              ; preds = %447, %443
  %449 = load i8*, i8** %386, align 8
  %450 = icmp eq i8* %449, null
  %451 = select i1 %450, i64 0, i64 %444
  store i64 %451, i64* %384, align 8
  %452 = getelementptr inbounds i8, i8* %392, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %449, i8* align 1 %452, i64 %444, i1 false) #9
  br label %453

453:                                              ; preds = %448, %440, %437, %435, %415, %404, %401, %398, %387
  %454 = add nuw i64 %389, 1
  %455 = load i64, i64* %373, align 8
  %456 = load i64, i64* %375, align 8
  %457 = sub i64 %455, %456
  %458 = sdiv exact i64 %457, 24
  %459 = icmp ult i64 %454, %458
  br i1 %459, label %387, label %460

460:                                              ; preds = %453, %370
  %461 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 9
  %462 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 9, i32 0, i32 1
  %463 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %462 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = bitcast %"class.std::__1::vector.31"* %461 to i64*
  %466 = load i64, i64* %465, align 8
  %467 = sub i64 %464, %466
  %468 = sdiv exact i64 %467, 48
  %469 = or i64 %468, 2
  %470 = icmp eq i64 %469, 3
  br i1 %470, label %471, label %702

471:                                              ; preds = %460
  %472 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %472) #9
  %473 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %473, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* nonnull %8) #9
  %474 = icmp eq i64 %467, 144
  br i1 %474, label %475, label %504

475:                                              ; preds = %471
  %476 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %476) #9
  %477 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %478 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %479 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %479) #9
  %480 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 1
  %481 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 2
  %482 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %461, i64 0, i32 0, i32 0
  %483 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %482, align 8
  %484 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 0, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = trunc i32 %485 to i8
  store i8 %486, i8* %476, align 1
  %487 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 0, i32 2
  %488 = load i32, i32* %487, align 8
  %489 = trunc i32 %488 to i8
  store i8 %489, i8* %479, align 1
  %490 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 1, i32 1
  %491 = load i32, i32* %490, align 4
  %492 = trunc i32 %491 to i8
  store i8 %492, i8* %477, align 1
  %493 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 1, i32 2
  %494 = load i32, i32* %493, align 8
  %495 = trunc i32 %494 to i8
  store i8 %495, i8* %480, align 1
  %496 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 2, i32 1
  %497 = load i32, i32* %496, align 4
  %498 = trunc i32 %497 to i8
  store i8 %498, i8* %478, align 1
  %499 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %483, i64 2, i32 2
  %500 = load i32, i32* %499, align 8
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %481, align 1
  %502 = call i32 @_ZN3jxl22YCbCrChromaSubsampling3SetEPKhS2_(%"struct.jxl::YCbCrChromaSubsampling"* nonnull %8, i8* nonnull %476, i8* nonnull %479)
  %503 = icmp eq i32 %502, 0
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %479) #9
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %476) #9
  br i1 %503, label %519, label %700

504:                                              ; preds = %471
  %505 = icmp eq i64 %467, 48
  br i1 %505, label %506, label %519

506:                                              ; preds = %504
  %507 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %507) #9
  %508 = getelementptr inbounds [3 x i8], [3 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %508) #9
  %509 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %461, i64 0, i32 0, i32 0
  %510 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %509, align 8
  %511 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %510, i64 0, i32 1
  %512 = load i32, i32* %511, align 4
  %513 = trunc i32 %512 to i8
  %514 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %510, i64 0, i32 2
  %515 = load i32, i32* %514, align 8
  %516 = trunc i32 %515 to i8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 %513, i64 3, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 %516, i64 3, i1 false)
  %517 = call i32 @_ZN3jxl22YCbCrChromaSubsampling3SetEPKhS2_(%"struct.jxl::YCbCrChromaSubsampling"* nonnull %8, i8* nonnull %507, i8* nonnull %508)
  %518 = icmp eq i32 %517, 0
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %508) #9
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %507) #9
  br i1 %518, label %519, label %700

519:                                              ; preds = %506, %475, %504
  %520 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 11, i32 0, i32 0
  %521 = load i8*, i8** %520, align 8
  %522 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 11, i32 0, i32 1
  %523 = load i8*, i8** %522, align 8
  %524 = icmp eq i8* %521, %523
  %525 = ptrtoint i8* %523 to i64
  %526 = ptrtoint i8* %521 to i64
  br i1 %524, label %534, label %527

527:                                              ; preds = %519, %531
  %528 = phi i8* [ %532, %531 ], [ %521, %519 ]
  %529 = load i8, i8* %528, align 1
  %530 = icmp eq i8 %529, -32
  br i1 %530, label %534, label %531

531:                                              ; preds = %527
  %532 = getelementptr inbounds i8, i8* %528, i64 1
  %533 = icmp eq i8* %532, %523
  br i1 %533, label %537, label %527

534:                                              ; preds = %527, %519
  %535 = phi i8* [ %521, %519 ], [ %528, %527 ]
  %536 = icmp eq i8* %535, %523
  br i1 %536, label %537, label %623

537:                                              ; preds = %531, %534
  %538 = sub i64 %525, %526
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %601, label %540

540:                                              ; preds = %537, %597
  %541 = phi i64 [ %599, %597 ], [ 0, %537 ]
  %542 = phi i64 [ %598, %597 ], [ 0, %537 ]
  %543 = getelementptr inbounds i8, i8* %521, i64 %541
  %544 = load i8, i8* %543, align 1
  %545 = and i8 %544, -16
  %546 = icmp eq i8 %545, -32
  br i1 %546, label %547, label %597

547:                                              ; preds = %540
  %548 = load i64, i64* %373, align 8
  %549 = load i64, i64* %375, align 8
  %550 = sub i64 %548, %549
  %551 = sdiv exact i64 %550, 24
  %552 = icmp ult i64 %542, %551
  %553 = inttoptr i64 %549 to %"class.std::__1::vector.0"*
  br i1 %552, label %557, label %554

554:                                              ; preds = %547
  %555 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 340, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0)) #9
  %556 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

557:                                              ; preds = %547
  %558 = icmp eq i8 %544, -18
  br i1 %558, label %559, label %595

559:                                              ; preds = %557
  %560 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %553, i64 %542
  %561 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %553, i64 %542, i32 0, i32 1
  %562 = bitcast i8** %561 to i64*
  %563 = load i64, i64* %562, align 8
  %564 = bitcast %"class.std::__1::vector.0"* %560 to i64*
  %565 = load i64, i64* %564, align 8
  %566 = sub i64 %563, %565
  %567 = icmp eq i64 %566, 15
  %568 = inttoptr i64 %565 to i8*
  br i1 %567, label %569, label %595

569:                                              ; preds = %559
  %570 = getelementptr inbounds i8, i8* %568, i64 3
  %571 = load i8, i8* %570, align 1
  %572 = icmp eq i8 %571, 65
  br i1 %572, label %573, label %595

573:                                              ; preds = %569
  %574 = getelementptr inbounds i8, i8* %568, i64 4
  %575 = load i8, i8* %574, align 1
  %576 = icmp eq i8 %575, 100
  br i1 %576, label %577, label %595

577:                                              ; preds = %573
  %578 = getelementptr inbounds i8, i8* %568, i64 5
  %579 = load i8, i8* %578, align 1
  %580 = icmp eq i8 %579, 111
  br i1 %580, label %581, label %595

581:                                              ; preds = %577
  %582 = getelementptr inbounds i8, i8* %568, i64 6
  %583 = load i8, i8* %582, align 1
  %584 = icmp eq i8 %583, 98
  br i1 %584, label %585, label %595

585:                                              ; preds = %581
  %586 = getelementptr inbounds i8, i8* %568, i64 7
  %587 = load i8, i8* %586, align 1
  %588 = icmp eq i8 %587, 101
  br i1 %588, label %589, label %595

589:                                              ; preds = %585
  %590 = inttoptr i64 %565 to i8*
  %591 = getelementptr inbounds i8, i8* %590, i64 14
  %592 = load i8, i8* %591, align 1
  %593 = icmp eq i8 %592, 0
  %594 = zext i1 %593 to i8
  br label %601

595:                                              ; preds = %559, %569, %573, %577, %581, %585, %557
  %596 = add nuw i64 %542, 1
  br label %597

597:                                              ; preds = %540, %595
  %598 = phi i64 [ %596, %595 ], [ %542, %540 ]
  %599 = add nuw i64 %541, 1
  %600 = icmp ult i64 %599, %538
  br i1 %600, label %540, label %601

601:                                              ; preds = %597, %537, %589
  %602 = phi i64 [ %541, %589 ], [ 0, %537 ], [ %599, %597 ]
  %603 = phi i8 [ %594, %589 ], [ 0, %537 ], [ 0, %597 ]
  %604 = icmp ne i64 %602, %538
  %605 = xor i1 %474, true
  %606 = or i1 %604, %605
  %607 = select i1 %604, i8 %603, i8 0
  br i1 %606, label %623, label %608

608:                                              ; preds = %601
  %609 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %461, i64 0, i32 0, i32 0
  %610 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %609, align 8
  %611 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %610, i64 0, i32 0
  %612 = load i32, i32* %611, align 8
  %613 = icmp eq i32 %612, 82
  br i1 %613, label %614, label %623

614:                                              ; preds = %608
  %615 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %610, i64 1, i32 0
  %616 = load i32, i32* %615, align 8
  %617 = icmp eq i32 %616, 71
  br i1 %617, label %618, label %623

618:                                              ; preds = %614
  %619 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %610, i64 2, i32 0
  %620 = load i32, i32* %619, align 8
  %621 = icmp eq i32 %620, 66
  %622 = zext i1 %621 to i8
  br label %623

623:                                              ; preds = %601, %618, %614, %608, %534
  %624 = phi i8 [ 0, %534 ], [ %607, %601 ], [ 0, %614 ], [ 0, %608 ], [ %622, %618 ]
  %625 = load i64, i64* %55, align 8
  %626 = load i64, i64* %68, align 8
  %627 = icmp eq i64 %625, %626
  %628 = inttoptr i64 %626 to %"class.jxl::ImageBundle"*
  br i1 %627, label %640, label %629

629:                                              ; preds = %623
  %630 = sub i64 %625, %626
  %631 = sdiv exact i64 %630, 368
  br label %632

632:                                              ; preds = %637, %629
  %633 = phi i64 [ 0, %629 ], [ %638, %637 ]
  %634 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %628, i64 %633, i32 5
  %635 = load i32, i32* %634, align 8
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %637, label %640

637:                                              ; preds = %632
  %638 = add nuw i64 %633, 1
  %639 = icmp ult i64 %638, %631
  br i1 %639, label %632, label %640

640:                                              ; preds = %632, %637, %623
  %641 = phi i64 [ 0, %623 ], [ %633, %637 ], [ %633, %632 ]
  %642 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %628, i64 %641, i32 3, i32 1
  %643 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %8, i64 0, i32 1
  %644 = bitcast [3 x i32]* %642 to i8*
  %645 = bitcast [3 x i32]* %643 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %644, i8* align 8 %645, i64 14, i1 false) #9
  %646 = and i8 %624, 1
  %647 = icmp eq i8 %646, 0
  %648 = select i1 %647, i32 2, i32 1
  %649 = load i64, i64* %55, align 8
  %650 = load i64, i64* %68, align 8
  %651 = icmp eq i64 %649, %650
  %652 = inttoptr i64 %650 to %"class.jxl::ImageBundle"*
  br i1 %651, label %664, label %653

653:                                              ; preds = %640
  %654 = sub i64 %649, %650
  %655 = sdiv exact i64 %654, 368
  br label %656

656:                                              ; preds = %661, %653
  %657 = phi i64 [ 0, %653 ], [ %662, %661 ]
  %658 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %652, i64 %657, i32 5
  %659 = load i32, i32* %658, align 8
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %661, label %664

661:                                              ; preds = %656
  %662 = add nuw i64 %657, 1
  %663 = icmp ult i64 %662, %655
  br i1 %663, label %656, label %664

664:                                              ; preds = %656, %661, %640
  %665 = phi i64 [ 0, %640 ], [ %657, %661 ], [ %657, %656 ]
  %666 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %652, i64 %665, i32 1
  store i32 %648, i32* %666, align 8
  %667 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 3
  %668 = load float, float* %667, align 4
  %669 = fcmp une float %668, 0.000000e+00
  %670 = select i1 %669, float %668, float 2.550000e+02
  %671 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 14, i32 3
  store float %670, float* %671, align 4
  %672 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 3, i32 3
  store i32 8, i32* %672, align 4
  %673 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 3, i32 4
  store i32 0, i32* %673, align 8
  %674 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %2, i64 0, i32 6, i32 0, i32 3, i32 1
  store i8 0, i8* %674, align 8
  %675 = bitcast %"class.jxl::Image3"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %675) #9
  %676 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 1
  %677 = load i32, i32* %676, align 8
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %114, i64 0, i32 2
  %680 = load i32, i32* %679, align 4
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %682, i64 %678, i64 %681, i64 4) #9
  %683 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %683, i64 %678, i64 %681, i64 4) #9
  %684 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %684, i64 %678, i64 %681, i64 4) #9
  call void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"* %2, %"class.jxl::Image3"* nonnull dereferenceable(96) %15, %"struct.jxl::ColorEncoding"* dereferenceable(152) %117)
  %685 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %686 = load i8*, i8** %685, align 8
  store i8* null, i8** %685, align 8
  %687 = icmp eq i8* %686, null
  br i1 %687, label %689, label %688

688:                                              ; preds = %664
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %686) #9
  br label %689

689:                                              ; preds = %688, %664
  %690 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %691 = load i8*, i8** %690, align 8
  store i8* null, i8** %690, align 8
  %692 = icmp eq i8* %691, null
  br i1 %692, label %694, label %693

693:                                              ; preds = %689
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %691) #9
  br label %694

694:                                              ; preds = %693, %689
  %695 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %696 = load i8*, i8** %695, align 8
  store i8* null, i8** %695, align 8
  %697 = icmp eq i8* %696, null
  br i1 %697, label %699, label %698

698:                                              ; preds = %694
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %696) #9
  br label %699

699:                                              ; preds = %694, %698
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %675) #9
  call void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"* %2) #9
  br label %700

700:                                              ; preds = %506, %475, %699
  %701 = phi i32 [ 0, %699 ], [ %502, %475 ], [ %517, %506 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %472) #9
  br label %702

702:                                              ; preds = %460, %368, %111, %700
  %703 = phi i32 [ %701, %700 ], [ 1, %111 ], [ 1, %368 ], [ 1, %460 ]
  ret i32 %703
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.99"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.99"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::ImageBundle"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::ImageBundle"** %13 to i64*
  %15 = icmp ugt i64 %1, 50127021939428129
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #10
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 368
  %21 = mul i64 %1, 368
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast i8* %22 to %"class.jxl::ImageBundle"*
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::ImageBundle"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::ImageBundle"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::ImageBundle"*
  %29 = icmp eq %"class.jxl::ImageBundle"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.jxl::ImageBundle"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.jxl::ImageBundle"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %31, i64 -1
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %32, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %33, %"class.jxl::ImageBundle"* dereferenceable(368) %34) #9
  %35 = icmp eq %"class.jxl::ImageBundle"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.jxl::ImageBundle"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.jxl::ImageBundle"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.jxl::ImageBundle"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.jxl::ImageBundle"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.jxl::ImageBundle"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.jxl::ImageBundle"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %48, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %49) #9
  %50 = icmp eq %"class.jxl::ImageBundle"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

declare zeroext i1 @_ZN3jxl4jpeg8ReadJpegEPKhmNS0_12JpegReadModeEPNS0_8JPEGDataE(i8*, i64, i32, %"struct.jxl::jpeg::JPEGData"*) local_unnamed_addr #2

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling3SetEPKhS2_(%"struct.jxl::YCbCrChromaSubsampling"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds i8, i8* %1, i64 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds i8, i8* %2, i64 1
  switch i8 %5, label %14 [
    i8 1, label %7
    i8 2, label %16
  ]

7:                                                ; preds = %3
  %8 = load i8, i8* %6, align 1
  %9 = icmp eq i8 %8, 1
  br i1 %9, label %10, label %22

10:                                               ; preds = %7, %16, %19, %22
  %11 = phi i32 [ 0, %7 ], [ 1, %16 ], [ 2, %19 ], [ 3, %22 ]
  %12 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  store i32 %11, i32* %12, align 4
  %13 = load i8, i8* %1, align 1
  switch i8 %13, label %14 [
    i8 1, label %25
    i8 2, label %28
  ]

14:                                               ; preds = %37, %10, %3, %49, %31, %19, %52, %34, %22, %55
  %15 = phi i32 [ 0, %55 ], [ 1, %22 ], [ 1, %34 ], [ 1, %52 ], [ 1, %19 ], [ 1, %31 ], [ 1, %49 ], [ 1, %3 ], [ 1, %10 ], [ 1, %37 ]
  ret i32 %15

16:                                               ; preds = %3
  %17 = load i8, i8* %6, align 1
  %18 = icmp eq i8 %17, 2
  br i1 %18, label %10, label %19

19:                                               ; preds = %16
  %20 = load i8, i8* %6, align 1
  %21 = icmp eq i8 %20, 1
  br i1 %21, label %10, label %14

22:                                               ; preds = %7
  %23 = load i8, i8* %6, align 1
  %24 = icmp eq i8 %23, 2
  br i1 %24, label %10, label %14

25:                                               ; preds = %10
  %26 = load i8, i8* %2, align 1
  %27 = icmp eq i8 %26, 1
  br i1 %27, label %37, label %34

28:                                               ; preds = %10
  %29 = load i8, i8* %2, align 1
  %30 = icmp eq i8 %29, 2
  br i1 %30, label %37, label %31

31:                                               ; preds = %28
  %32 = load i8, i8* %2, align 1
  %33 = icmp eq i8 %32, 1
  br i1 %33, label %37, label %14

34:                                               ; preds = %25
  %35 = load i8, i8* %2, align 1
  %36 = icmp eq i8 %35, 2
  br i1 %36, label %37, label %14

37:                                               ; preds = %25, %28, %31, %34
  %38 = phi i32 [ 0, %25 ], [ 1, %28 ], [ 2, %31 ], [ 3, %34 ]
  %39 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds i8, i8* %1, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %2, i64 2
  switch i8 %41, label %14 [
    i8 1, label %43
    i8 2, label %46
  ]

43:                                               ; preds = %37
  %44 = load i8, i8* %42, align 1
  %45 = icmp eq i8 %44, 1
  br i1 %45, label %55, label %52

46:                                               ; preds = %37
  %47 = load i8, i8* %42, align 1
  %48 = icmp eq i8 %47, 2
  br i1 %48, label %55, label %49

49:                                               ; preds = %46
  %50 = load i8, i8* %42, align 1
  %51 = icmp eq i8 %50, 1
  br i1 %51, label %55, label %14

52:                                               ; preds = %43
  %53 = load i8, i8* %42, align 1
  %54 = icmp eq i8 %53, 2
  br i1 %54, label %55, label %14

55:                                               ; preds = %43, %46, %49, %52
  %56 = phi i32 [ 0, %43 ], [ 1, %46 ], [ 2, %49 ], [ 3, %52 ]
  %57 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  store i32 %56, i32* %57, align 4
  %58 = zext i32 %56 to i64
  %59 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %58
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %64 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %65 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = add nsw i64 %67, -1
  %71 = icmp ult i64 %70, 2
  %72 = select i1 %71, i8 %69, i8 0
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %67
  %74 = load i8, i8* %73, align 1
  %75 = or i64 %67, 2
  %76 = icmp eq i64 %75, 3
  %77 = select i1 %76, i8 %74, i8 0
  %78 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = icmp ult i8 %72, %82
  %84 = select i1 %83, i8 %82, i8 %72
  %85 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %80
  %86 = load i8, i8* %85, align 1
  %87 = icmp ult i8 %77, %86
  %88 = select i1 %87, i8 %86, i8 %77
  %89 = icmp ult i8 %84, %60
  %90 = select i1 %89, i8 %60, i8 %84
  store i8 %90, i8* %63, align 4
  %91 = icmp ult i8 %88, %62
  %92 = select i1 %91, i8 %62, i8 %88
  store i8 %92, i8* %64, align 1
  br label %14
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %6 = bitcast %"class.jxl::ImageBundle"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.99"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  %11 = inttoptr i64 %9 to %"class.jxl::ImageBundle"*
  br i1 %10, label %23, label %12

12:                                               ; preds = %3
  %13 = sub i64 %7, %9
  %14 = sdiv exact i64 %13, 368
  br label %15

15:                                               ; preds = %20, %12
  %16 = phi i64 [ 0, %12 ], [ %21, %20 ]
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %16, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = add nuw i64 %16, 1
  %22 = icmp ult i64 %21, %14
  br i1 %22, label %15, label %23

23:                                               ; preds = %15, %20, %3
  %24 = phi i64 [ 0, %3 ], [ %16, %20 ], [ %16, %15 ]
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %24
  tail call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %25, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %2) #9
  tail call void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"* %0) #9
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %8, align 8
  %28 = icmp eq i64 %26, %27
  %29 = inttoptr i64 %27 to %"class.jxl::ImageBundle"*
  br i1 %28, label %41, label %30

30:                                               ; preds = %23
  %31 = sub i64 %26, %27
  %32 = sdiv exact i64 %31, 368
  br label %33

33:                                               ; preds = %38, %30
  %34 = phi i64 [ 0, %30 ], [ %39, %38 ]
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %34, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = add nuw i64 %34, 1
  %40 = icmp ult i64 %39, %32
  br i1 %40, label %33, label %41

41:                                               ; preds = %33, %38, %23
  %42 = phi i64 [ 0, %23 ], [ %34, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 0, i32 0, i32 0, i32 0
  %44 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %43, align 8
  %45 = icmp eq %"struct.jxl::jpeg::JPEGData"* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  br label %65

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 10, i32 0, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %55, label %65

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 0
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 1
  %59 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %58, align 8
  %60 = icmp eq %"class.jxl::Plane"* %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %46, %50, %55, %61
  %66 = phi i64 [ %49, %46 ], [ %64, %61 ], [ 0, %55 ], [ %53, %50 ]
  br i1 %28, label %78, label %67

67:                                               ; preds = %65
  %68 = sub i64 %26, %27
  %69 = sdiv exact i64 %68, 368
  br label %70

70:                                               ; preds = %75, %67
  %71 = phi i64 [ 0, %67 ], [ %76, %75 ]
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %71, i32 5
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = add nuw i64 %71, 1
  %77 = icmp ult i64 %76, %69
  br i1 %77, label %70, label %78

78:                                               ; preds = %70, %75, %65
  %79 = phi i64 [ 0, %65 ], [ %71, %75 ], [ %71, %70 ]
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 0, i32 0, i32 0, i32 0
  %81 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %80, align 8
  %82 = icmp eq %"struct.jxl::jpeg::JPEGData"* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %81, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  br label %102

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 10, i32 0, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %102

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 0
  %94 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 1
  %96 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %95, align 8
  %97 = icmp eq %"class.jxl::Plane"* %94, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %94, i64 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %83, %87, %92, %98
  %103 = phi i64 [ %86, %83 ], [ %101, %98 ], [ 0, %92 ], [ %90, %87 ]
  %104 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  %105 = tail call i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"* %104, i64 %66, i64 %103) #9
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %110, label %107

107:                                              ; preds = %102
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.31, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.32, i64 0, i64 0)) #9
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

110:                                              ; preds = %102
  ret void
}

declare void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"*) local_unnamed_addr #2

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare i32 @BrotliEncoderCompressStream(%struct.BrotliEncoderStateStruct*, i32, i64*, i8**, i64*, i8**, i64*) local_unnamed_addr #2

declare i32 @BrotliEncoderHasMoreOutput(%struct.BrotliEncoderStateStruct*) local_unnamed_addr #2

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.113"*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.113", align 16
  %5 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %1
  br i1 %7, label %8, label %159

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 6
  %12 = sub i64 %1, %6
  %13 = icmp ult i64 %11, %12
  %14 = sub i64 %11, %12
  %15 = icmp ugt i64 %6, %14
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 0
  %19 = load i64*, i64** %18, align 8, !noalias !2
  %20 = lshr i64 %6, 6
  %21 = getelementptr inbounds i64, i64* %19, i64 %20
  %22 = trunc i64 %6 to i32
  %23 = and i32 %22, 63
  %24 = ptrtoint i64* %21 to i64
  store i64 %1, i64* %5, align 8
  br label %86

25:                                               ; preds = %8
  %26 = bitcast %"class.std::__1::vector.113"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %4, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #9
  %29 = icmp slt i64 %1, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = bitcast %"class.std::__1::vector.113"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #10
  unreachable

32:                                               ; preds = %25
  %33 = icmp ult i64 %11, 4611686018427387903
  br i1 %33, label %34, label %40

34:                                               ; preds = %32
  %35 = shl i64 %10, 7
  %36 = add nuw i64 %1, 63
  %37 = and i64 %36, -64
  %38 = icmp ult i64 %35, %37
  %39 = select i1 %38, i64 %37, i64 %35
  br label %40

40:                                               ; preds = %34, %32
  %41 = phi i64 [ %39, %34 ], [ 9223372036854775807, %32 ]
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.113"* nonnull %4, i64 %41)
  %42 = load i64, i64* %5, align 8
  %43 = add i64 %42, %12
  store i64 %43, i64* %27, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = bitcast %"class.std::__1::vector.113"* %4 to i64*
  %47 = load i64, i64* %46, align 16, !noalias !7
  %48 = icmp sgt i64 %42, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %40
  %50 = inttoptr i64 %47 to i8*
  %51 = lshr i64 %42, 6
  %52 = bitcast i64* %45 to i8*
  %53 = shl nuw nsw i64 %51, 3
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %52, i64 %53, i1 false) #9, !noalias !12
  %54 = and i64 %42, 63
  %55 = inttoptr i64 %47 to i64*
  %56 = getelementptr inbounds i64, i64* %55, i64 %51
  %57 = ptrtoint i64* %56 to i64
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %49
  %60 = getelementptr inbounds i64, i64* %45, i64 %51
  %61 = sub nuw nsw i64 64, %54
  %62 = lshr i64 -1, %61
  %63 = load i64, i64* %60, align 8, !noalias !15
  %64 = and i64 %63, %62
  %65 = xor i64 %62, -1
  %66 = load i64, i64* %56, align 8, !noalias !12
  %67 = and i64 %66, %65
  %68 = or i64 %67, %64
  store i64 %68, i64* %56, align 8, !noalias !12
  %69 = trunc i64 %54 to i32
  br label %70

70:                                               ; preds = %49, %40, %59
  %71 = phi i32 [ %69, %59 ], [ 0, %49 ], [ 0, %40 ]
  %72 = phi i64 [ %57, %59 ], [ %57, %49 ], [ %47, %40 ]
  %73 = bitcast %"class.std::__1::vector.113"* %4 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 16
  %75 = bitcast %"class.std::__1::vector.113"* %0 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 8
  %77 = bitcast %"class.std::__1::vector.113"* %0 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 8
  %78 = bitcast %"class.std::__1::vector.113"* %4 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %78, align 16
  %79 = load i64, i64* %9, align 8
  %80 = load i64, i64* %28, align 16
  store i64 %80, i64* %9, align 8
  store i64 %79, i64* %28, align 16
  %81 = extractelement <2 x i64> %76, i32 0
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %70
  %84 = inttoptr i64 %81 to i8*
  call void @_ZdlPv(i8* %84) #11
  br label %85

85:                                               ; preds = %70, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #9
  br label %86

86:                                               ; preds = %85, %17
  %87 = phi i64 [ %72, %85 ], [ %24, %17 ]
  %88 = phi i32 [ %71, %85 ], [ %23, %17 ]
  %89 = inttoptr i64 %87 to i64*
  %90 = icmp eq i64 %12, 0
  br i1 %90, label %160, label %91

91:                                               ; preds = %86
  %92 = icmp eq i32 %88, 0
  br i1 %2, label %93, label %125

93:                                               ; preds = %91
  br i1 %92, label %94, label %96

94:                                               ; preds = %93
  %95 = inttoptr i64 %87 to i8*
  br label %111

96:                                               ; preds = %93
  %97 = sub nuw nsw i32 64, %88
  %98 = zext i32 %97 to i64
  %99 = icmp ult i64 %12, %98
  %100 = select i1 %99, i64 %12, i64 %98
  %101 = zext i32 %88 to i64
  %102 = shl i64 -1, %101
  %103 = sub nsw i64 %98, %100
  %104 = lshr i64 -1, %103
  %105 = and i64 %104, %102
  %106 = load i64, i64* %89, align 8
  %107 = or i64 %106, %105
  store i64 %107, i64* %89, align 8
  %108 = sub i64 %12, %100
  %109 = getelementptr inbounds i64, i64* %89, i64 1
  %110 = bitcast i64* %109 to i8*
  br label %111

111:                                              ; preds = %96, %94
  %112 = phi i64* [ %89, %94 ], [ %109, %96 ]
  %113 = phi i8* [ %95, %94 ], [ %110, %96 ]
  %114 = phi i64 [ %12, %94 ], [ %108, %96 ]
  %115 = lshr i64 %114, 6
  %116 = shl nuw nsw i64 %115, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 -1, i64 %116, i1 false) #9
  %117 = and i64 %114, 63
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %160, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds i64, i64* %112, i64 %115
  %121 = sub nuw nsw i64 64, %117
  %122 = lshr i64 -1, %121
  %123 = load i64, i64* %120, align 8
  %124 = or i64 %123, %122
  store i64 %124, i64* %120, align 8
  br label %160

125:                                              ; preds = %91
  br i1 %92, label %126, label %128

126:                                              ; preds = %125
  %127 = inttoptr i64 %87 to i8*
  br label %144

128:                                              ; preds = %125
  %129 = sub nuw nsw i32 64, %88
  %130 = zext i32 %129 to i64
  %131 = icmp ult i64 %12, %130
  %132 = select i1 %131, i64 %12, i64 %130
  %133 = zext i32 %88 to i64
  %134 = shl i64 -1, %133
  %135 = sub nsw i64 %130, %132
  %136 = lshr i64 -1, %135
  %137 = and i64 %136, %134
  %138 = xor i64 %137, -1
  %139 = load i64, i64* %89, align 8
  %140 = and i64 %139, %138
  store i64 %140, i64* %89, align 8
  %141 = sub i64 %12, %132
  %142 = getelementptr inbounds i64, i64* %89, i64 1
  %143 = bitcast i64* %142 to i8*
  br label %144

144:                                              ; preds = %128, %126
  %145 = phi i64* [ %89, %126 ], [ %142, %128 ]
  %146 = phi i8* [ %127, %126 ], [ %143, %128 ]
  %147 = phi i64 [ %12, %126 ], [ %141, %128 ]
  %148 = lshr i64 %147, 6
  %149 = shl nuw nsw i64 %148, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 %149, i1 false) #9
  %150 = and i64 %147, 63
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %144
  %153 = getelementptr inbounds i64, i64* %145, i64 %148
  %154 = sub nuw nsw i64 64, %150
  %155 = lshr i64 -1, %154
  %156 = xor i64 %155, -1
  %157 = load i64, i64* %153, align 8
  %158 = and i64 %157, %156
  store i64 %158, i64* %153, align 8
  br label %160

159:                                              ; preds = %3
  store i64 %1, i64* %5, align 8
  br label %160

160:                                              ; preds = %152, %144, %119, %111, %86, %159
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4SpanIKhEENS_9allocatorIS4_EEE8__appendEm(%"class.std::__1::vector.106"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Span"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Span"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Span"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.jxl::Span", %"class.jxl::Span"* %13, i64 %18, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 16
  %25 = and i64 %24, -16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %"class.jxl::Span"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.106"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 4
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1152921504606846975
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.106"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 4
  %41 = icmp ult i64 %40, 576460752303423487
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 3
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 1152921504606846975, %38 ]
  %52 = shl i64 %51, 4
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to %"class.jxl::Span"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.jxl::Span"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %57, i64 %33
  %59 = bitcast %"class.jxl::Span"* %58 to i8*
  %60 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %57, i64 %56
  %61 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %58, i64 %1
  %62 = shl nsw i64 %1, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"class.jxl::Span"* %60 to i64
  %64 = ptrtoint %"class.jxl::Span"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %0, i64 0, i32 0, i32 0
  %66 = load %"class.jxl::Span"*, %"class.jxl::Span"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"class.jxl::Span"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 4
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"class.jxl::Span", %"class.jxl::Span"* %58, i64 %71
  %73 = ptrtoint %"class.jxl::Span"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"class.jxl::Span"* %72 to i8*
  %77 = bitcast %"class.jxl::Span"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #9
  %78 = load %"class.jxl::Span"*, %"class.jxl::Span"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"class.jxl::Span"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"class.jxl::Span"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"class.jxl::Span"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.113"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.113", align 16
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 6
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %49

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.113"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %3, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 24, i1 false) #9
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.113"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #10
  unreachable

17:                                               ; preds = %10
  %18 = add nsw i64 %1, -1
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 1
  %21 = shl nuw nsw i64 %20, 3
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast %"class.std::__1::vector.113"* %3 to i8**
  store i8* %22, i8** %23, align 16
  store i64 0, i64* %12, align 8
  store i64 %20, i64* %13, align 16
  %24 = bitcast %"class.std::__1::vector.113"* %0 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !18
  %26 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %25, i64* %26, align 8, !alias.scope !18
  %27 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 0, i32* %27, align 8, !alias.scope !18
  %28 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8, !noalias !23
  %30 = inttoptr i64 %25 to i64*
  %31 = lshr i64 %29, 6
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 63
  %35 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 0
  store i64* %32, i64** %35, align 8, !alias.scope !26
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8, !alias.scope !26
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.113"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5)
  %37 = load i64, i64* %24, align 8
  %38 = bitcast %"class.std::__1::vector.113"* %3 to i64*
  %39 = bitcast %"class.std::__1::vector.113"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  store i64 %37, i64* %38, align 16
  %41 = load i64, i64* %28, align 8
  %42 = bitcast %"class.std::__1::vector.113"* %0 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  store i64 %41, i64* %12, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i64, i64* %13, align 16
  store i64 %44, i64* %6, align 8
  store i64 %43, i64* %13, align 16
  %45 = icmp eq i64 %37, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %17
  %47 = inttoptr i64 %37 to i8*
  call void @_ZdlPv(i8* %47) #11
  br label %48

48:                                               ; preds = %17, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  br label %49

49:                                               ; preds = %48, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.113"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i64 %15, %11
  %19 = shl i64 %18, 3
  %20 = zext i32 %17 to i64
  %21 = zext i32 %13 to i64
  %22 = sub i64 %9, %21
  %23 = add i64 %22, %20
  %24 = add i64 %23, %19
  store i64 %24, i64* %8, align 8
  %25 = icmp eq i64 %9, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = add i64 %9, -1
  %28 = add i64 %24, -1
  %29 = xor i64 %28, %27
  %30 = icmp ugt i64 %29, 63
  br i1 %30, label %31, label %39

31:                                               ; preds = %26, %3
  %32 = icmp ult i64 %24, 65
  %33 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = add i64 %24, -1
  %36 = lshr i64 %35, 6
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = select i1 %32, i64* %34, i64* %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %31, %26
  %40 = load i64, i64* %10, align 8
  %41 = load i32, i32* %12, align 8
  %42 = load i64, i64* %14, align 8
  %43 = load i32, i32* %16, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.113", %"class.std::__1::vector.113"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8, !noalias !29
  %46 = lshr i64 %9, 6
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = trunc i64 %9 to i32
  %49 = and i32 %48, 63
  %50 = ptrtoint i64* %47 to i64
  %51 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #9
  %52 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = icmp eq i32 %41, %49
  br i1 %55, label %56, label %123

56:                                               ; preds = %39
  %57 = sub i64 %42, %40
  %58 = shl i64 %57, 3
  %59 = zext i32 %43 to i64
  %60 = zext i32 %41 to i64
  %61 = sub nsw i64 %59, %60
  %62 = add i64 %61, %58
  %63 = icmp sgt i64 %62, 0
  %64 = inttoptr i64 %40 to i64*
  br i1 %63, label %65, label %118

65:                                               ; preds = %56
  %66 = inttoptr i64 %40 to i8*
  %67 = icmp eq i32 %41, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %65
  %69 = sub i32 64, %41
  %70 = zext i32 %69 to i64
  %71 = icmp slt i64 %62, %70
  %72 = select i1 %71, i64 %62, i64 %70
  %73 = sub nsw i64 %62, %72
  %74 = shl i64 -1, %60
  %75 = sub nsw i64 %70, %72
  %76 = lshr i64 -1, %75
  %77 = and i64 %76, %74
  %78 = load i64, i64* %64, align 8, !noalias !32
  %79 = and i64 %78, %77
  %80 = xor i64 %77, -1
  %81 = load i64, i64* %47, align 8, !noalias !32
  %82 = and i64 %81, %80
  %83 = or i64 %82, %79
  store i64 %83, i64* %47, align 8, !noalias !32
  %84 = add nuw nsw i64 %72, %60
  %85 = sdiv i64 %84, 64
  %86 = getelementptr inbounds i64, i64* %47, i64 %85
  %87 = ptrtoint i64* %86 to i64
  %88 = srem i64 %84, 64
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds i64, i64* %64, i64 1
  %91 = bitcast i64* %90 to i8*
  br label %92

92:                                               ; preds = %68, %65
  %93 = phi i64* [ %64, %65 ], [ %90, %68 ]
  %94 = phi i32 [ 0, %65 ], [ %89, %68 ]
  %95 = phi i64 [ %50, %65 ], [ %87, %68 ]
  %96 = phi i8* [ %66, %65 ], [ %91, %68 ]
  %97 = phi i64 [ %62, %65 ], [ %73, %68 ]
  %98 = sdiv i64 %97, 64
  %99 = inttoptr i64 %95 to i8*
  %100 = shl nsw i64 %98, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %96, i64 %100, i1 false) #9, !noalias !32
  %101 = shl nsw i64 %98, 6
  %102 = sub i64 %97, %101
  %103 = inttoptr i64 %95 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %98
  %105 = ptrtoint i64* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %118

107:                                              ; preds = %92
  %108 = getelementptr inbounds i64, i64* %93, i64 %98
  %109 = sub nsw i64 64, %102
  %110 = lshr i64 -1, %109
  %111 = load i64, i64* %108, align 8, !noalias !32
  %112 = and i64 %111, %110
  %113 = xor i64 %110, -1
  %114 = load i64, i64* %104, align 8, !noalias !32
  %115 = and i64 %114, %113
  %116 = or i64 %115, %112
  store i64 %116, i64* %104, align 8, !noalias !32
  %117 = trunc i64 %102 to i32
  br label %118

118:                                              ; preds = %107, %92, %56
  %119 = phi i32 [ %117, %107 ], [ %94, %92 ], [ %41, %56 ]
  %120 = phi i64 [ %105, %107 ], [ %105, %92 ], [ %50, %56 ]
  %121 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  store i64 %120, i64* %121, align 8, !alias.scope !35
  %122 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  store i32 %119, i32* %122, align 8, !alias.scope !35
  br label %130

123:                                              ; preds = %39
  %124 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %40, i64* %124, align 8, !noalias !38
  %125 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 %41, i32* %125, align 8, !noalias !38
  %126 = bitcast %"class.std::__1::__bit_iterator"* %5 to i64*
  store i64 %42, i64* %126, align 8, !noalias !38
  %127 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %43, i32* %127, align 8, !noalias !38
  %128 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  store i64 %50, i64* %128, align 8, !noalias !38
  %129 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  store i32 %49, i32* %129, align 8, !noalias !38
  call void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* nonnull sret %7, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5, %"class.std::__1::__bit_iterator"* nonnull %6) #9
  br label %130

130:                                              ; preds = %118, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN3jxl13ColorEncoding16SetFieldsFromICCEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #2

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #2

declare i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #9
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #9
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #9
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #9
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #9
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #9
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #9
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #9
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #9
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #9
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #9
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.92"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #9
  %130 = bitcast %"class.std::__1::vector.92"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.92"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.92"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #9
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #9
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.92"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #9
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #9
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #9
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #9
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.99"*, %"struct.jxl::ImageMetadata"** dereferenceable(8)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.99"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 50127021939428129
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.99"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::ImageBundle"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 368
  %20 = icmp ult i64 %19, 25063510969714064
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 50127021939428129, %14 ]
  %28 = mul i64 %27, 368
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %"class.jxl::ImageBundle"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::ImageBundle"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::ImageBundle"* %35 to i64
  %37 = bitcast %"struct.jxl::ImageMetadata"** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.jxl::ImageBundle"* %34 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 1
  store i32 1, i32* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %41) #9
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 4, i32 0
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 8
  %44 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #9
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 9
  %46 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 14, i1 false) #9
  %47 = bitcast %"struct.jxl::ImageMetadata"** %45 to i64*
  store i64 %38, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 10
  %49 = bitcast %"class.jxl::Image3"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 96, i1 false) #9
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %50) #9
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 12
  %52 = bitcast %"class.std::__1::vector.92"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 32, i1 false) #9
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 1
  %54 = ptrtoint %"class.jxl::ImageBundle"* %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.99", %"class.std::__1::vector.99"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %55, align 8
  %57 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %58 = icmp eq %"class.jxl::ImageBundle"* %57, %56
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = ptrtoint %"class.jxl::ImageBundle"* %56 to i64
  br label %70

61:                                               ; preds = %31, %61
  %62 = phi %"class.jxl::ImageBundle"* [ %64, %61 ], [ %34, %31 ]
  %63 = phi %"class.jxl::ImageBundle"* [ %65, %61 ], [ %57, %31 ]
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %62, i64 -1
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %63, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %64, %"class.jxl::ImageBundle"* dereferenceable(368) %65) #9
  %66 = icmp eq %"class.jxl::ImageBundle"* %65, %56
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = load i64, i64* %6, align 8
  %69 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  br label %70

70:                                               ; preds = %59, %67
  %71 = phi %"class.jxl::ImageBundle"* [ %56, %59 ], [ %69, %67 ]
  %72 = phi %"class.jxl::ImageBundle"* [ %34, %59 ], [ %64, %67 ]
  %73 = phi i64 [ %60, %59 ], [ %68, %67 ]
  %74 = ptrtoint %"class.jxl::ImageBundle"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %54, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"class.jxl::ImageBundle"*
  %76 = icmp eq %"class.jxl::ImageBundle"* %71, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %70, %77
  %78 = phi %"class.jxl::ImageBundle"* [ %79, %77 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %78, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %79) #9
  %80 = icmp eq %"class.jxl::ImageBundle"* %79, %75
  br i1 %80, label %81, label %77

81:                                               ; preds = %77, %70
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %84) #11
  br label %85

85:                                               ; preds = %81, %83
  ret void
}

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEmRKS3_(%"class.std::__1::vector.8"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !39

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !41
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !41
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !44, !noalias !41
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !44, !noalias !41
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !44, !noalias !41
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !44, !noalias !41
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !46

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !41
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !44, !noalias !41
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !44, !noalias !41
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !48

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #10
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #10
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #11
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !49
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !49
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !52, !noalias !49
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !52, !noalias !49
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !52, !noalias !49
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !52, !noalias !49
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !54

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !49
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !52, !noalias !49
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !52, !noalias !49
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !55

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !56

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #9
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #11
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!5 = distinct !{!5, !6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!9 = distinct !{!9, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!10 = distinct !{!10, !11, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!11 = distinct !{!11, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!14 = distinct !{!14, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!15 = !{!13, !16}
!16 = distinct !{!16, !17, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!17 = distinct !{!17, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!20 = distinct !{!20, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!21 = distinct !{!21, !22, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!22 = distinct !{!22, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!25 = distinct !{!25, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!26 = !{!27, !24}
!27 = distinct !{!27, !28, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!28 = distinct !{!28, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!31 = distinct !{!31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!34 = distinct !{!34, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!35 = !{!33, !36}
!36 = distinct !{!36, !37, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!37 = distinct !{!37, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!38 = !{!36}
!39 = distinct !{!39, !40}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !47}
!47 = !{!"llvm.loop.isvectorized", i32 1}
!48 = distinct !{!48, !47}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !47}
!55 = distinct !{!55, !40}
!56 = distinct !{!56, !47}
