; ModuleID = '../../third_party/libwebp/src/dsp/alpha_processing.c'
source_filename = "../../third_party/libwebp/src/dsp/alpha_processing.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@WebPMultARGBRow = common hidden local_unnamed_addr global void (i32*, i32, i32)* null, align 8
@WebPMultRow = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32)* null, align 8
@WebPInitAlphaProcessing.WebPInitAlphaProcessing_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @WebPInitAlphaProcessing.WebPInitAlphaProcessing_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@WebPApplyAlphaMultiply = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32)* null, align 8
@WebPApplyAlphaMultiply4444 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32)* null, align 8
@WebPDispatchAlpha = common hidden local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)* null, align 8
@WebPDispatchAlphaToGreen = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32*, i32)* null, align 8
@WebPExtractAlpha = common hidden local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)* null, align 8
@WebPExtractGreen = common hidden local_unnamed_addr global void (i32*, i8*, i32)* null, align 8
@WebPPackRGB = common hidden local_unnamed_addr global void (i8*, i8*, i8*, i32, i32, i32*)* null, align 8
@WebPHasAlpha8b = common hidden local_unnamed_addr global i32 (i8*, i32)* null, align 8
@WebPHasAlpha32b = common hidden local_unnamed_addr global i32 (i8*, i32)* null, align 8
@WebPAlphaReplace = common hidden local_unnamed_addr global void (i32*, i32, i32)* null, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebPMultARGBRow_C(i32* nocapture, i32, i32) #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %48

5:                                                ; preds = %3
  %6 = icmp eq i32 %2, 0
  %7 = zext i32 %1 to i64
  br label %8

8:                                                ; preds = %45, %5
  %9 = phi i64 [ 0, %5 ], [ %46, %45 ]
  %10 = getelementptr inbounds i32, i32* %0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %11, -16777216
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = icmp ult i32 %11, 16777216
  br i1 %14, label %43, label %15

15:                                               ; preds = %13
  %16 = lshr i32 %11, 24
  br i1 %6, label %19, label %17

17:                                               ; preds = %15
  %18 = udiv i32 -16777216, %16
  br label %21

19:                                               ; preds = %15
  %20 = mul nuw nsw i32 %16, 65793
  br label %21

21:                                               ; preds = %17, %19
  %22 = phi i32 [ %18, %17 ], [ %20, %19 ]
  %23 = and i32 %11, -16777216
  %24 = and i32 %11, 255
  %25 = mul i32 %22, %24
  %26 = add i32 %25, 8388608
  %27 = lshr i32 %26, 24
  %28 = or i32 %27, %23
  %29 = lshr i32 %11, 8
  %30 = and i32 %29, 255
  %31 = mul i32 %22, %30
  %32 = add i32 %31, 8388608
  %33 = lshr i32 %32, 24
  %34 = shl nuw nsw i32 %33, 8
  %35 = or i32 %28, %34
  %36 = lshr i32 %11, 16
  %37 = and i32 %36, 255
  %38 = mul i32 %22, %37
  %39 = add i32 %38, 8388608
  %40 = lshr i32 %39, 24
  %41 = shl nuw nsw i32 %40, 16
  %42 = or i32 %35, %41
  br label %43

43:                                               ; preds = %13, %21
  %44 = phi i32 [ %42, %21 ], [ 0, %13 ]
  store i32 %44, i32* %10, align 4
  br label %45

45:                                               ; preds = %43, %8
  %46 = add nuw nsw i64 %9, 1
  %47 = icmp eq i64 %46, %7
  br i1 %47, label %48, label %8

48:                                               ; preds = %45, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebPMultRow_C(i8* nocapture, i8* nocapture readonly, i32, i32) #0 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %33

6:                                                ; preds = %4
  %7 = icmp eq i32 %3, 0
  %8 = zext i32 %2 to i64
  br label %9

9:                                                ; preds = %30, %6
  %10 = phi i64 [ 0, %6 ], [ %31, %30 ]
  %11 = getelementptr inbounds i8, i8* %1, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  switch i8 %12, label %16 [
    i8 -1, label %30
    i8 0, label %14
  ]

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %0, i64 %10
  store i8 0, i8* %15, align 1
  br label %30

16:                                               ; preds = %9
  br i1 %7, label %19, label %17

17:                                               ; preds = %16
  %18 = udiv i32 -16777216, %13
  br label %21

19:                                               ; preds = %16
  %20 = mul nuw nsw i32 %13, 65793
  br label %21

21:                                               ; preds = %17, %19
  %22 = phi i32 [ %18, %17 ], [ %20, %19 ]
  %23 = getelementptr inbounds i8, i8* %0, i64 %10
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul i32 %22, %25
  %27 = add i32 %26, 8388608
  %28 = lshr i32 %27, 24
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %23, align 1
  br label %30

30:                                               ; preds = %9, %14, %21
  %31 = add nuw nsw i64 %10, 1
  %32 = icmp eq i64 %31, %8
  br i1 %32, label %33, label %9

33:                                               ; preds = %30, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPMultARGBRows(i8*, i32, i32, i32, i32) local_unnamed_addr #1 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ 0, %7 ], [ %15, %9 ]
  %11 = phi i8* [ %0, %7 ], [ %14, %9 ]
  %12 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @WebPMultARGBRow, align 8
  %13 = bitcast i8* %11 to i32*
  tail call void %12(i32* %13, i32 %2, i32 %4) #4
  %14 = getelementptr inbounds i8, i8* %11, i64 %8
  %15 = add nuw nsw i32 %10, 1
  %16 = icmp eq i32 %15, %3
  br i1 %16, label %17, label %9

17:                                               ; preds = %9, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPMultRows(i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1 {
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %7
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  br label %12

12:                                               ; preds = %12, %9
  %13 = phi i32 [ 0, %9 ], [ %19, %12 ]
  %14 = phi i8* [ %0, %9 ], [ %17, %12 ]
  %15 = phi i8* [ %2, %9 ], [ %18, %12 ]
  %16 = load void (i8*, i8*, i32, i32)*, void (i8*, i8*, i32, i32)** @WebPMultRow, align 8
  tail call void %16(i8* %14, i8* %15, i32 %4, i32 %6) #4
  %17 = getelementptr inbounds i8, i8* %14, i64 %10
  %18 = getelementptr inbounds i8, i8* %15, i64 %11
  %19 = add nuw nsw i32 %13, 1
  %20 = icmp eq i32 %19, %5
  br i1 %20, label %21, label %12

21:                                               ; preds = %12, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebPInitAlphaProcessing() local_unnamed_addr #1 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @WebPInitAlphaProcessing.WebPInitAlphaProcessing_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %16, label %4

4:                                                ; preds = %0
  store void (i32*, i32, i32)* @WebPMultARGBRow_C, void (i32*, i32, i32)** @WebPMultARGBRow, align 8
  store void (i8*, i8*, i32, i32)* @WebPMultRow_C, void (i8*, i8*, i32, i32)** @WebPMultRow, align 8
  store void (i8*, i32, i32, i32)* @ApplyAlphaMultiply_16b_C, void (i8*, i32, i32, i32)** @WebPApplyAlphaMultiply4444, align 8
  store void (i8*, i8*, i8*, i32, i32, i32*)* @PackRGB_C, void (i8*, i8*, i8*, i32, i32, i32*)** @WebPPackRGB, align 8
  store void (i8*, i32, i32, i32, i32)* @ApplyAlphaMultiply_C, void (i8*, i32, i32, i32, i32)** @WebPApplyAlphaMultiply, align 8
  store i32 (i8*, i32, i32, i32, i8*, i32)* @DispatchAlpha_C, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPDispatchAlpha, align 8
  store void (i8*, i32, i32, i32, i32*, i32)* @DispatchAlphaToGreen_C, void (i8*, i32, i32, i32, i32*, i32)** @WebPDispatchAlphaToGreen, align 8
  store i32 (i8*, i32, i32, i32, i8*, i32)* @ExtractAlpha_C, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  store void (i32*, i8*, i32)* @ExtractGreen_C, void (i32*, i8*, i32)** @WebPExtractGreen, align 8
  store i32 (i8*, i32)* @HasAlpha8b_C, i32 (i8*, i32)** @WebPHasAlpha8b, align 8
  store i32 (i8*, i32)* @HasAlpha32b_C, i32 (i8*, i32)** @WebPHasAlpha32b, align 8
  store void (i32*, i32, i32)* @AlphaReplace_C, void (i32*, i32, i32)** @WebPAlphaReplace, align 8
  %5 = icmp eq i32 (i32)* %2, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %4
  %7 = tail call i32 %2(i32 0) #4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  tail call void @WebPInitAlphaProcessingSSE2() #4
  %10 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %11 = tail call i32 %10(i32 3) #4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @WebPInitAlphaProcessingSSE41() #4
  br label %14

14:                                               ; preds = %4, %6, %9, %13
  %15 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %15, i64* bitcast (i32 (i32)** @WebPInitAlphaProcessing.WebPInitAlphaProcessing_body_last_cpuinfo_used to i64*), align 8
  br label %16

16:                                               ; preds = %0, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ApplyAlphaMultiply_16b_C(i8* nocapture, i32, i32, i32) #0 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %108

6:                                                ; preds = %4
  %7 = icmp sgt i32 %1, 0
  %8 = sext i32 %3 to i64
  %9 = zext i32 %1 to i64
  %10 = icmp ult i32 %1, 16
  %11 = and i64 %9, 4294967280
  %12 = icmp eq i64 %11, %9
  br label %13

13:                                               ; preds = %105, %6
  %14 = phi i32 [ %2, %6 ], [ %16, %105 ]
  %15 = phi i8* [ %0, %6 ], [ %106, %105 ]
  %16 = add nsw i32 %14, -1
  br i1 %7, label %17, label %105

17:                                               ; preds = %13
  br i1 %10, label %64, label %18

18:                                               ; preds = %17
  %19 = getelementptr inbounds i8, i8* %15, i64 -1
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %61, %20 ]
  %22 = shl nuw nsw i64 %21, 1
  %23 = getelementptr inbounds i8, i8* %15, i64 %22
  %24 = bitcast i8* %23 to <32 x i8>*
  %25 = load <32 x i8>, <32 x i8>* %24, align 1
  %26 = shufflevector <32 x i8> %25, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %27 = shufflevector <32 x i8> %25, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %28 = or i64 %22, 1
  %29 = and <16 x i8> %27, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %30 = zext <16 x i8> %29 to <16 x i32>
  %31 = mul nuw nsw <16 x i32> %30, <i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369, i32 4369>
  %32 = and <16 x i8> %26, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %33 = lshr <16 x i8> %26, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %34 = or <16 x i8> %32, %33
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %31, %35
  %37 = lshr <16 x i32> %36, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %38 = trunc <16 x i32> %37 to <16 x i8>
  %39 = and <16 x i8> %26, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %40 = shl <16 x i8> %26, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %41 = or <16 x i8> %39, %40
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %31, %42
  %44 = lshr <16 x i32> %43, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %45 = and <16 x i8> %27, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %46 = lshr <16 x i8> %27, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %47 = or <16 x i8> %45, %46
  %48 = zext <16 x i8> %47 to <16 x i32>
  %49 = mul nuw nsw <16 x i32> %31, %48
  %50 = lshr <16 x i32> %49, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %51 = trunc <16 x i32> %50 to <16 x i8>
  %52 = and <16 x i8> %38, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %53 = trunc <16 x i32> %44 to <16 x i8>
  %54 = and <16 x i8> %53, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %55 = or <16 x i8> %52, %54
  %56 = and <16 x i8> %51, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %57 = or <16 x i8> %56, %29
  %58 = getelementptr inbounds i8, i8* %19, i64 %28
  %59 = bitcast i8* %58 to <32 x i8>*
  %60 = shufflevector <16 x i8> %55, <16 x i8> %57, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %60, <32 x i8>* %59, align 1
  %61 = add i64 %21, 16
  %62 = icmp eq i64 %61, %11
  br i1 %62, label %63, label %20, !llvm.loop !2

63:                                               ; preds = %20
  br i1 %12, label %105, label %64

64:                                               ; preds = %63, %17
  %65 = phi i64 [ 0, %17 ], [ %11, %63 ]
  br label %66

66:                                               ; preds = %64, %66
  %67 = phi i64 [ %103, %66 ], [ %65, %64 ]
  %68 = shl nuw nsw i64 %67, 1
  %69 = getelementptr inbounds i8, i8* %15, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = or i64 %68, 1
  %72 = getelementptr inbounds i8, i8* %15, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = and i8 %73, 15
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, 4369
  %77 = and i8 %70, -16
  %78 = lshr i8 %70, 4
  %79 = or i8 %77, %78
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %76, %80
  %82 = lshr i32 %81, 16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %70, 15
  %85 = shl i8 %70, 4
  %86 = or i8 %84, %85
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %76, %87
  %89 = lshr i32 %88, 20
  %90 = and i8 %73, -16
  %91 = lshr i8 %73, 4
  %92 = or i8 %90, %91
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %76, %93
  %95 = lshr i32 %94, 16
  %96 = trunc i32 %95 to i8
  %97 = and i8 %83, -16
  %98 = trunc i32 %89 to i8
  %99 = and i8 %98, 15
  %100 = or i8 %97, %99
  store i8 %100, i8* %69, align 1
  %101 = and i8 %96, -16
  %102 = or i8 %101, %74
  store i8 %102, i8* %72, align 1
  %103 = add nuw nsw i64 %67, 1
  %104 = icmp eq i64 %103, %9
  br i1 %104, label %105, label %66, !llvm.loop !4

105:                                              ; preds = %66, %63, %13
  %106 = getelementptr inbounds i8, i8* %15, i64 %8
  %107 = icmp sgt i32 %16, 0
  br i1 %107, label %13, label %108

108:                                              ; preds = %105, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PackRGB_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) #0 {
  %7 = bitcast i32* %5 to i8*
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %147

9:                                                ; preds = %6
  %10 = sext i32 %4 to i64
  %11 = zext i32 %3 to i64
  %12 = icmp ugt i32 %3, 7
  %13 = icmp eq i32 %4, 1
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %80

15:                                               ; preds = %9
  %16 = getelementptr i32, i32* %5, i64 %11
  %17 = bitcast i32* %16 to i8*
  %18 = getelementptr i8, i8* %0, i64 %11
  %19 = getelementptr i8, i8* %1, i64 %11
  %20 = getelementptr i8, i8* %2, i64 %11
  %21 = icmp ugt i8* %18, %7
  %22 = icmp ugt i8* %17, %0
  %23 = and i1 %21, %22
  %24 = icmp ugt i8* %19, %7
  %25 = icmp ugt i8* %17, %1
  %26 = and i1 %24, %25
  %27 = or i1 %23, %26
  %28 = icmp ugt i8* %20, %7
  %29 = icmp ugt i8* %17, %2
  %30 = and i1 %28, %29
  %31 = or i1 %27, %30
  br i1 %31, label %80, label %32

32:                                               ; preds = %15
  %33 = and i64 %11, 4294967288
  %34 = mul nsw i64 %33, %10
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi i64 [ 0, %32 ], [ %76, %35 ]
  %37 = mul i64 %36, %10
  %38 = getelementptr inbounds i8, i8* %0, i64 %37
  %39 = bitcast i8* %38 to <4 x i8>*
  %40 = load <4 x i8>, <4 x i8>* %39, align 1, !alias.scope !6
  %41 = getelementptr inbounds i8, i8* %38, i64 4
  %42 = bitcast i8* %41 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1, !alias.scope !6
  %44 = zext <4 x i8> %40 to <4 x i32>
  %45 = zext <4 x i8> %43 to <4 x i32>
  %46 = getelementptr inbounds i8, i8* %1, i64 %37
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1, !alias.scope !9
  %49 = getelementptr inbounds i8, i8* %46, i64 4
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1, !alias.scope !9
  %52 = zext <4 x i8> %48 to <4 x i32>
  %53 = zext <4 x i8> %51 to <4 x i32>
  %54 = getelementptr inbounds i8, i8* %2, i64 %37
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1, !alias.scope !11
  %57 = getelementptr inbounds i8, i8* %54, i64 4
  %58 = bitcast i8* %57 to <4 x i8>*
  %59 = load <4 x i8>, <4 x i8>* %58, align 1, !alias.scope !11
  %60 = zext <4 x i8> %56 to <4 x i32>
  %61 = zext <4 x i8> %59 to <4 x i32>
  %62 = shl nuw nsw <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %63 = shl nuw nsw <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %64 = shl nuw nsw <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %65 = shl nuw nsw <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %66 = or <4 x i32> %62, %64
  %67 = or <4 x i32> %63, %65
  %68 = or <4 x i32> %66, %60
  %69 = or <4 x i32> %67, %61
  %70 = or <4 x i32> %68, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %71 = or <4 x i32> %69, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %72 = getelementptr inbounds i32, i32* %5, i64 %36
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !13, !noalias !15
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !13, !noalias !15
  %76 = add i64 %36, 8
  %77 = icmp eq i64 %76, %33
  br i1 %77, label %78, label %35, !llvm.loop !16

78:                                               ; preds = %35
  %79 = icmp eq i64 %33, %11
  br i1 %79, label %147, label %80

80:                                               ; preds = %9, %78, %15
  %81 = phi i64 [ 0, %15 ], [ 0, %9 ], [ %33, %78 ]
  %82 = phi i64 [ 0, %15 ], [ 0, %9 ], [ %34, %78 ]
  %83 = xor i64 %81, -1
  %84 = and i64 %11, 1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %104, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds i8, i8* %0, i64 %82
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, i8* %1, i64 %82
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %2, i64 %82
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = shl nuw nsw i32 %89, 16
  %97 = shl nuw nsw i32 %92, 8
  %98 = or i32 %96, %97
  %99 = or i32 %98, %95
  %100 = or i32 %99, -16777216
  %101 = getelementptr inbounds i32, i32* %5, i64 %81
  store i32 %100, i32* %101, align 4
  %102 = add nsw i64 %82, %10
  %103 = or i64 %81, 1
  br label %104

104:                                              ; preds = %80, %86
  %105 = phi i64 [ %81, %80 ], [ %103, %86 ]
  %106 = phi i64 [ %82, %80 ], [ %102, %86 ]
  %107 = sub nsw i64 0, %11
  %108 = icmp eq i64 %83, %107
  br i1 %108, label %147, label %109

109:                                              ; preds = %104, %109
  %110 = phi i64 [ %145, %109 ], [ %105, %104 ]
  %111 = phi i64 [ %144, %109 ], [ %106, %104 ]
  %112 = getelementptr inbounds i8, i8* %0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds i8, i8* %1, i64 %111
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds i8, i8* %2, i64 %111
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = shl nuw nsw i32 %114, 16
  %122 = shl nuw nsw i32 %117, 8
  %123 = or i32 %121, %122
  %124 = or i32 %123, %120
  %125 = or i32 %124, -16777216
  %126 = getelementptr inbounds i32, i32* %5, i64 %110
  store i32 %125, i32* %126, align 4
  %127 = add nsw i64 %111, %10
  %128 = add nuw nsw i64 %110, 1
  %129 = getelementptr inbounds i8, i8* %0, i64 %127
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds i8, i8* %1, i64 %127
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %2, i64 %127
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %131, 16
  %139 = shl nuw nsw i32 %134, 8
  %140 = or i32 %138, %139
  %141 = or i32 %140, %137
  %142 = or i32 %141, -16777216
  %143 = getelementptr inbounds i32, i32* %5, i64 %128
  store i32 %142, i32* %143, align 4
  %144 = add nsw i64 %127, %10
  %145 = add nuw nsw i64 %110, 2
  %146 = icmp eq i64 %145, %11
  br i1 %146, label %147, label %109, !llvm.loop !17

147:                                              ; preds = %104, %109, %78, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ApplyAlphaMultiply_C(i8* nocapture, i32, i32, i32, i32) #0 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %59

7:                                                ; preds = %5
  %8 = icmp ne i32 %1, 0
  %9 = zext i1 %8 to i64
  %10 = select i1 %8, i64 0, i64 3
  %11 = icmp sgt i32 %2, 0
  %12 = sext i32 %4 to i64
  %13 = zext i32 %2 to i64
  br label %14

14:                                               ; preds = %7, %56
  %15 = phi i32 [ %3, %7 ], [ %17, %56 ]
  %16 = phi i8* [ %0, %7 ], [ %57, %56 ]
  %17 = add nsw i32 %15, -1
  %18 = getelementptr inbounds i8, i8* %16, i64 %9
  %19 = getelementptr inbounds i8, i8* %16, i64 %10
  br i1 %11, label %20, label %56

20:                                               ; preds = %14, %53
  %21 = phi i64 [ %54, %53 ], [ 0, %14 ]
  %22 = trunc i64 %21 to i32
  %23 = shl nsw i32 %22, 2
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %19, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, -1
  br i1 %27, label %53, label %28

28:                                               ; preds = %20
  %29 = zext i8 %26 to i32
  %30 = mul nuw nsw i32 %29, 32897
  %31 = getelementptr inbounds i8, i8* %18, i64 %24
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nuw i32 %30, %33
  %35 = lshr i32 %34, 23
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %31, align 1
  %37 = or i32 %23, 1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %18, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw i32 %30, %41
  %43 = lshr i32 %42, 23
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %39, align 1
  %45 = or i32 %23, 2
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %18, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nuw i32 %30, %49
  %51 = lshr i32 %50, 23
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %47, align 1
  br label %53

53:                                               ; preds = %20, %28
  %54 = add nuw nsw i64 %21, 1
  %55 = icmp eq i64 %54, %13
  br i1 %55, label %56, label %20

56:                                               ; preds = %53, %14
  %57 = getelementptr inbounds i8, i8* %16, i64 %12
  %58 = icmp sgt i32 %17, 0
  br i1 %58, label %14, label %59

59:                                               ; preds = %56, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @DispatchAlpha_C(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) #0 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %63

8:                                                ; preds = %6
  %9 = icmp sgt i32 %2, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = zext i32 %2 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %2, 1
  %15 = sub nsw i64 %12, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %57, %8
  %18 = phi i8* [ %0, %8 ], [ %59, %57 ]
  %19 = phi i32 [ 0, %8 ], [ %61, %57 ]
  %20 = phi i32 [ 255, %8 ], [ %58, %57 ]
  %21 = phi i8* [ %4, %8 ], [ %60, %57 ]
  br i1 %9, label %22, label %57

22:                                               ; preds = %17
  br i1 %14, label %45, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %42, %23 ], [ 0, %22 ]
  %25 = phi i32 [ %41, %23 ], [ %20, %22 ]
  %26 = phi i64 [ %43, %23 ], [ %15, %22 ]
  %27 = getelementptr inbounds i8, i8* %18, i64 %24
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl i64 %24, 2
  %31 = and i64 %30, 4294967288
  %32 = getelementptr inbounds i8, i8* %21, i64 %31
  store i8 %28, i8* %32, align 1
  %33 = and i32 %25, %29
  %34 = or i64 %24, 1
  %35 = getelementptr inbounds i8, i8* %18, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl i64 %34, 2
  %39 = and i64 %38, 4294967292
  %40 = getelementptr inbounds i8, i8* %21, i64 %39
  store i8 %36, i8* %40, align 1
  %41 = and i32 %33, %37
  %42 = add nuw nsw i64 %24, 2
  %43 = add i64 %26, -2
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %23

45:                                               ; preds = %23, %22
  %46 = phi i32 [ undef, %22 ], [ %41, %23 ]
  %47 = phi i64 [ 0, %22 ], [ %42, %23 ]
  %48 = phi i32 [ %20, %22 ], [ %41, %23 ]
  br i1 %16, label %57, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %18, i64 %47
  %51 = load i8, i8* %50, align 1
  %52 = shl i64 %47, 2
  %53 = and i64 %52, 4294967292
  %54 = getelementptr inbounds i8, i8* %21, i64 %53
  store i8 %51, i8* %54, align 1
  %55 = zext i8 %51 to i32
  %56 = and i32 %48, %55
  br label %57

57:                                               ; preds = %49, %45, %17
  %58 = phi i32 [ %20, %17 ], [ %46, %45 ], [ %56, %49 ]
  %59 = getelementptr inbounds i8, i8* %18, i64 %10
  %60 = getelementptr inbounds i8, i8* %21, i64 %11
  %61 = add nuw nsw i32 %19, 1
  %62 = icmp eq i32 %61, %3
  br i1 %62, label %63, label %17

63:                                               ; preds = %57, %6
  %64 = phi i32 [ 255, %6 ], [ %58, %57 ]
  %65 = icmp ne i32 %64, 255
  %66 = zext i1 %65 to i32
  ret i32 %66
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @DispatchAlphaToGreen_C(i8* nocapture readonly, i32, i32, i32, i32* nocapture, i32) #0 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %151

8:                                                ; preds = %6
  %9 = icmp sgt i32 %2, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = zext i32 %2 to i64
  %13 = and i64 %12, 4294967288
  %14 = add nsw i64 %13, -8
  %15 = lshr exact i64 %14, 3
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %2, 8
  %18 = and i64 %12, 4294967288
  %19 = and i64 %16, 1
  %20 = icmp eq i64 %14, 0
  %21 = sub nuw nsw i64 %16, %19
  %22 = icmp eq i64 %19, 0
  %23 = icmp eq i64 %18, %12
  %24 = and i64 %12, 3
  %25 = icmp eq i64 %24, 0
  br label %26

26:                                               ; preds = %145, %8
  %27 = phi i64 [ %150, %145 ], [ 0, %8 ]
  %28 = phi i32 [ %148, %145 ], [ 0, %8 ]
  %29 = phi i8* [ %146, %145 ], [ %0, %8 ]
  %30 = phi i32* [ %147, %145 ], [ %4, %8 ]
  %31 = mul i64 %27, %11
  %32 = getelementptr i32, i32* %4, i64 %31
  %33 = bitcast i32* %32 to i8*
  %34 = add i64 %31, %12
  %35 = getelementptr i32, i32* %4, i64 %34
  %36 = bitcast i32* %35 to i8*
  %37 = mul i64 %27, %10
  %38 = getelementptr i8, i8* %0, i64 %37
  %39 = add i64 %37, %12
  %40 = getelementptr i8, i8* %0, i64 %39
  br i1 %9, label %41, label %145

41:                                               ; preds = %26
  br i1 %17, label %100, label %42

42:                                               ; preds = %41
  %43 = icmp ugt i8* %40, %33
  %44 = icmp ult i8* %38, %36
  %45 = and i1 %43, %44
  br i1 %45, label %100, label %46

46:                                               ; preds = %42
  br i1 %20, label %82, label %47

47:                                               ; preds = %46, %47
  %48 = phi i64 [ %79, %47 ], [ 0, %46 ]
  %49 = phi i64 [ %80, %47 ], [ %21, %46 ]
  %50 = getelementptr inbounds i8, i8* %29, i64 %48
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1, !alias.scope !18
  %53 = getelementptr inbounds i8, i8* %50, i64 4
  %54 = bitcast i8* %53 to <4 x i8>*
  %55 = load <4 x i8>, <4 x i8>* %54, align 1, !alias.scope !18
  %56 = zext <4 x i8> %52 to <4 x i32>
  %57 = zext <4 x i8> %55 to <4 x i32>
  %58 = shl nuw nsw <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %59 = shl nuw nsw <4 x i32> %57, <i32 8, i32 8, i32 8, i32 8>
  %60 = getelementptr inbounds i32, i32* %30, i64 %48
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %61, align 4, !alias.scope !21, !noalias !18
  %62 = getelementptr inbounds i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %63, align 4, !alias.scope !21, !noalias !18
  %64 = or i64 %48, 8
  %65 = getelementptr inbounds i8, i8* %29, i64 %64
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1, !alias.scope !18
  %68 = getelementptr inbounds i8, i8* %65, i64 4
  %69 = bitcast i8* %68 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1, !alias.scope !18
  %71 = zext <4 x i8> %67 to <4 x i32>
  %72 = zext <4 x i8> %70 to <4 x i32>
  %73 = shl nuw nsw <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %74 = shl nuw nsw <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %75 = getelementptr inbounds i32, i32* %30, i64 %64
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %76, align 4, !alias.scope !21, !noalias !18
  %77 = getelementptr inbounds i32, i32* %75, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %78, align 4, !alias.scope !21, !noalias !18
  %79 = add i64 %48, 16
  %80 = add i64 %49, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %47, !llvm.loop !23

82:                                               ; preds = %47, %46
  %83 = phi i64 [ 0, %46 ], [ %79, %47 ]
  br i1 %22, label %99, label %84

84:                                               ; preds = %82
  %85 = getelementptr inbounds i8, i8* %29, i64 %83
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1, !alias.scope !18
  %88 = getelementptr inbounds i8, i8* %85, i64 4
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1, !alias.scope !18
  %91 = zext <4 x i8> %87 to <4 x i32>
  %92 = zext <4 x i8> %90 to <4 x i32>
  %93 = shl nuw nsw <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %94 = shl nuw nsw <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %95 = getelementptr inbounds i32, i32* %30, i64 %83
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !21, !noalias !18
  %97 = getelementptr inbounds i32, i32* %95, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %98, align 4, !alias.scope !21, !noalias !18
  br label %99

99:                                               ; preds = %82, %84
  br i1 %23, label %145, label %100

100:                                              ; preds = %99, %42, %41
  %101 = phi i64 [ 0, %42 ], [ 0, %41 ], [ %18, %99 ]
  %102 = xor i64 %101, -1
  %103 = add nsw i64 %102, %12
  br i1 %25, label %115, label %104

104:                                              ; preds = %100, %104
  %105 = phi i64 [ %112, %104 ], [ %101, %100 ]
  %106 = phi i64 [ %113, %104 ], [ %24, %100 ]
  %107 = getelementptr inbounds i8, i8* %29, i64 %105
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 8
  %111 = getelementptr inbounds i32, i32* %30, i64 %105
  store i32 %110, i32* %111, align 4
  %112 = add nuw nsw i64 %105, 1
  %113 = add i64 %106, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %104, !llvm.loop !24

115:                                              ; preds = %104, %100
  %116 = phi i64 [ %101, %100 ], [ %112, %104 ]
  %117 = icmp ult i64 %103, 3
  br i1 %117, label %145, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %143, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i8, i8* %29, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 8
  %124 = getelementptr inbounds i32, i32* %30, i64 %119
  store i32 %123, i32* %124, align 4
  %125 = add nuw nsw i64 %119, 1
  %126 = getelementptr inbounds i8, i8* %29, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = shl nuw nsw i32 %128, 8
  %130 = getelementptr inbounds i32, i32* %30, i64 %125
  store i32 %129, i32* %130, align 4
  %131 = add nuw nsw i64 %119, 2
  %132 = getelementptr inbounds i8, i8* %29, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl nuw nsw i32 %134, 8
  %136 = getelementptr inbounds i32, i32* %30, i64 %131
  store i32 %135, i32* %136, align 4
  %137 = add nuw nsw i64 %119, 3
  %138 = getelementptr inbounds i8, i8* %29, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = shl nuw nsw i32 %140, 8
  %142 = getelementptr inbounds i32, i32* %30, i64 %137
  store i32 %141, i32* %142, align 4
  %143 = add nuw nsw i64 %119, 4
  %144 = icmp eq i64 %143, %12
  br i1 %144, label %145, label %118, !llvm.loop !26

145:                                              ; preds = %115, %118, %99, %26
  %146 = getelementptr inbounds i8, i8* %29, i64 %10
  %147 = getelementptr inbounds i32, i32* %30, i64 %11
  %148 = add nuw nsw i32 %28, 1
  %149 = icmp eq i32 %148, %3
  %150 = add i64 %27, 1
  br i1 %149, label %151, label %26

151:                                              ; preds = %145, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ExtractAlpha_C(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) #0 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %60

8:                                                ; preds = %6
  %9 = icmp sgt i32 %2, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = zext i32 %2 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %2, 1
  %15 = sub nsw i64 %12, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %54, %8
  %18 = phi i8* [ %0, %8 ], [ %56, %54 ]
  %19 = phi i32 [ 0, %8 ], [ %58, %54 ]
  %20 = phi i8 [ -1, %8 ], [ %55, %54 ]
  %21 = phi i8* [ %4, %8 ], [ %57, %54 ]
  br i1 %9, label %22, label %54

22:                                               ; preds = %17
  br i1 %14, label %43, label %23

23:                                               ; preds = %22, %23
  %24 = phi i64 [ %40, %23 ], [ 0, %22 ]
  %25 = phi i8 [ %39, %23 ], [ %20, %22 ]
  %26 = phi i64 [ %41, %23 ], [ %15, %22 ]
  %27 = shl i64 %24, 2
  %28 = and i64 %27, 4294967288
  %29 = getelementptr inbounds i8, i8* %18, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %21, i64 %24
  store i8 %30, i8* %31, align 1
  %32 = and i8 %30, %25
  %33 = or i64 %24, 1
  %34 = shl i64 %33, 2
  %35 = and i64 %34, 4294967292
  %36 = getelementptr inbounds i8, i8* %18, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %21, i64 %33
  store i8 %37, i8* %38, align 1
  %39 = and i8 %37, %32
  %40 = add nuw nsw i64 %24, 2
  %41 = add i64 %26, -2
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %23

43:                                               ; preds = %23, %22
  %44 = phi i8 [ undef, %22 ], [ %39, %23 ]
  %45 = phi i64 [ 0, %22 ], [ %40, %23 ]
  %46 = phi i8 [ %20, %22 ], [ %39, %23 ]
  br i1 %16, label %54, label %47

47:                                               ; preds = %43
  %48 = shl i64 %45, 2
  %49 = and i64 %48, 4294967292
  %50 = getelementptr inbounds i8, i8* %18, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %21, i64 %45
  store i8 %51, i8* %52, align 1
  %53 = and i8 %51, %46
  br label %54

54:                                               ; preds = %47, %43, %17
  %55 = phi i8 [ %20, %17 ], [ %44, %43 ], [ %53, %47 ]
  %56 = getelementptr inbounds i8, i8* %18, i64 %10
  %57 = getelementptr inbounds i8, i8* %21, i64 %11
  %58 = add nuw nsw i32 %19, 1
  %59 = icmp eq i32 %58, %3
  br i1 %59, label %60, label %17

60:                                               ; preds = %54, %6
  %61 = phi i8 [ -1, %6 ], [ %55, %54 ]
  %62 = icmp eq i8 %61, -1
  %63 = zext i1 %62 to i32
  ret i32 %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ExtractGreen_C(i32* nocapture readonly, i8* nocapture, i32) #0 {
  %4 = bitcast i32* %0 to i8*
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %127

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %80, label %9

9:                                                ; preds = %6
  %10 = getelementptr i8, i8* %1, i64 %7
  %11 = getelementptr i32, i32* %0, i64 %7
  %12 = bitcast i32* %11 to i8*
  %13 = icmp ugt i8* %12, %1
  %14 = icmp ugt i8* %10, %4
  %15 = and i1 %13, %14
  br i1 %15, label %80, label %16

16:                                               ; preds = %9
  %17 = and i64 %7, 4294967288
  %18 = add nsw i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %18, 0
  br i1 %22, label %60, label %23

23:                                               ; preds = %16
  %24 = sub nuw nsw i64 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %57, %25 ]
  %27 = phi i64 [ %24, %23 ], [ %58, %25 ]
  %28 = getelementptr inbounds i32, i32* %0, i64 %26
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 4, !alias.scope !27
  %31 = getelementptr inbounds i32, i32* %28, i64 4
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !alias.scope !27
  %34 = lshr <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8>
  %35 = lshr <4 x i32> %33, <i32 8, i32 8, i32 8, i32 8>
  %36 = trunc <4 x i32> %34 to <4 x i8>
  %37 = trunc <4 x i32> %35 to <4 x i8>
  %38 = getelementptr inbounds i8, i8* %1, i64 %26
  %39 = bitcast i8* %38 to <4 x i8>*
  store <4 x i8> %36, <4 x i8>* %39, align 1, !alias.scope !30, !noalias !27
  %40 = getelementptr inbounds i8, i8* %38, i64 4
  %41 = bitcast i8* %40 to <4 x i8>*
  store <4 x i8> %37, <4 x i8>* %41, align 1, !alias.scope !30, !noalias !27
  %42 = or i64 %26, 8
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !alias.scope !27
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !alias.scope !27
  %49 = lshr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %50 = lshr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %51 = trunc <4 x i32> %49 to <4 x i8>
  %52 = trunc <4 x i32> %50 to <4 x i8>
  %53 = getelementptr inbounds i8, i8* %1, i64 %42
  %54 = bitcast i8* %53 to <4 x i8>*
  store <4 x i8> %51, <4 x i8>* %54, align 1, !alias.scope !30, !noalias !27
  %55 = getelementptr inbounds i8, i8* %53, i64 4
  %56 = bitcast i8* %55 to <4 x i8>*
  store <4 x i8> %52, <4 x i8>* %56, align 1, !alias.scope !30, !noalias !27
  %57 = add i64 %26, 16
  %58 = add i64 %27, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %25, !llvm.loop !32

60:                                               ; preds = %25, %16
  %61 = phi i64 [ 0, %16 ], [ %57, %25 ]
  %62 = icmp eq i64 %21, 0
  br i1 %62, label %78, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds i32, i32* %0, i64 %61
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !27
  %67 = getelementptr inbounds i32, i32* %64, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !27
  %70 = lshr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %71 = lshr <4 x i32> %69, <i32 8, i32 8, i32 8, i32 8>
  %72 = trunc <4 x i32> %70 to <4 x i8>
  %73 = trunc <4 x i32> %71 to <4 x i8>
  %74 = getelementptr inbounds i8, i8* %1, i64 %61
  %75 = bitcast i8* %74 to <4 x i8>*
  store <4 x i8> %72, <4 x i8>* %75, align 1, !alias.scope !30, !noalias !27
  %76 = getelementptr inbounds i8, i8* %74, i64 4
  %77 = bitcast i8* %76 to <4 x i8>*
  store <4 x i8> %73, <4 x i8>* %77, align 1, !alias.scope !30, !noalias !27
  br label %78

78:                                               ; preds = %60, %63
  %79 = icmp eq i64 %17, %7
  br i1 %79, label %127, label %80

80:                                               ; preds = %78, %9, %6
  %81 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %17, %78 ]
  %82 = xor i64 %81, -1
  %83 = add nsw i64 %82, %7
  %84 = and i64 %7, 3
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %97, label %86

86:                                               ; preds = %80, %86
  %87 = phi i64 [ %94, %86 ], [ %81, %80 ]
  %88 = phi i64 [ %95, %86 ], [ %84, %80 ]
  %89 = getelementptr inbounds i32, i32* %0, i64 %87
  %90 = load i32, i32* %89, align 4
  %91 = lshr i32 %90, 8
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %1, i64 %87
  store i8 %92, i8* %93, align 1
  %94 = add nuw nsw i64 %87, 1
  %95 = add i64 %88, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %86, !llvm.loop !33

97:                                               ; preds = %86, %80
  %98 = phi i64 [ %81, %80 ], [ %94, %86 ]
  %99 = icmp ult i64 %83, 3
  br i1 %99, label %127, label %100

100:                                              ; preds = %97, %100
  %101 = phi i64 [ %125, %100 ], [ %98, %97 ]
  %102 = getelementptr inbounds i32, i32* %0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %1, i64 %101
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %101, 1
  %108 = getelementptr inbounds i32, i32* %0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = lshr i32 %109, 8
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %1, i64 %107
  store i8 %111, i8* %112, align 1
  %113 = add nuw nsw i64 %101, 2
  %114 = getelementptr inbounds i32, i32* %0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %1, i64 %113
  store i8 %117, i8* %118, align 1
  %119 = add nuw nsw i64 %101, 3
  %120 = getelementptr inbounds i32, i32* %0, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = lshr i32 %121, 8
  %123 = trunc i32 %122 to i8
  %124 = getelementptr inbounds i8, i8* %1, i64 %119
  store i8 %123, i8* %124, align 1
  %125 = add nuw nsw i64 %101, 4
  %126 = icmp eq i64 %125, %7
  br i1 %126, label %127, label %100, !llvm.loop !34

127:                                              ; preds = %97, %100, %78, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @HasAlpha8b_C(i8* nocapture readonly, i32) #2 {
  br label %3

3:                                                ; preds = %7, %2
  %4 = phi i8* [ %0, %2 ], [ %9, %7 ]
  %5 = phi i32 [ %1, %2 ], [ %8, %7 ]
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = add nsw i32 %5, -1
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  %10 = load i8, i8* %4, align 1
  %11 = icmp eq i8 %10, -1
  br i1 %11, label %3, label %12

12:                                               ; preds = %3, %7
  %13 = phi i32 [ 1, %7 ], [ 0, %3 ]
  ret i32 %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @HasAlpha32b_C(i8* nocapture readonly, i32) #2 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %7, label %14

4:                                                ; preds = %7
  %5 = add nuw nsw i64 %8, 4
  %6 = icmp sgt i32 %10, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %2, %4
  %8 = phi i64 [ %5, %4 ], [ 0, %2 ]
  %9 = phi i32 [ %10, %4 ], [ %1, %2 ]
  %10 = add nsw i32 %9, -1
  %11 = getelementptr inbounds i8, i8* %0, i64 %8
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, -1
  br i1 %13, label %4, label %14

14:                                               ; preds = %7, %4, %2
  %15 = phi i32 [ 0, %2 ], [ 0, %4 ], [ 1, %7 ]
  ret i32 %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @AlphaReplace_C(i32* nocapture, i32, i32) #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = icmp ult i32 %1, 8
  br i1 %7, label %62, label %8

8:                                                ; preds = %5
  %9 = and i64 %6, 4294967288
  br label %10

10:                                               ; preds = %57, %8
  %11 = phi i64 [ 0, %8 ], [ %58, %57 ]
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 4
  %15 = getelementptr inbounds i32, i32* %12, i64 4
  %16 = bitcast i32* %15 to <4 x i32>*
  %17 = load <4 x i32>, <4 x i32>* %16, align 4
  %18 = icmp ult <4 x i32> %14, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %19 = icmp ult <4 x i32> %17, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %20 = extractelement <4 x i1> %18, i32 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %10
  store i32 %2, i32* %12, align 4
  br label %22

22:                                               ; preds = %21, %10
  %23 = extractelement <4 x i1> %18, i32 1
  br i1 %23, label %24, label %27

24:                                               ; preds = %22
  %25 = or i64 %11, 1
  %26 = getelementptr inbounds i32, i32* %0, i64 %25
  store i32 %2, i32* %26, align 4
  br label %27

27:                                               ; preds = %24, %22
  %28 = extractelement <4 x i1> %18, i32 2
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = or i64 %11, 2
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  store i32 %2, i32* %31, align 4
  br label %32

32:                                               ; preds = %29, %27
  %33 = extractelement <4 x i1> %18, i32 3
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = or i64 %11, 3
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  store i32 %2, i32* %36, align 4
  br label %37

37:                                               ; preds = %34, %32
  %38 = extractelement <4 x i1> %19, i32 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  %40 = or i64 %11, 4
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  store i32 %2, i32* %41, align 4
  br label %42

42:                                               ; preds = %39, %37
  %43 = extractelement <4 x i1> %19, i32 1
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = or i64 %11, 5
  %46 = getelementptr inbounds i32, i32* %0, i64 %45
  store i32 %2, i32* %46, align 4
  br label %47

47:                                               ; preds = %44, %42
  %48 = extractelement <4 x i1> %19, i32 2
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = or i64 %11, 6
  %51 = getelementptr inbounds i32, i32* %0, i64 %50
  store i32 %2, i32* %51, align 4
  br label %52

52:                                               ; preds = %49, %47
  %53 = extractelement <4 x i1> %19, i32 3
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = or i64 %11, 7
  %56 = getelementptr inbounds i32, i32* %0, i64 %55
  store i32 %2, i32* %56, align 4
  br label %57

57:                                               ; preds = %54, %52
  %58 = add i64 %11, 8
  %59 = icmp eq i64 %58, %9
  br i1 %59, label %60, label %10, !llvm.loop !35

60:                                               ; preds = %57
  %61 = icmp eq i64 %9, %6
  br i1 %61, label %73, label %62

62:                                               ; preds = %60, %5
  %63 = phi i64 [ 0, %5 ], [ %9, %60 ]
  br label %64

64:                                               ; preds = %62, %70
  %65 = phi i64 [ %71, %70 ], [ %63, %62 ]
  %66 = getelementptr inbounds i32, i32* %0, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp ult i32 %67, 16777216
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  store i32 %2, i32* %66, align 4
  br label %70

70:                                               ; preds = %64, %69
  %71 = add nuw nsw i64 %65, 1
  %72 = icmp eq i64 %71, %6
  br i1 %72, label %73, label %64, !llvm.loop !36

73:                                               ; preds = %70, %60, %3
  ret void
}

declare void @WebPInitAlphaProcessingSSE2() local_unnamed_addr #3

declare void @WebPInitAlphaProcessingSSE41() local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = !{!12}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !8}
!15 = !{!7, !10, !12}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.unroll.disable"}
!26 = distinct !{!26, !3}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !25}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !5, !3}
