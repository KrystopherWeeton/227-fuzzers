; ModuleID = '../../third_party/skia/src/gpu/tessellate/GrStrokeFixedCountTessellator.cpp'
source_filename = "../../third_party/skia/src/gpu/tessellate/GrStrokeFixedCountTessellator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrCullTest = type { %"struct.skvx::Vec", %"struct.skvx::Vec", %"struct.skvx::Vec" }
%"struct.skvx::Vec" = type { %"struct.skvx::Vec.17", %"struct.skvx::Vec.17" }
%"struct.skvx::Vec.17" = type { %"struct.skvx::Vec.18", %"struct.skvx::Vec.18" }
%"struct.skvx::Vec.18" = type { float }
%"class.GrMeshDrawOp::Target" = type { i32 (...)** }
%class.SkSTArray.13 = type { %class.SkAlignedSTStorage.14, %class.SkTArray.15 }
%class.SkAlignedSTStorage.14 = type { [16 x i8] }
%class.SkTArray.15 = type { %struct.GrVertexChunk*, i64 }
%struct.GrVertexChunk = type { %class.sk_sp.16, i32, i32 }
%class.sk_sp.16 = type { %class.GrBuffer* }
%class.GrBuffer = type { i32 (...)** }
%struct.GrVertexWriter = type { i8* }
%struct.SkPoint = type { float, float }
%"struct.GrStrokeShader::DynamicStroke" = type { float, float }
%class.GrVertexColor = type <{ [4 x i32], i8, [3 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%class.SkStrokeRec = type { float, float, float, i32 }
%"class.SkPath::RangeIter" = type { i8*, %struct.SkPoint*, float* }
%"struct.std::__1::array.19" = type { [2 x %struct.SkPoint] }
%class.GrStrokeFixedCountTessellator = type <{ %class.GrStrokeTessellator, %class.SkSTArray.13, i32, [4 x i8] }>
%class.GrStrokeTessellator = type { i32 (...)**, %class.GrStrokeShader, %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.std::__1::array", %struct.SkRect }
%class.GrStrokeShader = type <{ %class.GrPathShader.base, i32, i32, %class.SkStrokeRec, %struct.SkRGBA4f, [4 x i8], %class.SkSTArray, float, [4 x i8] }>
%class.GrPathShader.base = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32 }
%class.GrGeometryProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32 }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.GrNonAtomicRef = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [80 x i8] }
%class.SkTArray = type { %"class.GrGeometryProcessor::Attribute"*, i64 }
%"struct.GrStrokeTessellator::PathStrokeList" = type { %class.SkPath, %class.SkStrokeRec, %struct.SkRGBA4f, %"struct.GrStrokeTessellator::PathStrokeList"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"struct.std::__1::array" = type { [2 x float] }
%struct.SkRect = type { float, float, float, float }
%"class.(anonymous namespace)::InstanceWriter" = type { i32, [12 x i8], %class.GrCullTest, %class.GrVertexChunkBuilder, float, float, [4 x %struct.SkPoint], %struct.SkPoint, i8, i8, %"struct.GrStrokeShader::DynamicStroke", %class.GrVertexColor }
%class.GrVertexChunkBuilder = type { %"class.GrMeshDrawOp::Target"*, %class.SkSTArray.13*, i64, i32, %struct.GrVertexWriter, i32, i32 }
%class.GrStrokeToleranceBuffer = type { %"struct.skvx::Vec", [4 x float], float, i32, [8 x i8] }
%class.GrStrokeIterator = type { %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.19", %"struct.std::__1::array.19", %"struct.std::__1::array.19" }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%class.GrOpFlushState = type { %class.GrDeferredUploadTarget, %"class.GrMeshDrawOp::Target", %class.SkArenaAllocWithReset, %class.GrVertexBufferAllocPool, %class.GrIndexBufferAllocPool, %class.GrDrawIndirectBufferAllocPool, %class.SkArenaAllocList, %class.SkArenaAllocList.27, %class.SkArenaAllocList.28, %class.GrDeferredUploadToken, %"struct.GrOpFlushState::OpArgs"*, %class.SkTArray.92*, %class.GrGpu*, %class.GrResourceProvider*, %class.GrTokenTracker*, %class.GrOpsRenderPass*, %"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter", %"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" }
%class.GrDeferredUploadTarget = type { i32 (...)** }
%class.SkArenaAllocWithReset = type { %class.SkArenaAlloc.base, i8*, i32, i32 }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%class.GrVertexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrBufferAllocPool = type { i32 (...)**, i64, %class.SkTArray.20, %class.sk_sp.22, %class.sk_sp.24, %class.GrGpu*, i32, i8* }
%class.SkTArray.20 = type { %"struct.GrBufferAllocPool::BufferBlock"*, i64 }
%"struct.GrBufferAllocPool::BufferBlock" = type { i64, %class.sk_sp.21 }
%class.sk_sp.21 = type { %class.GrBuffer* }
%class.sk_sp.22 = type { %"class.GrBufferAllocPool::CpuBufferCache"* }
%"class.GrBufferAllocPool::CpuBufferCache" = type <{ %class.GrNonAtomicRef.23, [4 x i8], %"class.std::__1::unique_ptr", i32, [4 x i8] }>
%class.GrNonAtomicRef.23 = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.GrBufferAllocPool::CpuBufferCache::Buffer"* }
%"struct.GrBufferAllocPool::CpuBufferCache::Buffer" = type <{ %class.sk_sp.24, i8, [7 x i8] }>
%class.sk_sp.24 = type { %class.GrCpuBuffer* }
%class.GrCpuBuffer = type { %class.GrBuffer, %class.GrNonAtomicRef.25, i8*, i64 }
%class.GrNonAtomicRef.25 = type { i32 }
%class.GrIndexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrDrawIndirectBufferAllocPool = type { %class.GrBufferAllocPool }
%class.SkArenaAllocList = type { %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"*, %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"* }
%"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node" = type opaque
%class.SkArenaAllocList.27 = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node" = type opaque
%class.SkArenaAllocList.28 = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node" = type opaque
%class.GrDeferredUploadToken = type { i64 }
%"struct.GrOpFlushState::OpArgs" = type { %class.GrOp*, %class.GrSurfaceProxyView*, %class.GrRenderTargetProxy*, i8, %class.GrAppliedClip*, %"class.GrXferProcessor::DstProxyView", i32, i32 }
%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr.29", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %class.GrOp* }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.35, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.35 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.36, %class.sk_sp.37, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.73" }
%class.SkNVRefCnt.36 = type { %"struct.std::__1::atomic" }
%class.sk_sp.37 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.40 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.38, i8* }
%class.sk_sp.38 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.39, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.39 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.40 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.41, void (i8*)*, i8* }
%class.SkNVRefCnt.41 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.42, i32, [4 x i8] }
%union.anon.42 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.SkISize = type { i32, i32 }
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.37, i32, i8, [3 x i8] }>
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.73" = type { %"struct.std::__1::__atomic_base.74" }
%"struct.std::__1::__atomic_base.74" = type { %"struct.std::__1::__atomic_base.75" }
%"struct.std::__1::__atomic_base.75" = type { %"struct.std::__1::__cxx_atomic_impl.76" }
%"struct.std::__1::__cxx_atomic_impl.76" = type { %"struct.std::__1::__cxx_atomic_base_impl.77" }
%"struct.std::__1::__cxx_atomic_base_impl.77" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.GrRenderTargetProxy = type <{ i32 (...)**, i8, i8, i8, i8, %struct.SkIRect, [4 x i8], %class.sk_sp.78, [4 x i8], [4 x i8], %class.GrSurfaceProxy }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.sk_sp.78 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.79, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.79 = type { %"struct.std::__1::atomic" }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.80 }
%class.SkFibBlockSizes.80 = type { i32 }
%class.GrAppliedClip = type { %class.GrAppliedHardClip, %"class.std::__1::unique_ptr.83" }
%class.GrAppliedHardClip = type <{ %class.GrScissorState, %class.GrWindowRectsState, i32, [4 x i8] }>
%class.GrScissorState = type { %struct.SkISize, %struct.SkIRect }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.81 }
%union.anon.81 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef.82, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef.82 = type { i32 }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.86, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.SkSTArray.86 = type { %class.SkAlignedSTStorage.87, %class.SkTArray.88 }
%class.SkAlignedSTStorage.87 = type { [8 x i8] }
%class.SkTArray.88 = type { %"class.std::__1::unique_ptr.83"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.GrXferProcessor::DstProxyView" = type { %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8] }
%struct.SkIPoint = type { i32, i32 }
%class.SkTArray.92 = type opaque
%class.GrGpu = type opaque
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.70, %class.sk_sp.72, %class.sk_sp.72 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray.44, %class.SkTMultiMap, %class.SkTDynamicHash.51, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray.44 }
%class.SkTDArray.44 = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.51 = type { %class.SkTHashTable.52 }
%class.SkTHashTable.52 = type { i32, i32, %class.SkAutoTArray.53 }
%class.SkAutoTArray.53 = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.60, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.60 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.61, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.61 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap = type { %class.SkTHashTable.62 }
%class.SkTHashTable.62 = type { i32, i32, %class.SkAutoTArray.63 }
%class.SkAutoTArray.63 = type { %"class.std::__1::unique_ptr.64" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.70 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.71, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.71 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.72 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrTokenTracker = type { %class.GrDeferredUploadToken, %class.GrDeferredUploadToken }
%class.GrOpsRenderPass = type { i32 (...)**, i32, %class.GrRenderTarget*, %class.sk_sp.16, %class.sk_sp.16, %class.sk_sp.16, i32, i32 }
%class.GrRenderTarget = type opaque
%"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }

$_ZN16GrStrokeIterator4nextEv = comdat any

$_ZN29GrStrokeFixedCountTessellatorD2Ev = comdat any

$_ZN29GrStrokeFixedCountTessellatorD0Ev = comdat any

$_ZN16GrStrokeIterator17finishOpenContourEv = comdat any

$_ZN16GrStrokeIterator19fillSquareCapPointsEv = comdat any

$_ZN20GrVertexChunkBuilder10allocChunkEi = comdat any

$_ZN8SkTArrayI13GrVertexChunkLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZNK10GrCullTest11areVisible3EPK7SkPoint = comdat any

$_ZNK10GrCullTest11areVisible4EPK7SkPoint = comdat any

$_ZN19GrStrokeTessellatorD2Ev = comdat any

$_ZN19GrStrokeTessellatorD0Ev = comdat any

$_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = comdat any

$_ZTV19GrStrokeTessellator = comdat any

@__const._ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi.instanceWriter = private unnamed_addr constant { i32, [12 x i8], %class.GrCullTest, { %"class.GrMeshDrawOp::Target"*, %class.SkSTArray.13*, i64, i32, [4 x i8], %struct.GrVertexWriter, i32, i32 }, float, float, [4 x %struct.SkPoint], %struct.SkPoint, i8, i8, [2 x i8], %"struct.GrStrokeShader::DynamicStroke", %class.GrVertexColor } { i32 -1431655766, [12 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", %class.GrCullTest { %"struct.skvx::Vec" { %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } } }, %"struct.skvx::Vec" { %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } }, %"struct.skvx::Vec.17" { %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 }, %"struct.skvx::Vec.18" { float 0xFFFFFFFFE0000000 } } } }, { %"class.GrMeshDrawOp::Target"*, %class.SkSTArray.13*, i64, i32, [4 x i8], %struct.GrVertexWriter, i32, i32 } { %"class.GrMeshDrawOp::Target"* inttoptr (i64 -6148914691236517206 to %"class.GrMeshDrawOp::Target"*), %class.SkSTArray.13* inttoptr (i64 -6148914691236517206 to %class.SkSTArray.13*), i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.GrVertexWriter { i8* inttoptr (i64 -6148914691236517206 to i8*) }, i32 -1431655766, i32 -1431655766 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"struct.GrStrokeShader::DynamicStroke" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.GrVertexColor <{ [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 16
@__const._ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi.strokeIter = private unnamed_addr constant { %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, [4 x i8], %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.19", %"struct.std::__1::array.19", %"struct.std::__1::array.19" } { %class.SkMatrix* inttoptr (i64 -6148914691236517206 to %class.SkMatrix*), %class.SkStrokeRec* inttoptr (i64 -6148914691236517206 to %class.SkStrokeRec*), %"class.SkPath::RangeIter" { i8* inttoptr (i64 -6148914691236517206 to i8*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*) }, %"class.SkPath::RangeIter" { i8* inttoptr (i64 -6148914691236517206 to i8*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*) }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), float* inttoptr (i64 -6148914691236517206 to float*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [8 x %struct.SkPoint*] [%struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*), %struct.SkPoint* inttoptr (i64 -6148914691236517206 to %struct.SkPoint*)], [8 x float*] [float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*)], i32 -1431655766, i32 -1431655766, %"struct.std::__1::array.19" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] }, %"struct.std::__1::array.19" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] }, %"struct.std::__1::array.19" { [2 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }] } }, align 8
@_ZTV29GrStrokeFixedCountTessellator = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrStrokeFixedCountTessellator*, %"class.GrMeshDrawOp::Target"*, i32)* @_ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi to i8*), i8* bitcast (void (%class.GrStrokeFixedCountTessellator*, %class.GrOpFlushState*)* @_ZNK29GrStrokeFixedCountTessellator4drawEP14GrOpFlushState to i8*), i8* bitcast (void (%class.GrStrokeFixedCountTessellator*)* @_ZN29GrStrokeFixedCountTessellatorD2Ev to i8*), i8* bitcast (void (%class.GrStrokeFixedCountTessellator*)* @_ZN29GrStrokeFixedCountTessellatorD0Ev to i8*)] }, align 8
@_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = linkonce_odr hidden local_unnamed_addr constant [7 x i8] c"\01\02\03\03\04\00\00", comdat, align 1
@.str = private unnamed_addr constant [52 x i8] c"../../third_party/skia/src/gpu/GrVertexChunkArray.h\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"WARNING: Failed to allocate vertex buffer for GrVertexChunk.\0A\00", align 1
@_ZTV19GrStrokeTessellator = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrStrokeTessellator*)* @_ZN19GrStrokeTessellatorD2Ev to i8*), i8* bitcast (void (%class.GrStrokeTessellator*)* @_ZN19GrStrokeTessellatorD0Ev to i8*)] }, comdat, align 8
@_ZTV14GrStrokeShader = external unnamed_addr constant { [8 x i8*] }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi(%class.GrStrokeFixedCountTessellator*, %"class.GrMeshDrawOp::Target"*, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.(anonymous namespace)::InstanceWriter", align 16
  %5 = alloca %class.GrStrokeToleranceBuffer, align 16
  %6 = alloca %class.GrStrokeIterator, align 8
  %7 = alloca %struct.SkConic, align 4
  %8 = alloca [10 x %struct.SkPoint], align 16
  %9 = alloca [2 x float], align 4
  %10 = alloca i8, align 1
  %11 = shl i32 %2, 1
  %12 = add nsw i32 %11, 8
  %13 = bitcast %"class.(anonymous namespace)::InstanceWriter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %13) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 16 bitcast ({ i32, [12 x i8], %class.GrCullTest, { %"class.GrMeshDrawOp::Target"*, %class.SkSTArray.13*, i64, i32, [4 x i8], %struct.GrVertexWriter, i32, i32 }, float, float, [4 x %struct.SkPoint], %struct.SkPoint, i8, i8, [2 x i8], %"struct.GrStrokeShader::DynamicStroke", %class.GrVertexColor }* @__const._ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi.instanceWriter to i8*), i64 192, i1 false)
  %14 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 3, i32 0, i64 1
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %19 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1
  %20 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 4, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 0
  store i32 %15, i32* %22, align 16
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 0
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = fsub float -0.000000e+00, %24
  %28 = fsub float -0.000000e+00, %26
  %29 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store float %24, float* %29, align 16
  %30 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 0, i32 0, i32 1, i32 0
  store float %26, float* %30, align 4
  %31 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  store float %27, float* %31, align 8
  %32 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 0, i32 1, i32 1, i32 0
  store float %28, float* %32, align 4
  %33 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i64 1
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i64 4
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 1, i32 0, i32 0, i32 0
  store float %34, float* %37, align 16
  %38 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 1, i32 0, i32 1, i32 0
  store float %36, float* %38, align 4
  %39 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 1, i32 1, i32 0, i32 0
  %40 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 4, i32 0
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i64 2
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 4, i32 1
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i64 5
  %47 = load float, float* %46, align 4
  %48 = insertelement <4 x float> <float -0.000000e+00, float -0.000000e+00, float undef, float undef>, float %41, i32 2
  %49 = insertelement <4 x float> %48, float %45, i32 3
  %50 = insertelement <4 x float> undef, float %34, i32 0
  %51 = insertelement <4 x float> %50, float %36, i32 1
  %52 = insertelement <4 x float> %51, float %43, i32 2
  %53 = insertelement <4 x float> %52, float %47, i32 3
  %54 = fsub <4 x float> %49, %53
  %55 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 4, i32 2
  %56 = load float, float* %55, align 4
  %57 = fsub float %43, %56
  %58 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 4, i32 3
  %59 = load float, float* %58, align 4
  %60 = fsub float %47, %59
  %61 = bitcast float* %39 to <4 x float>*
  store <4 x float> %54, <4 x float>* %61, align 8
  %62 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 2, i32 1, i32 0, i32 0
  store float %57, float* %62, align 8
  %63 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 2, i32 2, i32 1, i32 1, i32 0
  store float %60, float* %63, align 4
  %64 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 0
  store %"class.GrMeshDrawOp::Target"* %1, %"class.GrMeshDrawOp::Target"** %64, align 16
  %65 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 1
  store %class.SkSTArray.13* %19, %class.SkSTArray.13** %65, align 8
  %66 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 2
  store i64 %21, i64* %66, align 16
  %67 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 3
  store i32 %12, i32* %67, align 8
  %68 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 5
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 6
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 4
  %71 = fmul float %17, 4.000000e+00
  store float %71, float* %70, align 16
  %72 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 5
  store float 1.000000e+00, float* %72, align 4
  %73 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 8
  store i8 0, i8* %73, align 16
  %74 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 9
  store i8 0, i8* %74, align 1
  %75 = and i32 %15, 2
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %118

77:                                               ; preds = %3
  %78 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 2
  %79 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %78, align 8
  %80 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %79, i64 0, i32 1, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp oeq float %81, 0.000000e+00
  br i1 %82, label %83, label %92

83:                                               ; preds = %77
  %84 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 3, i32 0, i64 0
  %85 = load float, float* %84, align 4
  %86 = fmul float %17, 2.500000e-01
  %87 = fcmp olt float %85, %86
  %88 = select i1 %87, float %86, float %85
  %89 = fdiv float 1.000000e+00, %88
  %90 = fcmp oeq float %89, 0.000000e+00
  %91 = select i1 %90, float 0x3F30000000000000, float %89
  br label %92

92:                                               ; preds = %77, %83
  %93 = phi float [ %91, %83 ], [ %81, %77 ]
  %94 = fmul float %71, %93
  %95 = fdiv float 2.000000e+00, %94
  %96 = fsub float 1.000000e+00, %95
  %97 = fcmp olt float %96, -1.000000e+00
  %98 = select i1 %97, float -1.000000e+00, float %96
  %99 = tail call float @acosf(float %98) #12
  %100 = fdiv float 5.000000e-01, %99
  %101 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %79, i64 0, i32 1, i32 3
  %102 = load i32, i32* %101, align 4
  %103 = lshr i32 %102, 16
  %104 = trunc i32 %103 to i8
  switch i8 %104, label %105 [
    i8 0, label %118
    i8 1, label %106
    i8 2, label %117
  ]

105:                                              ; preds = %92
  tail call void @llvm.trap() #12
  unreachable

106:                                              ; preds = %92
  %107 = fmul float %100, 0x400921FB60000000
  %108 = tail call float @llvm.ceil.f32(float %107) #12
  %109 = fcmp olt float %108, 0x41DFFFFFE0000000
  %110 = select i1 %109, float %108, float 0x41DFFFFFE0000000
  %111 = fcmp ogt float %110, 0xC1DFFFFFE0000000
  %112 = select i1 %111, float %110, float 0xC1DFFFFFE0000000
  %113 = fptosi float %112 to i32
  %114 = icmp sgt i32 %113, 1
  %115 = select i1 %114, i32 %113, i32 1
  %116 = add nuw nsw i32 %115, 2
  br label %118

117:                                              ; preds = %92
  br label %118

118:                                              ; preds = %117, %106, %92, %3
  %119 = phi float [ 0.000000e+00, %3 ], [ %100, %92 ], [ %100, %106 ], [ %100, %117 ]
  %120 = phi i32 [ 0, %3 ], [ 4, %92 ], [ %116, %106 ], [ 3, %117 ]
  %121 = bitcast %class.GrStrokeToleranceBuffer* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %121) #12
  %122 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 0, i32 0, i32 1, i32 0
  %123 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %124 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 0, i32 1, i32 1, i32 0
  %125 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 2
  %126 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 3
  %127 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 1
  %128 = bitcast [4 x float]* %127 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %128, i8 -1, i64 16, i1 false)
  %129 = getelementptr inbounds i32, i32* %126, i64 1
  %130 = bitcast i32* %129 to i64*
  store i64 -6148914691236517206, i64* %130, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %121, i8 0, i64 16, i1 false) #12
  store float %71, float* %125, align 16
  store i32 4, i32* %126, align 4
  %131 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 2
  %132 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %131, align 8
  %133 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %132, null
  br i1 %133, label %221, label %134

134:                                              ; preds = %118
  %135 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 1, i64 2
  %136 = bitcast %class.GrStrokeToleranceBuffer* %5 to <2 x float>*
  %137 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 0, i32 1
  %138 = bitcast %"struct.skvx::Vec.17"* %137 to <2 x float>*
  %139 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 1
  %140 = bitcast [4 x float]* %139 to <2 x float>*
  %141 = bitcast float* %135 to <2 x float>*
  %142 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 10, i32 0
  %143 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 10, i32 1
  %144 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11
  %145 = bitcast %class.GrVertexColor* %144 to i8*
  %146 = getelementptr inbounds %class.GrVertexColor, %class.GrVertexColor* %144, i64 0, i32 0, i64 0
  %147 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11, i32 1
  %148 = bitcast %class.GrStrokeIterator* %6 to i8*
  %149 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 0
  %150 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 1
  %151 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 2
  %152 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 3
  %153 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 7
  %154 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 11
  %155 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 12
  %156 = bitcast %"class.SkPath::RangeIter"* %151 to i8*
  %157 = bitcast %"class.SkPath::RangeIter"* %151 to i64*
  %158 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 2, i32 1
  %159 = bitcast %struct.SkPoint** %158 to i64*
  %160 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 2, i32 2
  %161 = bitcast float** %160 to i64*
  %162 = bitcast %"class.SkPath::RangeIter"* %152 to i64*
  %163 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 3, i32 1
  %164 = bitcast %struct.SkPoint** %163 to i8*
  %165 = bitcast [10 x %struct.SkPoint]* %8 to i8*
  %166 = bitcast [2 x float]* %9 to i8*
  %167 = getelementptr inbounds [2 x float], [2 x float]* %9, i64 0, i64 0
  %168 = getelementptr inbounds [2 x float], [2 x float]* %9, i64 0, i64 1
  %169 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 0
  %170 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 3
  %171 = bitcast %struct.SkPoint* %170 to <2 x float>*
  %172 = bitcast %struct.SkPoint* %170 to i64*
  %173 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3
  %174 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 3, i32 4
  %175 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %174, i64 0, i32 0
  %176 = bitcast %struct.GrVertexWriter* %174 to i64*
  %177 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 10
  %178 = bitcast %"struct.GrStrokeShader::DynamicStroke"* %177 to i64*
  %179 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11, i32 0, i64 0
  %180 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11, i32 0, i64 1
  %181 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11, i32 0, i64 2
  %182 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 11, i32 0, i64 3
  %183 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 6
  %184 = bitcast %struct.SkPoint* %183 to <2 x float>*
  %185 = bitcast %struct.SkPoint* %183 to i64*
  %186 = bitcast [10 x %struct.SkPoint]* %8 to i64*
  %187 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 7
  %188 = bitcast %struct.SkPoint* %187 to i64*
  %189 = bitcast %struct.SkPoint* %187 to <2 x float>*
  %190 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 6
  %191 = bitcast [4 x %struct.SkPoint]* %190 to <2 x float>*
  %192 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 6, i64 1
  %193 = bitcast %struct.SkPoint* %192 to <2 x float>*
  %194 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 6, i64 2
  %195 = bitcast %struct.SkPoint* %194 to <2 x float>*
  %196 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 6, i64 3
  %197 = bitcast %struct.SkPoint* %196 to <2 x float>*
  %198 = bitcast [4 x %struct.SkPoint]* %190 to i64*
  %199 = bitcast %struct.SkPoint* %192 to i64*
  %200 = bitcast %struct.SkPoint* %194 to i64*
  %201 = bitcast %struct.SkPoint* %196 to i64*
  %202 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 9
  %203 = bitcast %struct.SkPoint* %202 to i64*
  %204 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 4
  %205 = bitcast %struct.SkPoint* %204 to i64*
  %206 = getelementptr inbounds [10 x %struct.SkPoint], [10 x %struct.SkPoint]* %8, i64 0, i64 2
  %207 = bitcast %struct.SkPoint* %206 to i64*
  %208 = bitcast %struct.SkConic* %7 to i8*
  %209 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %7, i64 0, i32 1
  %210 = bitcast float* %209 to i32*
  %211 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %4, i64 0, i32 6, i64 0
  %212 = bitcast %struct.SkPoint* %211 to i8*
  %213 = bitcast %struct.SkPoint* %187 to i64*
  %214 = bitcast %struct.SkConic* %7 to i8*
  %215 = bitcast %class.GrStrokeToleranceBuffer* %5 to i32*
  %216 = bitcast float* %122 to i32*
  %217 = bitcast float* %123 to i32*
  %218 = bitcast float* %124 to i32*
  br label %278

219:                                              ; preds = %1462
  %220 = load float, float* %72, align 4
  br label %221

221:                                              ; preds = %118, %219
  %222 = phi float [ %220, %219 ], [ 1.000000e+00, %118 ]
  %223 = phi float [ %419, %219 ], [ %119, %118 ]
  %224 = phi i32 [ %421, %219 ], [ %120, %118 ]
  %225 = fmul float %223, 0x400921FB60000000
  %226 = call float @llvm.ceil.f32(float %225)
  %227 = fcmp olt float %226, 0x41DFFFFFE0000000
  %228 = select i1 %227, float %226, float 0x41DFFFFFE0000000
  %229 = fcmp ogt float %228, 0xC1DFFFFFE0000000
  %230 = select i1 %229, float %228, float 0xC1DFFFFFE0000000
  %231 = fptosi float %230 to i32
  %232 = icmp sgt i32 %231, 1
  %233 = select i1 %232, i32 %231, i32 1
  %234 = call float @sqrtf(float %222) #12
  %235 = call float @sqrtf(float %234) #12
  %236 = call float @llvm.ceil.f32(float %235)
  %237 = fcmp olt float %236, 0x41DFFFFFE0000000
  %238 = select i1 %237, float %236, float 0x41DFFFFFE0000000
  %239 = fcmp ogt float %238, 0xC1DFFFFFE0000000
  %240 = select i1 %239, float %238, float 0xC1DFFFFFE0000000
  %241 = fptosi float %240 to i32
  %242 = add i32 %224, %241
  %243 = add i32 %242, %233
  %244 = sitofp i32 %243 to float
  %245 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 7
  store float %244, float* %245, align 8
  %246 = shl nsw i32 %243, 1
  %247 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 2
  store i32 %246, i32* %247, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %121) #12
  %248 = bitcast %class.SkSTArray.13** %65 to i8**
  %249 = load i8*, i8** %248, align 8
  %250 = getelementptr inbounds i8, i8* %249, i64 24
  %251 = bitcast i8* %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = and i64 %252, 4294967294
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %277, label %255

255:                                              ; preds = %221
  %256 = load %"class.GrMeshDrawOp::Target"*, %"class.GrMeshDrawOp::Target"** %64, align 16
  %257 = load i32, i32* %69, align 4
  %258 = load i32, i32* %68, align 8
  %259 = sub nsw i32 %257, %258
  %260 = load i64, i64* %66, align 16
  %261 = bitcast %"class.GrMeshDrawOp::Target"* %256 to void (%"class.GrMeshDrawOp::Target"*, i32, i64)***
  %262 = load void (%"class.GrMeshDrawOp::Target"*, i32, i64)**, void (%"class.GrMeshDrawOp::Target"*, i32, i64)*** %261, align 8
  %263 = getelementptr inbounds void (%"class.GrMeshDrawOp::Target"*, i32, i64)*, void (%"class.GrMeshDrawOp::Target"*, i32, i64)** %262, i64 10
  %264 = load void (%"class.GrMeshDrawOp::Target"*, i32, i64)*, void (%"class.GrMeshDrawOp::Target"*, i32, i64)** %263, align 8
  call void %264(%"class.GrMeshDrawOp::Target"* %256, i32 %259, i64 %260) #12
  %265 = load i32, i32* %68, align 8
  %266 = load i8*, i8** %248, align 8
  %267 = getelementptr inbounds i8, i8* %266, i64 16
  %268 = bitcast i8* %267 to %struct.GrVertexChunk**
  %269 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %268, align 8
  %270 = getelementptr inbounds i8, i8* %266, i64 24
  %271 = bitcast i8* %270 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = lshr i64 %272, 1
  %274 = and i64 %273, 2147483647
  %275 = add nsw i64 %274, -1
  %276 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %269, i64 %275, i32 1
  store i32 %265, i32* %276, align 8
  br label %277

277:                                              ; preds = %221, %255
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %13) #12
  ret void

278:                                              ; preds = %134, %1462
  %279 = phi float [ %119, %134 ], [ %419, %1462 ]
  %280 = phi float [ %119, %134 ], [ %420, %1462 ]
  %281 = phi %"struct.GrStrokeTessellator::PathStrokeList"* [ %132, %134 ], [ %1464, %1462 ]
  %282 = phi i32 [ %120, %134 ], [ %421, %1462 ]
  %283 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 1
  %284 = load i32, i32* %14, align 8
  %285 = and i32 %284, 2
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %418, label %287

287:                                              ; preds = %278
  %288 = load i32, i32* %126, align 4
  %289 = icmp eq i32 %288, 4
  br i1 %289, label %290, label %376

290:                                              ; preds = %287
  %291 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 1, i32 1
  %292 = bitcast float* %291 to i32*
  %293 = load i32, i32* %292, align 4
  store i32 %293, i32* %215, align 16
  %294 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 3
  %295 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %294, align 8
  %296 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %295, null
  br i1 %296, label %297, label %1466

297:                                              ; preds = %1473, %1466, %290, %1480
  %298 = load float, float* %125, align 16
  %299 = load <2 x float>, <2 x float>* %136, align 16
  %300 = load <2 x float>, <2 x float>* %138, align 8
  %301 = shufflevector <2 x float> %299, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %302 = shufflevector <2 x float> %300, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %303 = shufflevector <4 x float> %301, <4 x float> %302, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %304 = insertelement <4 x float> undef, float %298, i32 0
  %305 = shufflevector <4 x float> %304, <4 x float> undef, <4 x i32> zeroinitializer
  %306 = fmul <4 x float> %305, %303
  %307 = fdiv <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %306
  %308 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %307
  %309 = fcmp olt <4 x float> %308, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %310 = sext <4 x i1> %309 to <4 x i32>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = extractelement <2 x i64> %311, i32 0
  %313 = extractelement <2 x i64> %311, i32 1
  %314 = bitcast i64 %312 to <2 x i32>
  %315 = shufflevector <2 x i32> %314, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %316 = bitcast i64 %313 to <2 x i32>
  %317 = shufflevector <2 x i32> %316, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %318 = shufflevector <4 x i32> %315, <4 x i32> %317, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = and <2 x i64> %319, <i64 -4647714812233515008, i64 -4647714812233515008>
  %321 = extractelement <2 x i64> %320, i32 0
  %322 = extractelement <2 x i64> %320, i32 1
  %323 = bitcast i64 %321 to <2 x i32>
  %324 = shufflevector <2 x i32> %323, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %325 = bitcast i64 %322 to <2 x i32>
  %326 = shufflevector <2 x i32> %325, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %327 = shufflevector <4 x i32> %324, <4 x i32> %326, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %328 = xor <2 x i64> %319, <i64 -1, i64 -1>
  %329 = extractelement <2 x i64> %328, i32 0
  %330 = extractelement <2 x i64> %328, i32 1
  %331 = bitcast i64 %329 to <2 x i32>
  %332 = shufflevector <2 x i32> %331, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %333 = bitcast i64 %330 to <2 x i32>
  %334 = shufflevector <2 x i32> %333, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %335 = shufflevector <4 x i32> %332, <4 x i32> %334, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %336 = bitcast <4 x float> %308 to <2 x i64>
  %337 = extractelement <2 x i64> %336, i32 0
  %338 = bitcast i64 %337 to <2 x i32>
  %339 = shufflevector <4 x float> %308, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %340 = bitcast <2 x float> %339 to <2 x i32>
  %341 = shufflevector <2 x i32> %338, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %342 = shufflevector <2 x i32> %340, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %343 = shufflevector <4 x i32> %341, <4 x i32> %342, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %344 = and <4 x i32> %335, %343
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = extractelement <2 x i64> %345, i32 0
  %347 = extractelement <2 x i64> %345, i32 1
  %348 = bitcast i64 %346 to <2 x i32>
  %349 = shufflevector <2 x i32> %348, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %350 = bitcast i64 %347 to <2 x i32>
  %351 = shufflevector <2 x i32> %350, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %352 = shufflevector <4 x i32> %349, <4 x i32> %351, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %353 = or <4 x i32> %352, %327
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = extractelement <2 x i64> %354, i32 0
  %356 = extractelement <2 x i64> %354, i32 1
  %357 = bitcast i64 %355 to <2 x float>
  %358 = bitcast i64 %356 to <2 x float>
  %359 = shufflevector <2 x float> %357, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %360 = shufflevector <2 x float> %358, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %361 = shufflevector <4 x float> %359, <4 x float> %360, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %362 = fmul <4 x float> %361, %361
  %363 = fmul <4 x float> %362, <float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000, float 0x3FED7F4180000000>
  %364 = fadd <4 x float> %363, <float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000, float 0xBFEE0D3C20000000>
  %365 = fmul <4 x float> %362, <float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000, float 0x3FD2EB8180000000>
  %366 = fadd <4 x float> %365, <float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000, float 0xBFF48DAEE0000000>
  %367 = fmul <4 x float> %362, %366
  %368 = fadd <4 x float> %367, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %369 = fdiv <4 x float> %364, %368
  %370 = fmul <4 x float> %361, %369
  %371 = fadd <4 x float> %370, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %372 = fadd <4 x float> %371, <float 0xBF912843C0000000, float 0xBF912843C0000000, float 0xBF912843C0000000, float 0xBF912843C0000000>
  %373 = fdiv <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %372
  %374 = shufflevector <4 x float> %373, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %375 = shufflevector <4 x float> %373, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %374, <2 x float>* %140, align 16
  store <2 x float> %375, <2 x float>* %141, align 8
  store i32 0, i32* %126, align 4
  br label %376

376:                                              ; preds = %287, %297
  %377 = phi i32 [ 0, %297 ], [ %288, %287 ]
  %378 = add nsw i32 %377, 1
  store i32 %378, i32* %126, align 4
  %379 = sext i32 %377 to i64
  %380 = getelementptr inbounds %class.GrStrokeToleranceBuffer, %class.GrStrokeToleranceBuffer* %5, i64 0, i32 1, i64 %379
  %381 = load float, float* %380, align 4
  %382 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 1, i32 3
  %383 = load i32, i32* %382, align 4
  %384 = lshr i32 %383, 16
  %385 = trunc i32 %384 to i8
  switch i8 %385, label %386 [
    i8 0, label %399
    i8 1, label %387
    i8 2, label %398
  ]

386:                                              ; preds = %376
  call void @llvm.trap() #12
  unreachable

387:                                              ; preds = %376
  %388 = fmul float %381, 0x400921FB60000000
  %389 = call float @llvm.ceil.f32(float %388) #12
  %390 = fcmp olt float %389, 0x41DFFFFFE0000000
  %391 = select i1 %390, float %389, float 0x41DFFFFFE0000000
  %392 = fcmp ogt float %391, 0xC1DFFFFFE0000000
  %393 = select i1 %392, float %391, float 0xC1DFFFFFE0000000
  %394 = fptosi float %393 to i32
  %395 = icmp sgt i32 %394, 1
  %396 = select i1 %395, i32 %394, i32 1
  %397 = add nuw nsw i32 %396, 2
  br label %399

398:                                              ; preds = %376
  br label %399

399:                                              ; preds = %376, %387, %398
  %400 = phi i32 [ %397, %387 ], [ 4, %376 ], [ 3, %398 ]
  %401 = icmp slt i32 %400, %282
  %402 = select i1 %401, i32 %282, i32 %400
  %403 = fcmp olt float %381, %280
  %404 = select i1 %403, float %280, float %381
  %405 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 1, i32 1
  %406 = load float, float* %405, align 4
  %407 = fmul float %406, 5.000000e-01
  store float %407, float* %142, align 4
  %408 = load i32, i32* %382, align 4
  %409 = lshr i32 %408, 16
  %410 = trunc i32 %409 to i8
  switch i8 %410, label %415 [
    i8 1, label %416
    i8 2, label %411
    i8 0, label %412
  ]

411:                                              ; preds = %399
  br label %416

412:                                              ; preds = %399
  %413 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 1, i32 2
  %414 = load float, float* %413, align 4
  br label %416

415:                                              ; preds = %399
  call void @llvm.trap() #12
  unreachable

416:                                              ; preds = %399, %411, %412
  %417 = phi float [ %414, %412 ], [ 0.000000e+00, %411 ], [ -1.000000e+00, %399 ]
  store float %417, float* %143, align 4
  br label %418

418:                                              ; preds = %278, %416
  %419 = phi float [ %404, %416 ], [ %279, %278 ]
  %420 = phi float [ %404, %416 ], [ %280, %278 ]
  %421 = phi i32 [ %402, %416 ], [ %282, %278 ]
  %422 = and i32 %284, 4
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %435, label %424

424:                                              ; preds = %418
  %425 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 2
  %426 = load i32, i32* %22, align 16
  %427 = and i32 %426, 1
  %428 = icmp eq i32 %427, 0
  %429 = trunc i32 %427 to i8
  br i1 %428, label %432, label %430

430:                                              ; preds = %424
  %431 = bitcast %struct.SkRGBA4f* %425 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* align 4 %431, i64 16, i1 false) #12
  br label %434

432:                                              ; preds = %424
  %433 = call i32 @_ZNK8SkRGBA4fIL11SkAlphaType2EE12toBytes_RGBAEv(%struct.SkRGBA4f* %425) #12
  store i32 %433, i32* %146, align 4
  br label %434

434:                                              ; preds = %430, %432
  store i8 %429, i8* %147, align 4
  br label %435

435:                                              ; preds = %418, %434
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %148) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %148, i8* align 8 bitcast ({ %class.SkMatrix*, %class.SkStrokeRec*, %"class.SkPath::RangeIter", %"class.SkPath::RangeIter", i32, [4 x i8], %struct.SkPoint*, float*, %struct.SkPoint*, [8 x i32], [8 x %struct.SkPoint*], [8 x float*], i32, i32, %"struct.std::__1::array.19", %"struct.std::__1::array.19", %"struct.std::__1::array.19" }* @__const._ZN29GrStrokeFixedCountTessellator7prepareEPN12GrMeshDrawOp6TargetEi.strokeIter to i8*), i64 312, i1 false)
  store %class.SkMatrix* %18, %class.SkMatrix** %149, align 8
  store %class.SkStrokeRec* %283, %class.SkStrokeRec** %150, align 8
  store %struct.SkPoint* null, %struct.SkPoint** %153, align 8
  store i32 0, i32* %154, align 8
  store i32 0, i32* %155, align 4
  %436 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 48, i1 false) #12
  %437 = load %class.SkPathRef*, %class.SkPathRef** %436, align 8
  %438 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 4, i32 0
  %439 = bitcast i8** %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 9
  %442 = load i8, i8* %441, align 8
  %443 = icmp eq i8 %442, 0
  br i1 %443, label %444, label %448

444:                                              ; preds = %435
  %445 = inttoptr i64 %440 to i8*
  %446 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 10
  %447 = load i8, i8* %446, align 1, !range !2
  br label %460

448:                                              ; preds = %435
  %449 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 1
  %450 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 3, i32 0
  %451 = load %struct.SkPoint*, %struct.SkPoint** %450, align 8
  %452 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 3, i32 2
  %453 = load i32, i32* %452, align 4
  %454 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %449, %struct.SkPoint* %451, i32 %453) #12
  %455 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %437, i64 0, i32 10
  %456 = zext i1 %454 to i8
  store i8 %456, i8* %455, align 1
  store i8 0, i8* %441, align 8
  %457 = load %class.SkPathRef*, %class.SkPathRef** %436, align 8
  %458 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %457, i64 0, i32 4, i32 0
  %459 = load i8*, i8** %458, align 8
  br label %460

460:                                              ; preds = %448, %444
  %461 = phi i8* [ %445, %444 ], [ %459, %448 ]
  %462 = phi %class.SkPathRef* [ %437, %444 ], [ %457, %448 ]
  %463 = phi i8 [ %447, %444 ], [ %456, %448 ]
  %464 = icmp eq i8 %463, 0
  br i1 %464, label %472, label %465

465:                                              ; preds = %460
  %466 = icmp eq i8* %461, null
  br i1 %466, label %472, label %467

467:                                              ; preds = %465
  %468 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %462, i64 0, i32 4, i32 2
  %469 = load i32, i32* %468, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds i8, i8* %461, i64 %470
  br label %472

472:                                              ; preds = %460, %465, %467
  %473 = phi i8* [ %471, %467 ], [ null, %465 ], [ %461, %460 ]
  %474 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %462, i64 0, i32 3, i32 0
  %475 = bitcast %struct.SkPoint** %474 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %462, i64 0, i32 5, i32 0
  %478 = bitcast float** %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = ptrtoint i8* %473 to i64
  store i64 %440, i64* %157, align 8
  store i64 %476, i64* %159, align 8
  store i64 %479, i64* %161, align 8
  store i64 %480, i64* %162, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 0, i64 16, i1 false) #12
  %481 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %6)
  br i1 %481, label %482, label %1462

482:                                              ; preds = %472, %1460
  %483 = load i32, i32* %154, align 8
  %484 = add nsw i32 %483, 1
  %485 = and i32 %484, 7
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 9, i64 %486
  %488 = load %struct.SkPoint*, %struct.SkPoint** %487, align 8
  %489 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 8, i64 %486
  %490 = load i32, i32* %489, align 4
  switch i32 %490, label %1460 [
    i32 7, label %493
    i32 5, label %549
    i32 6, label %491
    i32 1, label %607
    i32 2, label %671
    i32 3, label %876
    i32 4, label %1089
  ]

491:                                              ; preds = %482
  %492 = bitcast %struct.SkPoint* %488 to i64*
  br label %604

493:                                              ; preds = %482
  %494 = load i8, i8* %73, align 16, !range !2
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %548, label %496

496:                                              ; preds = %493
  %497 = load i8, i8* %74, align 1, !range !2
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %499, label %500

499:                                              ; preds = %496
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  br label %547

500:                                              ; preds = %496
  %501 = load i32, i32* %68, align 8, !noalias !3
  %502 = load i32, i32* %69, align 4, !noalias !3
  %503 = icmp slt i32 %501, %502
  br i1 %503, label %508, label %504

504:                                              ; preds = %500
  %505 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !3
  br i1 %505, label %506, label %547

506:                                              ; preds = %504
  %507 = load i32, i32* %68, align 8, !noalias !3
  br label %508

508:                                              ; preds = %506, %500
  %509 = phi i32 [ %507, %506 ], [ %501, %500 ]
  %510 = add nsw i32 %509, 1
  store i32 %510, i32* %68, align 8, !noalias !3
  %511 = load i64, i64* %66, align 16, !noalias !3
  %512 = load i8*, i8** %175, align 16, !noalias !3
  %513 = getelementptr inbounds i8, i8* %512, i64 %511
  %514 = ptrtoint i8* %513 to i64
  store i64 %514, i64* %176, align 16, !noalias !8
  %515 = icmp eq i8* %512, null
  br i1 %515, label %547, label %516

516:                                              ; preds = %508
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %512, i8* align 8 %212, i64 32, i1 false) #12
  %517 = getelementptr inbounds i8, i8* %512, i64 32
  %518 = bitcast i8* %517 to i64*
  %519 = load i64, i64* %188, align 8
  store i64 %519, i64* %518, align 1
  %520 = getelementptr inbounds i8, i8* %512, i64 40
  %521 = load i32, i32* %22, align 16
  %522 = and i32 %521, 2
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %528, label %524

524:                                              ; preds = %516
  %525 = bitcast i8* %520 to i64*
  %526 = load i64, i64* %178, align 4
  store i64 %526, i64* %525, align 1
  %527 = getelementptr inbounds i8, i8* %512, i64 48
  br label %528

528:                                              ; preds = %524, %516
  %529 = phi i8* [ %520, %516 ], [ %527, %524 ]
  %530 = and i32 %521, 4
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %547, label %532

532:                                              ; preds = %528
  %533 = bitcast i8* %529 to i32*
  %534 = load i32, i32* %179, align 4
  store i32 %534, i32* %533, align 1
  %535 = load i8, i8* %147, align 4, !range !2
  %536 = icmp eq i8 %535, 0
  br i1 %536, label %547, label %537

537:                                              ; preds = %532
  %538 = getelementptr inbounds i8, i8* %529, i64 4
  %539 = bitcast i8* %538 to i32*
  %540 = load i32, i32* %180, align 4
  store i32 %540, i32* %539, align 1
  %541 = getelementptr inbounds i8, i8* %529, i64 8
  %542 = bitcast i8* %541 to i32*
  %543 = load i32, i32* %181, align 4
  store i32 %543, i32* %542, align 1
  %544 = getelementptr inbounds i8, i8* %529, i64 12
  %545 = bitcast i8* %544 to i32*
  %546 = load i32, i32* %182, align 4
  store i32 %546, i32* %545, align 1
  br label %547

547:                                              ; preds = %537, %532, %528, %508, %504, %499
  store <2 x float> zeroinitializer, <2 x float>* %189, align 8
  store i8 0, i8* %73, align 16
  br label %548

548:                                              ; preds = %493, %547
  store i8 0, i8* %74, align 1
  br label %1460

549:                                              ; preds = %482
  %550 = bitcast %struct.SkPoint* %488 to i64*
  %551 = load i64, i64* %550, align 4
  %552 = load i32, i32* %68, align 8, !noalias !11
  %553 = load i32, i32* %69, align 4, !noalias !11
  %554 = icmp slt i32 %552, %553
  br i1 %554, label %559, label %555

555:                                              ; preds = %549
  %556 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !11
  br i1 %556, label %557, label %604

557:                                              ; preds = %555
  %558 = load i32, i32* %68, align 8, !noalias !11
  br label %559

559:                                              ; preds = %557, %549
  %560 = phi i32 [ %558, %557 ], [ %552, %549 ]
  %561 = add nsw i32 %560, 1
  store i32 %561, i32* %68, align 8, !noalias !11
  %562 = load i64, i64* %66, align 16, !noalias !11
  %563 = load i8*, i8** %175, align 16, !noalias !11
  %564 = getelementptr inbounds i8, i8* %563, i64 %562
  %565 = ptrtoint i8* %564 to i64
  store i64 %565, i64* %176, align 16, !noalias !16
  %566 = icmp eq i8* %563, null
  br i1 %566, label %604, label %567

567:                                              ; preds = %559
  %568 = bitcast i8* %563 to i64*
  store i64 %551, i64* %568, align 1
  %569 = getelementptr inbounds i8, i8* %563, i64 8
  %570 = bitcast i8* %569 to i64*
  store i64 %551, i64* %570, align 1
  %571 = getelementptr inbounds i8, i8* %563, i64 16
  %572 = bitcast i8* %571 to i64*
  store i64 %551, i64* %572, align 1
  %573 = getelementptr inbounds i8, i8* %563, i64 24
  %574 = bitcast i8* %573 to i64*
  store i64 %551, i64* %574, align 1
  %575 = getelementptr inbounds i8, i8* %563, i64 32
  %576 = bitcast i8* %575 to i64*
  store i64 %551, i64* %576, align 1
  %577 = getelementptr inbounds i8, i8* %563, i64 40
  %578 = load i32, i32* %22, align 16
  %579 = and i32 %578, 2
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %585, label %581

581:                                              ; preds = %567
  %582 = bitcast i8* %577 to i64*
  %583 = load i64, i64* %178, align 4
  store i64 %583, i64* %582, align 1
  %584 = getelementptr inbounds i8, i8* %563, i64 48
  br label %585

585:                                              ; preds = %581, %567
  %586 = phi i8* [ %577, %567 ], [ %584, %581 ]
  %587 = and i32 %578, 4
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %604, label %589

589:                                              ; preds = %585
  %590 = bitcast i8* %586 to i32*
  %591 = load i32, i32* %179, align 4
  store i32 %591, i32* %590, align 1
  %592 = load i8, i8* %147, align 4, !range !2
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %604, label %594

594:                                              ; preds = %589
  %595 = getelementptr inbounds i8, i8* %586, i64 4
  %596 = bitcast i8* %595 to i32*
  %597 = load i32, i32* %180, align 4
  store i32 %597, i32* %596, align 1
  %598 = getelementptr inbounds i8, i8* %586, i64 8
  %599 = bitcast i8* %598 to i32*
  %600 = load i32, i32* %181, align 4
  store i32 %600, i32* %599, align 1
  %601 = getelementptr inbounds i8, i8* %586, i64 12
  %602 = bitcast i8* %601 to i32*
  %603 = load i32, i32* %182, align 4
  store i32 %603, i32* %602, align 1
  br label %604

604:                                              ; preds = %491, %594, %589, %585, %559, %555
  %605 = phi i64* [ %492, %491 ], [ %550, %594 ], [ %550, %589 ], [ %550, %585 ], [ %550, %559 ], [ %550, %555 ]
  %606 = load i64, i64* %605, align 4
  store i64 %606, i64* %188, align 8
  store i8 1, i8* %74, align 1
  br label %1460

607:                                              ; preds = %482
  %608 = bitcast %struct.SkPoint* %488 to i64*
  %609 = load i64, i64* %608, align 4
  %610 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 1
  %611 = bitcast %struct.SkPoint* %610 to i64*
  %612 = load i64, i64* %611, align 4
  %613 = load i8, i8* %74, align 1, !range !2
  %614 = icmp eq i8 %613, 0
  br i1 %614, label %615, label %616

615:                                              ; preds = %607
  store i64 %609, i64* %198, align 8
  store i64 %609, i64* %199, align 8
  store i64 %612, i64* %200, align 8
  store i64 %612, i64* %201, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  br label %670

616:                                              ; preds = %607
  %617 = load i32, i32* %68, align 8, !noalias !19
  %618 = load i32, i32* %69, align 4, !noalias !19
  %619 = icmp slt i32 %617, %618
  br i1 %619, label %624, label %620

620:                                              ; preds = %616
  %621 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !19
  br i1 %621, label %622, label %670

622:                                              ; preds = %620
  %623 = load i32, i32* %68, align 8, !noalias !19
  br label %624

624:                                              ; preds = %622, %616
  %625 = phi i32 [ %623, %622 ], [ %617, %616 ]
  %626 = add nsw i32 %625, 1
  store i32 %626, i32* %68, align 8, !noalias !19
  %627 = load i64, i64* %66, align 16, !noalias !19
  %628 = load i8*, i8** %175, align 16, !noalias !19
  %629 = getelementptr inbounds i8, i8* %628, i64 %627
  %630 = ptrtoint i8* %629 to i64
  store i64 %630, i64* %176, align 16, !noalias !24
  %631 = icmp eq i8* %628, null
  br i1 %631, label %670, label %632

632:                                              ; preds = %624
  %633 = bitcast i8* %628 to i64*
  store i64 %609, i64* %633, align 1
  %634 = getelementptr inbounds i8, i8* %628, i64 8
  %635 = bitcast i8* %634 to i64*
  store i64 %609, i64* %635, align 1
  %636 = getelementptr inbounds i8, i8* %628, i64 16
  %637 = bitcast i8* %636 to i64*
  store i64 %612, i64* %637, align 1
  %638 = getelementptr inbounds i8, i8* %628, i64 24
  %639 = bitcast i8* %638 to i64*
  store i64 %612, i64* %639, align 1
  %640 = getelementptr inbounds i8, i8* %628, i64 32
  %641 = bitcast i8* %640 to i64*
  %642 = load i64, i64* %188, align 8
  store i64 %642, i64* %641, align 1
  %643 = getelementptr inbounds i8, i8* %628, i64 40
  %644 = load i32, i32* %22, align 16
  %645 = and i32 %644, 2
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %651, label %647

647:                                              ; preds = %632
  %648 = bitcast i8* %643 to i64*
  %649 = load i64, i64* %178, align 4
  store i64 %649, i64* %648, align 1
  %650 = getelementptr inbounds i8, i8* %628, i64 48
  br label %651

651:                                              ; preds = %647, %632
  %652 = phi i8* [ %643, %632 ], [ %650, %647 ]
  %653 = and i32 %644, 4
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %670, label %655

655:                                              ; preds = %651
  %656 = bitcast i8* %652 to i32*
  %657 = load i32, i32* %179, align 4
  store i32 %657, i32* %656, align 1
  %658 = load i8, i8* %147, align 4, !range !2
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %670, label %660

660:                                              ; preds = %655
  %661 = getelementptr inbounds i8, i8* %652, i64 4
  %662 = bitcast i8* %661 to i32*
  %663 = load i32, i32* %180, align 4
  store i32 %663, i32* %662, align 1
  %664 = getelementptr inbounds i8, i8* %652, i64 8
  %665 = bitcast i8* %664 to i32*
  %666 = load i32, i32* %181, align 4
  store i32 %666, i32* %665, align 1
  %667 = getelementptr inbounds i8, i8* %652, i64 12
  %668 = bitcast i8* %667 to i32*
  %669 = load i32, i32* %182, align 4
  store i32 %669, i32* %668, align 1
  br label %670

670:                                              ; preds = %615, %620, %624, %651, %655, %660
  store i64 %609, i64* %188, align 8
  br label %1460

671:                                              ; preds = %482
  %672 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 1, i32 0
  %673 = bitcast float* %672 to <2 x float>*
  %674 = load <2 x float>, <2 x float>* %673, align 4
  %675 = bitcast %struct.SkPoint* %488 to <2 x float>*
  %676 = load <2 x float>, <2 x float>* %675, align 4
  %677 = fsub <2 x float> %674, %676
  %678 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2, i32 0
  %679 = bitcast float* %678 to <2 x float>*
  %680 = load <2 x float>, <2 x float>* %679, align 4
  %681 = fsub <2 x float> %680, %674
  %682 = shufflevector <2 x float> %681, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %683 = fmul <2 x float> %677, %682
  %684 = extractelement <2 x float> %683, i32 0
  %685 = extractelement <2 x float> %683, i32 1
  %686 = fsub float %684, %685
  %687 = fcmp oeq float %686, 0.000000e+00
  br i1 %687, label %688, label %875

688:                                              ; preds = %671
  %689 = fmul <2 x float> %677, %681
  %690 = extractelement <2 x float> %689, i32 0
  %691 = extractelement <2 x float> %689, i32 1
  %692 = fadd float %690, %691
  %693 = fcmp olt float %692, 0.000000e+00
  br i1 %693, label %694, label %875

694:                                              ; preds = %688
  %695 = call float @_Z20SkFindQuadMidTangentPK7SkPoint(%struct.SkPoint* %488) #12
  %696 = call <2 x float> @_Z12SkEvalQuadAtPK7SkPointf(%struct.SkPoint* %488, float %695) #12
  %697 = load i32, i32* %68, align 8, !noalias !27
  %698 = load i32, i32* %69, align 4, !noalias !27
  %699 = icmp slt i32 %697, %698
  br i1 %699, label %704, label %700

700:                                              ; preds = %694
  %701 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !27
  br i1 %701, label %702, label %749

702:                                              ; preds = %700
  %703 = load i32, i32* %68, align 8, !noalias !27
  br label %704

704:                                              ; preds = %702, %694
  %705 = phi i32 [ %703, %702 ], [ %697, %694 ]
  %706 = add nsw i32 %705, 1
  store i32 %706, i32* %68, align 8, !noalias !27
  %707 = load i64, i64* %66, align 16, !noalias !27
  %708 = load i8*, i8** %175, align 16, !noalias !27
  %709 = getelementptr inbounds i8, i8* %708, i64 %707
  %710 = ptrtoint i8* %709 to i64
  store i64 %710, i64* %176, align 16, !noalias !32
  %711 = icmp eq i8* %708, null
  br i1 %711, label %749, label %712

712:                                              ; preds = %704
  %713 = bitcast i8* %708 to <2 x float>*
  store <2 x float> %696, <2 x float>* %713, align 1
  %714 = getelementptr inbounds i8, i8* %708, i64 8
  %715 = bitcast i8* %714 to <2 x float>*
  store <2 x float> %696, <2 x float>* %715, align 1
  %716 = getelementptr inbounds i8, i8* %708, i64 16
  %717 = bitcast i8* %716 to <2 x float>*
  store <2 x float> %696, <2 x float>* %717, align 1
  %718 = getelementptr inbounds i8, i8* %708, i64 24
  %719 = bitcast i8* %718 to <2 x float>*
  store <2 x float> %696, <2 x float>* %719, align 1
  %720 = getelementptr inbounds i8, i8* %708, i64 32
  %721 = bitcast i8* %720 to <2 x float>*
  store <2 x float> %696, <2 x float>* %721, align 1
  %722 = getelementptr inbounds i8, i8* %708, i64 40
  %723 = load i32, i32* %22, align 16
  %724 = and i32 %723, 2
  %725 = icmp eq i32 %724, 0
  br i1 %725, label %730, label %726

726:                                              ; preds = %712
  %727 = bitcast i8* %722 to i64*
  %728 = load i64, i64* %178, align 4
  store i64 %728, i64* %727, align 1
  %729 = getelementptr inbounds i8, i8* %708, i64 48
  br label %730

730:                                              ; preds = %726, %712
  %731 = phi i8* [ %722, %712 ], [ %729, %726 ]
  %732 = and i32 %723, 4
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %749, label %734

734:                                              ; preds = %730
  %735 = bitcast i8* %731 to i32*
  %736 = load i32, i32* %179, align 4
  store i32 %736, i32* %735, align 1
  %737 = load i8, i8* %147, align 4, !range !2
  %738 = icmp eq i8 %737, 0
  br i1 %738, label %749, label %739

739:                                              ; preds = %734
  %740 = getelementptr inbounds i8, i8* %731, i64 4
  %741 = bitcast i8* %740 to i32*
  %742 = load i32, i32* %180, align 4
  store i32 %742, i32* %741, align 1
  %743 = getelementptr inbounds i8, i8* %731, i64 8
  %744 = bitcast i8* %743 to i32*
  %745 = load i32, i32* %181, align 4
  store i32 %745, i32* %744, align 1
  %746 = getelementptr inbounds i8, i8* %731, i64 12
  %747 = bitcast i8* %746 to i32*
  %748 = load i32, i32* %182, align 4
  store i32 %748, i32* %747, align 1
  br label %749

749:                                              ; preds = %700, %704, %730, %734, %739
  %750 = bitcast %struct.SkPoint* %488 to i64*
  %751 = load i64, i64* %750, align 4
  %752 = load i8, i8* %74, align 1, !range !2
  %753 = icmp eq i8 %752, 0
  br i1 %753, label %754, label %758

754:                                              ; preds = %749
  store i64 %751, i64* %198, align 8
  store i64 %751, i64* %199, align 8
  store <2 x float> %696, <2 x float>* %195, align 8
  store <2 x float> %696, <2 x float>* %197, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  store i64 %751, i64* %188, align 8
  %755 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2
  %756 = bitcast %struct.SkPoint* %755 to <2 x float>*
  %757 = load <2 x float>, <2 x float>* %756, align 4
  br label %819

758:                                              ; preds = %749
  %759 = load i32, i32* %68, align 8, !noalias !35
  %760 = load i32, i32* %69, align 4, !noalias !35
  %761 = icmp slt i32 %759, %760
  br i1 %761, label %766, label %762

762:                                              ; preds = %758
  %763 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !35
  br i1 %763, label %764, label %812

764:                                              ; preds = %762
  %765 = load i32, i32* %68, align 8, !noalias !35
  br label %766

766:                                              ; preds = %764, %758
  %767 = phi i32 [ %765, %764 ], [ %759, %758 ]
  %768 = add nsw i32 %767, 1
  store i32 %768, i32* %68, align 8, !noalias !35
  %769 = load i64, i64* %66, align 16, !noalias !35
  %770 = load i8*, i8** %175, align 16, !noalias !35
  %771 = getelementptr inbounds i8, i8* %770, i64 %769
  %772 = ptrtoint i8* %771 to i64
  store i64 %772, i64* %176, align 16, !noalias !40
  %773 = icmp eq i8* %770, null
  br i1 %773, label %812, label %774

774:                                              ; preds = %766
  %775 = bitcast i8* %770 to i64*
  store i64 %751, i64* %775, align 1
  %776 = getelementptr inbounds i8, i8* %770, i64 8
  %777 = bitcast i8* %776 to i64*
  store i64 %751, i64* %777, align 1
  %778 = getelementptr inbounds i8, i8* %770, i64 16
  %779 = bitcast i8* %778 to <2 x float>*
  store <2 x float> %696, <2 x float>* %779, align 1
  %780 = getelementptr inbounds i8, i8* %770, i64 24
  %781 = bitcast i8* %780 to <2 x float>*
  store <2 x float> %696, <2 x float>* %781, align 1
  %782 = getelementptr inbounds i8, i8* %770, i64 32
  %783 = bitcast i8* %782 to i64*
  %784 = load i64, i64* %188, align 8
  store i64 %784, i64* %783, align 1
  %785 = getelementptr inbounds i8, i8* %770, i64 40
  %786 = load i32, i32* %22, align 16
  %787 = and i32 %786, 2
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %793, label %789

789:                                              ; preds = %774
  %790 = bitcast i8* %785 to i64*
  %791 = load i64, i64* %178, align 4
  store i64 %791, i64* %790, align 1
  %792 = getelementptr inbounds i8, i8* %770, i64 48
  br label %793

793:                                              ; preds = %789, %774
  %794 = phi i8* [ %785, %774 ], [ %792, %789 ]
  %795 = and i32 %786, 4
  %796 = icmp eq i32 %795, 0
  br i1 %796, label %812, label %797

797:                                              ; preds = %793
  %798 = bitcast i8* %794 to i32*
  %799 = load i32, i32* %179, align 4
  store i32 %799, i32* %798, align 1
  %800 = load i8, i8* %147, align 4, !range !2
  %801 = icmp eq i8 %800, 0
  br i1 %801, label %812, label %802

802:                                              ; preds = %797
  %803 = getelementptr inbounds i8, i8* %794, i64 4
  %804 = bitcast i8* %803 to i32*
  %805 = load i32, i32* %180, align 4
  store i32 %805, i32* %804, align 1
  %806 = getelementptr inbounds i8, i8* %794, i64 8
  %807 = bitcast i8* %806 to i32*
  %808 = load i32, i32* %181, align 4
  store i32 %808, i32* %807, align 1
  %809 = getelementptr inbounds i8, i8* %794, i64 12
  %810 = bitcast i8* %809 to i32*
  %811 = load i32, i32* %182, align 4
  store i32 %811, i32* %810, align 1
  br label %812

812:                                              ; preds = %762, %766, %793, %797, %802
  %813 = load i8, i8* %74, align 1
  store i64 %751, i64* %188, align 8
  %814 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2
  %815 = bitcast %struct.SkPoint* %814 to <2 x float>*
  %816 = load <2 x float>, <2 x float>* %815, align 4
  %817 = icmp eq i8 %813, 0
  br i1 %817, label %818, label %819

818:                                              ; preds = %812
  store <2 x float> %696, <2 x float>* %191, align 8
  store <2 x float> %696, <2 x float>* %193, align 8
  store <2 x float> %816, <2 x float>* %195, align 8
  store <2 x float> %816, <2 x float>* %197, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  br label %874

819:                                              ; preds = %754, %812
  %820 = phi <2 x float> [ %757, %754 ], [ %816, %812 ]
  %821 = load i32, i32* %68, align 8, !noalias !43
  %822 = load i32, i32* %69, align 4, !noalias !43
  %823 = icmp slt i32 %821, %822
  br i1 %823, label %828, label %824

824:                                              ; preds = %819
  %825 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !43
  br i1 %825, label %826, label %874

826:                                              ; preds = %824
  %827 = load i32, i32* %68, align 8, !noalias !43
  br label %828

828:                                              ; preds = %826, %819
  %829 = phi i32 [ %827, %826 ], [ %821, %819 ]
  %830 = add nsw i32 %829, 1
  store i32 %830, i32* %68, align 8, !noalias !43
  %831 = load i64, i64* %66, align 16, !noalias !43
  %832 = load i8*, i8** %175, align 16, !noalias !43
  %833 = getelementptr inbounds i8, i8* %832, i64 %831
  %834 = ptrtoint i8* %833 to i64
  store i64 %834, i64* %176, align 16, !noalias !48
  %835 = icmp eq i8* %832, null
  br i1 %835, label %874, label %836

836:                                              ; preds = %828
  %837 = bitcast i8* %832 to <2 x float>*
  store <2 x float> %696, <2 x float>* %837, align 1
  %838 = getelementptr inbounds i8, i8* %832, i64 8
  %839 = bitcast i8* %838 to <2 x float>*
  store <2 x float> %696, <2 x float>* %839, align 1
  %840 = getelementptr inbounds i8, i8* %832, i64 16
  %841 = bitcast i8* %840 to <2 x float>*
  store <2 x float> %820, <2 x float>* %841, align 1
  %842 = getelementptr inbounds i8, i8* %832, i64 24
  %843 = bitcast i8* %842 to <2 x float>*
  store <2 x float> %820, <2 x float>* %843, align 1
  %844 = getelementptr inbounds i8, i8* %832, i64 32
  %845 = bitcast i8* %844 to i64*
  %846 = load i64, i64* %188, align 8
  store i64 %846, i64* %845, align 1
  %847 = getelementptr inbounds i8, i8* %832, i64 40
  %848 = load i32, i32* %22, align 16
  %849 = and i32 %848, 2
  %850 = icmp eq i32 %849, 0
  br i1 %850, label %855, label %851

851:                                              ; preds = %836
  %852 = bitcast i8* %847 to i64*
  %853 = load i64, i64* %178, align 4
  store i64 %853, i64* %852, align 1
  %854 = getelementptr inbounds i8, i8* %832, i64 48
  br label %855

855:                                              ; preds = %851, %836
  %856 = phi i8* [ %847, %836 ], [ %854, %851 ]
  %857 = and i32 %848, 4
  %858 = icmp eq i32 %857, 0
  br i1 %858, label %874, label %859

859:                                              ; preds = %855
  %860 = bitcast i8* %856 to i32*
  %861 = load i32, i32* %179, align 4
  store i32 %861, i32* %860, align 1
  %862 = load i8, i8* %147, align 4, !range !2
  %863 = icmp eq i8 %862, 0
  br i1 %863, label %874, label %864

864:                                              ; preds = %859
  %865 = getelementptr inbounds i8, i8* %856, i64 4
  %866 = bitcast i8* %865 to i32*
  %867 = load i32, i32* %180, align 4
  store i32 %867, i32* %866, align 1
  %868 = getelementptr inbounds i8, i8* %856, i64 8
  %869 = bitcast i8* %868 to i32*
  %870 = load i32, i32* %181, align 4
  store i32 %870, i32* %869, align 1
  %871 = getelementptr inbounds i8, i8* %856, i64 12
  %872 = bitcast i8* %871 to i32*
  %873 = load i32, i32* %182, align 4
  store i32 %873, i32* %872, align 1
  br label %874

874:                                              ; preds = %818, %824, %828, %855, %859, %864
  store <2 x float> %696, <2 x float>* %189, align 8
  br label %1460

875:                                              ; preds = %671, %688
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter11quadraticToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %488)
  br label %1460

876:                                              ; preds = %482
  %877 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 1, i32 0
  %878 = bitcast float* %877 to <2 x float>*
  %879 = load <2 x float>, <2 x float>* %878, align 4
  %880 = bitcast %struct.SkPoint* %488 to <2 x float>*
  %881 = load <2 x float>, <2 x float>* %880, align 4
  %882 = fsub <2 x float> %879, %881
  %883 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2, i32 0
  %884 = bitcast float* %883 to <2 x float>*
  %885 = load <2 x float>, <2 x float>* %884, align 4
  %886 = fsub <2 x float> %885, %879
  %887 = shufflevector <2 x float> %886, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %888 = fmul <2 x float> %882, %887
  %889 = extractelement <2 x float> %888, i32 0
  %890 = extractelement <2 x float> %888, i32 1
  %891 = fsub float %889, %890
  %892 = fcmp oeq float %891, 0.000000e+00
  br i1 %892, label %893, label %1085

893:                                              ; preds = %876
  %894 = fmul <2 x float> %882, %886
  %895 = extractelement <2 x float> %894, i32 0
  %896 = extractelement <2 x float> %894, i32 1
  %897 = fadd float %895, %896
  %898 = fcmp olt float %897, 0.000000e+00
  br i1 %898, label %899, label %1085

899:                                              ; preds = %893
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %208) #12
  %900 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 10, i64 %486
  %901 = bitcast float** %900 to i32**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %214, i8 -1, i64 28, i1 false)
  %902 = load i32*, i32** %901, align 8
  %903 = load i32, i32* %902, align 4
  %904 = bitcast %struct.SkPoint* %488 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %208, i8* align 4 %904, i64 24, i1 false) #12
  store i32 %903, i32* %210, align 4
  %905 = call float @_ZNK7SkConic14findMidTangentEv(%struct.SkConic* nonnull %7) #12
  %906 = call <2 x float> @_ZNK7SkConic6evalAtEf(%struct.SkConic* nonnull %7, float %905) #12
  %907 = load i32, i32* %68, align 8, !noalias !51
  %908 = load i32, i32* %69, align 4, !noalias !51
  %909 = icmp slt i32 %907, %908
  br i1 %909, label %914, label %910

910:                                              ; preds = %899
  %911 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !51
  br i1 %911, label %912, label %959

912:                                              ; preds = %910
  %913 = load i32, i32* %68, align 8, !noalias !51
  br label %914

914:                                              ; preds = %912, %899
  %915 = phi i32 [ %913, %912 ], [ %907, %899 ]
  %916 = add nsw i32 %915, 1
  store i32 %916, i32* %68, align 8, !noalias !51
  %917 = load i64, i64* %66, align 16, !noalias !51
  %918 = load i8*, i8** %175, align 16, !noalias !51
  %919 = getelementptr inbounds i8, i8* %918, i64 %917
  %920 = ptrtoint i8* %919 to i64
  store i64 %920, i64* %176, align 16, !noalias !56
  %921 = icmp eq i8* %918, null
  br i1 %921, label %959, label %922

922:                                              ; preds = %914
  %923 = bitcast i8* %918 to <2 x float>*
  store <2 x float> %906, <2 x float>* %923, align 1
  %924 = getelementptr inbounds i8, i8* %918, i64 8
  %925 = bitcast i8* %924 to <2 x float>*
  store <2 x float> %906, <2 x float>* %925, align 1
  %926 = getelementptr inbounds i8, i8* %918, i64 16
  %927 = bitcast i8* %926 to <2 x float>*
  store <2 x float> %906, <2 x float>* %927, align 1
  %928 = getelementptr inbounds i8, i8* %918, i64 24
  %929 = bitcast i8* %928 to <2 x float>*
  store <2 x float> %906, <2 x float>* %929, align 1
  %930 = getelementptr inbounds i8, i8* %918, i64 32
  %931 = bitcast i8* %930 to <2 x float>*
  store <2 x float> %906, <2 x float>* %931, align 1
  %932 = getelementptr inbounds i8, i8* %918, i64 40
  %933 = load i32, i32* %22, align 16
  %934 = and i32 %933, 2
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %940, label %936

936:                                              ; preds = %922
  %937 = bitcast i8* %932 to i64*
  %938 = load i64, i64* %178, align 4
  store i64 %938, i64* %937, align 1
  %939 = getelementptr inbounds i8, i8* %918, i64 48
  br label %940

940:                                              ; preds = %936, %922
  %941 = phi i8* [ %932, %922 ], [ %939, %936 ]
  %942 = and i32 %933, 4
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %959, label %944

944:                                              ; preds = %940
  %945 = bitcast i8* %941 to i32*
  %946 = load i32, i32* %179, align 4
  store i32 %946, i32* %945, align 1
  %947 = load i8, i8* %147, align 4, !range !2
  %948 = icmp eq i8 %947, 0
  br i1 %948, label %959, label %949

949:                                              ; preds = %944
  %950 = getelementptr inbounds i8, i8* %941, i64 4
  %951 = bitcast i8* %950 to i32*
  %952 = load i32, i32* %180, align 4
  store i32 %952, i32* %951, align 1
  %953 = getelementptr inbounds i8, i8* %941, i64 8
  %954 = bitcast i8* %953 to i32*
  %955 = load i32, i32* %181, align 4
  store i32 %955, i32* %954, align 1
  %956 = getelementptr inbounds i8, i8* %941, i64 12
  %957 = bitcast i8* %956 to i32*
  %958 = load i32, i32* %182, align 4
  store i32 %958, i32* %957, align 1
  br label %959

959:                                              ; preds = %910, %914, %940, %944, %949
  %960 = bitcast %struct.SkPoint* %488 to i64*
  %961 = load i64, i64* %960, align 4
  %962 = load i8, i8* %74, align 1, !range !2
  %963 = icmp eq i8 %962, 0
  br i1 %963, label %964, label %968

964:                                              ; preds = %959
  store i64 %961, i64* %198, align 8
  store i64 %961, i64* %199, align 8
  store <2 x float> %906, <2 x float>* %195, align 8
  store <2 x float> %906, <2 x float>* %197, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  store i64 %961, i64* %188, align 8
  %965 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2
  %966 = bitcast %struct.SkPoint* %965 to <2 x float>*
  %967 = load <2 x float>, <2 x float>* %966, align 4
  br label %1029

968:                                              ; preds = %959
  %969 = load i32, i32* %68, align 8, !noalias !59
  %970 = load i32, i32* %69, align 4, !noalias !59
  %971 = icmp slt i32 %969, %970
  br i1 %971, label %976, label %972

972:                                              ; preds = %968
  %973 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !59
  br i1 %973, label %974, label %1022

974:                                              ; preds = %972
  %975 = load i32, i32* %68, align 8, !noalias !59
  br label %976

976:                                              ; preds = %974, %968
  %977 = phi i32 [ %975, %974 ], [ %969, %968 ]
  %978 = add nsw i32 %977, 1
  store i32 %978, i32* %68, align 8, !noalias !59
  %979 = load i64, i64* %66, align 16, !noalias !59
  %980 = load i8*, i8** %175, align 16, !noalias !59
  %981 = getelementptr inbounds i8, i8* %980, i64 %979
  %982 = ptrtoint i8* %981 to i64
  store i64 %982, i64* %176, align 16, !noalias !64
  %983 = icmp eq i8* %980, null
  br i1 %983, label %1022, label %984

984:                                              ; preds = %976
  %985 = bitcast i8* %980 to i64*
  store i64 %961, i64* %985, align 1
  %986 = getelementptr inbounds i8, i8* %980, i64 8
  %987 = bitcast i8* %986 to i64*
  store i64 %961, i64* %987, align 1
  %988 = getelementptr inbounds i8, i8* %980, i64 16
  %989 = bitcast i8* %988 to <2 x float>*
  store <2 x float> %906, <2 x float>* %989, align 1
  %990 = getelementptr inbounds i8, i8* %980, i64 24
  %991 = bitcast i8* %990 to <2 x float>*
  store <2 x float> %906, <2 x float>* %991, align 1
  %992 = getelementptr inbounds i8, i8* %980, i64 32
  %993 = bitcast i8* %992 to i64*
  %994 = load i64, i64* %188, align 8
  store i64 %994, i64* %993, align 1
  %995 = getelementptr inbounds i8, i8* %980, i64 40
  %996 = load i32, i32* %22, align 16
  %997 = and i32 %996, 2
  %998 = icmp eq i32 %997, 0
  br i1 %998, label %1003, label %999

999:                                              ; preds = %984
  %1000 = bitcast i8* %995 to i64*
  %1001 = load i64, i64* %178, align 4
  store i64 %1001, i64* %1000, align 1
  %1002 = getelementptr inbounds i8, i8* %980, i64 48
  br label %1003

1003:                                             ; preds = %999, %984
  %1004 = phi i8* [ %995, %984 ], [ %1002, %999 ]
  %1005 = and i32 %996, 4
  %1006 = icmp eq i32 %1005, 0
  br i1 %1006, label %1022, label %1007

1007:                                             ; preds = %1003
  %1008 = bitcast i8* %1004 to i32*
  %1009 = load i32, i32* %179, align 4
  store i32 %1009, i32* %1008, align 1
  %1010 = load i8, i8* %147, align 4, !range !2
  %1011 = icmp eq i8 %1010, 0
  br i1 %1011, label %1022, label %1012

1012:                                             ; preds = %1007
  %1013 = getelementptr inbounds i8, i8* %1004, i64 4
  %1014 = bitcast i8* %1013 to i32*
  %1015 = load i32, i32* %180, align 4
  store i32 %1015, i32* %1014, align 1
  %1016 = getelementptr inbounds i8, i8* %1004, i64 8
  %1017 = bitcast i8* %1016 to i32*
  %1018 = load i32, i32* %181, align 4
  store i32 %1018, i32* %1017, align 1
  %1019 = getelementptr inbounds i8, i8* %1004, i64 12
  %1020 = bitcast i8* %1019 to i32*
  %1021 = load i32, i32* %182, align 4
  store i32 %1021, i32* %1020, align 1
  br label %1022

1022:                                             ; preds = %972, %976, %1003, %1007, %1012
  %1023 = load i8, i8* %74, align 1
  store i64 %961, i64* %188, align 8
  %1024 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %488, i64 2
  %1025 = bitcast %struct.SkPoint* %1024 to <2 x float>*
  %1026 = load <2 x float>, <2 x float>* %1025, align 4
  %1027 = icmp eq i8 %1023, 0
  br i1 %1027, label %1028, label %1029

1028:                                             ; preds = %1022
  store <2 x float> %906, <2 x float>* %191, align 8
  store <2 x float> %906, <2 x float>* %193, align 8
  store <2 x float> %1026, <2 x float>* %195, align 8
  store <2 x float> %1026, <2 x float>* %197, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  br label %1084

1029:                                             ; preds = %964, %1022
  %1030 = phi <2 x float> [ %967, %964 ], [ %1026, %1022 ]
  %1031 = load i32, i32* %68, align 8, !noalias !67
  %1032 = load i32, i32* %69, align 4, !noalias !67
  %1033 = icmp slt i32 %1031, %1032
  br i1 %1033, label %1038, label %1034

1034:                                             ; preds = %1029
  %1035 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !67
  br i1 %1035, label %1036, label %1084

1036:                                             ; preds = %1034
  %1037 = load i32, i32* %68, align 8, !noalias !67
  br label %1038

1038:                                             ; preds = %1036, %1029
  %1039 = phi i32 [ %1037, %1036 ], [ %1031, %1029 ]
  %1040 = add nsw i32 %1039, 1
  store i32 %1040, i32* %68, align 8, !noalias !67
  %1041 = load i64, i64* %66, align 16, !noalias !67
  %1042 = load i8*, i8** %175, align 16, !noalias !67
  %1043 = getelementptr inbounds i8, i8* %1042, i64 %1041
  %1044 = ptrtoint i8* %1043 to i64
  store i64 %1044, i64* %176, align 16, !noalias !72
  %1045 = icmp eq i8* %1042, null
  br i1 %1045, label %1084, label %1046

1046:                                             ; preds = %1038
  %1047 = bitcast i8* %1042 to <2 x float>*
  store <2 x float> %906, <2 x float>* %1047, align 1
  %1048 = getelementptr inbounds i8, i8* %1042, i64 8
  %1049 = bitcast i8* %1048 to <2 x float>*
  store <2 x float> %906, <2 x float>* %1049, align 1
  %1050 = getelementptr inbounds i8, i8* %1042, i64 16
  %1051 = bitcast i8* %1050 to <2 x float>*
  store <2 x float> %1030, <2 x float>* %1051, align 1
  %1052 = getelementptr inbounds i8, i8* %1042, i64 24
  %1053 = bitcast i8* %1052 to <2 x float>*
  store <2 x float> %1030, <2 x float>* %1053, align 1
  %1054 = getelementptr inbounds i8, i8* %1042, i64 32
  %1055 = bitcast i8* %1054 to i64*
  %1056 = load i64, i64* %188, align 8
  store i64 %1056, i64* %1055, align 1
  %1057 = getelementptr inbounds i8, i8* %1042, i64 40
  %1058 = load i32, i32* %22, align 16
  %1059 = and i32 %1058, 2
  %1060 = icmp eq i32 %1059, 0
  br i1 %1060, label %1065, label %1061

1061:                                             ; preds = %1046
  %1062 = bitcast i8* %1057 to i64*
  %1063 = load i64, i64* %178, align 4
  store i64 %1063, i64* %1062, align 1
  %1064 = getelementptr inbounds i8, i8* %1042, i64 48
  br label %1065

1065:                                             ; preds = %1061, %1046
  %1066 = phi i8* [ %1057, %1046 ], [ %1064, %1061 ]
  %1067 = and i32 %1058, 4
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1084, label %1069

1069:                                             ; preds = %1065
  %1070 = bitcast i8* %1066 to i32*
  %1071 = load i32, i32* %179, align 4
  store i32 %1071, i32* %1070, align 1
  %1072 = load i8, i8* %147, align 4, !range !2
  %1073 = icmp eq i8 %1072, 0
  br i1 %1073, label %1084, label %1074

1074:                                             ; preds = %1069
  %1075 = getelementptr inbounds i8, i8* %1066, i64 4
  %1076 = bitcast i8* %1075 to i32*
  %1077 = load i32, i32* %180, align 4
  store i32 %1077, i32* %1076, align 1
  %1078 = getelementptr inbounds i8, i8* %1066, i64 8
  %1079 = bitcast i8* %1078 to i32*
  %1080 = load i32, i32* %181, align 4
  store i32 %1080, i32* %1079, align 1
  %1081 = getelementptr inbounds i8, i8* %1066, i64 12
  %1082 = bitcast i8* %1081 to i32*
  %1083 = load i32, i32* %182, align 4
  store i32 %1083, i32* %1082, align 1
  br label %1084

1084:                                             ; preds = %1028, %1034, %1038, %1065, %1069, %1074
  store <2 x float> %906, <2 x float>* %189, align 8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %208) #12
  br label %1460

1085:                                             ; preds = %876, %893
  %1086 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %6, i64 0, i32 10, i64 %486
  %1087 = load float*, float** %1086, align 8
  %1088 = load float, float* %1087, align 4
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter7conicToEPK7SkPointf(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %488, float %1088)
  br label %1460

1089:                                             ; preds = %482
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %165) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %165, i8 -1, i64 80, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #12
  store float 0xFFFFFFFFE0000000, float* %167, align 4
  store float 0xFFFFFFFFE0000000, float* %168, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #12
  store i8 -86, i8* %10, align 1
  %1090 = call i32 @_ZN11GrPathUtils23findCubicConvex180ChopsEPK7SkPointPfPb(%struct.SkPoint* %488, float* nonnull %167, i8* nonnull %10) #12
  %1091 = icmp eq i32 %1090, 0
  br i1 %1091, label %1092, label %1093

1092:                                             ; preds = %1089
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %488)
  br label %1459

1093:                                             ; preds = %1089
  %1094 = icmp eq i32 %1090, 1
  %1095 = load float, float* %167, align 4
  br i1 %1094, label %1096, label %1156

1096:                                             ; preds = %1093
  call void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint* %488, %struct.SkPoint* nonnull %169, float %1095) #12
  %1097 = load i8, i8* %10, align 1, !range !2
  %1098 = icmp eq i8 %1097, 0
  br i1 %1098, label %1155, label %1099

1099:                                             ; preds = %1096
  %1100 = load i64, i64* %172, align 8
  %1101 = load i32, i32* %68, align 8, !noalias !75
  %1102 = load i32, i32* %69, align 4, !noalias !75
  %1103 = icmp slt i32 %1101, %1102
  br i1 %1103, label %1108, label %1104

1104:                                             ; preds = %1099
  %1105 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !75
  br i1 %1105, label %1106, label %1153

1106:                                             ; preds = %1104
  %1107 = load i32, i32* %68, align 8, !noalias !75
  br label %1108

1108:                                             ; preds = %1106, %1099
  %1109 = phi i32 [ %1107, %1106 ], [ %1101, %1099 ]
  %1110 = add nsw i32 %1109, 1
  store i32 %1110, i32* %68, align 8, !noalias !75
  %1111 = load i64, i64* %66, align 16, !noalias !75
  %1112 = load i8*, i8** %175, align 16, !noalias !75
  %1113 = getelementptr inbounds i8, i8* %1112, i64 %1111
  %1114 = ptrtoint i8* %1113 to i64
  store i64 %1114, i64* %176, align 16, !noalias !80
  %1115 = icmp eq i8* %1112, null
  br i1 %1115, label %1153, label %1116

1116:                                             ; preds = %1108
  %1117 = bitcast i8* %1112 to i64*
  store i64 %1100, i64* %1117, align 1
  %1118 = getelementptr inbounds i8, i8* %1112, i64 8
  %1119 = bitcast i8* %1118 to i64*
  store i64 %1100, i64* %1119, align 1
  %1120 = getelementptr inbounds i8, i8* %1112, i64 16
  %1121 = bitcast i8* %1120 to i64*
  store i64 %1100, i64* %1121, align 1
  %1122 = getelementptr inbounds i8, i8* %1112, i64 24
  %1123 = bitcast i8* %1122 to i64*
  store i64 %1100, i64* %1123, align 1
  %1124 = getelementptr inbounds i8, i8* %1112, i64 32
  %1125 = bitcast i8* %1124 to i64*
  store i64 %1100, i64* %1125, align 1
  %1126 = getelementptr inbounds i8, i8* %1112, i64 40
  %1127 = load i32, i32* %22, align 16
  %1128 = and i32 %1127, 2
  %1129 = icmp eq i32 %1128, 0
  br i1 %1129, label %1134, label %1130

1130:                                             ; preds = %1116
  %1131 = bitcast i8* %1126 to i64*
  %1132 = load i64, i64* %178, align 4
  store i64 %1132, i64* %1131, align 1
  %1133 = getelementptr inbounds i8, i8* %1112, i64 48
  br label %1134

1134:                                             ; preds = %1130, %1116
  %1135 = phi i8* [ %1126, %1116 ], [ %1133, %1130 ]
  %1136 = and i32 %1127, 4
  %1137 = icmp eq i32 %1136, 0
  br i1 %1137, label %1153, label %1138

1138:                                             ; preds = %1134
  %1139 = bitcast i8* %1135 to i32*
  %1140 = load i32, i32* %179, align 4
  store i32 %1140, i32* %1139, align 1
  %1141 = load i8, i8* %147, align 4, !range !2
  %1142 = icmp eq i8 %1141, 0
  br i1 %1142, label %1153, label %1143

1143:                                             ; preds = %1138
  %1144 = getelementptr inbounds i8, i8* %1135, i64 4
  %1145 = bitcast i8* %1144 to i32*
  %1146 = load i32, i32* %180, align 4
  store i32 %1146, i32* %1145, align 1
  %1147 = getelementptr inbounds i8, i8* %1135, i64 8
  %1148 = bitcast i8* %1147 to i32*
  %1149 = load i32, i32* %181, align 4
  store i32 %1149, i32* %1148, align 1
  %1150 = getelementptr inbounds i8, i8* %1135, i64 12
  %1151 = bitcast i8* %1150 to i32*
  %1152 = load i32, i32* %182, align 4
  store i32 %1152, i32* %1151, align 1
  br label %1153

1153:                                             ; preds = %1104, %1108, %1134, %1138, %1143
  %1154 = load i64, i64* %172, align 8
  store i64 %1154, i64* %205, align 16
  store i64 %1154, i64* %207, align 16
  br label %1155

1155:                                             ; preds = %1096, %1153
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* nonnull %169)
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %170)
  br label %1459

1156:                                             ; preds = %1093
  %1157 = load float, float* %168, align 4
  call void @_Z13SkChopCubicAtPK7SkPointPS_ff(%struct.SkPoint* %488, %struct.SkPoint* nonnull %169, float %1095, float %1157) #12
  %1158 = load i8, i8* %10, align 1, !range !2
  %1159 = icmp eq i8 %1158, 0
  br i1 %1159, label %1458, label %1160

1160:                                             ; preds = %1156
  %1161 = load i64, i64* %172, align 8
  %1162 = load i32, i32* %68, align 8, !noalias !83
  %1163 = load i32, i32* %69, align 4, !noalias !83
  %1164 = icmp slt i32 %1162, %1163
  br i1 %1164, label %1169, label %1165

1165:                                             ; preds = %1160
  %1166 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !83
  br i1 %1166, label %1167, label %1214

1167:                                             ; preds = %1165
  %1168 = load i32, i32* %68, align 8, !noalias !83
  br label %1169

1169:                                             ; preds = %1167, %1160
  %1170 = phi i32 [ %1168, %1167 ], [ %1162, %1160 ]
  %1171 = add nsw i32 %1170, 1
  store i32 %1171, i32* %68, align 8, !noalias !83
  %1172 = load i64, i64* %66, align 16, !noalias !83
  %1173 = load i8*, i8** %175, align 16, !noalias !83
  %1174 = getelementptr inbounds i8, i8* %1173, i64 %1172
  %1175 = ptrtoint i8* %1174 to i64
  store i64 %1175, i64* %176, align 16, !noalias !88
  %1176 = icmp eq i8* %1173, null
  br i1 %1176, label %1214, label %1177

1177:                                             ; preds = %1169
  %1178 = bitcast i8* %1173 to i64*
  store i64 %1161, i64* %1178, align 1
  %1179 = getelementptr inbounds i8, i8* %1173, i64 8
  %1180 = bitcast i8* %1179 to i64*
  store i64 %1161, i64* %1180, align 1
  %1181 = getelementptr inbounds i8, i8* %1173, i64 16
  %1182 = bitcast i8* %1181 to i64*
  store i64 %1161, i64* %1182, align 1
  %1183 = getelementptr inbounds i8, i8* %1173, i64 24
  %1184 = bitcast i8* %1183 to i64*
  store i64 %1161, i64* %1184, align 1
  %1185 = getelementptr inbounds i8, i8* %1173, i64 32
  %1186 = bitcast i8* %1185 to i64*
  store i64 %1161, i64* %1186, align 1
  %1187 = getelementptr inbounds i8, i8* %1173, i64 40
  %1188 = load i32, i32* %22, align 16
  %1189 = and i32 %1188, 2
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %1195, label %1191

1191:                                             ; preds = %1177
  %1192 = bitcast i8* %1187 to i64*
  %1193 = load i64, i64* %178, align 4
  store i64 %1193, i64* %1192, align 1
  %1194 = getelementptr inbounds i8, i8* %1173, i64 48
  br label %1195

1195:                                             ; preds = %1191, %1177
  %1196 = phi i8* [ %1187, %1177 ], [ %1194, %1191 ]
  %1197 = and i32 %1188, 4
  %1198 = icmp eq i32 %1197, 0
  br i1 %1198, label %1214, label %1199

1199:                                             ; preds = %1195
  %1200 = bitcast i8* %1196 to i32*
  %1201 = load i32, i32* %179, align 4
  store i32 %1201, i32* %1200, align 1
  %1202 = load i8, i8* %147, align 4, !range !2
  %1203 = icmp eq i8 %1202, 0
  br i1 %1203, label %1214, label %1204

1204:                                             ; preds = %1199
  %1205 = getelementptr inbounds i8, i8* %1196, i64 4
  %1206 = bitcast i8* %1205 to i32*
  %1207 = load i32, i32* %180, align 4
  store i32 %1207, i32* %1206, align 1
  %1208 = getelementptr inbounds i8, i8* %1196, i64 8
  %1209 = bitcast i8* %1208 to i32*
  %1210 = load i32, i32* %181, align 4
  store i32 %1210, i32* %1209, align 1
  %1211 = getelementptr inbounds i8, i8* %1196, i64 12
  %1212 = bitcast i8* %1211 to i32*
  %1213 = load i32, i32* %182, align 4
  store i32 %1213, i32* %1212, align 1
  br label %1214

1214:                                             ; preds = %1165, %1169, %1195, %1199, %1204
  %1215 = load i64, i64* %185, align 16
  %1216 = load i32, i32* %68, align 8, !noalias !91
  %1217 = load i32, i32* %69, align 4, !noalias !91
  %1218 = icmp slt i32 %1216, %1217
  br i1 %1218, label %1223, label %1219

1219:                                             ; preds = %1214
  %1220 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !91
  br i1 %1220, label %1221, label %1268

1221:                                             ; preds = %1219
  %1222 = load i32, i32* %68, align 8, !noalias !91
  br label %1223

1223:                                             ; preds = %1221, %1214
  %1224 = phi i32 [ %1222, %1221 ], [ %1216, %1214 ]
  %1225 = add nsw i32 %1224, 1
  store i32 %1225, i32* %68, align 8, !noalias !91
  %1226 = load i64, i64* %66, align 16, !noalias !91
  %1227 = load i8*, i8** %175, align 16, !noalias !91
  %1228 = getelementptr inbounds i8, i8* %1227, i64 %1226
  %1229 = ptrtoint i8* %1228 to i64
  store i64 %1229, i64* %176, align 16, !noalias !96
  %1230 = icmp eq i8* %1227, null
  br i1 %1230, label %1268, label %1231

1231:                                             ; preds = %1223
  %1232 = bitcast i8* %1227 to i64*
  store i64 %1215, i64* %1232, align 1
  %1233 = getelementptr inbounds i8, i8* %1227, i64 8
  %1234 = bitcast i8* %1233 to i64*
  store i64 %1215, i64* %1234, align 1
  %1235 = getelementptr inbounds i8, i8* %1227, i64 16
  %1236 = bitcast i8* %1235 to i64*
  store i64 %1215, i64* %1236, align 1
  %1237 = getelementptr inbounds i8, i8* %1227, i64 24
  %1238 = bitcast i8* %1237 to i64*
  store i64 %1215, i64* %1238, align 1
  %1239 = getelementptr inbounds i8, i8* %1227, i64 32
  %1240 = bitcast i8* %1239 to i64*
  store i64 %1215, i64* %1240, align 1
  %1241 = getelementptr inbounds i8, i8* %1227, i64 40
  %1242 = load i32, i32* %22, align 16
  %1243 = and i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  br i1 %1244, label %1249, label %1245

1245:                                             ; preds = %1231
  %1246 = bitcast i8* %1241 to i64*
  %1247 = load i64, i64* %178, align 4
  store i64 %1247, i64* %1246, align 1
  %1248 = getelementptr inbounds i8, i8* %1227, i64 48
  br label %1249

1249:                                             ; preds = %1245, %1231
  %1250 = phi i8* [ %1241, %1231 ], [ %1248, %1245 ]
  %1251 = and i32 %1242, 4
  %1252 = icmp eq i32 %1251, 0
  br i1 %1252, label %1268, label %1253

1253:                                             ; preds = %1249
  %1254 = bitcast i8* %1250 to i32*
  %1255 = load i32, i32* %179, align 4
  store i32 %1255, i32* %1254, align 1
  %1256 = load i8, i8* %147, align 4, !range !2
  %1257 = icmp eq i8 %1256, 0
  br i1 %1257, label %1268, label %1258

1258:                                             ; preds = %1253
  %1259 = getelementptr inbounds i8, i8* %1250, i64 4
  %1260 = bitcast i8* %1259 to i32*
  %1261 = load i32, i32* %180, align 4
  store i32 %1261, i32* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1250, i64 8
  %1263 = bitcast i8* %1262 to i32*
  %1264 = load i32, i32* %181, align 4
  store i32 %1264, i32* %1263, align 1
  %1265 = getelementptr inbounds i8, i8* %1250, i64 12
  %1266 = bitcast i8* %1265 to i32*
  %1267 = load i32, i32* %182, align 4
  store i32 %1267, i32* %1266, align 1
  br label %1268

1268:                                             ; preds = %1219, %1223, %1249, %1253, %1258
  %1269 = load i64, i64* %186, align 16
  %1270 = load i64, i64* %172, align 8
  %1271 = load i8, i8* %74, align 1, !range !2
  %1272 = icmp eq i8 %1271, 0
  br i1 %1272, label %1273, label %1276

1273:                                             ; preds = %1268
  %1274 = bitcast i64 %1270 to <2 x float>
  store i64 %1269, i64* %198, align 8
  store i64 %1269, i64* %199, align 8
  store i64 %1270, i64* %200, align 8
  store i64 %1270, i64* %201, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  store i64 %1269, i64* %188, align 8
  %1275 = load <2 x float>, <2 x float>* %184, align 16
  br label %1338

1276:                                             ; preds = %1268
  %1277 = load i32, i32* %68, align 8, !noalias !99
  %1278 = load i32, i32* %69, align 4, !noalias !99
  %1279 = icmp slt i32 %1277, %1278
  br i1 %1279, label %1284, label %1280

1280:                                             ; preds = %1276
  %1281 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !99
  br i1 %1281, label %1282, label %1330

1282:                                             ; preds = %1280
  %1283 = load i32, i32* %68, align 8, !noalias !99
  br label %1284

1284:                                             ; preds = %1282, %1276
  %1285 = phi i32 [ %1283, %1282 ], [ %1277, %1276 ]
  %1286 = add nsw i32 %1285, 1
  store i32 %1286, i32* %68, align 8, !noalias !99
  %1287 = load i64, i64* %66, align 16, !noalias !99
  %1288 = load i8*, i8** %175, align 16, !noalias !99
  %1289 = getelementptr inbounds i8, i8* %1288, i64 %1287
  %1290 = ptrtoint i8* %1289 to i64
  store i64 %1290, i64* %176, align 16, !noalias !104
  %1291 = icmp eq i8* %1288, null
  br i1 %1291, label %1330, label %1292

1292:                                             ; preds = %1284
  %1293 = bitcast i8* %1288 to i64*
  store i64 %1269, i64* %1293, align 1
  %1294 = getelementptr inbounds i8, i8* %1288, i64 8
  %1295 = bitcast i8* %1294 to i64*
  store i64 %1269, i64* %1295, align 1
  %1296 = getelementptr inbounds i8, i8* %1288, i64 16
  %1297 = bitcast i8* %1296 to i64*
  store i64 %1270, i64* %1297, align 1
  %1298 = getelementptr inbounds i8, i8* %1288, i64 24
  %1299 = bitcast i8* %1298 to i64*
  store i64 %1270, i64* %1299, align 1
  %1300 = getelementptr inbounds i8, i8* %1288, i64 32
  %1301 = bitcast i8* %1300 to i64*
  %1302 = load i64, i64* %188, align 8
  store i64 %1302, i64* %1301, align 1
  %1303 = getelementptr inbounds i8, i8* %1288, i64 40
  %1304 = load i32, i32* %22, align 16
  %1305 = and i32 %1304, 2
  %1306 = icmp eq i32 %1305, 0
  br i1 %1306, label %1311, label %1307

1307:                                             ; preds = %1292
  %1308 = bitcast i8* %1303 to i64*
  %1309 = load i64, i64* %178, align 4
  store i64 %1309, i64* %1308, align 1
  %1310 = getelementptr inbounds i8, i8* %1288, i64 48
  br label %1311

1311:                                             ; preds = %1307, %1292
  %1312 = phi i8* [ %1303, %1292 ], [ %1310, %1307 ]
  %1313 = and i32 %1304, 4
  %1314 = icmp eq i32 %1313, 0
  br i1 %1314, label %1330, label %1315

1315:                                             ; preds = %1311
  %1316 = bitcast i8* %1312 to i32*
  %1317 = load i32, i32* %179, align 4
  store i32 %1317, i32* %1316, align 1
  %1318 = load i8, i8* %147, align 4, !range !2
  %1319 = icmp eq i8 %1318, 0
  br i1 %1319, label %1330, label %1320

1320:                                             ; preds = %1315
  %1321 = getelementptr inbounds i8, i8* %1312, i64 4
  %1322 = bitcast i8* %1321 to i32*
  %1323 = load i32, i32* %180, align 4
  store i32 %1323, i32* %1322, align 1
  %1324 = getelementptr inbounds i8, i8* %1312, i64 8
  %1325 = bitcast i8* %1324 to i32*
  %1326 = load i32, i32* %181, align 4
  store i32 %1326, i32* %1325, align 1
  %1327 = getelementptr inbounds i8, i8* %1312, i64 12
  %1328 = bitcast i8* %1327 to i32*
  %1329 = load i32, i32* %182, align 4
  store i32 %1329, i32* %1328, align 1
  br label %1330

1330:                                             ; preds = %1280, %1284, %1311, %1315, %1320
  %1331 = load i8, i8* %74, align 1
  store i64 %1269, i64* %188, align 8
  %1332 = load <2 x float>, <2 x float>* %171, align 8
  %1333 = load <2 x float>, <2 x float>* %184, align 16
  %1334 = icmp eq i8 %1331, 0
  br i1 %1334, label %1335, label %1338

1335:                                             ; preds = %1330
  store <2 x float> %1332, <2 x float>* %191, align 8
  store <2 x float> %1332, <2 x float>* %193, align 8
  store <2 x float> %1333, <2 x float>* %195, align 8
  store <2 x float> %1333, <2 x float>* %197, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  store <2 x float> %1332, <2 x float>* %189, align 8
  %1336 = load i64, i64* %185, align 16
  %1337 = load i64, i64* %203, align 8
  br label %1400

1338:                                             ; preds = %1273, %1330
  %1339 = phi <2 x float> [ %1275, %1273 ], [ %1333, %1330 ]
  %1340 = phi <2 x float> [ %1274, %1273 ], [ %1332, %1330 ]
  %1341 = load i32, i32* %68, align 8, !noalias !107
  %1342 = load i32, i32* %69, align 4, !noalias !107
  %1343 = icmp slt i32 %1341, %1342
  br i1 %1343, label %1348, label %1344

1344:                                             ; preds = %1338
  %1345 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !107
  br i1 %1345, label %1346, label %1394

1346:                                             ; preds = %1344
  %1347 = load i32, i32* %68, align 8, !noalias !107
  br label %1348

1348:                                             ; preds = %1346, %1338
  %1349 = phi i32 [ %1347, %1346 ], [ %1341, %1338 ]
  %1350 = add nsw i32 %1349, 1
  store i32 %1350, i32* %68, align 8, !noalias !107
  %1351 = load i64, i64* %66, align 16, !noalias !107
  %1352 = load i8*, i8** %175, align 16, !noalias !107
  %1353 = getelementptr inbounds i8, i8* %1352, i64 %1351
  %1354 = ptrtoint i8* %1353 to i64
  store i64 %1354, i64* %176, align 16, !noalias !112
  %1355 = icmp eq i8* %1352, null
  br i1 %1355, label %1394, label %1356

1356:                                             ; preds = %1348
  %1357 = bitcast i8* %1352 to <2 x float>*
  store <2 x float> %1340, <2 x float>* %1357, align 1
  %1358 = getelementptr inbounds i8, i8* %1352, i64 8
  %1359 = bitcast i8* %1358 to <2 x float>*
  store <2 x float> %1340, <2 x float>* %1359, align 1
  %1360 = getelementptr inbounds i8, i8* %1352, i64 16
  %1361 = bitcast i8* %1360 to <2 x float>*
  store <2 x float> %1339, <2 x float>* %1361, align 1
  %1362 = getelementptr inbounds i8, i8* %1352, i64 24
  %1363 = bitcast i8* %1362 to <2 x float>*
  store <2 x float> %1339, <2 x float>* %1363, align 1
  %1364 = getelementptr inbounds i8, i8* %1352, i64 32
  %1365 = bitcast i8* %1364 to i64*
  %1366 = load i64, i64* %188, align 8
  store i64 %1366, i64* %1365, align 1
  %1367 = getelementptr inbounds i8, i8* %1352, i64 40
  %1368 = load i32, i32* %22, align 16
  %1369 = and i32 %1368, 2
  %1370 = icmp eq i32 %1369, 0
  br i1 %1370, label %1375, label %1371

1371:                                             ; preds = %1356
  %1372 = bitcast i8* %1367 to i64*
  %1373 = load i64, i64* %178, align 4
  store i64 %1373, i64* %1372, align 1
  %1374 = getelementptr inbounds i8, i8* %1352, i64 48
  br label %1375

1375:                                             ; preds = %1371, %1356
  %1376 = phi i8* [ %1367, %1356 ], [ %1374, %1371 ]
  %1377 = and i32 %1368, 4
  %1378 = icmp eq i32 %1377, 0
  br i1 %1378, label %1394, label %1379

1379:                                             ; preds = %1375
  %1380 = bitcast i8* %1376 to i32*
  %1381 = load i32, i32* %179, align 4
  store i32 %1381, i32* %1380, align 1
  %1382 = load i8, i8* %147, align 4, !range !2
  %1383 = icmp eq i8 %1382, 0
  br i1 %1383, label %1394, label %1384

1384:                                             ; preds = %1379
  %1385 = getelementptr inbounds i8, i8* %1376, i64 4
  %1386 = bitcast i8* %1385 to i32*
  %1387 = load i32, i32* %180, align 4
  store i32 %1387, i32* %1386, align 1
  %1388 = getelementptr inbounds i8, i8* %1376, i64 8
  %1389 = bitcast i8* %1388 to i32*
  %1390 = load i32, i32* %181, align 4
  store i32 %1390, i32* %1389, align 1
  %1391 = getelementptr inbounds i8, i8* %1376, i64 12
  %1392 = bitcast i8* %1391 to i32*
  %1393 = load i32, i32* %182, align 4
  store i32 %1393, i32* %1392, align 1
  br label %1394

1394:                                             ; preds = %1344, %1348, %1375, %1379, %1384
  %1395 = load i8, i8* %74, align 1
  store <2 x float> %1340, <2 x float>* %189, align 8
  %1396 = load i64, i64* %185, align 16
  %1397 = load i64, i64* %203, align 8
  %1398 = icmp eq i8 %1395, 0
  br i1 %1398, label %1399, label %1400

1399:                                             ; preds = %1394
  store i64 %1396, i64* %198, align 8
  store i64 %1396, i64* %199, align 8
  store i64 %1397, i64* %200, align 8
  store i64 %1397, i64* %201, align 8
  store i8 1, i8* %73, align 16
  store i8 1, i8* %74, align 1
  br label %1456

1400:                                             ; preds = %1335, %1394
  %1401 = phi i64 [ %1337, %1335 ], [ %1397, %1394 ]
  %1402 = phi i64 [ %1336, %1335 ], [ %1396, %1394 ]
  %1403 = load i32, i32* %68, align 8, !noalias !115
  %1404 = load i32, i32* %69, align 4, !noalias !115
  %1405 = icmp slt i32 %1403, %1404
  br i1 %1405, label %1410, label %1406

1406:                                             ; preds = %1400
  %1407 = call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !115
  br i1 %1407, label %1408, label %1456

1408:                                             ; preds = %1406
  %1409 = load i32, i32* %68, align 8, !noalias !115
  br label %1410

1410:                                             ; preds = %1408, %1400
  %1411 = phi i32 [ %1409, %1408 ], [ %1403, %1400 ]
  %1412 = add nsw i32 %1411, 1
  store i32 %1412, i32* %68, align 8, !noalias !115
  %1413 = load i64, i64* %66, align 16, !noalias !115
  %1414 = load i8*, i8** %175, align 16, !noalias !115
  %1415 = getelementptr inbounds i8, i8* %1414, i64 %1413
  %1416 = ptrtoint i8* %1415 to i64
  store i64 %1416, i64* %176, align 16, !noalias !120
  %1417 = icmp eq i8* %1414, null
  br i1 %1417, label %1456, label %1418

1418:                                             ; preds = %1410
  %1419 = bitcast i8* %1414 to i64*
  store i64 %1402, i64* %1419, align 1
  %1420 = getelementptr inbounds i8, i8* %1414, i64 8
  %1421 = bitcast i8* %1420 to i64*
  store i64 %1402, i64* %1421, align 1
  %1422 = getelementptr inbounds i8, i8* %1414, i64 16
  %1423 = bitcast i8* %1422 to i64*
  store i64 %1401, i64* %1423, align 1
  %1424 = getelementptr inbounds i8, i8* %1414, i64 24
  %1425 = bitcast i8* %1424 to i64*
  store i64 %1401, i64* %1425, align 1
  %1426 = getelementptr inbounds i8, i8* %1414, i64 32
  %1427 = bitcast i8* %1426 to i64*
  %1428 = load i64, i64* %188, align 8
  store i64 %1428, i64* %1427, align 1
  %1429 = getelementptr inbounds i8, i8* %1414, i64 40
  %1430 = load i32, i32* %22, align 16
  %1431 = and i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  br i1 %1432, label %1437, label %1433

1433:                                             ; preds = %1418
  %1434 = bitcast i8* %1429 to i64*
  %1435 = load i64, i64* %178, align 4
  store i64 %1435, i64* %1434, align 1
  %1436 = getelementptr inbounds i8, i8* %1414, i64 48
  br label %1437

1437:                                             ; preds = %1433, %1418
  %1438 = phi i8* [ %1429, %1418 ], [ %1436, %1433 ]
  %1439 = and i32 %1430, 4
  %1440 = icmp eq i32 %1439, 0
  br i1 %1440, label %1456, label %1441

1441:                                             ; preds = %1437
  %1442 = bitcast i8* %1438 to i32*
  %1443 = load i32, i32* %179, align 4
  store i32 %1443, i32* %1442, align 1
  %1444 = load i8, i8* %147, align 4, !range !2
  %1445 = icmp eq i8 %1444, 0
  br i1 %1445, label %1456, label %1446

1446:                                             ; preds = %1441
  %1447 = getelementptr inbounds i8, i8* %1438, i64 4
  %1448 = bitcast i8* %1447 to i32*
  %1449 = load i32, i32* %180, align 4
  store i32 %1449, i32* %1448, align 1
  %1450 = getelementptr inbounds i8, i8* %1438, i64 8
  %1451 = bitcast i8* %1450 to i32*
  %1452 = load i32, i32* %181, align 4
  store i32 %1452, i32* %1451, align 1
  %1453 = getelementptr inbounds i8, i8* %1438, i64 12
  %1454 = bitcast i8* %1453 to i32*
  %1455 = load i32, i32* %182, align 4
  store i32 %1455, i32* %1454, align 1
  br label %1456

1456:                                             ; preds = %1399, %1406, %1410, %1437, %1441, %1446
  %1457 = phi i64 [ %1396, %1399 ], [ %1402, %1406 ], [ %1402, %1410 ], [ %1402, %1437 ], [ %1402, %1441 ], [ %1402, %1446 ]
  store i64 %1457, i64* %213, align 8
  br label %1459

1458:                                             ; preds = %1156
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* nonnull %169)
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %170)
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* nonnull %4, %struct.SkPoint* %183)
  br label %1459

1459:                                             ; preds = %1155, %1458, %1456, %1092
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %165) #12
  br label %1460

1460:                                             ; preds = %1084, %1085, %874, %875, %482, %1459, %670, %604, %548
  %1461 = call zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator* nonnull %6)
  br i1 %1461, label %482, label %1462

1462:                                             ; preds = %1460, %472
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %148) #12
  %1463 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %281, i64 0, i32 3
  %1464 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %1463, align 8
  %1465 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %1464, null
  br i1 %1465, label %219, label %278

1466:                                             ; preds = %290
  %1467 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %295, i64 0, i32 1, i32 1
  %1468 = bitcast float* %1467 to i32*
  %1469 = load i32, i32* %1468, align 4
  store i32 %1469, i32* %216, align 4
  %1470 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %295, i64 0, i32 3
  %1471 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %1470, align 8
  %1472 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %1471, null
  br i1 %1472, label %297, label %1473

1473:                                             ; preds = %1466
  %1474 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %1471, i64 0, i32 1, i32 1
  %1475 = bitcast float* %1474 to i32*
  %1476 = load i32, i32* %1475, align 4
  store i32 %1476, i32* %217, align 8
  %1477 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %1471, i64 0, i32 3
  %1478 = load %"struct.GrStrokeTessellator::PathStrokeList"*, %"struct.GrStrokeTessellator::PathStrokeList"** %1477, align 8
  %1479 = icmp eq %"struct.GrStrokeTessellator::PathStrokeList"* %1478, null
  br i1 %1479, label %297, label %1480

1480:                                             ; preds = %1473
  %1481 = getelementptr inbounds %"struct.GrStrokeTessellator::PathStrokeList", %"struct.GrStrokeTessellator::PathStrokeList"* %1478, i64 0, i32 1, i32 1
  %1482 = bitcast float* %1481 to i32*
  %1483 = load i32, i32* %1482, align 4
  store i32 %1483, i32* %218, align 4
  br label %297
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN16GrStrokeIterator4nextEv(%class.GrStrokeIterator*) local_unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = add nsw i32 %3, -1
  store i32 %9, i32* %2, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %219, label %11

11:                                               ; preds = %5
  %12 = and i32 %8, 7
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 7
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %1, %11, %17
  %19 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 3, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %20, %22
  br i1 %23, label %217, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 1
  %26 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 2, i32 2
  %27 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  %28 = bitcast float** %26 to i64*
  %29 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %30 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  %31 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %32 = bitcast %struct.SkPoint** %31 to i64*
  %33 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %34 = bitcast float** %33 to i64*
  %35 = bitcast %struct.SkPoint** %27 to i64*
  br label %36

36:                                               ; preds = %24, %214
  %37 = phi i8* [ %20, %24 ], [ %199, %214 ]
  %38 = load i8, i8* %37, align 1, !noalias !123
  %39 = zext i8 %38 to i32
  switch i8 %38, label %47 [
    i8 0, label %53
    i8 1, label %40
    i8 2, label %48
    i8 3, label %48
    i8 4, label %56
    i8 5, label %119
  ]

40:                                               ; preds = %36
  %41 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !123
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 -1
  %43 = ptrtoint %struct.SkPoint* %42 to i64
  %44 = load i64, i64* %28, align 8, !noalias !123
  %45 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 0, i32 0
  %46 = load float, float* %45, align 4
  br label %87

47:                                               ; preds = %36
  tail call void @llvm.trap() #12, !noalias !123
  unreachable

48:                                               ; preds = %36, %36
  %49 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !123
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %49, i64 -1
  %51 = ptrtoint %struct.SkPoint* %50 to i64
  %52 = load i64, i64* %28, align 8, !noalias !123
  br label %72

53:                                               ; preds = %36
  %54 = tail call zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator* %0)
  %55 = load i8*, i8** %19, align 8
  br i1 %54, label %180, label %197

56:                                               ; preds = %36
  %57 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !123
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 -1
  %59 = ptrtoint %struct.SkPoint* %58 to i64
  %60 = load i64, i64* %28, align 8, !noalias !123
  %61 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 2, i32 0
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 1, i32 0
  %64 = load float, float* %63, align 4
  %65 = fcmp oeq float %62, %64
  br i1 %65, label %66, label %102

66:                                               ; preds = %56
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 2, i32 1
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 1, i32 1
  %70 = load float, float* %69, align 4
  %71 = fcmp oeq float %68, %70
  br i1 %71, label %72, label %102

72:                                               ; preds = %48, %66
  %73 = phi i64 [ %52, %48 ], [ %60, %66 ]
  %74 = phi i64 [ %51, %48 ], [ %59, %66 ]
  %75 = phi %struct.SkPoint* [ %50, %48 ], [ %58, %66 ]
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 2, i32 0
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 1, i32 0
  %79 = load float, float* %78, align 4
  %80 = fcmp oeq float %77, %79
  br i1 %80, label %81, label %102

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 2, i32 1
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %75, i64 1, i32 1
  %85 = load float, float* %84, align 4
  %86 = fcmp oeq float %83, %85
  br i1 %86, label %87, label %102

87:                                               ; preds = %40, %81
  %88 = phi float [ %79, %81 ], [ %46, %40 ]
  %89 = phi i64 [ %73, %81 ], [ %44, %40 ]
  %90 = phi i64 [ %74, %81 ], [ %43, %40 ]
  %91 = phi %struct.SkPoint* [ %75, %81 ], [ %42, %40 ]
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 0
  %93 = load float, float* %92, align 4
  %94 = fcmp oeq float %88, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %87
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 1, i32 1
  %97 = load float, float* %96, align 4
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %91, i64 0, i32 1
  %99 = load float, float* %98, align 4
  %100 = fcmp oeq float %97, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %95
  store i64 %90, i64* %35, align 8
  br label %197

102:                                              ; preds = %87, %72, %56, %81, %95, %66
  %103 = phi i64 [ %73, %81 ], [ %89, %95 ], [ %60, %66 ], [ %60, %56 ], [ %73, %72 ], [ %89, %87 ]
  %104 = phi i64 [ %74, %81 ], [ %90, %95 ], [ %59, %66 ], [ %59, %56 ], [ %74, %72 ], [ %90, %87 ]
  %105 = phi %struct.SkPoint* [ %75, %81 ], [ %91, %95 ], [ %58, %66 ], [ %58, %56 ], [ %75, %72 ], [ %91, %87 ]
  %106 = inttoptr i64 %103 to float*
  %107 = load i32, i32* %29, align 8
  %108 = load i32, i32* %2, align 4
  %109 = add nsw i32 %108, %107
  %110 = and i32 %109, 7
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %111
  store i32 %39, i32* %112, align 4
  %113 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %111
  store %struct.SkPoint* %105, %struct.SkPoint** %113, align 8
  %114 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %111
  store float* %106, float** %114, align 8
  %115 = load i32, i32* %2, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %2, align 4
  %117 = icmp eq i32 %115, 0
  br i1 %117, label %118, label %180

118:                                              ; preds = %102
  store i32 %39, i32* %30, align 8
  store i64 %104, i64* %32, align 8
  store i64 %103, i64* %34, align 8
  br label %197

119:                                              ; preds = %36
  %120 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8, !noalias !123
  %121 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %120, i64 -1
  %122 = load i32, i32* %2, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  store %struct.SkPoint* %121, %struct.SkPoint** %27, align 8
  br label %197

125:                                              ; preds = %119
  %126 = load %struct.SkPoint*, %struct.SkPoint** %31, align 8
  %127 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %121, i64 0, i32 0
  %128 = load float, float* %127, align 4
  %129 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %126, i64 0, i32 0
  %130 = load float, float* %129, align 4
  %131 = fcmp une float %128, %130
  %132 = bitcast %struct.SkPoint* %126 to i64*
  br i1 %131, label %139, label %133

133:                                              ; preds = %125
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %120, i64 -1, i32 1
  %135 = load float, float* %134, align 4
  %136 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %126, i64 0, i32 1
  %137 = load float, float* %136, align 4
  %138 = fcmp une float %135, %137
  br i1 %138, label %139, label %157

139:                                              ; preds = %125, %133
  %140 = bitcast %struct.SkPoint* %121 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = load i64, i64* %132, align 4
  %143 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 13
  %144 = bitcast %"struct.std::__1::array.19"* %143 to i64*
  store i64 %141, i64* %144, align 8
  %145 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 13, i32 0, i64 1
  %146 = bitcast %struct.SkPoint* %145 to i64*
  store i64 %142, i64* %146, align 8
  %147 = getelementptr inbounds %"struct.std::__1::array.19", %"struct.std::__1::array.19"* %143, i64 0, i32 0, i64 0
  %148 = load i32, i32* %29, align 8
  %149 = add nsw i32 %148, %122
  %150 = and i32 %149, 7
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %151
  store i32 1, i32* %152, align 4
  %153 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %151
  store %struct.SkPoint* %147, %struct.SkPoint** %153, align 8
  %154 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %151
  store float* null, float** %154, align 8
  %155 = load i32, i32* %2, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %2, align 4
  br label %157

157:                                              ; preds = %139, %133
  %158 = phi i32 [ %156, %139 ], [ %122, %133 ]
  %159 = load i32, i32* %30, align 8
  %160 = load i64, i64* %34, align 8
  %161 = load i32, i32* %29, align 8
  %162 = add nsw i32 %158, %161
  %163 = and i32 %162, 7
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %164
  store i32 %159, i32* %165, align 4
  %166 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %164
  store %struct.SkPoint* %126, %struct.SkPoint** %166, align 8
  %167 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %164
  %168 = bitcast float** %167 to i64*
  store i64 %160, i64* %168, align 8
  %169 = load i32, i32* %2, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %2, align 4
  %171 = load i32, i32* %29, align 8
  %172 = add nsw i32 %171, %170
  %173 = and i32 %172, 7
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %174
  store i32 7, i32* %175, align 4
  %176 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %174
  store %struct.SkPoint* null, %struct.SkPoint** %176, align 8
  %177 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %174
  store float* null, float** %177, align 8
  %178 = load i32, i32* %2, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %2, align 4
  store %struct.SkPoint* null, %struct.SkPoint** %27, align 8
  br label %180

180:                                              ; preds = %102, %53, %157
  %181 = phi i8* [ %37, %157 ], [ %55, %53 ], [ %37, %102 ]
  %182 = getelementptr inbounds i8, i8* %181, i64 1
  store i8* %182, i8** %19, align 8
  %183 = load i8, i8* %181, align 1
  switch i8 %183, label %187 [
    i8 0, label %188
    i8 1, label %188
    i8 2, label %184
    i8 3, label %192
    i8 4, label %185
    i8 5, label %186
  ]

184:                                              ; preds = %180
  br label %188

185:                                              ; preds = %180
  br label %188

186:                                              ; preds = %180
  br label %188

187:                                              ; preds = %180
  tail call void @llvm.trap() #12
  unreachable

188:                                              ; preds = %186, %185, %184, %180, %180
  %189 = phi i64 [ 1, %180 ], [ 1, %180 ], [ 2, %184 ], [ 3, %185 ], [ 0, %186 ]
  %190 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %191 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %190, i64 %189
  store %struct.SkPoint* %191, %struct.SkPoint** %25, align 8
  br label %219

192:                                              ; preds = %180
  %193 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %194 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %193, i64 2
  store %struct.SkPoint* %194, %struct.SkPoint** %25, align 8
  %195 = load float*, float** %26, align 8
  %196 = getelementptr inbounds float, float* %195, i64 1
  store float* %196, float** %26, align 8
  br label %219

197:                                              ; preds = %53, %124, %118, %101
  %198 = phi i8* [ %37, %124 ], [ %37, %118 ], [ %37, %101 ], [ %55, %53 ]
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  store i8* %199, i8** %19, align 8
  %200 = load i8, i8* %198, align 1
  switch i8 %200, label %204 [
    i8 0, label %205
    i8 1, label %205
    i8 2, label %201
    i8 3, label %209
    i8 4, label %202
    i8 5, label %203
  ]

201:                                              ; preds = %197
  br label %205

202:                                              ; preds = %197
  br label %205

203:                                              ; preds = %197
  br label %205

204:                                              ; preds = %197
  tail call void @llvm.trap() #12
  unreachable

205:                                              ; preds = %203, %202, %201, %197, %197
  %206 = phi i64 [ 1, %197 ], [ 1, %197 ], [ 2, %201 ], [ 3, %202 ], [ 0, %203 ]
  %207 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %208 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %207, i64 %206
  store %struct.SkPoint* %208, %struct.SkPoint** %25, align 8
  br label %214

209:                                              ; preds = %197
  %210 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %211 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %210, i64 2
  store %struct.SkPoint* %211, %struct.SkPoint** %25, align 8
  %212 = load float*, float** %26, align 8
  %213 = getelementptr inbounds float, float* %212, i64 1
  store float* %213, float** %26, align 8
  br label %214

214:                                              ; preds = %205, %209
  %215 = load i8*, i8** %21, align 8
  %216 = icmp eq i8* %199, %215
  br i1 %216, label %217, label %36

217:                                              ; preds = %214, %18
  %218 = tail call zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator* %0)
  br label %219

219:                                              ; preds = %192, %188, %5, %217
  %220 = phi i1 [ %218, %217 ], [ true, %5 ], [ true, %188 ], [ true, %192 ]
  ret i1 %220
}

declare <2 x float> @_Z12SkEvalQuadAtPK7SkPointf(%struct.SkPoint*, float) local_unnamed_addr #3

declare float @_Z20SkFindQuadMidTangentPK7SkPoint(%struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_114InstanceWriter11quadraticToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"*, %struct.SkPoint*) unnamed_addr #4 align 2 {
  %3 = alloca [5 x %struct.SkPoint], align 16
  %4 = alloca float, align 4
  %5 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5)
  %6 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 4
  %7 = load float, float* %6, align 16
  %8 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %11 = bitcast %struct.SkPoint* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %14 = bitcast %struct.SkPoint* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fmul <2 x float> %12, <float -2.000000e+00, float -2.000000e+00>
  %17 = fadd <2 x float> %9, %16
  %18 = fadd <2 x float> %15, %17
  %19 = fmul <2 x float> %18, %18
  %20 = extractelement <2 x float> %19, i32 0
  %21 = extractelement <2 x float> %19, i32 1
  %22 = fadd float %20, %21
  %23 = fmul float %7, %7
  %24 = fmul float %23, 6.250000e-02
  %25 = fmul float %24, %22
  store float %25, float* %4, align 4
  %26 = fcmp ogt float %25, 0x4154400000000000
  br i1 %26, label %27, label %43

27:                                               ; preds = %2
  %28 = bitcast [5 x %struct.SkPoint]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -1, i64 40, i1 false) #12
  %29 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %3, i64 0, i64 0
  call void @_Z16SkChopQuadAtHalfPK7SkPointPS_(%struct.SkPoint* %1, %struct.SkPoint* nonnull %29) #12
  %30 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 2
  %31 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %32 = bitcast %struct.SkPoint* %31 to i64*
  %33 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %34 = call zeroext i1 @_ZNK10GrCullTest11areVisible3EPK7SkPoint(%class.GrCullTest* %30, %struct.SkPoint* nonnull %29) #12
  br i1 %34, label %35, label %36

35:                                               ; preds = %27
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter11quadraticToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* nonnull %29) #12
  br label %40

36:                                               ; preds = %27
  %37 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %3, i64 0, i64 2
  %38 = bitcast %struct.SkPoint* %37 to i64*
  %39 = load i64, i64* %38, align 16
  store i64 %39, i64* %32, align 8
  store i8 1, i8* %33, align 1
  br label %40

40:                                               ; preds = %36, %35
  %41 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %3, i64 0, i64 2
  %42 = call zeroext i1 @_ZNK10GrCullTest11areVisible3EPK7SkPoint(%class.GrCullTest* %30, %struct.SkPoint* %41) #12
  br i1 %42, label %150, label %146

43:                                               ; preds = %2
  %44 = fmul <2 x float> %12, <float 0x3FE5555560000000, float 0x3FE5555560000000>
  %45 = fmul <2 x float> %9, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %46 = fadd <2 x float> %45, %44
  %47 = fmul <2 x float> %15, <float 0x3FD5555560000000, float 0x3FD5555560000000>
  %48 = fadd <2 x float> %44, %47
  %49 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %50 = load i8, i8* %49, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %43
  %53 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6
  %54 = bitcast [4 x %struct.SkPoint]* %53 to <2 x float>*
  store <2 x float> %9, <2 x float>* %54, align 8
  %55 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 1
  %56 = bitcast %struct.SkPoint* %55 to <2 x float>*
  store <2 x float> %46, <2 x float>* %56, align 8
  %57 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 2
  %58 = bitcast %struct.SkPoint* %57 to <2 x float>*
  store <2 x float> %48, <2 x float>* %58, align 8
  %59 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 3
  %60 = bitcast %struct.SkPoint* %59 to <2 x float>*
  store <2 x float> %15, <2 x float>* %60, align 8
  %61 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 8
  store i8 1, i8* %61, align 16
  store i8 1, i8* %49, align 1
  br label %135

62:                                               ; preds = %43
  %63 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 5
  %64 = load i32, i32* %63, align 8, !noalias !126
  %65 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 6
  %66 = load i32, i32* %65, align 4, !noalias !126
  %67 = icmp slt i32 %64, %66
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3
  %70 = tail call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %69, i32 1) #12, !noalias !126
  br i1 %70, label %71, label %135

71:                                               ; preds = %68
  %72 = load i32, i32* %63, align 8, !noalias !126
  br label %73

73:                                               ; preds = %71, %62
  %74 = phi i32 [ %72, %71 ], [ %64, %62 ]
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %63, align 8, !noalias !126
  %76 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 4
  %77 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 2
  %78 = load i64, i64* %77, align 8, !noalias !126
  %79 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %76, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8, !noalias !126
  %81 = getelementptr inbounds i8, i8* %80, i64 %78
  %82 = ptrtoint i8* %81 to i64
  %83 = bitcast %struct.GrVertexWriter* %76 to i64*
  store i64 %82, i64* %83, align 8, !noalias !131
  %84 = icmp eq i8* %80, null
  br i1 %84, label %135, label %85

85:                                               ; preds = %73
  %86 = bitcast i8* %80 to <2 x float>*
  store <2 x float> %9, <2 x float>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %80, i64 8
  %88 = bitcast i8* %87 to <2 x float>*
  store <2 x float> %46, <2 x float>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %80, i64 16
  %90 = bitcast i8* %89 to <2 x float>*
  store <2 x float> %48, <2 x float>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %80, i64 24
  %92 = bitcast i8* %91 to <2 x float>*
  store <2 x float> %15, <2 x float>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %80, i64 32
  %94 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %95 = bitcast i8* %93 to i64*
  %96 = bitcast %struct.SkPoint* %94 to i64*
  %97 = load i64, i64* %96, align 4
  store i64 %97, i64* %95, align 1
  %98 = getelementptr inbounds i8, i8* %80, i64 40
  %99 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 0
  %100 = load i32, i32* %99, align 16
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %110, label %103

103:                                              ; preds = %85
  %104 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 10
  %105 = bitcast i8* %98 to i64*
  %106 = bitcast %"struct.GrStrokeShader::DynamicStroke"* %104 to i64*
  %107 = load i64, i64* %106, align 4
  store i64 %107, i64* %105, align 1
  %108 = getelementptr inbounds i8, i8* %80, i64 48
  %109 = load i32, i32* %99, align 16
  br label %110

110:                                              ; preds = %103, %85
  %111 = phi i8* [ %98, %85 ], [ %108, %103 ]
  %112 = phi i32 [ %100, %85 ], [ %109, %103 ]
  %113 = and i32 %112, 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %135, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 0
  %117 = bitcast i8* %111 to i32*
  %118 = load i32, i32* %116, align 4
  store i32 %118, i32* %117, align 1
  %119 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 1
  %120 = load i8, i8* %119, align 4, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %135, label %122

122:                                              ; preds = %115
  %123 = getelementptr inbounds i8, i8* %111, i64 4
  %124 = bitcast i8* %123 to i32*
  %125 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 1
  %126 = load i32, i32* %125, align 4
  store i32 %126, i32* %124, align 1
  %127 = getelementptr inbounds i8, i8* %111, i64 8
  %128 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 2
  %129 = bitcast i8* %127 to i32*
  %130 = load i32, i32* %128, align 4
  store i32 %130, i32* %129, align 1
  %131 = getelementptr inbounds i8, i8* %111, i64 12
  %132 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 3
  %133 = bitcast i8* %131 to i32*
  %134 = load i32, i32* %132, align 4
  store i32 %134, i32* %133, align 1
  br label %135

135:                                              ; preds = %52, %68, %73, %110, %115, %122
  %136 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %137 = bitcast %struct.SkPoint* %136 to <2 x float>*
  store <2 x float> %48, <2 x float>* %137, align 8
  %138 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 5
  %139 = load float, float* %138, align 4
  %140 = fcmp olt float %25, %139
  %141 = select i1 %140, float* %138, float* %4
  %142 = bitcast float* %141 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = bitcast float* %138 to i32*
  store i32 %143, i32* %144, align 4
  br label %145

145:                                              ; preds = %135, %151
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5)
  ret void

146:                                              ; preds = %40
  %147 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %3, i64 0, i64 4
  %148 = bitcast %struct.SkPoint* %147 to i64*
  %149 = load i64, i64* %148, align 16
  store i64 %149, i64* %32, align 8
  store i8 1, i8* %33, align 1
  br label %151

150:                                              ; preds = %40
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter11quadraticToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* %41) #12
  br label %151

151:                                              ; preds = %150, %146
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #12
  br label %145
}

declare <2 x float> @_ZNK7SkConic6evalAtEf(%struct.SkConic*, float) local_unnamed_addr #3

declare float @_ZNK7SkConic14findMidTangentEv(%struct.SkConic*) local_unnamed_addr #3

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_114InstanceWriter7conicToEPK7SkPointf(%"class.(anonymous namespace)::InstanceWriter"*, %struct.SkPoint* nocapture readonly, float) unnamed_addr #4 align 2 {
  %4 = alloca [2 x %struct.SkConic], align 16
  %5 = alloca float, align 4
  %6 = alloca %struct.SkConic, align 4
  %7 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 4
  %8 = load float, float* %7, align 16
  %9 = fdiv float 1.000000e+00, %8
  %10 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %13 = bitcast %struct.SkPoint* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %16 = bitcast %struct.SkPoint* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fcmp olt <2 x float> %14, %11
  %19 = select <2 x i1> %18, <2 x float> %14, <2 x float> %11
  %20 = bitcast <2 x float> %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i32 0
  %22 = extractelement <2 x i32> %20, i32 1
  %23 = zext i32 %22 to i64
  %24 = shl nuw i64 %23, 32
  %25 = zext i32 %21 to i64
  %26 = or i64 %24, %25
  %27 = bitcast i64 %26 to <2 x float>
  %28 = fcmp uge <2 x float> %17, %27
  %29 = bitcast <2 x float> %17 to <2 x i32>
  %30 = bitcast i64 %26 to <2 x i32>
  %31 = select <2 x i1> %28, <2 x i32> %30, <2 x i32> %29
  %32 = extractelement <2 x i32> %31, i32 0
  %33 = extractelement <2 x i32> %31, i32 1
  %34 = zext i32 %33 to i64
  %35 = shl nuw i64 %34, 32
  %36 = zext i32 %32 to i64
  %37 = or i64 %35, %36
  %38 = bitcast i64 %37 to <2 x float>
  %39 = fcmp olt <2 x float> %11, %14
  %40 = select <2 x i1> %39, <2 x float> %14, <2 x float> %11
  %41 = bitcast <2 x float> %40 to <2 x i32>
  %42 = extractelement <2 x i32> %41, i32 0
  %43 = extractelement <2 x i32> %41, i32 1
  %44 = zext i32 %43 to i64
  %45 = shl nuw i64 %44, 32
  %46 = zext i32 %42 to i64
  %47 = or i64 %45, %46
  %48 = bitcast i64 %47 to <2 x float>
  %49 = fcmp ule <2 x float> %17, %48
  %50 = bitcast i64 %47 to <2 x i32>
  %51 = select <2 x i1> %49, <2 x i32> %50, <2 x i32> %29
  %52 = extractelement <2 x i32> %51, i32 0
  %53 = extractelement <2 x i32> %51, i32 1
  %54 = zext i32 %53 to i64
  %55 = shl nuw i64 %54, 32
  %56 = zext i32 %52 to i64
  %57 = or i64 %55, %56
  %58 = bitcast i64 %57 to <2 x float>
  %59 = fadd <2 x float> %38, %58
  %60 = fmul <2 x float> %59, <float 5.000000e-01, float 5.000000e-01>
  %61 = fsub <2 x float> %11, %60
  %62 = fsub <2 x float> %14, %60
  %63 = fsub <2 x float> %17, %60
  %64 = fmul <2 x float> %61, %61
  %65 = extractelement <2 x float> %64, i32 0
  %66 = extractelement <2 x float> %64, i32 1
  %67 = fadd float %65, %66
  %68 = fmul <2 x float> %62, %62
  %69 = extractelement <2 x float> %68, i32 0
  %70 = extractelement <2 x float> %68, i32 1
  %71 = fadd float %69, %70
  %72 = fmul <2 x float> %63, %63
  %73 = extractelement <2 x float> %72, i32 0
  %74 = extractelement <2 x float> %72, i32 1
  %75 = fadd float %73, %74
  %76 = fcmp olt float %71, %75
  %77 = select i1 %76, float %75, float %71
  %78 = fcmp olt float %67, %77
  %79 = select i1 %78, float %77, float %67
  %80 = tail call float @sqrtf(float %79) #12
  %81 = fmul float %2, -2.000000e+00
  %82 = insertelement <2 x float> undef, float %81, i32 0
  %83 = shufflevector <2 x float> %82, <2 x float> undef, <2 x i32> zeroinitializer
  %84 = fmul <2 x float> %83, %62
  %85 = fadd <2 x float> %61, %84
  %86 = fadd <2 x float> %63, %85
  %87 = fmul float %2, 2.000000e+00
  %88 = fsub float 1.000000e+00, %87
  %89 = fadd float %88, 1.000000e+00
  %90 = tail call float @llvm.fabs.f32(float %89) #12
  %91 = fsub float %80, %9
  %92 = fcmp ogt float %91, 0.000000e+00
  %93 = select i1 %92, float %91, float 0.000000e+00
  %94 = fcmp ogt float %2, 1.000000e+00
  %95 = select i1 %94, float 1.000000e+00, float %2
  %96 = fmul <2 x float> %86, %86
  %97 = extractelement <2 x float> %96, i32 0
  %98 = extractelement <2 x float> %96, i32 1
  %99 = fadd float %97, %98
  %100 = tail call float @sqrtf(float %99) #12
  %101 = fmul float %90, %93
  %102 = fadd float %100, %101
  %103 = fmul float %95, 4.000000e+00
  %104 = fmul float %103, %9
  %105 = fdiv float %102, %104
  %106 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %106)
  %107 = fmul float %105, %105
  store float %107, float* %5, align 4
  %108 = fcmp ogt float %107, 0x4154400000000000
  br i1 %108, label %109, label %134

109:                                              ; preds = %3
  %110 = bitcast %struct.SkConic* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %110) #12
  %111 = bitcast %struct.SkPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %110, i8* align 4 %111, i64 24, i1 false) #12
  %112 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %6, i64 0, i32 1
  store float %2, float* %112, align 4
  %113 = bitcast [2 x %struct.SkConic]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %113) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %113, i8 -1, i64 56, i1 false) #12
  %114 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0
  %115 = call zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic* nonnull %6, float 5.000000e-01, %struct.SkConic* nonnull %114) #12
  br i1 %115, label %116, label %133

116:                                              ; preds = %109
  %117 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 2
  %118 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %119 = bitcast %struct.SkPoint* %118 to i64*
  %120 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %121 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 0
  %122 = call zeroext i1 @_ZNK10GrCullTest11areVisible3EPK7SkPoint(%class.GrCullTest* %117, %struct.SkPoint* nonnull %121) #12
  br i1 %122, label %123, label %126

123:                                              ; preds = %116
  %124 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 1
  %125 = load float, float* %124, align 8
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter7conicToEPK7SkPointf(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* nonnull %121, float %125) #12
  br label %130

126:                                              ; preds = %116
  %127 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 2
  %128 = bitcast %struct.SkPoint* %127 to i64*
  %129 = load i64, i64* %128, align 16
  store i64 %129, i64* %119, align 8
  store i8 1, i8* %120, align 1
  br label %130

130:                                              ; preds = %126, %123
  %131 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 0
  %132 = call zeroext i1 @_ZNK10GrCullTest11areVisible3EPK7SkPoint(%class.GrCullTest* %117, %struct.SkPoint* %131) #12
  br i1 %132, label %260, label %256

133:                                              ; preds = %256, %260, %109
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %113) #12
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %110) #12
  br label %255

134:                                              ; preds = %3
  %135 = bitcast %struct.SkPoint* %1 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %138 = bitcast float* %137 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = bitcast %struct.SkPoint* %12 to i64*
  %141 = load i64, i64* %140, align 4
  %142 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %143 = bitcast float* %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %146 = bitcast float* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %149 = load i8, i8* %148, align 1, !range !2
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %151, label %166

151:                                              ; preds = %134
  %152 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 0, i32 0
  %153 = bitcast float* %152 to i32*
  store i32 %136, i32* %153, align 8
  %154 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 0, i32 1
  %155 = bitcast float* %154 to i32*
  store i32 %139, i32* %155, align 4
  %156 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 1
  %157 = bitcast %struct.SkPoint* %156 to i64*
  store i64 %141, i64* %157, align 8
  %158 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 2, i32 0
  %159 = bitcast float* %158 to i32*
  store i32 %144, i32* %159, align 8
  %160 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 2, i32 1
  %161 = bitcast float* %160 to i32*
  store i32 %147, i32* %161, align 4
  %162 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 3, i32 0
  store float %2, float* %162, align 8
  %163 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 3, i32 1
  %164 = bitcast float* %163 to i32*
  store i32 2139095040, i32* %164, align 4
  %165 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 8
  store i8 1, i8* %165, align 16
  store i8 1, i8* %148, align 1
  br label %245

166:                                              ; preds = %134
  %167 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 5
  %168 = load i32, i32* %167, align 8, !noalias !134
  %169 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 6
  %170 = load i32, i32* %169, align 4, !noalias !134
  %171 = icmp slt i32 %168, %170
  br i1 %171, label %177, label %172

172:                                              ; preds = %166
  %173 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3
  %174 = tail call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %173, i32 1) #12, !noalias !134
  br i1 %174, label %175, label %245

175:                                              ; preds = %172
  %176 = load i32, i32* %167, align 8, !noalias !134
  br label %177

177:                                              ; preds = %175, %166
  %178 = phi i32 [ %176, %175 ], [ %168, %166 ]
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %167, align 8, !noalias !134
  %180 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 4
  %181 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 2
  %182 = load i64, i64* %181, align 8, !noalias !134
  %183 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %180, i64 0, i32 0
  %184 = load i8*, i8** %183, align 8, !noalias !134
  %185 = getelementptr inbounds i8, i8* %184, i64 %182
  %186 = ptrtoint i8* %185 to i64
  %187 = bitcast %struct.GrVertexWriter* %180 to i64*
  store i64 %186, i64* %187, align 8, !noalias !139
  %188 = icmp eq i8* %184, null
  br i1 %188, label %245, label %189

189:                                              ; preds = %177
  %190 = bitcast i8* %184 to i32*
  store i32 %136, i32* %190, align 1
  %191 = getelementptr inbounds i8, i8* %184, i64 4
  %192 = bitcast i8* %191 to i32*
  store i32 %139, i32* %192, align 1
  %193 = getelementptr inbounds i8, i8* %184, i64 8
  %194 = bitcast i8* %193 to i64*
  store i64 %141, i64* %194, align 1
  %195 = getelementptr inbounds i8, i8* %184, i64 16
  %196 = bitcast i8* %195 to i32*
  store i32 %144, i32* %196, align 1
  %197 = getelementptr inbounds i8, i8* %184, i64 20
  %198 = bitcast i8* %197 to i32*
  store i32 %147, i32* %198, align 1
  %199 = getelementptr inbounds i8, i8* %184, i64 24
  %200 = bitcast i8* %199 to float*
  store float %2, float* %200, align 1
  %201 = getelementptr inbounds i8, i8* %184, i64 28
  %202 = bitcast i8* %201 to i32*
  store i32 2139095040, i32* %202, align 1
  %203 = getelementptr inbounds i8, i8* %184, i64 32
  %204 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %205 = bitcast i8* %203 to i64*
  %206 = bitcast %struct.SkPoint* %204 to i64*
  %207 = load i64, i64* %206, align 4
  store i64 %207, i64* %205, align 1
  %208 = getelementptr inbounds i8, i8* %184, i64 40
  %209 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 0
  %210 = load i32, i32* %209, align 16
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %220, label %213

213:                                              ; preds = %189
  %214 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 10
  %215 = bitcast i8* %208 to i64*
  %216 = bitcast %"struct.GrStrokeShader::DynamicStroke"* %214 to i64*
  %217 = load i64, i64* %216, align 4
  store i64 %217, i64* %215, align 1
  %218 = getelementptr inbounds i8, i8* %184, i64 48
  %219 = load i32, i32* %209, align 16
  br label %220

220:                                              ; preds = %213, %189
  %221 = phi i8* [ %208, %189 ], [ %218, %213 ]
  %222 = phi i32 [ %210, %189 ], [ %219, %213 ]
  %223 = and i32 %222, 4
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %245, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 0
  %227 = bitcast i8* %221 to i32*
  %228 = load i32, i32* %226, align 4
  store i32 %228, i32* %227, align 1
  %229 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 1
  %230 = load i8, i8* %229, align 4, !range !2
  %231 = icmp eq i8 %230, 0
  br i1 %231, label %245, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds i8, i8* %221, i64 4
  %234 = bitcast i8* %233 to i32*
  %235 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 1
  %236 = load i32, i32* %235, align 4
  store i32 %236, i32* %234, align 1
  %237 = getelementptr inbounds i8, i8* %221, i64 8
  %238 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 2
  %239 = bitcast i8* %237 to i32*
  %240 = load i32, i32* %238, align 4
  store i32 %240, i32* %239, align 1
  %241 = getelementptr inbounds i8, i8* %221, i64 12
  %242 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 3
  %243 = bitcast i8* %241 to i32*
  %244 = load i32, i32* %242, align 4
  store i32 %244, i32* %243, align 1
  br label %245

245:                                              ; preds = %151, %172, %177, %220, %225, %232
  %246 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %247 = bitcast %struct.SkPoint* %246 to i64*
  store i64 %141, i64* %247, align 8
  %248 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 5
  %249 = load float, float* %248, align 4
  %250 = fcmp olt float %107, %249
  %251 = select i1 %250, float* %248, float* %5
  %252 = bitcast float* %251 to i32*
  %253 = load i32, i32* %252, align 4
  %254 = bitcast float* %248 to i32*
  store i32 %253, i32* %254, align 4
  br label %255

255:                                              ; preds = %245, %133
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %106)
  ret void

256:                                              ; preds = %130
  %257 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 2
  %258 = bitcast %struct.SkPoint* %257 to i64*
  %259 = load i64, i64* %258, align 4
  store i64 %259, i64* %119, align 8
  store i8 1, i8* %120, align 1
  br label %133

260:                                              ; preds = %130
  %261 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 1
  %262 = load float, float* %261, align 4
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter7conicToEPK7SkPointf(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* %131, float %262) #12
  br label %133
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN11GrPathUtils23findCubicConvex180ChopsEPK7SkPointPfPb(%struct.SkPoint*, float*, i8*) local_unnamed_addr #3

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"*, %struct.SkPoint*) unnamed_addr #5 align 2 {
  %3 = alloca [7 x %struct.SkPoint], align 16
  %4 = alloca float, align 4
  %5 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5)
  %6 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 4
  %7 = load float, float* %6, align 16
  %8 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %11 = bitcast %struct.SkPoint* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %14 = bitcast %struct.SkPoint* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %17 = bitcast %struct.SkPoint* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 1
  %19 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x float> %19, <4 x float> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = shufflevector <2 x float> %12, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %24 = shufflevector <4 x float> %22, <4 x float> %23, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %25 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x float> %12, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = fmul <4 x float> %24, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %29 = fadd <4 x float> %27, %28
  %30 = fadd <4 x float> %21, %29
  %31 = fmul <4 x float> %30, %30
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <2 x i32> <i32 0, i32 2>
  %33 = shufflevector <4 x float> %31, <4 x float> undef, <2 x i32> <i32 1, i32 3>
  %34 = fadd <2 x float> %32, %33
  %35 = extractelement <2 x float> %34, i32 0
  %36 = extractelement <2 x float> %34, i32 1
  %37 = fcmp olt float %35, %36
  %38 = select i1 %37, float %36, float %35
  %39 = fmul float %7, %7
  %40 = fmul float %39, 5.625000e-01
  %41 = fmul float %40, %38
  store float %41, float* %4, align 4
  %42 = fcmp ogt float %41, 0x4154400000000000
  %43 = extractelement <2 x float> %15, i32 0
  %44 = extractelement <2 x float> %12, i32 0
  br i1 %42, label %45, label %61

45:                                               ; preds = %2
  %46 = bitcast [7 x %struct.SkPoint]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %46) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -1, i64 56, i1 false) #12
  %47 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %3, i64 0, i64 0
  call void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint* %1, %struct.SkPoint* nonnull %47) #12
  %48 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 2
  %49 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %50 = bitcast %struct.SkPoint* %49 to i64*
  %51 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %52 = call zeroext i1 @_ZNK10GrCullTest11areVisible4EPK7SkPoint(%class.GrCullTest* %48, %struct.SkPoint* nonnull %47) #12
  br i1 %52, label %53, label %54

53:                                               ; preds = %45
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* nonnull %47) #12
  br label %58

54:                                               ; preds = %45
  %55 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %3, i64 0, i64 3
  %56 = bitcast %struct.SkPoint* %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %50, align 8
  store i8 1, i8* %51, align 1
  br label %58

58:                                               ; preds = %54, %53
  %59 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %3, i64 0, i64 3
  %60 = call zeroext i1 @_ZNK10GrCullTest11areVisible4EPK7SkPoint(%class.GrCullTest* %48, %struct.SkPoint* %59) #12
  br i1 %60, label %171, label %167

61:                                               ; preds = %2
  %62 = extractelement <2 x float> %18, i32 0
  %63 = fcmp une float %62, %43
  br i1 %63, label %77, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %66 = load float, float* %65, align 4
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %68 = load float, float* %67, align 4
  %69 = fcmp une float %66, %68
  br i1 %69, label %77, label %70

70:                                               ; preds = %64
  %71 = fcmp une float %43, %44
  br i1 %71, label %76, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %74 = load float, float* %73, align 4
  %75 = fcmp une float %68, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %70, %72
  br label %77

77:                                               ; preds = %61, %76, %72, %64
  %78 = phi %struct.SkPoint* [ %13, %64 ], [ %10, %76 ], [ %1, %72 ], [ %13, %61 ]
  %79 = bitcast %struct.SkPoint* %78 to i64*
  %80 = load i64, i64* %79, align 4
  %81 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 9
  %82 = load i8, i8* %81, align 1, !range !2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %89

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 6, i64 0
  %86 = bitcast %struct.SkPoint* %85 to i8*
  %87 = bitcast %struct.SkPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 4 %87, i64 32, i1 false) #12
  %88 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 8
  store i8 1, i8* %88, align 16
  store i8 1, i8* %81, align 1
  br label %156

89:                                               ; preds = %77
  %90 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 5
  %91 = load i32, i32* %90, align 8, !noalias !142
  %92 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 6
  %93 = load i32, i32* %92, align 4, !noalias !142
  %94 = icmp slt i32 %91, %93
  br i1 %94, label %100, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3
  %97 = tail call zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder* %96, i32 1) #12, !noalias !142
  br i1 %97, label %98, label %156

98:                                               ; preds = %95
  %99 = load i32, i32* %90, align 8, !noalias !142
  br label %100

100:                                              ; preds = %98, %89
  %101 = phi i32 [ %99, %98 ], [ %91, %89 ]
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %90, align 8, !noalias !142
  %103 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 4
  %104 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 3, i32 2
  %105 = load i64, i64* %104, align 8, !noalias !142
  %106 = getelementptr inbounds %struct.GrVertexWriter, %struct.GrVertexWriter* %103, i64 0, i32 0
  %107 = load i8*, i8** %106, align 8, !noalias !142
  %108 = getelementptr inbounds i8, i8* %107, i64 %105
  %109 = ptrtoint i8* %108 to i64
  %110 = bitcast %struct.GrVertexWriter* %103 to i64*
  store i64 %109, i64* %110, align 8, !noalias !147
  %111 = icmp eq i8* %107, null
  br i1 %111, label %156, label %112

112:                                              ; preds = %100
  %113 = bitcast %struct.SkPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %107, i8* align 4 %113, i64 32, i1 false) #12
  %114 = getelementptr inbounds i8, i8* %107, i64 32
  %115 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %116 = bitcast i8* %114 to i64*
  %117 = bitcast %struct.SkPoint* %115 to i64*
  %118 = load i64, i64* %117, align 4
  store i64 %118, i64* %116, align 1
  %119 = getelementptr inbounds i8, i8* %107, i64 40
  %120 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 0
  %121 = load i32, i32* %120, align 16
  %122 = and i32 %121, 2
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %131, label %124

124:                                              ; preds = %112
  %125 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 10
  %126 = bitcast i8* %119 to i64*
  %127 = bitcast %"struct.GrStrokeShader::DynamicStroke"* %125 to i64*
  %128 = load i64, i64* %127, align 4
  store i64 %128, i64* %126, align 1
  %129 = getelementptr inbounds i8, i8* %107, i64 48
  %130 = load i32, i32* %120, align 16
  br label %131

131:                                              ; preds = %124, %112
  %132 = phi i8* [ %119, %112 ], [ %129, %124 ]
  %133 = phi i32 [ %121, %112 ], [ %130, %124 ]
  %134 = and i32 %133, 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %156, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 0
  %138 = bitcast i8* %132 to i32*
  %139 = load i32, i32* %137, align 4
  store i32 %139, i32* %138, align 1
  %140 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 1
  %141 = load i8, i8* %140, align 4, !range !2
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %156, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds i8, i8* %132, i64 4
  %145 = bitcast i8* %144 to i32*
  %146 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 1
  %147 = load i32, i32* %146, align 4
  store i32 %147, i32* %145, align 1
  %148 = getelementptr inbounds i8, i8* %132, i64 8
  %149 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 2
  %150 = bitcast i8* %148 to i32*
  %151 = load i32, i32* %149, align 4
  store i32 %151, i32* %150, align 1
  %152 = getelementptr inbounds i8, i8* %132, i64 12
  %153 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 11, i32 0, i64 3
  %154 = bitcast i8* %152 to i32*
  %155 = load i32, i32* %153, align 4
  store i32 %155, i32* %154, align 1
  br label %156

156:                                              ; preds = %84, %95, %100, %131, %136, %143
  %157 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 7
  %158 = bitcast %struct.SkPoint* %157 to i64*
  store i64 %80, i64* %158, align 8
  %159 = getelementptr inbounds %"class.(anonymous namespace)::InstanceWriter", %"class.(anonymous namespace)::InstanceWriter"* %0, i64 0, i32 5
  %160 = load float, float* %159, align 4
  %161 = fcmp olt float %41, %160
  %162 = select i1 %161, float* %159, float* %4
  %163 = bitcast float* %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = bitcast float* %159 to i32*
  store i32 %164, i32* %165, align 4
  br label %166

166:                                              ; preds = %156, %172
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5)
  ret void

167:                                              ; preds = %58
  %168 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %3, i64 0, i64 6
  %169 = bitcast %struct.SkPoint* %168 to i64*
  %170 = load i64, i64* %169, align 16
  store i64 %170, i64* %50, align 8
  store i8 1, i8* %51, align 1
  br label %172

171:                                              ; preds = %58
  call fastcc void @_ZN12_GLOBAL__N_114InstanceWriter16cubicConvex180ToEPK7SkPoint(%"class.(anonymous namespace)::InstanceWriter"* %0, %struct.SkPoint* %59) #12
  br label %172

172:                                              ; preds = %171, %167
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %46) #12
  br label %166
}

declare void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint*, %struct.SkPoint*, float) local_unnamed_addr #3

declare void @_Z13SkChopCubicAtPK7SkPointPS_ff(%struct.SkPoint*, %struct.SkPoint*, float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK29GrStrokeFixedCountTessellator4drawEP14GrOpFlushState(%class.GrStrokeFixedCountTessellator* nocapture readonly, %class.GrOpFlushState* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = alloca %class.sk_sp.16, align 8
  %4 = alloca %class.sk_sp.16, align 8
  %5 = alloca %class.sk_sp.16, align 8
  %6 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %7 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 4294967294
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %81, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 1
  br i1 %15, label %81, label %16

16:                                               ; preds = %12
  %17 = bitcast i8* %6 to %struct.GrVertexChunk**
  %18 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %17, align 8
  %19 = icmp eq %struct.GrVertexChunk* %18, null
  br i1 %19, label %81, label %20

20:                                               ; preds = %16
  %21 = lshr i64 %9, 1
  %22 = and i64 %21, 2147483647
  %23 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %18, i64 %22
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %81, label %25

25:                                               ; preds = %20
  %26 = bitcast %class.sk_sp.16* %3 to i8*
  %27 = bitcast %class.sk_sp.16* %4 to i8*
  %28 = bitcast %class.sk_sp.16* %5 to i8*
  %29 = getelementptr inbounds %class.GrOpFlushState, %class.GrOpFlushState* %1, i64 0, i32 15
  %30 = bitcast %class.sk_sp.16* %3 to i64*
  %31 = bitcast %class.sk_sp.16* %4 to i64*
  %32 = bitcast %class.sk_sp.16* %5 to i64*
  %33 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %5, i64 0, i32 0
  %34 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %4, i64 0, i32 0
  %35 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %3, i64 0, i32 0
  br label %36

36:                                               ; preds = %25, %72
  %37 = phi %struct.GrVertexChunk* [ %18, %25 ], [ %79, %72 ]
  %38 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %37, i64 0, i32 0, i32 0
  %39 = load %class.GrBuffer*, %class.GrBuffer** %38, align 8
  %40 = icmp eq %class.GrBuffer* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = bitcast %class.GrBuffer* %39 to void (%class.GrBuffer*)***
  %43 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %42, align 8
  %44 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %43, i64 2
  %45 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %44, align 8
  call void %45(%class.GrBuffer* nonnull %39) #12
  br label %46

46:                                               ; preds = %36, %41
  %47 = ptrtoint %class.GrBuffer* %39 to i64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28)
  %48 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %29, align 8
  store i64 0, i64* %30, align 8
  store i64 %47, i64* %31, align 8
  store i64 0, i64* %32, align 8
  call void @_ZN15GrOpsRenderPass11bindBuffersE5sk_spIK8GrBufferES3_S3_18GrPrimitiveRestart(%class.GrOpsRenderPass* %48, %class.sk_sp.16* nonnull %3, %class.sk_sp.16* nonnull %4, %class.sk_sp.16* nonnull %5, i1 zeroext false) #12
  %49 = load %class.GrBuffer*, %class.GrBuffer** %33, align 8
  %50 = icmp eq %class.GrBuffer* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %46
  %52 = bitcast %class.GrBuffer* %49 to void (%class.GrBuffer*)***
  %53 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %52, align 8
  %54 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %53, i64 3
  %55 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %54, align 8
  call void %55(%class.GrBuffer* nonnull %49) #12
  br label %56

56:                                               ; preds = %51, %46
  %57 = load %class.GrBuffer*, %class.GrBuffer** %34, align 8
  %58 = icmp eq %class.GrBuffer* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %56
  %60 = bitcast %class.GrBuffer* %57 to void (%class.GrBuffer*)***
  %61 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %61, i64 3
  %63 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %62, align 8
  call void %63(%class.GrBuffer* nonnull %57) #12
  br label %64

64:                                               ; preds = %59, %56
  %65 = load %class.GrBuffer*, %class.GrBuffer** %35, align 8
  %66 = icmp eq %class.GrBuffer* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %64
  %68 = bitcast %class.GrBuffer* %65 to void (%class.GrBuffer*)***
  %69 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %68, align 8
  %70 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %69, i64 3
  %71 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %70, align 8
  call void %71(%class.GrBuffer* nonnull %65) #12
  br label %72

72:                                               ; preds = %67, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28)
  %73 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %37, i64 0, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %37, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = load i32, i32* %13, align 8
  %78 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %29, align 8
  call void @_ZN15GrOpsRenderPass13drawInstancedEiiii(%class.GrOpsRenderPass* %78, i32 %74, i32 %76, i32 %77, i32 0) #12
  %79 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %37, i64 1
  %80 = icmp eq %struct.GrVertexChunk* %79, %23
  br i1 %80, label %81, label %36

81:                                               ; preds = %72, %16, %20, %2, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN29GrStrokeFixedCountTessellatorD2Ev(%class.GrStrokeFixedCountTessellator*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV29GrStrokeFixedCountTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %4 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast i8* %3 to %struct.GrVertexChunk**
  br label %15

11:                                               ; preds = %28, %1
  %12 = phi i64 [ %6, %1 ], [ %29, %28 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %37, label %34

15:                                               ; preds = %28, %9
  %16 = phi i64 [ %6, %9 ], [ %29, %28 ]
  %17 = phi i64 [ 0, %9 ], [ %30, %28 ]
  %18 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %10, align 8
  %19 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %18, i64 %17, i32 0, i32 0
  %20 = load %class.GrBuffer*, %class.GrBuffer** %19, align 8
  %21 = icmp eq %class.GrBuffer* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = bitcast %class.GrBuffer* %20 to void (%class.GrBuffer*)***
  %24 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %24, i64 3
  %26 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %25, align 8
  tail call void %26(%class.GrBuffer* nonnull %20) #12
  %27 = load i64, i64* %5, align 8
  br label %28

28:                                               ; preds = %22, %15
  %29 = phi i64 [ %16, %15 ], [ %27, %22 ]
  %30 = add nuw nsw i64 %17, 1
  %31 = lshr i64 %29, 1
  %32 = and i64 %31, 2147483647
  %33 = icmp ult i64 %30, %32
  br i1 %33, label %15, label %11

34:                                               ; preds = %11
  %35 = bitcast i8* %3 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @_Z7sk_freePv(i8* %36) #12
  br label %37

37:                                               ; preds = %11, %34
  %38 = bitcast %class.GrStrokeFixedCountTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %38, align 8
  %39 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void @_Z7sk_freePv(i8* %47) #12
  br label %48

48:                                               ; preds = %37, %44
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN29GrStrokeFixedCountTessellatorD0Ev(%class.GrStrokeFixedCountTessellator*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV29GrStrokeFixedCountTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %4 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast i8* %3 to %struct.GrVertexChunk**
  br label %15

11:                                               ; preds = %28, %1
  %12 = phi i64 [ %6, %1 ], [ %29, %28 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %37, label %34

15:                                               ; preds = %28, %9
  %16 = phi i64 [ %6, %9 ], [ %29, %28 ]
  %17 = phi i64 [ 0, %9 ], [ %30, %28 ]
  %18 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %10, align 8
  %19 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %18, i64 %17, i32 0, i32 0
  %20 = load %class.GrBuffer*, %class.GrBuffer** %19, align 8
  %21 = icmp eq %class.GrBuffer* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = bitcast %class.GrBuffer* %20 to void (%class.GrBuffer*)***
  %24 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %24, i64 3
  %26 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %25, align 8
  tail call void %26(%class.GrBuffer* nonnull %20) #12
  %27 = load i64, i64* %5, align 8
  br label %28

28:                                               ; preds = %22, %15
  %29 = phi i64 [ %16, %15 ], [ %27, %22 ]
  %30 = add nuw nsw i64 %17, 1
  %31 = lshr i64 %29, 1
  %32 = and i64 %31, 2147483647
  %33 = icmp ult i64 %30, %32
  br i1 %33, label %15, label %11

34:                                               ; preds = %11
  %35 = bitcast i8* %3 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @_Z7sk_freePv(i8* %36) #12
  br label %37

37:                                               ; preds = %34, %11
  %38 = bitcast %class.GrStrokeFixedCountTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %38, align 8
  %39 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %class.GrStrokeFixedCountTessellator, %class.GrStrokeFixedCountTessellator* %0, i64 0, i32 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void @_Z7sk_freePv(i8* %47) #12
  br label %48

48:                                               ; preds = %37, %44
  %49 = bitcast %class.GrStrokeFixedCountTessellator* %0 to i8*
  tail call void @_ZdlPv(i8* %49) #13
  ret void
}

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare i32 @_ZNK8SkRGBA4fIL11SkAlphaType2EE12toBytes_RGBAEv(%struct.SkRGBA4f*) local_unnamed_addr #3

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN16GrStrokeIterator17finishOpenContourEv(%class.GrStrokeIterator*) local_unnamed_addr #10 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %103, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %7 = load %class.SkStrokeRec*, %class.SkStrokeRec** %6, align 8
  %8 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = trunc i32 %9 to i16
  switch i16 %10, label %205 [
    i16 0, label %11
    i16 1, label %30
    i16 2, label %71
  ]

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %13 = bitcast %struct.SkPoint** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 8
  %20 = add nsw i32 %19, %3
  %21 = and i32 %20, 7
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %22
  store i32 6, i32* %23, align 4
  %24 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %22
  %25 = bitcast %struct.SkPoint** %24 to i64*
  store i64 %14, i64* %25, align 8
  %26 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %22
  %27 = bitcast float** %26 to i64*
  store i64 %17, i64* %27, align 8
  %28 = load i32, i32* %2, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %2, align 4
  br label %205

30:                                               ; preds = %5
  %31 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %32 = load i32, i32* %31, align 8
  %33 = add i32 %32, %3
  %34 = add i32 %33, 7
  %35 = and i32 %34, 7
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = add nsw i64 %42, -1
  %44 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %36
  %45 = load %struct.SkPoint*, %struct.SkPoint** %44, align 8
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %45, i64 %43
  %47 = and i32 %33, 7
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %48
  store i32 5, i32* %49, align 4
  %50 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %48
  store %struct.SkPoint* %46, %struct.SkPoint** %50, align 8
  %51 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %48
  store float* null, float** %51, align 8
  %52 = load i32, i32* %2, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %2, align 4
  %54 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %55 = bitcast %struct.SkPoint** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %58 = bitcast float** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = load i32, i32* %31, align 8
  %61 = add nsw i32 %60, %53
  %62 = and i32 %61, 7
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %63
  store i32 5, i32* %64, align 4
  %65 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %63
  %66 = bitcast %struct.SkPoint** %65 to i64*
  store i64 %56, i64* %66, align 8
  %67 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %63
  %68 = bitcast float** %67 to i64*
  store i64 %59, i64* %68, align 8
  %69 = load i32, i32* %2, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %2, align 4
  br label %205

71:                                               ; preds = %5
  tail call void @_ZN16GrStrokeIterator19fillSquareCapPointsEv(%class.GrStrokeIterator* %0)
  %72 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 0
  %73 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %74 = load i32, i32* %73, align 8
  %75 = load i32, i32* %2, align 4
  %76 = add nsw i32 %75, %74
  %77 = and i32 %76, 7
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %78
  store i32 1, i32* %79, align 4
  %80 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %78
  store %struct.SkPoint* %72, %struct.SkPoint** %80, align 8
  %81 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %78
  store float* null, float** %81, align 8
  %82 = load i32, i32* %2, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %2, align 4
  %84 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15, i32 0, i64 0
  %85 = load i32, i32* %73, align 8
  %86 = add nsw i32 %85, %83
  %87 = and i32 %86, 7
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %88
  store i32 6, i32* %89, align 4
  %90 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %88
  store %struct.SkPoint* %84, %struct.SkPoint** %90, align 8
  %91 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %88
  store float* null, float** %91, align 8
  %92 = load i32, i32* %2, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %2, align 4
  %94 = load i32, i32* %73, align 8
  %95 = add nsw i32 %94, %93
  %96 = and i32 %95, 7
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %97
  store i32 1, i32* %98, align 4
  %99 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %97
  store %struct.SkPoint* %84, %struct.SkPoint** %99, align 8
  %100 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %97
  store float* null, float** %100, align 8
  %101 = load i32, i32* %2, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %2, align 4
  br label %205

103:                                              ; preds = %1
  %104 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  %105 = load %struct.SkPoint*, %struct.SkPoint** %104, align 8
  %106 = icmp eq %struct.SkPoint* %105, null
  %107 = ptrtoint %struct.SkPoint* %105 to i64
  br i1 %106, label %237, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %110 = load %class.SkStrokeRec*, %class.SkStrokeRec** %109, align 8
  %111 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %110, i64 0, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = trunc i32 %112 to i16
  switch i16 %113, label %205 [
    i16 0, label %237
    i16 1, label %114
    i16 2, label %128
  ]

114:                                              ; preds = %108
  %115 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, 7
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %118
  store i32 5, i32* %119, align 4
  %120 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %118
  store %struct.SkPoint* %105, %struct.SkPoint** %120, align 8
  %121 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %118
  store float* null, float** %121, align 8
  %122 = load i32, i32* %2, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %2, align 4
  %124 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  store i32 5, i32* %124, align 8
  %125 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %126 = bitcast %struct.SkPoint** %125 to i64*
  store i64 %107, i64* %126, align 8
  %127 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  store float* null, float** %127, align 8
  br label %205

128:                                              ; preds = %108
  %129 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %110) #12
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %137, label %131

131:                                              ; preds = %128
  %132 = load %class.SkStrokeRec*, %class.SkStrokeRec** %109, align 8
  %133 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %132, i64 0, i32 1
  %134 = load float, float* %133, align 4
  %135 = fmul float %134, 5.000000e-01
  %136 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %135, i32 0
  br label %160

137:                                              ; preds = %128
  %138 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %139 = load %class.SkMatrix*, %class.SkMatrix** %138, align 8
  %140 = bitcast %class.SkMatrix* %139 to <2 x float>*
  %141 = load <2 x float>, <2 x float>* %140, align 4
  %142 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %139, i64 0, i32 0, i64 3
  %143 = bitcast float* %142 to <2 x float>*
  %144 = load <2 x float>, <2 x float>* %143, align 4
  %145 = shufflevector <2 x float> %144, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %146 = fmul <2 x float> %141, %145
  %147 = extractelement <2 x float> %146, i32 0
  %148 = extractelement <2 x float> %146, i32 1
  %149 = fsub float %147, %148
  %150 = fcmp ogt float %149, 0.000000e+00
  br i1 %150, label %151, label %160

151:                                              ; preds = %137
  %152 = fdiv float 5.000000e-01, %149
  %153 = extractelement <2 x float> %144, i32 1
  %154 = fmul float %153, %152
  %155 = insertelement <2 x float> undef, float %154, i32 0
  %156 = extractelement <2 x float> %144, i32 0
  %157 = fmul float %156, %152
  %158 = fsub float -0.000000e+00, %157
  %159 = insertelement <2 x float> %155, float %158, i32 1
  br label %160

160:                                              ; preds = %137, %151, %131
  %161 = phi <2 x float> [ %159, %151 ], [ %136, %131 ], [ <float 1.000000e+00, float 0.000000e+00>, %137 ]
  %162 = load %struct.SkPoint*, %struct.SkPoint** %104, align 8
  %163 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %162, i64 0, i32 0
  %164 = load float, float* %163, align 4
  %165 = extractelement <2 x float> %161, i32 0
  %166 = fsub float %164, %165
  %167 = insertelement <2 x float> undef, float %166, i32 0
  %168 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %162, i64 0, i32 1
  %169 = load float, float* %168, align 4
  %170 = extractelement <2 x float> %161, i32 1
  %171 = fsub float %169, %170
  %172 = insertelement <2 x float> %167, float %171, i32 1
  %173 = fadd float %165, %164
  %174 = insertelement <2 x float> undef, float %173, i32 0
  %175 = fadd float %170, %169
  %176 = insertelement <2 x float> %174, float %175, i32 1
  %177 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14
  %178 = bitcast %"struct.std::__1::array.19"* %177 to <2 x float>*
  store <2 x float> %172, <2 x float>* %178, align 8
  %179 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 1
  %180 = bitcast %struct.SkPoint* %179 to <2 x float>*
  store <2 x float> %176, <2 x float>* %180, align 8
  %181 = getelementptr inbounds %"struct.std::__1::array.19", %"struct.std::__1::array.19"* %177, i64 0, i32 0, i64 0
  %182 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %183 = load i32, i32* %182, align 8
  %184 = load i32, i32* %2, align 4
  %185 = add nsw i32 %184, %183
  %186 = and i32 %185, 7
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %187
  store i32 1, i32* %188, align 4
  %189 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %187
  store %struct.SkPoint* %181, %struct.SkPoint** %189, align 8
  %190 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %187
  store float* null, float** %190, align 8
  %191 = load i32, i32* %2, align 4
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %2, align 4
  %193 = load i32, i32* %182, align 8
  %194 = add nsw i32 %193, %192
  %195 = and i32 %194, 7
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %196
  store i32 6, i32* %197, align 4
  %198 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %196
  store %struct.SkPoint* %181, %struct.SkPoint** %198, align 8
  %199 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %196
  store float* null, float** %199, align 8
  %200 = load i32, i32* %2, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %2, align 4
  %202 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  store i32 1, i32* %202, align 8
  %203 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  store %struct.SkPoint* %181, %struct.SkPoint** %203, align 8
  %204 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  store float* null, float** %204, align 8
  br label %205

205:                                              ; preds = %108, %160, %114, %11, %30, %71, %5
  %206 = phi i32 [ 0, %108 ], [ %201, %160 ], [ %123, %114 ], [ %29, %11 ], [ %70, %30 ], [ %102, %71 ], [ %3, %5 ]
  %207 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 4
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %210 = bitcast %struct.SkPoint** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 6
  %213 = bitcast float** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %216 = load i32, i32* %215, align 8
  %217 = add nsw i32 %206, %216
  %218 = and i32 %217, 7
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %219
  store i32 %208, i32* %220, align 4
  %221 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %219
  %222 = bitcast %struct.SkPoint** %221 to i64*
  store i64 %211, i64* %222, align 8
  %223 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %219
  %224 = bitcast float** %223 to i64*
  store i64 %214, i64* %224, align 8
  %225 = load i32, i32* %2, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %2, align 4
  %227 = load i32, i32* %215, align 8
  %228 = add nsw i32 %227, %226
  %229 = and i32 %228, 7
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %230
  store i32 7, i32* %231, align 4
  %232 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %230
  store %struct.SkPoint* null, %struct.SkPoint** %232, align 8
  %233 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 10, i64 %230
  store float* null, float** %233, align 8
  %234 = load i32, i32* %2, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %2, align 4
  %236 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 7
  store %struct.SkPoint* null, %struct.SkPoint** %236, align 8
  br label %237

237:                                              ; preds = %103, %108, %205
  %238 = phi i1 [ true, %205 ], [ false, %108 ], [ false, %103 ]
  ret i1 %238
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16GrStrokeIterator19fillSquareCapPointsEv(%class.GrStrokeIterator*) local_unnamed_addr #10 comdat align 2 {
  %2 = alloca <2 x float>, align 8
  %3 = alloca <2 x float>, align 8
  %4 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 12
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, 7
  %7 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 11
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %6, %8
  %10 = and i32 %9, 7
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 9, i64 %11
  %13 = load %struct.SkPoint*, %struct.SkPoint** %12, align 8
  %14 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 8, i64 %11
  %15 = load i32, i32* %14, align 4
  switch i32 %15, label %49 [
    i32 4, label %20
    i32 3, label %32
    i32 2, label %32
    i32 1, label %16
  ]

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 1, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  br label %44

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 3, i32 0
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 2, i32 0
  %23 = bitcast float* %21 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = bitcast float* %22 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fsub <2 x float> %24, %26
  %28 = fcmp oeq <2 x float> %27, zeroinitializer
  %29 = extractelement <2 x i1> %28, i32 0
  %30 = extractelement <2 x i1> %28, i32 1
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %50

32:                                               ; preds = %20, %1, %1
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 2, i32 0
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 1, i32 0
  %35 = bitcast float* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 4
  %37 = bitcast float* %33 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = fsub <2 x float> %38, %36
  %40 = fcmp oeq <2 x float> %39, zeroinitializer
  %41 = extractelement <2 x i1> %40, i32 0
  %42 = extractelement <2 x i1> %40, i32 1
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %50

44:                                               ; preds = %16, %32
  %45 = phi <2 x float> [ %19, %16 ], [ %36, %32 ]
  %46 = bitcast %struct.SkPoint* %13 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 4
  %48 = fsub <2 x float> %45, %47
  br label %50

49:                                               ; preds = %1
  tail call void @llvm.trap()
  unreachable

50:                                               ; preds = %32, %20, %44
  %51 = phi <2 x float> [ %48, %44 ], [ %39, %32 ], [ %27, %20 ]
  %52 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 1
  %53 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %54 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %53) #12
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %50
  %57 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %58 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %57, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 5.000000e-01
  %61 = extractelement <2 x float> %51, i32 0
  %62 = extractelement <2 x float> %51, i32 1
  %63 = tail call float @_ZN7SkPoint6LengthEff(float %61, float %62) #12
  %64 = fdiv float %60, %63
  %65 = fmul float %61, %64
  %66 = insertelement <2 x float> undef, float %65, i32 0
  %67 = fmul float %62, %64
  br label %85

68:                                               ; preds = %50
  %69 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %70 = load %class.SkMatrix*, %class.SkMatrix** %69, align 8
  %71 = extractelement <2 x float> %51, i32 0
  %72 = extractelement <2 x float> %51, i32 1
  %73 = bitcast <2 x float>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73)
  %74 = bitcast <2 x float>* %2 to %struct.SkPoint*
  %75 = getelementptr inbounds <2 x float>, <2 x float>* %2, i64 0, i64 0
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %74, i64 0, i32 1
  store float %71, float* %75, align 8
  store float %72, float* %76, align 4
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %70, %struct.SkPoint* nonnull %74, %struct.SkPoint* nonnull %74, i32 1) #12
  %77 = load <2 x float>, <2 x float>* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73)
  %78 = extractelement <2 x float> %77, i32 0
  %79 = extractelement <2 x float> %77, i32 1
  %80 = call float @_ZN7SkPoint6LengthEff(float %78, float %79) #12
  %81 = fdiv float 5.000000e-01, %80
  %82 = fmul float %71, %81
  %83 = insertelement <2 x float> undef, float %82, i32 0
  %84 = fmul float %72, %81
  br label %85

85:                                               ; preds = %68, %56
  %86 = phi float [ %84, %68 ], [ %67, %56 ]
  %87 = phi <2 x float> [ %83, %68 ], [ %66, %56 ]
  %88 = insertelement <2 x float> %87, float %86, i32 1
  %89 = zext i32 %15 to i64
  %90 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = add nsw i64 %92, -1
  %94 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %93
  %95 = bitcast %struct.SkPoint* %94 to <2 x float>*
  %96 = load <2 x float>, <2 x float>* %95, align 4
  %97 = fadd <2 x float> %88, %96
  %98 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14
  %99 = bitcast %"struct.std::__1::array.19"* %98 to <2 x float>*
  store <2 x float> %96, <2 x float>* %99, align 8
  %100 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 14, i32 0, i64 1
  %101 = bitcast %struct.SkPoint* %100 to <2 x float>*
  store <2 x float> %97, <2 x float>* %101, align 8
  %102 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 5
  %103 = load %struct.SkPoint*, %struct.SkPoint** %102, align 8
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 1, i32 0
  %105 = bitcast %struct.SkPoint* %103 to <2 x float>*
  %106 = load <2 x float>, <2 x float>* %105, align 4
  %107 = bitcast float* %104 to <2 x float>*
  %108 = load <2 x float>, <2 x float>* %107, align 4
  %109 = fsub <2 x float> %108, %106
  %110 = fcmp oeq <2 x float> %109, zeroinitializer
  %111 = extractelement <2 x i1> %110, i32 0
  %112 = extractelement <2 x i1> %110, i32 1
  %113 = and i1 %111, %112
  br i1 %113, label %114, label %128

114:                                              ; preds = %85
  %115 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 2, i32 0
  %116 = bitcast float* %115 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 4
  %118 = fsub <2 x float> %117, %106
  %119 = fcmp oeq <2 x float> %118, zeroinitializer
  %120 = extractelement <2 x i1> %119, i32 0
  %121 = extractelement <2 x i1> %119, i32 1
  %122 = and i1 %120, %121
  br i1 %122, label %123, label %128

123:                                              ; preds = %114
  %124 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %103, i64 3, i32 0
  %125 = bitcast float* %124 to <2 x float>*
  %126 = load <2 x float>, <2 x float>* %125, align 4
  %127 = fsub <2 x float> %126, %106
  br label %128

128:                                              ; preds = %114, %123, %85
  %129 = phi <2 x float> [ %127, %123 ], [ %118, %114 ], [ %109, %85 ]
  %130 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %131 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %130) #12
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %145, label %133

133:                                              ; preds = %128
  %134 = load %class.SkStrokeRec*, %class.SkStrokeRec** %52, align 8
  %135 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %134, i64 0, i32 1
  %136 = load float, float* %135, align 4
  %137 = fmul float %136, -5.000000e-01
  %138 = extractelement <2 x float> %129, i32 0
  %139 = extractelement <2 x float> %129, i32 1
  %140 = call float @_ZN7SkPoint6LengthEff(float %138, float %139) #12
  %141 = fdiv float %137, %140
  %142 = fmul float %138, %141
  %143 = insertelement <2 x float> undef, float %142, i32 0
  %144 = fmul float %139, %141
  br label %162

145:                                              ; preds = %128
  %146 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 0
  %147 = load %class.SkMatrix*, %class.SkMatrix** %146, align 8
  %148 = extractelement <2 x float> %129, i32 0
  %149 = extractelement <2 x float> %129, i32 1
  %150 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %150)
  %151 = bitcast <2 x float>* %3 to %struct.SkPoint*
  %152 = getelementptr inbounds <2 x float>, <2 x float>* %3, i64 0, i64 0
  %153 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %151, i64 0, i32 1
  store float %148, float* %152, align 8
  store float %149, float* %153, align 4
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %147, %struct.SkPoint* nonnull %151, %struct.SkPoint* nonnull %151, i32 1) #12
  %154 = load <2 x float>, <2 x float>* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %150)
  %155 = extractelement <2 x float> %154, i32 0
  %156 = extractelement <2 x float> %154, i32 1
  %157 = call float @_ZN7SkPoint6LengthEff(float %155, float %156) #12
  %158 = fdiv float -5.000000e-01, %157
  %159 = fmul float %148, %158
  %160 = insertelement <2 x float> undef, float %159, i32 0
  %161 = fmul float %149, %158
  br label %162

162:                                              ; preds = %145, %133
  %163 = phi float [ %161, %145 ], [ %144, %133 ]
  %164 = phi <2 x float> [ %160, %145 ], [ %143, %133 ]
  %165 = insertelement <2 x float> %164, float %163, i32 1
  %166 = bitcast %struct.SkPoint** %102 to <2 x float>**
  %167 = load <2 x float>*, <2 x float>** %166, align 8
  %168 = load <2 x float>, <2 x float>* %167, align 4
  %169 = fadd <2 x float> %165, %168
  %170 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15
  %171 = bitcast %"struct.std::__1::array.19"* %170 to <2 x float>*
  store <2 x float> %169, <2 x float>* %171, align 8
  %172 = getelementptr inbounds %class.GrStrokeIterator, %class.GrStrokeIterator* %0, i64 0, i32 15, i32 0, i64 1
  %173 = bitcast %struct.SkPoint* %172 to <2 x float>*
  store <2 x float> %168, <2 x float>* %173, align 8
  ret void
}

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #3

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #3

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN20GrVertexChunkBuilder10allocChunkEi(%class.GrVertexChunkBuilder*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 1
  %4 = bitcast %class.SkSTArray.13** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 24
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 4294967294
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds i8, i8* %5, i64 16
  %13 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 5
  %14 = load i32, i32* %13, align 8
  %15 = bitcast i8* %12 to %struct.GrVertexChunk**
  %16 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %15, align 8
  %17 = lshr i64 %8, 1
  %18 = and i64 %17, 2147483647
  %19 = add nsw i64 %18, -1
  %20 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %16, i64 %19, i32 1
  store i32 %14, i32* %20, align 8
  %21 = load i8*, i8** %4, align 8
  br label %22

22:                                               ; preds = %11, %2
  %23 = phi i8* [ %21, %11 ], [ %5, %2 ]
  %24 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 5
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %23, i64 16
  %26 = bitcast i8* %25 to %class.SkTArray.15*
  tail call void @_ZN8SkTArrayI13GrVertexChunkLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.15* %26, i32 1, i32 1) #12
  %27 = bitcast i8* %25 to %struct.GrVertexChunk**
  %28 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %27, align 8
  %29 = getelementptr inbounds i8, i8* %23, i64 24
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = lshr i64 %31, 1
  %33 = and i64 %32, 2147483647
  %34 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %28, i64 %33
  %35 = add i64 %31, 2
  %36 = and i64 %35, 4294967294
  %37 = and i64 %31, -4294967295
  %38 = or i64 %36, %37
  store i64 %38, i64* %30, align 8
  %39 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %34, i64 0, i32 0, i32 0
  store %class.GrBuffer* null, %class.GrBuffer** %39, align 8
  %40 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %28, i64 %33, i32 1
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = icmp sgt i32 %42, %1
  %44 = select i1 %43, i32 %42, i32 %1
  %45 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 0
  %46 = load %"class.GrMeshDrawOp::Target"*, %"class.GrMeshDrawOp::Target"** %45, align 8
  %47 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %34, i64 0, i32 0
  %50 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %28, i64 %33, i32 2
  %51 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 6
  %52 = bitcast %"class.GrMeshDrawOp::Target"* %46 to i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)***
  %53 = load i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)**, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)*** %52, align 8
  %54 = getelementptr inbounds i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)*, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)** %53, i64 5
  %55 = load i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)*, i8* (%"class.GrMeshDrawOp::Target"*, i64, i32, i32, %class.sk_sp.16*, i32*, i32*)** %54, align 8
  %56 = tail call i8* %55(%"class.GrMeshDrawOp::Target"* %46, i64 %48, i32 %44, i32 %44, %class.sk_sp.16* %49, i32* %50, i32* %51) #12
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr inbounds %class.GrVertexChunkBuilder, %class.GrVertexChunkBuilder* %0, i64 0, i32 4
  %59 = bitcast %struct.GrVertexWriter* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = icmp eq i8* %56, null
  br i1 %60, label %67, label %61

61:                                               ; preds = %22
  %62 = load %class.GrBuffer*, %class.GrBuffer** %39, align 8
  %63 = icmp eq %class.GrBuffer* %62, null
  br i1 %63, label %67, label %64

64:                                               ; preds = %61
  %65 = load i32, i32* %51, align 4
  %66 = icmp slt i32 %65, %1
  br i1 %66, label %67, label %93

67:                                               ; preds = %61, %22, %64
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 94, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0)) #12
  %68 = load i8*, i8** %4, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 16
  %70 = bitcast i8* %69 to %class.SkTArray.15*
  %71 = getelementptr inbounds i8, i8* %68, i64 24
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = lshr i64 %73, 1
  %75 = and i64 %74, 2147483647
  %76 = add nuw nsw i64 %75, 4294967295
  %77 = shl nuw nsw i64 %76, 1
  %78 = and i64 %77, 4294967294
  %79 = and i64 %73, -4294967295
  %80 = or i64 %78, %79
  store i64 %80, i64* %72, align 8
  %81 = bitcast i8* %69 to %struct.GrVertexChunk**
  %82 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %81, align 8
  %83 = and i64 %76, 2147483647
  %84 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %82, i64 %83, i32 0, i32 0
  %85 = load %class.GrBuffer*, %class.GrBuffer** %84, align 8
  %86 = icmp eq %class.GrBuffer* %85, null
  br i1 %86, label %92, label %87

87:                                               ; preds = %67
  %88 = bitcast %class.GrBuffer* %85 to void (%class.GrBuffer*)***
  %89 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %88, align 8
  %90 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %89, i64 3
  %91 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %90, align 8
  tail call void %91(%class.GrBuffer* nonnull %85) #12
  br label %92

92:                                               ; preds = %67, %87
  tail call void @_ZN8SkTArrayI13GrVertexChunkLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.15* %70, i32 0, i32 2) #12
  store i32 0, i32* %51, align 4
  br label %96

93:                                               ; preds = %64
  %94 = load i32, i32* %41, align 8
  %95 = shl nsw i32 %94, 1
  store i32 %95, i32* %41, align 8
  br label %96

96:                                               ; preds = %93, %92
  %97 = phi i1 [ false, %92 ], [ true, %93 ]
  ret i1 %97
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI13GrVertexChunkLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.15*, i32, i32) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.15, %class.SkTArray.15* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %92

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %92, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 16) #12
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %80, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.15, %class.SkTArray.15* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %74, %48
  %51 = phi i64 [ 0, %48 ], [ %75, %74 ]
  %52 = shl nuw nsw i64 %51, 4
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %49, align 8
  %55 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %54, i64 %51
  %56 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %55, i64 0, i32 0, i32 0
  %57 = bitcast %struct.GrVertexChunk* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %class.GrBuffer* null, %class.GrBuffer** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds i8, i8* %53, i64 8
  %61 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %54, i64 %51, i32 1
  %62 = bitcast i32* %61 to i64*
  %63 = bitcast i8* %60 to i64*
  %64 = load i64, i64* %62, align 8
  store i64 %64, i64* %63, align 8
  %65 = load %struct.GrVertexChunk*, %struct.GrVertexChunk** %49, align 8
  %66 = getelementptr inbounds %struct.GrVertexChunk, %struct.GrVertexChunk* %65, i64 %51, i32 0, i32 0
  %67 = load %class.GrBuffer*, %class.GrBuffer** %66, align 8
  %68 = icmp eq %class.GrBuffer* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %50
  %70 = bitcast %class.GrBuffer* %67 to void (%class.GrBuffer*)***
  %71 = load void (%class.GrBuffer*)**, void (%class.GrBuffer*)*** %70, align 8
  %72 = getelementptr inbounds void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %71, i64 3
  %73 = load void (%class.GrBuffer*)*, void (%class.GrBuffer*)** %72, align 8
  tail call void %73(%class.GrBuffer* nonnull %67) #12
  br label %74

74:                                               ; preds = %69, %50
  %75 = add nuw nsw i64 %51, 1
  %76 = load i64, i64* %4, align 8
  %77 = lshr i64 %76, 1
  %78 = and i64 %77, 2147483647
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %50, label %80

80:                                               ; preds = %74, %35
  %81 = phi i64 [ %45, %35 ], [ %76, %74 ]
  %82 = and i64 %81, 1
  %83 = icmp eq i64 %82, 0
  %84 = bitcast %class.SkTArray.15* %0 to i8**
  br i1 %83, label %88, label %85

85:                                               ; preds = %80
  %86 = load i8*, i8** %84, align 8
  tail call void @_Z7sk_freePv(i8* %86) #12
  %87 = load i64, i64* %4, align 8
  br label %88

88:                                               ; preds = %80, %85
  %89 = phi i64 [ %87, %85 ], [ %81, %80 ]
  store i8* %44, i8** %84, align 8
  %90 = and i64 %89, -4294967298
  %91 = or i64 %90, 1
  store i64 %91, i64* %4, align 8
  br label %92

92:                                               ; preds = %88, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

declare void @_Z16SkChopQuadAtHalfPK7SkPointPS_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrCullTest11areVisible3EPK7SkPoint(%class.GrCullTest*, %struct.SkPoint*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = insertelement <4 x float> undef, float %5, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = fmul <4 x float> %9, %7
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %12 = load float, float* %11, align 4
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul <4 x float> %9, %14
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fmul <4 x float> %9, %19
  %21 = bitcast %class.GrCullTest* %0 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 16
  %23 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 0, i32 1
  %24 = bitcast %"struct.skvx::Vec.17"* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 8
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = insertelement <2 x float> undef, float %27, i32 0
  %29 = shufflevector <2 x float> %22, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %31 = shufflevector <4 x float> %29, <4 x float> %30, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %32 = shufflevector <2 x float> %28, <2 x float> undef, <4 x i32> zeroinitializer
  %33 = fmul <4 x float> %31, %32
  %34 = fadd <4 x float> %10, %33
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %36 = load float, float* %35, align 4
  %37 = insertelement <2 x float> undef, float %36, i32 0
  %38 = shufflevector <2 x float> %37, <2 x float> undef, <4 x i32> zeroinitializer
  %39 = fmul <4 x float> %31, %38
  %40 = fadd <4 x float> %15, %39
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %42 = load float, float* %41, align 4
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <4 x i32> zeroinitializer
  %45 = fmul <4 x float> %31, %44
  %46 = fadd <4 x float> %20, %45
  %47 = fcmp olt <4 x float> %34, %40
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = extractelement <2 x i64> %49, i32 0
  %51 = extractelement <2 x i64> %49, i32 1
  %52 = bitcast i64 %50 to <2 x i32>
  %53 = shufflevector <2 x i32> %52, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = bitcast i64 %51 to <2 x i32>
  %55 = shufflevector <2 x i32> %54, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %56 = shufflevector <4 x i32> %53, <4 x i32> %55, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %57 = bitcast <4 x float> %40 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = bitcast i64 %58 to <2 x i32>
  %60 = shufflevector <4 x float> %40, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %61 = bitcast <2 x float> %60 to <2 x i32>
  %62 = shufflevector <2 x i32> %59, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i32> %61, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %64 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %65 = and <4 x i32> %56, %64
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = extractelement <2 x i64> %66, i32 0
  %68 = extractelement <2 x i64> %66, i32 1
  %69 = bitcast i64 %67 to <2 x i32>
  %70 = shufflevector <2 x i32> %69, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %71 = bitcast i64 %68 to <2 x i32>
  %72 = shufflevector <2 x i32> %71, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %73 = shufflevector <4 x i32> %70, <4 x i32> %72, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %74 = bitcast <4 x i32> %56 to <2 x i64>
  %75 = xor <2 x i64> %74, <i64 -1, i64 -1>
  %76 = extractelement <2 x i64> %75, i32 0
  %77 = extractelement <2 x i64> %75, i32 1
  %78 = bitcast i64 %76 to <2 x i32>
  %79 = shufflevector <2 x i32> %78, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = bitcast i64 %77 to <2 x i32>
  %81 = shufflevector <2 x i32> %80, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %82 = shufflevector <4 x i32> %79, <4 x i32> %81, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %83 = bitcast <4 x float> %34 to <2 x i64>
  %84 = extractelement <2 x i64> %83, i32 0
  %85 = bitcast i64 %84 to <2 x i32>
  %86 = shufflevector <4 x float> %34, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast <2 x float> %86 to <2 x i32>
  %88 = shufflevector <2 x i32> %85, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <2 x i32> %87, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %90 = shufflevector <4 x i32> %88, <4 x i32> %89, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %91 = and <4 x i32> %82, %90
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = extractelement <2 x i64> %92, i32 0
  %94 = extractelement <2 x i64> %92, i32 1
  %95 = bitcast i64 %93 to <2 x i32>
  %96 = shufflevector <2 x i32> %95, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = bitcast i64 %94 to <2 x i32>
  %98 = shufflevector <2 x i32> %97, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %99 = shufflevector <4 x i32> %96, <4 x i32> %98, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %100 = or <4 x i32> %99, %73
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = extractelement <2 x i64> %101, i32 1
  %104 = bitcast i64 %102 to <2 x float>
  %105 = bitcast i64 %103 to <2 x float>
  %106 = shufflevector <2 x float> %104, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x float> %105, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %108 = shufflevector <4 x float> %106, <4 x float> %107, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %109 = fcmp olt <4 x float> %108, %46
  %110 = sext <4 x i1> %109 to <4 x i32>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = extractelement <2 x i64> %111, i32 0
  %113 = extractelement <2 x i64> %111, i32 1
  %114 = bitcast i64 %112 to <2 x i32>
  %115 = shufflevector <2 x i32> %114, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = bitcast i64 %113 to <2 x i32>
  %117 = shufflevector <2 x i32> %116, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %118 = shufflevector <4 x i32> %115, <4 x i32> %117, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %119 = bitcast <4 x float> %46 to <2 x i64>
  %120 = extractelement <2 x i64> %119, i32 0
  %121 = bitcast i64 %120 to <2 x i32>
  %122 = shufflevector <4 x float> %46, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %123 = bitcast <2 x float> %122 to <2 x i32>
  %124 = shufflevector <2 x i32> %121, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %125 = shufflevector <2 x i32> %123, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %126 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %127 = and <4 x i32> %118, %126
  %128 = bitcast <4 x i32> %127 to <2 x i64>
  %129 = extractelement <2 x i64> %128, i32 0
  %130 = extractelement <2 x i64> %128, i32 1
  %131 = bitcast i64 %129 to <2 x i32>
  %132 = shufflevector <2 x i32> %131, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = bitcast i64 %130 to <2 x i32>
  %134 = shufflevector <2 x i32> %133, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %135 = shufflevector <4 x i32> %132, <4 x i32> %134, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %136 = bitcast <4 x i32> %118 to <2 x i64>
  %137 = xor <2 x i64> %136, <i64 -1, i64 -1>
  %138 = extractelement <2 x i64> %137, i32 0
  %139 = extractelement <2 x i64> %137, i32 1
  %140 = bitcast i64 %138 to <2 x i32>
  %141 = shufflevector <2 x i32> %140, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %142 = bitcast i64 %139 to <2 x i32>
  %143 = shufflevector <2 x i32> %142, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %144 = shufflevector <4 x i32> %141, <4 x i32> %143, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %145 = bitcast <4 x float> %108 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = bitcast i64 %146 to <2 x i32>
  %148 = bitcast i64 %103 to <2 x i32>
  %149 = shufflevector <2 x i32> %147, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %151 = shufflevector <4 x i32> %149, <4 x i32> %150, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %152 = and <4 x i32> %144, %151
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = extractelement <2 x i64> %153, i32 0
  %155 = extractelement <2 x i64> %153, i32 1
  %156 = bitcast i64 %154 to <2 x i32>
  %157 = shufflevector <2 x i32> %156, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = bitcast i64 %155 to <2 x i32>
  %159 = shufflevector <2 x i32> %158, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %160 = shufflevector <4 x i32> %157, <4 x i32> %159, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %161 = or <4 x i32> %160, %135
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  %164 = extractelement <2 x i64> %162, i32 1
  %165 = bitcast i64 %163 to <2 x float>
  %166 = bitcast i64 %164 to <2 x float>
  %167 = shufflevector <2 x float> %165, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %168 = shufflevector <2 x float> %166, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %169 = shufflevector <4 x float> %167, <4 x float> %168, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %170 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 2
  %171 = bitcast %"struct.skvx::Vec"* %170 to <4 x float>*
  %172 = load <4 x float>, <4 x float>* %171, align 16
  %173 = fcmp olt <4 x float> %172, %169
  %174 = sext <4 x i1> %173 to <4 x i32>
  %175 = bitcast <4 x i32> %174 to <2 x i64>
  %176 = extractelement <2 x i64> %175, i32 0
  %177 = extractelement <2 x i64> %175, i32 1
  %178 = trunc i64 %176 to i32
  %179 = icmp ne i32 %178, 0
  %180 = icmp ugt i64 %176, 4294967295
  %181 = and i1 %180, %179
  br i1 %181, label %182, label %187

182:                                              ; preds = %2
  %183 = trunc i64 %177 to i32
  %184 = icmp ne i32 %183, 0
  %185 = icmp ugt i64 %177, 4294967295
  %186 = and i1 %185, %184
  br label %187

187:                                              ; preds = %2, %182
  %188 = phi i1 [ false, %2 ], [ %186, %182 ]
  ret i1 %188
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic*, float, %struct.SkConic*) local_unnamed_addr #3

declare void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrCullTest11areVisible4EPK7SkPoint(%class.GrCullTest*, %struct.SkPoint*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = insertelement <4 x float> undef, float %5, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = bitcast %"struct.skvx::Vec"* %3 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = fmul <4 x float> %9, %7
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %12 = load float, float* %11, align 4
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul <4 x float> %9, %14
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fmul <4 x float> %9, %19
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %9, %24
  %26 = bitcast %class.GrCullTest* %0 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 16
  %28 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 0, i32 1
  %29 = bitcast %"struct.skvx::Vec.17"* %28 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 8
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %32 = load float, float* %31, align 4
  %33 = insertelement <2 x float> undef, float %32, i32 0
  %34 = shufflevector <2 x float> %27, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <2 x float> %30, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %36 = shufflevector <4 x float> %34, <4 x float> %35, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %37 = shufflevector <2 x float> %33, <2 x float> undef, <4 x i32> zeroinitializer
  %38 = fmul <4 x float> %36, %37
  %39 = fadd <4 x float> %10, %38
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %41 = load float, float* %40, align 4
  %42 = insertelement <2 x float> undef, float %41, i32 0
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <4 x i32> zeroinitializer
  %44 = fmul <4 x float> %36, %43
  %45 = fadd <4 x float> %15, %44
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %47 = load float, float* %46, align 4
  %48 = insertelement <2 x float> undef, float %47, i32 0
  %49 = shufflevector <2 x float> %48, <2 x float> undef, <4 x i32> zeroinitializer
  %50 = fmul <4 x float> %36, %49
  %51 = fadd <4 x float> %20, %50
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %53 = load float, float* %52, align 4
  %54 = insertelement <2 x float> undef, float %53, i32 0
  %55 = shufflevector <2 x float> %54, <2 x float> undef, <4 x i32> zeroinitializer
  %56 = fmul <4 x float> %36, %55
  %57 = fadd <4 x float> %25, %56
  %58 = fcmp olt <4 x float> %39, %45
  %59 = sext <4 x i1> %58 to <4 x i32>
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = extractelement <2 x i64> %60, i32 0
  %62 = extractelement <2 x i64> %60, i32 1
  %63 = bitcast i64 %61 to <2 x i32>
  %64 = shufflevector <2 x i32> %63, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = bitcast i64 %62 to <2 x i32>
  %66 = shufflevector <2 x i32> %65, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %67 = shufflevector <4 x i32> %64, <4 x i32> %66, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %68 = bitcast <4 x float> %45 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = bitcast i64 %69 to <2 x i32>
  %71 = shufflevector <4 x float> %45, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %72 = bitcast <2 x float> %71 to <2 x i32>
  %73 = shufflevector <2 x i32> %70, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = shufflevector <2 x i32> %72, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %75 = shufflevector <4 x i32> %73, <4 x i32> %74, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %76 = and <4 x i32> %67, %75
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = extractelement <2 x i64> %77, i32 1
  %80 = bitcast i64 %78 to <2 x i32>
  %81 = shufflevector <2 x i32> %80, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = bitcast i64 %79 to <2 x i32>
  %83 = shufflevector <2 x i32> %82, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %84 = shufflevector <4 x i32> %81, <4 x i32> %83, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %85 = bitcast <4 x i32> %67 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -1, i64 -1>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = extractelement <2 x i64> %86, i32 1
  %89 = bitcast i64 %87 to <2 x i32>
  %90 = shufflevector <2 x i32> %89, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = bitcast i64 %88 to <2 x i32>
  %92 = shufflevector <2 x i32> %91, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %93 = shufflevector <4 x i32> %90, <4 x i32> %92, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %94 = bitcast <4 x float> %39 to <2 x i64>
  %95 = extractelement <2 x i64> %94, i32 0
  %96 = bitcast i64 %95 to <2 x i32>
  %97 = shufflevector <4 x float> %39, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %98 = bitcast <2 x float> %97 to <2 x i32>
  %99 = shufflevector <2 x i32> %96, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i32> %98, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %101 = shufflevector <4 x i32> %99, <4 x i32> %100, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %102 = and <4 x i32> %93, %101
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = extractelement <2 x i64> %103, i32 0
  %105 = extractelement <2 x i64> %103, i32 1
  %106 = bitcast i64 %104 to <2 x i32>
  %107 = shufflevector <2 x i32> %106, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = bitcast i64 %105 to <2 x i32>
  %109 = shufflevector <2 x i32> %108, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %110 = shufflevector <4 x i32> %107, <4 x i32> %109, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %111 = or <4 x i32> %110, %84
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = extractelement <2 x i64> %112, i32 1
  %115 = bitcast i64 %113 to <2 x float>
  %116 = bitcast i64 %114 to <2 x float>
  %117 = shufflevector <2 x float> %115, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <2 x float> %116, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %119 = shufflevector <4 x float> %117, <4 x float> %118, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %120 = fcmp olt <4 x float> %51, %57
  %121 = sext <4 x i1> %120 to <4 x i32>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = extractelement <2 x i64> %122, i32 0
  %124 = extractelement <2 x i64> %122, i32 1
  %125 = bitcast i64 %123 to <2 x i32>
  %126 = shufflevector <2 x i32> %125, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = bitcast i64 %124 to <2 x i32>
  %128 = shufflevector <2 x i32> %127, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %129 = shufflevector <4 x i32> %126, <4 x i32> %128, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %130 = bitcast <4 x float> %57 to <2 x i64>
  %131 = extractelement <2 x i64> %130, i32 0
  %132 = bitcast i64 %131 to <2 x i32>
  %133 = shufflevector <4 x float> %57, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %134 = bitcast <2 x float> %133 to <2 x i32>
  %135 = shufflevector <2 x i32> %132, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i32> %134, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %137 = shufflevector <4 x i32> %135, <4 x i32> %136, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %138 = and <4 x i32> %129, %137
  %139 = bitcast <4 x i32> %138 to <2 x i64>
  %140 = extractelement <2 x i64> %139, i32 0
  %141 = extractelement <2 x i64> %139, i32 1
  %142 = bitcast i64 %140 to <2 x i32>
  %143 = shufflevector <2 x i32> %142, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %144 = bitcast i64 %141 to <2 x i32>
  %145 = shufflevector <2 x i32> %144, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %146 = shufflevector <4 x i32> %143, <4 x i32> %145, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %147 = bitcast <4 x i32> %129 to <2 x i64>
  %148 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %149 = extractelement <2 x i64> %148, i32 0
  %150 = extractelement <2 x i64> %148, i32 1
  %151 = bitcast i64 %149 to <2 x i32>
  %152 = shufflevector <2 x i32> %151, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %153 = bitcast i64 %150 to <2 x i32>
  %154 = shufflevector <2 x i32> %153, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %155 = shufflevector <4 x i32> %152, <4 x i32> %154, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %156 = bitcast <4 x float> %51 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = bitcast i64 %157 to <2 x i32>
  %159 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %160 = bitcast <2 x float> %159 to <2 x i32>
  %161 = shufflevector <2 x i32> %158, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <2 x i32> %160, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %164 = and <4 x i32> %155, %163
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = extractelement <2 x i64> %165, i32 0
  %167 = extractelement <2 x i64> %165, i32 1
  %168 = bitcast i64 %166 to <2 x i32>
  %169 = shufflevector <2 x i32> %168, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %170 = bitcast i64 %167 to <2 x i32>
  %171 = shufflevector <2 x i32> %170, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %172 = shufflevector <4 x i32> %169, <4 x i32> %171, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %173 = or <4 x i32> %172, %146
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = extractelement <2 x i64> %174, i32 0
  %176 = extractelement <2 x i64> %174, i32 1
  %177 = bitcast i64 %175 to <2 x float>
  %178 = bitcast i64 %176 to <2 x float>
  %179 = shufflevector <2 x float> %177, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x float> %178, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %181 = shufflevector <4 x float> %179, <4 x float> %180, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %182 = fcmp olt <4 x float> %119, %181
  %183 = sext <4 x i1> %182 to <4 x i32>
  %184 = bitcast <4 x i32> %183 to <2 x i64>
  %185 = extractelement <2 x i64> %184, i32 0
  %186 = extractelement <2 x i64> %184, i32 1
  %187 = bitcast i64 %185 to <2 x i32>
  %188 = shufflevector <2 x i32> %187, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = bitcast i64 %186 to <2 x i32>
  %190 = shufflevector <2 x i32> %189, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %191 = shufflevector <4 x i32> %188, <4 x i32> %190, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %192 = bitcast <4 x float> %181 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = bitcast i64 %193 to <2 x i32>
  %195 = bitcast i64 %176 to <2 x i32>
  %196 = shufflevector <2 x i32> %194, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %197 = shufflevector <2 x i32> %195, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %198 = shufflevector <4 x i32> %196, <4 x i32> %197, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %199 = and <4 x i32> %191, %198
  %200 = bitcast <4 x i32> %199 to <2 x i64>
  %201 = extractelement <2 x i64> %200, i32 0
  %202 = extractelement <2 x i64> %200, i32 1
  %203 = bitcast i64 %201 to <2 x i32>
  %204 = shufflevector <2 x i32> %203, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %205 = bitcast i64 %202 to <2 x i32>
  %206 = shufflevector <2 x i32> %205, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %207 = shufflevector <4 x i32> %204, <4 x i32> %206, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %208 = bitcast <4 x i32> %191 to <2 x i64>
  %209 = xor <2 x i64> %208, <i64 -1, i64 -1>
  %210 = extractelement <2 x i64> %209, i32 0
  %211 = extractelement <2 x i64> %209, i32 1
  %212 = bitcast i64 %210 to <2 x i32>
  %213 = shufflevector <2 x i32> %212, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %214 = bitcast i64 %211 to <2 x i32>
  %215 = shufflevector <2 x i32> %214, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %216 = shufflevector <4 x i32> %213, <4 x i32> %215, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %217 = bitcast <4 x float> %119 to <2 x i64>
  %218 = extractelement <2 x i64> %217, i32 0
  %219 = bitcast i64 %218 to <2 x i32>
  %220 = bitcast i64 %114 to <2 x i32>
  %221 = shufflevector <2 x i32> %219, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <2 x i32> %220, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %223 = shufflevector <4 x i32> %221, <4 x i32> %222, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %224 = and <4 x i32> %216, %223
  %225 = bitcast <4 x i32> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  %227 = extractelement <2 x i64> %225, i32 1
  %228 = bitcast i64 %226 to <2 x i32>
  %229 = shufflevector <2 x i32> %228, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = bitcast i64 %227 to <2 x i32>
  %231 = shufflevector <2 x i32> %230, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %232 = shufflevector <4 x i32> %229, <4 x i32> %231, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %233 = or <4 x i32> %232, %207
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = extractelement <2 x i64> %234, i32 0
  %236 = extractelement <2 x i64> %234, i32 1
  %237 = bitcast i64 %235 to <2 x float>
  %238 = bitcast i64 %236 to <2 x float>
  %239 = shufflevector <2 x float> %237, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %240 = shufflevector <2 x float> %238, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %241 = shufflevector <4 x float> %239, <4 x float> %240, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %242 = getelementptr inbounds %class.GrCullTest, %class.GrCullTest* %0, i64 0, i32 2
  %243 = bitcast %"struct.skvx::Vec"* %242 to <4 x float>*
  %244 = load <4 x float>, <4 x float>* %243, align 16
  %245 = fcmp olt <4 x float> %244, %241
  %246 = sext <4 x i1> %245 to <4 x i32>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = extractelement <2 x i64> %247, i32 0
  %249 = extractelement <2 x i64> %247, i32 1
  %250 = trunc i64 %248 to i32
  %251 = icmp ne i32 %250, 0
  %252 = icmp ugt i64 %248, 4294967295
  %253 = and i1 %252, %251
  br i1 %253, label %254, label %259

254:                                              ; preds = %2
  %255 = trunc i64 %249 to i32
  %256 = icmp ne i32 %255, 0
  %257 = icmp ugt i64 %249, 4294967295
  %258 = and i1 %257, %256
  br label %259

259:                                              ; preds = %2, %254
  %260 = phi i1 [ false, %2 ], [ %258, %254 ]
  ret i1 %260
}

declare void @_ZN15GrOpsRenderPass11bindBuffersE5sk_spIK8GrBufferES3_S3_18GrPrimitiveRestart(%class.GrOpsRenderPass*, %class.sk_sp.16*, %class.sk_sp.16*, %class.sk_sp.16*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN15GrOpsRenderPass13drawInstancedEiiii(%class.GrOpsRenderPass*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStrokeTessellatorD2Ev(%class.GrStrokeTessellator*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %class.GrStrokeTessellator* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV19GrStrokeTessellator, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeTessellator, %class.GrStrokeTessellator* %0, i64 0, i32 1, i32 6, i32 0, i32 0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrStrokeTessellator, %class.GrStrokeTessellator* %0, i64 0, i32 1, i32 6, i32 0, i32 0, i64 80
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #12
  br label %12

12:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrStrokeTessellatorD0Ev(%class.GrStrokeTessellator*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!5 = distinct !{!5, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!6 = distinct !{!6, !7, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!7 = distinct !{!7, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!8 = !{!9, !4, !6}
!9 = distinct !{!9, !10, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!11 = !{!12, !14}
!12 = distinct !{!12, !13, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!13 = distinct !{!13, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!14 = distinct !{!14, !15, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!15 = distinct !{!15, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!16 = !{!17, !12, !14}
!17 = distinct !{!17, !18, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!18 = distinct !{!18, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!19 = !{!20, !22}
!20 = distinct !{!20, !21, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!21 = distinct !{!21, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!22 = distinct !{!22, !23, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!23 = distinct !{!23, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!24 = !{!25, !20, !22}
!25 = distinct !{!25, !26, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!26 = distinct !{!26, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!27 = !{!28, !30}
!28 = distinct !{!28, !29, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!29 = distinct !{!29, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!30 = distinct !{!30, !31, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!31 = distinct !{!31, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!32 = !{!33, !28, !30}
!33 = distinct !{!33, !34, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!34 = distinct !{!34, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!35 = !{!36, !38}
!36 = distinct !{!36, !37, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!37 = distinct !{!37, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!38 = distinct !{!38, !39, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!39 = distinct !{!39, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!40 = !{!41, !36, !38}
!41 = distinct !{!41, !42, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!42 = distinct !{!42, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!43 = !{!44, !46}
!44 = distinct !{!44, !45, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!45 = distinct !{!45, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!46 = distinct !{!46, !47, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!47 = distinct !{!47, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!48 = !{!49, !44, !46}
!49 = distinct !{!49, !50, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!50 = distinct !{!50, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!51 = !{!52, !54}
!52 = distinct !{!52, !53, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!53 = distinct !{!53, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!54 = distinct !{!54, !55, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!55 = distinct !{!55, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!56 = !{!57, !52, !54}
!57 = distinct !{!57, !58, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!58 = distinct !{!58, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!59 = !{!60, !62}
!60 = distinct !{!60, !61, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!61 = distinct !{!61, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!62 = distinct !{!62, !63, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!63 = distinct !{!63, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!64 = !{!65, !60, !62}
!65 = distinct !{!65, !66, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!66 = distinct !{!66, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!67 = !{!68, !70}
!68 = distinct !{!68, !69, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!69 = distinct !{!69, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!70 = distinct !{!70, !71, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!71 = distinct !{!71, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!72 = !{!73, !68, !70}
!73 = distinct !{!73, !74, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!74 = distinct !{!74, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!75 = !{!76, !78}
!76 = distinct !{!76, !77, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!77 = distinct !{!77, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!78 = distinct !{!78, !79, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!79 = distinct !{!79, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!80 = !{!81, !76, !78}
!81 = distinct !{!81, !82, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!82 = distinct !{!82, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!83 = !{!84, !86}
!84 = distinct !{!84, !85, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!85 = distinct !{!85, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!86 = distinct !{!86, !87, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!87 = distinct !{!87, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!88 = !{!89, !84, !86}
!89 = distinct !{!89, !90, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!90 = distinct !{!90, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!91 = !{!92, !94}
!92 = distinct !{!92, !93, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!93 = distinct !{!93, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!94 = distinct !{!94, !95, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!95 = distinct !{!95, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!96 = !{!97, !92, !94}
!97 = distinct !{!97, !98, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!98 = distinct !{!98, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!99 = !{!100, !102}
!100 = distinct !{!100, !101, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!101 = distinct !{!101, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!102 = distinct !{!102, !103, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!103 = distinct !{!103, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!104 = !{!105, !100, !102}
!105 = distinct !{!105, !106, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!106 = distinct !{!106, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!107 = !{!108, !110}
!108 = distinct !{!108, !109, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!109 = distinct !{!109, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!110 = distinct !{!110, !111, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!111 = distinct !{!111, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!112 = !{!113, !108, !110}
!113 = distinct !{!113, !114, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!114 = distinct !{!114, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!115 = !{!116, !118}
!116 = distinct !{!116, !117, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!117 = distinct !{!117, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!118 = distinct !{!118, !119, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!119 = distinct !{!119, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!120 = !{!121, !116, !118}
!121 = distinct !{!121, !122, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!122 = distinct !{!122, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!123 = !{!124}
!124 = distinct !{!124, !125, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!125 = distinct !{!125, !"_ZNK6SkPath9RangeIterdeEv"}
!126 = !{!127, !129}
!127 = distinct !{!127, !128, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!128 = distinct !{!128, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!129 = distinct !{!129, !130, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!130 = distinct !{!130, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!131 = !{!132, !127, !129}
!132 = distinct !{!132, !133, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!133 = distinct !{!133, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!134 = !{!135, !137}
!135 = distinct !{!135, !136, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!136 = distinct !{!136, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!137 = distinct !{!137, !138, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!138 = distinct !{!138, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!139 = !{!140, !135, !137}
!140 = distinct !{!140, !141, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!141 = distinct !{!141, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
!142 = !{!143, !145}
!143 = distinct !{!143, !144, !"_ZN20GrVertexChunkBuilder14appendVerticesEi: argument 0"}
!144 = distinct !{!144, !"_ZN20GrVertexChunkBuilder14appendVerticesEi"}
!145 = distinct !{!145, !146, !"_ZN20GrVertexChunkBuilder12appendVertexEv: argument 0"}
!146 = distinct !{!146, !"_ZN20GrVertexChunkBuilder12appendVertexEv"}
!147 = !{!148, !143, !145}
!148 = distinct !{!148, !149, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_: argument 0"}
!149 = distinct !{!149, !"_ZNSt3__18exchangeI14GrVertexWriterS1_EET_RS2_OT0_"}
