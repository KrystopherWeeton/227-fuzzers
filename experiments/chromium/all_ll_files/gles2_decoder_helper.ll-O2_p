; ModuleID = '../../media/gpu/gles2_decoder_helper.cc'
source_filename = "../../media/gpu/gles2_decoder_helper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadLocalPointer" = type { %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.media::GLES2DecoderHelper" = type { i32 (...)** }
%"class.gpu::DecoderContext" = type { %"class.gpu::AsyncAPIInterface", %"class.gpu::GLContextVirtualDelegate" }
%"class.gpu::AsyncAPIInterface" = type { i32 (...)** }
%"class.gpu::GLContextVirtualDelegate" = type { i32 (...)** }
%"class.gpu::gles2::ContextGroup" = type { %"class.base::RefCounted", [4 x i8], %"struct.gpu::GpuPreferences", %"class.gpu::MailboxManager"*, %"class.std::__1::unique_ptr.22", %"class.gpu::gles2::ShaderTranslatorCache"*, %"class.gpu::gles2::FramebufferCompletenessCache"*, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.gpu::gles2::ProgramCache"*, %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %class.scoped_refptr, %"class.gpu::gles2::ImageManager"*, %"class.gpu::ImageFactory"*, %"class.std::__1::vector.112", %"class.std::__1::unordered_map", i8, %"class.std::__1::unique_ptr.144", %"class.gpu::PassthroughDiscardableManager"*, %"class.gl::ProgressReporter"*, %"struct.gpu::GpuFeatureInfo", %"class.gpu::ServiceDiscardableManager"*, %"class.std::__1::unique_ptr.164", %"class.gpu::SharedImageManager"* }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.gpu::GpuPreferences" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, [7 x i8], %"class.std::__1::vector", i8, i8, i8, i8, i8, [3 x i8], i32, i32, i8, i8, i8, i8, i32, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.10", %"class.std::__1::vector.10", i8, i8, [2 x i8], i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.gfx::BufferUsageAndFormat"*, %"struct.gfx::BufferUsageAndFormat"*, %"class.std::__1::__compressed_pair.7" }
%"struct.gfx::BufferUsageAndFormat" = type { i32, i32 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.gfx::BufferUsageAndFormat"* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::basic_string"* }
%"class.gpu::MailboxManager" = type { i32 (...)** }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.gpu::MemoryTracker"* }
%"class.gpu::MemoryTracker" = type opaque
%"class.gpu::gles2::ShaderTranslatorCache" = type { %"class.gpu::gles2::ShaderTranslator::DestructionObserver", %"struct.gpu::GpuPreferences", %"class.std::__1::map" }
%"class.gpu::gles2::ShaderTranslator::DestructionObserver" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.gpu::gles2::FramebufferCompletenessCache" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.36", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.51", [4 x i8] }>
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38", %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { float }
%"class.gpu::gles2::ProgramCache" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.gpu::gles2::BufferManager"* }
%"class.gpu::gles2::BufferManager" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.gpu::gles2::RenderbufferManager"* }
%"class.gpu::gles2::RenderbufferManager" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.gpu::gles2::TextureManager"* }
%"class.gpu::gles2::TextureManager" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.gpu::gles2::ProgramManager"* }
%"class.gpu::gles2::ProgramManager" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.gpu::gles2::ShaderManager"* }
%"class.gpu::gles2::ShaderManager" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.gpu::gles2::SamplerManager"* }
%"class.gpu::gles2::SamplerManager" = type opaque
%class.scoped_refptr = type { %"class.gpu::gles2::FeatureInfo"* }
%"class.gpu::gles2::FeatureInfo" = type { %"class.base::RefCounted.91", i8, [3 x i8], %"struct.gpu::gles2::Validators", %"struct.gpu::gles2::DisallowedFeatures", i32, i8, %"class.base::internal::flat_tree", %"struct.gpu::gles2::FeatureInfo::FeatureFlags", %"class.gpu::GpuDriverBugWorkarounds", i8, i8, i8, i8, i8, i8, %"class.std::__1::unique_ptr.106" }
%"class.base::RefCounted.91" = type { %"class.base::subtle::RefCountedBase" }
%"struct.gpu::gles2::Validators" = type <{ %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::BackbufferAttachmentValidator", %"class.gpu::gles2::Validators::BlitFilterValidator", %"class.gpu::gles2::Validators::BufferModeValidator", %"class.gpu::gles2::Validators::BufferParameterValidator", %"class.gpu::gles2::Validators::BufferParameter64Validator", %"class.gpu::gles2::Validators::BufferTargetValidator", %"class.gpu::gles2::Validators::BufferUsageValidator", i8, %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::BufferfvValidator", %"class.gpu::gles2::Validators::BufferivValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::CmpFunctionValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::DrawModeValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::FaceModeValidator", %"class.gpu::gles2::Validators::FaceTypeValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::GetMaxIndexTypeValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::HintModeValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::IndexedBufferTargetValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::InternalFormatParameterValidator", %"class.gpu::gles2::Validators::MapBufferAccessValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::PixelStoreAlignmentValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::QueryObjectParameterValidator", %"class.gpu::gles2::Validators::QueryTargetValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::ResetStatusValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::ShaderPrecisionValidator", %"class.gpu::gles2::Validators::ShaderTypeValidator", %"class.gpu::gles2::Validators::SharedImageAccessModeValidator", [5 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::StencilOpValidator", %"class.gpu::gles2::Validators::StringTypeValidator", %"class.gpu::gles2::Validators::SwapBuffersFlagsValidator", [5 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::SyncParameterValidator", %"class.gpu::gles2::Validators::Texture3DTargetValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TextureCompareFuncValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TextureMagFilterModeValidator", %"class.gpu::gles2::Validators::TextureMinFilterModeValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TextureSrgbDecodeExtValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TextureSwizzleValidator", [7 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TextureUsageValidator", %"class.gpu::gles2::Validators::TextureWrapModeValidator", [6 x i8], %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::TransformFeedbackPrimitiveModeValidator", %"class.gpu::gles2::Validators::UniformBlockParameterValidator", %"class.gpu::gles2::Validators::UniformParameterValidator", %"class.gpu::gles2::Validators::VertexAttribITypeValidator", [4 x i8], %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::ValueValidator", %"class.gpu::gles2::Validators::WindowRectanglesModeValidator", [7 x i8] }>
%"class.gpu::gles2::Validators::BackbufferAttachmentValidator" = type { i8 }
%"class.gpu::gles2::Validators::BlitFilterValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferParameter64Validator" = type { i8 }
%"class.gpu::gles2::Validators::BufferTargetValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferUsageValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferfvValidator" = type { i8 }
%"class.gpu::gles2::Validators::BufferivValidator" = type { i8 }
%"class.gpu::gles2::Validators::CmpFunctionValidator" = type { i8 }
%"class.gpu::gles2::Validators::DrawModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::FaceModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::FaceTypeValidator" = type { i8 }
%"class.gpu::gles2::Validators::GetMaxIndexTypeValidator" = type { i8 }
%"class.gpu::gles2::Validators::HintModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::IndexedBufferTargetValidator" = type { i8 }
%"class.gpu::gles2::Validators::InternalFormatParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::MapBufferAccessValidator" = type { i8 }
%"class.gpu::gles2::Validators::PixelStoreAlignmentValidator" = type { i8 }
%"class.gpu::gles2::Validators::QueryObjectParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::QueryTargetValidator" = type { i8 }
%"class.gpu::gles2::Validators::ResetStatusValidator" = type { i8 }
%"class.gpu::gles2::Validators::ShaderPrecisionValidator" = type { i8 }
%"class.gpu::gles2::Validators::ShaderTypeValidator" = type { i8 }
%"class.gpu::gles2::Validators::SharedImageAccessModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::StencilOpValidator" = type { i8 }
%"class.gpu::gles2::Validators::StringTypeValidator" = type { i8 }
%"class.gpu::gles2::Validators::SwapBuffersFlagsValidator" = type { i8 }
%"class.gpu::gles2::Validators::SyncParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::Texture3DTargetValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureCompareFuncValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureMagFilterModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureMinFilterModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureSrgbDecodeExtValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureSwizzleValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureUsageValidator" = type { i8 }
%"class.gpu::gles2::Validators::TextureWrapModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::TransformFeedbackPrimitiveModeValidator" = type { i8 }
%"class.gpu::gles2::Validators::UniformBlockParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::UniformParameterValidator" = type { i8 }
%"class.gpu::gles2::Validators::VertexAttribITypeValidator" = type { i8 }
%"class.gpu::ValueValidator" = type { %"class.std::__1::vector.92" }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { i32*, i32*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { i32* }
%"class.gpu::gles2::Validators::WindowRectanglesModeValidator" = type { i8 }
%"struct.gpu::gles2::DisallowedFeatures" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.99" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.101" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.base::BasicStringPiece"* }
%"struct.gpu::gles2::FeatureInfo::FeatureFlags" = type <{ %"struct.gpu::GpuMemoryBufferFormatSet", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }>
%"struct.gpu::GpuMemoryBufferFormatSet" = type { i32 }
%"class.gpu::GpuDriverBugWorkarounds" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32 }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.gl::GLVersionInfo"* }
%"struct.gl::GLVersionInfo" = type opaque
%"class.gpu::gles2::ImageManager" = type opaque
%"class.gpu::ImageFactory" = type opaque
%"class.std::__1::vector.112" = type { %"class.std::__1::__vector_base.113" }
%"class.std::__1::__vector_base.113" = type { %"class.base::WeakPtr"*, %"class.base::WeakPtr"*, %"class.std::__1::__compressed_pair.114" }
%"class.base::WeakPtr" = type opaque
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.base::WeakPtr"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.119" }
%"class.std::__1::__hash_table.119" = type <{ %"class.std::__1::unique_ptr.120", %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.135", %"class.std::__1::__compressed_pair.139", [4 x i8] }>
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122", %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.std::__1::__hash_node_base.123"** }
%"struct.std::__1::__hash_node_base.123" = type { %"struct.std::__1::__hash_node_base.123"* }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.std::__1::__bucket_list_deallocator.125" }
%"class.std::__1::__bucket_list_deallocator.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"struct.std::__1::__hash_node_base.123" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.gpu::gles2::PassthroughResources"* }
%"struct.gpu::gles2::PassthroughResources" = type opaque
%"class.gpu::PassthroughDiscardableManager" = type opaque
%"class.gl::ProgressReporter" = type opaque
%"struct.gpu::GpuFeatureInfo" = type { [10 x i32], %"class.std::__1::vector.150", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.92", %"class.std::__1::vector.92", %"class.std::__1::vector.157" }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { i32*, i32*, %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { i32* }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { i32*, i32*, %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { i32* }
%"class.gpu::ServiceDiscardableManager" = type opaque
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.gpu::SharedImageRepresentationFactory"* }
%"class.gpu::SharedImageRepresentationFactory" = type opaque
%"class.gpu::SharedImageManager" = type opaque
%"class.media::GLES2DecoderHelperImpl" = type { %"class.media::GLES2DecoderHelper", %"class.gpu::DecoderContext"*, %"class.gpu::MailboxManager"* }
%"class.gpu::gles2::AbstractTexture" = type { i32 (...)** }
%"class.gl::ScopedTextureBinder" = type { %"class.gl::GLStateRestorer"*, i32, i32 }
%"class.gl::GLStateRestorer" = type { i32 (...)** }
%"class.gpu::TextureBase" = type { i32 (...)**, i32, i32, %"class.gpu::MailboxManager"* }
%"class.gl::GLApi" = type { i32 (...)** }
%"class.gl::GLContext" = type <{ i32 (...)**, %"class.base::RefCounted.176", [4 x i8], %"class.base::SupportsWeakPtr", %"struct.gl::GLWorkarounds", [6 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8], %"class.std::__1::unique_ptr.184", %"class.std::__1::unique_ptr.190", %"class.std::__1::unique_ptr.214", %"class.gl::RealGLApi"*, %class.scoped_refptr.220, %"class.gl::GLContext"*, i8, [7 x i8], %"class.std::__1::unique_ptr.231", %"class.std::__1::unique_ptr.106", i8, [7 x i8] }>
%"class.base::RefCounted.176" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::SupportsWeakPtr" = type { %"class.base::internal::WeakReferenceOwner" }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.177 }
%class.scoped_refptr.177 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.178" }
%"struct.std::__1::__atomic_base.178" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.179" }
%"struct.std::__1::atomic.179" = type { %"struct.std::__1::__atomic_base.180" }
%"struct.std::__1::__atomic_base.180" = type { %"struct.std::__1::__atomic_base.181" }
%"struct.std::__1::__atomic_base.181" = type { %"struct.std::__1::__cxx_atomic_impl.182" }
%"struct.std::__1::__cxx_atomic_impl.182" = type { %"struct.std::__1::__cxx_atomic_base_impl.183" }
%"struct.std::__1::__cxx_atomic_base_impl.183" = type { i8 }
%"struct.gl::GLWorkarounds" = type { i8, i8 }
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.gl::DriverGL"* }
%"struct.gl::DriverGL" = type <{ %"struct.gl::ProcsGL", %"struct.gl::ExtensionsGL", i8 }>
%"struct.gl::ProcsGL" = type { void (i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32, i32, i64, i32)*, void ()*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (float, float, float, float)*, void (double)*, void (float)*, void (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (%struct.__GLsync*, i32, i64)*, i32 (%struct.__GLsync*, i32, i64)*, void (i8, i8, i8, i8)*, void (i32, i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32*)*, i32 ()*, i32 (i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (%struct.__GLsync*)*, void (%struct.__GLsync*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (double, double)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, %struct.__GLsync* (i32, i32)*, %struct.__GLsync* (i32, i32)*, void ()*, void (i32)*, void (i32)*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, i32 (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8**)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32*, float*)*, i32 (i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i64*)*, void (i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32*, i8**)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, i8* (i32, i32)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i8**)*, void (i32, i32, i32, i32*, i8**)*, void (i32, i32)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (%struct.__GLsync*)*, i8 (%struct.__GLsync*)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, float*)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32, i32, i32*)*, void (float)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, i32*, i32, i8**, i32*, i32)*, void (i32, i32*, i32, i8**, i32*, i32*, i32*, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float)*, void ()*, void ()*, void (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, float*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i8*)*, void ()*, void (float, i8)*, void (i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, i8 (i32)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8**, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, i8 (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32*)* }
%struct.__GLsync = type opaque
%"struct.gl::ExtensionsGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.190" = type { %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.gl::GLImplementationWrapper"* }
%"class.gl::GLImplementationWrapper" = type { %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.gl::TraceGLApi"* }
%"class.gl::TraceGLApi" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.gl::LogGLApi"* }
%"class.gl::LogGLApi" = type opaque
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"struct.gl::CurrentGL"* }
%"struct.gl::CurrentGL" = type { %"class.gl::GLApi"*, %"struct.gl::DriverGL"*, %"struct.gl::GLVersionInfo"* }
%"class.gl::RealGLApi" = type opaque
%class.scoped_refptr.220 = type { %"class.gl::GLShareGroup"* }
%"class.gl::GLShareGroup" = type { %"class.base::RefCounted.221", %"class.std::__1::set", %"class.gl::GLContext"* }
%"class.base::RefCounted.221" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.222" }
%"class.std::__1::__tree.222" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.223", %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.gl::GLStateRestorer"* }
%"struct.gpu::Mailbox" = type { [16 x i8] }

$_ZN5media22GLES2DecoderHelperImplD0Ev = comdat any

$_ZN5media22GLES2DecoderHelperImpl18MakeContextCurrentEv = comdat any

$_ZN5media22GLES2DecoderHelperImpl13CreateTextureEjjiijj = comdat any

$_ZN5media22GLES2DecoderHelperImpl12GetGLContextEv = comdat any

$_ZN5media22GLES2DecoderHelperImpl13CreateMailboxEPN3gpu5gles215AbstractTextureE = comdat any

$_ZN5media22GLES2DecoderHelperImpl14ProduceTextureERKN3gpu7MailboxEPNS1_5gles215AbstractTextureE = comdat any

$_ZN5media18GLES2DecoderHelperD2Ev = comdat any

$_ZTVN5media22GLES2DecoderHelperImplE = comdat any

@_ZTVN5media22GLES2DecoderHelperImplE = linkonce_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::GLES2DecoderHelper"*)* @_ZN5media18GLES2DecoderHelperD2Ev to i8*), i8* bitcast (void (%"class.media::GLES2DecoderHelperImpl"*)* @_ZN5media22GLES2DecoderHelperImplD0Ev to i8*), i8* bitcast (i1 (%"class.media::GLES2DecoderHelperImpl"*)* @_ZN5media22GLES2DecoderHelperImpl18MakeContextCurrentEv to i8*), i8* bitcast (%"class.gpu::gles2::AbstractTexture"* (%"class.media::GLES2DecoderHelperImpl"*, i32, i32, i32, i32, i32, i32)* @_ZN5media22GLES2DecoderHelperImpl13CreateTextureEjjiijj to i8*), i8* bitcast (%"class.gl::GLContext"* (%"class.media::GLES2DecoderHelperImpl"*)* @_ZN5media22GLES2DecoderHelperImpl12GetGLContextEv to i8*), i8* bitcast ({ i64, i64 } (%"class.media::GLES2DecoderHelperImpl"*, %"class.gpu::gles2::AbstractTexture"*)* @_ZN5media22GLES2DecoderHelperImpl13CreateMailboxEPN3gpu5gles215AbstractTextureE to i8*), i8* bitcast (void (%"class.media::GLES2DecoderHelperImpl"*, %"struct.gpu::Mailbox"*, %"class.gpu::gles2::AbstractTexture"*)* @_ZN5media22GLES2DecoderHelperImpl14ProduceTextureERKN3gpu7MailboxEPNS1_5gles215AbstractTextureE to i8*)] }, comdat, align 8
@_ZN2gl24g_current_gl_context_tlsE = external local_unnamed_addr global %"class.base::ThreadLocalPointer"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.media::GLES2DecoderHelper"* @_ZN5media18GLES2DecoderHelper6CreateEPN3gpu14DecoderContextE(%"class.gpu::DecoderContext"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 24) #7
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media22GLES2DecoderHelperImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to %"class.gpu::DecoderContext"**
  store %"class.gpu::DecoderContext"* %0, %"class.gpu::DecoderContext"** %5, align 8
  %6 = bitcast %"class.gpu::DecoderContext"* %0 to %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)***
  %7 = load %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)**, %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)*, %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)** %7, i64 29
  %9 = load %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)*, %"class.gpu::gles2::ContextGroup"* (%"class.gpu::DecoderContext"*)** %8, align 8
  %10 = tail call %"class.gpu::gles2::ContextGroup"* %9(%"class.gpu::DecoderContext"* %0) #8
  %11 = getelementptr inbounds %"class.gpu::gles2::ContextGroup", %"class.gpu::gles2::ContextGroup"* %10, i64 0, i32 3
  %12 = bitcast %"class.gpu::MailboxManager"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = bitcast i8* %2 to %"class.media::GLES2DecoderHelper"*
  ret %"class.media::GLES2DecoderHelper"* %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media22GLES2DecoderHelperImplD0Ev(%"class.media::GLES2DecoderHelperImpl"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.media::GLES2DecoderHelperImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5media22GLES2DecoderHelperImpl18MakeContextCurrentEv(%"class.media::GLES2DecoderHelperImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.media::GLES2DecoderHelperImpl", %"class.media::GLES2DecoderHelperImpl"* %0, i64 0, i32 1
  %3 = load %"class.gpu::DecoderContext"*, %"class.gpu::DecoderContext"** %2, align 8
  %4 = bitcast %"class.gpu::DecoderContext"* %3 to i1 (%"class.gpu::DecoderContext"*)***
  %5 = load i1 (%"class.gpu::DecoderContext"*)**, i1 (%"class.gpu::DecoderContext"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.gpu::DecoderContext"*)*, i1 (%"class.gpu::DecoderContext"*)** %5, i64 12
  %7 = load i1 (%"class.gpu::DecoderContext"*)*, i1 (%"class.gpu::DecoderContext"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.gpu::DecoderContext"* %3) #8
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.gpu::gles2::AbstractTexture"* @_ZN5media22GLES2DecoderHelperImpl13CreateTextureEjjiijj(%"class.media::GLES2DecoderHelperImpl"*, i32, i32, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %8 = alloca %"class.gl::ScopedTextureBinder", align 8
  %9 = getelementptr inbounds %"class.media::GLES2DecoderHelperImpl", %"class.media::GLES2DecoderHelperImpl"* %0, i64 0, i32 1
  %10 = load %"class.gpu::DecoderContext"*, %"class.gpu::DecoderContext"** %9, align 8
  %11 = bitcast %"class.gpu::DecoderContext"* %10 to %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)***
  %12 = load %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)**, %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)*** %11, align 8
  %13 = getelementptr inbounds %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)*, %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)** %12, i64 31
  %14 = load %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)*, %"class.gpu::gles2::AbstractTexture"* (%"class.gpu::DecoderContext"*, i32, i32, i32, i32, i32, i32, i32, i32)** %13, align 8
  %15 = tail call %"class.gpu::gles2::AbstractTexture"* %14(%"class.gpu::DecoderContext"* %10, i32 %1, i32 %2, i32 %3, i32 %4, i32 1, i32 0, i32 %5, i32 %6) #8
  %16 = bitcast %"class.gpu::gles2::AbstractTexture"* %15 to void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)***
  %17 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)**, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %17, i64 3
  %19 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %18, align 8
  tail call void %19(%"class.gpu::gles2::AbstractTexture"* %15, i32 10240, i32 9729) #8
  %20 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)**, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*** %16, align 8
  %21 = getelementptr inbounds void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %20, i64 3
  %22 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %21, align 8
  tail call void %22(%"class.gpu::gles2::AbstractTexture"* %15, i32 10241, i32 9729) #8
  %23 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)**, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*** %16, align 8
  %24 = getelementptr inbounds void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %23, i64 3
  %25 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %24, align 8
  tail call void %25(%"class.gpu::gles2::AbstractTexture"* %15, i32 10242, i32 33071) #8
  %26 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)**, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*** %16, align 8
  %27 = getelementptr inbounds void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %26, i64 3
  %28 = load void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)*, void (%"class.gpu::gles2::AbstractTexture"*, i32, i32)** %27, align 8
  tail call void %28(%"class.gpu::gles2::AbstractTexture"* %15, i32 10243, i32 33071) #8
  %29 = icmp eq i32 %1, 3553
  br i1 %29, label %30, label %49

30:                                               ; preds = %7
  %31 = bitcast %"class.gl::ScopedTextureBinder"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #8
  %32 = bitcast %"class.gpu::gles2::AbstractTexture"* %15 to %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)***
  %33 = bitcast %"class.gl::ScopedTextureBinder"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 16, i1 false)
  %34 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)**, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*** %32, align 8
  %35 = getelementptr inbounds %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %34, i64 2
  %36 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %35, align 8
  %37 = tail call %"class.gpu::TextureBase"* %36(%"class.gpu::gles2::AbstractTexture"* %15) #8
  %38 = getelementptr inbounds %"class.gpu::TextureBase", %"class.gpu::TextureBase"* %37, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  call void @_ZN2gl19ScopedTextureBinderC1Ejj(%"class.gl::ScopedTextureBinder"* nonnull %8, i32 3553, i32 %39) #8
  %40 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %41 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %40, i64 0, i32 0
  %42 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %41) #8
  %43 = bitcast i8* %42 to %"class.gl::GLApi"**
  %44 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %43, align 8
  %45 = bitcast %"class.gl::GLApi"* %44 to void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)***
  %46 = load void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)**, void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)** %46, i64 420
  %48 = load void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32, i32, i32, i32, i32, i32, i8*)** %47, align 8
  call void %48(%"class.gl::GLApi"* %44, i32 3553, i32 0, i32 %2, i32 %3, i32 %4, i32 0, i32 %5, i32 %6, i8* null) #8
  call void @_ZN2gl19ScopedTextureBinderD1Ev(%"class.gl::ScopedTextureBinder"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #8
  br label %49

49:                                               ; preds = %7, %30
  ret %"class.gpu::gles2::AbstractTexture"* %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.gl::GLContext"* @_ZN5media22GLES2DecoderHelperImpl12GetGLContextEv(%"class.media::GLES2DecoderHelperImpl"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.media::GLES2DecoderHelperImpl", %"class.media::GLES2DecoderHelperImpl"* %0, i64 0, i32 1
  %3 = load %"class.gpu::DecoderContext"*, %"class.gpu::DecoderContext"** %2, align 8
  %4 = bitcast %"class.gpu::DecoderContext"* %3 to %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)***
  %5 = load %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)**, %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)*, %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)** %5, i64 10
  %7 = load %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)*, %"class.gl::GLContext"* (%"class.gpu::DecoderContext"*)** %6, align 8
  %8 = tail call %"class.gl::GLContext"* %7(%"class.gpu::DecoderContext"* %3) #8
  ret %"class.gl::GLContext"* %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZN5media22GLES2DecoderHelperImpl13CreateMailboxEPN3gpu5gles215AbstractTextureE(%"class.media::GLES2DecoderHelperImpl"*, %"class.gpu::gles2::AbstractTexture"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"struct.gpu::Mailbox"*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %6 = tail call { i64, i64 } @_ZN3gpu7Mailbox8GenerateEv() #8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %8 = extractvalue { i64, i64 } %6, 0
  store i64 %8, i64* %7, align 8
  %9 = extractvalue { i64, i64 } %6, 1
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.media::GLES2DecoderHelperImpl", %"class.media::GLES2DecoderHelperImpl"* %0, i64 0, i32 2
  %11 = load %"class.gpu::MailboxManager"*, %"class.gpu::MailboxManager"** %10, align 8
  %12 = bitcast %"class.gpu::gles2::AbstractTexture"* %1 to %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)***
  %13 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)**, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %13, i64 2
  %15 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %14, align 8
  %16 = tail call %"class.gpu::TextureBase"* %15(%"class.gpu::gles2::AbstractTexture"* %1) #8
  %17 = bitcast %"class.gpu::MailboxManager"* %11 to void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)***
  %18 = load void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)**, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)** %18, i64 3
  %20 = load void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)** %19, align 8
  call void %20(%"class.gpu::MailboxManager"* %11, %"struct.gpu::Mailbox"* nonnull dereferenceable(16) %4, %"class.gpu::TextureBase"* %16) #8
  %21 = load i64, i64* %7, align 8
  %22 = insertvalue { i64, i64 } undef, i64 %21, 0
  %23 = load i64, i64* %5, align 8
  %24 = insertvalue { i64, i64 } %22, i64 %23, 1
  ret { i64, i64 } %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media22GLES2DecoderHelperImpl14ProduceTextureERKN3gpu7MailboxEPNS1_5gles215AbstractTextureE(%"class.media::GLES2DecoderHelperImpl"*, %"struct.gpu::Mailbox"* dereferenceable(16), %"class.gpu::gles2::AbstractTexture"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.media::GLES2DecoderHelperImpl", %"class.media::GLES2DecoderHelperImpl"* %0, i64 0, i32 2
  %5 = load %"class.gpu::MailboxManager"*, %"class.gpu::MailboxManager"** %4, align 8
  %6 = bitcast %"class.gpu::gles2::AbstractTexture"* %2 to %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)***
  %7 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)**, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %7, i64 2
  %9 = load %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)*, %"class.gpu::TextureBase"* (%"class.gpu::gles2::AbstractTexture"*)** %8, align 8
  %10 = tail call %"class.gpu::TextureBase"* %9(%"class.gpu::gles2::AbstractTexture"* %2) #8
  %11 = bitcast %"class.gpu::MailboxManager"* %5 to void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)***
  %12 = load void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)**, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)** %12, i64 3
  %14 = load void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)*, void (%"class.gpu::MailboxManager"*, %"struct.gpu::Mailbox"*, %"class.gpu::TextureBase"*)** %13, align 8
  tail call void %14(%"class.gpu::MailboxManager"* %5, %"struct.gpu::Mailbox"* dereferenceable(16) %1, %"class.gpu::TextureBase"* %10) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media18GLES2DecoderHelperD2Ev(%"class.media::GLES2DecoderHelper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN2gl19ScopedTextureBinderC1Ejj(%"class.gl::ScopedTextureBinder"*, i32, i32) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN2gl19ScopedTextureBinderD1Ev(%"class.gl::ScopedTextureBinder"*) unnamed_addr #6

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #5

declare { i64, i64 } @_ZN3gpu7Mailbox8GenerateEv() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
