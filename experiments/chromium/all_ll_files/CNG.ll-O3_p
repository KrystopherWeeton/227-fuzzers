; ModuleID = '../../third_party/opus/src/silk/CNG.c'
source_filename = "../../third_party/opus/src/silk/CNG.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_decoder_state = type { i32, [320 x i32], [16 x i32], [480 x i16], i32, i8, i32, i32, i32, i32, i32, i32, i32, [16 x i16], i32, i8*, i8*, i32, i32, i32, i16, [3 x i32], i32, [3 x i32], %struct._silk_resampler_state_struct, %struct.silk_NLSF_CB_struct*, %struct.SideInfoIndices, %struct.silk_CNG_struct, i32, i32, i32, %struct.silk_PLC_struct }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.silk_CNG_struct = type { [320 x i32], [16 x i16], [16 x i32], i32, i32, i32 }
%struct.silk_PLC_struct = type { i32, [5 x i16], [16 x i16], i32, i32, i16, i32, i32, i16, [2 x i32], i32, i32, i32 }
%struct.silk_decoder_control = type { [4 x i32], [4 x i32], [2 x [16 x i16]], [20 x i16], i32 }

@.str = private unnamed_addr constant [67 x i8] c"assertion failed: psDec->LPC_order == 10 || psDec->LPC_order == 16\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"../../third_party/opus/src/silk/CNG.c\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_CNG_Reset(%struct.silk_decoder_state* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 4
  %4 = add nsw i32 %3, 1
  %5 = sdiv i32 32767, %4
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %1
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 16
  br i1 %9, label %75, label %10

10:                                               ; preds = %7
  %11 = and i64 %8, 4294967280
  %12 = trunc i64 %11 to i32
  %13 = mul i32 %5, %12
  %14 = insertelement <8 x i32> undef, i32 %5, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = mul <8 x i32> %15, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shl i32 %5, 3
  %18 = insertelement <8 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i32> undef, i32 %5, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i32> undef, i32 %5, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = add nsw i64 %11, -16
  %25 = lshr exact i64 %24, 4
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 1
  %28 = icmp eq i64 %24, 0
  br i1 %28, label %59, label %29

29:                                               ; preds = %10
  %30 = sub nuw nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %55, %31 ]
  %33 = phi <8 x i32> [ %16, %29 ], [ %56, %31 ]
  %34 = phi i64 [ %30, %29 ], [ %57, %31 ]
  %35 = add <8 x i32> %33, %19
  %36 = add nsw <8 x i32> %33, %21
  %37 = add nsw <8 x i32> %35, %23
  %38 = trunc <8 x i32> %36 to <8 x i16>
  %39 = trunc <8 x i32> %37 to <8 x i16>
  %40 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %32
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %40, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %43, align 2
  %44 = or i64 %32, 16
  %45 = add <8 x i32> %35, %19
  %46 = add <8 x i32> %45, %19
  %47 = add nsw <8 x i32> %45, %21
  %48 = add nsw <8 x i32> %46, %23
  %49 = trunc <8 x i32> %47 to <8 x i16>
  %50 = trunc <8 x i32> %48 to <8 x i16>
  %51 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %44
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %54, align 2
  %55 = add i64 %32, 32
  %56 = add <8 x i32> %46, %19
  %57 = add i64 %34, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %31, !llvm.loop !2

59:                                               ; preds = %31, %10
  %60 = phi i64 [ 0, %10 ], [ %55, %31 ]
  %61 = phi <8 x i32> [ %16, %10 ], [ %56, %31 ]
  %62 = icmp eq i64 %27, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %59
  %64 = add <8 x i32> %61, %19
  %65 = add nsw <8 x i32> %61, %21
  %66 = add nsw <8 x i32> %64, %23
  %67 = trunc <8 x i32> %65 to <8 x i16>
  %68 = trunc <8 x i32> %66 to <8 x i16>
  %69 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %60
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2
  br label %73

73:                                               ; preds = %59, %63
  %74 = icmp eq i64 %11, %8
  br i1 %74, label %86, label %75

75:                                               ; preds = %73, %7
  %76 = phi i64 [ 0, %7 ], [ %11, %73 ]
  %77 = phi i32 [ 0, %7 ], [ %13, %73 ]
  br label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %84, %78 ], [ %76, %75 ]
  %80 = phi i32 [ %81, %78 ], [ %77, %75 ]
  %81 = add nsw i32 %80, %5
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %79
  store i16 %82, i16* %83, align 2
  %84 = add nuw nsw i64 %79, 1
  %85 = icmp eq i64 %84, %8
  br i1 %85, label %86, label %78, !llvm.loop !4

86:                                               ; preds = %78, %73, %1
  %87 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 3
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 4
  store i32 3176576, i32* %88, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_CNG(%struct.silk_decoder_state*, %struct.silk_decoder_control* nocapture readonly, i16* nocapture, i32) local_unnamed_addr #2 {
  %5 = alloca [16 x i16], align 16
  %6 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  %7 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 2
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 3
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 4
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 5
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 6
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 7
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 8
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 9
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 10
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 11
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 12
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 13
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 14
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 15
  %23 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27
  %24 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 6
  %25 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  %26 = load i32, i32* %24, align 4
  %27 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %118, label %30

30:                                               ; preds = %4
  %31 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, 1
  %34 = sdiv i32 32767, %33
  %35 = icmp sgt i32 %32, 0
  br i1 %35, label %36, label %115

36:                                               ; preds = %30
  %37 = zext i32 %32 to i64
  %38 = icmp ult i32 %32, 16
  br i1 %38, label %104, label %39

39:                                               ; preds = %36
  %40 = and i64 %37, 4294967280
  %41 = trunc i64 %40 to i32
  %42 = mul i32 %34, %41
  %43 = insertelement <8 x i32> undef, i32 %34, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = mul <8 x i32> %44, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %46 = shl i32 %34, 3
  %47 = insertelement <8 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i32> undef, i32 %34, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = insertelement <8 x i32> undef, i32 %34, i32 0
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = add nsw i64 %40, -16
  %54 = lshr exact i64 %53, 4
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %88, label %58

58:                                               ; preds = %39
  %59 = sub nuw nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %84, %60 ]
  %62 = phi <8 x i32> [ %45, %58 ], [ %85, %60 ]
  %63 = phi i64 [ %59, %58 ], [ %86, %60 ]
  %64 = add <8 x i32> %62, %48
  %65 = add nsw <8 x i32> %62, %50
  %66 = add nsw <8 x i32> %64, %52
  %67 = trunc <8 x i32> %65 to <8 x i16>
  %68 = trunc <8 x i32> %66 to <8 x i16>
  %69 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %61
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2
  %73 = or i64 %61, 16
  %74 = add <8 x i32> %64, %48
  %75 = add <8 x i32> %74, %48
  %76 = add nsw <8 x i32> %74, %50
  %77 = add nsw <8 x i32> %75, %52
  %78 = trunc <8 x i32> %76 to <8 x i16>
  %79 = trunc <8 x i32> %77 to <8 x i16>
  %80 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %73
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds i16, i16* %80, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2
  %84 = add i64 %61, 32
  %85 = add <8 x i32> %75, %48
  %86 = add i64 %63, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %60, !llvm.loop !6

88:                                               ; preds = %60, %39
  %89 = phi i64 [ 0, %39 ], [ %84, %60 ]
  %90 = phi <8 x i32> [ %45, %39 ], [ %85, %60 ]
  %91 = icmp eq i64 %56, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %88
  %93 = add <8 x i32> %90, %48
  %94 = add nsw <8 x i32> %90, %50
  %95 = add nsw <8 x i32> %93, %52
  %96 = trunc <8 x i32> %94 to <8 x i16>
  %97 = trunc <8 x i32> %95 to <8 x i16>
  %98 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %89
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %98, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2
  br label %102

102:                                              ; preds = %88, %92
  %103 = icmp eq i64 %40, %37
  br i1 %103, label %115, label %104

104:                                              ; preds = %102, %36
  %105 = phi i64 [ 0, %36 ], [ %40, %102 ]
  %106 = phi i32 [ 0, %36 ], [ %42, %102 ]
  br label %107

107:                                              ; preds = %104, %107
  %108 = phi i64 [ %113, %107 ], [ %105, %104 ]
  %109 = phi i32 [ %110, %107 ], [ %106, %104 ]
  %110 = add nsw i32 %109, %34
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %108
  store i16 %111, i16* %112, align 2
  %113 = add nuw nsw i64 %108, 1
  %114 = icmp eq i64 %113, %37
  br i1 %114, label %115, label %107, !llvm.loop !7

115:                                              ; preds = %107, %102, %30
  %116 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 3
  store i32 0, i32* %116, align 4
  %117 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 4
  store i32 3176576, i32* %117, align 4
  store i32 %26, i32* %27, align 4
  br label %118

118:                                              ; preds = %4, %115
  %119 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %328

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 29
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %325

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %199

130:                                              ; preds = %126
  %131 = sext i32 %128 to i64
  %132 = icmp ult i32 %128, 8
  br i1 %132, label %133, label %135

133:                                              ; preds = %197, %130
  %134 = phi i64 [ 0, %130 ], [ %136, %197 ]
  br label %210

135:                                              ; preds = %130
  %136 = and i64 %131, -8
  %137 = add nsw i64 %136, -8
  %138 = lshr exact i64 %137, 3
  %139 = add nuw nsw i64 %138, 1
  %140 = and i64 %139, 1
  %141 = icmp eq i64 %137, 0
  br i1 %141, label %179, label %142

142:                                              ; preds = %135
  %143 = sub nuw nsw i64 %139, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %176, %144 ]
  %146 = phi i64 [ %143, %142 ], [ %177, %144 ]
  %147 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 13, i64 %145
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = sext <8 x i16> %149 to <8 x i32>
  %151 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %145
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sext <8 x i16> %153 to <8 x i32>
  %155 = sub nsw <8 x i32> %150, %154
  %156 = mul nsw <8 x i32> %155, <i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348>
  %157 = lshr <8 x i32> %156, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %158 = trunc <8 x i32> %157 to <8 x i16>
  %159 = add <8 x i16> %153, %158
  %160 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %160, align 2
  %161 = or i64 %145, 8
  %162 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 13, i64 %161
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = sext <8 x i16> %164 to <8 x i32>
  %166 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %161
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2
  %169 = sext <8 x i16> %168 to <8 x i32>
  %170 = sub nsw <8 x i32> %165, %169
  %171 = mul nsw <8 x i32> %170, <i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348>
  %172 = lshr <8 x i32> %171, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %173 = trunc <8 x i32> %172 to <8 x i16>
  %174 = add <8 x i16> %168, %173
  %175 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 2
  %176 = add i64 %145, 16
  %177 = add i64 %146, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %144, !llvm.loop !8

179:                                              ; preds = %144, %135
  %180 = phi i64 [ 0, %135 ], [ %176, %144 ]
  %181 = icmp eq i64 %140, 0
  br i1 %181, label %197, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 13, i64 %180
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2
  %186 = sext <8 x i16> %185 to <8 x i32>
  %187 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %180
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = sext <8 x i16> %189 to <8 x i32>
  %191 = sub nsw <8 x i32> %186, %190
  %192 = mul nsw <8 x i32> %191, <i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348, i32 16348>
  %193 = lshr <8 x i32> %192, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %194 = trunc <8 x i32> %193 to <8 x i16>
  %195 = add <8 x i16> %189, %194
  %196 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %196, align 2
  br label %197

197:                                              ; preds = %179, %182
  %198 = icmp eq i64 %136, %131
  br i1 %198, label %199, label %133

199:                                              ; preds = %210, %197, %126
  %200 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %201 = load i32, i32* %200, align 4
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %203, label %280

203:                                              ; preds = %199
  %204 = sext i32 %201 to i64
  %205 = add nsw i64 %204, -1
  %206 = and i64 %204, 3
  %207 = icmp ult i64 %205, 3
  br i1 %207, label %260, label %208

208:                                              ; preds = %203
  %209 = sub nsw i64 %204, %206
  br label %225

210:                                              ; preds = %133, %210
  %211 = phi i64 [ %223, %210 ], [ %134, %133 ]
  %212 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 13, i64 %211
  %213 = load i16, i16* %212, align 2
  %214 = sext i16 %213 to i32
  %215 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 %211
  %216 = load i16, i16* %215, align 2
  %217 = sext i16 %216 to i32
  %218 = sub nsw i32 %214, %217
  %219 = mul nsw i32 %218, 16348
  %220 = lshr i32 %219, 16
  %221 = trunc i32 %220 to i16
  %222 = add i16 %216, %221
  store i16 %222, i16* %215, align 2
  %223 = add nuw nsw i64 %211, 1
  %224 = icmp slt i64 %223, %131
  br i1 %224, label %210, label %199, !llvm.loop !9

225:                                              ; preds = %225, %208
  %226 = phi i64 [ 0, %208 ], [ %257, %225 ]
  %227 = phi i32 [ 0, %208 ], [ %256, %225 ]
  %228 = phi i32 [ 0, %208 ], [ %255, %225 ]
  %229 = phi i64 [ %209, %208 ], [ %258, %225 ]
  %230 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %226
  %231 = load i32, i32* %230, align 4
  %232 = icmp sgt i32 %231, %227
  %233 = trunc i64 %226 to i32
  %234 = select i1 %232, i32 %233, i32 %228
  %235 = select i1 %232, i32 %231, i32 %227
  %236 = or i64 %226, 1
  %237 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %236
  %238 = load i32, i32* %237, align 4
  %239 = icmp sgt i32 %238, %235
  %240 = trunc i64 %236 to i32
  %241 = select i1 %239, i32 %240, i32 %234
  %242 = select i1 %239, i32 %238, i32 %235
  %243 = or i64 %226, 2
  %244 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %243
  %245 = load i32, i32* %244, align 4
  %246 = icmp sgt i32 %245, %242
  %247 = trunc i64 %243 to i32
  %248 = select i1 %246, i32 %247, i32 %241
  %249 = select i1 %246, i32 %245, i32 %242
  %250 = or i64 %226, 3
  %251 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = icmp sgt i32 %252, %249
  %254 = trunc i64 %250 to i32
  %255 = select i1 %253, i32 %254, i32 %248
  %256 = select i1 %253, i32 %252, i32 %249
  %257 = add nuw nsw i64 %226, 4
  %258 = add i64 %229, -4
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %225

260:                                              ; preds = %225, %203
  %261 = phi i32 [ undef, %203 ], [ %255, %225 ]
  %262 = phi i64 [ 0, %203 ], [ %257, %225 ]
  %263 = phi i32 [ 0, %203 ], [ %256, %225 ]
  %264 = phi i32 [ 0, %203 ], [ %255, %225 ]
  %265 = icmp eq i64 %206, 0
  br i1 %265, label %280, label %266

266:                                              ; preds = %260, %266
  %267 = phi i64 [ %277, %266 ], [ %262, %260 ]
  %268 = phi i32 [ %276, %266 ], [ %263, %260 ]
  %269 = phi i32 [ %275, %266 ], [ %264, %260 ]
  %270 = phi i64 [ %278, %266 ], [ %206, %260 ]
  %271 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %267
  %272 = load i32, i32* %271, align 4
  %273 = icmp sgt i32 %272, %268
  %274 = trunc i64 %267 to i32
  %275 = select i1 %273, i32 %274, i32 %269
  %276 = select i1 %273, i32 %272, i32 %268
  %277 = add nuw nsw i64 %267, 1
  %278 = add i64 %270, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %266, !llvm.loop !10

280:                                              ; preds = %260, %266, %199
  %281 = phi i32 [ 0, %199 ], [ %261, %260 ], [ %275, %266 ]
  %282 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 10
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 0, i64 %284
  %286 = bitcast i32* %285 to i8*
  %287 = bitcast %struct.silk_CNG_struct* %23 to i8*
  %288 = add nsw i32 %201, -1
  %289 = mul nsw i32 %283, %288
  %290 = sext i32 %289 to i64
  %291 = shl nsw i64 %290, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %286, i8* align 4 %287, i64 %291, i1 false)
  %292 = load i32, i32* %282, align 4
  %293 = mul nsw i32 %292, %281
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 1, i64 %294
  %296 = bitcast i32* %295 to i8*
  %297 = sext i32 %292 to i64
  %298 = shl nsw i64 %297, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %287, i8* align 4 %296, i64 %298, i1 false)
  %299 = load i32, i32* %200, align 4
  %300 = icmp sgt i32 %299, 0
  br i1 %300, label %301, label %325

301:                                              ; preds = %280
  %302 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 3
  %303 = load i32, i32* %302, align 4
  %304 = sext i32 %299 to i64
  br label %305

305:                                              ; preds = %301, %305
  %306 = phi i32 [ %303, %301 ], [ %322, %305 ]
  %307 = phi i64 [ 0, %301 ], [ %323, %305 ]
  %308 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = sub nsw i32 %309, %306
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %311, 4634
  %313 = ashr i64 %312, 16
  %314 = trunc i64 %313 to i32
  %315 = add nsw i32 %306, %314
  store i32 %315, i32* %302, align 4
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %316, 46396
  %318 = lshr i64 %317, 16
  %319 = trunc i64 %318 to i32
  %320 = load i32, i32* %308, align 4
  %321 = icmp slt i32 %320, %319
  %322 = select i1 %321, i32 %320, i32 %315
  store i32 %322, i32* %302, align 4
  %323 = add nuw nsw i64 %307, 1
  %324 = icmp slt i64 %323, %304
  br i1 %324, label %305, label %325

325:                                              ; preds = %305, %280, %122
  %326 = load i32, i32* %119, align 8
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %723, label %328

328:                                              ; preds = %118, %325
  %329 = add nsw i32 %3, 16
  %330 = sext i32 %329 to i64
  %331 = shl nsw i64 %330, 2
  %332 = alloca i32, i64 %330, align 16
  %333 = bitcast i32* %332 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %333, i8 -86, i64 %331, i1 false)
  %334 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 5
  %335 = load i16, i16* %334, align 4
  %336 = sext i16 %335 to i64
  %337 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 31, i32 9, i64 1
  %338 = load i32, i32* %337, align 4
  %339 = sext i32 %338 to i64
  %340 = mul nsw i64 %339, %336
  %341 = lshr i64 %340, 16
  %342 = trunc i64 %341 to i32
  %343 = icmp sgt i32 %342, 2097151
  %344 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = icmp sgt i32 %345, 8388608
  %347 = or i1 %343, %346
  br i1 %347, label %348, label %390

348:                                              ; preds = %328
  %349 = ashr i32 %342, 16
  %350 = ashr i32 %345, 16
  %351 = mul nsw i32 %350, %350
  %352 = shl nsw i32 %349, 5
  %353 = mul i32 %352, %349
  %354 = sub nsw i32 %351, %353
  %355 = icmp slt i32 %354, 1
  br i1 %355, label %437, label %356

356:                                              ; preds = %348
  %357 = tail call i32 @llvm.ctlz.i32(i32 %354, i1 false) #6, !range !12
  %358 = sub nsw i32 24, %357
  %359 = add nsw i32 %357, -24
  %360 = icmp eq i32 %358, 0
  br i1 %360, label %373, label %361

361:                                              ; preds = %356
  %362 = icmp ult i32 %354, 128
  br i1 %362, label %363, label %368

363:                                              ; preds = %361
  %364 = shl i32 %354, %359
  %365 = sub nuw nsw i32 56, %357
  %366 = lshr i32 %354, %365
  %367 = or i32 %366, %364
  br label %373

368:                                              ; preds = %361
  %369 = add nuw nsw i32 %357, 8
  %370 = shl i32 %354, %369
  %371 = lshr i32 %354, %358
  %372 = or i32 %370, %371
  br label %373

373:                                              ; preds = %368, %363, %356
  %374 = phi i32 [ %367, %363 ], [ %372, %368 ], [ %354, %356 ]
  %375 = and i32 %374, 127
  %376 = and i32 %357, 1
  %377 = icmp eq i32 %376, 0
  %378 = select i1 %377, i32 46214, i32 32768
  %379 = lshr i32 %357, 1
  %380 = lshr i32 %378, %379
  %381 = sext i32 %380 to i64
  %382 = zext i32 %375 to i64
  %383 = mul nuw nsw i64 %382, 59954170039369728
  %384 = lshr exact i64 %383, 48
  %385 = mul nsw i64 %384, %381
  %386 = lshr i64 %385, 16
  %387 = trunc i64 %386 to i32
  %388 = add i32 %380, %387
  %389 = shl i32 %388, 16
  br label %437

390:                                              ; preds = %328
  %391 = shl i64 %341, 32
  %392 = ashr exact i64 %391, 32
  %393 = mul nsw i64 %392, %392
  %394 = sext i32 %345 to i64
  %395 = mul nsw i64 %394, %394
  %396 = lshr i64 %395, 16
  %397 = trunc i64 %396 to i32
  %398 = lshr i64 %393, 11
  %399 = trunc i64 %398 to i32
  %400 = and i32 %399, -32
  %401 = sub nsw i32 %397, %400
  %402 = icmp slt i32 %401, 1
  br i1 %402, label %437, label %403

403:                                              ; preds = %390
  %404 = tail call i32 @llvm.ctlz.i32(i32 %401, i1 false) #6, !range !12
  %405 = sub nsw i32 24, %404
  %406 = add nsw i32 %404, -24
  %407 = icmp eq i32 %405, 0
  br i1 %407, label %420, label %408

408:                                              ; preds = %403
  %409 = icmp ult i32 %401, 128
  br i1 %409, label %410, label %415

410:                                              ; preds = %408
  %411 = shl i32 %401, %406
  %412 = sub nuw nsw i32 56, %404
  %413 = lshr i32 %401, %412
  %414 = or i32 %413, %411
  br label %420

415:                                              ; preds = %408
  %416 = add nuw nsw i32 %404, 8
  %417 = shl i32 %401, %416
  %418 = lshr i32 %401, %405
  %419 = or i32 %417, %418
  br label %420

420:                                              ; preds = %415, %410, %403
  %421 = phi i32 [ %414, %410 ], [ %419, %415 ], [ %401, %403 ]
  %422 = and i32 %421, 127
  %423 = and i32 %404, 1
  %424 = icmp eq i32 %423, 0
  %425 = select i1 %424, i32 46214, i32 32768
  %426 = lshr i32 %404, 1
  %427 = lshr i32 %425, %426
  %428 = sext i32 %427 to i64
  %429 = zext i32 %422 to i64
  %430 = mul nuw nsw i64 %429, 59954170039369728
  %431 = lshr exact i64 %430, 48
  %432 = mul nsw i64 %431, %428
  %433 = lshr i64 %432, 16
  %434 = trunc i64 %433 to i32
  %435 = add i32 %427, %434
  %436 = shl i32 %435, 8
  br label %437

437:                                              ; preds = %420, %390, %373, %348
  %438 = phi i32 [ %389, %373 ], [ 0, %348 ], [ %436, %420 ], [ 0, %390 ]
  %439 = getelementptr inbounds i32, i32* %332, i64 16
  br label %440

440:                                              ; preds = %440, %437
  %441 = phi i32 [ 255, %437 ], [ %443, %440 ]
  %442 = icmp sgt i32 %441, %3
  %443 = ashr i32 %441, 1
  br i1 %442, label %440, label %444

444:                                              ; preds = %440
  %445 = ashr exact i32 %438, 6
  %446 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 4
  %447 = load i32, i32* %446, align 4
  %448 = icmp sgt i32 %3, 0
  br i1 %448, label %449, label %493

449:                                              ; preds = %444
  %450 = zext i32 %3 to i64
  %451 = and i64 %450, 1
  %452 = icmp eq i32 %3, 1
  br i1 %452, label %479, label %453

453:                                              ; preds = %449
  %454 = sub nsw i64 %450, %451
  br label %455

455:                                              ; preds = %455, %453
  %456 = phi i64 [ 0, %453 ], [ %476, %455 ]
  %457 = phi i32 [ %447, %453 ], [ %469, %455 ]
  %458 = phi i64 [ %454, %453 ], [ %477, %455 ]
  %459 = mul i32 %457, 196314165
  %460 = add i32 %459, 907633515
  %461 = ashr i32 %460, 24
  %462 = and i32 %461, %441
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 0, i64 %463
  %465 = load i32, i32* %464, align 4
  %466 = getelementptr inbounds i32, i32* %439, i64 %456
  store i32 %465, i32* %466, align 8
  %467 = or i64 %456, 1
  %468 = mul i32 %460, 196314165
  %469 = add i32 %468, 907633515
  %470 = ashr i32 %469, 24
  %471 = and i32 %470, %441
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 0, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = getelementptr inbounds i32, i32* %439, i64 %467
  store i32 %474, i32* %475, align 4
  %476 = add nuw nsw i64 %456, 2
  %477 = add i64 %458, -2
  %478 = icmp eq i64 %477, 0
  br i1 %478, label %479, label %455

479:                                              ; preds = %455, %449
  %480 = phi i32 [ undef, %449 ], [ %469, %455 ]
  %481 = phi i64 [ 0, %449 ], [ %476, %455 ]
  %482 = phi i32 [ %447, %449 ], [ %469, %455 ]
  %483 = icmp eq i64 %451, 0
  br i1 %483, label %493, label %484

484:                                              ; preds = %479
  %485 = mul i32 %482, 196314165
  %486 = add i32 %485, 907633515
  %487 = ashr i32 %486, 24
  %488 = and i32 %487, %441
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 0, i64 %489
  %491 = load i32, i32* %490, align 4
  %492 = getelementptr inbounds i32, i32* %439, i64 %481
  store i32 %491, i32* %492, align 4
  br label %493

493:                                              ; preds = %484, %479, %444
  %494 = phi i32 [ %447, %444 ], [ %480, %479 ], [ %486, %484 ]
  store i32 %494, i32* %446, align 4
  %495 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 1, i64 0
  %496 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 30
  %499 = load i32, i32* %498, align 8
  call void @silk_NLSF2A(i16* nonnull %7, i16* %495, i32 %497, i32 %499) #6
  %500 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 2, i64 0
  %501 = bitcast i32* %500 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %333, i8* align 4 %501, i64 64, i1 false)
  %502 = load i32, i32* %496, align 4
  switch i32 %502, label %503 [
    i32 10, label %504
    i32 16, label %504
  ]

503:                                              ; preds = %493
  call void @celt_fatal(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 153) #7
  unreachable

504:                                              ; preds = %493, %493
  br i1 %448, label %505, label %719

505:                                              ; preds = %504
  %506 = load i16, i16* %7, align 16
  %507 = sext i16 %506 to i64
  %508 = load i16, i16* %8, align 2
  %509 = sext i16 %508 to i64
  %510 = load i16, i16* %9, align 4
  %511 = sext i16 %510 to i64
  %512 = load i16, i16* %10, align 2
  %513 = sext i16 %512 to i64
  %514 = load i16, i16* %11, align 8
  %515 = sext i16 %514 to i64
  %516 = load i16, i16* %12, align 2
  %517 = sext i16 %516 to i64
  %518 = load i16, i16* %13, align 4
  %519 = sext i16 %518 to i64
  %520 = load i16, i16* %14, align 2
  %521 = sext i16 %520 to i64
  %522 = load i16, i16* %15, align 16
  %523 = sext i16 %522 to i64
  %524 = load i16, i16* %16, align 2
  %525 = sext i16 %524 to i64
  %526 = load i16, i16* %17, align 4
  %527 = sext i16 %526 to i64
  %528 = load i16, i16* %18, align 2
  %529 = sext i16 %528 to i64
  %530 = load i16, i16* %19, align 8
  %531 = sext i16 %530 to i64
  %532 = load i16, i16* %20, align 2
  %533 = sext i16 %532 to i64
  %534 = load i16, i16* %21, align 4
  %535 = sext i16 %534 to i64
  %536 = load i16, i16* %22, align 2
  %537 = sext i16 %536 to i64
  %538 = sext i32 %445 to i64
  %539 = zext i32 %3 to i64
  %540 = getelementptr inbounds i32, i32* %332, i64 15
  %541 = load i32, i32* %540, align 4
  %542 = getelementptr inbounds i32, i32* %332, i64 13
  %543 = load i32, i32* %542, align 4
  %544 = getelementptr inbounds i32, i32* %332, i64 11
  %545 = load i32, i32* %544, align 4
  %546 = getelementptr inbounds i32, i32* %332, i64 9
  %547 = load i32, i32* %546, align 4
  %548 = getelementptr inbounds i32, i32* %332, i64 7
  %549 = load i32, i32* %548, align 4
  br label %550

550:                                              ; preds = %717, %505
  %551 = phi i32 [ %549, %505 ], [ %606, %717 ]
  %552 = phi i32 [ %547, %505 ], [ %593, %717 ]
  %553 = phi i32 [ %545, %505 ], [ %580, %717 ]
  %554 = phi i32 [ %543, %505 ], [ %567, %717 ]
  %555 = phi i32 [ %541, %505 ], [ %694, %717 ]
  %556 = phi i32 [ %502, %505 ], [ %718, %717 ]
  %557 = phi i64 [ 0, %505 ], [ %715, %717 ]
  %558 = ashr i32 %556, 1
  %559 = add nuw nsw i64 %557, 16
  %560 = sext i32 %555 to i64
  %561 = mul nsw i64 %507, %560
  %562 = lshr i64 %561, 16
  %563 = trunc i64 %562 to i32
  %564 = add i32 %558, %563
  %565 = add nuw nsw i64 %557, 14
  %566 = getelementptr inbounds i32, i32* %332, i64 %565
  %567 = load i32, i32* %566, align 4
  %568 = sext i32 %567 to i64
  %569 = mul nsw i64 %509, %568
  %570 = lshr i64 %569, 16
  %571 = trunc i64 %570 to i32
  %572 = add i32 %564, %571
  %573 = sext i32 %554 to i64
  %574 = mul nsw i64 %511, %573
  %575 = lshr i64 %574, 16
  %576 = trunc i64 %575 to i32
  %577 = add i32 %572, %576
  %578 = add nuw nsw i64 %557, 12
  %579 = getelementptr inbounds i32, i32* %332, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = sext i32 %580 to i64
  %582 = mul nsw i64 %513, %581
  %583 = lshr i64 %582, 16
  %584 = trunc i64 %583 to i32
  %585 = add i32 %577, %584
  %586 = sext i32 %553 to i64
  %587 = mul nsw i64 %515, %586
  %588 = lshr i64 %587, 16
  %589 = trunc i64 %588 to i32
  %590 = add i32 %585, %589
  %591 = add nuw nsw i64 %557, 10
  %592 = getelementptr inbounds i32, i32* %332, i64 %591
  %593 = load i32, i32* %592, align 4
  %594 = sext i32 %593 to i64
  %595 = mul nsw i64 %517, %594
  %596 = lshr i64 %595, 16
  %597 = trunc i64 %596 to i32
  %598 = add i32 %590, %597
  %599 = sext i32 %552 to i64
  %600 = mul nsw i64 %519, %599
  %601 = lshr i64 %600, 16
  %602 = trunc i64 %601 to i32
  %603 = add i32 %598, %602
  %604 = add nuw nsw i64 %557, 8
  %605 = getelementptr inbounds i32, i32* %332, i64 %604
  %606 = load i32, i32* %605, align 4
  %607 = sext i32 %606 to i64
  %608 = mul nsw i64 %521, %607
  %609 = lshr i64 %608, 16
  %610 = trunc i64 %609 to i32
  %611 = add i32 %603, %610
  %612 = sext i32 %551 to i64
  %613 = mul nsw i64 %523, %612
  %614 = lshr i64 %613, 16
  %615 = trunc i64 %614 to i32
  %616 = add i32 %611, %615
  %617 = add nuw nsw i64 %557, 6
  %618 = getelementptr inbounds i32, i32* %332, i64 %617
  %619 = load i32, i32* %618, align 4
  %620 = sext i32 %619 to i64
  %621 = mul nsw i64 %525, %620
  %622 = lshr i64 %621, 16
  %623 = trunc i64 %622 to i32
  %624 = add i32 %616, %623
  %625 = icmp eq i32 %556, 16
  br i1 %625, label %626, label %674

626:                                              ; preds = %550
  %627 = add nuw nsw i64 %557, 5
  %628 = getelementptr inbounds i32, i32* %332, i64 %627
  %629 = load i32, i32* %628, align 4
  %630 = sext i32 %629 to i64
  %631 = mul nsw i64 %527, %630
  %632 = lshr i64 %631, 16
  %633 = trunc i64 %632 to i32
  %634 = add i32 %624, %633
  %635 = add nuw nsw i64 %557, 4
  %636 = getelementptr inbounds i32, i32* %332, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = sext i32 %637 to i64
  %639 = mul nsw i64 %529, %638
  %640 = lshr i64 %639, 16
  %641 = trunc i64 %640 to i32
  %642 = add i32 %634, %641
  %643 = add nuw nsw i64 %557, 3
  %644 = getelementptr inbounds i32, i32* %332, i64 %643
  %645 = load i32, i32* %644, align 4
  %646 = sext i32 %645 to i64
  %647 = mul nsw i64 %531, %646
  %648 = lshr i64 %647, 16
  %649 = trunc i64 %648 to i32
  %650 = add i32 %642, %649
  %651 = add nuw nsw i64 %557, 2
  %652 = getelementptr inbounds i32, i32* %332, i64 %651
  %653 = load i32, i32* %652, align 4
  %654 = sext i32 %653 to i64
  %655 = mul nsw i64 %533, %654
  %656 = lshr i64 %655, 16
  %657 = trunc i64 %656 to i32
  %658 = add i32 %650, %657
  %659 = add nuw nsw i64 %557, 1
  %660 = getelementptr inbounds i32, i32* %332, i64 %659
  %661 = load i32, i32* %660, align 4
  %662 = sext i32 %661 to i64
  %663 = mul nsw i64 %535, %662
  %664 = lshr i64 %663, 16
  %665 = trunc i64 %664 to i32
  %666 = add i32 %658, %665
  %667 = getelementptr inbounds i32, i32* %332, i64 %557
  %668 = load i32, i32* %667, align 4
  %669 = sext i32 %668 to i64
  %670 = mul nsw i64 %537, %669
  %671 = lshr i64 %670, 16
  %672 = trunc i64 %671 to i32
  %673 = add i32 %666, %672
  br label %674

674:                                              ; preds = %626, %550
  %675 = phi i32 [ %673, %626 ], [ %624, %550 ]
  %676 = getelementptr inbounds i32, i32* %332, i64 %559
  %677 = load i32, i32* %676, align 4
  %678 = icmp sgt i32 %675, -134217728
  %679 = select i1 %678, i32 %675, i32 -134217728
  %680 = icmp slt i32 %679, 134217727
  %681 = select i1 %680, i32 %679, i32 134217727
  %682 = shl nsw i32 %681, 4
  %683 = add i32 %682, %677
  %684 = icmp sgt i32 %683, -1
  br i1 %684, label %685, label %689

685:                                              ; preds = %674
  %686 = and i32 %682, %677
  %687 = icmp slt i32 %686, 0
  %688 = select i1 %687, i32 -2147483648, i32 %683
  br label %693

689:                                              ; preds = %674
  %690 = or i32 %682, %677
  %691 = icmp sgt i32 %690, -1
  %692 = select i1 %691, i32 2147483647, i32 %683
  br label %693

693:                                              ; preds = %689, %685
  %694 = phi i32 [ %688, %685 ], [ %692, %689 ]
  store i32 %694, i32* %676, align 4
  %695 = getelementptr inbounds i16, i16* %2, i64 %557
  %696 = load i16, i16* %695, align 2
  %697 = sext i16 %696 to i32
  %698 = sext i32 %694 to i64
  %699 = mul nsw i64 %698, %538
  %700 = lshr i64 %699, 16
  %701 = trunc i64 %700 to i32
  %702 = ashr i32 %701, 7
  %703 = add nsw i32 %702, 1
  %704 = ashr i32 %703, 1
  %705 = icmp sgt i32 %701, 8388479
  %706 = icmp slt i32 %703, -65536
  %707 = select i1 %706, i32 -32768, i32 %704
  %708 = select i1 %705, i32 32767, i32 %707
  %709 = add nsw i32 %708, %697
  %710 = icmp sgt i32 %709, -32768
  %711 = select i1 %710, i32 %709, i32 -32768
  %712 = icmp slt i32 %711, 32767
  %713 = select i1 %712, i32 %711, i32 32767
  %714 = trunc i32 %713 to i16
  store i16 %714, i16* %695, align 2
  %715 = add nuw nsw i64 %557, 1
  %716 = icmp eq i64 %715, %539
  br i1 %716, label %719, label %717

717:                                              ; preds = %693
  %718 = load i32, i32* %496, align 4
  br label %550

719:                                              ; preds = %693, %504
  %720 = sext i32 %3 to i64
  %721 = getelementptr inbounds i32, i32* %332, i64 %720
  %722 = bitcast i32* %721 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %501, i8* align 4 %722, i64 64, i1 false)
  br label %730

723:                                              ; preds = %325
  %724 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 27, i32 2, i64 0
  %725 = bitcast i32* %724 to i8*
  %726 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %727 = load i32, i32* %726, align 4
  %728 = sext i32 %727 to i64
  %729 = shl nsw i64 %728, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %725, i8 0, i64 %729, i1 false)
  br label %730

730:                                              ; preds = %723, %719
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @silk_NLSF2A(i16*, i16*, i32, i32) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{i32 0, i32 33}
