; ModuleID = '../../third_party/woff2/src/woff2_common.cc'
source_filename = "../../third_party/woff2/src/woff2_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN5woff215ComputeULongSumEPKhm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = and i64 %1, -4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %84, label %5

5:                                                ; preds = %2
  %6 = add i64 %3, -1
  %7 = lshr i64 %6, 2
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 8
  br i1 %9, label %10, label %13

10:                                               ; preds = %74, %5
  %11 = phi i32 [ 0, %5 ], [ %82, %74 ]
  %12 = phi i64 [ 0, %5 ], [ %15, %74 ]
  br label %137

13:                                               ; preds = %5
  %14 = and i64 %8, 9223372036854775800
  %15 = shl i64 %14, 2
  %16 = add nsw i64 %14, -8
  %17 = lshr exact i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %56, label %21

21:                                               ; preds = %13
  %22 = sub nuw nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %51, %23 ]
  %25 = phi <4 x i32> [ zeroinitializer, %21 ], [ %49, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %21 ], [ %50, %23 ]
  %27 = phi i64 [ %22, %21 ], [ %52, %23 ]
  %28 = shl i64 %24, 2
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = bitcast i8* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = bitcast i8* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %31)
  %36 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %34)
  %37 = add <4 x i32> %35, %25
  %38 = add <4 x i32> %36, %26
  %39 = shl i64 %24, 2
  %40 = or i64 %39, 32
  %41 = getelementptr inbounds i8, i8* %0, i64 %40
  %42 = bitcast i8* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 16
  %45 = bitcast i8* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %43)
  %48 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %46)
  %49 = add <4 x i32> %47, %37
  %50 = add <4 x i32> %48, %38
  %51 = add i64 %24, 16
  %52 = add i64 %27, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %23, !llvm.loop !2

54:                                               ; preds = %23
  %55 = shl i64 %51, 2
  br label %56

56:                                               ; preds = %54, %13
  %57 = phi <4 x i32> [ undef, %13 ], [ %49, %54 ]
  %58 = phi <4 x i32> [ undef, %13 ], [ %50, %54 ]
  %59 = phi i64 [ 0, %13 ], [ %55, %54 ]
  %60 = phi <4 x i32> [ zeroinitializer, %13 ], [ %49, %54 ]
  %61 = phi <4 x i32> [ zeroinitializer, %13 ], [ %50, %54 ]
  %62 = icmp eq i64 %19, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds i8, i8* %0, i64 %59
  %65 = getelementptr inbounds i8, i8* %64, i64 16
  %66 = bitcast i8* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %67)
  %69 = add <4 x i32> %68, %61
  %70 = bitcast i8* %64 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %71)
  %73 = add <4 x i32> %72, %60
  br label %74

74:                                               ; preds = %56, %63
  %75 = phi <4 x i32> [ %57, %56 ], [ %73, %63 ]
  %76 = phi <4 x i32> [ %58, %56 ], [ %69, %63 ]
  %77 = add <4 x i32> %76, %75
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %79 = add <4 x i32> %77, %78
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %81 = add <4 x i32> %79, %80
  %82 = extractelement <4 x i32> %81, i32 0
  %83 = icmp eq i64 %8, %14
  br i1 %83, label %84, label %10

84:                                               ; preds = %137, %74, %2
  %85 = phi i32 [ 0, %2 ], [ %82, %74 ], [ %144, %137 ]
  %86 = icmp eq i64 %3, %1
  br i1 %86, label %164, label %87

87:                                               ; preds = %84
  %88 = icmp ult i64 %3, %1
  br i1 %88, label %89, label %147

89:                                               ; preds = %87
  %90 = sub i64 %1, %3
  %91 = icmp ult i64 %90, 8
  br i1 %91, label %92, label %95

92:                                               ; preds = %129, %89
  %93 = phi i64 [ %3, %89 ], [ %97, %129 ]
  %94 = phi i32 [ 0, %89 ], [ %135, %129 ]
  br label %150

95:                                               ; preds = %89
  %96 = and i64 %90, -8
  %97 = add i64 %3, %96
  %98 = trunc i64 %3 to i32
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  %101 = add <4 x i32> %100, <i32 0, i32 1, i32 2, i32 3>
  br label %102

102:                                              ; preds = %102, %95
  %103 = phi i64 [ 0, %95 ], [ %126, %102 ]
  %104 = phi <4 x i32> [ zeroinitializer, %95 ], [ %124, %102 ]
  %105 = phi <4 x i32> [ zeroinitializer, %95 ], [ %125, %102 ]
  %106 = phi <4 x i32> [ %101, %95 ], [ %127, %102 ]
  %107 = add i64 %3, %103
  %108 = getelementptr inbounds i8, i8* %0, i64 %107
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %108, i64 4
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = zext <4 x i8> %110 to <4 x i32>
  %115 = zext <4 x i8> %113 to <4 x i32>
  %116 = shl <4 x i32> %106, <i32 3, i32 3, i32 3, i32 3>
  %117 = shl <4 x i32> %106, <i32 3, i32 3, i32 3, i32 3>
  %118 = and <4 x i32> %116, <i32 24, i32 24, i32 24, i32 24>
  %119 = and <4 x i32> %117, <i32 24, i32 24, i32 24, i32 24>
  %120 = xor <4 x i32> %118, <i32 24, i32 24, i32 24, i32 24>
  %121 = xor <4 x i32> %119, <i32 24, i32 24, i32 24, i32 24>
  %122 = shl <4 x i32> %114, %120
  %123 = shl <4 x i32> %115, %121
  %124 = or <4 x i32> %122, %104
  %125 = or <4 x i32> %123, %105
  %126 = add i64 %103, 8
  %127 = add <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %128 = icmp eq i64 %126, %96
  br i1 %128, label %129, label %102, !llvm.loop !4

129:                                              ; preds = %102
  %130 = or <4 x i32> %125, %124
  %131 = shufflevector <4 x i32> %130, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %132 = or <4 x i32> %130, %131
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %134 = or <4 x i32> %132, %133
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = icmp eq i64 %90, %96
  br i1 %136, label %147, label %92

137:                                              ; preds = %10, %137
  %138 = phi i32 [ %144, %137 ], [ %11, %10 ]
  %139 = phi i64 [ %145, %137 ], [ %12, %10 ]
  %140 = getelementptr inbounds i8, i8* %0, i64 %139
  %141 = bitcast i8* %140 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = tail call i32 @llvm.bswap.i32(i32 %142)
  %144 = add i32 %143, %138
  %145 = add nuw i64 %139, 4
  %146 = icmp ult i64 %145, %3
  br i1 %146, label %137, label %84, !llvm.loop !5

147:                                              ; preds = %150, %129, %87
  %148 = phi i32 [ 0, %87 ], [ %135, %129 ], [ %161, %150 ]
  %149 = add i32 %148, %85
  br label %164

150:                                              ; preds = %92, %150
  %151 = phi i64 [ %162, %150 ], [ %93, %92 ]
  %152 = phi i32 [ %161, %150 ], [ %94, %92 ]
  %153 = getelementptr inbounds i8, i8* %0, i64 %151
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = trunc i64 %151 to i32
  %157 = shl i32 %156, 3
  %158 = and i32 %157, 24
  %159 = xor i32 %158, 24
  %160 = shl i32 %155, %159
  %161 = or i32 %160, %152
  %162 = add nuw i64 %151, 1
  %163 = icmp eq i64 %162, %1
  br i1 %163, label %147, label %150, !llvm.loop !7

164:                                              ; preds = %84, %147
  %165 = phi i32 [ %149, %147 ], [ %85, %84 ]
  ret i32 %165
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5woff220CollectionHeaderSizeEjj(i32, i32) local_unnamed_addr #1 {
  %3 = icmp eq i32 %0, 131072
  %4 = select i1 %3, i64 12, i64 0
  switch i32 %0, label %10 [
    i32 131072, label %5
    i32 65536, label %5
  ]

5:                                                ; preds = %2, %2
  %6 = shl i32 %1, 2
  %7 = add i32 %6, 12
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %4, %8
  br label %10

10:                                               ; preds = %2, %5
  %11 = phi i64 [ %9, %5 ], [ %4, %2 ]
  ret i64 %11
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !6, !3}
