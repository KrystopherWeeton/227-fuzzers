; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/chunk/forward_tsn_chunk.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/chunk/forward_tsn_chunk.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::ForwardTsnChunk" }
%"class.dcsctp::ForwardTsnChunk" = type { %"class.dcsctp::AnyForwardTsnChunk" }
%"class.dcsctp::AnyForwardTsnChunk" = type { %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", %"class.std::__1::vector" }
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"class.std::__1::__compressed_pair" }
%"struct.dcsctp::AnyForwardTsnChunk::SkippedStream" = type { %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.1", %"class.dcsctp::StrongAlias.2", %"class.dcsctp::StrongAlias.3" }
%"class.dcsctp::StrongAlias.0" = type { i16 }
%"class.dcsctp::StrongAlias.1" = type { i16 }
%"class.dcsctp::StrongAlias.2" = type { i8 }
%"class.dcsctp::StrongAlias.3" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* }
%"class.absl::optional.5" = type { %"class.absl::optional_internal::optional_data.6" }
%"class.absl::optional_internal::optional_data.6" = type { %"class.absl::optional_internal::optional_data_base.7" }
%"class.absl::optional_internal::optional_data_base.7" = type { %"class.absl::optional_internal::optional_data_dtor_base.8" }
%"class.absl::optional_internal::optional_data_dtor_base.8" = type { i8, %union.anon.9 }
%union.anon.9 = type { %"class.dcsctp::BoundedByteReader" }
%"class.dcsctp::BoundedByteReader" = type { %"class.rtc::ArrayView" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i8*, i8*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.29 }
%union.anon.29 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::StringBuilder" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN6dcsctp8TLVTraitINS_21ForwardTsnChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE = comdat any

$_ZN6dcsctp18AnyForwardTsnChunkD2Ev = comdat any

$_ZN6dcsctp15ForwardTsnChunkD0Ev = comdat any

$_ZN6dcsctp18AnyForwardTsnChunkD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZTVN6dcsctp18AnyForwardTsnChunkE = comdat any

@_ZN6dcsctp15ForwardTsnChunk5kTypeE = hidden local_unnamed_addr constant i32 192, align 4
@.str = private unnamed_addr constant [33 x i8] c"FORWARD-TSN, new_cumulative_tsn=\00", align 1
@_ZTVN6dcsctp15ForwardTsnChunkE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyForwardTsnChunk"*)* @_ZN6dcsctp18AnyForwardTsnChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::ForwardTsnChunk"*)* @_ZN6dcsctp15ForwardTsnChunkD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::ForwardTsnChunk"*, %"class.std::__1::vector.15"*)* @_ZNK6dcsctp15ForwardTsnChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::ForwardTsnChunk"*)* @_ZNK6dcsctp15ForwardTsnChunk8ToStringEv to i8*)] }, align 8
@_ZTVN6dcsctp18AnyForwardTsnChunkE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyForwardTsnChunk"*)* @_ZN6dcsctp18AnyForwardTsnChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::AnyForwardTsnChunk"*)* @_ZN6dcsctp18AnyForwardTsnChunkD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp15ForwardTsnChunk5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::optional.5", align 8
  %5 = alloca %"class.std::__1::vector", align 16
  %6 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false)
  %7 = icmp eq i64 %2, 0
  %8 = select i1 %7, i8* null, i8* %1
  call void @_ZN6dcsctp8TLVTraitINS_21ForwardTsnChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.5"* nonnull sret %4, i8* %8, i64 %2)
  %9 = load i8, i8* %6, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 40, i1 false) #9
  br label %160

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 4
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw i32 %20, 24
  %22 = getelementptr inbounds i8, i8* %17, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl nuw nsw i32 %24, 16
  %26 = or i32 %25, %21
  %27 = getelementptr inbounds i8, i8* %17, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = or i32 %26, %30
  %32 = getelementptr inbounds i8, i8* %17, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %31, %34
  %36 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, -8
  %39 = lshr i64 %38, 2
  %40 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 0, i64 24, i1 false) #9
  %43 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %42 to i64*
  %44 = bitcast %"class.std::__1::vector"* %5 to i64*
  %45 = icmp eq i64 %39, 0
  br i1 %45, label %62, label %46

46:                                               ; preds = %15
  %47 = icmp ugt i64 %38, 6148914691236517207
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  call void @abort() #10
  unreachable

49:                                               ; preds = %46
  %50 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %41 to i64*
  %51 = mul i64 %39, 12
  %52 = call i8* @_Znwm(i64 %51) #11
  %53 = bitcast i8* %52 to %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*
  %54 = ptrtoint i8* %52 to i64
  %55 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %53, i64 %39
  %56 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %55 to i64
  store i64 %54, i64* %44, align 16
  store i64 %54, i64* %50, align 8
  store i64 %56, i64* %43, align 16
  %57 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %41 to i64*
  br label %73

58:                                               ; preds = %154
  %59 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 16
  %61 = load i64, i64* %43, align 16
  br label %62

62:                                               ; preds = %58, %15
  %63 = phi i64 [ %61, %58 ], [ 0, %15 ]
  %64 = phi <2 x i64> [ %60, %58 ], [ zeroinitializer, %15 ]
  %65 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store i32 %35, i32* %67, align 8
  %68 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %69 = bitcast %"class.std::__1::vector"* %68 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %69, align 8
  %70 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %71 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %70 to i64*
  store i64 %63, i64* %71, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp15ForwardTsnChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #9
  br label %160

72:                                               ; preds = %157
  call void @llvm.trap() #9
  unreachable

73:                                               ; preds = %49, %157
  %74 = phi i64 [ 0, %49 ], [ %155, %157 ]
  %75 = shl i64 %74, 2
  %76 = add i64 %75, 8
  %77 = load i64, i64* %36, align 8
  %78 = icmp ugt i64 %77, %76
  %79 = load i8*, i8** %16, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 %76
  %81 = select i1 %78, i8* %80, i8* null
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = shl nuw i16 %83, 8
  %85 = getelementptr inbounds i8, i8* %81, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = or i16 %84, %87
  %89 = getelementptr inbounds i8, i8* %81, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = shl nuw i16 %91, 8
  %93 = getelementptr inbounds i8, i8* %81, i64 3
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  %96 = or i16 %92, %95
  %97 = load %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %41, align 8
  %98 = load %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %42, align 16
  %99 = icmp ult %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, %98
  %100 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %98 to i64
  br i1 %99, label %101, label %108

101:                                              ; preds = %73
  %102 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, i64 0, i32 0, i32 0
  store i16 %88, i16* %102, align 4
  %103 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, i64 0, i32 1, i32 0
  store i16 %96, i16* %103, align 2
  %104 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, i64 0, i32 2, i32 0
  store i8 0, i8* %104, align 1
  %105 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, i64 0, i32 3, i32 0
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97, i64 1
  %107 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %106 to i64
  store i64 %107, i64* %57, align 8
  br label %154

108:                                              ; preds = %73
  %109 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %97 to i64
  %110 = load i64, i64* %44, align 16
  %111 = sub i64 %109, %110
  %112 = sdiv exact i64 %111, 12
  %113 = add nsw i64 %112, 1
  %114 = icmp ugt i64 %113, 1537228672809129301
  br i1 %114, label %115, label %117

115:                                              ; preds = %108
  %116 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %116) #10
  unreachable

117:                                              ; preds = %108
  %118 = sub i64 %100, %110
  %119 = sdiv exact i64 %118, 12
  %120 = icmp ult i64 %119, 768614336404564650
  br i1 %120, label %121, label %126

121:                                              ; preds = %117
  %122 = shl nsw i64 %119, 1
  %123 = icmp ult i64 %122, %113
  %124 = select i1 %123, i64 %113, i64 %122
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %121, %117
  %127 = phi i64 [ %124, %121 ], [ 1537228672809129301, %117 ]
  %128 = mul i64 %127, 12
  %129 = call i8* @_Znwm(i64 %128) #11
  %130 = bitcast i8* %129 to %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*
  br label %131

131:                                              ; preds = %126, %121
  %132 = phi i64 [ %127, %126 ], [ 0, %121 ]
  %133 = phi %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* [ %130, %126 ], [ null, %121 ]
  %134 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %133, i64 %112
  %135 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %133, i64 %132
  %136 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %135 to i64
  %137 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %134, i64 0, i32 0, i32 0
  store i16 %88, i16* %137, align 4
  %138 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %133, i64 %112, i32 1, i32 0
  store i16 %96, i16* %138, align 2
  %139 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %133, i64 %112, i32 2, i32 0
  store i8 0, i8* %139, align 1
  %140 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %133, i64 %112, i32 3, i32 0
  store i32 0, i32* %140, align 4
  %141 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %134, i64 1
  %142 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %141 to i64
  %143 = sdiv exact i64 %111, -12
  %144 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %134, i64 %143
  %145 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %144 to i64
  %146 = icmp sgt i64 %111, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %131
  %148 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %144 to i8*
  %149 = inttoptr i64 %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %149, i64 %111, i1 false) #9
  br label %150

150:                                              ; preds = %147, %131
  store i64 %145, i64* %44, align 16
  store i64 %142, i64* %57, align 8
  store i64 %136, i64* %43, align 16
  %151 = icmp eq i64 %110, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %150
  %153 = inttoptr i64 %110 to i8*
  call void @_ZdlPv(i8* %153) #11
  br label %154

154:                                              ; preds = %152, %150, %101
  %155 = add nuw nsw i64 %74, 1
  %156 = icmp eq i64 %155, %39
  br i1 %156, label %58, label %157

157:                                              ; preds = %154
  %158 = load i8, i8* %6, align 8, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %72, label %73, !prof !3

160:                                              ; preds = %62, %11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp8TLVTraitINS_21ForwardTsnChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.5"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ult i64 %2, 8
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 8) #9
  %6 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  br label %42

7:                                                ; preds = %3
  %8 = load i8, i8* %1, align 1
  %9 = icmp eq i8 %8, -64
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = zext i8 %8 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %11, i32 192) #9
  %12 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 8
  br label %42

13:                                               ; preds = %7
  %14 = getelementptr inbounds i8, i8* %1, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = shl nuw i16 %16, 8
  %18 = getelementptr inbounds i8, i8* %1, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = or i16 %17, %20
  %22 = zext i16 %21 to i64
  %23 = icmp ugt i64 %22, %2
  %24 = icmp ult i16 %21, 8
  %25 = or i1 %24, %23
  br i1 %25, label %26, label %28

26:                                               ; preds = %13
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %22, i64 %2) #9
  %27 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %27, align 8
  br label %42

28:                                               ; preds = %13
  %29 = sub i64 %2, %22
  %30 = icmp ugt i64 %29, 3
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %29) #9
  %32 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %32, align 8
  br label %42

33:                                               ; preds = %28
  %34 = and i16 %20, 3
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  tail call void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64 %22, i64 4) #9
  %37 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %37, align 8
  br label %42

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %39, align 8
  %40 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8* %1, i8** %40, align 8
  %41 = getelementptr inbounds %"class.absl::optional.5", %"class.absl::optional.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %41, align 8
  br label %42

42:                                               ; preds = %10, %36, %31, %38, %26, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp18AnyForwardTsnChunkD2Ev(%"class.dcsctp::AnyForwardTsnChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::AnyForwardTsnChunk", %"class.dcsctp::AnyForwardTsnChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp18AnyForwardTsnChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::AnyForwardTsnChunk", %"class.dcsctp::AnyForwardTsnChunk"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %3, align 8
  %5 = icmp eq %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::AnyForwardTsnChunk", %"class.dcsctp::AnyForwardTsnChunk"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp15ForwardTsnChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::ForwardTsnChunk"* nocapture readonly, %"class.std::__1::vector.15"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = load %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %3, align 8
  %5 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %6 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4 to i64
  %9 = sub i64 %7, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp eq i64 %9, 0
  %12 = select i1 %11, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* null, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4
  %13 = shl nsw i64 %10, 2
  %14 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %1, i64 0, i32 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector.15"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = add nsw i64 %13, 8
  %21 = add i64 %20, %19
  %22 = icmp ult i64 %19, %21
  %23 = inttoptr i64 %18 to i8*
  br i1 %22, label %24, label %27

24:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.15"* %1, i64 %20) #9
  %25 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %1, i64 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %31

27:                                               ; preds = %2
  %28 = icmp ugt i64 %19, %21
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = getelementptr inbounds i8, i8* %23, i64 %21
  store i8* %30, i8** %14, align 8
  br label %31

31:                                               ; preds = %24, %27, %29
  %32 = phi i8* [ %26, %24 ], [ %23, %27 ], [ %23, %29 ]
  %33 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %1, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %32, i64 %19
  store i8 -64, i8* %34, align 1
  %35 = trunc i64 %20 to i16
  %36 = getelementptr inbounds i8, i8* %34, i64 2
  %37 = lshr i16 %35, 8
  %38 = trunc i16 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = trunc i64 %20 to i8
  %40 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %39, i8* %40, align 1
  %41 = load i8*, i8** %33, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 %19
  %43 = icmp eq i64 %20, 0
  %44 = select i1 %43, i8* null, i8* %42
  %45 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 1, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds i8, i8* %44, i64 4
  %48 = lshr i32 %46, 24
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = lshr i32 %46, 16
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %44, i64 5
  store i8 %51, i8* %52, align 1
  %53 = lshr i32 %46, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %44, i64 6
  store i8 %54, i8* %55, align 1
  %56 = trunc i32 %46 to i8
  %57 = getelementptr inbounds i8, i8* %44, i64 7
  store i8 %56, i8* %57, align 1
  br i1 %11, label %58, label %59

58:                                               ; preds = %59, %31
  ret void

59:                                               ; preds = %31, %59
  %60 = phi i64 [ %79, %59 ], [ 0, %31 ]
  %61 = shl i64 %60, 2
  %62 = add i64 %61, 8
  %63 = icmp ugt i64 %20, %62
  %64 = getelementptr inbounds i8, i8* %44, i64 %62
  %65 = select i1 %63, i8* %64, i8* null
  %66 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %12, i64 %60, i32 0, i32 0
  %67 = load i16, i16* %66, align 2
  %68 = lshr i16 %67, 8
  %69 = trunc i16 %68 to i8
  store i8 %69, i8* %65, align 1
  %70 = trunc i16 %67 to i8
  %71 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream", %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %12, i64 %60, i32 1, i32 0
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds i8, i8* %65, i64 2
  %75 = lshr i16 %73, 8
  %76 = trunc i16 %75 to i8
  store i8 %76, i8* %74, align 1
  %77 = trunc i16 %73 to i8
  %78 = getelementptr inbounds i8, i8* %65, i64 3
  store i8 %77, i8* %78, align 1
  %79 = add nuw i64 %60, 1
  %80 = icmp ult i64 %79, %10
  br i1 %80, label %59, label %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp15ForwardTsnChunk8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.dcsctp::ForwardTsnChunk"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.rtc::StringBuilder", align 8
  %5 = bitcast %"class.rtc::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #9
  %8 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %4, i64 0, i32 0
  %9 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i64 32) #9
  %10 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %1, i64 0, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %11) #9
  %13 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = zext i8 %15 to i64
  %22 = select i1 %16, i8* %18, i8* %12
  %23 = select i1 %16, i64 %20, i64 %21
  %24 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %8, i8* %22, i64 %23) #9
  %25 = load i8, i8* %14, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %2
  %28 = load i8*, i8** %17, align 8
  call void @_ZdlPv(i8* %28) #11
  br label %29

29:                                               ; preds = %2, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  %30 = bitcast %"class.rtc::StringBuilder"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %29
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %5, i64 24, i1 false) #9
  br label %43

36:                                               ; preds = %29
  %37 = load i8*, i8** %6, align 8
  %38 = load i64, i64* %7, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %37, i64 %38) #9
  %39 = load i8, i8* %31, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %34, %36, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp15ForwardTsnChunkD0Ev(%"class.dcsctp::ForwardTsnChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp18AnyForwardTsnChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = load %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"*, %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %3, align 8
  %5 = icmp eq %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::ForwardTsnChunk", %"class.dcsctp::ForwardTsnChunk"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %9 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.dcsctp::AnyForwardTsnChunk::SkippedStream"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.dcsctp::ForwardTsnChunk"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp18AnyForwardTsnChunkD0Ev(%"class.dcsctp::AnyForwardTsnChunk"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

declare void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl27ReportInvalidLengthMultipleEmm(i64, i64) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.15"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
