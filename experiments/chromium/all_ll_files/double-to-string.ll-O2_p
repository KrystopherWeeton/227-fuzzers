; ModuleID = '../../base/third_party/double_conversion/double-conversion/double-to-string.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/double-to-string.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.double_conversion::DoubleToStringConverter" = type { i32, i8*, i8*, i8, i32, i32, i32, i32, i32 }
%"class.double_conversion::StringBuilder" = type { %"class.double_conversion::Vector", i32, [4 x i8] }
%"class.double_conversion::Vector" = type <{ i8*, i32, [4 x i8] }>

@_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter = internal global %"class.double_conversion::DoubleToStringConverter" zeroinitializer, align 8
@_ZGVZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter = internal global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"Infinity\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"NaN\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden nonnull dereferenceable(48) %"class.double_conversion::DoubleToStringConverter"* @_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter) #7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  store i32 9, i32* getelementptr inbounds (%"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter, i64 0, i32 0), align 8
  store <2 x i8*> <i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)>, <2 x i8*>* bitcast (i8** getelementptr inbounds (%"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter, i64 0, i32 1) to <2 x i8*>*), align 8
  store i8 101, i8* getelementptr inbounds (%"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter, i64 0, i32 3), align 8
  store <4 x i32> <i32 -6, i32 21, i32 6, i32 0>, <4 x i32>* bitcast (i32* getelementptr inbounds (%"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter, i64 0, i32 4) to <4 x i32>*), align 4
  store i32 0, i32* getelementptr inbounds (%"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter, i64 0, i32 8), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter) #7
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.double_conversion::DoubleToStringConverter"* @_ZZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEvE9converter
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter19HandleSpecialValuesEdPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, double, %"class.double_conversion::StringBuilder"* nocapture) local_unnamed_addr #3 align 2 {
  %4 = bitcast double %1 to i64
  %5 = and i64 %4, 9223372036854775807
  %6 = icmp eq i64 %5, 9218868437227405312
  br i1 %6, label %7, label %36

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %59, label %11

11:                                               ; preds = %7
  %12 = fcmp olt double %1, 0.000000e+00
  br i1 %12, label %13, label %22

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 8
  %17 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = sext i32 %15 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  store i8 45, i8* %20, align 1
  %21 = load i8*, i8** %8, align 8
  br label %22

22:                                               ; preds = %13, %11
  %23 = phi i8* [ %21, %13 ], [ %9, %11 ]
  %24 = tail call i64 @strlen(i8* %23) #8
  %25 = trunc i64 %24 to i32
  %26 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = sext i32 %27 to i64
  %31 = getelementptr inbounds i8, i8* %29, i64 %30
  %32 = shl i64 %24, 32
  %33 = ashr exact i64 %32, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %23, i64 %33, i1 false) #7
  %34 = load i32, i32* %26, align 8
  %35 = add nsw i32 %34, %25
  store i32 %35, i32* %26, align 8
  br label %59

36:                                               ; preds = %3
  %37 = and i64 %4, 9218868437227405312
  %38 = icmp eq i64 %37, 9218868437227405312
  %39 = and i64 %4, 4503599627370495
  %40 = icmp ne i64 %39, 0
  %41 = and i1 %38, %40
  br i1 %41, label %42, label %59

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 2
  %44 = load i8*, i8** %43, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %42
  %47 = tail call i64 @strlen(i8* nonnull %44) #8
  %48 = trunc i64 %47 to i32
  %49 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = shl i64 %47, 32
  %56 = ashr exact i64 %55, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %54, i8* nonnull align 1 %44, i64 %56, i1 false) #7
  %57 = load i32, i32* %49, align 8
  %58 = add nsw i32 %57, %48
  store i32 %58, i32* %49, align 8
  br label %59

59:                                               ; preds = %36, %42, %7, %46, %22
  %60 = phi i1 [ true, %22 ], [ true, %46 ], [ false, %7 ], [ false, %42 ], [ false, %36 ]
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK17double_conversion23DoubleToStringConverter31CreateExponentialRepresentationEPKciiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, i8* nocapture readonly, i32, i32, %"class.double_conversion::StringBuilder"* nocapture) local_unnamed_addr #3 align 2 {
  %6 = alloca [6 x i8], align 1
  %7 = load i8, i8* %1, align 1
  %8 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 8
  %11 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %9 to i64
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8 %7, i8* %14, align 1
  %15 = icmp eq i32 %2, 1
  %16 = load i32, i32* %8, align 8
  br i1 %15, label %31, label %17

17:                                               ; preds = %5
  %18 = add nsw i32 %16, 1
  store i32 %18, i32* %8, align 8
  %19 = load i8*, i8** %11, align 8
  %20 = sext i32 %16 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  store i8 46, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %1, i64 1
  %23 = add nsw i32 %2, -1
  %24 = load i32, i32* %8, align 8
  %25 = load i8*, i8** %11, align 8
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  %28 = sext i32 %23 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %22, i64 %28, i1 false) #7
  %29 = load i32, i32* %8, align 8
  %30 = add nsw i32 %29, %23
  store i32 %30, i32* %8, align 8
  br label %31

31:                                               ; preds = %5, %17
  %32 = phi i32 [ %30, %17 ], [ %16, %5 ]
  %33 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 8
  %35 = add nsw i32 %32, 1
  store i32 %35, i32* %8, align 8
  %36 = load i8*, i8** %11, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  store i8 %34, i8* %38, align 1
  %39 = icmp slt i32 %3, 0
  br i1 %39, label %40, label %47

40:                                               ; preds = %31
  %41 = load i32, i32* %8, align 8
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %8, align 8
  %43 = load i8*, i8** %11, align 8
  %44 = sext i32 %41 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  store i8 45, i8* %45, align 1
  %46 = sub nsw i32 0, %3
  br label %66

47:                                               ; preds = %31
  %48 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %47
  %53 = load i32, i32* %8, align 8
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %8, align 8
  %55 = load i8*, i8** %11, align 8
  %56 = sext i32 %53 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  store i8 43, i8* %57, align 1
  br label %58

58:                                               ; preds = %47, %52
  %59 = icmp eq i32 %3, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %58
  %61 = load i32, i32* %8, align 8
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %8, align 8
  %63 = load i8*, i8** %11, align 8
  %64 = sext i32 %61 to i64
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  store i8 48, i8* %65, align 1
  br label %184

66:                                               ; preds = %40, %58
  %67 = phi i32 [ %46, %40 ], [ %3, %58 ]
  %68 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %68) #7
  %69 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %68, i8 -86, i64 5, i1 false)
  store i8 0, i8* %69, align 1
  %70 = icmp sgt i32 %67, 0
  br i1 %70, label %151, label %73

71:                                               ; preds = %151
  %72 = trunc i64 %157 to i32
  br label %73

73:                                               ; preds = %71, %66
  %74 = phi i32 [ 5, %66 ], [ %72, %71 ]
  %75 = sub nsw i32 5, %74
  %76 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 8
  %77 = load i32, i32* %76, align 4
  %78 = icmp slt i32 %77, 5
  %79 = select i1 %78, i32 %77, i32 5
  %80 = icmp slt i32 %75, %79
  br i1 %80, label %81, label %172

81:                                               ; preds = %73
  %82 = sext i32 %74 to i64
  %83 = sub i32 6, %74
  %84 = icmp sgt i32 %79, %83
  %85 = select i1 %84, i32 %79, i32 %83
  %86 = add i32 %74, %85
  %87 = add i32 %86, -6
  %88 = zext i32 %87 to i64
  %89 = xor i64 %88, -1
  %90 = add nsw i64 %89, %82
  %91 = getelementptr [6 x i8], [6 x i8]* %6, i64 0, i64 %90
  %92 = add nuw nsw i64 %88, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 48, i64 %92, i1 false)
  %93 = add i32 %74, %79
  %94 = add i32 %93, -5
  %95 = icmp ult i32 %94, 4
  br i1 %95, label %96, label %99

96:                                               ; preds = %141, %81
  %97 = phi i64 [ %82, %81 ], [ %148, %141 ]
  %98 = phi i32 [ %74, %81 ], [ %101, %141 ]
  br label %161

99:                                               ; preds = %81
  %100 = and i32 %94, -4
  %101 = sub i32 %74, %100
  %102 = add i32 %74, -1
  %103 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %82, i32 0
  %104 = add i32 %100, -4
  %105 = lshr exact i32 %104, 2
  %106 = add nuw nsw i32 %105, 1
  %107 = and i32 %106, 3
  %108 = icmp ult i32 %104, 12
  br i1 %108, label %123, label %109

109:                                              ; preds = %99
  %110 = sub nsw i32 %106, %107
  br label %111

111:                                              ; preds = %111, %109
  %112 = phi <2 x i64> [ %103, %109 ], [ %116, %111 ]
  %113 = phi <2 x i64> [ zeroinitializer, %109 ], [ %117, %111 ]
  %114 = phi i32 [ %102, %109 ], [ %118, %111 ]
  %115 = phi i32 [ %110, %109 ], [ %119, %111 ]
  %116 = add nsw <2 x i64> %112, <i64 -4, i64 -4>
  %117 = add nsw <2 x i64> %113, <i64 -4, i64 -4>
  %118 = add i32 %114, -16
  %119 = add i32 %115, -4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %111, !llvm.loop !3

121:                                              ; preds = %111
  %122 = add i32 %114, -12
  br label %123

123:                                              ; preds = %121, %99
  %124 = phi i32 [ undef, %99 ], [ %122, %121 ]
  %125 = phi <2 x i64> [ undef, %99 ], [ %116, %121 ]
  %126 = phi <2 x i64> [ undef, %99 ], [ %117, %121 ]
  %127 = phi <2 x i64> [ %103, %99 ], [ %116, %121 ]
  %128 = phi <2 x i64> [ zeroinitializer, %99 ], [ %117, %121 ]
  %129 = phi i32 [ %102, %99 ], [ %118, %121 ]
  %130 = icmp eq i32 %107, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %123, %131
  %132 = phi <2 x i64> [ %136, %131 ], [ %127, %123 ]
  %133 = phi <2 x i64> [ %137, %131 ], [ %128, %123 ]
  %134 = phi i32 [ %138, %131 ], [ %129, %123 ]
  %135 = phi i32 [ %139, %131 ], [ %107, %123 ]
  %136 = add nsw <2 x i64> %132, <i64 -1, i64 -1>
  %137 = add nsw <2 x i64> %133, <i64 -1, i64 -1>
  %138 = add i32 %134, -4
  %139 = add i32 %135, -1
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %131, !llvm.loop !5

141:                                              ; preds = %131, %123
  %142 = phi i32 [ %124, %123 ], [ %134, %131 ]
  %143 = phi <2 x i64> [ %125, %123 ], [ %136, %131 ]
  %144 = phi <2 x i64> [ %126, %123 ], [ %137, %131 ]
  %145 = add <2 x i64> %144, %143
  %146 = shufflevector <2 x i64> %145, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %147 = add <2 x i64> %145, %146
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = icmp eq i32 %94, %100
  %150 = sub i32 8, %142
  br i1 %149, label %168, label %96

151:                                              ; preds = %66, %151
  %152 = phi i64 [ %157, %151 ], [ 5, %66 ]
  %153 = phi i32 [ %159, %151 ], [ %67, %66 ]
  %154 = urem i32 %153, 10
  %155 = trunc i32 %154 to i8
  %156 = or i8 %155, 48
  %157 = add nsw i64 %152, -1
  %158 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 %157
  store i8 %156, i8* %158, align 1
  %159 = udiv i32 %153, 10
  %160 = icmp ugt i32 %153, 9
  br i1 %160, label %151, label %71

161:                                              ; preds = %96, %161
  %162 = phi i64 [ %164, %161 ], [ %97, %96 ]
  %163 = phi i32 [ %165, %161 ], [ %98, %96 ]
  %164 = add nsw i64 %162, -1
  %165 = add nsw i32 %163, -1
  %166 = sub i32 6, %163
  %167 = icmp slt i32 %166, %79
  br i1 %167, label %161, label %168, !llvm.loop !7

168:                                              ; preds = %161, %141
  %169 = phi i64 [ %148, %141 ], [ %164, %161 ]
  %170 = phi i32 [ %150, %141 ], [ %166, %161 ]
  %171 = trunc i64 %169 to i32
  br label %172

172:                                              ; preds = %168, %73
  %173 = phi i32 [ %74, %73 ], [ %171, %168 ]
  %174 = phi i32 [ %75, %73 ], [ %170, %168 ]
  %175 = sext i32 %173 to i64
  %176 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 %175
  %177 = load i32, i32* %8, align 8
  %178 = load i8*, i8** %11, align 8
  %179 = sext i32 %177 to i64
  %180 = getelementptr inbounds i8, i8* %178, i64 %179
  %181 = sext i32 %174 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* align 1 %176, i64 %181, i1 false) #7
  %182 = load i32, i32* %8, align 8
  %183 = add nsw i32 %182, %174
  store i32 %183, i32* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %68) #7
  br label %184

184:                                              ; preds = %172, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK17double_conversion23DoubleToStringConverter27CreateDecimalRepresentationEPKciiiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, i8* nocapture readonly, i32, i32, i32, %"class.double_conversion::StringBuilder"*) local_unnamed_addr #3 align 2 {
  %7 = icmp slt i32 %3, 1
  br i1 %7, label %8, label %92

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = sext i32 %10 to i64
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  store i8 48, i8* %15, align 1
  %16 = icmp sgt i32 %4, 0
  br i1 %16, label %17, label %240

17:                                               ; preds = %8
  %18 = load i32, i32* %9, align 8
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %9, align 8
  %20 = load i8*, i8** %12, align 8
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  store i8 46, i8* %22, align 1
  %23 = icmp slt i32 %3, 0
  br i1 %23, label %24, label %52

24:                                               ; preds = %17
  %25 = sub i32 0, %3
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %3, -1
  br i1 %27, label %44, label %28

28:                                               ; preds = %24
  %29 = sub i32 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i32 [ %29, %28 ], [ %42, %30 ]
  %32 = load i32, i32* %9, align 8
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %9, align 8
  %34 = load i8*, i8** %12, align 8
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  store i8 48, i8* %36, align 1
  %37 = load i32, i32* %9, align 8
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %9, align 8
  %39 = load i8*, i8** %12, align 8
  %40 = sext i32 %37 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  store i8 48, i8* %41, align 1
  %42 = add i32 %31, -2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %30

44:                                               ; preds = %30, %24
  %45 = icmp eq i32 %26, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %44
  %47 = load i32, i32* %9, align 8
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %9, align 8
  %49 = load i8*, i8** %12, align 8
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 48, i8* %51, align 1
  br label %52

52:                                               ; preds = %46, %44, %17
  %53 = load i32, i32* %9, align 8
  %54 = load i8*, i8** %12, align 8
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds i8, i8* %54, i64 %55
  %57 = sext i32 %2 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %1, i64 %57, i1 false) #7
  %58 = load i32, i32* %9, align 8
  %59 = add nsw i32 %58, %2
  store i32 %59, i32* %9, align 8
  %60 = sub i32 %3, %2
  %61 = add i32 %60, %4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %240

63:                                               ; preds = %52
  %64 = add nsw i32 %59, 1
  store i32 %64, i32* %9, align 8
  %65 = load i8*, i8** %12, align 8
  %66 = sext i32 %59 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8 48, i8* %67, align 1
  %68 = icmp eq i32 %61, 1
  br i1 %68, label %240, label %69

69:                                               ; preds = %63
  %70 = add i32 %4, %3
  %71 = xor i32 %2, -1
  %72 = add i32 %70, %71
  %73 = add i32 %70, -2
  %74 = and i32 %72, 1
  %75 = icmp eq i32 %73, %2
  br i1 %75, label %216, label %76

76:                                               ; preds = %69
  %77 = sub i32 %72, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i32 [ %77, %76 ], [ %90, %78 ]
  %80 = load i32, i32* %9, align 8
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %9, align 8
  %82 = load i8*, i8** %12, align 8
  %83 = sext i32 %80 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 48, i8* %84, align 1
  %85 = load i32, i32* %9, align 8
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %9, align 8
  %87 = load i8*, i8** %12, align 8
  %88 = sext i32 %85 to i64
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  store i8 48, i8* %89, align 1
  %90 = add i32 %79, -2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %216, label %78

92:                                               ; preds = %6
  %93 = icmp slt i32 %3, %2
  %94 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = sext i32 %95 to i64
  %99 = getelementptr inbounds i8, i8* %97, i64 %98
  br i1 %93, label %168, label %100

100:                                              ; preds = %92
  %101 = sext i32 %2 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %1, i64 %101, i1 false) #7
  %102 = load i32, i32* %94, align 8
  %103 = add nsw i32 %102, %2
  store i32 %103, i32* %94, align 8
  %104 = sub nsw i32 %3, %2
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %142

106:                                              ; preds = %100
  %107 = add nsw i32 %103, 1
  store i32 %107, i32* %94, align 8
  %108 = load i8*, i8** %96, align 8
  %109 = sext i32 %103 to i64
  %110 = getelementptr inbounds i8, i8* %108, i64 %109
  store i8 48, i8* %110, align 1
  %111 = icmp eq i32 %104, 1
  br i1 %111, label %142, label %112

112:                                              ; preds = %106
  %113 = xor i32 %2, -1
  %114 = add i32 %113, %3
  %115 = add i32 %3, -2
  %116 = and i32 %114, 1
  %117 = icmp eq i32 %115, %2
  br i1 %117, label %134, label %118

118:                                              ; preds = %112
  %119 = sub i32 %114, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i32 [ %119, %118 ], [ %132, %120 ]
  %122 = load i32, i32* %94, align 8
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %94, align 8
  %124 = load i8*, i8** %96, align 8
  %125 = sext i32 %122 to i64
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  store i8 48, i8* %126, align 1
  %127 = load i32, i32* %94, align 8
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %94, align 8
  %129 = load i8*, i8** %96, align 8
  %130 = sext i32 %127 to i64
  %131 = getelementptr inbounds i8, i8* %129, i64 %130
  store i8 48, i8* %131, align 1
  %132 = add i32 %121, -2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %120

134:                                              ; preds = %120, %112
  %135 = icmp eq i32 %116, 0
  br i1 %135, label %142, label %136

136:                                              ; preds = %134
  %137 = load i32, i32* %94, align 8
  %138 = add nsw i32 %137, 1
  store i32 %138, i32* %94, align 8
  %139 = load i8*, i8** %96, align 8
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds i8, i8* %139, i64 %140
  store i8 48, i8* %141, align 1
  br label %142

142:                                              ; preds = %136, %134, %106, %100
  %143 = icmp sgt i32 %4, 0
  br i1 %143, label %144, label %240

144:                                              ; preds = %142
  %145 = load i32, i32* %94, align 8
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %94, align 8
  %147 = load i8*, i8** %96, align 8
  %148 = sext i32 %145 to i64
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  store i8 46, i8* %149, align 1
  %150 = and i32 %4, 1
  %151 = icmp eq i32 %4, 1
  br i1 %151, label %232, label %152

152:                                              ; preds = %144
  %153 = sub i32 %4, %150
  br label %154

154:                                              ; preds = %154, %152
  %155 = phi i32 [ %153, %152 ], [ %166, %154 ]
  %156 = load i32, i32* %94, align 8
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %94, align 8
  %158 = load i8*, i8** %96, align 8
  %159 = sext i32 %156 to i64
  %160 = getelementptr inbounds i8, i8* %158, i64 %159
  store i8 48, i8* %160, align 1
  %161 = load i32, i32* %94, align 8
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %94, align 8
  %163 = load i8*, i8** %96, align 8
  %164 = sext i32 %161 to i64
  %165 = getelementptr inbounds i8, i8* %163, i64 %164
  store i8 48, i8* %165, align 1
  %166 = add i32 %155, -2
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %232, label %154

168:                                              ; preds = %92
  %169 = sext i32 %3 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %1, i64 %169, i1 false) #7
  %170 = load i32, i32* %94, align 8
  %171 = add nsw i32 %170, %3
  %172 = add nsw i32 %171, 1
  store i32 %172, i32* %94, align 8
  %173 = load i8*, i8** %96, align 8
  %174 = sext i32 %171 to i64
  %175 = getelementptr inbounds i8, i8* %173, i64 %174
  store i8 46, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %1, i64 %169
  %177 = sub nsw i32 %2, %3
  %178 = load i32, i32* %94, align 8
  %179 = load i8*, i8** %96, align 8
  %180 = sext i32 %178 to i64
  %181 = getelementptr inbounds i8, i8* %179, i64 %180
  %182 = sext i32 %177 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %176, i64 %182, i1 false) #7
  %183 = load i32, i32* %94, align 8
  %184 = add nsw i32 %183, %177
  store i32 %184, i32* %94, align 8
  %185 = sub nsw i32 %4, %177
  %186 = icmp sgt i32 %185, 0
  br i1 %186, label %187, label %240

187:                                              ; preds = %168
  %188 = add nsw i32 %184, 1
  store i32 %188, i32* %94, align 8
  %189 = load i8*, i8** %96, align 8
  %190 = sext i32 %184 to i64
  %191 = getelementptr inbounds i8, i8* %189, i64 %190
  store i8 48, i8* %191, align 1
  %192 = icmp eq i32 %185, 1
  br i1 %192, label %240, label %193

193:                                              ; preds = %187
  %194 = add i32 %4, %3
  %195 = xor i32 %2, -1
  %196 = add i32 %194, %195
  %197 = add i32 %194, -2
  %198 = and i32 %196, 1
  %199 = icmp eq i32 %197, %2
  br i1 %199, label %224, label %200

200:                                              ; preds = %193
  %201 = sub i32 %196, %198
  br label %202

202:                                              ; preds = %202, %200
  %203 = phi i32 [ %201, %200 ], [ %214, %202 ]
  %204 = load i32, i32* %94, align 8
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %94, align 8
  %206 = load i8*, i8** %96, align 8
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds i8, i8* %206, i64 %207
  store i8 48, i8* %208, align 1
  %209 = load i32, i32* %94, align 8
  %210 = add nsw i32 %209, 1
  store i32 %210, i32* %94, align 8
  %211 = load i8*, i8** %96, align 8
  %212 = sext i32 %209 to i64
  %213 = getelementptr inbounds i8, i8* %211, i64 %212
  store i8 48, i8* %213, align 1
  %214 = add i32 %203, -2
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %224, label %202

216:                                              ; preds = %78, %69
  %217 = icmp eq i32 %74, 0
  br i1 %217, label %240, label %218

218:                                              ; preds = %216
  %219 = load i32, i32* %9, align 8
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* %9, align 8
  %221 = load i8*, i8** %12, align 8
  %222 = sext i32 %219 to i64
  %223 = getelementptr inbounds i8, i8* %221, i64 %222
  store i8 48, i8* %223, align 1
  br label %240

224:                                              ; preds = %202, %193
  %225 = icmp eq i32 %198, 0
  br i1 %225, label %240, label %226

226:                                              ; preds = %224
  %227 = load i32, i32* %94, align 8
  %228 = add nsw i32 %227, 1
  store i32 %228, i32* %94, align 8
  %229 = load i8*, i8** %96, align 8
  %230 = sext i32 %227 to i64
  %231 = getelementptr inbounds i8, i8* %229, i64 %230
  store i8 48, i8* %231, align 1
  br label %240

232:                                              ; preds = %154, %144
  %233 = icmp eq i32 %150, 0
  br i1 %233, label %240, label %234

234:                                              ; preds = %232
  %235 = load i32, i32* %94, align 8
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %94, align 8
  %237 = load i8*, i8** %96, align 8
  %238 = sext i32 %235 to i64
  %239 = getelementptr inbounds i8, i8* %237, i64 %238
  store i8 48, i8* %239, align 1
  br label %240

240:                                              ; preds = %234, %232, %226, %224, %218, %216, %187, %63, %168, %52, %142, %8
  %241 = icmp eq i32 %4, 0
  br i1 %241, label %242, label %268

242:                                              ; preds = %240
  %243 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %244 = load i32, i32* %243, align 8
  %245 = and i32 %244, 2
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %256, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 1
  %249 = load i32, i32* %248, align 8
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %248, align 8
  %251 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 0, i32 0
  %252 = load i8*, i8** %251, align 8
  %253 = sext i32 %249 to i64
  %254 = getelementptr inbounds i8, i8* %252, i64 %253
  store i8 46, i8* %254, align 1
  %255 = load i32, i32* %243, align 8
  br label %256

256:                                              ; preds = %242, %247
  %257 = phi i32 [ %244, %242 ], [ %255, %247 ]
  %258 = and i32 %257, 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %268, label %260

260:                                              ; preds = %256
  %261 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 1
  %262 = load i32, i32* %261, align 8
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %261, align 8
  %264 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %5, i64 0, i32 0, i32 0
  %265 = load i8*, i8** %264, align 8
  %266 = sext i32 %262 to i64
  %267 = getelementptr inbounds i8, i8* %265, i64 %266
  store i8 48, i8* %267, align 1
  br label %268

268:                                              ; preds = %256, %260, %240
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter20ToShortestIeeeNumberEdPNS_13StringBuilderENS0_8DtoaModeE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, double, %"class.double_conversion::StringBuilder"*, i32) local_unnamed_addr #3 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca [18 x i8], align 16
  %8 = alloca i32, align 4
  %9 = bitcast double %1 to i64
  %10 = and i64 %9, 9218868437227405312
  %11 = icmp eq i64 %10, 9218868437227405312
  br i1 %11, label %12, label %64

12:                                               ; preds = %4
  %13 = and i64 %9, 9223372036854775807
  %14 = icmp eq i64 %13, 9218868437227405312
  br i1 %14, label %15, label %44

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %103, label %19

19:                                               ; preds = %15
  %20 = fcmp olt double %1, 0.000000e+00
  br i1 %20, label %21, label %30

21:                                               ; preds = %19
  %22 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %22, align 8
  %25 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = sext i32 %23 to i64
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  store i8 45, i8* %28, align 1
  %29 = load i8*, i8** %16, align 8
  br label %30

30:                                               ; preds = %21, %19
  %31 = phi i8* [ %29, %21 ], [ %17, %19 ]
  %32 = tail call i64 @strlen(i8* %31) #8
  %33 = trunc i64 %32 to i32
  %34 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = sext i32 %35 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = shl i64 %32, 32
  %41 = ashr exact i64 %40, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %31, i64 %41, i1 false) #7
  %42 = load i32, i32* %34, align 8
  %43 = add nsw i32 %42, %33
  store i32 %43, i32* %34, align 8
  br label %103

44:                                               ; preds = %12
  %45 = and i64 %9, 4503599627370495
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %103, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 2
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %103, label %51

51:                                               ; preds = %47
  %52 = tail call i64 @strlen(i8* nonnull %49) #8
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  %60 = shl i64 %52, 32
  %61 = ashr exact i64 %60, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %59, i8* nonnull align 1 %49, i64 %61, i1 false) #7
  %62 = load i32, i32* %54, align 8
  %63 = add nsw i32 %62, %53
  store i32 %63, i32* %54, align 8
  br label %103

64:                                               ; preds = %4
  %65 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65) #7
  store i32 -1431655766, i32* %5, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #7
  store i8 -86, i8* %6, align 1
  %66 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %66) #7
  %67 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %66, i8 -86, i64 18, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #7
  store i32 -1431655766, i32* %8, align 4
  call void @_ZN17double_conversion23DoubleToStringConverter13DoubleToAsciiEdNS0_8DtoaModeEiPciPbPiS4_(double %1, i32 %3, i32 0, i8* nonnull %66, i32 18, i8* nonnull %6, i32* nonnull %8, i32* nonnull %5)
  %68 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, 8
  %71 = icmp eq i32 %70, 0
  %72 = load i8, i8* %6, align 1, !range !9
  %73 = icmp ne i8 %72, 0
  %74 = fcmp une double %1, 0.000000e+00
  %75 = or i1 %74, %71
  %76 = and i1 %73, %75
  br i1 %76, label %77, label %85

77:                                               ; preds = %64
  %78 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 1
  %79 = load i32, i32* %78, align 8
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %78, align 8
  %81 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %2, i64 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = sext i32 %79 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 45, i8* %84, align 1
  br label %85

85:                                               ; preds = %64, %77
  %86 = load i32, i32* %5, align 4
  %87 = add nsw i32 %86, -1
  %88 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 4
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %89, %86
  br i1 %90, label %91, label %100

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 5
  %93 = load i32, i32* %92, align 8
  %94 = icmp sgt i32 %86, %93
  br i1 %94, label %100, label %95

95:                                               ; preds = %91
  %96 = load i32, i32* %8, align 4
  %97 = sub nsw i32 %96, %86
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  call void @_ZNK17double_conversion23DoubleToStringConverter27CreateDecimalRepresentationEPKciiiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %66, i32 %96, i32 %86, i32 %99, %"class.double_conversion::StringBuilder"* %2)
  br label %102

100:                                              ; preds = %91, %85
  %101 = load i32, i32* %8, align 4
  call void @_ZNK17double_conversion23DoubleToStringConverter31CreateExponentialRepresentationEPKciiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %66, i32 %101, i32 %87, %"class.double_conversion::StringBuilder"* %2)
  br label %102

102:                                              ; preds = %100, %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #7
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %66) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65) #7
  br label %103

103:                                              ; preds = %44, %51, %47, %30, %15, %102
  %104 = phi i1 [ true, %102 ], [ true, %30 ], [ true, %51 ], [ false, %15 ], [ false, %47 ], [ false, %44 ]
  ret i1 %104
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion23DoubleToStringConverter13DoubleToAsciiEdNS0_8DtoaModeEiPciPbPiS4_(double, i32, i32, i8*, i32, i8* nocapture, i32*, i32*) local_unnamed_addr #3 align 2 {
  %9 = bitcast double %0 to i64
  %10 = lshr i64 %9, 32
  %11 = trunc i64 %10 to i32
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  store i8 1, i8* %5, align 1
  %14 = fsub double -0.000000e+00, %0
  br label %16

15:                                               ; preds = %8
  store i8 0, i8* %5, align 1
  br label %16

16:                                               ; preds = %15, %13
  %17 = phi double [ %14, %13 ], [ %0, %15 ]
  %18 = icmp eq i32 %1, 3
  %19 = icmp eq i32 %2, 0
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  store i8 0, i8* %3, align 1
  store i32 0, i32* %6, align 4
  br label %41

22:                                               ; preds = %16
  %23 = fcmp oeq double %17, 0.000000e+00
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  store i8 48, i8* %3, align 1
  %25 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 0, i8* %25, align 1
  store i32 1, i32* %6, align 4
  store i32 1, i32* %7, align 4
  br label %41

26:                                               ; preds = %22
  switch i32 %1, label %33 [
    i32 0, label %34
    i32 1, label %27
    i32 2, label %29
    i32 3, label %31
  ]

27:                                               ; preds = %26
  %28 = tail call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %17, i32 1, i32 0, i8* %3, i32 %4, i32* %6, i32* %7) #7
  br i1 %28, label %41, label %36

29:                                               ; preds = %26
  %30 = tail call zeroext i1 @_ZN17double_conversion13FastFixedDtoaEdiNS_6VectorIcEEPiS2_(double %17, i32 %2, i8* %3, i32 %4, i32* %6, i32* %7) #7
  br i1 %30, label %41, label %36

31:                                               ; preds = %26
  %32 = tail call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %17, i32 2, i32 %2, i8* %3, i32 %4, i32* %6, i32* %7) #7
  br i1 %32, label %41, label %36

33:                                               ; preds = %26
  tail call void @abort() #9
  unreachable

34:                                               ; preds = %26
  %35 = tail call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %17, i32 0, i32 0, i8* %3, i32 %4, i32* %6, i32* %7) #7
  br i1 %35, label %41, label %36

36:                                               ; preds = %34, %31, %29, %27
  %37 = phi i32 [ 1, %27 ], [ 2, %29 ], [ 3, %31 ], [ 0, %34 ]
  tail call void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double %17, i32 %37, i32 %2, i8* %3, i32 %4, i32* %6, i32* %7) #7
  %38 = load i32, i32* %6, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %3, i64 %39
  store i8 0, i8* %40, align 1
  br label %41

41:                                               ; preds = %27, %29, %31, %36, %34, %24, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter7ToFixedEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, double, i32, %"class.double_conversion::StringBuilder"*) local_unnamed_addr #3 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca [121 x i8], align 16
  %7 = alloca i32, align 4
  %8 = bitcast double %1 to i64
  %9 = and i64 %8, 9218868437227405312
  %10 = icmp eq i64 %9, 9218868437227405312
  br i1 %10, label %11, label %63

11:                                               ; preds = %4
  %12 = and i64 %8, 9223372036854775807
  %13 = icmp eq i64 %12, 9218868437227405312
  br i1 %13, label %14, label %43

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %107, label %18

18:                                               ; preds = %14
  %19 = fcmp olt double %1, 0.000000e+00
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 45, i8* %27, align 1
  %28 = load i8*, i8** %15, align 8
  br label %29

29:                                               ; preds = %20, %18
  %30 = phi i8* [ %28, %20 ], [ %16, %18 ]
  %31 = tail call i64 @strlen(i8* %30) #8
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  %39 = shl i64 %31, 32
  %40 = ashr exact i64 %39, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %30, i64 %40, i1 false) #7
  %41 = load i32, i32* %33, align 8
  %42 = add nsw i32 %41, %32
  store i32 %42, i32* %33, align 8
  br label %107

43:                                               ; preds = %11
  %44 = and i64 %8, 4503599627370495
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %107, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 2
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %107, label %50

50:                                               ; preds = %46
  %51 = tail call i64 @strlen(i8* nonnull %48) #8
  %52 = trunc i64 %51 to i32
  %53 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = shl i64 %51, 32
  %60 = ashr exact i64 %59, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %58, i8* nonnull align 1 %48, i64 %60, i1 false) #7
  %61 = load i32, i32* %53, align 8
  %62 = add nsw i32 %61, %52
  store i32 %62, i32* %53, align 8
  br label %107

63:                                               ; preds = %4
  %64 = icmp sgt i32 %2, 60
  br i1 %64, label %107, label %65

65:                                               ; preds = %63
  %66 = fcmp oge double %1, 0x4C63E9E4E4C2F344
  %67 = fcmp ole double %1, 0xCC63E9E4E4C2F344
  %68 = or i1 %66, %67
  br i1 %68, label %107, label %69

69:                                               ; preds = %65
  %70 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #7
  store i32 -1431655766, i32* %5, align 4
  %71 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 121, i8* nonnull %71) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %71, i8 -86, i64 121, i1 false)
  %72 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #7
  store i32 -1431655766, i32* %7, align 4
  %73 = lshr i64 %8, 32
  %74 = trunc i64 %73 to i32
  %75 = icmp slt i32 %74, 0
  %76 = fsub double -0.000000e+00, %1
  %77 = select i1 %75, double %76, double %1
  %78 = fcmp oeq double %77, 0.000000e+00
  br i1 %78, label %79, label %81

79:                                               ; preds = %69
  store i8 48, i8* %71, align 16
  %80 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %80, align 1
  store i32 1, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %87

81:                                               ; preds = %69
  %82 = call zeroext i1 @_ZN17double_conversion13FastFixedDtoaEdiNS_6VectorIcEEPiS2_(double %77, i32 %2, i8* nonnull %71, i32 121, i32* nonnull %7, i32* nonnull %5) #7
  br i1 %82, label %87, label %83

83:                                               ; preds = %81
  call void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double %77, i32 2, i32 %2, i8* nonnull %71, i32 121, i32* nonnull %7, i32* nonnull %5) #7
  %84 = load i32, i32* %7, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 %85
  store i8 0, i8* %86, align 1
  br label %87

87:                                               ; preds = %79, %81, %83
  %88 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = and i32 %89, 8
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i64 %8, 0
  %93 = fcmp une double %1, 0.000000e+00
  %94 = or i1 %93, %91
  %95 = and i1 %92, %94
  br i1 %95, label %96, label %104

96:                                               ; preds = %87
  %97 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %97, align 8
  %100 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = sext i32 %98 to i64
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8 45, i8* %103, align 1
  br label %104

104:                                              ; preds = %87, %96
  %105 = load i32, i32* %7, align 4
  %106 = load i32, i32* %5, align 4
  call void @_ZNK17double_conversion23DoubleToStringConverter27CreateDecimalRepresentationEPKciiiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %71, i32 %105, i32 %106, i32 %2, %"class.double_conversion::StringBuilder"* %3)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72) #7
  call void @llvm.lifetime.end.p0i8(i64 121, i8* nonnull %71) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #7
  br label %107

107:                                              ; preds = %43, %50, %46, %29, %14, %65, %63, %104
  %108 = phi i1 [ true, %104 ], [ false, %63 ], [ false, %65 ], [ true, %29 ], [ true, %50 ], [ false, %14 ], [ false, %46 ], [ false, %43 ]
  ret i1 %108
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter13ToExponentialEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, double, i32, %"class.double_conversion::StringBuilder"* nocapture) local_unnamed_addr #3 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca [122 x i8], align 16
  %7 = alloca i32, align 4
  %8 = bitcast double %1 to i64
  %9 = and i64 %8, 9218868437227405312
  %10 = icmp eq i64 %9, 9218868437227405312
  br i1 %10, label %11, label %63

11:                                               ; preds = %4
  %12 = and i64 %8, 9223372036854775807
  %13 = icmp eq i64 %12, 9218868437227405312
  br i1 %13, label %14, label %43

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %128, label %18

18:                                               ; preds = %14
  %19 = fcmp olt double %1, 0.000000e+00
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 45, i8* %27, align 1
  %28 = load i8*, i8** %15, align 8
  br label %29

29:                                               ; preds = %20, %18
  %30 = phi i8* [ %28, %20 ], [ %16, %18 ]
  %31 = tail call i64 @strlen(i8* %30) #8
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  %39 = shl i64 %31, 32
  %40 = ashr exact i64 %39, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %30, i64 %40, i1 false) #7
  %41 = load i32, i32* %33, align 8
  %42 = add nsw i32 %41, %32
  store i32 %42, i32* %33, align 8
  br label %128

43:                                               ; preds = %11
  %44 = and i64 %8, 4503599627370495
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %128, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 2
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %128, label %50

50:                                               ; preds = %46
  %51 = tail call i64 @strlen(i8* nonnull %48) #8
  %52 = trunc i64 %51 to i32
  %53 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = shl i64 %51, 32
  %60 = ashr exact i64 %59, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %58, i8* nonnull align 1 %48, i64 %60, i1 false) #7
  %61 = load i32, i32* %53, align 8
  %62 = add nsw i32 %61, %52
  store i32 %62, i32* %53, align 8
  br label %128

63:                                               ; preds = %4
  %64 = add i32 %2, 1
  %65 = icmp ugt i32 %64, 121
  br i1 %65, label %128, label %66

66:                                               ; preds = %63
  %67 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #7
  store i32 -1431655766, i32* %5, align 4
  %68 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 122, i8* nonnull %68) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -86, i64 122, i1 false)
  %69 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #7
  store i32 -1431655766, i32* %7, align 4
  %70 = icmp eq i32 %2, -1
  %71 = lshr i64 %8, 32
  %72 = trunc i64 %71 to i32
  %73 = icmp slt i32 %72, 0
  %74 = fsub double -0.000000e+00, %1
  %75 = select i1 %73, double %74, double %1
  %76 = fcmp oeq double %75, 0.000000e+00
  br i1 %70, label %77, label %86

77:                                               ; preds = %66
  br i1 %76, label %78, label %80

78:                                               ; preds = %77
  store i8 48, i8* %68, align 16
  %79 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %79, align 1
  store i32 1, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %107

80:                                               ; preds = %77
  %81 = call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %75, i32 0, i32 0, i8* nonnull %68, i32 122, i32* nonnull %7, i32* nonnull %5) #7
  br i1 %81, label %107, label %82

82:                                               ; preds = %80
  call void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double %75, i32 0, i32 0, i8* nonnull %68, i32 122, i32* nonnull %7, i32* nonnull %5) #7
  %83 = load i32, i32* %7, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 %84
  store i8 0, i8* %85, align 1
  br label %107

86:                                               ; preds = %66
  br i1 %76, label %87, label %89

87:                                               ; preds = %86
  store i8 48, i8* %68, align 16
  %88 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %88, align 1
  store i32 1, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %97

89:                                               ; preds = %86
  %90 = call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %75, i32 2, i32 %64, i8* nonnull %68, i32 122, i32* nonnull %7, i32* nonnull %5) #7
  br i1 %90, label %91, label %93

91:                                               ; preds = %89
  %92 = load i32, i32* %7, align 4
  br label %97

93:                                               ; preds = %89
  call void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double %75, i32 3, i32 %64, i8* nonnull %68, i32 122, i32* nonnull %7, i32* nonnull %5) #7
  %94 = load i32, i32* %7, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 %95
  store i8 0, i8* %96, align 1
  br label %97

97:                                               ; preds = %91, %87, %93
  %98 = phi i32 [ %92, %91 ], [ 1, %87 ], [ %94, %93 ]
  %99 = icmp sgt i32 %98, %2
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = sext i32 %98 to i64
  %102 = getelementptr [122 x i8], [122 x i8]* %6, i64 0, i64 %101
  %103 = sub i32 %2, %98
  %104 = zext i32 %103 to i64
  %105 = add nuw nsw i64 %104, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 48, i64 %105, i1 false)
  br label %106

106:                                              ; preds = %100, %97
  store i32 %64, i32* %7, align 4
  br label %107

107:                                              ; preds = %82, %80, %78, %106
  %108 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = and i32 %109, 8
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i64 %8, 0
  %113 = fcmp une double %1, 0.000000e+00
  %114 = or i1 %113, %111
  %115 = and i1 %112, %114
  br i1 %115, label %116, label %124

116:                                              ; preds = %107
  %117 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %118 = load i32, i32* %117, align 8
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %117, align 8
  %120 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = sext i32 %118 to i64
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  store i8 45, i8* %123, align 1
  br label %124

124:                                              ; preds = %107, %116
  %125 = load i32, i32* %5, align 4
  %126 = add nsw i32 %125, -1
  %127 = load i32, i32* %7, align 4
  call void @_ZNK17double_conversion23DoubleToStringConverter31CreateExponentialRepresentationEPKciiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %68, i32 %127, i32 %126, %"class.double_conversion::StringBuilder"* %3)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #7
  call void @llvm.lifetime.end.p0i8(i64 122, i8* nonnull %68) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #7
  br label %128

128:                                              ; preds = %43, %50, %46, %29, %14, %63, %124
  %129 = phi i1 [ true, %124 ], [ false, %63 ], [ true, %29 ], [ true, %50 ], [ false, %14 ], [ false, %46 ], [ false, %43 ]
  ret i1 %129
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter11ToPrecisionEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* nocapture readonly, double, i32, %"class.double_conversion::StringBuilder"*) local_unnamed_addr #3 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca [121 x i8], align 16
  %7 = alloca i32, align 4
  %8 = bitcast double %1 to i64
  %9 = and i64 %8, 9218868437227405312
  %10 = icmp eq i64 %9, 9218868437227405312
  br i1 %10, label %11, label %63

11:                                               ; preds = %4
  %12 = and i64 %8, 9223372036854775807
  %13 = icmp eq i64 %12, 9218868437227405312
  br i1 %13, label %14, label %43

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %133, label %18

18:                                               ; preds = %14
  %19 = fcmp olt double %1, 0.000000e+00
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 45, i8* %27, align 1
  %28 = load i8*, i8** %15, align 8
  br label %29

29:                                               ; preds = %20, %18
  %30 = phi i8* [ %28, %20 ], [ %16, %18 ]
  %31 = tail call i64 @strlen(i8* %30) #8
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  %39 = shl i64 %31, 32
  %40 = ashr exact i64 %39, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %30, i64 %40, i1 false) #7
  %41 = load i32, i32* %33, align 8
  %42 = add nsw i32 %41, %32
  store i32 %42, i32* %33, align 8
  br label %133

43:                                               ; preds = %11
  %44 = and i64 %8, 4503599627370495
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %133, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 2
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %133, label %50

50:                                               ; preds = %46
  %51 = tail call i64 @strlen(i8* nonnull %48) #8
  %52 = trunc i64 %51 to i32
  %53 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = shl i64 %51, 32
  %60 = ashr exact i64 %59, 32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %58, i8* nonnull align 1 %48, i64 %60, i1 false) #7
  %61 = load i32, i32* %53, align 8
  %62 = add nsw i32 %61, %52
  store i32 %62, i32* %53, align 8
  br label %133

63:                                               ; preds = %4
  %64 = add i32 %2, -1
  %65 = icmp ugt i32 %64, 119
  br i1 %65, label %133, label %66

66:                                               ; preds = %63
  %67 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #7
  store i32 -1431655766, i32* %5, align 4
  %68 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 121, i8* nonnull %68) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -86, i64 121, i1 false)
  %69 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #7
  store i32 -1431655766, i32* %7, align 4
  %70 = lshr i64 %8, 32
  %71 = trunc i64 %70 to i32
  %72 = icmp slt i32 %71, 0
  %73 = fsub double -0.000000e+00, %1
  %74 = select i1 %72, double %73, double %1
  %75 = fcmp oeq double %74, 0.000000e+00
  br i1 %75, label %76, label %78

76:                                               ; preds = %66
  store i8 48, i8* %68, align 16
  %77 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %77, align 1
  store i32 1, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %84

78:                                               ; preds = %66
  %79 = call zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double %74, i32 2, i32 %2, i8* nonnull %68, i32 121, i32* nonnull %7, i32* nonnull %5) #7
  br i1 %79, label %84, label %80

80:                                               ; preds = %78
  call void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double %74, i32 3, i32 %2, i8* nonnull %68, i32 121, i32* nonnull %7, i32* nonnull %5) #7
  %81 = load i32, i32* %7, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [121 x i8], [121 x i8]* %6, i64 0, i64 %82
  store i8 0, i8* %83, align 1
  br label %84

84:                                               ; preds = %76, %78, %80
  %85 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 8
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i64 %8, 0
  %90 = fcmp une double %1, 0.000000e+00
  %91 = or i1 %90, %88
  %92 = and i1 %89, %91
  br i1 %92, label %93, label %101

93:                                               ; preds = %84
  %94 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %94, align 8
  %97 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = sext i32 %95 to i64
  %100 = getelementptr inbounds i8, i8* %98, i64 %99
  store i8 45, i8* %100, align 1
  br label %101

101:                                              ; preds = %84, %93
  %102 = load i32, i32* %5, align 4
  %103 = add nsw i32 %102, -1
  %104 = sub i32 1, %102
  %105 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 6
  %106 = load i32, i32* %105, align 4
  %107 = icmp sgt i32 %104, %106
  br i1 %107, label %117, label %108

108:                                              ; preds = %101
  %109 = load i32, i32* %85, align 8
  %110 = lshr i32 %109, 2
  %111 = and i32 %110, 1
  %112 = sub i32 %102, %2
  %113 = add nsw i32 %112, %111
  %114 = getelementptr inbounds %"class.double_conversion::DoubleToStringConverter", %"class.double_conversion::DoubleToStringConverter"* %0, i64 0, i32 7
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %113, %115
  br i1 %116, label %117, label %127

117:                                              ; preds = %108, %101
  %118 = load i32, i32* %7, align 4
  %119 = icmp slt i32 %118, %2
  br i1 %119, label %120, label %126

120:                                              ; preds = %117
  %121 = sext i32 %118 to i64
  %122 = getelementptr [121 x i8], [121 x i8]* %6, i64 0, i64 %121
  %123 = sub i32 %64, %118
  %124 = zext i32 %123 to i64
  %125 = add nuw nsw i64 %124, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 48, i64 %125, i1 false)
  br label %126

126:                                              ; preds = %120, %117
  call void @_ZNK17double_conversion23DoubleToStringConverter31CreateExponentialRepresentationEPKciiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %68, i32 %2, i32 %103, %"class.double_conversion::StringBuilder"* %3)
  br label %132

127:                                              ; preds = %108
  %128 = load i32, i32* %7, align 4
  %129 = sub nsw i32 %2, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  call void @_ZNK17double_conversion23DoubleToStringConverter27CreateDecimalRepresentationEPKciiiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %0, i8* nonnull %68, i32 %128, i32 %102, i32 %131, %"class.double_conversion::StringBuilder"* %3)
  br label %132

132:                                              ; preds = %127, %126
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #7
  call void @llvm.lifetime.end.p0i8(i64 121, i8* nonnull %68) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #7
  br label %133

133:                                              ; preds = %43, %50, %46, %29, %14, %63, %132
  %134 = phi i1 [ true, %132 ], [ false, %63 ], [ true, %29 ], [ true, %50 ], [ false, %14 ], [ false, %46 ], [ false, %43 ]
  ret i1 %134
}

declare zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double, i32, i32, i8*, i32, i32*, i32*) local_unnamed_addr #4

declare zeroext i1 @_ZN17double_conversion13FastFixedDtoaEdiNS_6VectorIcEEPiS2_(double, i32, i8*, i32, i32*, i32*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

declare void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double, i32, i32, i8*, i32, i32*, i32*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = !{i8 0, i8 2}
