; ModuleID = '../../native_client/src/trusted/service_runtime/arch/x86_64/sel_ldr_x86_64.c'
source_filename = "../../native_client/src/trusted/service_runtime/arch/x86_64/sel_ldr_x86_64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClAppThread = type { %struct.NaClThreadContext, %struct.NaClMutex, %struct.NaClApp*, i32, i32, %struct.NaClThread, %struct.NaClMutex, i32, %struct.NaClAppThreadSuspendedRegisters*, i32, i64, i8*, i32, i32, i32, %struct.NaClListNode, i32, %struct.NaClCondVar }
%struct.NaClThreadContext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i16, i16, i64, i32, i32 }
%struct.NaClThread = type { i64 }
%struct.NaClAppThreadSuspendedRegisters = type opaque
%struct.NaClListNode = type { %struct.NaClListNode*, %struct.NaClListNode* }
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type opaque
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type opaque
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque
%struct.NaClPatchInfo = type { i64, i64, i64, %struct.NaClPatch*, i64, %struct.NaClPatch*, i64, %struct.NaClPatch*, i64, i64*, i64 }
%struct.NaClPatch = type { i64, i64 }

@.str = private unnamed_addr constant [31 x i8] c"Entered NaClMakeDispatchAddrs\0A\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c" dispatch addrs already initialized!\0A\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"NaClMakeDispatchAddrs::NaClPageAlloc failed, errno %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"NaClMakeDispatchAddrs: got addr 0x%lx\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"NaClMakeDispatchAddrs::NaClMprotect r/w failed, errno %d\0A\00", align 1
@NaClGetTlsFastPath1 = external global i8, align 1
@NaClGetTlsFastPath2 = external global i8, align 1
@.str.5 = private unnamed_addr constant [64 x i8] c"NaClMakeDispatchAddrs::NaClMprotect read-only failed, errno %d\0A\00", align 1
@NaCl_trampoline_tramp_addr = external global i8, align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"call_target_addr = 0x%lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.8 = private unnamed_addr constant [77 x i8] c"../../native_client/src/trusted/service_runtime/arch/x86_64/sel_ldr_x86_64.c\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"0 != call_target_addr\00", align 1
@NaCl_trampoline_call_target = external global i8, align 1
@NaCl_trampoline_code = external global i8, align 1
@NaCl_trampoline_code_end = external global i8, align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"patch_info.nbytes <= NACL_INSTR_BLOCK_SIZE\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClMakeDispatchAddrs(%struct.NaClApp* nocapture) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #4
  store i8* null, i8** %2, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #4
  %4 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %37

8:                                                ; preds = %1
  %9 = call i32 @NaClPageAllocRandomized(i8** nonnull %2, i64 65536) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %8
  %12 = bitcast i8** %2 to i64*
  %13 = load i64, i64* %12, align 8
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i64 %13) #4
  %14 = load i8*, i8** %2, align 8
  %15 = call i32 @NaClMprotect(i8* %14, i64 65536, i32 3) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %27

17:                                               ; preds = %11
  %18 = load i64, i64* %12, align 8
  %19 = inttoptr i64 %18 to i64*
  store i64 ptrtoint (void ()* @NaClSyscallSeg to i64), i64* %19, align 8
  %20 = add i64 %18, 8
  %21 = inttoptr i64 %20 to i64*
  store i64 ptrtoint (i8* @NaClGetTlsFastPath1 to i64), i64* %21, align 8
  %22 = add i64 %18, 16
  %23 = inttoptr i64 %22 to i64*
  store i64 ptrtoint (i8* @NaClGetTlsFastPath2 to i64), i64* %23, align 8
  %24 = load i8*, i8** %2, align 8
  %25 = call i32 @NaClMprotect(i8* %24, i64 65536, i32 1) #4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17, %11, %8
  %28 = phi i32 [ %9, %8 ], [ %15, %11 ], [ %25, %17 ]
  %29 = phi i8* [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), %8 ], [ getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0), %11 ], [ getelementptr inbounds ([64 x i8], [64 x i8]* @.str.5, i64 0, i64 0), %17 ]
  %30 = sub nsw i32 0, %28
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* %29, i32 %30) #4
  %31 = load i8*, i8** %2, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  call void @NaClPageFree(i8* nonnull %31, i64 65536) #4
  store i8* null, i8** %2, align 8
  br label %37

34:                                               ; preds = %17
  store i64 %18, i64* %4, align 8
  %35 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 5
  store i64 %20, i64* %35, align 8
  %36 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 6
  store i64 %22, i64* %36, align 8
  br label %37

37:                                               ; preds = %34, %33, %27, %7
  %38 = phi i32 [ 1, %7 ], [ 0, %27 ], [ 0, %33 ], [ 1, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #4
  ret i32 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare i32 @NaClPageAllocRandomized(i8**, i64) local_unnamed_addr #2

declare i32 @NaClMprotect(i8*, i64, i32) local_unnamed_addr #2

declare void @NaClSyscallSeg() #2

declare void @NaClPageFree(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClPatchOneTrampolineCall(i64, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.NaClPatchInfo, align 8
  %4 = alloca %struct.NaClPatch, align 8
  %5 = alloca %struct.NaClPatch, align 8
  %6 = bitcast %struct.NaClPatchInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 88, i1 false)
  %7 = bitcast %struct.NaClPatch* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #4
  %8 = getelementptr inbounds %struct.NaClPatch, %struct.NaClPatch* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.NaClPatch, %struct.NaClPatch* %4, i64 0, i32 1
  %10 = bitcast %struct.NaClPatch* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #4
  %11 = getelementptr inbounds %struct.NaClPatch, %struct.NaClPatch* %5, i64 0, i32 0
  %12 = getelementptr inbounds %struct.NaClPatch, %struct.NaClPatch* %5, i64 0, i32 1
  %13 = bitcast %struct.NaClPatch* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  store i64 sub (i64 ptrtoint (i8* @NaCl_trampoline_tramp_addr to i64), i64 4), i64* %8, align 8
  %14 = and i64 %1, 4294967295
  store i64 %14, i64* %9, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 6, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i64 %0) #4
  %15 = icmp eq i64 %0, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 107, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0)) #4
  br label %17

17:                                               ; preds = %2, %16
  store i64 sub (i64 ptrtoint (i8* @NaCl_trampoline_call_target to i64), i64 8), i64* %11, align 8
  store i64 %0, i64* %12, align 8
  %18 = call %struct.NaClPatchInfo* @NaClPatchInfoCtor(%struct.NaClPatchInfo* nonnull %3) #4
  %19 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 7
  store %struct.NaClPatch* %5, %struct.NaClPatch** %19, align 8
  %20 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 8
  store i64 1, i64* %20, align 8
  %21 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 5
  store %struct.NaClPatch* %4, %struct.NaClPatch** %21, align 8
  %22 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 6
  store i64 1, i64* %22, align 8
  %23 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 0
  store i64 %1, i64* %23, align 8
  %24 = getelementptr inbounds %struct.NaClPatchInfo, %struct.NaClPatchInfo* %3, i64 0, i32 1
  %25 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (i8* @NaCl_trampoline_code to i64), i64 sub (i64 ptrtoint (i8* @NaCl_trampoline_code_end to i64), i64 ptrtoint (i8* @NaCl_trampoline_code to i64))>, <2 x i64>* %25, align 8
  br i1 icmp ule (i64 sub (i64 ptrtoint (i8* @NaCl_trampoline_code_end to i64), i64 ptrtoint (i8* @NaCl_trampoline_code to i64)), i64 32), label %27, label %26

26:                                               ; preds = %17
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 124, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0)) #4
  br label %27

27:                                               ; preds = %26, %17
  call void @NaClApplyPatchToMemory(%struct.NaClPatchInfo* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %struct.NaClPatchInfo* @NaClPatchInfoCtor(%struct.NaClPatchInfo*) local_unnamed_addr #2

declare void @NaClApplyPatchToMemory(%struct.NaClPatchInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClPatchOneTrampoline(%struct.NaClApp* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  tail call void @NaClPatchOneTrampolineCall(i64 %4, i64 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClFillMemoryRegionWithHalt(i8* nocapture, i64) local_unnamed_addr #0 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -12, i64 %1, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClFillTrampolineRegion(%struct.NaClApp* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 65536
  %5 = inttoptr i64 %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -12, i64 65536, i1 false) #4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @NaClLoadSpringboard(%struct.NaClApp* nocapture) local_unnamed_addr #3 {
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
