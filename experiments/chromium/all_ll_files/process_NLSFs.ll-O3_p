; ModuleID = '../../third_party/opus/src/silk/process_NLSFs.c'
source_filename = "../../third_party/opus/src/silk/process_NLSFs.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }

@.str = private unnamed_addr constant [103 x i8] c"assertion failed: psEncC->useInterpolatedNLSFs == 1 || psEncC->indices.NLSFInterpCoef_Q2 == ( 1 << 2 )\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/opus/src/silk/process_NLSFs.c\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"assertion failed: NLSF_mu_Q20 > 0\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"assertion failed: psEncC->predictLPCOrder <= MAX_LPC_ORDER\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_process_NLSFs(%struct.silk_encoder_state*, [16 x i16]*, i16*, i16*) local_unnamed_addr #0 {
  %5 = alloca [16 x i16], align 16
  %6 = alloca [16 x i16], align 16
  %7 = alloca [16 x i16], align 16
  %8 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 0
  %10 = bitcast [16 x i16]* %6 to i8*
  %11 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %13 = bitcast [16 x i16]* %7 to i8*
  %14 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 0
  %16 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 33
  %17 = bitcast [16 x i16]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 32, i1 false)
  %18 = load i32, i32* %16, align 8
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %25, label %20

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 7
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 4
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  tail call void @celt_fatal(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 51) #5
  unreachable

25:                                               ; preds = %20, %4
  %26 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 7
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = shl i64 %28, 48
  %30 = ashr exact i64 %29, 48
  %31 = mul nsw i64 %30, -268434
  %32 = ashr i64 %31, 16
  %33 = trunc i64 %32 to i32
  %34 = add nsw i32 %33, 3146
  %35 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 20
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 2
  %38 = ashr i32 %34, 1
  %39 = select i1 %37, i32 %38, i32 0
  %40 = add nsw i32 %39, %34
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %25
  tail call void @celt_fatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 63) #5
  unreachable

43:                                               ; preds = %25
  %44 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 35
  %45 = load i32, i32* %44, align 8
  call void @silk_NLSF_VQ_weights_laroia(i16* nonnull %12, i16* %2, i32 %45) #4
  %46 = load i32, i32* %16, align 8
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %145

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 4
  br i1 %51, label %52, label %145

52:                                               ; preds = %48
  %53 = sext i8 %50 to i32
  %54 = load i32, i32* %44, align 8
  call void @silk_interpolate(i16* nonnull %9, i16* %3, i16* %2, i32 %53, i32 %54) #4
  %55 = load i32, i32* %44, align 8
  call void @silk_NLSF_VQ_weights_laroia(i16* nonnull %15, i16* nonnull %9, i32 %55) #4
  %56 = load i8, i8* %49, align 1
  %57 = sext i8 %56 to i16
  %58 = load i32, i32* %44, align 8
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %145

60:                                               ; preds = %52
  %61 = shl i16 %57, 11
  %62 = mul i16 %61, %57
  %63 = sext i16 %62 to i32
  %64 = sext i32 %58 to i64
  %65 = icmp ult i32 %58, 8
  br i1 %65, label %129, label %66

66:                                               ; preds = %60
  %67 = and i64 %64, -8
  %68 = insertelement <8 x i32> undef, i32 %63, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = add nsw i64 %67, -8
  %71 = lshr exact i64 %70, 3
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %70, 0
  br i1 %74, label %110, label %75

75:                                               ; preds = %66
  %76 = sub nuw nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %107, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %108, %77 ]
  %80 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 16
  %83 = ashr <8 x i16> %82, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %84 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %78
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 16
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = mul nsw <8 x i32> %69, %87
  %89 = lshr <8 x i32> %88, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = add <8 x i16> %83, %90
  %92 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 16
  %93 = or i64 %78, 8
  %94 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %93
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 16
  %97 = ashr <8 x i16> %96, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %93
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 16
  %101 = sext <8 x i16> %100 to <8 x i32>
  %102 = mul nsw <8 x i32> %69, %101
  %103 = lshr <8 x i32> %102, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = add <8 x i16> %97, %104
  %106 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 16
  %107 = add i64 %78, 16
  %108 = add i64 %79, -2
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %77, !llvm.loop !2

110:                                              ; preds = %77, %66
  %111 = phi i64 [ 0, %66 ], [ %107, %77 ]
  %112 = icmp eq i64 %73, 0
  br i1 %112, label %127, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %111
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 16
  %117 = ashr <8 x i16> %116, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %118 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %111
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 16
  %121 = sext <8 x i16> %120 to <8 x i32>
  %122 = mul nsw <8 x i32> %69, %121
  %123 = lshr <8 x i32> %122, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %124 = trunc <8 x i32> %123 to <8 x i16>
  %125 = add <8 x i16> %117, %124
  %126 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 16
  br label %127

127:                                              ; preds = %110, %113
  %128 = icmp eq i64 %67, %64
  br i1 %128, label %145, label %129

129:                                              ; preds = %127, %60
  %130 = phi i64 [ 0, %60 ], [ %67, %127 ]
  br label %131

131:                                              ; preds = %129, %131
  %132 = phi i64 [ %143, %131 ], [ %130, %129 ]
  %133 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = ashr i16 %134, 1
  %136 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %132
  %137 = load i16, i16* %136, align 2
  %138 = sext i16 %137 to i32
  %139 = mul nsw i32 %138, %63
  %140 = lshr i32 %139, 16
  %141 = trunc i32 %140 to i16
  %142 = add i16 %135, %141
  store i16 %142, i16* %133, align 2
  %143 = add nuw nsw i64 %132, 1
  %144 = icmp slt i64 %143, %64
  br i1 %144, label %131, label %145, !llvm.loop !4

145:                                              ; preds = %131, %127, %52, %43, %48
  %146 = phi i1 [ false, %48 ], [ false, %43 ], [ true, %52 ], [ true, %127 ], [ true, %131 ]
  %147 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 2, i64 0
  %148 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 48
  %149 = load %struct.silk_NLSF_CB_struct*, %struct.silk_NLSF_CB_struct** %148, align 8
  %150 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 40
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 5
  %153 = load i8, i8* %152, align 1
  %154 = sext i8 %153 to i32
  %155 = call i32 @silk_NLSF_encode(i8* %147, i16* %2, %struct.silk_NLSF_CB_struct* %149, i16* nonnull %12, i32 %40, i32 %151, i32 %154) #4
  %156 = getelementptr inbounds [16 x i16], [16 x i16]* %1, i64 1, i64 0
  %157 = load i32, i32* %44, align 8
  %158 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 57
  %159 = load i32, i32* %158, align 4
  call void @silk_NLSF2A(i16* %156, i16* %2, i32 %157, i32 %159) #4
  br i1 %146, label %160, label %168

160:                                              ; preds = %145
  %161 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 55, i32 7
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = load i32, i32* %44, align 8
  call void @silk_interpolate(i16* nonnull %9, i16* %3, i16* %2, i32 %163, i32 %164) #4
  %165 = getelementptr inbounds [16 x i16], [16 x i16]* %1, i64 0, i64 0
  %166 = load i32, i32* %44, align 8
  %167 = load i32, i32* %158, align 4
  call void @silk_NLSF2A(i16* %165, i16* nonnull %9, i32 %166, i32 %167) #4
  br label %177

168:                                              ; preds = %145
  %169 = load i32, i32* %44, align 8
  %170 = icmp slt i32 %169, 17
  br i1 %170, label %172, label %171

171:                                              ; preds = %168
  call void @celt_fatal(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 104) #5
  unreachable

172:                                              ; preds = %168
  %173 = bitcast [16 x i16]* %1 to i8*
  %174 = bitcast i16* %156 to i8*
  %175 = sext i32 %169 to i64
  %176 = shl nsw i64 %175, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %173, i8* align 2 %174, i64 %176, i1 false)
  br label %177

177:                                              ; preds = %172, %160
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_NLSF_VQ_weights_laroia(i16*, i16*, i32) local_unnamed_addr #3

declare void @silk_interpolate(i16*, i16*, i16*, i32, i32) local_unnamed_addr #3

declare i32 @silk_NLSF_encode(i8*, i16*, %struct.silk_NLSF_CB_struct*, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @silk_NLSF2A(i16*, i16*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
