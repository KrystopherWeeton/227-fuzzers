; ModuleID = '../../third_party/libaom/source/libaom/av1/av1_dx_iface.c'
source_filename = "../../third_party/libaom/source/libaom/av1/av1_dx_iface.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.aom_codec_ctrl_fn_map = type { i32, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* }
%struct.aom_codec_alg_priv = type { %struct.aom_codec_priv, %struct.aom_codec_dec_cfg, %struct.aom_codec_stream_info, %struct.aom_image, i32, i32, i32, %struct.RefCntBuffer*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.EXTERNAL_REFERENCES, i32, i32, i32, %struct.AVxWorker*, %struct.aom_image, [4 x %struct.aom_codec_frame_buffer], i64, i32, %struct.BufferPool*, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)* }
%struct.aom_codec_priv = type { i8*, i64, %struct.anon }
%struct.anon = type { %struct.aom_fixed_buf, i32, i32, %struct.aom_codec_cx_pkt }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.aom_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.aom_codec_dec_cfg = type { i32, i32, i32, i32 }
%struct.aom_codec_stream_info = type { i32, i32, i32, i32, i32, i32 }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.yv12_buffer_config = type { %union.anon.1, %union.anon.3, %union.anon.5, %union.anon.7, %union.anon.9, %union.anon.11, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon.1 = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32 }
%union.anon.3 = type { %struct.anon.4 }
%struct.anon.4 = type { i32, i32 }
%union.anon.5 = type { %struct.anon.6 }
%struct.anon.6 = type { i32, i32 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32, i32 }
%union.anon.9 = type { %struct.anon.10 }
%struct.anon.10 = type { i32, i32 }
%union.anon.11 = type { %struct.anon.12 }
%struct.anon.12 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.EXTERNAL_REFERENCES = type { [128 x %struct.yv12_buffer_config], i32 }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.aom_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i32], i64, i32, i32, i32, i8*, i8*, i32, i32, %struct.aom_metadata_array*, i8* }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.aom_codec_ctx = type { i8*, %struct.aom_codec_iface*, i32, i8*, i64, %union.anon.13, %struct.aom_codec_priv* }
%struct.aom_codec_iface = type { i8*, i32, i64, {}*, i32 (%struct.aom_codec_alg_priv*)*, %struct.aom_codec_ctrl_fn_map*, %struct.aom_codec_dec_iface, %struct.aom_codec_enc_iface, i32 (%struct.aom_codec_alg_priv*, i8*, i8*)* }
%union.anon.13 = type { %struct.aom_codec_dec_cfg* }
%struct.aom_codec_dec_iface = type { i32 (i8*, i64, %struct.aom_codec_stream_info*)*, i32 (%struct.aom_codec_alg_priv*, %struct.aom_codec_stream_info*)*, i32 (%struct.aom_codec_alg_priv*, i8*, i64, i8*)*, %struct.aom_image* (%struct.aom_codec_alg_priv*, i8**)*, i32 (%struct.aom_codec_alg_priv*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, i8*)* }
%struct.aom_codec_enc_iface = type { i32, %struct.aom_codec_enc_cfg*, i32 (%struct.aom_codec_alg_priv*, %struct.aom_image*, i64, i64, i64)*, %struct.aom_codec_cx_pkt* (%struct.aom_codec_alg_priv*, i8**)*, i32 (%struct.aom_codec_alg_priv*, %struct.aom_codec_enc_cfg*)*, %struct.aom_fixed_buf* (%struct.aom_codec_alg_priv*)*, %struct.aom_image* (%struct.aom_codec_alg_priv*)* }
%struct.aom_codec_enc_cfg = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.aom_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.aom_fixed_buf, %struct.aom_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i32, [5 x i32], %struct.cfg_options }
%struct.aom_rational = type { i32, i32 }
%struct.cfg_options = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1Decoder = type { %struct.DecoderCodingBlock, %struct.AV1Common, %struct.AVxWorker, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1LrStruct, %struct.AV1CdefSyncData, %struct.AV1CdefWorker*, %struct.AVxWorker*, i32, %struct.DecWorkerData*, [24 x i8], %struct.ThreadData, %struct.TileDataDec*, i32, [64 x [64 x %struct.TileBufferDec]], %struct.AV1DecTileMTData, i32, [4 x %struct.RefCntBuffer*], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, %struct.DataBuffer, i32, i32, i32, i32, i32, i32, %struct.EXTERNAL_REFERENCES, %struct.yv12_buffer_config, %struct.CB_BUFFER*, i32, i32, %union.pthread_mutex_t*, %union.pthread_cond_t*, %struct.AV1DecRowMTInfo, %struct.aom_metadata_array*, i32, i32, i32, i32, [8 x i32], i32, i32, i32, %struct.aom_s_frame_info, %struct.SequenceHeader, i8, %struct.aom_internal_error_info, i32, i32, [24 x i8] }
%struct.DecoderCodingBlock = type { %struct.macroblockd, i32, [2 x i8*], [3 x i32*], [3 x i16], [3 x %struct.eob_info*], [3 x i16], [29 x i8], [13 x i8] }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.eob_info = type { i16, i16 }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.DecWorkerData = type { %struct.ThreadData*, i8*, %struct.aom_internal_error_info }
%struct.ThreadData = type { %struct.DecoderCodingBlock, %struct.CB_BUFFER, %struct.aom_reader*, [2 x i8*], i8*, i32, i32, i16*, [2 x i8*], void (%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, i8)*, void (%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, i8)*, void (%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, i8)*, void (%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, i8)*, void (%struct.AV1Common*, %struct.DecoderCodingBlock*, i8)*, void (%struct.AV1Common*, %struct.macroblockd*)*, [16 x i8] }
%struct.CB_BUFFER = type { [3 x [16384 x i32]], [3 x [1024 x %struct.eob_info]], [2 x [16384 x i8]] }
%struct.aom_reader = type { i8*, i8*, %struct.od_ec_dec, i8 }
%struct.od_ec_dec = type { i8*, i32, i8*, i8*, i32, i16, i16 }
%struct.TileDataDec = type { %struct.TileInfo, %struct.aom_reader, [8 x i8], %struct.frame_contexts, %struct.AV1DecRowMTSyncData, [8 x i8] }
%struct.AV1DecRowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32, i32*, i32, i32, i32, i32, i32, i32 }
%struct.TileBufferDec = type { i8*, i64 }
%struct.AV1DecTileMTData = type { %union.pthread_mutex_t*, %struct.TileJobsDec*, i32, i32, i32, i32 }
%struct.TileJobsDec = type { %struct.TileBufferDec*, %struct.TileDataDec* }
%struct.DataBuffer = type { i8*, i64 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.14, %union.anon.16, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.14 = type { i64 }
%union.anon.16 = type { i64 }
%struct.AV1DecRowMTInfo = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.aom_s_frame_info = type { i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.AVxWorkerInterface = type { void (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)* }
%struct.FrameWorkerData = type { %struct.AV1Decoder*, i8*, i8*, i64, i8*, i32, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }
%struct.AllocCbParam = type { %struct.BufferPool*, %struct.aom_codec_frame_buffer* }
%struct.av1_ref_frame = type { i32, i32, %struct.aom_image }
%struct.av1_ext_ref_frame = type { %struct.aom_image*, i32 }
%struct.aom_tile_data = type { i64, i8*, i64 }
%struct.aom_tile_info = type { i32, i32, [64 x i32], [64 x i32], i32 }
%struct.aom_screen_content_tools_info = type { i32, i32, i32 }
%struct.aom_still_picture_info = type { i32, i32 }
%struct.ObuHeader = type { i64, i8, i32, i32, i32, i32 }
%struct.aom_read_bit_buffer = type { i8*, i8*, i32, i8*, void (i8*)* }

@.str = private unnamed_addr constant [49 x i8] c"AOMedia Project AV1 Decoder 3.0.0-375-g4d1ace0ad\00", align 1
@decoder_ctrl_maps = internal constant [41 x %struct.aom_codec_ctrl_fn_map] [%struct.aom_codec_ctrl_fn_map { i32 232, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_copy_reference }, %struct.aom_codec_ctrl_fn_map { i32 231, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_reference }, %struct.aom_codec_ctrl_fn_map { i32 266, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_invert_tile_order }, %struct.aom_codec_ctrl_fn_map { i32 265, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_byte_alignment }, %struct.aom_codec_ctrl_fn_map { i32 267, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_skip_loop_filter }, %struct.aom_codec_ctrl_fn_map { i32 270, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_decode_tile_row }, %struct.aom_codec_ctrl_fn_map { i32 271, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_decode_tile_col }, %struct.aom_codec_ctrl_fn_map { i32 272, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tile_mode }, %struct.aom_codec_ctrl_fn_map { i32 278, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_is_annexb }, %struct.aom_codec_ctrl_fn_map { i32 279, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_operating_point }, %struct.aom_codec_ctrl_fn_map { i32 280, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_output_all_layers }, %struct.aom_codec_ctrl_fn_map { i32 281, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_inspection_callback }, %struct.aom_codec_ctrl_fn_map { i32 276, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_ext_tile_debug }, %struct.aom_codec_ctrl_fn_map { i32 277, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_row_mt }, %struct.aom_codec_ctrl_fn_map { i32 275, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_ext_ref_ptr }, %struct.aom_codec_ctrl_fn_map { i32 282, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_skip_film_grain }, %struct.aom_codec_ctrl_fn_map { i32 257, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_frame_corrupted }, %struct.aom_codec_ctrl_fn_map { i32 269, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_last_quantizer }, %struct.aom_codec_ctrl_fn_map { i32 256, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_last_ref_updates }, %struct.aom_codec_ctrl_fn_map { i32 261, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_bit_depth }, %struct.aom_codec_ctrl_fn_map { i32 262, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_img_format }, %struct.aom_codec_ctrl_fn_map { i32 263, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_tile_size }, %struct.aom_codec_ctrl_fn_map { i32 264, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_tile_count }, %struct.aom_codec_ctrl_fn_map { i32 260, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_render_size }, %struct.aom_codec_ctrl_fn_map { i32 259, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_frame_size }, %struct.aom_codec_ctrl_fn_map { i32 268, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_accounting }, %struct.aom_codec_ctrl_fn_map { i32 233, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_new_frame_image }, %struct.aom_codec_ctrl_fn_map { i32 234, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_copy_new_frame_image }, %struct.aom_codec_ctrl_fn_map { i32 230, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_reference }, %struct.aom_codec_ctrl_fn_map { i32 273, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_frame_header_info }, %struct.aom_codec_ctrl_fn_map { i32 274, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_tile_data }, %struct.aom_codec_ctrl_fn_map { i32 283, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_fwd_kf_value }, %struct.aom_codec_ctrl_fn_map { i32 285, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_altref_present }, %struct.aom_codec_ctrl_fn_map { i32 284, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_frame_flags }, %struct.aom_codec_ctrl_fn_map { i32 286, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_tile_info }, %struct.aom_codec_ctrl_fn_map { i32 287, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_screen_content_tools_info }, %struct.aom_codec_ctrl_fn_map { i32 288, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_still_picture }, %struct.aom_codec_ctrl_fn_map { i32 289, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_sb_size }, %struct.aom_codec_ctrl_fn_map { i32 290, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_show_existing_frame_flag }, %struct.aom_codec_ctrl_fn_map { i32 291, i32 (%struct.aom_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_s_frame_info }, %struct.aom_codec_ctrl_fn_map zeroinitializer], align 16
@aom_codec_av1_dx_algo = hidden constant { i8*, i32, i64, i32 (%struct.aom_codec_ctx*)*, i32 (%struct.aom_codec_alg_priv*)*, %struct.aom_codec_ctrl_fn_map*, %struct.aom_codec_dec_iface, %struct.aom_codec_enc_iface, i32 (%struct.aom_codec_alg_priv*, i8*, i8*)* } { i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i32 0, i32 0), i32 7, i64 2097153, i32 (%struct.aom_codec_ctx*)* @decoder_init, i32 (%struct.aom_codec_alg_priv*)* @decoder_destroy, %struct.aom_codec_ctrl_fn_map* getelementptr inbounds ([41 x %struct.aom_codec_ctrl_fn_map], [41 x %struct.aom_codec_ctrl_fn_map]* @decoder_ctrl_maps, i32 0, i32 0), %struct.aom_codec_dec_iface { i32 (i8*, i64, %struct.aom_codec_stream_info*)* @decoder_peek_si, i32 (%struct.aom_codec_alg_priv*, %struct.aom_codec_stream_info*)* @decoder_get_si, i32 (%struct.aom_codec_alg_priv*, i8*, i64, i8*)* @decoder_decode, %struct.aom_image* (%struct.aom_codec_alg_priv*, i8**)* @decoder_get_frame, i32 (%struct.aom_codec_alg_priv*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, i8*)* @decoder_set_fb_fn }, %struct.aom_codec_enc_iface zeroinitializer, i32 (%struct.aom_codec_alg_priv*, i8*, i8*)* null }, align 8
@.str.1 = private unnamed_addr constant [37 x i8] c"Failed to allocate buffer pool mutex\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Failed to allocate frame_worker\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"aom frameworker\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"Failed to allocate frame_worker_data\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"Failed to initialize internal frame buffers\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"Grain systhesis failed\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @decoder_init(%struct.aom_codec_ctx* nocapture) #0 {
  %2 = getelementptr inbounds %struct.aom_codec_ctx, %struct.aom_codec_ctx* %0, i64 0, i32 6
  %3 = load %struct.aom_codec_priv*, %struct.aom_codec_priv** %2, align 8
  %4 = icmp eq %struct.aom_codec_priv* %3, null
  br i1 %4, label %5, label %36

5:                                                ; preds = %1
  %6 = tail call i8* @aom_calloc(i64 1, i64 27440) #8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %36, label %8

8:                                                ; preds = %5
  %9 = bitcast %struct.aom_codec_priv** %2 to i8**
  store i8* %6, i8** %9, align 8
  %10 = getelementptr inbounds %struct.aom_codec_ctx, %struct.aom_codec_ctx* %0, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 8
  %13 = bitcast i8* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 420
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %6, i64 208
  %17 = getelementptr inbounds i8, i8* %6, i64 220
  %18 = bitcast i8* %17 to i32*
  store i32 1, i32* %18, align 4
  %19 = getelementptr inbounds %struct.aom_codec_ctx, %struct.aom_codec_ctx* %0, i64 0, i32 5, i32 0
  %20 = load %struct.aom_codec_dec_cfg*, %struct.aom_codec_dec_cfg** %19, align 8
  %21 = icmp eq %struct.aom_codec_dec_cfg* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %8
  %23 = bitcast %struct.aom_codec_dec_cfg* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 4 %23, i64 16, i1 false)
  %24 = bitcast %struct.aom_codec_dec_cfg** %19 to i8**
  store i8* %16, i8** %24, align 8
  br label %25

25:                                               ; preds = %8, %22
  %26 = getelementptr inbounds i8, i8* %6, i64 27392
  %27 = bitcast i8* %26 to i64*
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %6, i64 468
  %29 = bitcast i8* %28 to i32*
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %6, i64 460
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %6, i64 452
  %33 = bitcast i8* %32 to i32*
  store i32 -1, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %6, i64 456
  %35 = bitcast i8* %34 to i32*
  store i32 -1, i32* %35, align 8
  br label %36

36:                                               ; preds = %1, %25, %5
  %37 = phi i32 [ 2, %5 ], [ 0, %25 ], [ 0, %1 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decoder_destroy(%struct.aom_codec_alg_priv*) #0 {
  %2 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %3 = load %struct.AVxWorker*, %struct.AVxWorker** %2, align 8
  %4 = icmp eq %struct.AVxWorker* %3, null
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %3, i64 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.AV1Decoder**
  %9 = load %struct.AV1Decoder*, %struct.AV1Decoder** %8, align 8
  %10 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #8
  %11 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %10, i64 0, i32 5
  %12 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %11, align 8
  tail call void %12(%struct.AVxWorker* nonnull %3) #8
  %13 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %9, i64 0, i32 1
  %14 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %9, i64 0, i32 1, i32 43
  %15 = bitcast %struct.TPL_MV_REF** %14 to i8**
  %16 = load i8*, i8** %15, align 16
  tail call void @aom_free(i8* %16) #8
  store %struct.TPL_MV_REF* null, %struct.TPL_MV_REF** %14, align 16
  %17 = load %struct.AV1Decoder*, %struct.AV1Decoder** %8, align 8
  %18 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %17, i64 0, i32 1
  tail call void @av1_remove_common(%struct.AV1Common* %18) #8
  %19 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %9, i64 0, i32 7
  %20 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %9, i64 0, i32 6
  %21 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %9, i64 0, i32 9
  %22 = load i32, i32* %21, align 8
  tail call void @av1_free_cdef_buffers(%struct.AV1Common* %13, %struct.AV1CdefWorker** %19, %struct.AV1CdefSyncData* %20, i32 %22) #8
  tail call void @av1_free_cdef_sync(%struct.AV1CdefSyncData* %20) #8
  tail call void @av1_decoder_remove(%struct.AV1Decoder* %9) #8
  tail call void @aom_free(i8* %7) #8
  %23 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 25
  %24 = load %struct.BufferPool*, %struct.BufferPool** %23, align 8
  %25 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %24, i64 0, i32 0
  %26 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %25) #8
  br label %27

27:                                               ; preds = %1, %5
  %28 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 25
  %29 = load %struct.BufferPool*, %struct.BufferPool** %28, align 8
  %30 = icmp eq %struct.BufferPool* %29, null
  br i1 %30, label %52, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 23
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %39, %31
  %36 = phi %struct.BufferPool* [ %29, %31 ], [ %51, %39 ]
  tail call void @av1_free_ref_frame_buffers(%struct.BufferPool* %36) #8
  %37 = load %struct.BufferPool*, %struct.BufferPool** %28, align 8
  %38 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %37, i64 0, i32 5
  tail call void @av1_free_internal_frame_buffers(%struct.InternalFrameBufferList* %38) #8
  br label %52

39:                                               ; preds = %31, %39
  %40 = phi %struct.BufferPool* [ %51, %39 ], [ %29, %31 ]
  %41 = phi i64 [ %48, %39 ], [ 0, %31 ]
  %42 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %40, i64 0, i32 3
  %43 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %42, align 8
  %44 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %40, i64 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 22, i64 %41
  %47 = tail call i32 %43(i8* %45, %struct.aom_codec_frame_buffer* %46) #8
  %48 = add nuw i64 %41, 1
  %49 = load i64, i64* %32, align 8
  %50 = icmp ult i64 %48, %49
  %51 = load %struct.BufferPool*, %struct.BufferPool** %28, align 8
  br i1 %50, label %39, label %35

52:                                               ; preds = %27, %35
  %53 = bitcast %struct.AVxWorker** %2 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void @aom_free(i8* %54) #8
  %55 = bitcast %struct.BufferPool** %28 to i8**
  %56 = load i8*, i8** %55, align 8
  tail call void @aom_free(i8* %56) #8
  %57 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3
  tail call void @aom_img_free(%struct.aom_image* %57) #8
  %58 = bitcast %struct.aom_codec_alg_priv* %0 to i8*
  tail call void @aom_free(i8* %58) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decoder_peek_si(i8*, i64, %struct.aom_codec_stream_info*) #0 {
  %4 = tail call fastcc i32 @decoder_peek_si_internal(i8* %0, i64 %1, %struct.aom_codec_stream_info* %2, i32* null)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decoder_get_si(%struct.aom_codec_alg_priv* nocapture readonly, %struct.aom_codec_stream_info* nocapture) #0 {
  %3 = bitcast %struct.aom_codec_stream_info* %1 to i8*
  %4 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 2
  %5 = bitcast %struct.aom_codec_stream_info* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 8 %5, i64 24, i1 false)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decoder_decode(%struct.aom_codec_alg_priv*, i8*, i64, i8*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %11 = load %struct.AVxWorker*, %struct.AVxWorker** %10, align 8
  %12 = icmp eq %struct.AVxWorker* %11, null
  br i1 %12, label %73, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 25
  %15 = load %struct.BufferPool*, %struct.BufferPool** %14, align 8
  %16 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %15, i64 0, i32 0
  %17 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %16) #8
  %18 = load %struct.AVxWorker*, %struct.AVxWorker** %10, align 8
  %19 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %18, i64 0, i32 4
  %20 = bitcast i8** %19 to %struct.FrameWorkerData**
  %21 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %20, align 8
  %22 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %21, i64 0, i32 0
  %23 = load %struct.AV1Decoder*, %struct.AV1Decoder** %22, align 8
  %24 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 19
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %15, i64 0, i32 3
  %29 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %15, i64 0, i32 1
  br label %38

30:                                               ; preds = %58, %13
  store i64 0, i64* %24, align 8
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %16) #8
  %32 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 23
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %62, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %15, i64 0, i32 3
  %37 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %15, i64 0, i32 1
  br label %63

38:                                               ; preds = %27, %58
  %39 = phi i64 [ 0, %27 ], [ %59, %58 ]
  %40 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 18, i64 %39
  %41 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %40, align 8
  %42 = icmp eq %struct.RefCntBuffer* %41, null
  br i1 %42, label %58, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %41, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = add nsw i32 %45, -1
  store i32 %46, i32* %44, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %41, i64 0, i32 16
  %50 = getelementptr inbounds %struct.aom_codec_frame_buffer, %struct.aom_codec_frame_buffer* %49, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %58, label %53

53:                                               ; preds = %48
  %54 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %28, align 8
  %55 = load i8*, i8** %29, align 8
  %56 = tail call i32 %54(i8* %55, %struct.aom_codec_frame_buffer* %49) #8
  %57 = bitcast %struct.aom_codec_frame_buffer* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 24, i1 false) #8
  br label %58

58:                                               ; preds = %38, %43, %48, %53
  %59 = add nuw i64 %39, 1
  %60 = load i64, i64* %24, align 8
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %38, label %30

62:                                               ; preds = %63, %30
  store i64 0, i64* %32, align 8
  br label %73

63:                                               ; preds = %35, %63
  %64 = phi i64 [ 0, %35 ], [ %69, %63 ]
  %65 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %36, align 8
  %66 = load i8*, i8** %37, align 8
  %67 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 22, i64 %64
  %68 = tail call i32 %65(i8* %66, %struct.aom_codec_frame_buffer* %67) #8
  %69 = add nuw i64 %64, 1
  %70 = bitcast %struct.aom_codec_frame_buffer* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 24, i1 false)
  %71 = load i64, i64* %32, align 8
  %72 = icmp ult i64 %69, %71
  br i1 %72, label %63, label %62

73:                                               ; preds = %4, %62
  %74 = icmp eq i8* %1, null
  %75 = icmp eq i64 %2, 0
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 5
  store i32 1, i32* %78, align 4
  br label %393

79:                                               ; preds = %73
  %80 = or i1 %74, %75
  br i1 %80, label %393, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 5
  store i32 0, i32* %82, align 4
  %83 = load %struct.AVxWorker*, %struct.AVxWorker** %10, align 8
  %84 = icmp eq %struct.AVxWorker* %83, null
  br i1 %84, label %85, label %225

85:                                               ; preds = %81
  %86 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #8
  %87 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 7
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %87, align 8
  %88 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 24
  store i32 1, i32* %88, align 8
  store i32 0, i32* %82, align 4
  %89 = tail call i8* @aom_calloc(i64 1, i64 365136) #8
  %90 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 25
  %91 = bitcast %struct.BufferPool** %90 to i8**
  store i8* %89, i8** %91, align 8
  %92 = icmp eq i8* %89, null
  br i1 %92, label %393, label %93

93:                                               ; preds = %85
  %94 = bitcast i8* %89 to %union.pthread_mutex_t*
  %95 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %94, %union.pthread_mutexattr_t* null) #8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8** %98, align 8
  br label %393

99:                                               ; preds = %93
  %100 = tail call i8* @aom_malloc(i64 56) #8
  %101 = bitcast %struct.AVxWorker** %10 to i8**
  store i8* %100, i8** %101, align 8
  %102 = icmp eq i8* %100, null
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8** %104, align 8
  br label %393

105:                                              ; preds = %99
  %106 = bitcast i8* %100 to %struct.AVxWorker*
  %107 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %86, i64 0, i32 0
  %108 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %107, align 8
  tail call void %108(%struct.AVxWorker* nonnull %106) #8
  %109 = getelementptr inbounds i8, i8* %100, i64 16
  %110 = bitcast i8* %109 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8** %110, align 8
  %111 = tail call i8* @aom_memalign(i64 32, i64 56) #8
  %112 = getelementptr inbounds i8, i8* %100, i64 32
  %113 = bitcast i8* %112 to i8**
  store i8* %111, i8** %113, align 8
  %114 = icmp eq i8* %111, null
  br i1 %114, label %115, label %117

115:                                              ; preds = %105
  %116 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8** %116, align 8
  br label %393

117:                                              ; preds = %105
  %118 = load %struct.BufferPool*, %struct.BufferPool** %90, align 8
  %119 = tail call %struct.AV1Decoder* @av1_decoder_create(%struct.BufferPool* %118) #8
  %120 = bitcast i8* %111 to %struct.AV1Decoder**
  store %struct.AV1Decoder* %119, %struct.AV1Decoder** %120, align 8
  %121 = icmp eq %struct.AV1Decoder* %119, null
  br i1 %121, label %122, label %124

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8** %123, align 8
  br label %393

124:                                              ; preds = %117
  %125 = getelementptr inbounds i8, i8* %111, i64 44
  %126 = bitcast i8* %125 to i32*
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds i8, i8* %111, i64 40
  %128 = bitcast i8* %127 to i32*
  store i32 0, i32* %128, align 8
  %129 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %119, i64 0, i32 21
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 1, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %135 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %134, i64 0, i32 22
  store i32 %133, i32* %135, align 8
  %136 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 6
  %137 = load i32, i32* %136, align 8
  %138 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %139 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %138, i64 0, i32 23
  store i32 %137, i32* %139, align 4
  %140 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 13
  %141 = load i32, i32* %140, align 4
  %142 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %143 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %142, i64 0, i32 1, i32 38, i32 17
  store i32 %141, i32* %143, align 4
  %144 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 17
  %145 = load i32, i32* %144, align 8
  %146 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %147 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %146, i64 0, i32 57
  store i32 %145, i32* %147, align 4
  %148 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 11
  %149 = load i32, i32* %148, align 4
  %150 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %151 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %150, i64 0, i32 28
  store i32 %149, i32* %151, align 32
  %152 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 12
  %153 = load i32, i32* %152, align 8
  %154 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %155 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %154, i64 0, i32 29
  store i32 %153, i32* %155, align 4
  %156 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 18
  %157 = load i32, i32* %156, align 4
  %158 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %159 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %158, i64 0, i32 32
  store i32 %157, i32* %159, align 16
  %160 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 19
  %161 = load i32, i32* %160, align 8
  %162 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %163 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %162, i64 0, i32 17
  store i32 %161, i32* %163, align 16
  %164 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 14
  %165 = load i32, i32* %164, align 8
  %166 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %167 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %166, i64 0, i32 43
  store i32 %165, i32* %167, align 16
  %168 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 15
  %169 = load i32, i32* %168, align 4
  %170 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %171 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %170, i64 0, i32 44
  store i32 %169, i32* %171, align 4
  %172 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %173 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %172, i64 0, i32 59
  store i32 0, i32* %173, align 16
  %174 = load %struct.AV1Decoder*, %struct.AV1Decoder** %120, align 8
  %175 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %174, i64 0, i32 60
  store i32 0, i32* %175, align 4
  %176 = getelementptr inbounds i8, i8* %100, i64 24
  %177 = bitcast i8* %176 to i32 (i8*, i8*)**
  store i32 (i8*, i8*)* @frame_worker_hook, i32 (i8*, i8*)** %177, align 8
  %178 = load %struct.AVxWorker*, %struct.AVxWorker** %10, align 8
  %179 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %178, i64 0, i32 4
  %180 = bitcast i8** %179 to %struct.FrameWorkerData**
  %181 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %180, align 8
  %182 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %181, i64 0, i32 0
  %183 = load %struct.AV1Decoder*, %struct.AV1Decoder** %182, align 8
  %184 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 1, i32 39
  %185 = load %struct.BufferPool*, %struct.BufferPool** %184, align 8
  %186 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 1, i32 12
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %186, align 16
  %187 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 8
  %188 = load i32, i32* %187, align 8
  %189 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 1, i32 20, i32 15
  store i32 %188, i32* %189, align 4
  %190 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 9
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 55
  store i32 %191, i32* %192, align 4
  %193 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 10
  %194 = load i32, i32* %193, align 8
  %195 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 56
  store i32 %194, i32* %195, align 8
  %196 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 27
  %197 = load i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %196, align 8
  %198 = icmp eq i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* %197, null
  br i1 %198, label %214, label %199

199:                                              ; preds = %124
  %200 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 28
  %201 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %200, align 8
  %202 = icmp eq i32 (i8*, %struct.aom_codec_frame_buffer*)* %201, null
  br i1 %202, label %214, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 2
  store i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* %197, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %204, align 8
  %205 = bitcast i32 (i8*, %struct.aom_codec_frame_buffer*)** %200 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 3
  %208 = bitcast i32 (i8*, %struct.aom_codec_frame_buffer*)** %207 to i64*
  store i64 %206, i64* %208, align 8
  %209 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 26
  %210 = bitcast i8** %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 1
  %213 = bitcast i8** %212 to i64*
  store i64 %211, i64* %213, align 8
  br label %225

214:                                              ; preds = %199, %124
  %215 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 2
  store i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* @av1_get_frame_buffer, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %215, align 8
  %216 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 3
  store i32 (i8*, %struct.aom_codec_frame_buffer*)* @av1_release_frame_buffer, i32 (i8*, %struct.aom_codec_frame_buffer*)** %216, align 8
  %217 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 5
  %218 = tail call i32 @av1_alloc_internal_frame_buffers(%struct.InternalFrameBufferList* %217) #8
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %222, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %183, i64 0, i32 65
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %221, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %222

222:                                              ; preds = %220, %214
  %223 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %185, i64 0, i32 1
  %224 = bitcast i8** %223 to %struct.InternalFrameBufferList**
  store %struct.InternalFrameBufferList* %217, %struct.InternalFrameBufferList** %224, align 8
  br label %225

225:                                              ; preds = %222, %203, %81
  %226 = ptrtoint i8* %1 to i64
  %227 = getelementptr inbounds i8, i8* %1, i64 %2
  %228 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 17
  %229 = load i32, i32* %228, align 8
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %246, label %231

231:                                              ; preds = %225
  %232 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %232) #8
  store i64 -6148914691236517206, i64* %6, align 8
  %233 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %233) #8
  store i64 -6148914691236517206, i64* %7, align 8
  %234 = call i32 @aom_uleb_decode(i8* nonnull %1, i64 %2, i64* nonnull %7, i64* nonnull %6) #8
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %237, label %236

236:                                              ; preds = %231
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %233) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %232) #8
  br label %393

237:                                              ; preds = %231
  %238 = load i64, i64* %6, align 8
  %239 = getelementptr inbounds i8, i8* %1, i64 %238
  %240 = ptrtoint i8* %239 to i64
  %241 = load i64, i64* %7, align 8
  %242 = ptrtoint i8* %227 to i64
  %243 = sub i64 %242, %240
  %244 = icmp ugt i64 %241, %243
  %245 = getelementptr inbounds i8, i8* %239, i64 %241
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %233) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %232) #8
  br i1 %244, label %393, label %246

246:                                              ; preds = %237, %225
  %247 = phi i64 [ %226, %225 ], [ %240, %237 ]
  %248 = phi i8* [ %227, %225 ], [ %245, %237 ]
  %249 = inttoptr i64 %247 to i8*
  %250 = icmp ugt i8* %248, %249
  br i1 %250, label %251, label %393

251:                                              ; preds = %246
  %252 = bitcast i64* %8 to i8*
  %253 = bitcast i64* %9 to i8*
  %254 = ptrtoint i8* %248 to i64
  %255 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 2, i32 1
  %256 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 2
  %257 = bitcast i32* %5 to i8*
  %258 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 2, i32 5
  %259 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 2, i32 2
  %260 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 13
  %261 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 11
  %262 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 12
  %263 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 14
  %264 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 15
  %265 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 16
  %266 = bitcast %struct.EXTERNAL_REFERENCES* %265 to i8*
  %267 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 0, i32 0
  %268 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 24
  br label %269

269:                                              ; preds = %251, %389
  %270 = phi i8* [ %249, %251 ], [ %391, %389 ]
  %271 = phi i64 [ %247, %251 ], [ %390, %389 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %252) #8
  store i64 -6148914691236517206, i64* %8, align 8
  %272 = load i32, i32* %228, align 8
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %287, label %274

274:                                              ; preds = %269
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %253) #8
  store i64 -6148914691236517206, i64* %9, align 8
  %275 = sub i64 %254, %271
  %276 = call i32 @aom_uleb_decode(i8* %270, i64 %275, i64* nonnull %8, i64* nonnull %9) #8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %285

278:                                              ; preds = %274
  %279 = load i64, i64* %9, align 8
  %280 = getelementptr inbounds i8, i8* %270, i64 %279
  %281 = ptrtoint i8* %280 to i64
  %282 = load i64, i64* %8, align 8
  %283 = sub i64 %254, %281
  %284 = icmp ugt i64 %282, %283
  br i1 %284, label %285, label %286

285:                                              ; preds = %274, %278
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #8
  br label %385

286:                                              ; preds = %278
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #8
  br label %289

287:                                              ; preds = %269
  %288 = sub i64 %254, %271
  store i64 %288, i64* %8, align 8
  br label %289

289:                                              ; preds = %286, %287
  %290 = phi i64 [ %288, %287 ], [ %282, %286 ]
  %291 = phi i64 [ %271, %287 ], [ %281, %286 ]
  %292 = call %struct.AVxWorkerInterface* @aom_get_worker_interface() #8
  %293 = load i32, i32* %255, align 4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %306

295:                                              ; preds = %289
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %257) #8
  store i32 0, i32* %5, align 4
  %296 = load i32, i32* %228, align 8
  store i32 %296, i32* %258, align 4
  %297 = inttoptr i64 %291 to i8*
  %298 = call fastcc i32 @decoder_peek_si_internal(i8* %297, i64 %290, %struct.aom_codec_stream_info* %256, i32* nonnull %5) #8
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %301, label %300

300:                                              ; preds = %295
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %257) #8
  br label %385

301:                                              ; preds = %295
  %302 = load i32, i32* %259, align 8
  %303 = load i32, i32* %5, align 4
  %304 = or i32 %303, %302
  %305 = icmp eq i32 %304, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %257) #8
  br i1 %305, label %385, label %306

306:                                              ; preds = %301, %289
  %307 = load %struct.AVxWorker*, %struct.AVxWorker** %10, align 8
  %308 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %307, i64 0, i32 4
  %309 = bitcast i8** %308 to %struct.FrameWorkerData**
  %310 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %309, align 8
  %311 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 1
  %312 = bitcast i8** %311 to i64*
  store i64 %291, i64* %312, align 8
  %313 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 3
  store i64 %290, i64* %313, align 8
  %314 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 4
  store i8* %3, i8** %314, align 8
  %315 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 5
  store i32 1, i32* %315, align 8
  %316 = load i32, i32* %260, align 4
  %317 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 0
  %318 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %319 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %318, i64 0, i32 1, i32 38, i32 17
  store i32 %316, i32* %319, align 4
  %320 = load i32, i32* %261, align 4
  %321 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %322 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %321, i64 0, i32 28
  store i32 %320, i32* %322, align 32
  %323 = load i32, i32* %262, align 8
  %324 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %325 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %324, i64 0, i32 29
  store i32 %323, i32* %325, align 4
  %326 = load i32, i32* %263, align 8
  %327 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %328 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %327, i64 0, i32 43
  store i32 %326, i32* %328, align 16
  %329 = load i32, i32* %264, align 4
  %330 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %331 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %330, i64 0, i32 44
  store i32 %329, i32* %331, align 4
  %332 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %333 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %332, i64 0, i32 45
  %334 = bitcast %struct.EXTERNAL_REFERENCES* %333 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %334, i8* align 8 %266, i64 26632, i1 false) #8
  %335 = load i32, i32* %228, align 8
  %336 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  %337 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %336, i64 0, i32 57
  store i32 %335, i32* %337, align 4
  %338 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %307, i64 0, i32 6
  store i32 0, i32* %338, align 8
  %339 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %292, i64 0, i32 4
  %340 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %339, align 8
  call void %340(%struct.AVxWorker* %307) #8
  %341 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %310, i64 0, i32 2
  %342 = bitcast i8** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = load i32, i32* %338, align 8
  %345 = icmp eq i32 %344, 0
  %346 = load %struct.AV1Decoder*, %struct.AV1Decoder** %317, align 8
  br i1 %345, label %351, label %347

347:                                              ; preds = %306
  %348 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %346, i64 0, i32 65, i32 0
  %349 = load i32, i32* %348, align 8
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %372, label %364

351:                                              ; preds = %306
  %352 = load i32, i32* %268, align 8
  %353 = icmp eq i32 %352, 1
  br i1 %353, label %354, label %372

354:                                              ; preds = %351
  %355 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %346, i64 0, i32 24
  %356 = load i32, i32* %355, align 16
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %372

358:                                              ; preds = %354
  %359 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %346, i64 0, i32 1, i32 0, i32 0
  %360 = load i8, i8* %359, align 16
  %361 = and i8 %360, -3
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %372

363:                                              ; preds = %358
  store i32 0, i32* %268, align 8
  br label %372

364:                                              ; preds = %347
  %365 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %346, i64 0, i32 65, i32 1
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 0
  %368 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %346, i64 0, i32 65, i32 2, i64 0
  %369 = select i1 %367, i8* null, i8* %368
  store i8* %369, i8** %267, align 8
  %370 = load i32, i32* %348, align 8
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %385

372:                                              ; preds = %363, %358, %354, %351, %347, %364
  %373 = inttoptr i64 %343 to i8*
  %374 = icmp ugt i8* %248, %373
  br i1 %374, label %375, label %389

375:                                              ; preds = %372
  %376 = load i8, i8* %373, align 1
  %377 = icmp eq i8 %376, 0
  br i1 %377, label %381, label %389

378:                                              ; preds = %381
  %379 = load i8, i8* %383, align 1
  %380 = icmp eq i8 %379, 0
  br i1 %380, label %381, label %387

381:                                              ; preds = %375, %378
  %382 = phi i8* [ %383, %378 ], [ %373, %375 ]
  %383 = getelementptr inbounds i8, i8* %382, i64 1
  %384 = icmp eq i8* %383, %248
  br i1 %384, label %389, label %378

385:                                              ; preds = %364, %301, %285, %300
  %386 = phi i32 [ 7, %285 ], [ %298, %300 ], [ %370, %364 ], [ 1, %301 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %252) #8
  br label %393

387:                                              ; preds = %378
  %388 = ptrtoint i8* %383 to i64
  br label %389

389:                                              ; preds = %381, %375, %387, %372
  %390 = phi i64 [ %343, %372 ], [ %388, %387 ], [ %343, %375 ], [ %254, %381 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %252) #8
  %391 = inttoptr i64 %390 to i8*
  %392 = icmp ugt i8* %248, %391
  br i1 %392, label %269, label %393

393:                                              ; preds = %389, %246, %237, %122, %115, %85, %103, %97, %236, %385, %79, %77
  %394 = phi i32 [ 0, %77 ], [ 8, %79 ], [ 7, %237 ], [ 7, %236 ], [ %386, %385 ], [ 2, %97 ], [ 2, %103 ], [ 2, %85 ], [ 2, %115 ], [ 2, %122 ], [ 0, %246 ], [ 0, %389 ]
  ret i32 %394
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.aom_image* @decoder_get_frame(%struct.aom_codec_alg_priv*, i8**) #0 {
  %3 = alloca %struct.AllocCbParam, align 8
  %4 = alloca %struct.yv12_buffer_config*, align 8
  %5 = alloca %struct.aom_film_grain_t*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = icmp eq i8** %1, null
  br i1 %10, label %286, label %11

11:                                               ; preds = %2
  %12 = bitcast i8** %1 to i64*
  %13 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %14 = load %struct.AVxWorker*, %struct.AVxWorker** %13, align 8
  %15 = icmp eq %struct.AVxWorker* %14, null
  br i1 %15, label %286, label %16

16:                                               ; preds = %11
  %17 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #8
  %18 = load %struct.AVxWorker*, %struct.AVxWorker** %13, align 8
  %19 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %18, i64 0, i32 4
  %20 = bitcast i8** %19 to %struct.FrameWorkerData**
  %21 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %20, align 8
  %22 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %21, i64 0, i32 0
  %23 = load %struct.AV1Decoder*, %struct.AV1Decoder** %22, align 8
  %24 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1
  %25 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %17, i64 0, i32 2
  %26 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %25, align 8
  %27 = tail call i32 %26(%struct.AVxWorker* %18) #8
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %21, i64 0, i32 5
  br i1 %28, label %284, label %30

30:                                               ; preds = %16
  %31 = load i32, i32* %29, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %48

33:                                               ; preds = %30
  store i32 0, i32* %29, align 8
  %34 = load %struct.AV1Decoder*, %struct.AV1Decoder** %22, align 8
  %35 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 24
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %48

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %34, i64 0, i32 24
  %40 = load i32, i32* %39, align 16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %48

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %34, i64 0, i32 1, i32 0, i32 0
  %44 = load i8, i8* %43, align 16
  %45 = and i8 %44, -3
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  store i32 0, i32* %35, align 8
  br label %48

48:                                               ; preds = %47, %42, %38, %33, %30
  %49 = bitcast %struct.yv12_buffer_config** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #8
  store %struct.yv12_buffer_config* inttoptr (i64 -6148914691236517206 to %struct.yv12_buffer_config*), %struct.yv12_buffer_config** %4, align 8
  %50 = bitcast %struct.aom_film_grain_t** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #8
  store %struct.aom_film_grain_t* inttoptr (i64 -6148914691236517206 to %struct.aom_film_grain_t*), %struct.aom_film_grain_t** %5, align 8
  %51 = load %struct.AV1Decoder*, %struct.AV1Decoder** %22, align 8
  %52 = load i64, i64* %12, align 8
  %53 = call i32 @av1_get_raw_frame(%struct.AV1Decoder* %51, i64 %52, %struct.yv12_buffer_config** nonnull %4, %struct.aom_film_grain_t** nonnull %5) #8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %283

55:                                               ; preds = %48
  %56 = load i64, i64* %12, align 8
  %57 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 18, i64 %56
  %58 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %57, align 8
  %59 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 7
  store %struct.RefCntBuffer* %58, %struct.RefCntBuffer** %59, align 8
  %60 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 24
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %281

63:                                               ; preds = %55
  %64 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3
  call void @aom_img_remove_metadata(%struct.aom_image* %64) #8
  %65 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %4, align 8
  %66 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %21, i64 0, i32 4
  %67 = load i8*, i8** %66, align 8
  call fastcc void @yuvconfig2image(%struct.aom_image* %64, %struct.yv12_buffer_config* %65, i8* %67)
  %68 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 53
  %69 = load %struct.aom_metadata_array*, %struct.aom_metadata_array** %68, align 8
  %70 = icmp ne %struct.aom_metadata_array* %69, null
  %71 = icmp ne %struct.aom_image* %64, null
  %72 = and i1 %71, %70
  br i1 %72, label %73, label %75

73:                                               ; preds = %63
  %74 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 26
  store %struct.aom_metadata_array* %69, %struct.aom_metadata_array** %74, align 8
  store %struct.aom_metadata_array* null, %struct.aom_metadata_array** %68, align 8
  br label %75

75:                                               ; preds = %63, %73
  %76 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 43
  %77 = load i32, i32* %76, align 16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %92

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 38, i32 17
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %204, label %83

83:                                               ; preds = %79
  %84 = load i64, i64* %12, align 8
  %85 = add i64 %84, 1
  store i64 %85, i64* %12, align 8
  call void @aom_img_remove_metadata(%struct.aom_image* %64) #8
  %86 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 46
  call fastcc void @yuvconfig2image(%struct.aom_image* %64, %struct.yv12_buffer_config* %86, i8* null)
  %87 = load %struct.aom_metadata_array*, %struct.aom_metadata_array** %68, align 8
  %88 = icmp ne %struct.aom_metadata_array* %87, null
  %89 = and i1 %71, %88
  br i1 %89, label %90, label %281

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 26
  store %struct.aom_metadata_array* %87, %struct.aom_metadata_array** %91, align 8
  store %struct.aom_metadata_array* null, %struct.aom_metadata_array** %68, align 8
  br label %281

92:                                               ; preds = %75
  %93 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 35
  %94 = load %struct.SequenceHeader*, %struct.SequenceHeader** %93, align 16
  %95 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %94, i64 0, i32 27
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  %98 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 38, i32 18
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %153, label %101

101:                                              ; preds = %92
  %102 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 28
  %103 = load i32, i32* %102, align 32
  %104 = icmp sgt i32 %103, -1
  br i1 %104, label %105, label %153

105:                                              ; preds = %101
  %106 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %106) #8
  store i32 -1431655766, i32* %6, align 4
  %107 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %107) #8
  store i32 -1431655766, i32* %7, align 4
  call void @av1_get_uniform_tile_size(%struct.AV1Common* %24, i32* nonnull %6, i32* nonnull %7) #8
  %108 = load i32, i32* %102, align 32
  %109 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 38, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = add nsw i32 %110, -1
  %112 = icmp slt i32 %108, %111
  %113 = select i1 %112, i32 %108, i32 %111
  %114 = load i32, i32* %7, align 4
  %115 = mul nsw i32 %113, %114
  %116 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 15
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 17, i64 0
  %119 = load i32, i32* %118, align 8
  %120 = shl i32 %119, 2
  %121 = mul i32 %120, %115
  %122 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 0
  %123 = load i8*, i8** %122, align 8
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds i8, i8* %123, i64 %124
  store i8* %125, i8** %122, align 8
  br i1 %97, label %126, label %143

126:                                              ; preds = %105
  %127 = lshr i32 4, %117
  %128 = mul nsw i32 %115, %127
  %129 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 17, i64 1
  %130 = load i32, i32* %129, align 4
  %131 = mul nsw i32 %128, %130
  %132 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 1
  %133 = load i8*, i8** %132, align 8
  %134 = sext i32 %131 to i64
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  store i8* %135, i8** %132, align 8
  %136 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 17, i64 2
  %137 = load i32, i32* %136, align 4
  %138 = mul nsw i32 %128, %137
  %139 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 2
  %140 = load i8*, i8** %139, align 8
  %141 = sext i32 %138 to i64
  %142 = getelementptr inbounds i8, i8* %140, i64 %141
  store i8* %142, i8** %139, align 8
  br label %143

143:                                              ; preds = %105, %126
  %144 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 21, i32 3
  %145 = load i32, i32* %144, align 4
  %146 = sub nsw i32 %145, %115
  %147 = icmp slt i32 %114, %146
  %148 = select i1 %147, i32 %114, i32 %146
  %149 = shl nsw i32 %148, 2
  %150 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 11
  store i32 %149, i32* %150, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %107) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %106) #8
  %151 = load i32, i32* %76, align 16
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %204, label %153

153:                                              ; preds = %101, %92, %143
  %154 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 38, i32 18
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %204, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 29
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %159, -1
  br i1 %160, label %161, label %204

161:                                              ; preds = %157
  %162 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %162) #8
  store i32 -1431655766, i32* %8, align 4
  %163 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #8
  store i32 -1431655766, i32* %9, align 4
  call void @av1_get_uniform_tile_size(%struct.AV1Common* %24, i32* nonnull %8, i32* nonnull %9) #8
  %164 = load i32, i32* %158, align 4
  %165 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 38, i32 0
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, -1
  %168 = icmp slt i32 %164, %167
  %169 = select i1 %168, i32 %164, i32 %167
  %170 = load i32, i32* %8, align 4
  %171 = mul nsw i32 %169, %170
  %172 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 14
  %173 = load i32, i32* %172, align 8
  %174 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %64, i64 0, i32 0
  %175 = load i32, i32* %174, align 8
  %176 = lshr i32 %175, 11
  %177 = and i32 %176, 1
  %178 = shl i32 %171, 2
  %179 = add nuw nsw i32 %177, 1
  %180 = mul nsw i32 %178, %179
  %181 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 0
  %182 = load i8*, i8** %181, align 8
  %183 = sext i32 %180 to i64
  %184 = getelementptr inbounds i8, i8* %182, i64 %183
  store i8* %184, i8** %181, align 8
  br i1 %97, label %185, label %196

185:                                              ; preds = %161
  %186 = lshr i32 4, %173
  %187 = mul nsw i32 %171, %186
  %188 = mul nsw i32 %187, %179
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 1
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 %189
  store i8* %192, i8** %190, align 8
  %193 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 16, i64 2
  %194 = load i8*, i8** %193, align 8
  %195 = getelementptr inbounds i8, i8* %194, i64 %189
  store i8* %195, i8** %193, align 8
  br label %196

196:                                              ; preds = %185, %161
  %197 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 21, i32 4
  %198 = load i32, i32* %197, align 16
  %199 = sub nsw i32 %198, %171
  %200 = icmp slt i32 %170, %199
  %201 = select i1 %200, i32 %170, i32 %199
  %202 = shl nsw i32 %201, 2
  %203 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 10
  store i32 %202, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %162) #8
  br label %204

204:                                              ; preds = %79, %153, %143, %196, %157
  %205 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %58, i64 0, i32 16, i32 2
  %206 = bitcast i8** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 27
  %209 = bitcast i8** %208 to i64*
  store i64 %207, i64* %209, align 8
  %210 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 47
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 20
  store i32 %211, i32* %212, align 4
  %213 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 1, i32 48
  %214 = load i32, i32* %213, align 8
  %215 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 21
  store i32 %214, i32* %215, align 8
  %216 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 56
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %222, label %219

219:                                              ; preds = %204
  %220 = load %struct.aom_film_grain_t*, %struct.aom_film_grain_t** %5, align 8
  %221 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %220, i64 0, i32 0
  store i32 0, i32* %221, align 4
  br label %222

222:                                              ; preds = %204, %219
  %223 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 21
  %224 = load %struct.aom_film_grain_t*, %struct.aom_film_grain_t** %5, align 8
  %225 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %224, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %273, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 10
  %230 = load i32, i32* %229, align 8
  %231 = add i32 %230, 1
  %232 = and i32 %231, -2
  %233 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 11
  %234 = load i32, i32* %233, align 4
  %235 = add i32 %234, 1
  %236 = and i32 %235, -2
  %237 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 25
  %238 = load %struct.BufferPool*, %struct.BufferPool** %237, align 8
  %239 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 23
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 22, i64 %240
  %242 = bitcast %struct.AllocCbParam* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %242) #8
  %243 = getelementptr inbounds %struct.AllocCbParam, %struct.AllocCbParam* %3, i64 0, i32 0
  %244 = getelementptr inbounds %struct.AllocCbParam, %struct.AllocCbParam* %3, i64 0, i32 1
  store %struct.BufferPool* %238, %struct.BufferPool** %243, align 8
  store %struct.aom_codec_frame_buffer* %241, %struct.aom_codec_frame_buffer** %244, align 8
  %245 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %64, i64 0, i32 0
  %246 = load i32, i32* %245, align 8
  %247 = call %struct.aom_image* @aom_img_alloc_with_cb(%struct.aom_image* %223, i32 %246, i32 %232, i32 %236, i32 16, i8* (i8*, i64)* nonnull @AllocWithGetFrameBufferCb, i8* nonnull %242) #8
  %248 = icmp eq %struct.aom_image* %247, null
  br i1 %248, label %271, label %249

249:                                              ; preds = %228
  %250 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 3, i32 22
  %251 = bitcast i8** %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 21, i32 22
  %254 = bitcast i8** %253 to i64*
  store i64 %252, i64* %254, align 8
  %255 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 22, i64 %240, i32 2
  %256 = bitcast i8** %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 21, i32 27
  %259 = bitcast i8** %258 to i64*
  store i64 %257, i64* %259, align 8
  %260 = call i32 @av1_add_film_grain(%struct.aom_film_grain_t* %224, %struct.aom_image* %64, %struct.aom_image* %223) #8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %268, label %262

262:                                              ; preds = %249
  %263 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %238, i64 0, i32 3
  %264 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %263, align 8
  %265 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %238, i64 0, i32 1
  %266 = load i8*, i8** %265, align 8
  %267 = call i32 %264(i8* %266, %struct.aom_codec_frame_buffer* %241) #8
  br label %271

268:                                              ; preds = %249
  %269 = load i64, i64* %239, align 8
  %270 = add i64 %269, 1
  store i64 %270, i64* %239, align 8
  br label %271

271:                                              ; preds = %268, %262, %228
  %272 = phi %struct.aom_image* [ null, %262 ], [ %223, %268 ], [ null, %228 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %242) #8
  br label %273

273:                                              ; preds = %222, %271
  %274 = phi %struct.aom_image* [ %272, %271 ], [ %64, %222 ]
  %275 = icmp eq %struct.aom_image* %274, null
  br i1 %275, label %276, label %278

276:                                              ; preds = %273
  %277 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %23, i64 0, i32 65
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %277, i32 7, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %278

278:                                              ; preds = %273, %276
  %279 = load i64, i64* %12, align 8
  %280 = add i64 %279, 1
  store i64 %280, i64* %12, align 8
  br label %281

281:                                              ; preds = %55, %278, %83, %90
  %282 = phi %struct.aom_image* [ %64, %90 ], [ %64, %83 ], [ null, %55 ], [ %274, %278 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #8
  br label %286

283:                                              ; preds = %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #8
  br label %286

284:                                              ; preds = %16
  store i32 0, i32* %29, align 8
  %285 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 24
  store i32 1, i32* %285, align 8
  br label %286

286:                                              ; preds = %284, %281, %11, %283, %2
  %287 = phi %struct.aom_image* [ null, %2 ], [ null, %283 ], [ null, %11 ], [ %282, %281 ], [ null, %284 ]
  ret %struct.aom_image* %287
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @decoder_set_fb_fn(%struct.aom_codec_alg_priv* nocapture, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, i8*) #1 {
  %5 = icmp eq i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* %1, null
  %6 = icmp eq i32 (i8*, %struct.aom_codec_frame_buffer*)* %2, null
  %7 = or i1 %5, %6
  br i1 %7, label %16, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %10 = load %struct.AVxWorker*, %struct.AVxWorker** %9, align 8
  %11 = icmp eq %struct.AVxWorker* %10, null
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 27
  store i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* %1, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %13, align 8
  %14 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 28
  store i32 (i8*, %struct.aom_codec_frame_buffer*)* %2, i32 (i8*, %struct.aom_codec_frame_buffer*)** %14, align 8
  %15 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 26
  store i8* %3, i8** %15, align 8
  br label %16

16:                                               ; preds = %8, %4, %12
  %17 = phi i32 [ 0, %12 ], [ 8, %4 ], [ 1, %8 ]
  ret i32 %17
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.aom_codec_iface* @aom_codec_av1_dx() local_unnamed_addr #2 {
  ret %struct.aom_codec_iface* bitcast ({ i8*, i32, i64, i32 (%struct.aom_codec_ctx*)*, i32 (%struct.aom_codec_alg_priv*)*, %struct.aom_codec_ctrl_fn_map*, %struct.aom_codec_dec_iface, %struct.aom_codec_enc_iface, i32 (%struct.aom_codec_alg_priv*, i8*, i8*)* }* @aom_codec_av1_dx_algo to %struct.aom_codec_iface*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare %struct.AVxWorkerInterface* @aom_get_worker_interface() local_unnamed_addr #4

declare void @aom_free(i8*) local_unnamed_addr #4

declare void @av1_remove_common(%struct.AV1Common*) local_unnamed_addr #4

declare void @av1_free_cdef_buffers(%struct.AV1Common*, %struct.AV1CdefWorker**, %struct.AV1CdefSyncData*, i32) local_unnamed_addr #4

declare void @av1_free_cdef_sync(%struct.AV1CdefSyncData*) local_unnamed_addr #4

declare void @av1_decoder_remove(%struct.AV1Decoder*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #5

declare void @av1_free_ref_frame_buffers(%struct.BufferPool*) local_unnamed_addr #4

declare void @av1_free_internal_frame_buffers(%struct.InternalFrameBufferList*) local_unnamed_addr #4

declare void @aom_img_free(%struct.aom_image*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_copy_reference(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #0 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.av1_ref_frame**
  %20 = load %struct.av1_ref_frame*, %struct.av1_ref_frame** %19, align 8
  %21 = icmp eq %struct.av1_ref_frame* %20, null
  br i1 %21, label %140, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 208, i1 false)
  %24 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %25 = load %struct.AVxWorker*, %struct.AVxWorker** %24, align 8
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %25, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 16
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %31 = bitcast [3 x i8*]* %29 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = bitcast %union.anon.11* %30 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %33, align 8
  %34 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 16, i64 2
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5, i32 0, i32 2
  %38 = bitcast i8** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 10
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 2, i32 0, i32 0
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 11
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3, i32 0, i32 0
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 12
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 23
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 13
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 24
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 7
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 0, i32 0, i32 0
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 8
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 1, i32 0, i32 0
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 14
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %63

60:                                               ; preds = %22
  %61 = add nsw i32 %52, 1
  %62 = sdiv i32 %61, 2
  br label %63

63:                                               ; preds = %60, %22
  %64 = phi i32 [ %62, %60 ], [ %52, %22 ]
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 0, i32 0, i32 1
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 15
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  %70 = add nsw i32 %55, 1
  %71 = sdiv i32 %70, 2
  br label %72

72:                                               ; preds = %69, %63
  %73 = phi i32 [ %71, %69 ], [ %55, %63 ]
  %74 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 1, i32 0, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 2, i32 0, i32 1
  store i32 %64, i32* %75, align 4
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3, i32 0, i32 1
  store i32 %73, i32* %76, align 4
  %77 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 17, i64 0
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 0
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 17, i64 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 1
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 17
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 18
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 20
  store i8 %94, i8* %95, align 8
  %96 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 5
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 21
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 6
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 22
  store i32 %100, i32* %101, align 8
  %102 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = and i32 %103, 2048
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %72
  %107 = lshr <2 x i64> %32, <i64 1, i64 1>
  %108 = inttoptr <2 x i64> %107 to <2 x i8*>
  %109 = bitcast %union.anon.11* %30 to <2 x i8*>*
  store <2 x i8*> %108, <2 x i8*>* %109, align 8
  %110 = lshr i64 %36, 1
  %111 = inttoptr i64 %110 to i8*
  store i8* %111, i8** %37, align 8
  %112 = ashr i32 %78, 1
  store i32 %112, i32* %79, align 8
  %113 = ashr i32 %81, 1
  store i32 %113, i32* %82, align 4
  br label %114

114:                                              ; preds = %72, %106
  %115 = phi i32 [ %112, %106 ], [ %78, %72 ]
  %116 = phi i32 [ 8, %106 ], [ 0, %72 ]
  %117 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 26
  store i32 %116, i32* %117, align 8
  %118 = load i32, i32* %51, align 4
  %119 = add i32 %118, 31
  %120 = and i32 %119, -32
  %121 = sub nsw i32 %115, %120
  %122 = sdiv i32 %121, 2
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 12
  store i32 %124, i32* %125, align 8
  %126 = load i32, i32* %57, align 8
  %127 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 14
  store i32 %126, i32* %127, align 8
  %128 = load i32, i32* %66, align 4
  %129 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 26
  %131 = bitcast %struct.aom_metadata_array** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 27
  %134 = bitcast %struct.aom_metadata_array** %133 to i64*
  store i64 %132, i64* %134, align 8
  %135 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %136 = load %struct.AV1Decoder*, %struct.AV1Decoder** %135, align 8
  %137 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = call i32 @av1_copy_reference_dec(%struct.AV1Decoder* %136, i32 %138, %struct.yv12_buffer_config* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %23) #8
  br label %140

140:                                              ; preds = %17, %114
  %141 = phi i32 [ %139, %114 ], [ 8, %17 ]
  ret i32 %141
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_reference(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #0 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.av1_ref_frame**
  %20 = load %struct.av1_ref_frame*, %struct.av1_ref_frame** %19, align 8
  %21 = icmp eq %struct.av1_ref_frame* %20, null
  br i1 %21, label %143, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 208, i1 false)
  %24 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %25 = load %struct.AVxWorker*, %struct.AVxWorker** %24, align 8
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %25, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 16
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %31 = bitcast [3 x i8*]* %29 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = bitcast %union.anon.11* %30 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %33, align 8
  %34 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 16, i64 2
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5, i32 0, i32 2
  %38 = bitcast i8** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 10
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 2, i32 0, i32 0
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 11
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3, i32 0, i32 0
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 12
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 23
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 13
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 24
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 7
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 0, i32 0, i32 0
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 8
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 1, i32 0, i32 0
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 14
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %63

60:                                               ; preds = %22
  %61 = add nsw i32 %52, 1
  %62 = sdiv i32 %61, 2
  br label %63

63:                                               ; preds = %60, %22
  %64 = phi i32 [ %62, %60 ], [ %52, %22 ]
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 0, i32 0, i32 1
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 15
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  %70 = add nsw i32 %55, 1
  %71 = sdiv i32 %70, 2
  br label %72

72:                                               ; preds = %69, %63
  %73 = phi i32 [ %71, %69 ], [ %55, %63 ]
  %74 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 1, i32 0, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 2, i32 0, i32 1
  store i32 %64, i32* %75, align 4
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3, i32 0, i32 1
  store i32 %73, i32* %76, align 4
  %77 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 17, i64 0
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 0
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 17, i64 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 1
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 17
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 18
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 20
  store i8 %94, i8* %95, align 8
  %96 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 5
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 21
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 6
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 22
  store i32 %100, i32* %101, align 8
  %102 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = and i32 %103, 2048
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %72
  %107 = lshr <2 x i64> %32, <i64 1, i64 1>
  %108 = inttoptr <2 x i64> %107 to <2 x i8*>
  %109 = bitcast %union.anon.11* %30 to <2 x i8*>*
  store <2 x i8*> %108, <2 x i8*>* %109, align 8
  %110 = lshr i64 %36, 1
  %111 = inttoptr i64 %110 to i8*
  store i8* %111, i8** %37, align 8
  %112 = ashr i32 %78, 1
  store i32 %112, i32* %79, align 8
  %113 = ashr i32 %81, 1
  store i32 %113, i32* %82, align 4
  br label %114

114:                                              ; preds = %72, %106
  %115 = phi i32 [ %112, %106 ], [ %78, %72 ]
  %116 = phi i32 [ 8, %106 ], [ 0, %72 ]
  %117 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 26
  store i32 %116, i32* %117, align 8
  %118 = load i32, i32* %51, align 4
  %119 = add i32 %118, 31
  %120 = and i32 %119, -32
  %121 = sub nsw i32 %115, %120
  %122 = sdiv i32 %121, 2
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 12
  store i32 %124, i32* %125, align 8
  %126 = load i32, i32* %57, align 8
  %127 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 14
  store i32 %126, i32* %127, align 8
  %128 = load i32, i32* %66, align 4
  %129 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 2, i32 26
  %131 = bitcast %struct.aom_metadata_array** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 27
  %134 = bitcast %struct.aom_metadata_array** %133 to i64*
  store i64 %132, i64* %134, align 8
  %135 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %136 = load %struct.AV1Decoder*, %struct.AV1Decoder** %135, align 8
  %137 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %136, i64 0, i32 1
  %138 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 0
  %139 = load i32, i32* %138, align 8
  %140 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %20, i64 0, i32 1
  %141 = load i32, i32* %140, align 4
  %142 = call i32 @av1_set_reference_dec(%struct.AV1Common* %137, i32 %139, i32 %141, %struct.yv12_buffer_config* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %23) #8
  br label %143

143:                                              ; preds = %17, %114
  %144 = phi i32 [ %142, %114 ], [ 8, %17 ]
  ret i32 %144
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_invert_tile_order(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 6
  store i32 %19, i32* %20, align 8
  ret i32 0
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @ctrl_set_byte_alignment(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %16
  %22 = add i32 %19, -32
  %23 = icmp ugt i32 %22, 992
  %24 = tail call i32 @llvm.ctpop.i32(i32 %19), !range !2
  %25 = icmp ugt i32 %24, 1
  %26 = or i1 %23, %25
  br i1 %26, label %39, label %27

27:                                               ; preds = %21, %16
  %28 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 8
  store i32 %19, i32* %28, align 8
  %29 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %30 = load %struct.AVxWorker*, %struct.AVxWorker** %29, align 8
  %31 = icmp eq %struct.AVxWorker* %30, null
  br i1 %31, label %39, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %30, i64 0, i32 4
  %34 = bitcast i8** %33 to %struct.FrameWorkerData**
  %35 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %34, align 8
  %36 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %35, i64 0, i32 0
  %37 = load %struct.AV1Decoder*, %struct.AV1Decoder** %36, align 8
  %38 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %37, i64 0, i32 1, i32 20, i32 15
  store i32 %19, i32* %38, align 4
  br label %39

39:                                               ; preds = %32, %27, %21
  %40 = phi i32 [ 8, %21 ], [ 0, %27 ], [ 0, %32 ]
  ret i32 %40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_skip_loop_filter(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 9
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %22 = load %struct.AVxWorker*, %struct.AVxWorker** %21, align 8
  %23 = icmp eq %struct.AVxWorker* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %22, i64 0, i32 4
  %26 = bitcast i8** %25 to %struct.FrameWorkerData**
  %27 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %26, align 8
  %28 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %27, i64 0, i32 0
  %29 = load %struct.AV1Decoder*, %struct.AV1Decoder** %28, align 8
  %30 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %29, i64 0, i32 55
  store i32 %19, i32* %30, align 4
  br label %31

31:                                               ; preds = %16, %24
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_decode_tile_row(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 11
  store i32 %19, i32* %20, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_decode_tile_col(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 12
  store i32 %19, i32* %20, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_tile_mode(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 13
  store i32 %19, i32* %20, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_is_annexb(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 17
  store i32 %19, i32* %20, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_operating_point(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 18
  store i32 %19, i32* %20, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_output_all_layers(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 19
  store i32 %19, i32* %20, align 8
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @ctrl_set_inspection_callback(%struct.aom_codec_alg_priv* nocapture readnone, %struct.__va_list_tag* nocapture readnone) #2 {
  ret i32 4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_ext_tile_debug(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 14
  store i32 %19, i32* %20, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_row_mt(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 15
  store i32 %19, i32* %20, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_ext_ref_ptr(%struct.aom_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.av1_ext_ref_frame**
  %19 = load %struct.av1_ext_ref_frame*, %struct.av1_ext_ref_frame** %18, align 8
  %20 = icmp eq %struct.av1_ext_ref_frame* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.av1_ext_ref_frame, %struct.av1_ext_ref_frame* %19, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 16, i32 1
  store i32 %23, i32* %24, align 8
  %25 = icmp sgt i32 %23, 0
  br i1 %25, label %26, label %37

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.av1_ext_ref_frame, %struct.av1_ext_ref_frame* %19, i64 0, i32 0
  br label %28

28:                                               ; preds = %26, %28
  %29 = phi i64 [ 0, %26 ], [ %33, %28 ]
  %30 = load %struct.aom_image*, %struct.aom_image** %27, align 8
  %31 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %30, i64 1
  store %struct.aom_image* %31, %struct.aom_image** %27, align 8
  %32 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 16, i32 0, i64 %29
  tail call fastcc void @image2yuvconfig(%struct.aom_image* %30, %struct.yv12_buffer_config* %32)
  %33 = add nuw nsw i64 %29, 1
  %34 = load i32, i32* %24, align 8
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %28, label %37

37:                                               ; preds = %28, %21, %16
  %38 = phi i32 [ 8, %16 ], [ 0, %21 ], [ 0, %28 ]
  ret i32 %38
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_skip_film_grain(%struct.aom_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 10
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %22 = load %struct.AVxWorker*, %struct.AVxWorker** %21, align 8
  %23 = icmp eq %struct.AVxWorker* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %22, i64 0, i32 4
  %26 = bitcast i8** %25 to %struct.FrameWorkerData**
  %27 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %26, align 8
  %28 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %27, i64 0, i32 0
  %29 = load %struct.AV1Decoder*, %struct.AV1Decoder** %28, align 8
  %30 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %29, i64 0, i32 56
  store i32 %19, i32* %30, align 8
  br label %31

31:                                               ; preds = %16, %24
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_frame_corrupted(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %45, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %45, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 34
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 19
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %25, %34
  %39 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 7
  %40 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %41 = icmp eq %struct.RefCntBuffer* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 17, i32 25
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %19, align 4
  br label %45

45:                                               ; preds = %16, %21, %34, %38, %42
  %46 = phi i32 [ 1, %34 ], [ 0, %38 ], [ 0, %42 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %46
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_last_quantizer(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 22, i32 0
  %32 = load i32, i32* %31, align 16
  store i32 %32, i32* %19, align 4
  br label %33

33:                                               ; preds = %21, %16, %25
  %34 = phi i32 [ 0, %25 ], [ 8, %16 ], [ 1, %21 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_last_ref_updates(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 0, i32 6
  %32 = load i32, i32* %31, align 32
  store i32 %32, i32* %19, align 4
  br label %33

33:                                               ; preds = %16, %21, %25
  %34 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_bit_depth(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %21 = load %struct.AVxWorker*, %struct.AVxWorker** %20, align 8
  %22 = icmp eq i32* %19, null
  br i1 %22, label %35, label %23

23:                                               ; preds = %16
  %24 = icmp eq %struct.AVxWorker* %21, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %21, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 35
  %32 = load %struct.SequenceHeader*, %struct.SequenceHeader** %31, align 16
  %33 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 25
  %34 = load i32, i32* %33, align 8
  store i32 %34, i32* %19, align 4
  br label %35

35:                                               ; preds = %16, %23, %25
  %36 = phi i32 [ 0, %25 ], [ 1, %23 ], [ 8, %16 ]
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_img_format(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %21 = load %struct.AVxWorker*, %struct.AVxWorker** %20, align 8
  %22 = icmp eq i32* %19, null
  br i1 %22, label %54, label %23

23:                                               ; preds = %16
  %24 = icmp eq %struct.AVxWorker* %21, null
  br i1 %24, label %54, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %21, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 35
  %32 = load %struct.SequenceHeader*, %struct.SequenceHeader** %31, align 16
  %33 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 32
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 33
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 26
  %38 = load i8, i8* %37, align 4
  %39 = or i32 %36, %34
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %25
  %42 = icmp eq i32 %36, 0
  %43 = icmp eq i32 %34, 1
  %44 = and i1 %43, %42
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = icmp eq i32 %36, 1
  %47 = and i1 %43, %46
  %48 = select i1 %47, i32 258, i32 0
  br label %49

49:                                               ; preds = %25, %41, %45
  %50 = phi i32 [ 262, %25 ], [ 261, %41 ], [ %48, %45 ]
  %51 = icmp eq i8 %38, 0
  %52 = or i32 %50, 2048
  %53 = select i1 %51, i32 %50, i32 %52
  store i32 %53, i32* %19, align 4
  br label %54

54:                                               ; preds = %16, %23, %49
  %55 = phi i32 [ 0, %49 ], [ 1, %23 ], [ 8, %16 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_tile_size(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to i32**
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq i32* %21, null
  br i1 %24, label %41, label %25

25:                                               ; preds = %18
  %26 = icmp eq %struct.AVxWorker* %23, null
  br i1 %26, label %41, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %29 = bitcast i8** %28 to %struct.FrameWorkerData**
  %30 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %29, align 8
  %31 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %30, i64 0, i32 0
  %32 = load %struct.AV1Decoder*, %struct.AV1Decoder** %31, align 8
  %33 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %32, i64 0, i32 1
  %34 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #8
  store i32 -1431655766, i32* %3, align 4
  %35 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #8
  store i32 -1431655766, i32* %4, align 4
  call void @av1_get_uniform_tile_size(%struct.AV1Common* %33, i32* nonnull %3, i32* nonnull %4) #8
  %36 = load i32, i32* %3, align 4
  %37 = shl i32 %36, 18
  %38 = load i32, i32* %4, align 4
  %39 = shl i32 %38, 2
  %40 = add nsw i32 %39, %37
  store i32 %40, i32* %21, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #8
  br label %41

41:                                               ; preds = %18, %25, %27
  %42 = phi i32 [ 0, %27 ], [ 1, %25 ], [ 8, %18 ]
  ret i32 %42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_tile_count(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %34, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 41
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %19, align 4
  br label %34

34:                                               ; preds = %16, %25, %21
  %35 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_render_size(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %36, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %36, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 4
  %32 = load i32, i32* %31, align 8
  store i32 %32, i32* %19, align 4
  %33 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 5
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds i32, i32* %19, i64 1
  store i32 %34, i32* %35, align 4
  br label %36

36:                                               ; preds = %16, %21, %25
  %37 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_frame_size(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %36, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %36, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 2
  %32 = load i32, i32* %31, align 16
  store i32 %32, i32* %19, align 4
  %33 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds i32, i32* %19, i64 1
  store i32 %34, i32* %35, align 4
  br label %36

36:                                               ; preds = %16, %21, %25
  %37 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %37
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @ctrl_get_accounting(%struct.aom_codec_alg_priv* nocapture readnone, %struct.__va_list_tag* nocapture readnone) #2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_new_frame_image(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #0 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.aom_image**
  %20 = load %struct.aom_image*, %struct.aom_image** %19, align 8
  %21 = icmp eq %struct.aom_image* %20, null
  br i1 %21, label %150, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 208, i1 false)
  %24 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %25 = load %struct.AVxWorker*, %struct.AVxWorker** %24, align 8
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %25, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = call i32 @av1_get_frame_to_show(%struct.AV1Decoder* %30, %struct.yv12_buffer_config* nonnull %3) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %148

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 14
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 0
  br i1 %40, label %42, label %43

42:                                               ; preds = %37
  store i32 262, i32* %41, align 8
  br label %46

43:                                               ; preds = %37
  store i32 261, i32* %41, align 8
  br label %46

44:                                               ; preds = %33
  %45 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 0
  store i32 258, i32* %45, align 8
  br label %46

46:                                               ; preds = %44, %43, %42
  %47 = phi i32 [ 2306, %44 ], [ 2309, %43 ], [ 2310, %42 ]
  %48 = phi i32 [ 12, %44 ], [ 16, %43 ], [ 24, %42 ]
  %49 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 17
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 1
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 18
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 2
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 3
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 20
  %59 = load i8, i8* %58, align 8
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 4
  store i32 %60, i32* %61, align 8
  %62 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 21
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 5
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 22
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 6
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 9
  store i32 8, i32* %68, align 4
  %69 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 0, i32 0, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 7
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 1, i32 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 8
  store i32 %73, i32* %74, align 8
  %75 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 2, i32 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 10
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 11
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 23
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 12
  store i32 %82, i32* %83, align 8
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 24
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 13
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 14
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 14
  store i32 %88, i32* %89, align 8
  %90 = load i32, i32* %34, align 4
  %91 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 15
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5, i32 0
  %93 = bitcast %struct.anon.12* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 16
  %96 = bitcast [3 x i8*]* %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5, i32 0, i32 1
  %98 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 16, i64 1
  %99 = bitcast i8** %97 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8
  %101 = bitcast i8** %98 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %101, align 8
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 17, i64 0
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 17, i64 1
  store i32 %106, i32* %107, align 4
  %108 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 17, i64 2
  store i32 %106, i32* %108, align 8
  %109 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 26
  %110 = load i32, i32* %109, align 8
  %111 = and i32 %110, 8
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %133, label %113

113:                                              ; preds = %46
  %114 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 16, i64 2
  %115 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5, i32 0, i32 2
  %116 = bitcast i8** %115 to i64*
  %117 = shl nuw nsw i32 %48, 1
  %118 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 0
  store i32 %47, i32* %118, align 8
  %119 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 16
  %120 = load i32, i32* %119, align 8
  store i32 %120, i32* %68, align 4
  %121 = bitcast %struct.anon.12* %92 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8
  %123 = shl <2 x i64> %122, <i64 1, i64 1>
  %124 = inttoptr <2 x i64> %123 to <2 x i8*>
  %125 = bitcast [3 x i8*]* %95 to <2 x i8*>*
  store <2 x i8*> %124, <2 x i8*>* %125, align 8
  %126 = load i64, i64* %116, align 8
  %127 = shl i64 %126, 1
  %128 = inttoptr i64 %127 to i8*
  store i8* %128, i8** %114, align 8
  %129 = load i32, i32* %102, align 8
  %130 = shl nsw i32 %129, 1
  store i32 %130, i32* %104, align 8
  %131 = load i32, i32* %105, align 4
  %132 = shl nsw i32 %131, 1
  store i32 %132, i32* %107, align 4
  store i32 %132, i32* %108, align 8
  br label %133

133:                                              ; preds = %46, %113
  %134 = phi i32 [ %117, %113 ], [ %48, %46 ]
  %135 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 19
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 22
  store i8* null, i8** %136, align 8
  %137 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 10
  %138 = bitcast i8** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 23
  %141 = bitcast i8** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 24
  store i32 0, i32* %142, align 8
  %143 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 25
  store i32 0, i32* %143, align 4
  %144 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 18
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %20, i64 0, i32 26
  store %struct.aom_metadata_array* null, %struct.aom_metadata_array** %147, align 8
  br label %148

148:                                              ; preds = %22, %133
  %149 = phi i32 [ 0, %133 ], [ 1, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %23) #8
  br label %150

150:                                              ; preds = %17, %148
  %151 = phi i32 [ %149, %148 ], [ 8, %17 ]
  ret i32 %151
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_copy_new_frame_image(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #0 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = alloca %struct.yv12_buffer_config, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to %struct.aom_image**
  %21 = load %struct.aom_image*, %struct.aom_image** %20, align 8
  %22 = icmp eq %struct.aom_image* %21, null
  br i1 %22, label %147, label %23

23:                                               ; preds = %18
  %24 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %24) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 208, i1 false)
  %25 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %26 = load %struct.AVxWorker*, %struct.AVxWorker** %25, align 8
  %27 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %26, i64 0, i32 4
  %28 = bitcast i8** %27 to %struct.FrameWorkerData**
  %29 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %28, align 8
  %30 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %29, i64 0, i32 0
  %31 = load %struct.AV1Decoder*, %struct.AV1Decoder** %30, align 8
  %32 = call i32 @av1_get_frame_to_show(%struct.AV1Decoder* %31, %struct.yv12_buffer_config* nonnull %3) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %145

34:                                               ; preds = %23
  %35 = bitcast %struct.yv12_buffer_config* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %35) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 208, i1 false)
  %36 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 16
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 5
  %38 = bitcast [3 x i8*]* %36 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  %40 = bitcast %union.anon.11* %37 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %40, align 8
  %41 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 16, i64 2
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 5, i32 0, i32 2
  %45 = bitcast i8** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 10
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 2, i32 0, i32 0
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 11
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 3, i32 0, i32 0
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 12
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 23
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 13
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 24
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 7
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 0, i32 0, i32 0
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 8
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 1, i32 0, i32 0
  store i32 %62, i32* %63, align 8
  %64 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 14
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %70

67:                                               ; preds = %34
  %68 = add nsw i32 %59, 1
  %69 = sdiv i32 %68, 2
  br label %70

70:                                               ; preds = %67, %34
  %71 = phi i32 [ %69, %67 ], [ %59, %34 ]
  %72 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 0, i32 0, i32 1
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 15
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %79

76:                                               ; preds = %70
  %77 = add nsw i32 %62, 1
  %78 = sdiv i32 %77, 2
  br label %79

79:                                               ; preds = %76, %70
  %80 = phi i32 [ %78, %76 ], [ %62, %70 ]
  %81 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 1, i32 0, i32 1
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 2, i32 0, i32 1
  store i32 %71, i32* %82, align 4
  %83 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 3, i32 0, i32 1
  store i32 %80, i32* %83, align 4
  %84 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 17, i64 0
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 4, i32 0, i32 0
  store i32 %85, i32* %86, align 8
  %87 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 17, i64 1
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 4, i32 0, i32 1
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 17
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 2
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 18
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 19
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 4
  %100 = load i32, i32* %99, align 8
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 20
  store i8 %101, i8* %102, align 8
  %103 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 5
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 21
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 6
  %107 = load i32, i32* %106, align 8
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 22
  store i32 %107, i32* %108, align 8
  %109 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = and i32 %110, 2048
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %121, label %113

113:                                              ; preds = %79
  %114 = lshr <2 x i64> %39, <i64 1, i64 1>
  %115 = inttoptr <2 x i64> %114 to <2 x i8*>
  %116 = bitcast %union.anon.11* %37 to <2 x i8*>*
  store <2 x i8*> %115, <2 x i8*>* %116, align 8
  %117 = lshr i64 %43, 1
  %118 = inttoptr i64 %117 to i8*
  store i8* %118, i8** %44, align 8
  %119 = ashr i32 %85, 1
  store i32 %119, i32* %86, align 8
  %120 = ashr i32 %88, 1
  store i32 %120, i32* %89, align 4
  br label %121

121:                                              ; preds = %79, %113
  %122 = phi i32 [ %119, %113 ], [ %85, %79 ]
  %123 = phi i32 [ 8, %113 ], [ 0, %79 ]
  %124 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 26
  store i32 %123, i32* %124, align 8
  %125 = load i32, i32* %58, align 4
  %126 = add i32 %125, 31
  %127 = and i32 %126, -32
  %128 = sub nsw i32 %122, %127
  %129 = sdiv i32 %128, 2
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 12
  store i32 %131, i32* %132, align 8
  %133 = load i32, i32* %64, align 8
  %134 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 14
  store i32 %133, i32* %134, align 8
  %135 = load i32, i32* %73, align 4
  %136 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 15
  store i32 %135, i32* %136, align 4
  %137 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %21, i64 0, i32 26
  %138 = bitcast %struct.aom_metadata_array** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 27
  %141 = bitcast %struct.aom_metadata_array** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %struct.AV1Decoder*, %struct.AV1Decoder** %30, align 8
  %143 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %142, i64 0, i32 1
  %144 = call i32 @av1_copy_new_frame_dec(%struct.AV1Common* %143, %struct.yv12_buffer_config* nonnull %3, %struct.yv12_buffer_config* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %35) #8
  br label %145

145:                                              ; preds = %23, %121
  %146 = phi i32 [ %144, %121 ], [ 1, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %24) #8
  br label %147

147:                                              ; preds = %18, %145
  %148 = phi i32 [ %146, %145 ], [ 8, %18 ]
  ret i32 %148
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_reference(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.av1_ref_frame**
  %19 = load %struct.av1_ref_frame*, %struct.av1_ref_frame** %18, align 8
  %20 = icmp eq %struct.av1_ref_frame* %19, null
  br i1 %20, label %42, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %19, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp ugt i32 %23, 7
  br i1 %24, label %42, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %27 = load %struct.AVxWorker*, %struct.AVxWorker** %26, align 8
  %28 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %27, i64 0, i32 4
  %29 = bitcast i8** %28 to %struct.FrameWorkerData**
  %30 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %29, align 8
  %31 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %30, i64 0, i32 0
  %32 = load %struct.AV1Decoder*, %struct.AV1Decoder** %31, align 8
  %33 = sext i32 %23 to i64
  %34 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %32, i64 0, i32 1, i32 16, i64 %33
  %35 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %34, align 8
  %36 = icmp eq %struct.RefCntBuffer* %35, null
  %37 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %35, i64 0, i32 17
  %38 = icmp eq %struct.yv12_buffer_config* %37, null
  %39 = or i1 %36, %38
  br i1 %39, label %42, label %40

40:                                               ; preds = %25
  %41 = getelementptr inbounds %struct.av1_ref_frame, %struct.av1_ref_frame* %19, i64 0, i32 2
  tail call fastcc void @yuvconfig2image(%struct.aom_image* %41, %struct.yv12_buffer_config* nonnull %37, i8* null)
  br label %42

42:                                               ; preds = %25, %21, %16, %40
  %43 = phi i32 [ 0, %40 ], [ 8, %16 ], [ 1, %21 ], [ 1, %25 ]
  ret i32 %43
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_frame_header_info(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_tile_data**
  %19 = load %struct.aom_tile_data*, %struct.aom_tile_data** %18, align 8
  %20 = icmp eq %struct.aom_tile_data* %19, null
  br i1 %20, label %42, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %42, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 38, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.aom_tile_data, %struct.aom_tile_data* %19, i64 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 38, i32 0
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 16
  %37 = getelementptr inbounds %struct.aom_tile_data, %struct.aom_tile_data* %19, i64 0, i32 1
  %38 = bitcast i8** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 37
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.aom_tile_data, %struct.aom_tile_data* %19, i64 0, i32 2
  store i64 %40, i64* %41, align 8
  br label %42

42:                                               ; preds = %16, %21, %25
  %43 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %43
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_tile_data(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_tile_data**
  %19 = load %struct.aom_tile_data*, %struct.aom_tile_data** %18, align 8
  %20 = icmp eq %struct.aom_tile_data* %19, null
  br i1 %20, label %49, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %49, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 28
  %32 = load i32, i32* %31, align 32
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 29
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 15, i64 %33, i64 %36, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.aom_tile_data, %struct.aom_tile_data* %19, i64 0, i32 0
  store i64 %38, i64* %39, align 8
  %40 = load i32, i32* %31, align 32
  %41 = sext i32 %40 to i64
  %42 = load i32, i32* %34, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 15, i64 %41, i64 %43, i32 0
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 16
  %47 = getelementptr inbounds %struct.aom_tile_data, %struct.aom_tile_data* %19, i64 0, i32 1
  %48 = bitcast i8** %47 to i64*
  store i64 %46, i64* %48, align 8
  br label %49

49:                                               ; preds = %16, %21, %25
  %50 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %50
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_fwd_kf_value(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 59
  %32 = load i32, i32* %31, align 16
  store i32 %32, i32* %19, align 4
  br label %33

33:                                               ; preds = %21, %16, %25
  %34 = phi i32 [ 0, %25 ], [ 8, %16 ], [ 1, %21 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_altref_present(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 60
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %19, align 4
  br label %33

33:                                               ; preds = %21, %16, %25
  %34 = phi i32 [ 0, %25 ], [ 8, %16 ], [ 1, %21 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_frame_flags(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %47, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %47, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  store i32 0, i32* %19, align 4
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 0, i32 0
  %32 = load i8, i8* %31, align 32
  switch i8 %32, label %41 [
    i8 0, label %33
    i8 2, label %39
    i8 3, label %40
  ]

33:                                               ; preds = %25
  store i32 17, i32* %19, align 4
  %34 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 17
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, i32 145, i32 17
  store i32 %37, i32* %19, align 4
  %38 = or i32 %37, 64
  br label %41

39:                                               ; preds = %25
  store i32 16, i32* %19, align 4
  br label %41

40:                                               ; preds = %25
  store i32 32, i32* %19, align 4
  br label %41

41:                                               ; preds = %33, %25, %40, %39
  %42 = phi i32 [ %38, %33 ], [ 64, %25 ], [ 96, %40 ], [ 80, %39 ]
  %43 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 20, i32 10
  %44 = load i8, i8* %43, align 2, !range !3
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %47, label %46

46:                                               ; preds = %41
  store i32 %42, i32* %19, align 4
  br label %47

47:                                               ; preds = %46, %41, %21, %16
  %48 = phi i32 [ 8, %16 ], [ 1, %21 ], [ 0, %41 ], [ 0, %46 ]
  ret i32 %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_tile_info(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_tile_info**
  %19 = load %struct.aom_tile_info*, %struct.aom_tile_info** %18, align 8
  %20 = bitcast %struct.aom_tile_info* %19 to i8*
  %21 = icmp eq %struct.aom_tile_info* %19, null
  br i1 %21, label %328, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %24 = load %struct.AVxWorker*, %struct.AVxWorker** %23, align 8
  %25 = icmp eq %struct.AVxWorker* %24, null
  br i1 %25, label %328, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %24, i64 0, i32 4
  %28 = bitcast i8** %27 to %struct.FrameWorkerData**
  %29 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %28, align 8
  %30 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %29, i64 0, i32 0
  %31 = load %struct.AV1Decoder*, %struct.AV1Decoder** %30, align 8
  %32 = bitcast %struct.AV1Decoder* %31 to i8*
  %33 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %26
  %41 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 7
  %42 = load i32, i32* %41, align 4
  %43 = shl i32 1, %42
  %44 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 6
  %46 = load i32, i32* %45, align 4
  %47 = shl i32 1, %46
  br label %50

48:                                               ; preds = %26
  %49 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 1
  store i32 %34, i32* %49, align 4
  br label %50

50:                                               ; preds = %48, %40
  %51 = phi i32 [ %36, %48 ], [ %47, %40 ]
  %52 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 0
  store i32 %51, i32* %52, align 4
  %53 = icmp slt i32 %36, 1
  br i1 %53, label %170, label %54

54:                                               ; preds = %50
  %55 = add nuw i32 %36, 1
  %56 = zext i32 %55 to i64
  %57 = add nsw i64 %56, -1
  %58 = icmp ult i64 %57, 8
  br i1 %58, label %59, label %77

59:                                               ; preds = %168, %77, %54
  %60 = phi i64 [ 1, %77 ], [ 1, %54 ], [ %92, %168 ]
  %61 = xor i64 %60, -1
  %62 = and i64 %56, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %73

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %60
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i64 %60, -1
  %68 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = sub nsw i32 %66, %69
  %71 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %67
  store i32 %70, i32* %71, align 4
  %72 = add nuw nsw i64 %60, 1
  br label %73

73:                                               ; preds = %59, %64
  %74 = phi i64 [ %60, %59 ], [ %72, %64 ]
  %75 = sub nsw i64 0, %56
  %76 = icmp eq i64 %61, %75
  br i1 %76, label %170, label %288

77:                                               ; preds = %54
  %78 = getelementptr %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 0
  %79 = bitcast i32* %78 to i8*
  %80 = shl nuw nsw i64 %56, 2
  %81 = add nuw nsw i64 %80, 4
  %82 = getelementptr i8, i8* %20, i64 %81
  %83 = getelementptr %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 0
  %84 = bitcast i32* %83 to i8*
  %85 = add nuw nsw i64 %80, 40180
  %86 = getelementptr i8, i8* %32, i64 %85
  %87 = icmp ugt i8* %86, %79
  %88 = icmp ugt i8* %82, %84
  %89 = and i1 %87, %88
  br i1 %89, label %59, label %90

90:                                               ; preds = %77
  %91 = and i64 %57, -8
  %92 = or i64 %91, 1
  %93 = add nsw i64 %91, -8
  %94 = lshr exact i64 %93, 3
  %95 = add nuw nsw i64 %94, 1
  %96 = and i64 %95, 1
  %97 = icmp eq i64 %93, 0
  br i1 %97, label %145, label %98

98:                                               ; preds = %90
  %99 = sub nuw nsw i64 %95, %96
  br label %100

100:                                              ; preds = %100, %98
  %101 = phi i64 [ 0, %98 ], [ %142, %100 ]
  %102 = phi i64 [ %99, %98 ], [ %143, %100 ]
  %103 = or i64 %101, 1
  %104 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %103
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !4
  %107 = getelementptr inbounds i32, i32* %104, i64 4
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4, !alias.scope !4
  %110 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %101
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !4
  %113 = getelementptr inbounds i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !4
  %116 = sub nsw <4 x i32> %106, %112
  %117 = sub nsw <4 x i32> %109, %115
  %118 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %101
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %119, align 4, !alias.scope !7, !noalias !4
  %120 = getelementptr inbounds i32, i32* %118, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %121, align 4, !alias.scope !7, !noalias !4
  %122 = or i64 %101, 8
  %123 = or i64 %101, 9
  %124 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %123
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !4
  %127 = getelementptr inbounds i32, i32* %124, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4, !alias.scope !4
  %130 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %122
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !4
  %133 = getelementptr inbounds i32, i32* %130, i64 4
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4, !alias.scope !4
  %136 = sub nsw <4 x i32> %126, %132
  %137 = sub nsw <4 x i32> %129, %135
  %138 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %122
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %139, align 4, !alias.scope !7, !noalias !4
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %141, align 4, !alias.scope !7, !noalias !4
  %142 = add i64 %101, 16
  %143 = add i64 %102, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %100, !llvm.loop !9

145:                                              ; preds = %100, %90
  %146 = phi i64 [ 0, %90 ], [ %142, %100 ]
  %147 = icmp eq i64 %96, 0
  br i1 %147, label %168, label %148

148:                                              ; preds = %145
  %149 = or i64 %146, 1
  %150 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4, !alias.scope !4
  %153 = getelementptr inbounds i32, i32* %150, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !4
  %156 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %146
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !4
  %162 = sub nsw <4 x i32> %152, %158
  %163 = sub nsw <4 x i32> %155, %161
  %164 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %146
  %165 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %165, align 4, !alias.scope !7, !noalias !4
  %166 = getelementptr inbounds i32, i32* %164, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %167, align 4, !alias.scope !7, !noalias !4
  br label %168

168:                                              ; preds = %145, %148
  %169 = icmp eq i64 %57, %91
  br i1 %169, label %170, label %59

170:                                              ; preds = %73, %288, %168, %50
  %171 = icmp slt i32 %34, 1
  br i1 %171, label %306, label %172

172:                                              ; preds = %170
  %173 = add nuw i32 %34, 1
  %174 = zext i32 %173 to i64
  %175 = add nsw i64 %174, -1
  %176 = icmp ult i64 %175, 8
  br i1 %176, label %177, label %195

177:                                              ; preds = %286, %195, %172
  %178 = phi i64 [ 1, %195 ], [ 1, %172 ], [ %210, %286 ]
  %179 = xor i64 %178, -1
  %180 = and i64 %174, 1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %191

182:                                              ; preds = %177
  %183 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %178
  %184 = load i32, i32* %183, align 4
  %185 = add nsw i64 %178, -1
  %186 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = sub nsw i32 %184, %187
  %189 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %185
  store i32 %188, i32* %189, align 4
  %190 = add nuw nsw i64 %178, 1
  br label %191

191:                                              ; preds = %177, %182
  %192 = phi i64 [ %178, %177 ], [ %190, %182 ]
  %193 = sub nsw i64 0, %174
  %194 = icmp eq i64 %179, %193
  br i1 %194, label %306, label %310

195:                                              ; preds = %172
  %196 = getelementptr %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 0
  %197 = bitcast i32* %196 to i8*
  %198 = shl nuw nsw i64 %174, 2
  %199 = add nuw nsw i64 %198, 260
  %200 = getelementptr i8, i8* %20, i64 %199
  %201 = getelementptr %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 0
  %202 = bitcast i32* %201 to i8*
  %203 = add nuw nsw i64 %198, 40440
  %204 = getelementptr i8, i8* %32, i64 %203
  %205 = icmp ugt i8* %204, %197
  %206 = icmp ugt i8* %200, %202
  %207 = and i1 %205, %206
  br i1 %207, label %177, label %208

208:                                              ; preds = %195
  %209 = and i64 %175, -8
  %210 = or i64 %209, 1
  %211 = add nsw i64 %209, -8
  %212 = lshr exact i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = and i64 %213, 1
  %215 = icmp eq i64 %211, 0
  br i1 %215, label %263, label %216

216:                                              ; preds = %208
  %217 = sub nuw nsw i64 %213, %214
  br label %218

218:                                              ; preds = %218, %216
  %219 = phi i64 [ 0, %216 ], [ %260, %218 ]
  %220 = phi i64 [ %217, %216 ], [ %261, %218 ]
  %221 = or i64 %219, 1
  %222 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %221
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4, !alias.scope !11
  %225 = getelementptr inbounds i32, i32* %222, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !11
  %228 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %219
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !11
  %231 = getelementptr inbounds i32, i32* %228, i64 4
  %232 = bitcast i32* %231 to <4 x i32>*
  %233 = load <4 x i32>, <4 x i32>* %232, align 4, !alias.scope !11
  %234 = sub nsw <4 x i32> %224, %230
  %235 = sub nsw <4 x i32> %227, %233
  %236 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %219
  %237 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %237, align 4, !alias.scope !14, !noalias !11
  %238 = getelementptr inbounds i32, i32* %236, i64 4
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %239, align 4, !alias.scope !14, !noalias !11
  %240 = or i64 %219, 8
  %241 = or i64 %219, 9
  %242 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %241
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4, !alias.scope !11
  %245 = getelementptr inbounds i32, i32* %242, i64 4
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4, !alias.scope !11
  %248 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %240
  %249 = bitcast i32* %248 to <4 x i32>*
  %250 = load <4 x i32>, <4 x i32>* %249, align 4, !alias.scope !11
  %251 = getelementptr inbounds i32, i32* %248, i64 4
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 4, !alias.scope !11
  %254 = sub nsw <4 x i32> %244, %250
  %255 = sub nsw <4 x i32> %247, %253
  %256 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %240
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %257, align 4, !alias.scope !14, !noalias !11
  %258 = getelementptr inbounds i32, i32* %256, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %259, align 4, !alias.scope !14, !noalias !11
  %260 = add i64 %219, 16
  %261 = add i64 %220, -2
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %218, !llvm.loop !16

263:                                              ; preds = %218, %208
  %264 = phi i64 [ 0, %208 ], [ %260, %218 ]
  %265 = icmp eq i64 %214, 0
  br i1 %265, label %286, label %266

266:                                              ; preds = %263
  %267 = or i64 %264, 1
  %268 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %267
  %269 = bitcast i32* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 4, !alias.scope !11
  %271 = getelementptr inbounds i32, i32* %268, i64 4
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4, !alias.scope !11
  %274 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %264
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4, !alias.scope !11
  %277 = getelementptr inbounds i32, i32* %274, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 4, !alias.scope !11
  %280 = sub nsw <4 x i32> %270, %276
  %281 = sub nsw <4 x i32> %273, %279
  %282 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %264
  %283 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %280, <4 x i32>* %283, align 4, !alias.scope !14, !noalias !11
  %284 = getelementptr inbounds i32, i32* %282, i64 4
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %285, align 4, !alias.scope !14, !noalias !11
  br label %286

286:                                              ; preds = %263, %266
  %287 = icmp eq i64 %175, %209
  br i1 %287, label %306, label %177

288:                                              ; preds = %73, %288
  %289 = phi i64 [ %304, %288 ], [ %74, %73 ]
  %290 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = add nsw i64 %289, -1
  %293 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = sub nsw i32 %291, %294
  %296 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %292
  store i32 %295, i32* %296, align 4
  %297 = add nuw nsw i64 %289, 1
  %298 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 15, i64 %289
  %301 = load i32, i32* %300, align 4
  %302 = sub nsw i32 %299, %301
  %303 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 2, i64 %289
  store i32 %302, i32* %303, align 4
  %304 = add nuw nsw i64 %289, 2
  %305 = icmp eq i64 %304, %56
  br i1 %305, label %170, label %288, !llvm.loop !17

306:                                              ; preds = %191, %310, %286, %170
  %307 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 61
  %308 = load i32, i32* %307, align 8
  %309 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 4
  store i32 %308, i32* %309, align 4
  br label %328

310:                                              ; preds = %191, %310
  %311 = phi i64 [ %326, %310 ], [ %192, %191 ]
  %312 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i64 %311, -1
  %315 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = sub nsw i32 %313, %316
  %318 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %314
  store i32 %317, i32* %318, align 4
  %319 = add nuw nsw i64 %311, 1
  %320 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %31, i64 0, i32 1, i32 38, i32 16, i64 %311
  %323 = load i32, i32* %322, align 4
  %324 = sub nsw i32 %321, %323
  %325 = getelementptr inbounds %struct.aom_tile_info, %struct.aom_tile_info* %19, i64 0, i32 3, i64 %311
  store i32 %324, i32* %325, align 4
  %326 = add nuw nsw i64 %311, 2
  %327 = icmp eq i64 %326, %174
  br i1 %327, label %306, label %310, !llvm.loop !18

328:                                              ; preds = %16, %22, %306
  %329 = phi i32 [ 0, %306 ], [ 1, %22 ], [ 8, %16 ]
  ret i32 %329
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_screen_content_tools_info(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_screen_content_tools_info**
  %19 = load %struct.aom_screen_content_tools_info*, %struct.aom_screen_content_tools_info** %18, align 8
  %20 = icmp eq %struct.aom_screen_content_tools_info* %19, null
  br i1 %20, label %43, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %43, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 20, i32 3
  %32 = load i8, i8* %31, align 1, !range !3
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.aom_screen_content_tools_info, %struct.aom_screen_content_tools_info* %19, i64 0, i32 0
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 20, i32 4
  %36 = load i8, i8* %35, align 4, !range !3
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.aom_screen_content_tools_info, %struct.aom_screen_content_tools_info* %19, i64 0, i32 1
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 20, i32 2
  %40 = load i8, i8* %39, align 2, !range !3
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds %struct.aom_screen_content_tools_info, %struct.aom_screen_content_tools_info* %19, i64 0, i32 2
  store i32 %41, i32* %42, align 4
  br label %43

43:                                               ; preds = %16, %21, %25
  %44 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %44
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_still_picture(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_still_picture_info**
  %19 = load %struct.aom_still_picture_info*, %struct.aom_still_picture_info** %18, align 8
  %20 = icmp eq %struct.aom_still_picture_info* %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %39, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 63, i32 12
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.aom_still_picture_info, %struct.aom_still_picture_info* %19, i64 0, i32 0
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 63, i32 13
  %36 = load i8, i8* %35, align 2
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.aom_still_picture_info, %struct.aom_still_picture_info* %19, i64 0, i32 1
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %16, %21, %25
  %40 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_sb_size(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %35, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 63, i32 7
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %32, 15
  %34 = zext i1 %33 to i32
  store i32 %34, i32* %19, align 4
  br label %35

35:                                               ; preds = %16, %21, %25
  %36 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_show_existing_frame_flag(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 1, i32 19
  %32 = load i32, i32* %31, align 16
  store i32 %32, i32* %19, align 4
  br label %33

33:                                               ; preds = %21, %16, %25
  %34 = phi i32 [ 0, %25 ], [ 8, %16 ], [ 1, %21 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_s_frame_info(%struct.aom_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.aom_s_frame_info**
  %19 = load %struct.aom_s_frame_info*, %struct.aom_s_frame_info** %18, align 8
  %20 = icmp eq %struct.aom_s_frame_info* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.aom_codec_alg_priv, %struct.aom_codec_alg_priv* %0, i64 0, i32 20
  %23 = load %struct.AVxWorker*, %struct.AVxWorker** %22, align 8
  %24 = icmp eq %struct.AVxWorker* %23, null
  br i1 %24, label %37, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %23, i64 0, i32 4
  %27 = bitcast i8** %26 to %struct.FrameWorkerData**
  %28 = load %struct.FrameWorkerData*, %struct.FrameWorkerData** %27, align 8
  %29 = getelementptr inbounds %struct.FrameWorkerData, %struct.FrameWorkerData* %28, i64 0, i32 0
  %30 = load %struct.AV1Decoder*, %struct.AV1Decoder** %29, align 8
  %31 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 62, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.aom_s_frame_info, %struct.aom_s_frame_info* %19, i64 0, i32 0
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %30, i64 0, i32 62, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.aom_s_frame_info, %struct.aom_s_frame_info* %19, i64 0, i32 1
  store i32 %35, i32* %36, align 4
  br label %37

37:                                               ; preds = %16, %21, %25
  %38 = phi i32 [ 0, %25 ], [ 1, %21 ], [ 8, %16 ]
  ret i32 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @image2yuvconfig(%struct.aom_image* readonly, %struct.yv12_buffer_config*) unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16
  %4 = bitcast [3 x i8*]* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %7 = bitcast %union.anon.11* %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16, i64 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16, i64 2
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 2
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 10
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 11
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 12
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 23
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 13
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 24
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 0
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 8
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 14
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %42

39:                                               ; preds = %2
  %40 = add nsw i32 %31, 1
  %41 = sdiv i32 %40, 2
  br label %42

42:                                               ; preds = %2, %39
  %43 = phi i32 [ %41, %39 ], [ %31, %2 ]
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 15
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %51

48:                                               ; preds = %42
  %49 = add nsw i32 %34, 1
  %50 = sdiv i32 %49, 2
  br label %51

51:                                               ; preds = %42, %48
  %52 = phi i32 [ %50, %48 ], [ %34, %42 ]
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 1
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 1
  store i32 %43, i32* %54, align 4
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 1
  store i32 %52, i32* %55, align 4
  %56 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 17, i64 0
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  store i32 %57, i32* %58, align 8
  %59 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 17, i64 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 1
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 17
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 2
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 18
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 4
  %72 = load i32, i32* %71, align 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 20
  store i8 %73, i8* %74, align 8
  %75 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 5
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 21
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 6
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 22
  store i32 %79, i32* %80, align 8
  %81 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 0
  %82 = load i32, i32* %81, align 8
  %83 = and i32 %82, 2048
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %95, label %85

85:                                               ; preds = %51
  %86 = insertelement <2 x i64> undef, i64 %5, i32 0
  %87 = insertelement <2 x i64> %86, i64 %10, i32 1
  %88 = lshr <2 x i64> %87, <i64 1, i64 1>
  %89 = inttoptr <2 x i64> %88 to <2 x i8*>
  %90 = bitcast %union.anon.11* %6 to <2 x i8*>*
  store <2 x i8*> %89, <2 x i8*>* %90, align 8
  %91 = lshr i64 %15, 1
  %92 = inttoptr i64 %91 to i8*
  store i8* %92, i8** %16, align 8
  %93 = ashr i32 %57, 1
  store i32 %93, i32* %58, align 8
  %94 = ashr i32 %60, 1
  store i32 %94, i32* %61, align 4
  br label %95

95:                                               ; preds = %51, %85
  %96 = phi i32 [ %93, %85 ], [ %57, %51 ]
  %97 = phi i32 [ 8, %85 ], [ 0, %51 ]
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  store i32 %97, i32* %98, align 8
  %99 = load i32, i32* %30, align 4
  %100 = add i32 %99, 31
  %101 = and i32 %100, -32
  %102 = sub nsw i32 %96, %101
  %103 = sdiv i32 %102, 2
  %104 = icmp sgt i32 %103, 0
  %105 = select i1 %104, i32 %103, i32 0
  %106 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 12
  store i32 %105, i32* %106, align 8
  %107 = load i32, i32* %36, align 8
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  store i32 %107, i32* %108, align 8
  %109 = load i32, i32* %45, align 4
  %110 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  store i32 %109, i32* %110, align 4
  %111 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 26
  %112 = bitcast %struct.aom_metadata_array** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 27
  %115 = bitcast %struct.aom_metadata_array** %114 to i64*
  store i64 %113, i64* %115, align 8
  ret void
}

declare i32 @av1_copy_reference_dec(%struct.AV1Decoder*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #4

declare i32 @av1_set_reference_dec(%struct.AV1Common*, i32, i32, %struct.yv12_buffer_config*) local_unnamed_addr #4

declare void @av1_get_uniform_tile_size(%struct.AV1Common*, i32*, i32*) local_unnamed_addr #4

declare i32 @av1_get_frame_to_show(%struct.AV1Decoder*, %struct.yv12_buffer_config*) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @yuvconfig2image(%struct.aom_image*, %struct.yv12_buffer_config* readonly, i8*) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 0
  br i1 %10, label %12, label %13

12:                                               ; preds = %7
  store i32 262, i32* %11, align 8
  br label %16

13:                                               ; preds = %7
  store i32 261, i32* %11, align 8
  br label %16

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 0
  store i32 258, i32* %15, align 8
  br label %16

16:                                               ; preds = %12, %13, %14
  %17 = phi i32 [ 2306, %14 ], [ 2309, %13 ], [ 2310, %12 ]
  %18 = phi i32 [ 12, %14 ], [ 16, %13 ], [ 24, %12 ]
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 17
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 1
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 18
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 3
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 20
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 4
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 21
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 5
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 22
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 6
  store i32 %36, i32* %37, align 8
  %38 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 9
  store i32 8, i32* %38, align 4
  %39 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 7
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 8
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 10
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 11
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 23
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 12
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 24
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 13
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 14
  store i32 %58, i32* %59, align 8
  %60 = load i32, i32* %4, align 4
  %61 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 15
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0
  %63 = bitcast %struct.anon.12* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16
  %66 = bitcast [3 x i8*]* %65 to i64*
  store i64 %64, i64* %66, align 8
  %67 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 1
  %68 = bitcast i8** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16, i64 1
  %71 = bitcast i8** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 2
  %73 = bitcast i8** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 16, i64 2
  %76 = bitcast i8** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 17, i64 0
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 17, i64 1
  store i32 %81, i32* %82, align 4
  %83 = load i32, i32* %80, align 4
  %84 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 17, i64 2
  store i32 %83, i32* %84, align 8
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %110, label %89

89:                                               ; preds = %16
  %90 = getelementptr inbounds [3 x i8*], [3 x i8*]* %65, i64 0, i64 0
  %91 = shl nuw nsw i32 %18, 1
  %92 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 0
  store i32 %17, i32* %92, align 8
  %93 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 16
  %94 = load i32, i32* %93, align 8
  store i32 %94, i32* %38, align 4
  %95 = load i64, i64* %63, align 8
  %96 = shl i64 %95, 1
  %97 = inttoptr i64 %96 to i8*
  store i8* %97, i8** %90, align 8
  %98 = load i64, i64* %68, align 8
  %99 = shl i64 %98, 1
  %100 = inttoptr i64 %99 to i8*
  store i8* %100, i8** %70, align 8
  %101 = load i64, i64* %73, align 8
  %102 = shl i64 %101, 1
  %103 = inttoptr i64 %102 to i8*
  store i8* %103, i8** %75, align 8
  %104 = load i32, i32* %77, align 8
  %105 = shl nsw i32 %104, 1
  store i32 %105, i32* %79, align 8
  %106 = load i32, i32* %80, align 4
  %107 = shl nsw i32 %106, 1
  store i32 %107, i32* %82, align 4
  %108 = load i32, i32* %80, align 4
  %109 = shl nsw i32 %108, 1
  store i32 %109, i32* %84, align 8
  br label %110

110:                                              ; preds = %16, %89
  %111 = phi i32 [ %91, %89 ], [ %18, %16 ]
  %112 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 19
  store i32 %111, i32* %112, align 8
  %113 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 22
  store i8* %2, i8** %113, align 8
  %114 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 10
  %115 = bitcast i8** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 23
  %118 = bitcast i8** %117 to i64*
  store i64 %116, i64* %118, align 8
  %119 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 24
  store i32 0, i32* %119, align 8
  %120 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 25
  store i32 0, i32* %120, align 4
  %121 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 18
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %0, i64 0, i32 26
  store %struct.aom_metadata_array* null, %struct.aom_metadata_array** %124, align 8
  ret void
}

declare i32 @av1_copy_new_frame_dec(%struct.AV1Common*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @decoder_peek_si_internal(i8*, i64, %struct.aom_codec_stream_info*, i32*) unnamed_addr #0 {
  %5 = alloca %struct.ObuHeader, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.aom_read_bit_buffer, align 8
  %9 = alloca %struct.aom_read_bit_buffer, align 8
  %10 = icmp slt i64 %1, 1
  br i1 %10, label %203, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 0
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 1
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 2
  store i32 0, i32* %14, align 4
  %15 = bitcast %struct.ObuHeader* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 32, i1 false)
  %16 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  store i64 0, i64* %7, align 8
  %18 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = call i32 @aom_read_obu_header_and_size(i8* %0, i64 %1, i32 %19, %struct.ObuHeader* nonnull %5, i64* nonnull %6, i64* nonnull %7) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %201

22:                                               ; preds = %11
  %23 = getelementptr inbounds %struct.ObuHeader, %struct.ObuHeader* %5, i64 0, i32 1
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 2
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %6, align 8
  %29 = add i64 %28, %27
  %30 = icmp ugt i64 %29, %1
  br i1 %30, label %201, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds i8, i8* %0, i64 %29
  %33 = sub i64 %1, %29
  %34 = load i32, i32* %18, align 4
  %35 = call i32 @aom_read_obu_header_and_size(i8* %32, i64 %33, i32 %34, %struct.ObuHeader* nonnull %5, i64* nonnull %6, i64* nonnull %7) #8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %201

37:                                               ; preds = %31, %22
  %38 = phi i64 [ %33, %31 ], [ %1, %22 ]
  %39 = phi i8* [ %32, %31 ], [ %0, %22 ]
  %40 = bitcast %struct.aom_read_bit_buffer* %9 to i8*
  %41 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %9, i64 0, i32 0
  %42 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %9, i64 0, i32 1
  %43 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %9, i64 0, i32 2
  %44 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %9, i64 0, i32 3
  %45 = bitcast %struct.aom_read_bit_buffer* %8 to i8*
  %46 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %8, i64 0, i32 0
  %47 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %8, i64 0, i32 1
  %48 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %8, i64 0, i32 2
  %49 = getelementptr inbounds %struct.aom_read_bit_buffer, %struct.aom_read_bit_buffer* %8, i64 0, i32 3
  %50 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 3
  %51 = getelementptr inbounds %struct.aom_codec_stream_info, %struct.aom_codec_stream_info* %2, i64 0, i32 4
  %52 = bitcast i8** %44 to i8*
  %53 = bitcast i8** %49 to i8*
  br label %54

54:                                               ; preds = %190, %37
  %55 = phi i8 [ 0, %37 ], [ %183, %190 ]
  %56 = phi i32 [ 0, %37 ], [ %184, %190 ]
  %57 = phi i32 [ 0, %37 ], [ %185, %190 ]
  %58 = phi i64 [ %38, %37 ], [ %188, %190 ]
  %59 = phi i8* [ %39, %37 ], [ %187, %190 ]
  %60 = load i64, i64* %7, align 8
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = sub i64 %58, %60
  %63 = load i64, i64* %6, align 8
  %64 = icmp ult i64 %62, %63
  br i1 %64, label %201, label %65

65:                                               ; preds = %54
  %66 = load i8, i8* %23, align 8
  switch i8 %66, label %182 [
    i8 1, label %67
    i8 3, label %162
    i8 6, label %162
  ]

67:                                               ; preds = %65
  %68 = icmp ult i64 %62, 2
  br i1 %68, label %201, label %69

69:                                               ; preds = %67
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %45) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 24, i1 false)
  store i8* %61, i8** %46, align 8
  %70 = getelementptr inbounds i8, i8* %59, i64 %58
  store i8* %70, i8** %47, align 8
  store i32 0, i32* %48, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 16, i1 false)
  %71 = call signext i8 @av1_read_profile(%struct.aom_read_bit_buffer* nonnull %8) #8
  %72 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %73 = trunc i32 %72 to i8
  %74 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %75 = trunc i32 %74 to i8
  %76 = icmp ne i8 %73, 0
  %77 = and i32 %74, 255
  %78 = icmp eq i32 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %80, label %151

80:                                               ; preds = %69
  br i1 %78, label %83, label %81

81:                                               ; preds = %80
  %82 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  br label %147

83:                                               ; preds = %80
  %84 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %85 = trunc i32 %84 to i8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %110, label %87

87:                                               ; preds = %83
  %88 = call i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 32) #8
  %89 = call i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 32) #8
  %90 = icmp eq i32 %88, 0
  %91 = icmp eq i32 %89, 0
  %92 = or i1 %90, %91
  br i1 %92, label %151, label %93

93:                                               ; preds = %87
  %94 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %95 = trunc i32 %94 to i8
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %93
  %98 = call i32 @aom_rb_read_uvlc(%struct.aom_read_bit_buffer* nonnull %8) #8
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %151, label %100

100:                                              ; preds = %97, %93
  %101 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %102 = trunc i32 %101 to i8
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  %106 = call i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 32) #8
  %107 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  %108 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  %109 = add i32 %105, 1
  br label %110

110:                                              ; preds = %104, %100, %83
  %111 = phi i32 [ 1, %83 ], [ 1, %100 ], [ %109, %104 ]
  %112 = phi i1 [ true, %83 ], [ true, %100 ], [ false, %104 ]
  %113 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %114 = trunc i32 %113 to i8
  %115 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  %116 = and i32 %115, 255
  %117 = icmp eq i8 %114, 0
  br label %118

118:                                              ; preds = %144, %110
  %119 = phi i32 [ 0, %110 ], [ %123, %144 ]
  %120 = phi i32 [ 0, %110 ], [ %145, %144 ]
  %121 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 12) #8
  %122 = icmp eq i32 %120, 0
  %123 = select i1 %122, i32 %121, i32 %119
  %124 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 5) #8
  %125 = icmp sgt i32 %124, 7
  br i1 %125, label %126, label %128

126:                                              ; preds = %118
  %127 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  br label %128

128:                                              ; preds = %126, %118
  br i1 %112, label %137, label %129

129:                                              ; preds = %128
  %130 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %131 = trunc i32 %130 to i8
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %137, label %133

133:                                              ; preds = %129
  %134 = call i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 %111) #8
  %135 = call i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 %111) #8
  %136 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  br label %137

137:                                              ; preds = %133, %129, %128
  br i1 %117, label %144, label %138

138:                                              ; preds = %137
  %139 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %8) #8
  %140 = trunc i32 %139 to i8
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %144, label %142

142:                                              ; preds = %138
  %143 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 4) #8
  br label %144

144:                                              ; preds = %142, %138, %137
  %145 = add nuw nsw i32 %120, 1
  %146 = icmp eq i32 %120, %116
  br i1 %146, label %147, label %118

147:                                              ; preds = %144, %81
  %148 = phi i32 [ 0, %81 ], [ %123, %144 ]
  %149 = call i32 @aom_get_num_layers_from_operating_point_idc(i32 %148, i32* %50, i32* %51) #8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %69, %147, %87, %97
  %152 = phi i32 [ 1, %147 ], [ 5, %69 ], [ 1, %87 ], [ 1, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %45) #8
  br label %201

153:                                              ; preds = %147
  %154 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 4) #8
  %155 = add nsw i32 %154, 1
  %156 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 4) #8
  %157 = add nsw i32 %156, 1
  %158 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 %155) #8
  %159 = add nsw i32 %158, 1
  %160 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %8, i32 %157) #8
  %161 = add nsw i32 %160, 1
  store i32 %159, i32* %12, align 4
  store i32 %161, i32* %13, align 4
  br label %177

162:                                              ; preds = %65, %65
  %163 = icmp eq i32 %56, 0
  %164 = icmp eq i8 %55, 0
  %165 = or i1 %164, %163
  br i1 %165, label %166, label %194

166:                                              ; preds = %162
  %167 = icmp eq i64 %62, 0
  br i1 %167, label %201, label %168

168:                                              ; preds = %166
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %40) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 24, i1 false)
  store i8* %61, i8** %41, align 8
  %169 = getelementptr inbounds i8, i8* %59, i64 %58
  store i8* %169, i8** %42, align 8
  store i32 0, i32* %43, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false)
  %170 = call i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer* nonnull %9) #8
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %177

172:                                              ; preds = %168
  %173 = call i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer* nonnull %9, i32 2) #8
  %174 = trunc i32 %173 to i8
  switch i8 %174, label %177 [
    i8 0, label %176
    i8 2, label %175
  ]

175:                                              ; preds = %172
  br label %177

176:                                              ; preds = %172
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %40) #8
  br label %194

177:                                              ; preds = %172, %175, %168, %153
  %178 = phi i8* [ %45, %153 ], [ %40, %168 ], [ %40, %175 ], [ %40, %172 ]
  %179 = phi i8 [ %75, %153 ], [ %55, %168 ], [ %55, %175 ], [ %55, %172 ]
  %180 = phi i32 [ 1, %153 ], [ %56, %168 ], [ %56, %175 ], [ %56, %172 ]
  %181 = phi i32 [ %57, %153 ], [ %57, %168 ], [ 1, %175 ], [ %57, %172 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %178) #8
  br label %182

182:                                              ; preds = %177, %65
  %183 = phi i8 [ %55, %65 ], [ %179, %177 ]
  %184 = phi i32 [ %56, %65 ], [ %180, %177 ]
  %185 = phi i32 [ %57, %65 ], [ %181, %177 ]
  %186 = load i64, i64* %6, align 8
  %187 = getelementptr inbounds i8, i8* %61, i64 %186
  %188 = sub i64 %62, %186
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %197, label %190

190:                                              ; preds = %182
  %191 = load i32, i32* %18, align 4
  %192 = call i32 @aom_read_obu_header_and_size(i8* %187, i64 %188, i32 %191, %struct.ObuHeader* nonnull %5, i64* nonnull %6, i64* nonnull %7) #8
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %54, label %201

194:                                              ; preds = %162, %176
  %195 = icmp eq i32 %56, 0
  br i1 %195, label %197, label %196

196:                                              ; preds = %194
  store i32 1, i32* %14, align 4
  br label %197

197:                                              ; preds = %182, %194, %196
  %198 = phi i32 [ %57, %196 ], [ %57, %194 ], [ %185, %182 ]
  %199 = icmp eq i32* %3, null
  br i1 %199, label %201, label %200

200:                                              ; preds = %197
  store i32 %198, i32* %3, align 4
  br label %201

201:                                              ; preds = %190, %166, %67, %54, %151, %200, %197, %31, %26, %11
  %202 = phi i32 [ %20, %11 ], [ 7, %26 ], [ %35, %31 ], [ 0, %197 ], [ 0, %200 ], [ %152, %151 ], [ %192, %190 ], [ 7, %166 ], [ 7, %67 ], [ 7, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #8
  br label %203

203:                                              ; preds = %4, %201
  %204 = phi i32 [ %202, %201 ], [ 8, %4 ]
  ret i32 %204
}

declare i32 @aom_read_obu_header_and_size(i8*, i64, i32, %struct.ObuHeader*, i64*, i64*) local_unnamed_addr #4

declare signext i8 @av1_read_profile(%struct.aom_read_bit_buffer*) local_unnamed_addr #4

declare i32 @aom_rb_read_bit(%struct.aom_read_bit_buffer*) local_unnamed_addr #4

declare i32 @aom_rb_read_literal(%struct.aom_read_bit_buffer*, i32) local_unnamed_addr #4

declare i32 @aom_get_num_layers_from_operating_point_idc(i32, i32*, i32*) local_unnamed_addr #4

declare i32 @aom_rb_read_unsigned_literal(%struct.aom_read_bit_buffer*, i32) local_unnamed_addr #4

declare i32 @aom_rb_read_uvlc(%struct.aom_read_bit_buffer*) local_unnamed_addr #4

declare i32 @aom_uleb_decode(i8*, i64, i64*, i64*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #5

declare i8* @aom_malloc(i64) local_unnamed_addr #4

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #4

declare %struct.AV1Decoder* @av1_decoder_create(%struct.BufferPool*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @frame_worker_hook(i8* nocapture, i8* nocapture readnone) #0 {
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast i8** %3 to i64*
  store i64 %7, i64* %8, align 8
  %9 = bitcast i8* %0 to %struct.AV1Decoder**
  %10 = load %struct.AV1Decoder*, %struct.AV1Decoder** %9, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 24
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = call i32 @av1_receive_compressed_data(%struct.AV1Decoder* %10, i64 %13, i8** nonnull %3) #8
  %15 = load i64, i64* %8, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = icmp ne i32 %14, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = load %struct.AV1Decoder*, %struct.AV1Decoder** %9, align 8
  %21 = getelementptr inbounds %struct.AV1Decoder, %struct.AV1Decoder* %20, i64 0, i32 24
  store i32 1, i32* %21, align 16
  br label %22

22:                                               ; preds = %19, %2
  %23 = xor i1 %18, true
  %24 = zext i1 %23 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret i32 %24
}

declare i32 @av1_receive_compressed_data(%struct.AV1Decoder*, i64, i8**) local_unnamed_addr #4

declare i32 @av1_get_frame_buffer(i8*, i64, %struct.aom_codec_frame_buffer*) #4

declare i32 @av1_release_frame_buffer(i8*, %struct.aom_codec_frame_buffer*) #4

declare i32 @av1_alloc_internal_frame_buffers(%struct.InternalFrameBufferList*) local_unnamed_addr #4

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #4

declare i32 @av1_get_raw_frame(%struct.AV1Decoder*, i64, %struct.yv12_buffer_config**, %struct.aom_film_grain_t**) local_unnamed_addr #4

declare void @aom_img_remove_metadata(%struct.aom_image*) local_unnamed_addr #4

declare %struct.aom_image* @aom_img_alloc_with_cb(%struct.aom_image*, i32, i32, i32, i32, i8* (i8*, i64)*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i8* @AllocWithGetFrameBufferCb(i8* nocapture readonly, i64) #0 {
  %3 = bitcast i8* %0 to %struct.BufferPool**
  %4 = load %struct.BufferPool*, %struct.BufferPool** %3, align 8
  %5 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 2
  %6 = load i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %5, align 8
  %7 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to %struct.aom_codec_frame_buffer**
  %11 = load %struct.aom_codec_frame_buffer*, %struct.aom_codec_frame_buffer** %10, align 8
  %12 = tail call i32 %6(i8* %8, i64 %1, %struct.aom_codec_frame_buffer* %11) #8
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %2
  %15 = load %struct.aom_codec_frame_buffer*, %struct.aom_codec_frame_buffer** %10, align 8
  %16 = getelementptr inbounds %struct.aom_codec_frame_buffer, %struct.aom_codec_frame_buffer* %15, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.aom_codec_frame_buffer, %struct.aom_codec_frame_buffer* %15, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, %1
  %23 = select i1 %22, i8* null, i8* %17
  ret i8* %23

24:                                               ; preds = %14, %2
  ret i8* null
}

declare i32 @av1_add_film_grain(%struct.aom_film_grain_t*, %struct.aom_image*, %struct.aom_image*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !10}
!17 = distinct !{!17, !10}
!18 = distinct !{!18, !10}
