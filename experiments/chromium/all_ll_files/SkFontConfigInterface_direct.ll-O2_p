; ModuleID = '../../third_party/skia/src/ports/SkFontConfigInterface_direct.cpp'
source_filename = "../../third_party/skia/src/ports/SkFontConfigInterface_direct.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"struct.(anonymous namespace)::MapRanges" = type { float, float }
%class.SkFontConfigInterfaceDirect = type { %class.SkFontConfigInterface.base, [4 x i8] }
%class.SkFontConfigInterface.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.SkFontConfigInterface::FontIdentity" = type <{ i32, i32, %class.SkString, %class.SkFontStyle, [4 x i8] }>
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkFontStyle = type { i32 }
%class.SkWBuffer = type { i8*, i8*, i8* }
%class.SkRBuffer = type <{ i8*, i8*, i8*, i8, [7 x i8] }>
%struct._FcPattern = type opaque
%struct._FcConfig = type opaque
%struct._FcFontSet = type { i32, i32, %struct._FcPattern** }
%struct.FontEquivMap = type { i32, [40 x i8] }
%struct._FcCharSet = type opaque
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%class.SkStream = type { i32 (...)** }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.sk_sp.6 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkFontConfigInterface = type { %class.SkRefCnt.base, [4 x i8] }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN21SkFontConfigInterface12makeTypefaceERKNS_12FontIdentityE = comdat any

@.str = private unnamed_addr constant [9 x i8] c"TrueType\00", align 1
@kFontFormatTrueType = hidden local_unnamed_addr global i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"CFF\00", align 1
@kFontFormatCFF = hidden local_unnamed_addr global i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), align 8
@_ZTV27SkFontConfigInterfaceDirect = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkFontConfigInterfaceDirect*)* @_ZN27SkFontConfigInterfaceDirectD2Ev to i8*), i8* bitcast (void (%class.SkFontConfigInterfaceDirect*)* @_ZN27SkFontConfigInterfaceDirectD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (i1 (%class.SkFontConfigInterfaceDirect*, i8*, i32, %"struct.SkFontConfigInterface::FontIdentity"*, %class.SkString*, %class.SkFontStyle*)* @_ZN27SkFontConfigInterfaceDirect15matchFamilyNameEPKc11SkFontStylePN21SkFontConfigInterface12FontIdentityEP8SkStringPS2_ to i8*), i8* bitcast (%class.SkStreamAsset* (%class.SkFontConfigInterfaceDirect*, %"struct.SkFontConfigInterface::FontIdentity"*)* @_ZN27SkFontConfigInterfaceDirect10openStreamERKN21SkFontConfigInterface12FontIdentityE to i8*), i8* bitcast (void (%class.sk_sp.6*, %class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)* @_ZN21SkFontConfigInterface12makeTypefaceERKNS_12FontIdentityE to i8*), i8* bitcast (i1 (%class.SkFontConfigInterfaceDirect*, i8*)* @_ZN27SkFontConfigInterfaceDirect12isAccessibleEPKc to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"fontformat\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"family\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"scalable\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"index\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"sans\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"serif\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"monospace\00", align 1
@_ZZN12_GLOBAL__N_117GetFontEquivClassEPKcE13kFontEquivMap = internal constant <{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [11 x i8], [29 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [22 x i8], [18 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [21 x i8], [19 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [14 x i8], [26 x i8] }> }, { i32, <{ [18 x i8], [22 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } }> <{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> } { i32 1, <{ i8, i8, i8, i8, i8, [35 x i8] }> <{ i8 65, i8 114, i8 105, i8 97, i8 108, [35 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> } { i32 1, <{ i8, i8, i8, i8, i8, [35 x i8] }> <{ i8 65, i8 114, i8 105, i8 109, i8 111, [35 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 1, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"Liberation Sans", [25 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 2, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"Times New Roman", [25 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> } { i32 2, <{ i8, i8, i8, i8, i8, [35 x i8] }> <{ i8 84, i8 105, i8 110, i8 111, i8 115, [35 x i8] zeroinitializer }> }, { i32, <{ [16 x i8], [24 x i8] }> } { i32 2, <{ [16 x i8], [24 x i8] }> <{ [16 x i8] c"Liberation Serif", [24 x i8] zeroinitializer }> }, { i32, <{ [11 x i8], [29 x i8] }> } { i32 3, <{ [11 x i8], [29 x i8] }> <{ [11 x i8] c"Courier New", [29 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 3, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 67, i8 111, i8 117, i8 115, i8 105, i8 110, i8 101, [33 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 3, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"Liberation Mono", [25 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> } { i32 4, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> <{ i8 83, i8 121, i8 109, i8 98, i8 111, i8 108, [34 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 4, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"Symbol Neu", [30 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 5, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MS PGothic", [30 x i8] zeroinitializer }> }, { i32, <{ [22 x i8], [18 x i8] }> } { i32 5, <{ [22 x i8], [18 x i8] }> <{ [22 x i8] c"\EF\BC\AD\EF\BC\B3 \EF\BC\B0\E3\82\B4\E3\82\B7\E3\83\83\E3\82\AF", [18 x i8] zeroinitializer }> }, { i32, <{ [16 x i8], [24 x i8] }> } { i32 5, <{ [16 x i8], [24 x i8] }> <{ [16 x i8] c"Noto Sans CJK JP", [24 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 5, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"IPAPGothic", [30 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 5, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"MotoyaG04Gothic", [25 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 6, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"MS Gothic", [31 x i8] zeroinitializer }> }, { i32, <{ [19 x i8], [21 x i8] }> } { i32 6, <{ [19 x i8], [21 x i8] }> <{ [19 x i8] c"\EF\BC\AD\EF\BC\B3 \E3\82\B4\E3\82\B7\E3\83\83\E3\82\AF", [21 x i8] zeroinitializer }> }, { i32, <{ [21 x i8], [19 x i8] }> } { i32 6, <{ [21 x i8], [19 x i8] }> <{ [21 x i8] c"Noto Sans Mono CJK JP", [19 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 6, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"IPAGothic", [31 x i8] zeroinitializer }> }, { i32, <{ [19 x i8], [21 x i8] }> } { i32 6, <{ [19 x i8], [21 x i8] }> <{ [19 x i8] c"MotoyaG04GothicMono", [21 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 7, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MS PMincho", [30 x i8] zeroinitializer }> }, { i32, <{ [16 x i8], [24 x i8] }> } { i32 7, <{ [16 x i8], [24 x i8] }> <{ [16 x i8] c"\EF\BC\AD\EF\BC\B3 \EF\BC\B0\E6\98\8E\E6\9C\9D", [24 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 7, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK JP", [23 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 7, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"IPAPMincho", [30 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 7, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"MotoyaG04Mincho", [25 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 8, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"MS Mincho", [31 x i8] zeroinitializer }> }, { i32, <{ [13 x i8], [27 x i8] }> } { i32 8, <{ [13 x i8], [27 x i8] }> <{ [13 x i8] c"\EF\BC\AD\EF\BC\B3 \E6\98\8E\E6\9C\9D", [27 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 8, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK JP", [23 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 8, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"IPAMincho", [31 x i8] zeroinitializer }> }, { i32, <{ [19 x i8], [21 x i8] }> } { i32 8, <{ [19 x i8], [21 x i8] }> <{ [19 x i8] c"MotoyaG04MinchoMono", [21 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> } { i32 9, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> <{ i8 83, i8 105, i8 109, i8 115, i8 117, i8 110, [34 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> } { i32 9, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> <{ i8 -27, i8 -82, i8 -117, i8 -28, i8 -67, i8 -109, [34 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 9, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK SC", [23 x i8] zeroinitializer }> }, { i32, <{ [13 x i8], [27 x i8] }> } { i32 9, <{ [13 x i8], [27 x i8] }> <{ [13 x i8] c"MSung GB18030", [27 x i8] zeroinitializer }> }, { i32, <{ [8 x i8], [32 x i8] }> } { i32 9, <{ [8 x i8], [32 x i8] }> <{ [8 x i8] c"Song ASC", [32 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 10, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 78, i8 83, i8 105, i8 109, i8 115, i8 117, i8 110, [33 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 10, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"\E6\96\B0\E5\AE\8B\E4\BD\93", [31 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 10, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK SC", [23 x i8] zeroinitializer }> }, { i32, <{ [13 x i8], [27 x i8] }> } { i32 10, <{ [13 x i8], [27 x i8] }> <{ [13 x i8] c"MSung GB18030", [27 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 10, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"N Song ASC", [30 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> } { i32 11, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> <{ i8 83, i8 105, i8 109, i8 104, i8 101, i8 105, [34 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> } { i32 11, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> <{ i8 -23, i8 -69, i8 -111, i8 -28, i8 -67, i8 -109, [34 x i8] zeroinitializer }> }, { i32, <{ [16 x i8], [24 x i8] }> } { i32 11, <{ [16 x i8], [24 x i8] }> <{ [16 x i8] c"Noto Sans CJK SC", [24 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 11, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"MYingHeiGB18030", [25 x i8] zeroinitializer }> }, { i32, <{ [12 x i8], [28 x i8] }> } { i32 11, <{ [12 x i8], [28 x i8] }> <{ [12 x i8] c"MYingHeiB5HK", [28 x i8] zeroinitializer }> }, { i32, <{ [8 x i8], [32 x i8] }> } { i32 12, <{ [8 x i8], [32 x i8] }> <{ [8 x i8] c"PMingLiU", [32 x i8] zeroinitializer }> }, { i32, <{ [12 x i8], [28 x i8] }> } { i32 12, <{ [12 x i8], [28 x i8] }> <{ [12 x i8] c"\E6\96\B0\E7\B4\B0\E6\98\8E\E9\AB\94", [28 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 12, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK TC", [23 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 12, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MSung B5HK", [30 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 13, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 77, i8 105, i8 110, i8 103, i8 76, i8 105, i8 85, [33 x i8] zeroinitializer }> }, { i32, <{ [9 x i8], [31 x i8] }> } { i32 13, <{ [9 x i8], [31 x i8] }> <{ [9 x i8] c"\E7\B4\B0\E6\98\8E\E9\AB\94", [31 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 13, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK TC", [23 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 13, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MSung B5HK", [30 x i8] zeroinitializer }> }, { i32, <{ [14 x i8], [26 x i8] }> } { i32 14, <{ [14 x i8], [26 x i8] }> <{ [14 x i8] c"PMingLiU_HKSCS", [26 x i8] zeroinitializer }> }, { i32, <{ [18 x i8], [22 x i8] }> } { i32 14, <{ [18 x i8], [22 x i8] }> <{ [18 x i8] c"\E6\96\B0\E7\B4\B0\E6\98\8E\E9\AB\94_HKSCS", [22 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 14, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK TC", [23 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 14, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MSung B5HK", [30 x i8] zeroinitializer }> }, { i32, <{ [13 x i8], [27 x i8] }> } { i32 15, <{ [13 x i8], [27 x i8] }> <{ [13 x i8] c"MingLiU_HKSCS", [27 x i8] zeroinitializer }> }, { i32, <{ [15 x i8], [25 x i8] }> } { i32 15, <{ [15 x i8], [25 x i8] }> <{ [15 x i8] c"\E7\B4\B0\E6\98\8E\E9\AB\94_HKSCS", [25 x i8] zeroinitializer }> }, { i32, <{ [17 x i8], [23 x i8] }> } { i32 15, <{ [17 x i8], [23 x i8] }> <{ [17 x i8] c"Noto Serif CJK TC", [23 x i8] zeroinitializer }> }, { i32, <{ [10 x i8], [30 x i8] }> } { i32 15, <{ [10 x i8], [30 x i8] }> <{ [10 x i8] c"MSung B5HK", [30 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 16, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 67, i8 97, i8 109, i8 98, i8 114, i8 105, i8 97, [33 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 16, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 67, i8 97, i8 108, i8 97, i8 100, i8 101, i8 97, [33 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 17, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 67, i8 97, i8 108, i8 105, i8 98, i8 114, i8 105, [33 x i8] zeroinitializer }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } { i32 17, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> <{ i8 67, i8 97, i8 114, i8 108, i8 105, i8 116, i8 111, [33 x i8] zeroinitializer }> } }>, align 16
@_ZZN12_GLOBAL__N_19f_c_mutexEvE5mutex = internal unnamed_addr global %class.SkMutex* null, align 8
@_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex = internal global i64 0, align 8
@_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE12weightRanges = internal unnamed_addr constant [12 x %"struct.(anonymous namespace)::MapRanges"] [%"struct.(anonymous namespace)::MapRanges" { float 1.000000e+02, float 0.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 2.000000e+02, float 4.000000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 3.000000e+02, float 5.000000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 3.500000e+02, float 5.500000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 3.800000e+02, float 7.500000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 4.000000e+02, float 8.000000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 5.000000e+02, float 1.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 6.000000e+02, float 1.800000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 7.000000e+02, float 2.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 8.000000e+02, float 2.050000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 9.000000e+02, float 2.100000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 1.000000e+03, float 2.150000e+02 }], align 16
@_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE11widthRanges = internal unnamed_addr constant [9 x %"struct.(anonymous namespace)::MapRanges"] [%"struct.(anonymous namespace)::MapRanges" { float 1.000000e+00, float 5.000000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 2.000000e+00, float 6.300000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 3.000000e+00, float 7.500000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 4.000000e+00, float 8.700000e+01 }, %"struct.(anonymous namespace)::MapRanges" { float 5.000000e+00, float 1.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 6.000000e+00, float 1.130000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 7.000000e+00, float 1.250000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 8.000000e+00, float 1.500000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 9.000000e+00, float 2.000000e+02 }], align 16
@.str.11 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"slant\00", align 1
@_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE12weightRanges = internal unnamed_addr constant [12 x %"struct.(anonymous namespace)::MapRanges"] [%"struct.(anonymous namespace)::MapRanges" { float 0.000000e+00, float 1.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 4.000000e+01, float 2.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 5.000000e+01, float 3.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 5.500000e+01, float 3.500000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 7.500000e+01, float 3.800000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 8.000000e+01, float 4.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 1.000000e+02, float 5.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 1.800000e+02, float 6.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 2.000000e+02, float 7.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 2.050000e+02, float 8.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 2.100000e+02, float 9.000000e+02 }, %"struct.(anonymous namespace)::MapRanges" { float 2.150000e+02, float 1.000000e+03 }], align 16
@_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE11widthRanges = internal unnamed_addr constant [9 x %"struct.(anonymous namespace)::MapRanges"] [%"struct.(anonymous namespace)::MapRanges" { float 5.000000e+01, float 1.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 6.300000e+01, float 2.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 7.500000e+01, float 3.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 8.700000e+01, float 4.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 1.000000e+02, float 5.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 1.130000e+02, float 6.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 1.250000e+02, float 7.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 1.500000e+02, float 8.000000e+00 }, %"struct.(anonymous namespace)::MapRanges" { float 2.000000e+02, float 9.000000e+00 }], align 16

@_ZN27SkFontConfigInterfaceDirectC1Ev = hidden unnamed_addr alias void (%class.SkFontConfigInterfaceDirect*), void (%class.SkFontConfigInterfaceDirect*)* @_ZN27SkFontConfigInterfaceDirectC2Ev
@_ZN27SkFontConfigInterfaceDirectD1Ev = hidden unnamed_addr alias void (%class.SkFontConfigInterfaceDirect*), void (%class.SkFontConfigInterfaceDirect*)* @_ZN27SkFontConfigInterfaceDirectD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK21SkFontConfigInterface12FontIdentity13writeToMemoryEPv(%"struct.SkFontConfigInterface::FontIdentity"* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca %class.SkWBuffer, align 8
  %10 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %12 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = add nuw nsw i64 %14, 21
  %16 = icmp eq i8* %1, null
  br i1 %16, label %53, label %17

17:                                               ; preds = %2
  %18 = bitcast %class.SkWBuffer* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #13
  %19 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %9, i64 0, i32 0
  %20 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %9, i64 0, i32 1
  %21 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %9, i64 0, i32 2
  store i8* %1, i8** %19, align 8
  store i8* %1, i8** %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 %15
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25)
  store i32 %24, i32* %7, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %25, i64 4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25)
  %26 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28)
  store i32 %27, i32* %6, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %28, i64 4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28)
  %29 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %30 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32)
  store i32 %31, i32* %4, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %32, i64 4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32)
  %33 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 3, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 65535
  %36 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36)
  store i32 %35, i32* %3, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %36, i64 4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36)
  %37 = load i32, i32* %33, align 4
  %38 = lshr i32 %37, 16
  %39 = and i32 %38, 255
  %40 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
  store i32 %39, i32* %5, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %40, i64 4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40)
  %41 = load i32, i32* %33, align 4
  %42 = lshr i32 %41, 24
  %43 = trunc i32 %42 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8)
  store i8 %43, i8* %8, align 1
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* nonnull %8, i64 1) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8)
  %44 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %45 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %44, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %17
  %49 = zext i32 %46 to i64
  %50 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %44, i64 0, i32 2
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %9, i8* %50, i64 %49) #13
  br label %51

51:                                               ; preds = %17, %48
  %52 = call i64 @_ZN9SkWBuffer11padToAlign4Ev(%class.SkWBuffer* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #13
  br label %53

53:                                               ; preds = %2, %51
  ret i64 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN9SkWBuffer11padToAlign4Ev(%class.SkWBuffer*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN21SkFontConfigInterface12FontIdentity14readFromMemoryEPKvm(%"struct.SkFontConfigInterface::FontIdentity"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRBuffer, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #13
  %10 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 0
  %11 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 1
  %12 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 2
  %13 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 3
  %14 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  store i8 1, i8* %13, align 8
  store i8* %1, i8** %10, align 8
  store i8* %1, i8** %11, align 8
  %15 = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %15, i8** %12, align 8
  %16 = bitcast %"struct.SkFontConfigInterface::FontIdentity"* %0 to i8*
  %17 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* %16, i64 4) #13
  %18 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 1
  %19 = bitcast i32* %18 to i8*
  %20 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* %19, i64 4) #13
  %21 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #13
  store i32 -1431655766, i32* %5, align 4
  %22 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #13
  store i32 -1431655766, i32* %6, align 4
  %23 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #13
  store i32 -1431655766, i32* %7, align 4
  %24 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %21, i64 4) #13
  %25 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %22, i64 4) #13
  %26 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %23, i64 4) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #13
  store i8 -86, i8* %8, align 1
  %27 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %8, i64 1) #13
  %28 = load i8, i8* %8, align 1
  %29 = zext i8 %28 to i32
  %30 = load i32, i32* %6, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %30, 1000
  %33 = select i1 %32, i32 %30, i32 1000
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  %36 = icmp slt i32 %31, 9
  %37 = select i1 %36, i32 %31, i32 9
  %38 = icmp sgt i32 %37, 1
  %39 = select i1 %38, i32 %37, i32 1
  %40 = shl nsw i32 %39, 16
  %41 = icmp ult i32 %29, 2
  %42 = select i1 %41, i32 %29, i32 2
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  %45 = shl nuw nsw i32 %44, 24
  %46 = add nuw nsw i32 %45, %35
  %47 = add nuw nsw i32 %46, %40
  %48 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 3, i32 0
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %0, i64 0, i32 2
  %50 = load i32, i32* %5, align 4
  %51 = zext i32 %50 to i64
  call void @_ZN8SkString6resizeEm(%class.SkString* %49, i64 %51) #13
  %52 = call i8* @_ZN8SkString12writable_strEv(%class.SkString* %49) #13
  %53 = load i32, i32* %5, align 4
  %54 = zext i32 %53 to i64
  %55 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* %52, i64 %54) #13
  %56 = call zeroext i1 @_ZN9SkRBuffer12skipToAlign4Ev(%class.SkRBuffer* nonnull %4) #13
  %57 = bitcast i8** %11 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %class.SkRBuffer* %4 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %58, %60
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #13
  ret i64 %61
}

declare void @_ZN8SkString6resizeEm(%class.SkString*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer*, i8*, i64) local_unnamed_addr #2

declare i8* @_ZN8SkString12writable_strEv(%class.SkString*) local_unnamed_addr #2

declare zeroext i1 @_ZN9SkRBuffer12skipToAlign4Ev(%class.SkRBuffer*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN27SkFontConfigInterfaceDirectC2Ev(%class.SkFontConfigInterfaceDirect* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkFontConfigInterfaceDirect, %class.SkFontConfigInterfaceDirect* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.SkFontConfigInterfaceDirect, %class.SkFontConfigInterfaceDirect* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV27SkFontConfigInterfaceDirect, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN27SkFontConfigInterfaceDirectD2Ev(%class.SkFontConfigInterfaceDirect* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27SkFontConfigInterfaceDirectD0Ev(%class.SkFontConfigInterfaceDirect*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.SkFontConfigInterfaceDirect* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN27SkFontConfigInterfaceDirect12isAccessibleEPKc(%class.SkFontConfigInterfaceDirect* nocapture readnone, i8* nocapture readonly) unnamed_addr #6 align 2 {
  %3 = tail call i32 @access(i8* %1, i32 4) #13
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: nofree nounwind
declare i32 @access(i8* nocapture readonly, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN27SkFontConfigInterfaceDirect14isValidPatternEP10_FcPattern(%class.SkFontConfigInterfaceDirect*, %struct._FcPattern*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %class.SkString, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %7 = call i32 @FcPatternGetString(%struct._FcPattern* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 0, i8** nonnull %4) #13
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  br label %21

10:                                               ; preds = %2
  %11 = load i8*, i8** %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %12 = icmp eq i8* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %10
  %14 = load i8*, i8** @kFontFormatTrueType, align 8
  %15 = call i32 @strcmp(i8* nonnull %11, i8* %14) #15
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = load i8*, i8** @kFontFormatCFF, align 8
  %19 = call i32 @strcmp(i8* nonnull %11, i8* %18) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %48

21:                                               ; preds = %9, %17, %13, %10
  %22 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %23 = call i32 @FcPatternGetString(%struct._FcPattern* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 0, i8** nonnull %3) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #13
  br label %48

26:                                               ; preds = %21
  %27 = load i8*, i8** %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #13
  %28 = icmp eq i8* %27, null
  br i1 %28, label %48, label %29

29:                                               ; preds = %26
  %30 = call %struct._FcConfig* @FcConfigReference(%struct._FcConfig* null) #13
  %31 = call i8* @FcConfigGetSysRoot(%struct._FcConfig* %30) #13
  %32 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #13
  %33 = getelementptr inbounds %class.SkString, %class.SkString* %5, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %33, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %5) #13
  %34 = icmp eq i8* %31, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %29
  %36 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* nonnull %5, i8* nonnull %31) #13
  call void @_ZN8SkString6insertEmPKc(%class.SkString* nonnull %5, i64 -1, i8* nonnull %27) #13
  %37 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %33, align 8
  %38 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %37, i64 0, i32 2
  br label %39

39:                                               ; preds = %29, %35
  %40 = phi i8* [ %38, %35 ], [ %27, %29 ]
  %41 = bitcast %class.SkFontConfigInterfaceDirect* %0 to i1 (%class.SkFontConfigInterfaceDirect*, i8*)***
  %42 = load i1 (%class.SkFontConfigInterfaceDirect*, i8*)**, i1 (%class.SkFontConfigInterfaceDirect*, i8*)*** %41, align 8
  %43 = getelementptr inbounds i1 (%class.SkFontConfigInterfaceDirect*, i8*)*, i1 (%class.SkFontConfigInterfaceDirect*, i8*)** %42, i64 6
  %44 = load i1 (%class.SkFontConfigInterfaceDirect*, i8*)*, i1 (%class.SkFontConfigInterfaceDirect*, i8*)** %43, align 8
  %45 = call zeroext i1 %44(%class.SkFontConfigInterfaceDirect* %0, i8* %40) #13
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #13
  %46 = icmp eq %struct._FcConfig* %30, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %39
  call void @FcConfigDestroy(%struct._FcConfig* nonnull %30) #13
  br label %48

48:                                               ; preds = %47, %39, %25, %26, %17
  %49 = phi i1 [ false, %17 ], [ false, %26 ], [ false, %25 ], [ %45, %39 ], [ %45, %47 ]
  ret i1 %49
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #8

declare %struct._FcConfig* @FcConfigReference(%struct._FcConfig*) local_unnamed_addr #2

declare i8* @FcConfigGetSysRoot(%struct._FcConfig*) local_unnamed_addr #2

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #2

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcPattern* @_ZN27SkFontConfigInterfaceDirect9MatchFontEP10_FcFontSetPKcRK8SkString(%class.SkFontConfigInterfaceDirect*, %struct._FcFontSet* nocapture readonly, i8* nocapture readonly, %class.SkString* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = alloca i8*, align 8
  %6 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %91

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct._FcFontSet, %struct._FcFontSet* %1, i64 0, i32 2
  br label %15

11:                                               ; preds = %15
  %12 = load i32, i32* %6, align 8
  %13 = sext i32 %12 to i64
  %14 = icmp slt i64 %21, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %9, %11
  %16 = phi i64 [ 0, %9 ], [ %21, %11 ]
  %17 = load %struct._FcPattern**, %struct._FcPattern*** %10, align 8
  %18 = getelementptr inbounds %struct._FcPattern*, %struct._FcPattern** %17, i64 %16
  %19 = load %struct._FcPattern*, %struct._FcPattern** %18, align 8
  %20 = tail call zeroext i1 @_ZN27SkFontConfigInterfaceDirect14isValidPatternEP10_FcPattern(%class.SkFontConfigInterfaceDirect* %0, %struct._FcPattern* %19)
  %21 = add nuw nsw i64 %16, 1
  br i1 %20, label %22, label %11

22:                                               ; preds = %11, %15
  %23 = phi %struct._FcPattern* [ %19, %15 ], [ null, %11 ]
  %24 = icmp eq %struct._FcPattern* %23, null
  br i1 %24, label %91, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %class.SkString, %class.SkString* %3, i64 0, i32 0, i32 0
  %27 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %26, align 8
  %28 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %27, i64 0, i32 2
  %29 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %27, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %91, label %32

32:                                               ; preds = %25
  %33 = tail call i32 @strcasecmp(i8* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0)) #15
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %91, label %35

35:                                               ; preds = %32
  %36 = tail call i32 @strcasecmp(i8* %28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #15
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %91, label %38

38:                                               ; preds = %35
  %39 = tail call i32 @strcasecmp(i8* %28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #15
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %91, label %41

41:                                               ; preds = %38
  %42 = bitcast i8** %5 to i8*
  br label %45

43:                                               ; preds = %85
  %44 = icmp eq i32 %90, 255
  br i1 %44, label %91, label %45

45:                                               ; preds = %43, %41
  %46 = phi i32 [ 0, %41 ], [ %90, %43 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %47 = call i32 @FcPatternGetString(%struct._FcPattern* nonnull %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 %46, i8** nonnull %5) #13
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #13
  br label %91

50:                                               ; preds = %45
  %51 = load i8*, i8** %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #13
  %52 = icmp eq i8* %51, null
  br i1 %52, label %91, label %53

53:                                               ; preds = %50
  %54 = call i32 @strcasecmp(i8* %2, i8* nonnull %51) #15
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %91, label %56

56:                                               ; preds = %53
  %57 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %26, align 8
  %58 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %57, i64 0, i32 2
  %59 = call i32 @strcasecmp(i8* %58, i8* nonnull %51) #15
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %91, label %61

61:                                               ; preds = %56, %66
  %62 = phi i64 [ %67, %66 ], [ 0, %56 ]
  %63 = getelementptr inbounds [66 x %struct.FontEquivMap], [66 x %struct.FontEquivMap]* bitcast (<{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [11 x i8], [29 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [22 x i8], [18 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [21 x i8], [19 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [14 x i8], [26 x i8] }> }, { i32, <{ [18 x i8], [22 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } }>* @_ZZN12_GLOBAL__N_117GetFontEquivClassEPKcE13kFontEquivMap to [66 x %struct.FontEquivMap]*), i64 0, i64 %62, i32 1, i64 0
  %64 = call i32 @strcasecmp(i8* %63, i8* %58) #15
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %61
  %67 = add nuw nsw i64 %62, 1
  %68 = icmp eq i64 %67, 66
  br i1 %68, label %72, label %61

69:                                               ; preds = %61
  %70 = getelementptr inbounds [66 x %struct.FontEquivMap], [66 x %struct.FontEquivMap]* bitcast (<{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [11 x i8], [29 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [22 x i8], [18 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [21 x i8], [19 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [14 x i8], [26 x i8] }> }, { i32, <{ [18 x i8], [22 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } }>* @_ZZN12_GLOBAL__N_117GetFontEquivClassEPKcE13kFontEquivMap to [66 x %struct.FontEquivMap]*), i64 0, i64 %62, i32 0
  %71 = load i32, i32* %70, align 4
  br label %72

72:                                               ; preds = %66, %69
  %73 = phi i32 [ %71, %69 ], [ 0, %66 ]
  br label %74

74:                                               ; preds = %79, %72
  %75 = phi i64 [ 0, %72 ], [ %80, %79 ]
  %76 = getelementptr inbounds [66 x %struct.FontEquivMap], [66 x %struct.FontEquivMap]* bitcast (<{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [11 x i8], [29 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [22 x i8], [18 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [21 x i8], [19 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [14 x i8], [26 x i8] }> }, { i32, <{ [18 x i8], [22 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } }>* @_ZZN12_GLOBAL__N_117GetFontEquivClassEPKcE13kFontEquivMap to [66 x %struct.FontEquivMap]*), i64 0, i64 %75, i32 1, i64 0
  %77 = call i32 @strcasecmp(i8* %76, i8* nonnull %51) #15
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %74
  %80 = add nuw nsw i64 %75, 1
  %81 = icmp eq i64 %80, 66
  br i1 %81, label %85, label %74

82:                                               ; preds = %74
  %83 = getelementptr inbounds [66 x %struct.FontEquivMap], [66 x %struct.FontEquivMap]* bitcast (<{ { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, [35 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [11 x i8], [29 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [22 x i8], [18 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [21 x i8], [19 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [19 x i8], [21 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, [34 x i8] }> }, { i32, <{ [16 x i8], [24 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [8 x i8], [32 x i8] }> }, { i32, <{ [12 x i8], [28 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ [9 x i8], [31 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [14 x i8], [26 x i8] }> }, { i32, <{ [18 x i8], [22 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ [13 x i8], [27 x i8] }> }, { i32, <{ [15 x i8], [25 x i8] }> }, { i32, <{ [17 x i8], [23 x i8] }> }, { i32, <{ [10 x i8], [30 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> }, { i32, <{ i8, i8, i8, i8, i8, i8, i8, [33 x i8] }> } }>* @_ZZN12_GLOBAL__N_117GetFontEquivClassEPKcE13kFontEquivMap to [66 x %struct.FontEquivMap]*), i64 0, i64 %75, i32 0
  %84 = load i32, i32* %83, align 4
  br label %85

85:                                               ; preds = %79, %82
  %86 = phi i32 [ %84, %82 ], [ 0, %79 ]
  %87 = icmp ne i32 %73, 0
  %88 = icmp eq i32 %73, %86
  %89 = and i1 %87, %88
  %90 = add nuw nsw i32 %46, 1
  br i1 %89, label %91, label %43

91:                                               ; preds = %85, %56, %53, %50, %43, %4, %49, %25, %32, %35, %38, %22
  %92 = phi %struct._FcPattern* [ null, %22 ], [ %23, %38 ], [ %23, %35 ], [ %23, %32 ], [ %23, %25 ], [ null, %49 ], [ null, %4 ], [ %23, %85 ], [ %23, %56 ], [ %23, %53 ], [ null, %50 ], [ null, %43 ]
  ret %struct._FcPattern* %92
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN27SkFontConfigInterfaceDirect15matchFamilyNameEPKc11SkFontStylePN21SkFontConfigInterface12FontIdentityEP8SkStringPS2_(%class.SkFontConfigInterfaceDirect*, i8*, i32, %"struct.SkFontConfigInterface::FontIdentity"*, %class.SkString*, %class.SkFontStyle*) unnamed_addr #0 align 2 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %class.SkString, align 8
  %15 = alloca i32, align 4
  %16 = alloca %class.SkString, align 8
  %17 = bitcast %class.SkString* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  %18 = getelementptr inbounds %class.SkString, %class.SkString* %14, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %18, align 8
  %19 = icmp ne i8* %1, null
  %20 = select i1 %19, i8* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %14, i8* %20) #13
  %21 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %18, align 8
  %22 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp ugt i32 %23, 2048
  br i1 %24, label %323, label %25

25:                                               ; preds = %6
  %26 = call i32 @FcGetVersion() #13
  %27 = icmp slt i32 %26, 21393
  br i1 %27, label %28, label %47

28:                                               ; preds = %25
  %29 = load atomic i8, i8* bitcast (i64* @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex to i8*) acquire, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %40, !prof !2

31:                                               ; preds = %28
  %32 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex) #13
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %31
  %35 = call i8* @_Znwm(i64 16) #14
  %36 = bitcast i8* %35 to i32*
  store i32 1, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %35, i64 4
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 8
  %39 = bitcast i8* %38 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %39, align 8
  store i8* %35, i8** bitcast (%class.SkMutex** @_ZZN12_GLOBAL__N_19f_c_mutexEvE5mutex to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex) #13
  br label %40

40:                                               ; preds = %34, %31, %28
  %41 = load %class.SkMutex*, %class.SkMutex** @_ZZN12_GLOBAL__N_19f_c_mutexEvE5mutex, align 8
  %42 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acquire
  %44 = icmp slt i32 %43, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %41, i64 0, i32 0
  call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %46) #13
  br label %47

47:                                               ; preds = %25, %40, %45
  %48 = call %struct._FcConfig* @FcConfigReference(%struct._FcConfig* null) #13
  %49 = call %struct._FcPattern* @FcPatternCreate() #13
  br i1 %19, label %50, label %52

50:                                               ; preds = %47
  %51 = call i32 @FcPatternAddString(%struct._FcPattern* %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* nonnull %1) #13
  br label %52

52:                                               ; preds = %50, %47
  %53 = and i32 %2, 65535
  %54 = sitofp i32 %53 to float
  %55 = icmp ult i32 %53, 100
  br i1 %55, label %82, label %56

56:                                               ; preds = %52, %59
  %57 = phi i64 [ %60, %59 ], [ 0, %52 ]
  %58 = icmp eq i64 %57, 11
  br i1 %58, label %82, label %59

59:                                               ; preds = %56
  %60 = add nuw nsw i64 %57, 1
  %61 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE12weightRanges, i64 0, i64 %60, i32 0
  %62 = load float, float* %61, align 8
  %63 = fcmp ogt float %62, %54
  br i1 %63, label %64, label %56

64:                                               ; preds = %59
  %65 = and i64 %60, 4294967295
  %66 = and i64 %57, 4294967295
  %67 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE12weightRanges, i64 0, i64 %66, i32 0
  %68 = load float, float* %67, align 8
  %69 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE12weightRanges, i64 0, i64 %66, i32 1
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE12weightRanges, i64 0, i64 %65, i32 1
  %72 = load float, float* %71, align 4
  %73 = fsub float %54, %68
  %74 = fsub float %72, %70
  %75 = fmul float %73, %74
  %76 = fsub float %62, %68
  %77 = fdiv float %75, %76
  %78 = fadd float %70, %77
  %79 = fptosi float %78 to i32
  %80 = sitofp i32 %79 to float
  %81 = fptosi float %80 to i32
  br label %82

82:                                               ; preds = %56, %64, %52
  %83 = phi i32 [ %81, %64 ], [ 0, %52 ], [ 215, %56 ]
  %84 = lshr i32 %2, 16
  %85 = and i32 %84, 255
  %86 = sitofp i32 %85 to float
  %87 = icmp eq i32 %85, 0
  br i1 %87, label %114, label %88

88:                                               ; preds = %82, %91
  %89 = phi i64 [ %92, %91 ], [ 0, %82 ]
  %90 = icmp eq i64 %89, 8
  br i1 %90, label %114, label %91

91:                                               ; preds = %88
  %92 = add nuw nsw i64 %89, 1
  %93 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE11widthRanges, i64 0, i64 %92, i32 0
  %94 = load float, float* %93, align 8
  %95 = fcmp ogt float %94, %86
  br i1 %95, label %96, label %88

96:                                               ; preds = %91
  %97 = and i64 %92, 4294967295
  %98 = and i64 %89, 4294967295
  %99 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE11widthRanges, i64 0, i64 %98, i32 0
  %100 = load float, float* %99, align 8
  %101 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE11widthRanges, i64 0, i64 %98, i32 1
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126fcpattern_from_skfontstyleE11SkFontStyleP10_FcPatternE11widthRanges, i64 0, i64 %97, i32 1
  %104 = load float, float* %103, align 4
  %105 = fsub float %86, %100
  %106 = fsub float %104, %102
  %107 = fmul float %105, %106
  %108 = fsub float %94, %100
  %109 = fdiv float %107, %108
  %110 = fadd float %102, %109
  %111 = fptosi float %110 to i32
  %112 = sitofp i32 %111 to float
  %113 = fptosi float %112 to i32
  br label %114

114:                                              ; preds = %88, %82, %96
  %115 = phi i32 [ %113, %96 ], [ 50, %82 ], [ 200, %88 ]
  %116 = lshr i32 %2, 24
  %117 = icmp eq i32 %116, 1
  %118 = select i1 %117, i32 100, i32 0
  %119 = icmp eq i32 %116, 2
  %120 = select i1 %119, i32 110, i32 %118
  %121 = call i32 @FcPatternAddInteger(%struct._FcPattern* %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i32 %83) #13
  %122 = call i32 @FcPatternAddInteger(%struct._FcPattern* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i32 %115) #13
  %123 = call i32 @FcPatternAddInteger(%struct._FcPattern* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i32 %120) #13
  %124 = call i32 @FcPatternAddBool(%struct._FcPattern* %49, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1) #13
  %125 = call i32 @FcConfigSubstitute(%struct._FcConfig* %48, %struct._FcPattern* %49, i32 0) #13
  call void @FcDefaultSubstitute(%struct._FcPattern* %49) #13
  %126 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %13, align 8
  %127 = call i32 @FcPatternGetString(%struct._FcPattern* %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 0, i8** nonnull %13) #13
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %114
  %130 = load i8*, i8** %13, align 8
  br label %132

131:                                              ; preds = %114
  store i8* null, i8** %13, align 8
  br label %132

132:                                              ; preds = %129, %131
  %133 = phi i8* [ %130, %129 ], [ null, %131 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #13
  %134 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %134) #13
  store i32 -1431655766, i32* %15, align 4
  %135 = call %struct._FcFontSet* @FcFontSort(%struct._FcConfig* %48, %struct._FcPattern* %49, i32 0, %struct._FcCharSet** null, i32* nonnull %15) #13
  %136 = icmp eq %struct._FcFontSet* %135, null
  br i1 %136, label %137, label %138

137:                                              ; preds = %132
  call void @FcPatternDestroy(%struct._FcPattern* %49) #13
  br label %297

138:                                              ; preds = %132
  %139 = icmp eq i8* %133, null
  %140 = select i1 %139, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i8* %133
  %141 = call %struct._FcPattern* @_ZN27SkFontConfigInterfaceDirect9MatchFontEP10_FcFontSetPKcRK8SkString(%class.SkFontConfigInterfaceDirect* %0, %struct._FcFontSet* nonnull %135, i8* %140, %class.SkString* nonnull dereferenceable(8) %14)
  %142 = icmp eq %struct._FcPattern* %141, null
  call void @FcPatternDestroy(%struct._FcPattern* %49) #13
  br i1 %142, label %143, label %144

143:                                              ; preds = %138
  call void @FcFontSetDestroy(%struct._FcFontSet* nonnull %135) #13
  br label %297

144:                                              ; preds = %138
  %145 = bitcast i8** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %146 = call i32 @FcPatternGetString(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 0, i8** nonnull %12) #13
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %149, label %148

148:                                              ; preds = %144
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #13
  br label %152

149:                                              ; preds = %144
  %150 = load i8*, i8** %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #13
  %151 = icmp eq i8* %150, null
  br i1 %151, label %152, label %153

152:                                              ; preds = %148, %149
  call void @FcFontSetDestroy(%struct._FcFontSet* nonnull %135) #13
  br label %297

153:                                              ; preds = %149
  %154 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %154) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %11, align 8
  %155 = call i32 @FcPatternGetString(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 0, i8** nonnull %11) #13
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %158, label %157

157:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %154) #13
  br label %161

158:                                              ; preds = %153
  %159 = load i8*, i8** %11, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %154) #13
  %160 = icmp eq i8* %159, null
  br i1 %160, label %161, label %162

161:                                              ; preds = %157, %158
  call void @FcFontSetDestroy(%struct._FcFontSet* nonnull %135) #13
  br label %297

162:                                              ; preds = %158
  %163 = call i8* @FcConfigGetSysRoot(%struct._FcConfig* %48) #13
  %164 = bitcast %class.SkString* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #13
  %165 = getelementptr inbounds %class.SkString, %class.SkString* %16, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %165, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %16) #13
  %166 = icmp eq i8* %163, null
  br i1 %166, label %171, label %167

167:                                              ; preds = %162
  %168 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* nonnull %16, i8* nonnull %163) #13
  call void @_ZN8SkString6insertEmPKc(%class.SkString* nonnull %16, i64 -1, i8* nonnull %159) #13
  %169 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %165, align 8
  %170 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %169, i64 0, i32 2
  br label %171

171:                                              ; preds = %162, %167
  %172 = phi i8* [ %170, %167 ], [ %159, %162 ]
  %173 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %173) #13
  store i32 -1431655766, i32* %10, align 4
  %174 = call i32 @FcPatternGetInteger(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 0, i32* nonnull %10) #13
  %175 = load i32, i32* %10, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %173) #13
  call void @FcFontSetDestroy(%struct._FcFontSet* nonnull %135) #13
  %176 = icmp eq %"struct.SkFontConfigInterface::FontIdentity"* %3, null
  br i1 %176, label %182, label %177

177:                                              ; preds = %171
  %178 = icmp eq i32 %174, 0
  %179 = select i1 %178, i32 %175, i32 0
  %180 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %3, i64 0, i32 1
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %3, i64 0, i32 2
  call void @_ZN8SkString3setEPKc(%class.SkString* %181, i8* %172) #13
  br label %182

182:                                              ; preds = %171, %177
  %183 = icmp eq %class.SkString* %4, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %182
  call void @_ZN8SkString3setEPKc(%class.SkString* nonnull %4, i8* nonnull %150) #13
  br label %185

185:                                              ; preds = %182, %184
  %186 = icmp eq %class.SkFontStyle* %5, null
  br i1 %186, label %296, label %187

187:                                              ; preds = %185
  %188 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %188) #13
  store i32 -1431655766, i32* %9, align 4
  %189 = call i32 @FcPatternGetInteger(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i32 0, i32* nonnull %9) #13
  %190 = icmp eq i32 %189, 0
  %191 = load i32, i32* %9, align 4
  %192 = select i1 %190, i32 %191, i32 80
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %188) #13
  %193 = sitofp i32 %192 to float
  %194 = icmp slt i32 %192, 0
  br i1 %194, label %221, label %195

195:                                              ; preds = %187, %198
  %196 = phi i64 [ %199, %198 ], [ 0, %187 ]
  %197 = icmp eq i64 %196, 11
  br i1 %197, label %221, label %198

198:                                              ; preds = %195
  %199 = add nuw nsw i64 %196, 1
  %200 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE12weightRanges, i64 0, i64 %199, i32 0
  %201 = load float, float* %200, align 8
  %202 = fcmp ogt float %201, %193
  br i1 %202, label %203, label %195

203:                                              ; preds = %198
  %204 = and i64 %199, 4294967295
  %205 = and i64 %196, 4294967295
  %206 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE12weightRanges, i64 0, i64 %205, i32 0
  %207 = load float, float* %206, align 8
  %208 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE12weightRanges, i64 0, i64 %205, i32 1
  %209 = load float, float* %208, align 4
  %210 = getelementptr inbounds [12 x %"struct.(anonymous namespace)::MapRanges"], [12 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE12weightRanges, i64 0, i64 %204, i32 1
  %211 = load float, float* %210, align 4
  %212 = fsub float %193, %207
  %213 = fsub float %211, %209
  %214 = fmul float %212, %213
  %215 = fsub float %201, %207
  %216 = fdiv float %214, %215
  %217 = fadd float %209, %216
  %218 = fptosi float %217 to i32
  %219 = sitofp i32 %218 to float
  %220 = fadd float %219, 5.000000e-01
  br label %221

221:                                              ; preds = %195, %203, %187
  %222 = phi float [ %220, %203 ], [ 1.005000e+02, %187 ], [ 1.000500e+03, %195 ]
  %223 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223) #13
  store i32 -1431655766, i32* %7, align 4
  %224 = call i32 @FcPatternGetInteger(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i32 0, i32* nonnull %7) #13
  %225 = icmp eq i32 %224, 0
  %226 = load i32, i32* %7, align 4
  %227 = select i1 %225, i32 %226, i32 100
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223) #13
  %228 = sitofp i32 %227 to float
  %229 = icmp slt i32 %227, 50
  br i1 %229, label %256, label %230

230:                                              ; preds = %221, %233
  %231 = phi i64 [ %234, %233 ], [ 0, %221 ]
  %232 = icmp eq i64 %231, 8
  br i1 %232, label %256, label %233

233:                                              ; preds = %230
  %234 = add nuw nsw i64 %231, 1
  %235 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE11widthRanges, i64 0, i64 %234, i32 0
  %236 = load float, float* %235, align 8
  %237 = fcmp ogt float %236, %228
  br i1 %237, label %238, label %230

238:                                              ; preds = %233
  %239 = and i64 %234, 4294967295
  %240 = and i64 %231, 4294967295
  %241 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE11widthRanges, i64 0, i64 %240, i32 0
  %242 = load float, float* %241, align 8
  %243 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE11widthRanges, i64 0, i64 %240, i32 1
  %244 = load float, float* %243, align 4
  %245 = getelementptr inbounds [9 x %"struct.(anonymous namespace)::MapRanges"], [9 x %"struct.(anonymous namespace)::MapRanges"]* @_ZZN12_GLOBAL__N_126skfontstyle_from_fcpatternEP10_FcPatternE11widthRanges, i64 0, i64 %239, i32 1
  %246 = load float, float* %245, align 4
  %247 = fsub float %228, %242
  %248 = fsub float %246, %244
  %249 = fmul float %247, %248
  %250 = fsub float %236, %242
  %251 = fdiv float %249, %250
  %252 = fadd float %244, %251
  %253 = fptosi float %252 to i32
  %254 = sitofp i32 %253 to float
  %255 = fadd float %254, 5.000000e-01
  br label %256

256:                                              ; preds = %230, %221, %238
  %257 = phi float [ %255, %238 ], [ 1.500000e+00, %221 ], [ 9.500000e+00, %230 ]
  %258 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %258) #13
  store i32 -1431655766, i32* %8, align 4
  %259 = call i32 @FcPatternGetInteger(%struct._FcPattern* nonnull %141, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i32 0, i32* nonnull %8) #13
  %260 = icmp eq i32 %259, 0
  %261 = load i32, i32* %8, align 4
  %262 = select i1 %260, i32 %261, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %258) #13
  %263 = icmp eq i32 %262, 100
  %264 = zext i1 %263 to i32
  %265 = icmp eq i32 %262, 110
  %266 = select i1 %265, i32 2, i32 %264
  %267 = call float @llvm.floor.f32(float %222) #13
  %268 = fcmp olt float %267, 0x41DFFFFFE0000000
  %269 = select i1 %268, float %267, float 0x41DFFFFFE0000000
  %270 = fcmp ogt float %269, 0xC1DFFFFFE0000000
  %271 = select i1 %270, float %269, float 0xC1DFFFFFE0000000
  %272 = fptosi float %271 to i32
  %273 = call float @llvm.floor.f32(float %257) #13
  %274 = fcmp olt float %273, 0x41DFFFFFE0000000
  %275 = select i1 %274, float %273, float 0x41DFFFFFE0000000
  %276 = fcmp ogt float %275, 0xC1DFFFFFE0000000
  %277 = select i1 %276, float %275, float 0xC1DFFFFFE0000000
  %278 = fptosi float %277 to i32
  %279 = icmp slt i32 %272, 1000
  %280 = select i1 %279, i32 %272, i32 1000
  %281 = icmp sgt i32 %280, 0
  %282 = select i1 %281, i32 %280, i32 0
  %283 = icmp slt i32 %278, 9
  %284 = select i1 %283, i32 %278, i32 9
  %285 = icmp sgt i32 %284, 1
  %286 = select i1 %285, i32 %284, i32 1
  %287 = shl nsw i32 %286, 16
  %288 = add nuw nsw i32 %287, %282
  %289 = icmp ult i32 %266, 2
  %290 = select i1 %289, i32 %266, i32 2
  %291 = icmp sgt i32 %290, 0
  %292 = select i1 %291, i32 %290, i32 0
  %293 = shl nuw nsw i32 %292, 24
  %294 = add nuw nsw i32 %288, %293
  %295 = getelementptr inbounds %class.SkFontStyle, %class.SkFontStyle* %5, i64 0, i32 0
  store i32 %294, i32* %295, align 4
  br label %296

296:                                              ; preds = %185, %256
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %164) #13
  br label %297

297:                                              ; preds = %143, %152, %296, %161, %137
  %298 = phi i1 [ false, %137 ], [ false, %152 ], [ false, %143 ], [ true, %296 ], [ false, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %134) #13
  %299 = icmp eq %struct._FcConfig* %48, null
  br i1 %299, label %301, label %300

300:                                              ; preds = %297
  call void @FcConfigDestroy(%struct._FcConfig* nonnull %48) #13
  br label %301

301:                                              ; preds = %297, %300
  %302 = call i32 @FcGetVersion() #13
  %303 = icmp slt i32 %302, 21393
  br i1 %303, label %304, label %323

304:                                              ; preds = %301
  %305 = load atomic i8, i8* bitcast (i64* @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex to i8*) acquire, align 8
  %306 = icmp eq i8 %305, 0
  br i1 %306, label %307, label %316, !prof !2

307:                                              ; preds = %304
  %308 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex) #13
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %316, label %310

310:                                              ; preds = %307
  %311 = call i8* @_Znwm(i64 16) #14
  %312 = bitcast i8* %311 to i32*
  store i32 1, i32* %312, align 4
  %313 = getelementptr inbounds i8, i8* %311, i64 4
  store i8 0, i8* %313, align 1
  %314 = getelementptr inbounds i8, i8* %311, i64 8
  %315 = bitcast i8* %314 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %315, align 8
  store i8* %311, i8** bitcast (%class.SkMutex** @_ZZN12_GLOBAL__N_19f_c_mutexEvE5mutex to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN12_GLOBAL__N_19f_c_mutexEvE5mutex) #13
  br label %316

316:                                              ; preds = %310, %307, %304
  %317 = load %class.SkMutex*, %class.SkMutex** @_ZZN12_GLOBAL__N_19f_c_mutexEvE5mutex, align 8
  %318 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %317, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %319 = atomicrmw add i32* %318, i32 1 release
  %320 = icmp slt i32 %319, 0
  br i1 %320, label %321, label %323

321:                                              ; preds = %316
  %322 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %317, i64 0, i32 0
  call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %322, i32 1) #13
  br label %323

323:                                              ; preds = %321, %316, %301, %6
  %324 = phi i1 [ false, %6 ], [ %298, %301 ], [ %298, %316 ], [ %298, %321 ]
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %14) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  ret i1 %324
}

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #2

declare %struct._FcPattern* @FcPatternCreate() local_unnamed_addr #2

declare i32 @FcPatternAddString(%struct._FcPattern*, i8*, i8*) local_unnamed_addr #2

declare i32 @FcPatternAddBool(%struct._FcPattern*, i8*, i32) local_unnamed_addr #2

declare i32 @FcConfigSubstitute(%struct._FcConfig*, %struct._FcPattern*, i32) local_unnamed_addr #2

declare void @FcDefaultSubstitute(%struct._FcPattern*) local_unnamed_addr #2

declare %struct._FcFontSet* @FcFontSort(%struct._FcConfig*, %struct._FcPattern*, i32, %struct._FcCharSet**, i32*) local_unnamed_addr #2

declare void @FcPatternDestroy(%struct._FcPattern*) local_unnamed_addr #2

declare void @FcFontSetDestroy(%struct._FcFontSet*) local_unnamed_addr #2

declare void @_ZN8SkString3setEPKc(%class.SkString*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkStreamAsset* @_ZN27SkFontConfigInterfaceDirect10openStreamERKN21SkFontConfigInterface12FontIdentityE(%class.SkFontConfigInterfaceDirect* nocapture readnone, %"struct.SkFontConfigInterface::FontIdentity"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %1, i64 0, i32 2, i32 0, i32 0
  %4 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %3, align 8
  %5 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %4, i64 0, i32 2
  %6 = tail call %class.SkStreamAsset* @_ZN8SkStream12MakeFromFileEPKc(i8* %5) #13
  ret %class.SkStreamAsset* %6
}

declare %class.SkStreamAsset* @_ZN8SkStream12MakeFromFileEPKc(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #13
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN21SkFontConfigInterface12makeTypefaceERKNS_12FontIdentityE(%class.sk_sp.6* noalias sret, %class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %class.SkFontConfigInterface* %1 to %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)***
  %5 = load %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)**, %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)*** %4, align 8
  %6 = getelementptr inbounds %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)*, %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)** %5, i64 4
  %7 = load %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)*, %class.SkStreamAsset* (%class.SkFontConfigInterface*, %"struct.SkFontConfigInterface::FontIdentity"*)** %6, align 8
  %8 = tail call %class.SkStreamAsset* %7(%class.SkFontConfigInterface* %1, %"struct.SkFontConfigInterface::FontIdentity"* dereferenceable(24) %2) #13
  %9 = getelementptr inbounds %"struct.SkFontConfigInterface::FontIdentity", %"struct.SkFontConfigInterface::FontIdentity"* %2, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  tail call void @_ZN10SkTypeface14MakeFromStreamENSt3__110unique_ptrI13SkStreamAssetNS0_14default_deleteIS2_EEEEi(%class.sk_sp.6* sret %0, %class.SkStreamAsset* %8, i32 %10) #13
  ret void
}

declare void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer*, i8*, i64) local_unnamed_addr #2

declare i32 @FcPatternGetString(%struct._FcPattern*, i8*, i32, i8**) local_unnamed_addr #2

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #2

declare i32 @FcGetVersion() local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #10

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #2

declare i32 @FcPatternAddInteger(%struct._FcPattern*, i8*, i32) local_unnamed_addr #2

declare i32 @FcPatternGetInteger(%struct._FcPattern*, i8*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #12

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #2

declare void @_ZN10SkTypeface14MakeFromStreamENSt3__110unique_ptrI13SkStreamAssetNS0_14default_deleteIS2_EEEEi(%class.sk_sp.6* sret, %class.SkStreamAsset*, i32) local_unnamed_addr #2

declare void @FcConfigDestroy(%struct._FcConfig*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
