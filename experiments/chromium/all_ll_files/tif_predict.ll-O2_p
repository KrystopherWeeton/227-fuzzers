; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_predict.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_predict.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }
%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, {}*, {}*, i32 (%struct.tiff*, i16)*, {}*, i32, i32 (%struct.tiff*, i16)*, {}*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct.TIFFPredictorState = type { i32, i64, i64, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*)* }

@predictFields = internal constant [1 x %struct._TIFFField] [%struct._TIFFField { i32 317, i16 1, i16 1, i32 3, i32 0, i32 4, i32 4, i16 66, i8 0, i8 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), %struct._TIFFFieldArray* null }], align 16
@.str = private unnamed_addr constant [18 x i8] c"TIFFPredictorInit\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Merging Predictor codec-specific tags failed\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Predictor\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"  Predictor: \00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"none \00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"horizontal differencing \00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"floating point predictor \00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"%d (0x%x)\0A\00", align 1
@PredictorSetup.module = internal constant [15 x i8] c"PredictorSetup\00", align 1
@.str.8 = private unnamed_addr constant [70 x i8] c"Horizontal differencing \22Predictor\22 not supported with %d-bit samples\00", align 1
@.str.9 = private unnamed_addr constant [61 x i8] c"Floating point \22Predictor\22 not supported with %d data format\00", align 1
@.str.10 = private unnamed_addr constant [61 x i8] c"Floating point \22Predictor\22 not supported with %d-bit samples\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"\22Predictor\22 value %d not supported\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"horAcc8\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"(cc%stride)!=0\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"horAcc16\00", align 1
@.str.16 = private unnamed_addr constant [18 x i8] c"cc%(2*stride))!=0\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"horAcc32\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"cc%(4*stride))!=0\00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"PredictorDecodeTile\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"occ0%rowsize != 0\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"fpAcc\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"cc%(bps*stride))!=0\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"horDiff8\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c"(cc%(2*stride))!=0\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"horDiff32\00", align 1
@.str.26 = private unnamed_addr constant [19 x i8] c"(cc%(4*stride))!=0\00", align 1
@.str.27 = private unnamed_addr constant [47 x i8] c"Out of memory allocating %ld byte temp buffer.\00", align 1
@.str.28 = private constant [20 x i8] c"PredictorEncodeTile\00", align 16
@.str.29 = private unnamed_addr constant [17 x i8] c"(cc0%rowsize)!=0\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"fpDiff\00", align 1
@.str.31 = private unnamed_addr constant [21 x i8] c"(cc%(bps*stride))!=0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @TIFFPredictorInit(%struct.tiff*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.TIFFPredictorState**
  %4 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %3, align 8
  %5 = tail call i32 @_TIFFMergeFields(%struct.tiff* %0, %struct._TIFFField* getelementptr inbounds ([1 x %struct._TIFFField], [1 x %struct._TIFFField]* @predictFields, i64 0, i64 0), i32 1) #6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %9 = load i8*, i8** %8, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %9, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %42

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %13 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 11
  %16 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %15 to i64*
  store i64 %14, i64* %16, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @PredictorVGetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %12, align 8
  %17 = getelementptr inbounds %struct.TIFFTagMethods, %struct.TIFFTagMethods* %11, i64 0, i32 0
  %18 = bitcast %struct.TIFFTagMethods* %11 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 12
  %21 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %20 to i64*
  store i64 %19, i64* %21, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @PredictorVSetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %17, align 8
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 2
  %23 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 13
  %26 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %25 to i64*
  store i64 %24, i64* %26, align 8
  store void (%struct.tiff*, %struct._IO_FILE*, i64)* @PredictorPrintDir, void (%struct.tiff*, %struct._IO_FILE*, i64)** %22, align 8
  %27 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 25
  %28 = bitcast {}** %27 to i32 (%struct.tiff*)**
  %29 = bitcast {}** %27 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 14
  %32 = bitcast i32 (%struct.tiff*)** %31 to i64*
  store i64 %30, i64* %32, align 8
  store i32 (%struct.tiff*)* @PredictorSetupDecode, i32 (%struct.tiff*)** %28, align 8
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  %34 = bitcast {}** %33 to i32 (%struct.tiff*)**
  %35 = bitcast {}** %33 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 15
  %38 = bitcast i32 (%struct.tiff*)** %37 to i64*
  store i64 %36, i64* %38, align 8
  store i32 (%struct.tiff*)* @PredictorSetupEncode, i32 (%struct.tiff*)** %34, align 8
  %39 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 0
  store i32 1, i32* %39, align 8
  %40 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 6
  store i32 (%struct.tiff*, i8*, i64)* null, i32 (%struct.tiff*, i8*, i64)** %40, align 8
  %41 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 10
  store i32 (%struct.tiff*, i8*, i64)* null, i32 (%struct.tiff*, i8*, i64)** %41, align 8
  br label %42

42:                                               ; preds = %10, %7
  %43 = phi i32 [ 1, %10 ], [ 0, %7 ]
  ret i32 %43
}

declare i32 @_TIFFMergeFields(%struct.tiff*, %struct._TIFFField*, i32) local_unnamed_addr #1

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorVGetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = icmp eq i32 %1, 317
  br i1 %7, label %8, label %29

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = trunc i32 %10 to i16
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %13, 41
  br i1 %14, label %15, label %21

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = add nuw nsw i32 %13, 8
  store i32 %20, i32* %12, align 8
  br label %25

21:                                               ; preds = %8
  %22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8, i8* %23, i64 8
  store i8* %24, i8** %22, align 8
  br label %25

25:                                               ; preds = %21, %15
  %26 = phi i8* [ %19, %15 ], [ %23, %21 ]
  %27 = bitcast i8* %26 to i16**
  %28 = load i16*, i16** %27, align 8
  store i16 %11, i16* %28, align 2
  br label %33

29:                                               ; preds = %3
  %30 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 11
  %31 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %30, align 8
  %32 = tail call i32 %31(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #6
  br label %33

33:                                               ; preds = %25, %29
  %34 = phi i32 [ 1, %25 ], [ %32, %29 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorVSetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = icmp eq i32 %1, 317
  br i1 %7, label %8, label %34

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %10, 41
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr i8, i8* %14, i64 %15
  %17 = add nuw nsw i32 %10, 8
  store i32 %17, i32* %9, align 8
  br label %22

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr i8, i8* %20, i64 8
  store i8* %21, i8** %19, align 8
  br label %22

22:                                               ; preds = %18, %12
  %23 = phi i8* [ %16, %12 ], [ %20, %18 ]
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = and i32 %25, 65535
  %27 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 0
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %29 = load i64, i64* %28, align 8
  %30 = or i64 %29, 4
  store i64 %30, i64* %28, align 8
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 8
  store i32 %33, i32* %31, align 8
  br label %38

34:                                               ; preds = %3
  %35 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 12
  %36 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %35, align 8
  %37 = tail call i32 %36(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #6
  br label %38

38:                                               ; preds = %22, %34
  %39 = phi i32 [ 1, %22 ], [ %37, %34 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorPrintDir(%struct.tiff*, %struct._IO_FILE*, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 0, i64 2
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %3
  %12 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %1)
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %21 [
    i32 1, label %15
    i32 2, label %17
    i32 3, label %19
  ]

15:                                               ; preds = %11
  %16 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %1)
  br label %21

17:                                               ; preds = %11
  %18 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %1)
  br label %21

19:                                               ; preds = %11
  %20 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %1)
  br label %21

21:                                               ; preds = %11, %19, %17, %15
  %22 = load i32, i32* %13, align 8
  %23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 %22, i32 %22)
  br label %24

24:                                               ; preds = %3, %21
  %25 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 13
  %26 = load void (%struct.tiff*, %struct._IO_FILE*, i64)*, void (%struct.tiff*, %struct._IO_FILE*, i64)** %25, align 8
  %27 = icmp eq void (%struct.tiff*, %struct._IO_FILE*, i64)* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void %26(%struct.tiff* %0, %struct._IO_FILE* %1, i64 %2) #6
  br label %29

29:                                               ; preds = %24, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorSetupDecode(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.TIFFPredictorState**
  %4 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %3, align 8
  %5 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 14
  %6 = load i32 (%struct.tiff*)*, i32 (%struct.tiff*)** %5, align 8
  %7 = tail call i32 %6(%struct.tiff* %0) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %78, label %9

9:                                                ; preds = %1
  %10 = tail call fastcc i32 @PredictorSetup(%struct.tiff* %0)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %78, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %78 [
    i32 2, label %15
    i32 3, label %54
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %17 = load i16, i16* %16, align 4
  switch i16 %17, label %23 [
    i16 8, label %20
    i16 16, label %18
    i16 32, label %19
  ]

18:                                               ; preds = %15
  br label %20

19:                                               ; preds = %15
  br label %20

20:                                               ; preds = %15, %18, %19
  %21 = phi i32 (%struct.tiff*, i8*, i64)* [ @horAcc32, %19 ], [ @horAcc16, %18 ], [ @horAcc8, %15 ]
  %22 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 10
  store i32 (%struct.tiff*, i8*, i64)* %21, i32 (%struct.tiff*, i8*, i64)** %22, align 8
  br label %23

23:                                               ; preds = %20, %15
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %25 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %24, align 8
  %26 = icmp eq i32 (%struct.tiff*, i8*, i64, i16)* %25, @PredictorDecodeRow
  br i1 %26, label %39, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 7
  store i32 (%struct.tiff*, i8*, i64, i16)* %25, i32 (%struct.tiff*, i8*, i64, i16)** %28, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %24, align 8
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %30 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 8
  %33 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %32 to i64*
  store i64 %31, i64* %33, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %29, align 8
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %35 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 9
  %38 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %37 to i64*
  store i64 %36, i64* %38, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %34, align 8
  br label %39

39:                                               ; preds = %23, %27
  %40 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = trunc i32 %41 to i8
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %78

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 10
  %46 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %47 = icmp eq i32 (%struct.tiff*, i8*, i64)* %46, @horAcc16
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  store i32 (%struct.tiff*, i8*, i64)* @swabHorAcc16, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %49 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %49, align 8
  br label %78

50:                                               ; preds = %44
  %51 = icmp eq i32 (%struct.tiff*, i8*, i64)* %46, @horAcc32
  br i1 %51, label %52, label %78

52:                                               ; preds = %50
  store i32 (%struct.tiff*, i8*, i64)* @swabHorAcc32, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %53 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %53, align 8
  br label %78

54:                                               ; preds = %12
  %55 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 10
  store i32 (%struct.tiff*, i8*, i64)* @fpAcc, i32 (%struct.tiff*, i8*, i64)** %55, align 8
  %56 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %57 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %56, align 8
  %58 = icmp eq i32 (%struct.tiff*, i8*, i64, i16)* %57, @PredictorDecodeRow
  br i1 %58, label %71, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 7
  store i32 (%struct.tiff*, i8*, i64, i16)* %57, i32 (%struct.tiff*, i8*, i64, i16)** %60, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %56, align 8
  %61 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %62 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 8
  %65 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %64 to i64*
  store i64 %63, i64* %65, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %61, align 8
  %66 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %67 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 9
  %70 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %69 to i64*
  store i64 %68, i64* %70, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorDecodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %66, align 8
  br label %71

71:                                               ; preds = %54, %59
  %72 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = trunc i32 %73 to i8
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %77, align 8
  br label %78

78:                                               ; preds = %48, %52, %50, %39, %71, %76, %12, %1, %9
  %79 = phi i32 [ 0, %9 ], [ 0, %1 ], [ 1, %12 ], [ 1, %76 ], [ 1, %71 ], [ 1, %39 ], [ 1, %50 ], [ 1, %52 ], [ 1, %48 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorSetupEncode(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.TIFFPredictorState**
  %4 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %3, align 8
  %5 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 15
  %6 = load i32 (%struct.tiff*)*, i32 (%struct.tiff*)** %5, align 8
  %7 = tail call i32 %6(%struct.tiff* %0) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %71, label %9

9:                                                ; preds = %1
  %10 = tail call fastcc i32 @PredictorSetup(%struct.tiff* %0)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %71, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %71 [
    i32 2, label %15
    i32 3, label %54
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %17 = load i16, i16* %16, align 4
  switch i16 %17, label %23 [
    i16 8, label %20
    i16 16, label %18
    i16 32, label %19
  ]

18:                                               ; preds = %15
  br label %20

19:                                               ; preds = %15
  br label %20

20:                                               ; preds = %15, %18, %19
  %21 = phi i32 (%struct.tiff*, i8*, i64)* [ @horDiff32, %19 ], [ @horDiff16, %18 ], [ @horDiff8, %15 ]
  %22 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 6
  store i32 (%struct.tiff*, i8*, i64)* %21, i32 (%struct.tiff*, i8*, i64)** %22, align 8
  br label %23

23:                                               ; preds = %20, %15
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  %25 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %24, align 8
  %26 = icmp eq i32 (%struct.tiff*, i8*, i64, i16)* %25, @PredictorEncodeRow
  br i1 %26, label %39, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 3
  store i32 (%struct.tiff*, i8*, i64, i16)* %25, i32 (%struct.tiff*, i8*, i64, i16)** %28, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %24, align 8
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 34
  %30 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 4
  %33 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %32 to i64*
  store i64 %31, i64* %33, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %29, align 8
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 36
  %35 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 5
  %38 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %37 to i64*
  store i64 %36, i64* %38, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %34, align 8
  br label %39

39:                                               ; preds = %23, %27
  %40 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = trunc i32 %41 to i8
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %71

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 6
  %46 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %47 = icmp eq i32 (%struct.tiff*, i8*, i64)* %46, @horDiff16
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  store i32 (%struct.tiff*, i8*, i64)* @swabHorDiff16, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %49 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %49, align 8
  br label %71

50:                                               ; preds = %44
  %51 = icmp eq i32 (%struct.tiff*, i8*, i64)* %46, @horDiff32
  br i1 %51, label %52, label %71

52:                                               ; preds = %50
  store i32 (%struct.tiff*, i8*, i64)* @swabHorDiff32, i32 (%struct.tiff*, i8*, i64)** %45, align 8
  %53 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %53, align 8
  br label %71

54:                                               ; preds = %12
  %55 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 6
  store i32 (%struct.tiff*, i8*, i64)* @fpDiff, i32 (%struct.tiff*, i8*, i64)** %55, align 8
  %56 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 32
  %57 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %56, align 8
  %58 = icmp eq i32 (%struct.tiff*, i8*, i64, i16)* %57, @PredictorEncodeRow
  br i1 %58, label %71, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 3
  store i32 (%struct.tiff*, i8*, i64, i16)* %57, i32 (%struct.tiff*, i8*, i64, i16)** %60, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %56, align 8
  %61 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 34
  %62 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 4
  %65 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %64 to i64*
  store i64 %63, i64* %65, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %61, align 8
  %66 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 36
  %67 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 5
  %70 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %69 to i64*
  store i64 %68, i64* %70, align 8
  store i32 (%struct.tiff*, i8*, i64, i16)* @PredictorEncodeTile, i32 (%struct.tiff*, i8*, i64, i16)** %66, align 8
  br label %71

71:                                               ; preds = %48, %52, %50, %39, %59, %54, %12, %1, %9
  %72 = phi i32 [ 0, %9 ], [ 0, %1 ], [ 1, %12 ], [ 1, %54 ], [ 1, %59 ], [ 1, %39 ], [ 1, %50 ], [ 1, %52 ], [ 1, %48 ]
  ret i32 %72
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @TIFFPredictorCleanup(%struct.tiff* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.TIFFPredictorState**
  %4 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %3, align 8
  %5 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 11
  %6 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %10 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %9 to i64*
  store i64 %7, i64* %10, align 8
  %11 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 12
  %12 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.TIFFTagMethods* %8 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 13
  %16 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 2
  %19 = bitcast void (%struct.tiff*, %struct._IO_FILE*, i64)** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 14
  %21 = bitcast i32 (%struct.tiff*)** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 25
  %24 = bitcast {}** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 15
  %26 = bitcast i32 (%struct.tiff*)** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  %29 = bitcast {}** %28 to i64*
  store i64 %27, i64* %29, align 8
  ret i32 1
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @PredictorSetup(%struct.tiff*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.TIFFPredictorState**
  %4 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %3, align 8
  %5 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %33 [
    i32 1, label %60
    i32 2, label %7
    i32 3, label %14
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %9 = load i16, i16* %8, align 4
  switch i16 %9, label %10 [
    i16 8, label %36
    i16 16, label %36
    i16 32, label %36
  ]

10:                                               ; preds = %7
  %11 = zext i16 %9 to i32
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %13 = load i8*, i8** %12, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %13, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PredictorSetup.module, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 %11) #6
  br label %60

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 9
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, 3
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = zext i16 %16 to i32
  %20 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %21 = load i8*, i8** %20, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PredictorSetup.module, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9, i64 0, i64 0), i32 %19) #6
  br label %60

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %24 = load i16, i16* %23, align 4
  %25 = add i16 %24, -16
  %26 = lshr i16 %25, 3
  %27 = shl i16 %25, 13
  %28 = or i16 %26, %27
  switch i16 %28, label %29 [
    i16 0, label %36
    i16 1, label %36
    i16 2, label %36
    i16 6, label %36
  ]

29:                                               ; preds = %22
  %30 = zext i16 %24 to i32
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %32 = load i8*, i8** %31, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %32, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PredictorSetup.module, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.10, i64 0, i64 0), i32 %30) #6
  br label %60

33:                                               ; preds = %1
  %34 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %35 = load i8*, i8** %34, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PredictorSetup.module, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0), i32 %6) #6
  br label %60

36:                                               ; preds = %22, %22, %22, %22, %7, %7, %7
  %37 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 1
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i64
  br label %44

44:                                               ; preds = %36, %40
  %45 = phi i64 [ %43, %40 ], [ 1, %36 ]
  %46 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 1
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = and i32 %48, 1024
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #6
  br label %55

53:                                               ; preds = %44
  %54 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #6
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %54, %53 ], [ %52, %51 ]
  %57 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %4, i64 0, i32 2
  store i64 %56, i64* %57, align 8
  %58 = icmp ne i64 %56, 0
  %59 = zext i1 %58 to i32
  br label %60

60:                                               ; preds = %55, %1, %33, %29, %18, %10
  %61 = phi i32 [ 0, %33 ], [ 0, %18 ], [ 0, %29 ], [ 0, %10 ], [ %6, %1 ], [ %59, %55 ]
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @horAcc8(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = srem i64 %2, %8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %13 = load i8*, i8** %12, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %276

14:                                               ; preds = %3
  %15 = icmp slt i64 %8, %2
  br i1 %15, label %16, label %276

16:                                               ; preds = %14
  switch i64 %8, label %149 [
    i64 3, label %17
    i64 4, label %52
  ]

17:                                               ; preds = %16
  %18 = add nsw i64 %2, -3
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %20, label %276

20:                                               ; preds = %17
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %1, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = load i8, i8* %1, align 1
  %28 = zext i8 %27 to i32
  br label %29

29:                                               ; preds = %20, %29
  %30 = phi i8* [ %35, %29 ], [ %1, %20 ]
  %31 = phi i64 [ %50, %29 ], [ %18, %20 ]
  %32 = phi i32 [ %48, %29 ], [ %23, %20 ]
  %33 = phi i32 [ %43, %29 ], [ %26, %20 ]
  %34 = phi i32 [ %38, %29 ], [ %28, %20 ]
  %35 = getelementptr inbounds i8, i8* %30, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add i32 %34, %37
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  %40 = getelementptr inbounds i8, i8* %30, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add i32 %33, %42
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = getelementptr inbounds i8, i8* %30, i64 5
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add i32 %32, %47
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %45, align 1
  %50 = add nsw i64 %31, -3
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %29, label %276

52:                                               ; preds = %16
  %53 = add nsw i64 %2, -4
  %54 = icmp sgt i64 %53, 0
  br i1 %54, label %55, label %276

55:                                               ; preds = %52
  %56 = getelementptr inbounds i8, i8* %1, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %1, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %1, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = load i8, i8* %1, align 1
  %66 = zext i8 %65 to i32
  %67 = add i64 %2, -5
  %68 = and i64 %67, 4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %92

70:                                               ; preds = %55
  %71 = getelementptr inbounds i8, i8* %1, i64 4
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = add nuw nsw i32 %66, %73
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %71, align 1
  %76 = getelementptr inbounds i8, i8* %1, i64 5
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nuw nsw i32 %64, %78
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %76, align 1
  %81 = getelementptr inbounds i8, i8* %1, i64 6
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nuw nsw i32 %61, %83
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %81, align 1
  %86 = getelementptr inbounds i8, i8* %1, i64 7
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add nuw nsw i32 %58, %88
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %86, align 1
  %91 = add nsw i64 %2, -8
  br label %92

92:                                               ; preds = %70, %55
  %93 = phi i8* [ %1, %55 ], [ %71, %70 ]
  %94 = phi i64 [ %53, %55 ], [ %91, %70 ]
  %95 = phi i32 [ %58, %55 ], [ %89, %70 ]
  %96 = phi i32 [ %61, %55 ], [ %84, %70 ]
  %97 = phi i32 [ %64, %55 ], [ %79, %70 ]
  %98 = phi i32 [ %66, %55 ], [ %74, %70 ]
  %99 = icmp ult i64 %67, 4
  br i1 %99, label %276, label %100

100:                                              ; preds = %92, %100
  %101 = phi i8* [ %127, %100 ], [ %93, %92 ]
  %102 = phi i64 [ %147, %100 ], [ %94, %92 ]
  %103 = phi i32 [ %145, %100 ], [ %95, %92 ]
  %104 = phi i32 [ %140, %100 ], [ %96, %92 ]
  %105 = phi i32 [ %135, %100 ], [ %97, %92 ]
  %106 = phi i32 [ %130, %100 ], [ %98, %92 ]
  %107 = getelementptr inbounds i8, i8* %101, i64 4
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = add i32 %106, %109
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %107, align 1
  %112 = getelementptr inbounds i8, i8* %101, i64 5
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add i32 %105, %114
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %112, align 1
  %117 = getelementptr inbounds i8, i8* %101, i64 6
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add i32 %104, %119
  %121 = trunc i32 %120 to i8
  store i8 %121, i8* %117, align 1
  %122 = getelementptr inbounds i8, i8* %101, i64 7
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add i32 %103, %124
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %122, align 1
  %127 = getelementptr inbounds i8, i8* %101, i64 8
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = add i32 %110, %129
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %127, align 1
  %132 = getelementptr inbounds i8, i8* %101, i64 9
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add i32 %115, %134
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %132, align 1
  %137 = getelementptr inbounds i8, i8* %101, i64 10
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = add i32 %120, %139
  %141 = trunc i32 %140 to i8
  store i8 %141, i8* %137, align 1
  %142 = getelementptr inbounds i8, i8* %101, i64 11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add i32 %125, %144
  %146 = trunc i32 %145 to i8
  store i8 %146, i8* %142, align 1
  %147 = add nsw i64 %102, -8
  %148 = icmp sgt i64 %147, 0
  br i1 %148, label %100, label %276

149:                                              ; preds = %16
  %150 = sub nsw i64 %2, %8
  %151 = add nsw i64 %8, -4
  %152 = icmp sgt i64 %151, 0
  %153 = add i64 %8, -4
  %154 = add i64 %8, -36
  %155 = lshr i64 %154, 5
  %156 = add nuw nsw i64 %155, 1
  %157 = icmp ult i64 %153, 32
  %158 = and i64 %153, -32
  %159 = sub i64 %151, %158
  %160 = and i64 %156, 1
  %161 = icmp eq i64 %155, 0
  %162 = sub nuw nsw i64 %156, %160
  %163 = icmp eq i64 %160, 0
  %164 = icmp eq i64 %153, %158
  br label %165

165:                                              ; preds = %272, %149
  %166 = phi i64 [ %150, %149 ], [ %274, %272 ]
  %167 = phi i8* [ %1, %149 ], [ %273, %272 ]
  switch i64 %8, label %168 [
    i64 4, label %244
    i64 3, label %251
    i64 2, label %258
    i64 1, label %265
    i64 0, label %272
  ]

168:                                              ; preds = %165
  br i1 %152, label %169, label %244

169:                                              ; preds = %168
  br i1 %157, label %231, label %170

170:                                              ; preds = %169
  %171 = getelementptr i8, i8* %167, i64 %158
  br i1 %161, label %211, label %172

172:                                              ; preds = %170, %172
  %173 = phi i64 [ %208, %172 ], [ 0, %170 ]
  %174 = phi i64 [ %209, %172 ], [ %162, %170 ]
  %175 = getelementptr i8, i8* %167, i64 %173
  %176 = getelementptr inbounds i8, i8* %175, i64 %8
  %177 = bitcast i8* %176 to <16 x i8>*
  %178 = load <16 x i8>, <16 x i8>* %177, align 1
  %179 = getelementptr inbounds i8, i8* %176, i64 16
  %180 = bitcast i8* %179 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 1
  %182 = bitcast i8* %175 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1
  %184 = getelementptr i8, i8* %175, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = add <16 x i8> %183, %178
  %188 = add <16 x i8> %186, %181
  %189 = bitcast i8* %176 to <16 x i8>*
  store <16 x i8> %187, <16 x i8>* %189, align 1
  %190 = bitcast i8* %179 to <16 x i8>*
  store <16 x i8> %188, <16 x i8>* %190, align 1
  %191 = or i64 %173, 32
  %192 = getelementptr i8, i8* %167, i64 %191
  %193 = getelementptr inbounds i8, i8* %192, i64 %8
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1
  %196 = getelementptr inbounds i8, i8* %193, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = bitcast i8* %192 to <16 x i8>*
  %200 = load <16 x i8>, <16 x i8>* %199, align 1
  %201 = getelementptr i8, i8* %192, i64 16
  %202 = bitcast i8* %201 to <16 x i8>*
  %203 = load <16 x i8>, <16 x i8>* %202, align 1
  %204 = add <16 x i8> %200, %195
  %205 = add <16 x i8> %203, %198
  %206 = bitcast i8* %193 to <16 x i8>*
  store <16 x i8> %204, <16 x i8>* %206, align 1
  %207 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %207, align 1
  %208 = add i64 %173, 64
  %209 = add i64 %174, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %172, !llvm.loop !2

211:                                              ; preds = %172, %170
  %212 = phi i64 [ 0, %170 ], [ %208, %172 ]
  br i1 %163, label %230, label %213

213:                                              ; preds = %211
  %214 = getelementptr i8, i8* %167, i64 %212
  %215 = getelementptr inbounds i8, i8* %214, i64 %8
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1
  %218 = getelementptr inbounds i8, i8* %215, i64 16
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = bitcast i8* %214 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = getelementptr i8, i8* %214, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = add <16 x i8> %222, %217
  %227 = add <16 x i8> %225, %220
  %228 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %228, align 1
  %229 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %229, align 1
  br label %230

230:                                              ; preds = %211, %213
  br i1 %164, label %244, label %231

231:                                              ; preds = %230, %169
  %232 = phi i64 [ %151, %169 ], [ %159, %230 ]
  %233 = phi i8* [ %167, %169 ], [ %171, %230 ]
  br label %234

234:                                              ; preds = %231, %234
  %235 = phi i64 [ %242, %234 ], [ %232, %231 ]
  %236 = phi i8* [ %241, %234 ], [ %233, %231 ]
  %237 = getelementptr inbounds i8, i8* %236, i64 %8
  %238 = load i8, i8* %237, align 1
  %239 = load i8, i8* %236, align 1
  %240 = add i8 %239, %238
  store i8 %240, i8* %237, align 1
  %241 = getelementptr inbounds i8, i8* %236, i64 1
  %242 = add nsw i64 %235, -1
  %243 = icmp sgt i64 %242, 0
  br i1 %243, label %234, label %244, !llvm.loop !4

244:                                              ; preds = %234, %230, %168, %165
  %245 = phi i8* [ %167, %165 ], [ %167, %168 ], [ %171, %230 ], [ %241, %234 ]
  %246 = getelementptr inbounds i8, i8* %245, i64 %8
  %247 = load i8, i8* %246, align 1
  %248 = load i8, i8* %245, align 1
  %249 = add i8 %248, %247
  store i8 %249, i8* %246, align 1
  %250 = getelementptr inbounds i8, i8* %245, i64 1
  br label %251

251:                                              ; preds = %165, %244
  %252 = phi i8* [ %250, %244 ], [ %167, %165 ]
  %253 = getelementptr inbounds i8, i8* %252, i64 %8
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %252, align 1
  %256 = add i8 %255, %254
  store i8 %256, i8* %253, align 1
  %257 = getelementptr inbounds i8, i8* %252, i64 1
  br label %258

258:                                              ; preds = %165, %251
  %259 = phi i8* [ %257, %251 ], [ %167, %165 ]
  %260 = getelementptr inbounds i8, i8* %259, i64 %8
  %261 = load i8, i8* %260, align 1
  %262 = load i8, i8* %259, align 1
  %263 = add i8 %262, %261
  store i8 %263, i8* %260, align 1
  %264 = getelementptr inbounds i8, i8* %259, i64 1
  br label %265

265:                                              ; preds = %165, %258
  %266 = phi i8* [ %264, %258 ], [ %167, %165 ]
  %267 = getelementptr inbounds i8, i8* %266, i64 %8
  %268 = load i8, i8* %267, align 1
  %269 = load i8, i8* %266, align 1
  %270 = add i8 %269, %268
  store i8 %270, i8* %267, align 1
  %271 = getelementptr inbounds i8, i8* %266, i64 1
  br label %272

272:                                              ; preds = %265, %165
  %273 = phi i8* [ %271, %265 ], [ %167, %165 ]
  %274 = sub nsw i64 %166, %8
  %275 = icmp sgt i64 %274, 0
  br i1 %275, label %165, label %276

276:                                              ; preds = %92, %100, %29, %272, %52, %17, %14, %11
  %277 = phi i32 [ 0, %11 ], [ 1, %14 ], [ 1, %17 ], [ 1, %52 ], [ 1, %272 ], [ 1, %29 ], [ 1, %100 ], [ 1, %92 ]
  ret i32 %277
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @horAcc16(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8* %1 to i16*
  %10 = sdiv i64 %2, 2
  %11 = shl nsw i64 %8, 1
  %12 = srem i64 %2, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.16, i64 0, i64 0)) #6
  br label %146

17:                                               ; preds = %3
  %18 = icmp sgt i64 %10, %8
  br i1 %18, label %19, label %146

19:                                               ; preds = %17
  %20 = sub nsw i64 %10, %8
  %21 = add nsw i64 %8, -4
  %22 = icmp sgt i64 %21, 0
  %23 = add i64 %8, -4
  %24 = add i64 %8, -20
  %25 = lshr i64 %24, 4
  %26 = add nuw nsw i64 %25, 1
  %27 = icmp ult i64 %23, 16
  %28 = and i64 %23, -16
  %29 = sub i64 %21, %28
  %30 = and i64 %26, 1
  %31 = icmp eq i64 %25, 0
  %32 = sub nuw nsw i64 %26, %30
  %33 = icmp eq i64 %30, 0
  %34 = icmp eq i64 %23, %28
  br label %35

35:                                               ; preds = %142, %19
  %36 = phi i16* [ %9, %19 ], [ %143, %142 ]
  %37 = phi i64 [ %20, %19 ], [ %144, %142 ]
  switch i64 %8, label %38 [
    i64 4, label %114
    i64 3, label %121
    i64 2, label %128
    i64 1, label %135
    i64 0, label %142
  ]

38:                                               ; preds = %35
  br i1 %22, label %39, label %114

39:                                               ; preds = %38
  br i1 %27, label %101, label %40

40:                                               ; preds = %39
  %41 = getelementptr i16, i16* %36, i64 %28
  br i1 %31, label %81, label %42

42:                                               ; preds = %40, %42
  %43 = phi i64 [ %78, %42 ], [ 0, %40 ]
  %44 = phi i64 [ %79, %42 ], [ %32, %40 ]
  %45 = getelementptr i16, i16* %36, i64 %43
  %46 = getelementptr inbounds i16, i16* %45, i64 %8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = getelementptr inbounds i16, i16* %46, i64 8
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2
  %52 = bitcast i16* %45 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = getelementptr i16, i16* %45, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2
  %57 = add <8 x i16> %53, %48
  %58 = add <8 x i16> %56, %51
  %59 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %59, align 2
  %60 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %60, align 2
  %61 = or i64 %43, 16
  %62 = getelementptr i16, i16* %36, i64 %61
  %63 = getelementptr inbounds i16, i16* %62, i64 %8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = getelementptr inbounds i16, i16* %63, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = bitcast i16* %62 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = getelementptr i16, i16* %62, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = add <8 x i16> %70, %65
  %75 = add <8 x i16> %73, %68
  %76 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2
  %77 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 2
  %78 = add i64 %43, 32
  %79 = add i64 %44, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %42, !llvm.loop !6

81:                                               ; preds = %42, %40
  %82 = phi i64 [ 0, %40 ], [ %78, %42 ]
  br i1 %33, label %100, label %83

83:                                               ; preds = %81
  %84 = getelementptr i16, i16* %36, i64 %82
  %85 = getelementptr inbounds i16, i16* %84, i64 %8
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = bitcast i16* %84 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2
  %93 = getelementptr i16, i16* %84, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = add <8 x i16> %92, %87
  %97 = add <8 x i16> %95, %90
  %98 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 2
  %99 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %99, align 2
  br label %100

100:                                              ; preds = %81, %83
  br i1 %34, label %114, label %101

101:                                              ; preds = %100, %39
  %102 = phi i64 [ %21, %39 ], [ %29, %100 ]
  %103 = phi i16* [ %36, %39 ], [ %41, %100 ]
  br label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %112, %104 ], [ %102, %101 ]
  %106 = phi i16* [ %111, %104 ], [ %103, %101 ]
  %107 = getelementptr inbounds i16, i16* %106, i64 %8
  %108 = load i16, i16* %107, align 2
  %109 = load i16, i16* %106, align 2
  %110 = add i16 %109, %108
  store i16 %110, i16* %107, align 2
  %111 = getelementptr inbounds i16, i16* %106, i64 1
  %112 = add nsw i64 %105, -1
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %104, label %114, !llvm.loop !7

114:                                              ; preds = %104, %100, %38, %35
  %115 = phi i16* [ %36, %35 ], [ %36, %38 ], [ %41, %100 ], [ %111, %104 ]
  %116 = getelementptr inbounds i16, i16* %115, i64 %8
  %117 = load i16, i16* %116, align 2
  %118 = load i16, i16* %115, align 2
  %119 = add i16 %118, %117
  store i16 %119, i16* %116, align 2
  %120 = getelementptr inbounds i16, i16* %115, i64 1
  br label %121

121:                                              ; preds = %35, %114
  %122 = phi i16* [ %120, %114 ], [ %36, %35 ]
  %123 = getelementptr inbounds i16, i16* %122, i64 %8
  %124 = load i16, i16* %123, align 2
  %125 = load i16, i16* %122, align 2
  %126 = add i16 %125, %124
  store i16 %126, i16* %123, align 2
  %127 = getelementptr inbounds i16, i16* %122, i64 1
  br label %128

128:                                              ; preds = %35, %121
  %129 = phi i16* [ %127, %121 ], [ %36, %35 ]
  %130 = getelementptr inbounds i16, i16* %129, i64 %8
  %131 = load i16, i16* %130, align 2
  %132 = load i16, i16* %129, align 2
  %133 = add i16 %132, %131
  store i16 %133, i16* %130, align 2
  %134 = getelementptr inbounds i16, i16* %129, i64 1
  br label %135

135:                                              ; preds = %35, %128
  %136 = phi i16* [ %134, %128 ], [ %36, %35 ]
  %137 = getelementptr inbounds i16, i16* %136, i64 %8
  %138 = load i16, i16* %137, align 2
  %139 = load i16, i16* %136, align 2
  %140 = add i16 %139, %138
  store i16 %140, i16* %137, align 2
  %141 = getelementptr inbounds i16, i16* %136, i64 1
  br label %142

142:                                              ; preds = %135, %35
  %143 = phi i16* [ %141, %135 ], [ %36, %35 ]
  %144 = sub nsw i64 %37, %8
  %145 = icmp sgt i64 %144, 0
  br i1 %145, label %35, label %146

146:                                              ; preds = %142, %17, %14
  %147 = phi i32 [ 0, %14 ], [ 1, %17 ], [ 1, %142 ]
  ret i32 %147
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @horAcc32(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = sdiv i64 %2, 4
  %11 = shl nsw i64 %8, 2
  %12 = srem i64 %2, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0)) #6
  br label %146

17:                                               ; preds = %3
  %18 = icmp sgt i64 %10, %8
  br i1 %18, label %19, label %146

19:                                               ; preds = %17
  %20 = sub nsw i64 %10, %8
  %21 = add nsw i64 %8, -4
  %22 = icmp sgt i64 %21, 0
  %23 = add i64 %8, -4
  %24 = add i64 %8, -12
  %25 = lshr i64 %24, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = icmp ult i64 %23, 8
  %28 = and i64 %23, -8
  %29 = sub i64 %21, %28
  %30 = and i64 %26, 1
  %31 = icmp eq i64 %25, 0
  %32 = sub nuw nsw i64 %26, %30
  %33 = icmp eq i64 %30, 0
  %34 = icmp eq i64 %23, %28
  br label %35

35:                                               ; preds = %142, %19
  %36 = phi i32* [ %9, %19 ], [ %143, %142 ]
  %37 = phi i64 [ %20, %19 ], [ %144, %142 ]
  switch i64 %8, label %38 [
    i64 4, label %114
    i64 3, label %121
    i64 2, label %128
    i64 1, label %135
    i64 0, label %142
  ]

38:                                               ; preds = %35
  br i1 %22, label %39, label %114

39:                                               ; preds = %38
  br i1 %27, label %101, label %40

40:                                               ; preds = %39
  %41 = getelementptr i32, i32* %36, i64 %28
  br i1 %31, label %81, label %42

42:                                               ; preds = %40, %42
  %43 = phi i64 [ %78, %42 ], [ 0, %40 ]
  %44 = phi i64 [ %79, %42 ], [ %32, %40 ]
  %45 = getelementptr i32, i32* %36, i64 %43
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = getelementptr inbounds i32, i32* %45, i64 %8
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = add <4 x i32> %53, %47
  %58 = add <4 x i32> %56, %50
  %59 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %59, align 4
  %60 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %60, align 4
  %61 = or i64 %43, 8
  %62 = getelementptr i32, i32* %36, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = getelementptr i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = getelementptr inbounds i32, i32* %62, i64 %8
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = getelementptr inbounds i32, i32* %68, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = add <4 x i32> %70, %64
  %75 = add <4 x i32> %73, %67
  %76 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %76, align 4
  %77 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %77, align 4
  %78 = add i64 %43, 16
  %79 = add i64 %44, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %42, !llvm.loop !8

81:                                               ; preds = %42, %40
  %82 = phi i64 [ 0, %40 ], [ %78, %42 ]
  br i1 %33, label %100, label %83

83:                                               ; preds = %81
  %84 = getelementptr i32, i32* %36, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = getelementptr inbounds i32, i32* %84, i64 %8
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = getelementptr inbounds i32, i32* %90, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = add <4 x i32> %92, %86
  %97 = add <4 x i32> %95, %89
  %98 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %98, align 4
  %99 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %99, align 4
  br label %100

100:                                              ; preds = %81, %83
  br i1 %34, label %114, label %101

101:                                              ; preds = %100, %39
  %102 = phi i64 [ %21, %39 ], [ %29, %100 ]
  %103 = phi i32* [ %36, %39 ], [ %41, %100 ]
  br label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %112, %104 ], [ %102, %101 ]
  %106 = phi i32* [ %111, %104 ], [ %103, %101 ]
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds i32, i32* %106, i64 %8
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, %107
  store i32 %110, i32* %108, align 4
  %111 = getelementptr inbounds i32, i32* %106, i64 1
  %112 = add nsw i64 %105, -1
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %104, label %114, !llvm.loop !9

114:                                              ; preds = %104, %100, %38, %35
  %115 = phi i32* [ %36, %35 ], [ %36, %38 ], [ %41, %100 ], [ %111, %104 ]
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %115, i64 %8
  %118 = load i32, i32* %117, align 4
  %119 = add i32 %118, %116
  store i32 %119, i32* %117, align 4
  %120 = getelementptr inbounds i32, i32* %115, i64 1
  br label %121

121:                                              ; preds = %35, %114
  %122 = phi i32* [ %120, %114 ], [ %36, %35 ]
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %122, i64 %8
  %125 = load i32, i32* %124, align 4
  %126 = add i32 %125, %123
  store i32 %126, i32* %124, align 4
  %127 = getelementptr inbounds i32, i32* %122, i64 1
  br label %128

128:                                              ; preds = %35, %121
  %129 = phi i32* [ %127, %121 ], [ %36, %35 ]
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds i32, i32* %129, i64 %8
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %132, %130
  store i32 %133, i32* %131, align 4
  %134 = getelementptr inbounds i32, i32* %129, i64 1
  br label %135

135:                                              ; preds = %35, %128
  %136 = phi i32* [ %134, %128 ], [ %36, %35 ]
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds i32, i32* %136, i64 %8
  %139 = load i32, i32* %138, align 4
  %140 = add i32 %139, %137
  store i32 %140, i32* %138, align 4
  %141 = getelementptr inbounds i32, i32* %136, i64 1
  br label %142

142:                                              ; preds = %135, %35
  %143 = phi i32* [ %141, %135 ], [ %36, %35 ]
  %144 = sub nsw i64 %37, %8
  %145 = icmp sgt i64 %144, 0
  br i1 %145, label %35, label %146

146:                                              ; preds = %142, %17, %14
  %147 = phi i32 [ 0, %14 ], [ 1, %17 ], [ 1, %142 ]
  ret i32 %147
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorDecodeRow(%struct.tiff*, i8*, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.TIFFPredictorState**
  %7 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %6, align 8
  %8 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 7
  %9 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %10 = tail call i32 %9(%struct.tiff* %0, i8* %1, i64 %2, i16 zeroext %3) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 10
  %14 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %13, align 8
  %15 = tail call i32 %14(%struct.tiff* %0, i8* %1, i64 %2) #6
  br label %16

16:                                               ; preds = %4, %12
  %17 = phi i32 [ %15, %12 ], [ 0, %4 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorDecodeTile(%struct.tiff*, i8*, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.TIFFPredictorState**
  %7 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %6, align 8
  %8 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 9
  %9 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %8, align 8
  %10 = tail call i32 %9(%struct.tiff* %0, i8* %1, i64 %2, i16 zeroext %3) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %33, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = srem i64 %2, %14
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 10
  %19 = icmp sgt i64 %2, 0
  br i1 %19, label %23, label %33

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %22 = load i8*, i8** %21, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0)) #6
  br label %33

23:                                               ; preds = %17, %29
  %24 = phi i64 [ %30, %29 ], [ %2, %17 ]
  %25 = phi i8* [ %31, %29 ], [ %1, %17 ]
  %26 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %18, align 8
  %27 = tail call i32 %26(%struct.tiff* %0, i8* %25, i64 %14) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %23
  %30 = sub nsw i64 %24, %14
  %31 = getelementptr inbounds i8, i8* %25, i64 %14
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %23, label %33

33:                                               ; preds = %29, %23, %17, %4, %20
  %34 = phi i32 [ 0, %20 ], [ 0, %4 ], [ 1, %17 ], [ 1, %29 ], [ 0, %23 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @swabHorAcc16(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = bitcast i8* %1 to i16*
  %5 = sdiv i64 %2, 2
  tail call void @TIFFSwabArrayOfShort(i16* %4, i64 %5) #6
  %6 = tail call i32 @horAcc16(%struct.tiff* %0, i8* %1, i64 %2)
  ret i32 %6
}

declare void @_TIFFNoPostDecode(%struct.tiff*, i8*, i64) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @swabHorAcc32(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = bitcast i8* %1 to i32*
  %5 = sdiv i64 %2, 4
  tail call void @TIFFSwabArrayOfLong(i32* %4, i64 %5) #6
  %6 = tail call i32 @horAcc32(%struct.tiff* %0, i8* %1, i64 %2)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @fpAcc(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %10 = load i16, i16* %9, align 4
  %11 = lshr i16 %10, 3
  %12 = zext i16 %11 to i32
  %13 = zext i16 %11 to i64
  %14 = sdiv i64 %2, %13
  %15 = mul nsw i64 %8, %13
  %16 = srem i64 %2, %15
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %20 = load i8*, i8** %19, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0)) #6
  br label %209

21:                                               ; preds = %3
  %22 = tail call i8* @_TIFFmalloc(i64 %2) #6
  %23 = icmp eq i8* %22, null
  br i1 %23, label %209, label %24

24:                                               ; preds = %21
  %25 = icmp slt i64 %8, %2
  br i1 %25, label %26, label %152

26:                                               ; preds = %24
  %27 = add nsw i64 %8, -4
  %28 = icmp sgt i64 %27, 0
  %29 = add i64 %8, -4
  %30 = add i64 %8, -36
  %31 = lshr i64 %30, 5
  %32 = add nuw nsw i64 %31, 1
  %33 = icmp ult i64 %29, 32
  %34 = and i64 %29, -32
  %35 = sub i64 %27, %34
  %36 = and i64 %32, 1
  %37 = icmp eq i64 %31, 0
  %38 = sub nuw nsw i64 %32, %36
  %39 = icmp eq i64 %36, 0
  %40 = icmp eq i64 %29, %34
  br label %41

41:                                               ; preds = %26, %148
  %42 = phi i8* [ %1, %26 ], [ %149, %148 ]
  %43 = phi i64 [ %2, %26 ], [ %150, %148 ]
  switch i64 %8, label %44 [
    i64 4, label %120
    i64 3, label %127
    i64 2, label %134
    i64 1, label %141
    i64 0, label %148
  ]

44:                                               ; preds = %41
  br i1 %28, label %45, label %120

45:                                               ; preds = %44
  br i1 %33, label %107, label %46

46:                                               ; preds = %45
  %47 = getelementptr i8, i8* %42, i64 %34
  br i1 %37, label %87, label %48

48:                                               ; preds = %46, %48
  %49 = phi i64 [ %84, %48 ], [ 0, %46 ]
  %50 = phi i64 [ %85, %48 ], [ %38, %46 ]
  %51 = getelementptr i8, i8* %42, i64 %49
  %52 = getelementptr inbounds i8, i8* %51, i64 %8
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = getelementptr inbounds i8, i8* %52, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = bitcast i8* %51 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr i8, i8* %51, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = add <16 x i8> %59, %54
  %64 = add <16 x i8> %62, %57
  %65 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %66, align 1
  %67 = or i64 %49, 32
  %68 = getelementptr i8, i8* %42, i64 %67
  %69 = getelementptr inbounds i8, i8* %68, i64 %8
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = getelementptr inbounds i8, i8* %69, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = bitcast i8* %68 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = getelementptr i8, i8* %68, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = add <16 x i8> %76, %71
  %81 = add <16 x i8> %79, %74
  %82 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1
  %83 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %83, align 1
  %84 = add i64 %49, 64
  %85 = add i64 %50, -2
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %48, !llvm.loop !10

87:                                               ; preds = %48, %46
  %88 = phi i64 [ 0, %46 ], [ %84, %48 ]
  br i1 %39, label %106, label %89

89:                                               ; preds = %87
  %90 = getelementptr i8, i8* %42, i64 %88
  %91 = getelementptr inbounds i8, i8* %90, i64 %8
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = getelementptr inbounds i8, i8* %91, i64 16
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1
  %97 = bitcast i8* %90 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr i8, i8* %90, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = add <16 x i8> %98, %93
  %103 = add <16 x i8> %101, %96
  %104 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %104, align 1
  %105 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %105, align 1
  br label %106

106:                                              ; preds = %87, %89
  br i1 %40, label %120, label %107

107:                                              ; preds = %106, %45
  %108 = phi i64 [ %27, %45 ], [ %35, %106 ]
  %109 = phi i8* [ %42, %45 ], [ %47, %106 ]
  br label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %118, %110 ], [ %108, %107 ]
  %112 = phi i8* [ %117, %110 ], [ %109, %107 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %8
  %114 = load i8, i8* %113, align 1
  %115 = load i8, i8* %112, align 1
  %116 = add i8 %115, %114
  store i8 %116, i8* %113, align 1
  %117 = getelementptr inbounds i8, i8* %112, i64 1
  %118 = add nsw i64 %111, -1
  %119 = icmp sgt i64 %118, 0
  br i1 %119, label %110, label %120, !llvm.loop !11

120:                                              ; preds = %110, %106, %44, %41
  %121 = phi i8* [ %42, %41 ], [ %42, %44 ], [ %47, %106 ], [ %117, %110 ]
  %122 = getelementptr inbounds i8, i8* %121, i64 %8
  %123 = load i8, i8* %122, align 1
  %124 = load i8, i8* %121, align 1
  %125 = add i8 %124, %123
  store i8 %125, i8* %122, align 1
  %126 = getelementptr inbounds i8, i8* %121, i64 1
  br label %127

127:                                              ; preds = %41, %120
  %128 = phi i8* [ %126, %120 ], [ %42, %41 ]
  %129 = getelementptr inbounds i8, i8* %128, i64 %8
  %130 = load i8, i8* %129, align 1
  %131 = load i8, i8* %128, align 1
  %132 = add i8 %131, %130
  store i8 %132, i8* %129, align 1
  %133 = getelementptr inbounds i8, i8* %128, i64 1
  br label %134

134:                                              ; preds = %41, %127
  %135 = phi i8* [ %133, %127 ], [ %42, %41 ]
  %136 = getelementptr inbounds i8, i8* %135, i64 %8
  %137 = load i8, i8* %136, align 1
  %138 = load i8, i8* %135, align 1
  %139 = add i8 %138, %137
  store i8 %139, i8* %136, align 1
  %140 = getelementptr inbounds i8, i8* %135, i64 1
  br label %141

141:                                              ; preds = %41, %134
  %142 = phi i8* [ %140, %134 ], [ %42, %41 ]
  %143 = getelementptr inbounds i8, i8* %142, i64 %8
  %144 = load i8, i8* %143, align 1
  %145 = load i8, i8* %142, align 1
  %146 = add i8 %145, %144
  store i8 %146, i8* %143, align 1
  %147 = getelementptr inbounds i8, i8* %142, i64 1
  br label %148

148:                                              ; preds = %141, %41
  %149 = phi i8* [ %147, %141 ], [ %42, %41 ]
  %150 = sub nsw i64 %43, %8
  %151 = icmp sgt i64 %150, %8
  br i1 %151, label %41, label %152

152:                                              ; preds = %148, %24
  tail call void @_TIFFmemcpy(i8* nonnull %22, i8* %1, i64 %2) #6
  %153 = icmp sgt i64 %14, 0
  br i1 %153, label %154, label %208

154:                                              ; preds = %152
  %155 = icmp eq i16 %11, 0
  %156 = zext i16 %11 to i64
  %157 = and i64 %156, 1
  %158 = icmp eq i16 %11, 1
  %159 = sub nsw i64 %156, %157
  %160 = icmp eq i64 %157, 0
  br label %161

161:                                              ; preds = %205, %154
  %162 = phi i64 [ 0, %154 ], [ %206, %205 ]
  br i1 %155, label %205, label %163

163:                                              ; preds = %161
  %164 = mul nsw i64 %162, %13
  br i1 %158, label %192, label %165

165:                                              ; preds = %163, %165
  %166 = phi i64 [ %188, %165 ], [ 0, %163 ]
  %167 = phi i32 [ %189, %165 ], [ 0, %163 ]
  %168 = phi i64 [ %190, %165 ], [ %159, %163 ]
  %169 = xor i32 %167, -1
  %170 = add nsw i32 %169, %12
  %171 = zext i32 %170 to i64
  %172 = mul nsw i64 %14, %171
  %173 = add nsw i64 %172, %162
  %174 = getelementptr inbounds i8, i8* %22, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = add nuw nsw i64 %164, %166
  %177 = getelementptr inbounds i8, i8* %1, i64 %176
  store i8 %175, i8* %177, align 1
  %178 = or i64 %166, 1
  %179 = sub nuw nsw i32 -2, %167
  %180 = add nsw i32 %179, %12
  %181 = zext i32 %180 to i64
  %182 = mul nsw i64 %14, %181
  %183 = add nsw i64 %182, %162
  %184 = getelementptr inbounds i8, i8* %22, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = add nuw nsw i64 %164, %178
  %187 = getelementptr inbounds i8, i8* %1, i64 %186
  store i8 %185, i8* %187, align 1
  %188 = add nuw nsw i64 %166, 2
  %189 = add nuw nsw i32 %167, 2
  %190 = add i64 %168, -2
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %165

192:                                              ; preds = %165, %163
  %193 = phi i64 [ 0, %163 ], [ %188, %165 ]
  %194 = phi i32 [ 0, %163 ], [ %189, %165 ]
  br i1 %160, label %205, label %195

195:                                              ; preds = %192
  %196 = xor i32 %194, -1
  %197 = add nsw i32 %196, %12
  %198 = zext i32 %197 to i64
  %199 = mul nsw i64 %14, %198
  %200 = add nsw i64 %199, %162
  %201 = getelementptr inbounds i8, i8* %22, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = add nuw nsw i64 %164, %193
  %204 = getelementptr inbounds i8, i8* %1, i64 %203
  store i8 %202, i8* %204, align 1
  br label %205

205:                                              ; preds = %195, %192, %161
  %206 = add nuw nsw i64 %162, 1
  %207 = icmp eq i64 %206, %14
  br i1 %207, label %208, label %161

208:                                              ; preds = %205, %152
  tail call void @_TIFFfree(i8* nonnull %22) #6
  br label %209

209:                                              ; preds = %21, %208, %18
  %210 = phi i32 [ 0, %18 ], [ 1, %208 ], [ 0, %21 ]
  ret i32 %210
}

declare i64 @TIFFTileRowSize(%struct.tiff*) local_unnamed_addr #1

declare i64 @TIFFScanlineSize(%struct.tiff*) local_unnamed_addr #1

declare void @TIFFSwabArrayOfShort(i16*, i64) local_unnamed_addr #1

declare void @TIFFSwabArrayOfLong(i32*, i64) local_unnamed_addr #1

declare i8* @_TIFFmalloc(i64) local_unnamed_addr #1

declare void @_TIFFmemcpy(i8*, i8*, i64) local_unnamed_addr #1

declare void @_TIFFfree(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @horDiff8(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = srem i64 %2, %8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %13 = load i8*, i8** %12, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %213

14:                                               ; preds = %3
  %15 = icmp slt i64 %8, %2
  br i1 %15, label %16, label %213

16:                                               ; preds = %14
  %17 = sub nsw i64 %2, %8
  switch i64 %8, label %70 [
    i64 3, label %18
    i64 4, label %41
  ]

18:                                               ; preds = %16
  %19 = load i8, i8* %1, align 1
  %20 = getelementptr inbounds i8, i8* %1, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %1, i64 2
  %23 = load i8, i8* %22, align 1
  br label %24

24:                                               ; preds = %24, %18
  %25 = phi i64 [ %17, %18 ], [ %39, %24 ]
  %26 = phi i8* [ %1, %18 ], [ %30, %24 ]
  %27 = phi i8 [ %19, %18 ], [ %31, %24 ]
  %28 = phi i8 [ %21, %18 ], [ %34, %24 ]
  %29 = phi i8 [ %23, %18 ], [ %37, %24 ]
  %30 = getelementptr inbounds i8, i8* %26, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = sub i8 %31, %27
  store i8 %32, i8* %30, align 1
  %33 = getelementptr inbounds i8, i8* %26, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = sub i8 %34, %28
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds i8, i8* %26, i64 5
  %37 = load i8, i8* %36, align 1
  %38 = sub i8 %37, %29
  store i8 %38, i8* %36, align 1
  %39 = add nsw i64 %25, -3
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %24, label %213

41:                                               ; preds = %16
  %42 = load i8, i8* %1, align 1
  %43 = getelementptr inbounds i8, i8* %1, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %1, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %1, i64 3
  %48 = load i8, i8* %47, align 1
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ %17, %41 ], [ %68, %49 ]
  %51 = phi i8* [ %1, %41 ], [ %56, %49 ]
  %52 = phi i8 [ %42, %41 ], [ %57, %49 ]
  %53 = phi i8 [ %44, %41 ], [ %60, %49 ]
  %54 = phi i8 [ %46, %41 ], [ %63, %49 ]
  %55 = phi i8 [ %48, %41 ], [ %66, %49 ]
  %56 = getelementptr inbounds i8, i8* %51, i64 4
  %57 = load i8, i8* %56, align 1
  %58 = sub i8 %57, %52
  store i8 %58, i8* %56, align 1
  %59 = getelementptr inbounds i8, i8* %51, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = sub i8 %60, %53
  store i8 %61, i8* %59, align 1
  %62 = getelementptr inbounds i8, i8* %51, i64 6
  %63 = load i8, i8* %62, align 1
  %64 = sub i8 %63, %54
  store i8 %64, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %51, i64 7
  %66 = load i8, i8* %65, align 1
  %67 = sub i8 %66, %55
  store i8 %67, i8* %65, align 1
  %68 = add nsw i64 %50, -4
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %49, label %213

70:                                               ; preds = %16
  %71 = add nsw i64 %17, -1
  %72 = getelementptr inbounds i8, i8* %1, i64 %71
  %73 = add nsw i64 %8, -4
  %74 = icmp sgt i64 %73, 0
  %75 = add i64 %8, -4
  %76 = add i64 %8, -20
  %77 = lshr i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i64 %75, 16
  %80 = and i64 %75, -16
  %81 = sub i64 %73, %80
  %82 = sub i64 0, %80
  %83 = and i64 %78, 1
  %84 = icmp eq i64 %77, 0
  %85 = sub nuw nsw i64 %78, %83
  %86 = icmp eq i64 %83, 0
  %87 = icmp eq i64 %75, %80
  br label %88

88:                                               ; preds = %209, %70
  %89 = phi i64 [ %17, %70 ], [ %211, %209 ]
  %90 = phi i8* [ %72, %70 ], [ %210, %209 ]
  switch i64 %8, label %91 [
    i64 4, label %181
    i64 3, label %188
    i64 2, label %195
    i64 1, label %202
    i64 0, label %209
  ]

91:                                               ; preds = %88
  br i1 %74, label %92, label %181

92:                                               ; preds = %91
  br i1 %79, label %168, label %93

93:                                               ; preds = %92
  %94 = getelementptr i8, i8* %90, i64 %82
  br i1 %84, label %143, label %95

95:                                               ; preds = %93, %95
  %96 = phi i64 [ %140, %95 ], [ 0, %93 ]
  %97 = phi i64 [ %141, %95 ], [ %85, %93 ]
  %98 = sub i64 0, %96
  %99 = getelementptr i8, i8* %90, i64 %98
  %100 = getelementptr inbounds i8, i8* %99, i64 %8
  %101 = getelementptr inbounds i8, i8* %100, i64 -7
  %102 = bitcast i8* %101 to <8 x i8>*
  %103 = load <8 x i8>, <8 x i8>* %102, align 1
  %104 = getelementptr inbounds i8, i8* %100, i64 -8
  %105 = getelementptr inbounds i8, i8* %104, i64 -7
  %106 = bitcast i8* %105 to <8 x i8>*
  %107 = load <8 x i8>, <8 x i8>* %106, align 1
  %108 = getelementptr i8, i8* %99, i64 -7
  %109 = bitcast i8* %108 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1
  %111 = getelementptr i8, i8* %99, i64 -8
  %112 = getelementptr i8, i8* %111, i64 -7
  %113 = bitcast i8* %112 to <8 x i8>*
  %114 = load <8 x i8>, <8 x i8>* %113, align 1
  %115 = sub <8 x i8> %103, %110
  %116 = sub <8 x i8> %107, %114
  %117 = bitcast i8* %101 to <8 x i8>*
  store <8 x i8> %115, <8 x i8>* %117, align 1
  %118 = bitcast i8* %105 to <8 x i8>*
  store <8 x i8> %116, <8 x i8>* %118, align 1
  %119 = sub nuw nsw i64 -16, %96
  %120 = getelementptr i8, i8* %90, i64 %119
  %121 = getelementptr inbounds i8, i8* %120, i64 %8
  %122 = getelementptr inbounds i8, i8* %121, i64 -7
  %123 = bitcast i8* %122 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1
  %125 = getelementptr inbounds i8, i8* %121, i64 -8
  %126 = getelementptr inbounds i8, i8* %125, i64 -7
  %127 = bitcast i8* %126 to <8 x i8>*
  %128 = load <8 x i8>, <8 x i8>* %127, align 1
  %129 = getelementptr i8, i8* %120, i64 -7
  %130 = bitcast i8* %129 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1
  %132 = getelementptr i8, i8* %120, i64 -8
  %133 = getelementptr i8, i8* %132, i64 -7
  %134 = bitcast i8* %133 to <8 x i8>*
  %135 = load <8 x i8>, <8 x i8>* %134, align 1
  %136 = sub <8 x i8> %124, %131
  %137 = sub <8 x i8> %128, %135
  %138 = bitcast i8* %122 to <8 x i8>*
  store <8 x i8> %136, <8 x i8>* %138, align 1
  %139 = bitcast i8* %126 to <8 x i8>*
  store <8 x i8> %137, <8 x i8>* %139, align 1
  %140 = add i64 %96, 32
  %141 = add i64 %97, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %95, !llvm.loop !12

143:                                              ; preds = %95, %93
  %144 = phi i64 [ 0, %93 ], [ %140, %95 ]
  br i1 %86, label %167, label %145

145:                                              ; preds = %143
  %146 = sub i64 0, %144
  %147 = getelementptr i8, i8* %90, i64 %146
  %148 = getelementptr inbounds i8, i8* %147, i64 %8
  %149 = getelementptr inbounds i8, i8* %148, i64 -7
  %150 = bitcast i8* %149 to <8 x i8>*
  %151 = load <8 x i8>, <8 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %148, i64 -8
  %153 = getelementptr inbounds i8, i8* %152, i64 -7
  %154 = bitcast i8* %153 to <8 x i8>*
  %155 = load <8 x i8>, <8 x i8>* %154, align 1
  %156 = getelementptr i8, i8* %147, i64 -7
  %157 = bitcast i8* %156 to <8 x i8>*
  %158 = load <8 x i8>, <8 x i8>* %157, align 1
  %159 = getelementptr i8, i8* %147, i64 -8
  %160 = getelementptr i8, i8* %159, i64 -7
  %161 = bitcast i8* %160 to <8 x i8>*
  %162 = load <8 x i8>, <8 x i8>* %161, align 1
  %163 = sub <8 x i8> %151, %158
  %164 = sub <8 x i8> %155, %162
  %165 = bitcast i8* %149 to <8 x i8>*
  store <8 x i8> %163, <8 x i8>* %165, align 1
  %166 = bitcast i8* %153 to <8 x i8>*
  store <8 x i8> %164, <8 x i8>* %166, align 1
  br label %167

167:                                              ; preds = %143, %145
  br i1 %87, label %181, label %168

168:                                              ; preds = %167, %92
  %169 = phi i64 [ %73, %92 ], [ %81, %167 ]
  %170 = phi i8* [ %90, %92 ], [ %94, %167 ]
  br label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %179, %171 ], [ %169, %168 ]
  %173 = phi i8* [ %178, %171 ], [ %170, %168 ]
  %174 = getelementptr inbounds i8, i8* %173, i64 %8
  %175 = load i8, i8* %174, align 1
  %176 = load i8, i8* %173, align 1
  %177 = sub i8 %175, %176
  store i8 %177, i8* %174, align 1
  %178 = getelementptr inbounds i8, i8* %173, i64 -1
  %179 = add nsw i64 %172, -1
  %180 = icmp sgt i64 %179, 0
  br i1 %180, label %171, label %181, !llvm.loop !13

181:                                              ; preds = %171, %167, %91, %88
  %182 = phi i8* [ %90, %88 ], [ %90, %91 ], [ %94, %167 ], [ %178, %171 ]
  %183 = getelementptr inbounds i8, i8* %182, i64 %8
  %184 = load i8, i8* %183, align 1
  %185 = load i8, i8* %182, align 1
  %186 = sub i8 %184, %185
  store i8 %186, i8* %183, align 1
  %187 = getelementptr inbounds i8, i8* %182, i64 -1
  br label %188

188:                                              ; preds = %88, %181
  %189 = phi i8* [ %187, %181 ], [ %90, %88 ]
  %190 = getelementptr inbounds i8, i8* %189, i64 %8
  %191 = load i8, i8* %190, align 1
  %192 = load i8, i8* %189, align 1
  %193 = sub i8 %191, %192
  store i8 %193, i8* %190, align 1
  %194 = getelementptr inbounds i8, i8* %189, i64 -1
  br label %195

195:                                              ; preds = %88, %188
  %196 = phi i8* [ %194, %188 ], [ %90, %88 ]
  %197 = getelementptr inbounds i8, i8* %196, i64 %8
  %198 = load i8, i8* %197, align 1
  %199 = load i8, i8* %196, align 1
  %200 = sub i8 %198, %199
  store i8 %200, i8* %197, align 1
  %201 = getelementptr inbounds i8, i8* %196, i64 -1
  br label %202

202:                                              ; preds = %88, %195
  %203 = phi i8* [ %201, %195 ], [ %90, %88 ]
  %204 = getelementptr inbounds i8, i8* %203, i64 %8
  %205 = load i8, i8* %204, align 1
  %206 = load i8, i8* %203, align 1
  %207 = sub i8 %205, %206
  store i8 %207, i8* %204, align 1
  %208 = getelementptr inbounds i8, i8* %203, i64 -1
  br label %209

209:                                              ; preds = %88, %202
  %210 = phi i8* [ %208, %202 ], [ %90, %88 ]
  %211 = sub nsw i64 %89, %8
  %212 = icmp sgt i64 %211, 0
  br i1 %212, label %88, label %213

213:                                              ; preds = %49, %24, %209, %14, %11
  %214 = phi i32 [ 0, %11 ], [ 1, %14 ], [ 1, %209 ], [ 1, %24 ], [ 1, %49 ]
  ret i32 %214
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @horDiff16(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8* %1 to i16*
  %10 = sdiv i64 %2, 2
  %11 = shl nsw i64 %8, 1
  %12 = srem i64 %2, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i64 0, i64 0)) #6
  br label %163

17:                                               ; preds = %3
  %18 = icmp sgt i64 %10, %8
  br i1 %18, label %19, label %163

19:                                               ; preds = %17
  %20 = sub nsw i64 %10, %8
  %21 = add nsw i64 %20, -1
  %22 = getelementptr inbounds i16, i16* %9, i64 %21
  %23 = add nsw i64 %8, -4
  %24 = icmp sgt i64 %23, 0
  %25 = add i64 %8, -4
  %26 = add i64 %8, -20
  %27 = lshr i64 %26, 4
  %28 = add nuw nsw i64 %27, 1
  %29 = icmp ult i64 %25, 16
  %30 = and i64 %25, -16
  %31 = sub i64 %23, %30
  %32 = sub i64 0, %30
  %33 = and i64 %28, 1
  %34 = icmp eq i64 %27, 0
  %35 = sub nuw nsw i64 %28, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %25, %30
  br label %38

38:                                               ; preds = %159, %19
  %39 = phi i16* [ %22, %19 ], [ %160, %159 ]
  %40 = phi i64 [ %20, %19 ], [ %161, %159 ]
  switch i64 %8, label %41 [
    i64 4, label %131
    i64 3, label %138
    i64 2, label %145
    i64 1, label %152
    i64 0, label %159
  ]

41:                                               ; preds = %38
  br i1 %24, label %42, label %131

42:                                               ; preds = %41
  br i1 %29, label %118, label %43

43:                                               ; preds = %42
  %44 = getelementptr i16, i16* %39, i64 %32
  br i1 %34, label %93, label %45

45:                                               ; preds = %43, %45
  %46 = phi i64 [ %90, %45 ], [ 0, %43 ]
  %47 = phi i64 [ %91, %45 ], [ %35, %43 ]
  %48 = sub i64 0, %46
  %49 = getelementptr i16, i16* %39, i64 %48
  %50 = getelementptr inbounds i16, i16* %49, i64 %8
  %51 = getelementptr inbounds i16, i16* %50, i64 -7
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 -8
  %55 = getelementptr inbounds i16, i16* %54, i64 -7
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = getelementptr i16, i16* %49, i64 -7
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = getelementptr i16, i16* %49, i64 -8
  %62 = getelementptr i16, i16* %61, i64 -7
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %53, %60
  %66 = sub <8 x i16> %57, %64
  %67 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2
  %68 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2
  %69 = sub nuw nsw i64 -16, %46
  %70 = getelementptr i16, i16* %39, i64 %69
  %71 = getelementptr inbounds i16, i16* %70, i64 %8
  %72 = getelementptr inbounds i16, i16* %71, i64 -7
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 -8
  %76 = getelementptr inbounds i16, i16* %75, i64 -7
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = getelementptr i16, i16* %70, i64 -7
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = getelementptr i16, i16* %70, i64 -8
  %83 = getelementptr i16, i16* %82, i64 -7
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = sub <8 x i16> %74, %81
  %87 = sub <8 x i16> %78, %85
  %88 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2
  %89 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2
  %90 = add i64 %46, 32
  %91 = add i64 %47, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %45, !llvm.loop !14

93:                                               ; preds = %45, %43
  %94 = phi i64 [ 0, %43 ], [ %90, %45 ]
  br i1 %36, label %117, label %95

95:                                               ; preds = %93
  %96 = sub i64 0, %94
  %97 = getelementptr i16, i16* %39, i64 %96
  %98 = getelementptr inbounds i16, i16* %97, i64 %8
  %99 = getelementptr inbounds i16, i16* %98, i64 -7
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = getelementptr inbounds i16, i16* %98, i64 -8
  %103 = getelementptr inbounds i16, i16* %102, i64 -7
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = getelementptr i16, i16* %97, i64 -7
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = getelementptr i16, i16* %97, i64 -8
  %110 = getelementptr i16, i16* %109, i64 -7
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = sub <8 x i16> %101, %108
  %114 = sub <8 x i16> %105, %112
  %115 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %115, align 2
  %116 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %116, align 2
  br label %117

117:                                              ; preds = %93, %95
  br i1 %37, label %131, label %118

118:                                              ; preds = %117, %42
  %119 = phi i64 [ %23, %42 ], [ %31, %117 ]
  %120 = phi i16* [ %39, %42 ], [ %44, %117 ]
  br label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %129, %121 ], [ %119, %118 ]
  %123 = phi i16* [ %128, %121 ], [ %120, %118 ]
  %124 = getelementptr inbounds i16, i16* %123, i64 %8
  %125 = load i16, i16* %124, align 2
  %126 = load i16, i16* %123, align 2
  %127 = sub i16 %125, %126
  store i16 %127, i16* %124, align 2
  %128 = getelementptr inbounds i16, i16* %123, i64 -1
  %129 = add nsw i64 %122, -1
  %130 = icmp sgt i64 %129, 0
  br i1 %130, label %121, label %131, !llvm.loop !15

131:                                              ; preds = %121, %117, %41, %38
  %132 = phi i16* [ %39, %38 ], [ %39, %41 ], [ %44, %117 ], [ %128, %121 ]
  %133 = getelementptr inbounds i16, i16* %132, i64 %8
  %134 = load i16, i16* %133, align 2
  %135 = load i16, i16* %132, align 2
  %136 = sub i16 %134, %135
  store i16 %136, i16* %133, align 2
  %137 = getelementptr inbounds i16, i16* %132, i64 -1
  br label %138

138:                                              ; preds = %38, %131
  %139 = phi i16* [ %137, %131 ], [ %39, %38 ]
  %140 = getelementptr inbounds i16, i16* %139, i64 %8
  %141 = load i16, i16* %140, align 2
  %142 = load i16, i16* %139, align 2
  %143 = sub i16 %141, %142
  store i16 %143, i16* %140, align 2
  %144 = getelementptr inbounds i16, i16* %139, i64 -1
  br label %145

145:                                              ; preds = %38, %138
  %146 = phi i16* [ %144, %138 ], [ %39, %38 ]
  %147 = getelementptr inbounds i16, i16* %146, i64 %8
  %148 = load i16, i16* %147, align 2
  %149 = load i16, i16* %146, align 2
  %150 = sub i16 %148, %149
  store i16 %150, i16* %147, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 -1
  br label %152

152:                                              ; preds = %38, %145
  %153 = phi i16* [ %151, %145 ], [ %39, %38 ]
  %154 = getelementptr inbounds i16, i16* %153, i64 %8
  %155 = load i16, i16* %154, align 2
  %156 = load i16, i16* %153, align 2
  %157 = sub i16 %155, %156
  store i16 %157, i16* %154, align 2
  %158 = getelementptr inbounds i16, i16* %153, i64 -1
  br label %159

159:                                              ; preds = %152, %38
  %160 = phi i16* [ %158, %152 ], [ %39, %38 ]
  %161 = sub nsw i64 %40, %8
  %162 = icmp sgt i64 %161, 0
  br i1 %162, label %38, label %163

163:                                              ; preds = %159, %17, %14
  %164 = phi i32 [ 0, %14 ], [ 1, %17 ], [ 1, %159 ]
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @horDiff32(%struct.tiff* nocapture readonly, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = sdiv i64 %2, 4
  %11 = shl nsw i64 %8, 2
  %12 = srem i64 %2, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.26, i64 0, i64 0)) #6
  br label %163

17:                                               ; preds = %3
  %18 = icmp sgt i64 %10, %8
  br i1 %18, label %19, label %163

19:                                               ; preds = %17
  %20 = sub nsw i64 %10, %8
  %21 = add nsw i64 %20, -1
  %22 = getelementptr inbounds i32, i32* %9, i64 %21
  %23 = add nsw i64 %8, -4
  %24 = icmp sgt i64 %23, 0
  %25 = add i64 %8, -4
  %26 = add i64 %8, -12
  %27 = lshr i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = icmp ult i64 %25, 8
  %30 = and i64 %25, -8
  %31 = sub i64 %23, %30
  %32 = sub i64 0, %30
  %33 = and i64 %28, 1
  %34 = icmp eq i64 %27, 0
  %35 = sub nuw nsw i64 %28, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %25, %30
  br label %38

38:                                               ; preds = %159, %19
  %39 = phi i32* [ %22, %19 ], [ %160, %159 ]
  %40 = phi i64 [ %20, %19 ], [ %161, %159 ]
  switch i64 %8, label %41 [
    i64 4, label %131
    i64 3, label %138
    i64 2, label %145
    i64 1, label %152
    i64 0, label %159
  ]

41:                                               ; preds = %38
  br i1 %24, label %42, label %131

42:                                               ; preds = %41
  br i1 %29, label %118, label %43

43:                                               ; preds = %42
  %44 = getelementptr i32, i32* %39, i64 %32
  br i1 %34, label %93, label %45

45:                                               ; preds = %43, %45
  %46 = phi i64 [ %90, %45 ], [ 0, %43 ]
  %47 = phi i64 [ %91, %45 ], [ %35, %43 ]
  %48 = sub i64 0, %46
  %49 = getelementptr i32, i32* %39, i64 %48
  %50 = getelementptr i32, i32* %49, i64 -3
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = getelementptr i32, i32* %49, i64 -4
  %54 = getelementptr i32, i32* %53, i64 -3
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr inbounds i32, i32* %49, i64 %8
  %58 = getelementptr inbounds i32, i32* %57, i64 -3
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4
  %61 = getelementptr inbounds i32, i32* %57, i64 -4
  %62 = getelementptr inbounds i32, i32* %61, i64 -3
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = sub <4 x i32> %60, %52
  %66 = sub <4 x i32> %64, %56
  %67 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %67, align 4
  %68 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %66, <4 x i32>* %68, align 4
  %69 = sub nuw nsw i64 -8, %46
  %70 = getelementptr i32, i32* %39, i64 %69
  %71 = getelementptr i32, i32* %70, i64 -3
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = getelementptr i32, i32* %70, i64 -4
  %75 = getelementptr i32, i32* %74, i64 -3
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4
  %78 = getelementptr inbounds i32, i32* %70, i64 %8
  %79 = getelementptr inbounds i32, i32* %78, i64 -3
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4
  %82 = getelementptr inbounds i32, i32* %78, i64 -4
  %83 = getelementptr inbounds i32, i32* %82, i64 -3
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4
  %86 = sub <4 x i32> %81, %73
  %87 = sub <4 x i32> %85, %77
  %88 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %88, align 4
  %89 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %89, align 4
  %90 = add i64 %46, 16
  %91 = add i64 %47, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %45, !llvm.loop !16

93:                                               ; preds = %45, %43
  %94 = phi i64 [ 0, %43 ], [ %90, %45 ]
  br i1 %36, label %117, label %95

95:                                               ; preds = %93
  %96 = sub i64 0, %94
  %97 = getelementptr i32, i32* %39, i64 %96
  %98 = getelementptr i32, i32* %97, i64 -3
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4
  %101 = getelementptr i32, i32* %97, i64 -4
  %102 = getelementptr i32, i32* %101, i64 -3
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4
  %105 = getelementptr inbounds i32, i32* %97, i64 %8
  %106 = getelementptr inbounds i32, i32* %105, i64 -3
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = getelementptr inbounds i32, i32* %105, i64 -4
  %110 = getelementptr inbounds i32, i32* %109, i64 -3
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4
  %113 = sub <4 x i32> %108, %100
  %114 = sub <4 x i32> %112, %104
  %115 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %115, align 4
  %116 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %116, align 4
  br label %117

117:                                              ; preds = %93, %95
  br i1 %37, label %131, label %118

118:                                              ; preds = %117, %42
  %119 = phi i64 [ %23, %42 ], [ %31, %117 ]
  %120 = phi i32* [ %39, %42 ], [ %44, %117 ]
  br label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %129, %121 ], [ %119, %118 ]
  %123 = phi i32* [ %128, %121 ], [ %120, %118 ]
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds i32, i32* %123, i64 %8
  %126 = load i32, i32* %125, align 4
  %127 = sub i32 %126, %124
  store i32 %127, i32* %125, align 4
  %128 = getelementptr inbounds i32, i32* %123, i64 -1
  %129 = add nsw i64 %122, -1
  %130 = icmp sgt i64 %129, 0
  br i1 %130, label %121, label %131, !llvm.loop !17

131:                                              ; preds = %121, %117, %41, %38
  %132 = phi i32* [ %39, %38 ], [ %39, %41 ], [ %44, %117 ], [ %128, %121 ]
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds i32, i32* %132, i64 %8
  %135 = load i32, i32* %134, align 4
  %136 = sub i32 %135, %133
  store i32 %136, i32* %134, align 4
  %137 = getelementptr inbounds i32, i32* %132, i64 -1
  br label %138

138:                                              ; preds = %38, %131
  %139 = phi i32* [ %137, %131 ], [ %39, %38 ]
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds i32, i32* %139, i64 %8
  %142 = load i32, i32* %141, align 4
  %143 = sub i32 %142, %140
  store i32 %143, i32* %141, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 -1
  br label %145

145:                                              ; preds = %38, %138
  %146 = phi i32* [ %144, %138 ], [ %39, %38 ]
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %146, i64 %8
  %149 = load i32, i32* %148, align 4
  %150 = sub i32 %149, %147
  store i32 %150, i32* %148, align 4
  %151 = getelementptr inbounds i32, i32* %146, i64 -1
  br label %152

152:                                              ; preds = %38, %145
  %153 = phi i32* [ %151, %145 ], [ %39, %38 ]
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds i32, i32* %153, i64 %8
  %156 = load i32, i32* %155, align 4
  %157 = sub i32 %156, %154
  store i32 %157, i32* %155, align 4
  %158 = getelementptr inbounds i32, i32* %153, i64 -1
  br label %159

159:                                              ; preds = %152, %38
  %160 = phi i32* [ %158, %152 ], [ %39, %38 ]
  %161 = sub nsw i64 %40, %8
  %162 = icmp sgt i64 %161, 0
  br i1 %162, label %38, label %163

163:                                              ; preds = %159, %17, %14
  %164 = phi i32 [ 0, %14 ], [ 1, %17 ], [ 1, %159 ]
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorEncodeRow(%struct.tiff*, i8*, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.TIFFPredictorState**
  %7 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %6, align 8
  %8 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 6
  %9 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %8, align 8
  %10 = tail call i32 %9(%struct.tiff* %0, i8* %1, i64 %2) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 3
  %14 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %13, align 8
  %15 = tail call i32 %14(%struct.tiff* %0, i8* %1, i64 %2, i16 zeroext %3) #6
  br label %16

16:                                               ; preds = %4, %12
  %17 = phi i32 [ %15, %12 ], [ 0, %4 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PredictorEncodeTile(%struct.tiff*, i8* nocapture readonly, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.TIFFPredictorState**
  %7 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %6, align 8
  %8 = tail call i8* @_TIFFmalloc(i64 %2) #6
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %12 = load i8*, i8** %11, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.27, i64 0, i64 0), i64 %2) #6
  br label %37

13:                                               ; preds = %4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* align 1 %1, i64 %2, i1 false)
  %14 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = srem i64 %2, %15
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = icmp sgt i64 %2, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 6
  br label %25

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %24 = load i8*, i8** %23, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %24, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0)) #6
  tail call void @_TIFFfree(i8* nonnull %8) #6
  br label %37

25:                                               ; preds = %20, %25
  %26 = phi i8* [ %8, %20 ], [ %31, %25 ]
  %27 = phi i64 [ %2, %20 ], [ %30, %25 ]
  %28 = load i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64)** %21, align 8
  %29 = tail call i32 %28(%struct.tiff* %0, i8* %26, i64 %15) #6
  %30 = sub nsw i64 %27, %15
  %31 = getelementptr inbounds i8, i8* %26, i64 %15
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %25, label %33

33:                                               ; preds = %25, %18
  %34 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %7, i64 0, i32 5
  %35 = load i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)** %34, align 8
  %36 = tail call i32 %35(%struct.tiff* %0, i8* nonnull %8, i64 %2, i16 zeroext %3) #6
  tail call void @_TIFFfree(i8* nonnull %8) #6
  br label %37

37:                                               ; preds = %33, %22, %10
  %38 = phi i32 [ 0, %10 ], [ 0, %22 ], [ %36, %33 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @swabHorDiff16(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = tail call i32 @horDiff16(%struct.tiff* %0, i8* %1, i64 %2)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = sdiv i64 %2, 2
  %8 = bitcast i8* %1 to i16*
  tail call void @TIFFSwabArrayOfShort(i16* %8, i64 %7) #6
  br label %9

9:                                                ; preds = %3, %6
  %10 = phi i32 [ 1, %6 ], [ 0, %3 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @swabHorDiff32(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = tail call i32 @horDiff32(%struct.tiff* %0, i8* %1, i64 %2)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = sdiv i64 %2, 4
  %8 = bitcast i8* %1 to i32*
  tail call void @TIFFSwabArrayOfLong(i32* %8, i64 %7) #6
  br label %9

9:                                                ; preds = %3, %6
  %10 = phi i32 [ 1, %6 ], [ 0, %3 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @fpDiff(%struct.tiff* nocapture readonly, i8*, i64) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.TIFFPredictorState**
  %6 = load %struct.TIFFPredictorState*, %struct.TIFFPredictorState** %5, align 8
  %7 = getelementptr inbounds %struct.TIFFPredictorState, %struct.TIFFPredictorState* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %10 = load i16, i16* %9, align 4
  %11 = lshr i16 %10, 3
  %12 = zext i16 %11 to i32
  %13 = zext i16 %11 to i64
  %14 = sdiv i64 %2, %13
  %15 = mul nsw i64 %8, %13
  %16 = srem i64 %2, %15
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %20 = load i8*, i8** %19, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.31, i64 0, i64 0)) #6
  br label %226

21:                                               ; preds = %3
  %22 = tail call i8* @_TIFFmalloc(i64 %2) #6
  %23 = icmp eq i8* %22, null
  br i1 %23, label %226, label %24

24:                                               ; preds = %21
  tail call void @_TIFFmemcpy(i8* nonnull %22, i8* %1, i64 %2) #6
  %25 = icmp sgt i64 %14, 0
  br i1 %25, label %26, label %80

26:                                               ; preds = %24
  %27 = icmp eq i16 %11, 0
  %28 = zext i16 %11 to i64
  %29 = and i64 %28, 1
  %30 = icmp eq i16 %11, 1
  %31 = sub nsw i64 %28, %29
  %32 = icmp eq i64 %29, 0
  br label %33

33:                                               ; preds = %77, %26
  %34 = phi i64 [ 0, %26 ], [ %78, %77 ]
  br i1 %27, label %77, label %35

35:                                               ; preds = %33
  %36 = mul nsw i64 %34, %13
  br i1 %30, label %64, label %37

37:                                               ; preds = %35, %37
  %38 = phi i64 [ %60, %37 ], [ 0, %35 ]
  %39 = phi i32 [ %61, %37 ], [ 0, %35 ]
  %40 = phi i64 [ %62, %37 ], [ %31, %35 ]
  %41 = add nuw nsw i64 %36, %38
  %42 = getelementptr inbounds i8, i8* %22, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = xor i32 %39, -1
  %45 = add nsw i32 %44, %12
  %46 = zext i32 %45 to i64
  %47 = mul nsw i64 %14, %46
  %48 = add nsw i64 %47, %34
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  store i8 %43, i8* %49, align 1
  %50 = or i64 %38, 1
  %51 = add nuw nsw i64 %36, %50
  %52 = getelementptr inbounds i8, i8* %22, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = sub nuw nsw i32 -2, %39
  %55 = add nsw i32 %54, %12
  %56 = zext i32 %55 to i64
  %57 = mul nsw i64 %14, %56
  %58 = add nsw i64 %57, %34
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  store i8 %53, i8* %59, align 1
  %60 = add nuw nsw i64 %38, 2
  %61 = add nuw nsw i32 %39, 2
  %62 = add i64 %40, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %37

64:                                               ; preds = %37, %35
  %65 = phi i64 [ 0, %35 ], [ %60, %37 ]
  %66 = phi i32 [ 0, %35 ], [ %61, %37 ]
  br i1 %32, label %77, label %67

67:                                               ; preds = %64
  %68 = add nuw nsw i64 %36, %65
  %69 = getelementptr inbounds i8, i8* %22, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = xor i32 %66, -1
  %72 = add nsw i32 %71, %12
  %73 = zext i32 %72 to i64
  %74 = mul nsw i64 %14, %73
  %75 = add nsw i64 %74, %34
  %76 = getelementptr inbounds i8, i8* %1, i64 %75
  store i8 %70, i8* %76, align 1
  br label %77

77:                                               ; preds = %67, %64, %33
  %78 = add nuw nsw i64 %34, 1
  %79 = icmp eq i64 %78, %14
  br i1 %79, label %80, label %33

80:                                               ; preds = %77, %24
  tail call void @_TIFFfree(i8* nonnull %22) #6
  %81 = icmp slt i64 %8, %2
  br i1 %81, label %82, label %226

82:                                               ; preds = %80
  %83 = xor i64 %8, -1
  %84 = add i64 %83, %2
  %85 = getelementptr inbounds i8, i8* %1, i64 %84
  %86 = add nsw i64 %8, -4
  %87 = icmp sgt i64 %86, 0
  %88 = add i64 %8, -4
  %89 = add i64 %8, -20
  %90 = lshr i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = icmp ult i64 %88, 16
  %93 = and i64 %88, -16
  %94 = sub i64 %86, %93
  %95 = sub i64 0, %93
  %96 = and i64 %91, 1
  %97 = icmp eq i64 %90, 0
  %98 = sub nuw nsw i64 %91, %96
  %99 = icmp eq i64 %96, 0
  %100 = icmp eq i64 %88, %93
  br label %101

101:                                              ; preds = %82, %222
  %102 = phi i8* [ %85, %82 ], [ %223, %222 ]
  %103 = phi i64 [ %2, %82 ], [ %224, %222 ]
  switch i64 %8, label %104 [
    i64 4, label %194
    i64 3, label %201
    i64 2, label %208
    i64 1, label %215
    i64 0, label %222
  ]

104:                                              ; preds = %101
  br i1 %87, label %105, label %194

105:                                              ; preds = %104
  br i1 %92, label %181, label %106

106:                                              ; preds = %105
  %107 = getelementptr i8, i8* %102, i64 %95
  br i1 %97, label %156, label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %153, %108 ], [ 0, %106 ]
  %110 = phi i64 [ %154, %108 ], [ %98, %106 ]
  %111 = sub i64 0, %109
  %112 = getelementptr i8, i8* %102, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i64 %8
  %114 = getelementptr inbounds i8, i8* %113, i64 -7
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = getelementptr inbounds i8, i8* %113, i64 -8
  %118 = getelementptr inbounds i8, i8* %117, i64 -7
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1
  %121 = getelementptr i8, i8* %112, i64 -7
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1
  %124 = getelementptr i8, i8* %112, i64 -8
  %125 = getelementptr i8, i8* %124, i64 -7
  %126 = bitcast i8* %125 to <8 x i8>*
  %127 = load <8 x i8>, <8 x i8>* %126, align 1
  %128 = sub <8 x i8> %116, %123
  %129 = sub <8 x i8> %120, %127
  %130 = bitcast i8* %114 to <8 x i8>*
  store <8 x i8> %128, <8 x i8>* %130, align 1
  %131 = bitcast i8* %118 to <8 x i8>*
  store <8 x i8> %129, <8 x i8>* %131, align 1
  %132 = sub nuw nsw i64 -16, %109
  %133 = getelementptr i8, i8* %102, i64 %132
  %134 = getelementptr inbounds i8, i8* %133, i64 %8
  %135 = getelementptr inbounds i8, i8* %134, i64 -7
  %136 = bitcast i8* %135 to <8 x i8>*
  %137 = load <8 x i8>, <8 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %134, i64 -8
  %139 = getelementptr inbounds i8, i8* %138, i64 -7
  %140 = bitcast i8* %139 to <8 x i8>*
  %141 = load <8 x i8>, <8 x i8>* %140, align 1
  %142 = getelementptr i8, i8* %133, i64 -7
  %143 = bitcast i8* %142 to <8 x i8>*
  %144 = load <8 x i8>, <8 x i8>* %143, align 1
  %145 = getelementptr i8, i8* %133, i64 -8
  %146 = getelementptr i8, i8* %145, i64 -7
  %147 = bitcast i8* %146 to <8 x i8>*
  %148 = load <8 x i8>, <8 x i8>* %147, align 1
  %149 = sub <8 x i8> %137, %144
  %150 = sub <8 x i8> %141, %148
  %151 = bitcast i8* %135 to <8 x i8>*
  store <8 x i8> %149, <8 x i8>* %151, align 1
  %152 = bitcast i8* %139 to <8 x i8>*
  store <8 x i8> %150, <8 x i8>* %152, align 1
  %153 = add i64 %109, 32
  %154 = add i64 %110, -2
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %108, !llvm.loop !18

156:                                              ; preds = %108, %106
  %157 = phi i64 [ 0, %106 ], [ %153, %108 ]
  br i1 %99, label %180, label %158

158:                                              ; preds = %156
  %159 = sub i64 0, %157
  %160 = getelementptr i8, i8* %102, i64 %159
  %161 = getelementptr inbounds i8, i8* %160, i64 %8
  %162 = getelementptr inbounds i8, i8* %161, i64 -7
  %163 = bitcast i8* %162 to <8 x i8>*
  %164 = load <8 x i8>, <8 x i8>* %163, align 1
  %165 = getelementptr inbounds i8, i8* %161, i64 -8
  %166 = getelementptr inbounds i8, i8* %165, i64 -7
  %167 = bitcast i8* %166 to <8 x i8>*
  %168 = load <8 x i8>, <8 x i8>* %167, align 1
  %169 = getelementptr i8, i8* %160, i64 -7
  %170 = bitcast i8* %169 to <8 x i8>*
  %171 = load <8 x i8>, <8 x i8>* %170, align 1
  %172 = getelementptr i8, i8* %160, i64 -8
  %173 = getelementptr i8, i8* %172, i64 -7
  %174 = bitcast i8* %173 to <8 x i8>*
  %175 = load <8 x i8>, <8 x i8>* %174, align 1
  %176 = sub <8 x i8> %164, %171
  %177 = sub <8 x i8> %168, %175
  %178 = bitcast i8* %162 to <8 x i8>*
  store <8 x i8> %176, <8 x i8>* %178, align 1
  %179 = bitcast i8* %166 to <8 x i8>*
  store <8 x i8> %177, <8 x i8>* %179, align 1
  br label %180

180:                                              ; preds = %156, %158
  br i1 %100, label %194, label %181

181:                                              ; preds = %180, %105
  %182 = phi i64 [ %86, %105 ], [ %94, %180 ]
  %183 = phi i8* [ %102, %105 ], [ %107, %180 ]
  br label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %192, %184 ], [ %182, %181 ]
  %186 = phi i8* [ %191, %184 ], [ %183, %181 ]
  %187 = getelementptr inbounds i8, i8* %186, i64 %8
  %188 = load i8, i8* %187, align 1
  %189 = load i8, i8* %186, align 1
  %190 = sub i8 %188, %189
  store i8 %190, i8* %187, align 1
  %191 = getelementptr inbounds i8, i8* %186, i64 -1
  %192 = add nsw i64 %185, -1
  %193 = icmp sgt i64 %192, 0
  br i1 %193, label %184, label %194, !llvm.loop !19

194:                                              ; preds = %184, %180, %104, %101
  %195 = phi i8* [ %102, %101 ], [ %102, %104 ], [ %107, %180 ], [ %191, %184 ]
  %196 = getelementptr inbounds i8, i8* %195, i64 %8
  %197 = load i8, i8* %196, align 1
  %198 = load i8, i8* %195, align 1
  %199 = sub i8 %197, %198
  store i8 %199, i8* %196, align 1
  %200 = getelementptr inbounds i8, i8* %195, i64 -1
  br label %201

201:                                              ; preds = %101, %194
  %202 = phi i8* [ %200, %194 ], [ %102, %101 ]
  %203 = getelementptr inbounds i8, i8* %202, i64 %8
  %204 = load i8, i8* %203, align 1
  %205 = load i8, i8* %202, align 1
  %206 = sub i8 %204, %205
  store i8 %206, i8* %203, align 1
  %207 = getelementptr inbounds i8, i8* %202, i64 -1
  br label %208

208:                                              ; preds = %101, %201
  %209 = phi i8* [ %207, %201 ], [ %102, %101 ]
  %210 = getelementptr inbounds i8, i8* %209, i64 %8
  %211 = load i8, i8* %210, align 1
  %212 = load i8, i8* %209, align 1
  %213 = sub i8 %211, %212
  store i8 %213, i8* %210, align 1
  %214 = getelementptr inbounds i8, i8* %209, i64 -1
  br label %215

215:                                              ; preds = %101, %208
  %216 = phi i8* [ %214, %208 ], [ %102, %101 ]
  %217 = getelementptr inbounds i8, i8* %216, i64 %8
  %218 = load i8, i8* %217, align 1
  %219 = load i8, i8* %216, align 1
  %220 = sub i8 %218, %219
  store i8 %220, i8* %217, align 1
  %221 = getelementptr inbounds i8, i8* %216, i64 -1
  br label %222

222:                                              ; preds = %101, %215
  %223 = phi i8* [ %221, %215 ], [ %102, %101 ]
  %224 = sub nsw i64 %103, %8
  %225 = icmp sgt i64 %224, %8
  br i1 %225, label %101, label %226

226:                                              ; preds = %222, %80, %21, %18
  %227 = phi i32 [ 0, %18 ], [ 0, %21 ], [ 1, %80 ], [ 1, %222 ]
  ret i32 %227
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !5, !3}
