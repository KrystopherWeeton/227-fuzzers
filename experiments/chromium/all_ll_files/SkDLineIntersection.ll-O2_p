; ModuleID = '../../third_party/skia/src/pathops/SkDLineIntersection.cpp'
source_filename = "../../third_party/skia/src/pathops/SkDLineIntersection.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkIntersections20cleanUpParallelLinesEb(%class.SkIntersections*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 2
  %5 = icmp ugt i8 %4, 2
  br i1 %5, label %6, label %9

6:                                                ; preds = %2, %6
  tail call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %0, i32 1) #5
  %7 = load i8, i8* %3, align 2
  %8 = icmp ugt i8 %7, 2
  br i1 %8, label %6, label %9

9:                                                ; preds = %6, %2
  %10 = phi i8 [ %4, %2 ], [ %7, %6 ]
  %11 = icmp ne i8 %10, 2
  %12 = or i1 %11, %1
  br i1 %12, label %63, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %23, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  %21 = fcmp oeq double %19, 1.000000e+00
  %22 = or i1 %20, %21
  br label %23

23:                                               ; preds = %17, %13
  %24 = phi i1 [ true, %13 ], [ %22, %17 ]
  %25 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 1
  %26 = load double, double* %25, align 8
  %27 = fcmp oeq double %26, 1.000000e+00
  br i1 %27, label %35, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fcmp oeq double %30, 0.000000e+00
  %32 = fcmp oeq double %30, 1.000000e+00
  %33 = or i1 %31, %32
  %34 = or i1 %24, %33
  br i1 %34, label %35, label %60

35:                                               ; preds = %23, %28
  %36 = phi i1 [ %33, %28 ], [ true, %23 ]
  %37 = fsub double %15, %26
  %38 = tail call double @llvm.fabs.f64(double %37) #5
  %39 = fcmp olt double %38, 0x3E80000000000000
  br i1 %39, label %40, label %63

40:                                               ; preds = %35
  %41 = and i1 %24, %36
  br i1 %41, label %42, label %60

42:                                               ; preds = %40
  %43 = fcmp une double %15, 0.000000e+00
  br i1 %43, label %52, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  %46 = load double, double* %45, align 8
  %47 = fcmp oeq double %46, 0.000000e+00
  %48 = fcmp oeq double %46, 1.000000e+00
  %49 = or i1 %47, %48
  %50 = xor i1 %27, true
  %51 = or i1 %49, %50
  br i1 %51, label %60, label %53

52:                                               ; preds = %42
  br i1 %27, label %53, label %60

53:                                               ; preds = %44, %52
  %54 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 1
  %55 = load double, double* %54, align 8
  %56 = fcmp oeq double %55, 0.000000e+00
  %57 = fcmp oeq double %55, 1.000000e+00
  %58 = or i1 %56, %57
  br i1 %58, label %59, label %60

59:                                               ; preds = %53
  tail call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %0, i32 0) #5
  br label %63

60:                                               ; preds = %28, %40, %44, %53, %52
  %61 = phi i1 [ %36, %40 ], [ %36, %44 ], [ %36, %53 ], [ %36, %52 ], [ false, %28 ]
  %62 = zext i1 %61 to i32
  tail call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %0, i32 %62) #5
  br label %63

63:                                               ; preds = %35, %60, %59, %9
  %64 = load i8, i8* %3, align 2
  %65 = icmp eq i8 %64, 2
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  store i16 3, i16* %67, align 2
  %68 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  store i16 3, i16* %68, align 8
  br label %69

69:                                               ; preds = %66, %63
  ret void
}

declare void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkIntersections13computePointsERK7SkDLinei(%class.SkIntersections* nocapture, %struct.SkDLine* dereferenceable(32), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %1, double %5) #5
  %7 = extractvalue { double, double } %6, 0
  %8 = extractvalue { double, double } %6, 1
  %9 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 0
  store double %7, double* %9, align 8
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 1
  store double %8, double* %10, align 8
  %11 = trunc i32 %2 to i8
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 %11, i8* %12, align 2
  %13 = and i32 %2, 255
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %23

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 1
  %17 = load double, double* %16, align 8
  %18 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %1, double %17) #5
  %19 = extractvalue { double, double } %18, 0
  %20 = extractvalue { double, double } %18, 1
  %21 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 1, i32 0
  store double %19, double* %21, align 8
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 1, i32 1
  store double %20, double* %22, align 8
  br label %23

23:                                               ; preds = %15, %3
  ret void
}

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* nocapture, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 2, i8* %4, align 1
  %5 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %6 = bitcast double* %5 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = bitcast %struct.SkDLine* %1 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = fsub <2 x double> %7, %9
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast %struct.SkDLine* %2 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = bitcast double* %11 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = fsub <2 x double> %15, %13
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %18 = fmul <2 x double> %10, %17
  %19 = extractelement <2 x double> %18, i32 0
  %20 = extractelement <2 x double> %18, i32 1
  %21 = fsub double %19, %20
  %22 = tail call double @llvm.fabs.f64(double %21) #5
  %23 = fcmp olt double %22, 0x3E80000000000000
  br i1 %23, label %45, label %24

24:                                               ; preds = %3
  %25 = extractelement <2 x double> %9, i32 0
  %26 = extractelement <2 x double> %13, i32 0
  %27 = fsub double %25, %26
  %28 = extractelement <2 x double> %9, i32 1
  %29 = extractelement <2 x double> %13, i32 1
  %30 = fsub double %28, %29
  %31 = extractelement <2 x double> %16, i32 0
  %32 = fmul double %31, %30
  %33 = extractelement <2 x double> %16, i32 1
  %34 = fmul double %27, %33
  %35 = fsub double %32, %34
  %36 = extractelement <2 x double> %10, i32 0
  %37 = fmul double %36, %30
  %38 = extractelement <2 x double> %10, i32 1
  %39 = fmul double %38, %27
  %40 = fsub double %37, %39
  %41 = fdiv double %35, %21
  %42 = fdiv double %40, %21
  %43 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  store double %41, double* %43, align 8
  %44 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  store double %42, double* %44, align 8
  br label %66

45:                                               ; preds = %3
  %46 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %47 = shufflevector <2 x double> %10, <2 x double> %9, <2 x i32> <i32 0, i32 2>
  %48 = shufflevector <2 x double> %9, <2 x double> %10, <2 x i32> <i32 1, i32 3>
  %49 = fmul <2 x double> %47, %48
  %50 = extractelement <2 x double> %49, i32 0
  %51 = extractelement <2 x double> %49, i32 1
  %52 = fsub double %50, %51
  %53 = fmul <2 x double> %10, %46
  %54 = extractelement <2 x double> %53, i32 0
  %55 = extractelement <2 x double> %53, i32 1
  %56 = fsub double %54, %55
  %57 = fptrunc double %52 to float
  %58 = fptrunc double %56 to float
  %59 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %57, float %58) #5
  br i1 %59, label %62, label %60

60:                                               ; preds = %45
  %61 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 0, i8* %61, align 2
  br label %89

62:                                               ; preds = %45
  %63 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  %64 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  store double 0.000000e+00, double* %64, align 8
  %65 = bitcast double* %63 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %65, align 8
  br label %66

66:                                               ; preds = %62, %24
  %67 = phi double [ 0.000000e+00, %62 ], [ %41, %24 ]
  %68 = phi i32 [ 2, %62 ], [ 1, %24 ]
  %69 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %1, double %67) #5
  %70 = extractvalue { double, double } %69, 0
  %71 = extractvalue { double, double } %69, 1
  %72 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 0
  store double %70, double* %72, align 8
  %73 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 1
  store double %71, double* %73, align 8
  %74 = trunc i32 %68 to i8
  %75 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 %74, i8* %75, align 2
  %76 = icmp eq i32 %68, 2
  br i1 %76, label %77, label %86

77:                                               ; preds = %66
  %78 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 1
  %79 = load double, double* %78, align 8
  %80 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %1, double %79) #5
  %81 = extractvalue { double, double } %80, 0
  %82 = extractvalue { double, double } %80, 1
  %83 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 1, i32 0
  store double %81, double* %83, align 8
  %84 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 1, i32 1
  store double %82, double* %84, align 8
  %85 = load i8, i8* %75, align 2
  br label %86

86:                                               ; preds = %66, %77
  %87 = phi i8 [ %74, %66 ], [ %85, %77 ]
  %88 = zext i8 %87 to i32
  br label %89

89:                                               ; preds = %86, %60
  %90 = phi i32 [ %88, %86 ], [ 0, %60 ]
  ret i32 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK7SkDLineS2_(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca [2 x double], align 16
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 3, i8* %7, align 1
  %8 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0
  %9 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %2, %struct.SkDPoint* dereferenceable(16) %8) #5
  %10 = fcmp ult double %9, 0.000000e+00
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %9, %struct.SkDPoint* dereferenceable(16) %8) #5
  br label %13

13:                                               ; preds = %3, %11
  %14 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %15 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %2, %struct.SkDPoint* dereferenceable(16) %14) #5
  %16 = fcmp ult double %15, 0.000000e+00
  br i1 %16, label %192, label %190

17:                                               ; preds = %192
  %18 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %196, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %195) #5
  br label %19

19:                                               ; preds = %192, %17
  %20 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 1
  %21 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* dereferenceable(16) %20) #5
  %22 = fcmp ult double %21, 0.000000e+00
  br i1 %22, label %164, label %162

23:                                               ; preds = %164
  %24 = tail call zeroext i1 @_Z22NotAlmostEqualUlps_Pinff(float %188, float %189) #5
  br i1 %24, label %27, label %70

25:                                               ; preds = %164
  %26 = tail call zeroext i1 @_Z19NotAlmostDequalUlpsff(float %188, float %189) #5
  br i1 %26, label %27, label %70

27:                                               ; preds = %23, %25
  %28 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %29 = load i8, i8* %28, align 2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %67

31:                                               ; preds = %27
  %32 = bitcast %struct.SkDLine* %1 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = bitcast %struct.SkDLine* %2 to <2 x double>*
  %35 = load <2 x double>, <2 x double>* %34, align 8
  %36 = fsub <2 x double> %33, %35
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %38 = fmul <2 x double> %180, %37
  %39 = extractelement <2 x double> %38, i32 0
  %40 = extractelement <2 x double> %38, i32 1
  %41 = fsub double %39, %40
  %42 = extractelement <2 x double> %36, i32 1
  %43 = fmul double %169, %42
  %44 = extractelement <2 x double> %36, i32 0
  %45 = fmul double %174, %44
  %46 = fsub double %43, %45
  %47 = fsub double %182, %184
  %48 = fsub double 0.000000e+00, %41
  %49 = fsub double %47, %41
  %50 = fmul double %48, %49
  %51 = fcmp ugt double %50, 0.000000e+00
  br i1 %51, label %67, label %52

52:                                               ; preds = %31
  %53 = fsub double 0.000000e+00, %46
  %54 = fsub double %47, %46
  %55 = fmul double %53, %54
  %56 = fcmp ugt double %55, 0.000000e+00
  br i1 %56, label %67, label %57

57:                                               ; preds = %52
  %58 = fdiv double %41, %47
  %59 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  store double %58, double* %59, align 8
  %60 = fdiv double %46, %47
  %61 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  store double %60, double* %61, align 8
  %62 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %1, double %58) #5
  %63 = extractvalue { double, double } %62, 0
  %64 = extractvalue { double, double } %62, 1
  %65 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 0
  store double %63, double* %65, align 8
  %66 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 1
  store double %64, double* %66, align 8
  store i8 1, i8* %28, align 2
  br label %67

67:                                               ; preds = %52, %31, %57, %27
  %68 = load i8, i8* %185, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %139, label %70

70:                                               ; preds = %25, %23, %67
  %71 = phi i1 [ false, %67 ], [ true, %23 ], [ true, %25 ]
  %72 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #5
  %73 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 0
  %74 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %75 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %75) #5
  store i16 0, i16* %5, align 2
  %76 = bitcast i16* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %76) #5
  store i16 0, i16* %6, align 2
  %77 = bitcast i16* %5 to i8*
  %78 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %2, %struct.SkDPoint* dereferenceable(16) %8, i8* nonnull %77) #5
  %79 = fcmp oge double %78, 0.000000e+00
  %80 = zext i1 %79 to i32
  %81 = bitcast i16* %6 to i8*
  %82 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* dereferenceable(16) %195, i8* nonnull %81) #5
  store double %82, double* %73, align 16
  %83 = fcmp oge double %82, 0.000000e+00
  %84 = zext i1 %83 to i32
  %85 = add nuw nsw i32 %80, %84
  %86 = getelementptr inbounds [2 x i8], [2 x i8]* %193, i64 0, i64 1
  %87 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %2, %struct.SkDPoint* dereferenceable(16) %14, i8* %86) #5
  %88 = fcmp oge double %87, 0.000000e+00
  %89 = zext i1 %88 to i32
  %90 = add nuw nsw i32 %85, %89
  %91 = getelementptr inbounds [2 x i8], [2 x i8]* %194, i64 0, i64 1
  %92 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* dereferenceable(16) %20, i8* %91) #5
  store double %92, double* %74, align 8
  %93 = fcmp oge double %92, 0.000000e+00
  %94 = zext i1 %93 to i32
  %95 = add nuw nsw i32 %90, %94
  switch i32 %95, label %96 [
    i32 0, label %138
    i32 2, label %98
  ]

96:                                               ; preds = %70
  %97 = load i8, i8* %77, align 2, !range !2
  br label %102

98:                                               ; preds = %70
  %99 = load i8, i8* %75, align 2, !range !2
  %100 = load i8, i8* %86, align 1, !range !2
  %101 = icmp eq i8 %99, %100
  br i1 %101, label %102, label %125

102:                                              ; preds = %96, %98
  %103 = phi i8 [ %97, %96 ], [ %99, %98 ]
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %116, label %105

105:                                              ; preds = %102
  %106 = fcmp ogt double %78, 5.000000e-01
  %107 = zext i1 %106 to i64
  %108 = getelementptr inbounds [2 x i8], [2 x i8]* %194, i64 0, i64 %107
  %109 = load i8, i8* %108, align 1, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %116, label %111

111:                                              ; preds = %105
  %112 = uitofp i1 %106 to double
  %113 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 %107
  call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %0, double 0.000000e+00, double %112, %struct.SkDPoint* dereferenceable(16) %8, %struct.SkDPoint* dereferenceable(16) %113) #5
  %114 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %107
  store double -1.000000e+00, double* %114, align 8
  %115 = add nsw i32 %95, -2
  br label %116

116:                                              ; preds = %111, %105, %102
  %117 = phi double [ %78, %102 ], [ -1.000000e+00, %111 ], [ %78, %105 ]
  %118 = phi i32 [ %95, %102 ], [ %115, %111 ], [ %95, %105 ]
  %119 = load i8, i8* %86, align 1, !range !2
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %151

121:                                              ; preds = %116, %151, %157
  %122 = phi double [ %87, %116 ], [ -1.000000e+00, %157 ], [ %87, %151 ]
  %123 = phi i32 [ %118, %116 ], [ %161, %157 ], [ %118, %151 ]
  %124 = icmp sgt i32 %123, 0
  br i1 %124, label %125, label %138

125:                                              ; preds = %98, %121
  %126 = phi double [ %117, %121 ], [ %78, %98 ]
  %127 = phi double [ %122, %121 ], [ %87, %98 ]
  %128 = fcmp ult double %126, 0.000000e+00
  br i1 %128, label %131, label %129

129:                                              ; preds = %125
  %130 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %126, %struct.SkDPoint* dereferenceable(16) %8) #5
  br label %131

131:                                              ; preds = %125, %129
  %132 = fcmp ult double %127, 0.000000e+00
  br i1 %132, label %148, label %146

133:                                              ; preds = %148
  %134 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %149, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %195) #5
  br label %135

135:                                              ; preds = %148, %133
  %136 = load double, double* %74, align 8
  %137 = fcmp ult double %136, 0.000000e+00
  br i1 %137, label %138, label %144

138:                                              ; preds = %70, %135, %144, %121
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %76) #5
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %75) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72) #5
  br label %139

139:                                              ; preds = %67, %138
  %140 = phi i1 [ false, %67 ], [ %71, %138 ]
  call void @_ZN15SkIntersections20cleanUpParallelLinesEb(%class.SkIntersections* %0, i1 zeroext %140)
  %141 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %142 = load i8, i8* %141, align 2
  %143 = zext i8 %142 to i32
  ret i32 %143

144:                                              ; preds = %135
  %145 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %136, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %20) #5
  br label %138

146:                                              ; preds = %131
  %147 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %127, %struct.SkDPoint* dereferenceable(16) %14) #5
  br label %148

148:                                              ; preds = %146, %131
  %149 = load double, double* %73, align 16
  %150 = fcmp ult double %149, 0.000000e+00
  br i1 %150, label %135, label %133

151:                                              ; preds = %116
  %152 = fcmp ogt double %87, 5.000000e-01
  %153 = zext i1 %152 to i64
  %154 = getelementptr inbounds [2 x i8], [2 x i8]* %194, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1, !range !2
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %121, label %157

157:                                              ; preds = %151
  %158 = uitofp i1 %152 to double
  %159 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 %153
  call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %0, double 1.000000e+00, double %158, %struct.SkDPoint* dereferenceable(16) %14, %struct.SkDPoint* dereferenceable(16) %159) #5
  %160 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %153
  store double -1.000000e+00, double* %160, align 8
  %161 = add nsw i32 %118, -2
  br label %121

162:                                              ; preds = %19
  %163 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %21, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %20) #5
  br label %164

164:                                              ; preds = %162, %19
  %165 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %166 = load double, double* %165, align 8
  %167 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 0
  %168 = load double, double* %167, align 8
  %169 = fsub double %166, %168
  %170 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 1
  %171 = load double, double* %170, align 8
  %172 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 1
  %173 = load double, double* %172, align 8
  %174 = fsub double %171, %173
  %175 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 1, i32 0
  %176 = bitcast double* %175 to <2 x double>*
  %177 = load <2 x double>, <2 x double>* %176, align 8
  %178 = bitcast %struct.SkDLine* %2 to <2 x double>*
  %179 = load <2 x double>, <2 x double>* %178, align 8
  %180 = fsub <2 x double> %177, %179
  %181 = extractelement <2 x double> %180, i32 1
  %182 = fmul double %169, %181
  %183 = extractelement <2 x double> %180, i32 0
  %184 = fmul double %174, %183
  %185 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  %186 = load i8, i8* %185, align 8, !range !2
  %187 = icmp eq i8 %186, 0
  %188 = fptrunc double %182 to float
  %189 = fptrunc double %184 to float
  br i1 %187, label %25, label %23

190:                                              ; preds = %13
  %191 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %15, %struct.SkDPoint* dereferenceable(16) %14) #5
  br label %192

192:                                              ; preds = %190, %13
  %193 = bitcast i16* %5 to [2 x i8]*
  %194 = bitcast i16* %6 to [2 x i8]*
  %195 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 0
  %196 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* dereferenceable(16) %195) #5
  %197 = fcmp ult double %196, 0.000000e+00
  br i1 %197, label %19, label %17
}

declare double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #1

declare i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #1

declare double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16), i8*) local_unnamed_addr #1

declare void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN15SkIntersections19HorizontalInterceptERK7SkDLined(%struct.SkDLine* nocapture readonly dereferenceable(32), double) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8
  %5 = fsub double %1, %4
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 1
  %7 = load double, double* %6, align 8
  %8 = fsub double %7, %4
  %9 = fdiv double %5, %8
  %10 = fcmp olt double %9, 0x3CD0000000000000
  %11 = fcmp ogt double %9, 0x3FEFFFFFFFFFFFF8
  %12 = select i1 %11, double 1.000000e+00, double %9
  %13 = select i1 %10, double 0.000000e+00, double %12
  ret double %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections10horizontalERK7SkDLinedddb(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDPoint, align 8
  %8 = alloca %struct.SkDPoint, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 3, i8* %10, align 1
  %11 = bitcast %struct.SkDPoint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %12 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %7, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %7, i64 0, i32 1
  store double %2, double* %12, align 8
  store double %4, double* %13, align 8
  %14 = call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  %15 = fcmp ult double %14, 0.000000e+00
  br i1 %15, label %19, label %16

16:                                               ; preds = %6
  %17 = uitofp i1 %5 to double
  %18 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %14, double %17, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  br label %19

19:                                               ; preds = %6, %16
  %20 = fcmp une double %2, %3
  br i1 %20, label %21, label %43

21:                                               ; preds = %19
  %22 = bitcast %struct.SkDPoint* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #5
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %8, i64 0, i32 0
  %24 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %8, i64 0, i32 1
  store double %3, double* %23, align 8
  store double %4, double* %24, align 8
  %25 = call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %8) #5
  %26 = fcmp ult double %25, 0.000000e+00
  br i1 %26, label %31, label %27

27:                                               ; preds = %21
  %28 = xor i1 %5, true
  %29 = uitofp i1 %28 to double
  %30 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %25, double %29, %struct.SkDPoint* nonnull dereferenceable(16) %8) #5
  br label %31

31:                                               ; preds = %21, %27
  %32 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0
  %33 = call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %32, double %2, double %3, double %4) #5
  %34 = fcmp ult double %33, 0.000000e+00
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = fsub double 1.000000e+00, %33
  %37 = select i1 %5, double %36, double %33
  %38 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %37, %struct.SkDPoint* dereferenceable(16) %32) #5
  br label %39

39:                                               ; preds = %31, %35
  %40 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %41 = call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %40, double %2, double %3, double %4) #5
  %42 = fcmp ult double %41, 0.000000e+00
  br i1 %42, label %155, label %151

43:                                               ; preds = %155, %19
  %44 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 1
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 1
  %48 = load double, double* %47, align 8
  %49 = bitcast double %48 to i64
  %50 = bitcast i64 %46 to double
  %51 = fcmp olt double %48, %50
  %52 = select i1 %51, i64 %49, i64 %46
  %53 = bitcast i64 %52 to double
  %54 = fcmp ogt double %53, %4
  br i1 %54, label %107, label %55

55:                                               ; preds = %43
  %56 = select i1 %51, i64 %46, i64 %49
  %57 = bitcast i64 %56 to double
  %58 = fcmp olt double %57, %4
  br i1 %58, label %107, label %59

59:                                               ; preds = %55
  %60 = fptrunc double %53 to float
  %61 = fptrunc double %57 to float
  %62 = call zeroext i1 @_Z15AlmostEqualUlpsff(float %60, float %61) #5
  br i1 %62, label %63, label %72

63:                                               ; preds = %59
  %64 = fsub double %57, %53
  %65 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 0
  %66 = load double, double* %65, align 8
  %67 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %68 = load double, double* %67, align 8
  %69 = fsub double %66, %68
  %70 = call double @llvm.fabs.f64(double %69) #5
  %71 = fcmp olt double %64, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %63, %59
  %73 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %74 = load i8, i8* %73, align 2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %107

76:                                               ; preds = %72
  %77 = load double, double* %44, align 8
  %78 = fsub double %4, %77
  %79 = load double, double* %47, align 8
  %80 = fsub double %79, %77
  %81 = fdiv double %78, %80
  %82 = fcmp olt double %81, 0x3CD0000000000000
  %83 = fcmp ogt double %81, 0x3FEFFFFFFFFFFFF8
  %84 = select i1 %83, double 1.000000e+00, double %81
  %85 = select i1 %82, double 0.000000e+00, double %84
  %86 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  store double %85, double* %86, align 8
  %87 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 0
  %88 = load double, double* %87, align 8
  %89 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %90 = load double, double* %89, align 8
  %91 = fsub double %90, %88
  %92 = fmul double %91, %85
  %93 = fadd double %88, %92
  %94 = fsub double %2, %93
  %95 = fsub double %3, %93
  %96 = fmul double %94, %95
  %97 = fcmp ugt double %96, 0.000000e+00
  br i1 %97, label %107, label %98

98:                                               ; preds = %76
  %99 = fsub double %93, %2
  %100 = fsub double %3, %2
  %101 = fdiv double %99, %100
  %102 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  %103 = fsub double 1.000000e+00, %101
  %104 = select i1 %5, double %103, double %101
  store double %104, double* %102, align 8
  %105 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 0
  store double %93, double* %105, align 8
  %106 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 1
  store double %4, double* %106, align 8
  store i8 1, i8* %73, align 2
  br label %107

107:                                              ; preds = %76, %43, %55, %98, %72
  %108 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  %109 = load i8, i8* %108, align 8, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %141, label %111

111:                                              ; preds = %107, %63
  %112 = phi i1 [ false, %107 ], [ true, %63 ]
  %113 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %7, i8* null) #5
  %114 = fcmp ult double %113, 0.000000e+00
  br i1 %114, label %118, label %115

115:                                              ; preds = %111
  %116 = uitofp i1 %5 to double
  %117 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %113, double %116, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  br label %118

118:                                              ; preds = %111, %115
  br i1 %20, label %119, label %141

119:                                              ; preds = %118
  %120 = bitcast %struct.SkDPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120) #5
  %121 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %122 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  store double %3, double* %121, align 8
  store double %4, double* %122, align 8
  %123 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %9, i8* null) #5
  %124 = fcmp ult double %123, 0.000000e+00
  br i1 %124, label %129, label %125

125:                                              ; preds = %119
  %126 = xor i1 %5, true
  %127 = uitofp i1 %126 to double
  %128 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %123, double %127, %struct.SkDPoint* nonnull dereferenceable(16) %9) #5
  br label %129

129:                                              ; preds = %119, %125
  %130 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0
  %131 = call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %130, double %2, double %3, double %4) #5
  %132 = fcmp ult double %131, 0.000000e+00
  br i1 %132, label %137, label %133

133:                                              ; preds = %129
  %134 = fsub double 1.000000e+00, %131
  %135 = select i1 %5, double %134, double %131
  %136 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %135, %struct.SkDPoint* dereferenceable(16) %130) #5
  br label %137

137:                                              ; preds = %129, %133
  %138 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %139 = call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %138, double %2, double %3, double %4) #5
  %140 = fcmp ult double %139, 0.000000e+00
  br i1 %140, label %150, label %146

141:                                              ; preds = %107, %118, %150
  %142 = phi i1 [ %112, %118 ], [ %112, %150 ], [ false, %107 ]
  call void @_ZN15SkIntersections20cleanUpParallelLinesEb(%class.SkIntersections* %0, i1 zeroext %142)
  %143 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %144 = load i8, i8* %143, align 2
  %145 = zext i8 %144 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  ret i32 %145

146:                                              ; preds = %137
  %147 = fsub double 1.000000e+00, %139
  %148 = select i1 %5, double %147, double %139
  %149 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %148, %struct.SkDPoint* dereferenceable(16) %138) #5
  br label %150

150:                                              ; preds = %146, %137
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120) #5
  br label %141

151:                                              ; preds = %39
  %152 = fsub double 1.000000e+00, %41
  %153 = select i1 %5, double %152, double %41
  %154 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %153, %struct.SkDPoint* dereferenceable(16) %40) #5
  br label %155

155:                                              ; preds = %151, %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #5
  br label %43
}

declare double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #1

declare double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN15SkIntersections17VerticalInterceptERK7SkDLined(%struct.SkDLine* nocapture readonly dereferenceable(32), double) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = fsub double %1, %4
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %7 = load double, double* %6, align 8
  %8 = fsub double %7, %4
  %9 = fdiv double %5, %8
  %10 = fcmp olt double %9, 0x3CD0000000000000
  %11 = fcmp ogt double %9, 0x3FEFFFFFFFFFFFF8
  %12 = select i1 %11, double 1.000000e+00, double %9
  %13 = select i1 %10, double 0.000000e+00, double %12
  ret double %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections8verticalERK7SkDLinedddb(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDPoint, align 8
  %8 = alloca %struct.SkDPoint, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 3, i8* %10, align 1
  %11 = bitcast %struct.SkDPoint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %12 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %7, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %7, i64 0, i32 1
  store double %4, double* %12, align 8
  store double %2, double* %13, align 8
  %14 = call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  %15 = fcmp ult double %14, 0.000000e+00
  br i1 %15, label %19, label %16

16:                                               ; preds = %6
  %17 = uitofp i1 %5 to double
  %18 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %14, double %17, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  br label %19

19:                                               ; preds = %6, %16
  %20 = fcmp une double %2, %3
  br i1 %20, label %21, label %43

21:                                               ; preds = %19
  %22 = bitcast %struct.SkDPoint* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #5
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %8, i64 0, i32 0
  %24 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %8, i64 0, i32 1
  store double %4, double* %23, align 8
  store double %3, double* %24, align 8
  %25 = call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %8) #5
  %26 = fcmp ult double %25, 0.000000e+00
  br i1 %26, label %31, label %27

27:                                               ; preds = %21
  %28 = xor i1 %5, true
  %29 = uitofp i1 %28 to double
  %30 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %25, double %29, %struct.SkDPoint* nonnull dereferenceable(16) %8) #5
  br label %31

31:                                               ; preds = %21, %27
  %32 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0
  %33 = call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %32, double %2, double %3, double %4) #5
  %34 = fcmp ult double %33, 0.000000e+00
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = fsub double 1.000000e+00, %33
  %37 = select i1 %5, double %36, double %33
  %38 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %37, %struct.SkDPoint* dereferenceable(16) %32) #5
  br label %39

39:                                               ; preds = %31, %35
  %40 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %41 = call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %40, double %2, double %3, double %4) #5
  %42 = fcmp ult double %41, 0.000000e+00
  br i1 %42, label %156, label %152

43:                                               ; preds = %156, %19
  %44 = bitcast %struct.SkDLine* %1 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %47 = load double, double* %46, align 8
  %48 = bitcast double %47 to i64
  %49 = bitcast i64 %45 to double
  %50 = fcmp olt double %47, %49
  %51 = select i1 %50, i64 %48, i64 %45
  %52 = select i1 %50, i64 %45, i64 %48
  %53 = bitcast i64 %51 to double
  %54 = bitcast i64 %52 to double
  %55 = fcmp ugt double %53, %54
  br i1 %55, label %62, label %56

56:                                               ; preds = %43
  %57 = fsub double %53, %4
  %58 = fcmp olt double %57, 0x3CD0000000000000
  %59 = fsub double %4, %54
  %60 = fcmp olt double %59, 0x3CD0000000000000
  %61 = and i1 %58, %60
  br i1 %61, label %68, label %108

62:                                               ; preds = %43
  %63 = fsub double %4, %53
  %64 = fcmp olt double %63, 0x3CD0000000000000
  %65 = fsub double %54, %4
  %66 = fcmp olt double %65, 0x3CD0000000000000
  %67 = and i1 %64, %66
  br i1 %67, label %68, label %108

68:                                               ; preds = %62, %56
  %69 = fptrunc double %53 to float
  %70 = fptrunc double %54 to float
  %71 = call zeroext i1 @_Z15AlmostEqualUlpsff(float %69, float %70) #5
  br i1 %71, label %112, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %74 = load i8, i8* %73, align 2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %108

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 0
  %78 = load double, double* %77, align 8
  %79 = fsub double %4, %78
  %80 = load double, double* %46, align 8
  %81 = fsub double %80, %78
  %82 = fdiv double %79, %81
  %83 = fcmp olt double %82, 0x3CD0000000000000
  %84 = fcmp ogt double %82, 0x3FEFFFFFFFFFFFF8
  %85 = select i1 %84, double 1.000000e+00, double %82
  %86 = select i1 %83, double 0.000000e+00, double %85
  %87 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  store double %86, double* %87, align 8
  %88 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 1
  %89 = load double, double* %88, align 8
  %90 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 1
  %91 = load double, double* %90, align 8
  %92 = fsub double %91, %89
  %93 = fmul double %92, %86
  %94 = fadd double %89, %93
  %95 = fsub double %2, %94
  %96 = fsub double %3, %94
  %97 = fmul double %95, %96
  %98 = fcmp ugt double %97, 0.000000e+00
  br i1 %98, label %108, label %99

99:                                               ; preds = %76
  %100 = fsub double %94, %2
  %101 = fsub double %3, %2
  %102 = fdiv double %100, %101
  %103 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 0
  %104 = fsub double 1.000000e+00, %102
  %105 = select i1 %5, double %104, double %102
  store double %105, double* %103, align 8
  %106 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 0
  store double %4, double* %106, align 8
  %107 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 0, i32 1
  store double %94, double* %107, align 8
  store i8 1, i8* %73, align 2
  br label %108

108:                                              ; preds = %76, %62, %56, %99, %72
  %109 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  %110 = load i8, i8* %109, align 8, !range !2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %142, label %112

112:                                              ; preds = %108, %68
  %113 = phi i1 [ false, %108 ], [ true, %68 ]
  %114 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %7, i8* null) #5
  %115 = fcmp ult double %114, 0.000000e+00
  br i1 %115, label %119, label %116

116:                                              ; preds = %112
  %117 = uitofp i1 %5 to double
  %118 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %114, double %117, %struct.SkDPoint* nonnull dereferenceable(16) %7) #5
  br label %119

119:                                              ; preds = %112, %116
  br i1 %20, label %120, label %142

120:                                              ; preds = %119
  %121 = bitcast %struct.SkDPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #5
  %122 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %123 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  store double %4, double* %122, align 8
  store double %3, double* %123, align 8
  %124 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %1, %struct.SkDPoint* nonnull dereferenceable(16) %9, i8* null) #5
  %125 = fcmp ult double %124, 0.000000e+00
  br i1 %125, label %130, label %126

126:                                              ; preds = %120
  %127 = xor i1 %5, true
  %128 = uitofp i1 %127 to double
  %129 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %124, double %128, %struct.SkDPoint* nonnull dereferenceable(16) %9) #5
  br label %130

130:                                              ; preds = %120, %126
  %131 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0
  %132 = call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %131, double %2, double %3, double %4) #5
  %133 = fcmp ult double %132, 0.000000e+00
  br i1 %133, label %138, label %134

134:                                              ; preds = %130
  %135 = fsub double 1.000000e+00, %132
  %136 = select i1 %5, double %135, double %132
  %137 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 0.000000e+00, double %136, %struct.SkDPoint* dereferenceable(16) %131) #5
  br label %138

138:                                              ; preds = %130, %134
  %139 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %140 = call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %139, double %2, double %3, double %4) #5
  %141 = fcmp ult double %140, 0.000000e+00
  br i1 %141, label %151, label %147

142:                                              ; preds = %108, %119, %151
  %143 = phi i1 [ %113, %119 ], [ %113, %151 ], [ false, %108 ]
  call void @_ZN15SkIntersections20cleanUpParallelLinesEb(%class.SkIntersections* %0, i1 zeroext %143)
  %144 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %145 = load i8, i8* %144, align 2
  %146 = zext i8 %145 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  ret i32 %146

147:                                              ; preds = %138
  %148 = fsub double 1.000000e+00, %140
  %149 = select i1 %5, double %148, double %140
  %150 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %149, %struct.SkDPoint* dereferenceable(16) %139) #5
  br label %151

151:                                              ; preds = %147, %138
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #5
  br label %142

152:                                              ; preds = %39
  %153 = fsub double 1.000000e+00, %41
  %154 = select i1 %5, double %153, double %41
  %155 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double 1.000000e+00, double %154, %struct.SkDPoint* dereferenceable(16) %40) #5
  br label %156

156:                                              ; preds = %152, %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #5
  br label %43
}

declare double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #1

declare double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #1

declare zeroext i1 @_Z22NotAlmostEqualUlps_Pinff(float, float) local_unnamed_addr #1

declare zeroext i1 @_Z19NotAlmostDequalUlpsff(float, float) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
