; ModuleID = '../../third_party/skia/src/core/SkDrawable.cpp'
source_filename = "../../third_party/skia/src/core/SkDrawable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%class.sk_sp.13 = type { %class.SkBBoxHierarchy* }
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %class.SkRecorder* }
%class.SkRecorder = type opaque
%class.sk_sp.20 = type { %class.SkRecord* }
%class.SkRecord = type opaque
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.SkMiniRecorder* }
%class.SkMiniRecorder = type opaque
%class.SkDrawable = type { %class.SkFlattenable.base, i32 }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.1, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.3" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.1 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkMatrix = type { [9 x float], i32 }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%class.SkPictureRecorder = type { i8, %struct.SkRect, %class.sk_sp.13, %"class.std::__1::unique_ptr.14", %class.sk_sp.20, %"class.std::__1::unique_ptr.21" }
%class.sk_sp.27 = type { %class.SkPicture* }
%class.SkBBHFactory = type { i32 (...)** }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.sk_sp.28 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type opaque
%class.SkWriteBuffer = type opaque
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.35, i32, i32 }
%class.sk_sp.35 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.36" }
%"struct.std::__1::atomic.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__cxx_atomic_impl.39" }
%"struct.std::__1::__cxx_atomic_impl.39" = type { %"struct.std::__1::__cxx_atomic_base_impl.40" }
%"struct.std::__1::__cxx_atomic_base_impl.40" = type { i8 }
%struct.SkISize = type { i32, i32 }

$_ZN10SkDrawableD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK10SkDrawable10getFactoryEv = comdat any

$_ZNK10SkDrawable11getTypeNameEv = comdat any

$_ZNK13SkFlattenable7flattenER13SkWriteBuffer = comdat any

$_ZNK10SkDrawable18getFlattenableTypeEv = comdat any

$_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo = comdat any

$_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZTV10SkDrawable = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkDrawable*)* @_ZN10SkDrawableD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.28*, %class.SkReadBuffer*)* (%class.SkDrawable*)* @_ZNK10SkDrawable10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkDrawable*)* @_ZNK10SkDrawable11getTypeNameEv to i8*), i8* bitcast (void (%class.SkFlattenable*, %class.SkWriteBuffer*)* @_ZNK13SkFlattenable7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkDrawable*)* @_ZNK10SkDrawable18getFlattenableTypeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.SkDrawable::GpuDrawHandler"* (%class.SkDrawable*, i32, %class.SkMatrix*, %struct.SkIRect*, %struct.SkImageInfo*)* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo to i8*), i8* bitcast (%"class.SkDrawable::GpuDrawHandler"* (%class.SkDrawable*, i32, %class.SkMatrix*)* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix to i8*), i8* bitcast (%class.SkPicture* (%class.SkDrawable*)* @_ZN10SkDrawable20onNewPictureSnapshotEv to i8*)] }, align 8
@__const._ZN10SkDrawable20onNewPictureSnapshotEv.recorder = private unnamed_addr constant { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.13, %"class.std::__1::unique_ptr.14", %class.sk_sp.20, %"class.std::__1::unique_ptr.21" } { i8 -86, [3 x i8] c"\AA\AA\AA", %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [4 x i8] c"\AA\AA\AA\AA", %class.sk_sp.13 { %class.SkBBoxHierarchy* inttoptr (i64 -6148914691236517206 to %class.SkBBoxHierarchy*) }, %"class.std::__1::unique_ptr.14" { %"class.std::__1::__compressed_pair.15" { %"struct.std::__1::__compressed_pair_elem.16" { %class.SkRecorder* inttoptr (i64 -6148914691236517206 to %class.SkRecorder*) } } }, %class.sk_sp.20 { %class.SkRecord* inttoptr (i64 -6148914691236517206 to %class.SkRecord*) }, %"class.std::__1::unique_ptr.21" { %"class.std::__1::__compressed_pair.22" { %"struct.std::__1::__compressed_pair_elem.23" { %class.SkMiniRecorder* inttoptr (i64 -6148914691236517206 to %class.SkMiniRecorder*) } } } }, align 8
@_ZZL18next_generation_idvE6nextID = internal global { { i32 } } { { i32 } { i32 1 } }, align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkDrawableC2Ev(%class.SkDrawable* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV10SkDrawable, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDrawable4drawEP8SkCanvasPK8SkMatrix(%class.SkDrawable*, %class.SkCanvas*, %class.SkMatrix*) local_unnamed_addr #1 align 2 {
  %4 = icmp eq %class.SkCanvas* %1, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %1) #8
  %7 = tail call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* nonnull %1) #8
  br label %8

8:                                                ; preds = %3, %5
  %9 = phi i32 [ 0, %3 ], [ %6, %5 ]
  %10 = icmp eq %class.SkMatrix* %2, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  tail call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %1, %class.SkMatrix* nonnull dereferenceable(40) %2) #8
  br label %12

12:                                               ; preds = %8, %11
  %13 = bitcast %class.SkDrawable* %0 to void (%class.SkDrawable*, %class.SkCanvas*)***
  %14 = load void (%class.SkDrawable*, %class.SkCanvas*)**, void (%class.SkDrawable*, %class.SkCanvas*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %14, i64 8
  %16 = load void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %15, align 8
  tail call void %16(%class.SkDrawable* %0, %class.SkCanvas* %1) #8
  br i1 %4, label %18, label %17

17:                                               ; preds = %12
  tail call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %1, i32 %9) #8
  br label %18

18:                                               ; preds = %12, %17
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDrawable4drawEP8SkCanvasff(%class.SkDrawable*, %class.SkCanvas*, float, float) local_unnamed_addr #1 align 2 {
  %5 = alloca %class.SkMatrix, align 16
  %6 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #8
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %8 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %8, align 16, !alias.scope !2
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %10, align 16, !alias.scope !2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %11, align 16, !alias.scope !2
  store i32 16, i32* %7, align 4, !alias.scope !2
  %12 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %5, float %2, float %3) #8
  %13 = icmp eq %class.SkCanvas* %1, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %1) #8
  %16 = call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* nonnull %1) #8
  br label %17

17:                                               ; preds = %14, %4
  %18 = phi i32 [ 0, %4 ], [ %15, %14 ]
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %1, %class.SkMatrix* nonnull dereferenceable(40) %5) #8
  %19 = bitcast %class.SkDrawable* %0 to void (%class.SkDrawable*, %class.SkCanvas*)***
  %20 = load void (%class.SkDrawable*, %class.SkCanvas*)**, void (%class.SkDrawable*, %class.SkCanvas*)*** %19, align 8
  %21 = getelementptr inbounds void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %20, i64 8
  %22 = load void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %21, align 8
  call void %22(%class.SkDrawable* %0, %class.SkCanvas* %1) #8
  br i1 %13, label %24, label %23

23:                                               ; preds = %17
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %1, i32 %18) #8
  br label %24

24:                                               ; preds = %17, %23
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkPicture* @_ZN10SkDrawable18newPictureSnapshotEv(%class.SkDrawable*) local_unnamed_addr #1 align 2 {
  %2 = bitcast %class.SkDrawable* %0 to %class.SkPicture* (%class.SkDrawable*)***
  %3 = load %class.SkPicture* (%class.SkDrawable*)**, %class.SkPicture* (%class.SkDrawable*)*** %2, align 8
  %4 = getelementptr inbounds %class.SkPicture* (%class.SkDrawable*)*, %class.SkPicture* (%class.SkDrawable*)** %3, i64 11
  %5 = load %class.SkPicture* (%class.SkDrawable*)*, %class.SkPicture* (%class.SkDrawable*)** %4, align 8
  %6 = tail call %class.SkPicture* %5(%class.SkDrawable* %0) #8
  ret %class.SkPicture* %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN10SkDrawable15getGenerationIDEv(%class.SkDrawable* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1, %5
  %6 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZL18next_generation_idvE6nextID, i64 0, i32 0, i32 0), i32 1 monotonic
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %5, label %8

8:                                                ; preds = %5
  store i32 %6, i32* %2, align 4
  br label %9

9:                                                ; preds = %8, %1
  %10 = phi i32 [ %6, %8 ], [ %3, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN10SkDrawable9getBoundsEv(%class.SkDrawable*) local_unnamed_addr #1 align 2 {
  %2 = bitcast %class.SkDrawable* %0 to { <2 x float>, <2 x float> } (%class.SkDrawable*)***
  %3 = load { <2 x float>, <2 x float> } (%class.SkDrawable*)**, { <2 x float>, <2 x float> } (%class.SkDrawable*)*** %2, align 8
  %4 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkDrawable*)*, { <2 x float>, <2 x float> } (%class.SkDrawable*)** %3, i64 7
  %5 = load { <2 x float>, <2 x float> } (%class.SkDrawable*)*, { <2 x float>, <2 x float> } (%class.SkDrawable*)** %4, align 8
  %6 = tail call { <2 x float>, <2 x float> } %5(%class.SkDrawable* %0) #8
  ret { <2 x float>, <2 x float> } %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkDrawable20notifyDrawingChangedEv(%class.SkDrawable* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDrawable, %class.SkDrawable* %0, i64 0, i32 1
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkPicture* @_ZN10SkDrawable20onNewPictureSnapshotEv(%class.SkDrawable*) unnamed_addr #1 align 2 {
  %2 = alloca %class.SkPictureRecorder, align 8
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to %struct.SkRect*
  %5 = alloca %class.sk_sp.27, align 8
  %6 = getelementptr inbounds %class.SkPictureRecorder, %class.SkPictureRecorder* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 getelementptr inbounds ({ i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.13, %"class.std::__1::unique_ptr.14", %class.sk_sp.20, %"class.std::__1::unique_ptr.21" }, { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.13, %"class.std::__1::unique_ptr.14", %class.sk_sp.20, %"class.std::__1::unique_ptr.21" }* @__const._ZN10SkDrawable20onNewPictureSnapshotEv.recorder, i64 0, i32 0), i64 56, i1 false)
  call void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder* nonnull %2) #8
  %7 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = bitcast %class.SkDrawable* %0 to { <2 x float>, <2 x float> } (%class.SkDrawable*)***
  %9 = load { <2 x float>, <2 x float> } (%class.SkDrawable*)**, { <2 x float>, <2 x float> } (%class.SkDrawable*)*** %8, align 8
  %10 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkDrawable*)*, { <2 x float>, <2 x float> } (%class.SkDrawable*)** %9, i64 7
  %11 = load { <2 x float>, <2 x float> } (%class.SkDrawable*)*, { <2 x float>, <2 x float> } (%class.SkDrawable*)** %10, align 8
  %12 = call { <2 x float>, <2 x float> } %11(%class.SkDrawable* %0) #8
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %14 = extractvalue { <2 x float>, <2 x float> } %12, 0
  store <2 x float> %14, <2 x float>* %13, align 8
  %15 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %16 = extractvalue { <2 x float>, <2 x float> } %12, 1
  store <2 x float> %16, <2 x float>* %15, align 8
  %17 = call %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder* nonnull %2, %struct.SkRect* nonnull dereferenceable(16) %4, %class.SkBBHFactory* null) #8
  %18 = icmp eq %class.SkCanvas* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %1
  %20 = call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %17) #8
  %21 = call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* nonnull %17) #8
  br label %22

22:                                               ; preds = %19, %1
  %23 = phi i32 [ 0, %1 ], [ %20, %19 ]
  %24 = bitcast %class.SkDrawable* %0 to void (%class.SkDrawable*, %class.SkCanvas*)***
  %25 = load void (%class.SkDrawable*, %class.SkCanvas*)**, void (%class.SkDrawable*, %class.SkCanvas*)*** %24, align 8
  %26 = getelementptr inbounds void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %25, i64 8
  %27 = load void (%class.SkDrawable*, %class.SkCanvas*)*, void (%class.SkDrawable*, %class.SkCanvas*)** %26, align 8
  call void %27(%class.SkDrawable* %0, %class.SkCanvas* %17) #8
  br i1 %18, label %29, label %28

28:                                               ; preds = %22
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %17, i32 %23) #8
  br label %29

29:                                               ; preds = %28, %22
  %30 = bitcast %class.sk_sp.27* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #8
  call void @_ZN17SkPictureRecorder24finishRecordingAsPictureEv(%class.sk_sp.27* nonnull sret %5, %class.SkPictureRecorder* nonnull %2) #8
  %31 = getelementptr inbounds %class.sk_sp.27, %class.sk_sp.27* %5, i64 0, i32 0
  %32 = load %class.SkPicture*, %class.SkPicture** %31, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  call void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #8
  ret %class.SkPicture* %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder*) unnamed_addr #3

declare %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder*, %struct.SkRect* dereferenceable(16), %class.SkBBHFactory*) local_unnamed_addr #3

declare void @_ZN17SkPictureRecorder24finishRecordingAsPictureEv(%class.sk_sp.27* sret, %class.SkPictureRecorder*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10SkDrawableD0Ev(%class.SkDrawable*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #1 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.28*, %class.SkReadBuffer*)* @_ZNK10SkDrawable10getFactoryEv(%class.SkDrawable*) unnamed_addr #1 comdat align 2 {
  ret void (%class.sk_sp.28*, %class.SkReadBuffer*)* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK10SkDrawable11getTypeNameEv(%class.SkDrawable*) unnamed_addr #1 comdat align 2 {
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13SkFlattenable7flattenER13SkWriteBuffer(%class.SkFlattenable*, %class.SkWriteBuffer*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10SkDrawable18getFlattenableTypeEv(%class.SkDrawable*) unnamed_addr #1 comdat align 2 {
  ret i32 1
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkDrawable::GpuDrawHandler"* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrixRK7SkIRectRK11SkImageInfo(%class.SkDrawable*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %struct.SkImageInfo* dereferenceable(24)) unnamed_addr #1 comdat align 2 {
  ret %"class.SkDrawable::GpuDrawHandler"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkDrawable::GpuDrawHandler"* @_ZN10SkDrawable20onSnapGpuDrawHandlerE12GrBackendApiRK8SkMatrix(%class.SkDrawable*, i32, %class.SkMatrix* dereferenceable(40)) unnamed_addr #1 comdat align 2 {
  ret %"class.SkDrawable::GpuDrawHandler"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #3

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #3

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8SkMatrix9TranslateEff: argument 0"}
!4 = distinct !{!4, !"_ZN8SkMatrix9TranslateEff"}
