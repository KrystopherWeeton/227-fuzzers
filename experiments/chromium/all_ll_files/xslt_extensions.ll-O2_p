; ModuleID = '../../third_party/blink/renderer/core/xml/xslt_extensions.cc'
source_filename = "../../third_party/blink/renderer/core/xml/xslt_extensions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._xsltTransformContext = type { %struct._xsltStylesheet*, i32, %struct._xsltTemplate*, i32, i32, %struct._xsltTemplate**, %struct._xsltStackElem*, i32, i32, %struct._xsltStackElem**, i32, %struct._xmlHashTable*, %struct._xmlHashTable*, %struct._xmlHashTable*, i8*, i8*, %struct._xsltDocument*, %struct._xsltDocument*, %struct._xmlNode*, %struct._xmlNodeSet*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlXPathContext*, i32, %struct._xmlHashTable*, %struct._xmlNode*, i32, i8*, i32, i64, i32, i32, i64*, i8*, i32, i32, %struct._xsltRuntimeExtra*, %struct._xsltDocument*, i8*, void (i8*, i8*, ...)*, i8*, void (%struct._xsltTransformContext*, %struct._xmlNode**, i32)*, %struct._xmlDoc*, %struct._xmlDoc*, i32, i8*, i32, i32, i32, i64*, i32, %struct._xmlDict*, %struct._xmlDoc*, i32, i32, i32, %struct._xsltTemplate*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xsltTransformCache*, i8*, %struct._xmlDoc*, %struct._xmlDoc*, i32, i32, i32, i32, i64, i64 }
%struct._xsltStylesheet = type { %struct._xsltStylesheet*, %struct._xsltStylesheet*, %struct._xsltStylesheet*, %struct._xsltDocument*, %struct._xmlDoc*, %struct._xmlHashTable*, i32, %struct._xmlHashTable*, %struct._xsltStackElem*, %struct._xsltTemplate*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._xmlHashTable*, %struct._xmlHashTable*, %struct._xmlHashTable*, i8*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xsltDecimalFormat*, i32, i8*, i8*, i32, i8*, %struct._xsltElemPreComp*, i32, i32, i8*, i8**, i32, i32, i8*, %struct._xmlHashTable*, i32, %struct._xsltDocument*, %struct._xmlDict*, i8*, i8*, i32, i32, i32, %struct._xsltStylesheet*, i32, %struct._xmlHashTable*, %struct._xmlXPathContext* }
%struct._xsltDecimalFormat = type { %struct._xsltDecimalFormat*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct._xsltElemPreComp = type { %struct._xsltElemPreComp*, i32, void (%struct._xsltTransformContext*, %struct._xmlNode*, %struct._xmlNode*, %struct._xsltElemPreComp*)*, %struct._xmlNode*, void (%struct._xsltElemPreComp*)* }
%struct._xsltStackElem = type { %struct._xsltStackElem*, %struct._xsltStylePreComp*, i32, i8*, i8*, i8*, %struct._xmlNode*, %struct._xmlXPathObject*, %struct._xmlDoc*, i32, %struct._xsltTransformContext*, i32 }
%struct._xsltStylePreComp = type { %struct._xsltElemPreComp*, i32, void (%struct._xsltTransformContext*, %struct._xmlNode*, %struct._xmlNode*, %struct._xsltElemPreComp*)*, %struct._xmlNode*, i8*, i32, i32, i8*, i32, i32, i8*, i32, i8*, i8*, i32, i8*, i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, %struct._xsltTemplate*, i8*, i32, i8*, i32, %struct._xsltNumberData, %struct._xmlXPathCompExpr*, %struct._xmlNs**, i32 }
%struct._xsltNumberData = type { i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct._xmlDoc*, %struct._xmlNode*, %struct._xsltCompMatch*, %struct._xsltCompMatch* }
%struct._xsltCompMatch = type opaque
%struct._xmlXPathCompExpr = type opaque
%struct._xmlNs = type { %struct._xmlNs*, i32, i8*, i8*, i8*, %struct._xmlDoc* }
%struct._xmlXPathObject = type { i32, %struct._xmlNodeSet*, i32, double, i8*, i8*, i32, i8*, i32 }
%struct._xmlNodeSet = type { i32, i32, %struct._xmlNode** }
%struct._xmlXPathContext = type { %struct._xmlDoc*, %struct._xmlNode*, i32, i32, %struct._xmlHashTable*, i32, i32, %struct._xmlXPathType*, i32, i32, %struct._xmlHashTable*, i32, i32, %struct._xmlXPathAxis*, %struct._xmlNs**, i32, i8*, i32, i32, i32, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlHashTable*, %struct._xmlXPathObject* (i8*, i8*, i8*)*, i8*, i8*, i8*, i8*, void (%struct._xmlXPathParserContext*, i32)* (i8*, i8*, i8*)*, i8*, %struct._xmlNs**, i32, i8*, void (i8*, %struct._xmlError*)*, %struct._xmlError, %struct._xmlNode*, %struct._xmlDict*, i32, i8*, i64, i64, i32 }
%struct._xmlXPathType = type { i8*, i32 (%struct._xmlXPathObject*, i32)* }
%struct._xmlXPathAxis = type { i8*, %struct._xmlXPathObject* (%struct._xmlXPathParserContext*, %struct._xmlXPathObject*)* }
%struct._xmlXPathParserContext = type { i8*, i8*, i32, %struct._xmlXPathContext*, %struct._xmlXPathObject*, i32, i32, %struct._xmlXPathObject**, %struct._xmlXPathCompExpr*, i32, %struct._xmlNode*, i32 }
%struct._xmlError = type { i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, i8* }
%struct._xmlHashTable = type opaque
%struct._xsltRuntimeExtra = type { i8*, void (i8*)*, %union.anon }
%union.anon = type { i8* }
%struct._xsltDocument = type { %struct._xsltDocument*, i32, %struct._xmlDoc*, i8*, %struct._xsltDocument*, i32, i32 }
%struct._xmlDict = type opaque
%struct._xsltTemplate = type { %struct._xsltTemplate*, %struct._xsltStylesheet*, i8*, float, i8*, i8*, i8*, i8*, %struct._xmlNode*, %struct._xmlNode*, i32, %struct._xmlNs**, i32, i64, i8*, i32, i32, %struct._xsltTemplate**, i32* }
%struct._xmlNode = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNs*, i8*, %struct._xmlAttr*, %struct._xmlNs*, i8*, i16, i16 }
%struct._xmlAttr = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlAttr*, %struct._xmlAttr*, %struct._xmlDoc*, %struct._xmlNs*, i32, i8* }
%struct._xsltTransformCache = type { %struct._xmlDoc*, i32, %struct._xsltStackElem*, i32 }
%struct._xmlDoc = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i32, i32, %struct._xmlDtd*, %struct._xmlDtd*, %struct._xmlNs*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xmlDict*, i8*, i32, i32 }
%struct._xmlDtd = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@.str = private unnamed_addr constant [9 x i8] c"node-set\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"http://exslt.org/common\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"../../third_party/blink/renderer/core/xml/xslt_extensions.cc\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"ret\00", align 1
@xmlFree = external local_unnamed_addr global void (i8*)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22RegisterXSLTExtensionsEP21_xsltTransformContext(%struct._xsltTransformContext*) local_unnamed_addr #0 {
  %2 = tail call i32 @xsltRegisterExtFunction(%struct._xsltTransformContext* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), void (%struct._xmlXPathParserContext*, i32)* nonnull @_ZN5blinkL20ExsltNodeSetFunctionEP22_xmlXPathParserContexti) #4
  ret void
}

declare i32 @xsltRegisterExtFunction(%struct._xsltTransformContext*, i8*, i8*, void (%struct._xmlXPathParserContext*, i32)*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blinkL20ExsltNodeSetFunctionEP22_xmlXPathParserContexti(%struct._xmlXPathParserContext*, i32) #0 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 1
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  tail call void @xmlXPatherror(%struct._xmlXPathParserContext* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i32 45, i32 12) #4
  %6 = icmp eq %struct._xmlXPathParserContext* %0, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct._xmlXPathParserContext, %struct._xmlXPathParserContext* %0, i64 0, i32 2
  store i32 12, i32* %8, align 8
  br label %36

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct._xmlXPathParserContext, %struct._xmlXPathParserContext* %0, i64 0, i32 4
  %11 = load %struct._xmlXPathObject*, %struct._xmlXPathObject** %10, align 8
  %12 = icmp eq %struct._xmlXPathObject* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct._xmlXPathObject, %struct._xmlXPathObject* %11, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  switch i32 %15, label %17 [
    i32 1, label %16
    i32 9, label %16
  ]

16:                                               ; preds = %13, %13
  tail call void @xsltFunctionNodeSet(%struct._xmlXPathParserContext* %0, i32 1) #4
  br label %36

17:                                               ; preds = %13, %9
  %18 = tail call %struct._xsltTransformContext* @xsltXPathGetTransformContext(%struct._xmlXPathParserContext* %0) #4
  %19 = tail call %struct._xmlDoc* @xsltCreateRVT(%struct._xsltTransformContext* %18) #4
  %20 = tail call i32 @xsltRegisterLocalRVT(%struct._xsltTransformContext* %18, %struct._xmlDoc* %19) #4
  %21 = tail call i8* @xmlXPathPopString(%struct._xmlXPathParserContext* %0) #4
  %22 = tail call %struct._xmlNode* @xmlNewDocText(%struct._xmlDoc* %19, i8* %21) #4
  %23 = bitcast %struct._xmlDoc* %19 to %struct._xmlNode*
  %24 = tail call %struct._xmlNode* @xmlAddChild(%struct._xmlNode* %23, %struct._xmlNode* %22) #4
  %25 = tail call %struct._xmlXPathObject* @xmlXPathNewNodeSet(%struct._xmlNode* %22) #4
  %26 = icmp eq %struct._xmlXPathObject* %25, null
  br i1 %26, label %27, label %30

27:                                               ; preds = %17
  %28 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i32 68, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)) #4
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  br label %30

30:                                               ; preds = %17, %27
  %31 = icmp eq i8* %21, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  call void %33(i8* nonnull %21) #4
  br label %34

34:                                               ; preds = %30, %32
  %35 = call i32 @valuePush(%struct._xmlXPathParserContext* %0, %struct._xmlXPathObject* %25) #4
  br label %36

36:                                               ; preds = %7, %5, %34, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @xmlXPatherror(%struct._xmlXPathParserContext*, i8*, i32, i32) local_unnamed_addr #1

declare void @xsltFunctionNodeSet(%struct._xmlXPathParserContext*, i32) local_unnamed_addr #1

declare %struct._xsltTransformContext* @xsltXPathGetTransformContext(%struct._xmlXPathParserContext*) local_unnamed_addr #1

declare %struct._xmlDoc* @xsltCreateRVT(%struct._xsltTransformContext*) local_unnamed_addr #1

declare i32 @xsltRegisterLocalRVT(%struct._xsltTransformContext*, %struct._xmlDoc*) local_unnamed_addr #1

declare i8* @xmlXPathPopString(%struct._xmlXPathParserContext*) local_unnamed_addr #1

declare %struct._xmlNode* @xmlNewDocText(%struct._xmlDoc*, i8*) local_unnamed_addr #1

declare %struct._xmlNode* @xmlAddChild(%struct._xmlNode*, %struct._xmlNode*) local_unnamed_addr #1

declare %struct._xmlXPathObject* @xmlXPathNewNodeSet(%struct._xmlNode*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @valuePush(%struct._xmlXPathParserContext*, %struct._xmlXPathObject*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
