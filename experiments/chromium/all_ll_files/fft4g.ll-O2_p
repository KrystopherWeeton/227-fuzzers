; ModuleID = '../../third_party/webrtc/common_audio/third_party/ooura/fft_size_256/fft4g.cc'
source_filename = "../../third_party/webrtc/common_audio/third_party/ooura/fft_size_256/fft4g.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64, i32, float*, i64* nocapture, float*) local_unnamed_addr #0 {
  %6 = load i64, i64* %3, align 8
  %7 = shl i64 %6, 2
  %8 = icmp ult i64 %7, %0
  br i1 %8, label %9, label %42

9:                                                ; preds = %5
  %10 = lshr i64 %0, 2
  store i64 %10, i64* %3, align 8
  %11 = getelementptr inbounds i64, i64* %3, i64 1
  store i64 1, i64* %11, align 8
  %12 = icmp ugt i64 %0, 11
  br i1 %12, label %13, label %42

13:                                               ; preds = %9
  %14 = lshr i64 %0, 3
  %15 = tail call float @atanf(float 1.000000e+00) #3
  %16 = uitofp i64 %14 to float
  %17 = fdiv float 0x3FE921FB60000000, %16
  store float 1.000000e+00, float* %4, align 4
  %18 = getelementptr inbounds float, float* %4, i64 1
  store float 0.000000e+00, float* %18, align 4
  %19 = fmul float %17, %16
  %20 = tail call float @cosf(float %19) #3
  %21 = getelementptr inbounds float, float* %4, i64 %14
  store float %20, float* %21, align 4
  %22 = add nuw nsw i64 %14, 1
  %23 = getelementptr inbounds float, float* %4, i64 %22
  store float %20, float* %23, align 4
  %24 = icmp ugt i64 %0, 23
  br i1 %24, label %25, label %42

25:                                               ; preds = %13, %25
  %26 = phi i64 [ %38, %25 ], [ 2, %13 ]
  %27 = uitofp i64 %26 to float
  %28 = fmul float %17, %27
  %29 = tail call float @cosf(float %28) #3
  %30 = tail call float @sinf(float %28) #3
  %31 = getelementptr inbounds float, float* %4, i64 %26
  store float %29, float* %31, align 4
  %32 = or i64 %26, 1
  %33 = getelementptr inbounds float, float* %4, i64 %32
  store float %30, float* %33, align 4
  %34 = sub nsw i64 %10, %26
  %35 = getelementptr inbounds float, float* %4, i64 %34
  store float %30, float* %35, align 4
  %36 = add nsw i64 %34, 1
  %37 = getelementptr inbounds float, float* %4, i64 %36
  store float %29, float* %37, align 4
  %38 = add nuw nsw i64 %26, 2
  %39 = icmp ult i64 %38, %14
  br i1 %39, label %25, label %40

40:                                               ; preds = %25
  %41 = getelementptr inbounds i64, i64* %3, i64 2
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16bitrv2EmPmPf(i64 %10, i64* %41, float* %4) #3
  br label %42

42:                                               ; preds = %40, %13, %9, %5
  %43 = phi i64 [ %6, %5 ], [ %10, %9 ], [ %10, %13 ], [ %10, %40 ]
  %44 = getelementptr inbounds i64, i64* %3, i64 1
  %45 = load i64, i64* %44, align 8
  %46 = shl i64 %45, 2
  %47 = icmp ult i64 %46, %0
  br i1 %47, label %48, label %75

48:                                               ; preds = %42
  %49 = lshr i64 %0, 2
  %50 = getelementptr inbounds float, float* %4, i64 %43
  store i64 %49, i64* %44, align 8
  %51 = icmp ugt i64 %0, 7
  br i1 %51, label %52, label %75

52:                                               ; preds = %48
  %53 = lshr i64 %0, 3
  %54 = tail call float @atanf(float 1.000000e+00) #3
  %55 = uitofp i64 %53 to float
  %56 = fdiv float 0x3FE921FB60000000, %55
  %57 = fmul float %56, %55
  %58 = tail call float @cosf(float %57) #3
  store float %58, float* %50, align 4
  %59 = fmul float %58, 5.000000e-01
  %60 = getelementptr inbounds float, float* %50, i64 %53
  store float %59, float* %60, align 4
  %61 = icmp ugt i64 %0, 15
  br i1 %61, label %62, label %75

62:                                               ; preds = %52, %62
  %63 = phi i64 [ %73, %62 ], [ 1, %52 ]
  %64 = uitofp i64 %63 to float
  %65 = fmul float %56, %64
  %66 = tail call float @cosf(float %65) #3
  %67 = fmul float %66, 5.000000e-01
  %68 = getelementptr inbounds float, float* %50, i64 %63
  store float %67, float* %68, align 4
  %69 = tail call float @sinf(float %65) #3
  %70 = fmul float %69, 5.000000e-01
  %71 = sub nsw i64 %49, %63
  %72 = getelementptr inbounds float, float* %50, i64 %71
  store float %70, float* %72, align 4
  %73 = add nuw nsw i64 %63, 1
  %74 = icmp ult i64 %73, %53
  br i1 %74, label %62, label %75

75:                                               ; preds = %62, %52, %48, %42
  %76 = phi i64 [ %45, %42 ], [ %49, %48 ], [ %49, %52 ], [ %49, %62 ]
  %77 = icmp sgt i32 %1, -1
  br i1 %77, label %78, label %133

78:                                               ; preds = %75
  %79 = icmp ugt i64 %0, 4
  br i1 %79, label %80, label %124

80:                                               ; preds = %78
  %81 = getelementptr inbounds i64, i64* %3, i64 2
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16bitrv2EmPmPf(i64 %0, i64* %81, float* %2)
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_17cftfsubEmPfS1_(i64 %0, float* %2, float* %4)
  %82 = getelementptr inbounds float, float* %4, i64 %43
  %83 = lshr i64 %0, 1
  %84 = shl i64 %76, 1
  %85 = udiv i64 %84, %83
  %86 = icmp eq i64 %0, 5
  br i1 %86, label %127, label %87

87:                                               ; preds = %80, %87
  %88 = phi i64 [ %91, %87 ], [ 0, %80 ]
  %89 = phi i64 [ %122, %87 ], [ 2, %80 ]
  %90 = sub i64 %0, %89
  %91 = add i64 %88, %85
  %92 = sub i64 %76, %91
  %93 = getelementptr inbounds float, float* %82, i64 %92
  %94 = load float, float* %93, align 4
  %95 = fsub float 5.000000e-01, %94
  %96 = getelementptr inbounds float, float* %82, i64 %91
  %97 = load float, float* %96, align 4
  %98 = getelementptr inbounds float, float* %2, i64 %89
  %99 = load float, float* %98, align 4
  %100 = getelementptr inbounds float, float* %2, i64 %90
  %101 = load float, float* %100, align 4
  %102 = fsub float %99, %101
  %103 = or i64 %89, 1
  %104 = getelementptr inbounds float, float* %2, i64 %103
  %105 = load float, float* %104, align 4
  %106 = add i64 %90, 1
  %107 = getelementptr inbounds float, float* %2, i64 %106
  %108 = load float, float* %107, align 4
  %109 = fadd float %105, %108
  %110 = fmul float %95, %102
  %111 = fmul float %97, %109
  %112 = fsub float %110, %111
  %113 = fmul float %95, %109
  %114 = fmul float %97, %102
  %115 = fadd float %114, %113
  %116 = fsub float %99, %112
  store float %116, float* %98, align 4
  %117 = fsub float %105, %115
  store float %117, float* %104, align 4
  %118 = load float, float* %100, align 4
  %119 = fadd float %118, %112
  store float %119, float* %100, align 4
  %120 = load float, float* %107, align 4
  %121 = fsub float %120, %115
  store float %121, float* %107, align 4
  %122 = add nuw i64 %89, 2
  %123 = icmp ult i64 %122, %83
  br i1 %123, label %87, label %127

124:                                              ; preds = %78
  %125 = icmp eq i64 %0, 4
  br i1 %125, label %126, label %127

126:                                              ; preds = %124
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_17cftfsubEmPfS1_(i64 4, float* %2, float* %4)
  br label %127

127:                                              ; preds = %87, %80, %124, %126
  %128 = load float, float* %2, align 4
  %129 = getelementptr inbounds float, float* %2, i64 1
  %130 = load float, float* %129, align 4
  %131 = fsub float %128, %130
  %132 = fadd float %128, %130
  store float %132, float* %2, align 4
  store float %131, float* %129, align 4
  br label %274

133:                                              ; preds = %75
  %134 = load float, float* %2, align 4
  %135 = getelementptr inbounds float, float* %2, i64 1
  %136 = load float, float* %135, align 4
  %137 = fsub float %134, %136
  %138 = fmul float %137, 5.000000e-01
  store float %138, float* %135, align 4
  %139 = fsub float %134, %138
  store float %139, float* %2, align 4
  %140 = icmp ugt i64 %0, 4
  br i1 %140, label %141, label %271

141:                                              ; preds = %133
  %142 = getelementptr inbounds float, float* %4, i64 %43
  %143 = fsub float -0.000000e+00, %138
  store float %143, float* %135, align 4
  %144 = lshr i64 %0, 1
  %145 = shl i64 %76, 1
  %146 = udiv i64 %145, %144
  %147 = icmp eq i64 %0, 5
  br i1 %147, label %185, label %148

148:                                              ; preds = %141, %148
  %149 = phi i64 [ %152, %148 ], [ 0, %141 ]
  %150 = phi i64 [ %183, %148 ], [ 2, %141 ]
  %151 = sub i64 %0, %150
  %152 = add i64 %149, %146
  %153 = sub i64 %76, %152
  %154 = getelementptr inbounds float, float* %142, i64 %153
  %155 = load float, float* %154, align 4
  %156 = fsub float 5.000000e-01, %155
  %157 = getelementptr inbounds float, float* %142, i64 %152
  %158 = load float, float* %157, align 4
  %159 = getelementptr inbounds float, float* %2, i64 %150
  %160 = load float, float* %159, align 4
  %161 = getelementptr inbounds float, float* %2, i64 %151
  %162 = load float, float* %161, align 4
  %163 = fsub float %160, %162
  %164 = or i64 %150, 1
  %165 = getelementptr inbounds float, float* %2, i64 %164
  %166 = load float, float* %165, align 4
  %167 = add i64 %151, 1
  %168 = getelementptr inbounds float, float* %2, i64 %167
  %169 = load float, float* %168, align 4
  %170 = fadd float %166, %169
  %171 = fmul float %156, %163
  %172 = fmul float %158, %170
  %173 = fadd float %171, %172
  %174 = fmul float %156, %170
  %175 = fmul float %158, %163
  %176 = fsub float %174, %175
  %177 = fsub float %160, %173
  store float %177, float* %159, align 4
  %178 = fsub float %176, %166
  store float %178, float* %165, align 4
  %179 = load float, float* %161, align 4
  %180 = fadd float %179, %173
  store float %180, float* %161, align 4
  %181 = load float, float* %168, align 4
  %182 = fsub float %176, %181
  store float %182, float* %168, align 4
  %183 = add nuw i64 %150, 2
  %184 = icmp ult i64 %183, %144
  br i1 %184, label %148, label %185

185:                                              ; preds = %148, %141
  %186 = add nuw i64 %144, 1
  %187 = getelementptr inbounds float, float* %2, i64 %186
  %188 = load float, float* %187, align 4
  %189 = fsub float -0.000000e+00, %188
  store float %189, float* %187, align 4
  %190 = getelementptr inbounds i64, i64* %3, i64 2
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16bitrv2EmPmPf(i64 %0, i64* %190, float* %2)
  %191 = icmp ugt i64 %0, 8
  br i1 %191, label %192, label %199

192:                                              ; preds = %185
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16cft1stEmPfS1_(i64 %0, float* %2, float* %4) #3
  %193 = icmp ugt i64 %0, 32
  br i1 %193, label %194, label %199

194:                                              ; preds = %192, %194
  %195 = phi i64 [ %197, %194 ], [ 32, %192 ]
  %196 = phi i64 [ %195, %194 ], [ 8, %192 ]
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16cftmdlEmmPfS1_(i64 %0, i64 %196, float* %2, float* %4) #3
  %197 = shl i64 %195, 2
  %198 = icmp ult i64 %197, %0
  br i1 %198, label %194, label %199

199:                                              ; preds = %194, %192, %185
  %200 = phi i64 [ 2, %185 ], [ 8, %192 ], [ %195, %194 ]
  %201 = shl i64 %200, 2
  %202 = icmp eq i64 %201, %0
  %203 = icmp ne i64 %200, 0
  br i1 %202, label %205, label %204

204:                                              ; preds = %199
  br i1 %203, label %250, label %274

205:                                              ; preds = %199
  br i1 %203, label %206, label %274

206:                                              ; preds = %205, %206
  %207 = phi i64 [ %248, %206 ], [ 0, %205 ]
  %208 = add i64 %207, %200
  %209 = add i64 %208, %200
  %210 = add i64 %209, %200
  %211 = getelementptr inbounds float, float* %2, i64 %207
  %212 = load float, float* %211, align 4
  %213 = getelementptr inbounds float, float* %2, i64 %208
  %214 = load float, float* %213, align 4
  %215 = fadd float %212, %214
  %216 = or i64 %207, 1
  %217 = getelementptr inbounds float, float* %2, i64 %216
  %218 = load float, float* %217, align 4
  %219 = fsub float -0.000000e+00, %218
  %220 = add i64 %208, 1
  %221 = getelementptr inbounds float, float* %2, i64 %220
  %222 = load float, float* %221, align 4
  %223 = fsub float %219, %222
  %224 = fsub float %212, %214
  %225 = fsub float %222, %218
  %226 = getelementptr inbounds float, float* %2, i64 %209
  %227 = load float, float* %226, align 4
  %228 = getelementptr inbounds float, float* %2, i64 %210
  %229 = load float, float* %228, align 4
  %230 = fadd float %227, %229
  %231 = add i64 %209, 1
  %232 = getelementptr inbounds float, float* %2, i64 %231
  %233 = load float, float* %232, align 4
  %234 = add i64 %210, 1
  %235 = getelementptr inbounds float, float* %2, i64 %234
  %236 = load float, float* %235, align 4
  %237 = fadd float %233, %236
  %238 = fsub float %227, %229
  %239 = fsub float %233, %236
  %240 = fadd float %215, %230
  store float %240, float* %211, align 4
  %241 = fsub float %223, %237
  store float %241, float* %217, align 4
  %242 = fsub float %215, %230
  store float %242, float* %226, align 4
  %243 = fadd float %223, %237
  store float %243, float* %232, align 4
  %244 = fsub float %224, %239
  store float %244, float* %213, align 4
  %245 = fsub float %225, %238
  store float %245, float* %221, align 4
  %246 = fadd float %224, %239
  store float %246, float* %228, align 4
  %247 = fadd float %225, %238
  store float %247, float* %235, align 4
  %248 = add nuw i64 %207, 2
  %249 = icmp ult i64 %248, %200
  br i1 %249, label %206, label %274

250:                                              ; preds = %204, %250
  %251 = phi i64 [ %269, %250 ], [ 0, %204 ]
  %252 = add i64 %251, %200
  %253 = getelementptr inbounds float, float* %2, i64 %251
  %254 = load float, float* %253, align 4
  %255 = getelementptr inbounds float, float* %2, i64 %252
  %256 = load float, float* %255, align 4
  %257 = fsub float %254, %256
  %258 = or i64 %251, 1
  %259 = getelementptr inbounds float, float* %2, i64 %258
  %260 = load float, float* %259, align 4
  %261 = add i64 %252, 1
  %262 = getelementptr inbounds float, float* %2, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fsub float %263, %260
  %265 = fadd float %254, %256
  store float %265, float* %253, align 4
  %266 = fsub float -0.000000e+00, %260
  %267 = load float, float* %262, align 4
  %268 = fsub float %266, %267
  store float %268, float* %259, align 4
  store float %257, float* %255, align 4
  store float %264, float* %262, align 4
  %269 = add nuw i64 %251, 2
  %270 = icmp ult i64 %269, %200
  br i1 %270, label %250, label %274

271:                                              ; preds = %133
  %272 = icmp eq i64 %0, 4
  br i1 %272, label %273, label %274

273:                                              ; preds = %271
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_17cftfsubEmPfS1_(i64 4, float* %2, float* %4)
  br label %274

274:                                              ; preds = %250, %206, %205, %204, %273, %271, %127
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc12_GLOBAL__N_16bitrv2EmPmPf(i64, i64* nocapture, float*) unnamed_addr #1 {
  store i64 0, i64* %1, align 8
  %4 = icmp ugt i64 %0, 8
  br i1 %4, label %5, label %92

5:                                                ; preds = %3, %88
  %6 = phi i64 [ %89, %88 ], [ 1, %3 ]
  %7 = phi i64 [ %8, %88 ], [ %0, %3 ]
  %8 = lshr i64 %7, 1
  %9 = icmp eq i64 %6, 0
  br i1 %9, label %88, label %10

10:                                               ; preds = %5
  %11 = icmp ult i64 %6, 4
  br i1 %11, label %77, label %12

12:                                               ; preds = %10
  %13 = and i64 %6, -4
  %14 = insertelement <2 x i64> undef, i64 %8, i32 0
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> zeroinitializer
  %16 = insertelement <2 x i64> undef, i64 %8, i32 0
  %17 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> zeroinitializer
  %18 = add i64 %13, -4
  %19 = lshr exact i64 %18, 2
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %18, 0
  br i1 %22, label %58, label %23

23:                                               ; preds = %12
  %24 = sub nuw nsw i64 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %55, %25 ]
  %27 = phi i64 [ %24, %23 ], [ %56, %25 ]
  %28 = getelementptr inbounds i64, i64* %1, i64 %26
  %29 = bitcast i64* %28 to <2 x i64>*
  %30 = load <2 x i64>, <2 x i64>* %29, align 8
  %31 = getelementptr inbounds i64, i64* %28, i64 2
  %32 = bitcast i64* %31 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = add <2 x i64> %30, %15
  %35 = add <2 x i64> %33, %17
  %36 = add i64 %26, %6
  %37 = getelementptr inbounds i64, i64* %1, i64 %36
  %38 = bitcast i64* %37 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %38, align 8
  %39 = getelementptr inbounds i64, i64* %37, i64 2
  %40 = bitcast i64* %39 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %40, align 8
  %41 = or i64 %26, 4
  %42 = getelementptr inbounds i64, i64* %1, i64 %41
  %43 = bitcast i64* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = getelementptr inbounds i64, i64* %42, i64 2
  %46 = bitcast i64* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  %48 = add <2 x i64> %44, %15
  %49 = add <2 x i64> %47, %17
  %50 = add i64 %41, %6
  %51 = getelementptr inbounds i64, i64* %1, i64 %50
  %52 = bitcast i64* %51 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %52, align 8
  %53 = getelementptr inbounds i64, i64* %51, i64 2
  %54 = bitcast i64* %53 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %54, align 8
  %55 = add i64 %26, 8
  %56 = add i64 %27, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %25, !llvm.loop !2

58:                                               ; preds = %25, %12
  %59 = phi i64 [ 0, %12 ], [ %55, %25 ]
  %60 = icmp eq i64 %21, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i64, i64* %1, i64 %59
  %63 = bitcast i64* %62 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8
  %65 = getelementptr inbounds i64, i64* %62, i64 2
  %66 = bitcast i64* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8
  %68 = add <2 x i64> %64, %15
  %69 = add <2 x i64> %67, %17
  %70 = add i64 %59, %6
  %71 = getelementptr inbounds i64, i64* %1, i64 %70
  %72 = bitcast i64* %71 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %72, align 8
  %73 = getelementptr inbounds i64, i64* %71, i64 2
  %74 = bitcast i64* %73 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %74, align 8
  br label %75

75:                                               ; preds = %58, %61
  %76 = icmp eq i64 %6, %13
  br i1 %76, label %88, label %77

77:                                               ; preds = %75, %10
  %78 = phi i64 [ 0, %10 ], [ %13, %75 ]
  br label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %86, %79 ], [ %78, %77 ]
  %81 = getelementptr inbounds i64, i64* %1, i64 %80
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, %8
  %84 = add i64 %80, %6
  %85 = getelementptr inbounds i64, i64* %1, i64 %84
  store i64 %83, i64* %85, align 8
  %86 = add nuw i64 %80, 1
  %87 = icmp eq i64 %86, %6
  br i1 %87, label %88, label %79, !llvm.loop !4

88:                                               ; preds = %79, %75, %5
  %89 = shl i64 %6, 1
  %90 = shl i64 %6, 4
  %91 = icmp ult i64 %90, %8
  br i1 %91, label %5, label %92

92:                                               ; preds = %88, %3
  %93 = phi i64 [ %0, %3 ], [ %8, %88 ]
  %94 = phi i64 [ 1, %3 ], [ %89, %88 ]
  %95 = phi i64 [ 8, %3 ], [ %90, %88 ]
  %96 = shl i64 %94, 1
  %97 = icmp eq i64 %95, %93
  br i1 %97, label %100, label %98

98:                                               ; preds = %92
  %99 = icmp ugt i64 %94, 1
  br i1 %99, label %205, label %252

100:                                              ; preds = %92
  %101 = icmp eq i64 %94, 0
  br i1 %101, label %252, label %102

102:                                              ; preds = %100
  %103 = shl i64 %94, 2
  br label %104

104:                                              ; preds = %182, %102
  %105 = phi i64 [ 0, %102 ], [ %203, %182 ]
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %182, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds i64, i64* %1, i64 %105
  %109 = shl i64 %105, 1
  br label %110

110:                                              ; preds = %110, %107
  %111 = phi i64 [ 0, %107 ], [ %180, %110 ]
  %112 = shl i64 %111, 1
  %113 = load i64, i64* %108, align 8
  %114 = add i64 %113, %112
  %115 = getelementptr inbounds i64, i64* %1, i64 %111
  %116 = load i64, i64* %115, align 8
  %117 = add i64 %116, %109
  %118 = getelementptr inbounds float, float* %2, i64 %114
  %119 = bitcast float* %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = add i64 %114, 1
  %122 = getelementptr inbounds float, float* %2, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds float, float* %2, i64 %117
  %126 = bitcast float* %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = add i64 %117, 1
  %129 = getelementptr inbounds float, float* %2, i64 %128
  %130 = bitcast float* %129 to i32*
  %131 = load i32, i32* %130, align 4
  store i32 %127, i32* %119, align 4
  store i32 %131, i32* %123, align 4
  store i32 %120, i32* %126, align 4
  store i32 %124, i32* %130, align 4
  %132 = add i64 %114, %96
  %133 = add i64 %117, %103
  %134 = getelementptr inbounds float, float* %2, i64 %132
  %135 = bitcast float* %134 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = add i64 %132, 1
  %138 = getelementptr inbounds float, float* %2, i64 %137
  %139 = bitcast float* %138 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds float, float* %2, i64 %133
  %142 = bitcast float* %141 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = add i64 %133, 1
  %145 = getelementptr inbounds float, float* %2, i64 %144
  %146 = bitcast float* %145 to i32*
  %147 = load i32, i32* %146, align 4
  store i32 %143, i32* %135, align 4
  store i32 %147, i32* %139, align 4
  store i32 %136, i32* %142, align 4
  store i32 %140, i32* %146, align 4
  %148 = add i64 %132, %96
  %149 = sub i64 %133, %96
  %150 = getelementptr inbounds float, float* %2, i64 %148
  %151 = bitcast float* %150 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = add i64 %148, 1
  %154 = getelementptr inbounds float, float* %2, i64 %153
  %155 = bitcast float* %154 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds float, float* %2, i64 %149
  %158 = bitcast float* %157 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = add i64 %149, 1
  %161 = getelementptr inbounds float, float* %2, i64 %160
  %162 = bitcast float* %161 to i32*
  %163 = load i32, i32* %162, align 4
  store i32 %159, i32* %151, align 4
  store i32 %163, i32* %155, align 4
  store i32 %152, i32* %158, align 4
  store i32 %156, i32* %162, align 4
  %164 = add i64 %148, %96
  %165 = add i64 %149, %103
  %166 = getelementptr inbounds float, float* %2, i64 %164
  %167 = bitcast float* %166 to i32*
  %168 = load i32, i32* %167, align 4
  %169 = add i64 %164, 1
  %170 = getelementptr inbounds float, float* %2, i64 %169
  %171 = bitcast float* %170 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds float, float* %2, i64 %165
  %174 = bitcast float* %173 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = add i64 %165, 1
  %177 = getelementptr inbounds float, float* %2, i64 %176
  %178 = bitcast float* %177 to i32*
  %179 = load i32, i32* %178, align 4
  store i32 %175, i32* %167, align 4
  store i32 %179, i32* %171, align 4
  store i32 %168, i32* %174, align 4
  store i32 %172, i32* %178, align 4
  %180 = add nuw i64 %111, 1
  %181 = icmp eq i64 %180, %105
  br i1 %181, label %182, label %110

182:                                              ; preds = %110, %104
  %183 = phi i64 [ 0, %104 ], [ %109, %110 ]
  %184 = add i64 %183, %96
  %185 = getelementptr inbounds i64, i64* %1, i64 %105
  %186 = load i64, i64* %185, align 8
  %187 = add i64 %184, %186
  %188 = add i64 %187, %96
  %189 = getelementptr inbounds float, float* %2, i64 %187
  %190 = bitcast float* %189 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = add i64 %187, 1
  %193 = getelementptr inbounds float, float* %2, i64 %192
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds float, float* %2, i64 %188
  %197 = bitcast float* %196 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = add i64 %188, 1
  %200 = getelementptr inbounds float, float* %2, i64 %199
  %201 = bitcast float* %200 to i32*
  %202 = load i32, i32* %201, align 4
  store i32 %198, i32* %190, align 4
  store i32 %202, i32* %194, align 4
  store i32 %191, i32* %197, align 4
  store i32 %195, i32* %201, align 4
  %203 = add nuw i64 %105, 1
  %204 = icmp eq i64 %203, %94
  br i1 %204, label %252, label %104

205:                                              ; preds = %98, %249
  %206 = phi i64 [ %250, %249 ], [ 1, %98 ]
  %207 = getelementptr inbounds i64, i64* %1, i64 %206
  %208 = shl i64 %206, 1
  br label %209

209:                                              ; preds = %209, %205
  %210 = phi i64 [ 0, %205 ], [ %247, %209 ]
  %211 = shl i64 %210, 1
  %212 = load i64, i64* %207, align 8
  %213 = add i64 %212, %211
  %214 = getelementptr inbounds i64, i64* %1, i64 %210
  %215 = load i64, i64* %214, align 8
  %216 = add i64 %215, %208
  %217 = getelementptr inbounds float, float* %2, i64 %213
  %218 = bitcast float* %217 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = add i64 %213, 1
  %221 = getelementptr inbounds float, float* %2, i64 %220
  %222 = bitcast float* %221 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds float, float* %2, i64 %216
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = add i64 %216, 1
  %228 = getelementptr inbounds float, float* %2, i64 %227
  %229 = bitcast float* %228 to i32*
  %230 = load i32, i32* %229, align 4
  store i32 %226, i32* %218, align 4
  store i32 %230, i32* %222, align 4
  store i32 %219, i32* %225, align 4
  store i32 %223, i32* %229, align 4
  %231 = add i64 %213, %96
  %232 = add i64 %216, %96
  %233 = getelementptr inbounds float, float* %2, i64 %231
  %234 = bitcast float* %233 to i32*
  %235 = load i32, i32* %234, align 4
  %236 = add i64 %231, 1
  %237 = getelementptr inbounds float, float* %2, i64 %236
  %238 = bitcast float* %237 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = getelementptr inbounds float, float* %2, i64 %232
  %241 = bitcast float* %240 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = add i64 %232, 1
  %244 = getelementptr inbounds float, float* %2, i64 %243
  %245 = bitcast float* %244 to i32*
  %246 = load i32, i32* %245, align 4
  store i32 %242, i32* %234, align 4
  store i32 %246, i32* %238, align 4
  store i32 %235, i32* %241, align 4
  store i32 %239, i32* %245, align 4
  %247 = add nuw i64 %210, 1
  %248 = icmp eq i64 %247, %206
  br i1 %248, label %249, label %209

249:                                              ; preds = %209
  %250 = add nuw i64 %206, 1
  %251 = icmp eq i64 %250, %94
  br i1 %251, label %252, label %205

252:                                              ; preds = %249, %182, %100, %98
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc12_GLOBAL__N_17cftfsubEmPfS1_(i64, float*, float* nocapture readonly) unnamed_addr #1 {
  %4 = icmp ugt i64 %0, 8
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16cft1stEmPfS1_(i64 %0, float* %1, float* %2)
  %6 = icmp ugt i64 %0, 32
  br i1 %6, label %7, label %12

7:                                                ; preds = %5, %7
  %8 = phi i64 [ %10, %7 ], [ 32, %5 ]
  %9 = phi i64 [ %8, %7 ], [ 8, %5 ]
  tail call fastcc void @_ZN6webrtc12_GLOBAL__N_16cftmdlEmmPfS1_(i64 %0, i64 %9, float* %1, float* %2)
  %10 = shl i64 %8, 2
  %11 = icmp ult i64 %10, %0
  br i1 %11, label %7, label %12

12:                                               ; preds = %7, %5, %3
  %13 = phi i64 [ 2, %3 ], [ 8, %5 ], [ %8, %7 ]
  %14 = shl i64 %13, 2
  %15 = icmp eq i64 %14, %0
  %16 = icmp ne i64 %13, 0
  br i1 %15, label %18, label %17

17:                                               ; preds = %12
  br i1 %16, label %62, label %82

18:                                               ; preds = %12
  br i1 %16, label %19, label %82

19:                                               ; preds = %18, %19
  %20 = phi i64 [ %60, %19 ], [ 0, %18 ]
  %21 = add i64 %20, %13
  %22 = add i64 %21, %13
  %23 = add i64 %22, %13
  %24 = getelementptr inbounds float, float* %1, i64 %20
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds float, float* %1, i64 %21
  %27 = load float, float* %26, align 4
  %28 = fadd float %25, %27
  %29 = or i64 %20, 1
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = load float, float* %30, align 4
  %32 = add i64 %21, 1
  %33 = getelementptr inbounds float, float* %1, i64 %32
  %34 = load float, float* %33, align 4
  %35 = fadd float %31, %34
  %36 = fsub float %25, %27
  %37 = fsub float %31, %34
  %38 = getelementptr inbounds float, float* %1, i64 %22
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds float, float* %1, i64 %23
  %41 = load float, float* %40, align 4
  %42 = fadd float %39, %41
  %43 = add i64 %22, 1
  %44 = getelementptr inbounds float, float* %1, i64 %43
  %45 = load float, float* %44, align 4
  %46 = add i64 %23, 1
  %47 = getelementptr inbounds float, float* %1, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fadd float %45, %48
  %50 = fsub float %39, %41
  %51 = fsub float %45, %48
  %52 = fadd float %28, %42
  store float %52, float* %24, align 4
  %53 = fadd float %35, %49
  store float %53, float* %30, align 4
  %54 = fsub float %28, %42
  store float %54, float* %38, align 4
  %55 = fsub float %35, %49
  store float %55, float* %44, align 4
  %56 = fsub float %36, %51
  store float %56, float* %26, align 4
  %57 = fadd float %37, %50
  store float %57, float* %33, align 4
  %58 = fadd float %36, %51
  store float %58, float* %40, align 4
  %59 = fsub float %37, %50
  store float %59, float* %47, align 4
  %60 = add nuw i64 %20, 2
  %61 = icmp ult i64 %60, %13
  br i1 %61, label %19, label %82

62:                                               ; preds = %17, %62
  %63 = phi i64 [ %80, %62 ], [ 0, %17 ]
  %64 = add i64 %63, %13
  %65 = getelementptr inbounds float, float* %1, i64 %63
  %66 = load float, float* %65, align 4
  %67 = getelementptr inbounds float, float* %1, i64 %64
  %68 = load float, float* %67, align 4
  %69 = fsub float %66, %68
  %70 = or i64 %63, 1
  %71 = getelementptr inbounds float, float* %1, i64 %70
  %72 = load float, float* %71, align 4
  %73 = add i64 %64, 1
  %74 = getelementptr inbounds float, float* %1, i64 %73
  %75 = load float, float* %74, align 4
  %76 = fsub float %72, %75
  %77 = fadd float %66, %68
  store float %77, float* %65, align 4
  %78 = load float, float* %74, align 4
  %79 = fadd float %72, %78
  store float %79, float* %71, align 4
  store float %69, float* %67, align 4
  store float %76, float* %74, align 4
  %80 = add nuw i64 %63, 2
  %81 = icmp ult i64 %80, %13
  br i1 %81, label %62, label %82

82:                                               ; preds = %62, %19, %17, %18
  ret void
}

; Function Attrs: nofree nounwind
declare float @atanf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc12_GLOBAL__N_16cft1stEmPfS1_(i64, float*, float* nocapture readonly) unnamed_addr #1 {
  %4 = bitcast float* %1 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = shufflevector <4 x float> %5, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %7 = fadd <4 x float> %6, %5
  %8 = fsub <4 x float> %6, %5
  %9 = shufflevector <4 x float> %7, <4 x float> %8, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %10 = getelementptr inbounds float, float* %1, i64 4
  %11 = getelementptr inbounds float, float* %1, i64 6
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = shufflevector <2 x float> %13, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %15 = bitcast float* %11 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %18 = fadd <4 x float> %14, %17
  %19 = fsub <4 x float> %14, %17
  %20 = shufflevector <4 x float> %18, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %21 = fadd <4 x float> %9, %20
  %22 = fsub <4 x float> %9, %20
  %23 = shufflevector <4 x float> %21, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
  %24 = bitcast float* %1 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  %25 = fsub <4 x float> %9, %20
  %26 = fadd <4 x float> %9, %20
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
  %28 = bitcast float* %10 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 4
  %29 = getelementptr inbounds float, float* %2, i64 2
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds float, float* %1, i64 8
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds float, float* %1, i64 10
  %34 = load float, float* %33, align 4
  %35 = fadd float %32, %34
  %36 = getelementptr inbounds float, float* %1, i64 9
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds float, float* %1, i64 11
  %39 = load float, float* %38, align 4
  %40 = fadd float %37, %39
  %41 = fsub float %32, %34
  %42 = fsub float %37, %39
  %43 = getelementptr inbounds float, float* %1, i64 12
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds float, float* %1, i64 14
  %46 = load float, float* %45, align 4
  %47 = fadd float %44, %46
  %48 = getelementptr inbounds float, float* %1, i64 13
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 15
  %51 = load float, float* %50, align 4
  %52 = fadd float %49, %51
  %53 = fsub float %44, %46
  %54 = fsub float %49, %51
  %55 = fadd float %35, %47
  store float %55, float* %31, align 4
  %56 = fadd float %40, %52
  store float %56, float* %36, align 4
  %57 = fsub float %52, %40
  store float %57, float* %43, align 4
  %58 = fsub float %35, %47
  store float %58, float* %48, align 4
  %59 = fsub float %41, %54
  %60 = fadd float %42, %53
  %61 = fsub float %59, %60
  %62 = fmul float %30, %61
  store float %62, float* %33, align 4
  %63 = fadd float %60, %59
  %64 = fmul float %30, %63
  store float %64, float* %38, align 4
  %65 = fadd float %41, %54
  %66 = fsub float %53, %42
  %67 = fsub float %66, %65
  %68 = fmul float %30, %67
  store float %68, float* %45, align 4
  %69 = fadd float %66, %65
  %70 = fmul float %30, %69
  store float %70, float* %50, align 4
  %71 = icmp ugt i64 %0, 16
  br i1 %71, label %72, label %241

72:                                               ; preds = %3, %72
  %73 = phi i64 [ %75, %72 ], [ 0, %3 ]
  %74 = phi i64 [ %239, %72 ], [ 16, %3 ]
  %75 = add i64 %73, 2
  %76 = shl i64 %75, 1
  %77 = getelementptr inbounds float, float* %2, i64 %75
  %78 = load float, float* %77, align 4
  %79 = add i64 %73, 3
  %80 = getelementptr inbounds float, float* %2, i64 %79
  %81 = load float, float* %80, align 4
  %82 = getelementptr inbounds float, float* %2, i64 %76
  %83 = load float, float* %82, align 4
  %84 = or i64 %76, 1
  %85 = getelementptr inbounds float, float* %2, i64 %84
  %86 = load float, float* %85, align 4
  %87 = fmul float %81, 2.000000e+00
  %88 = fmul float %87, %86
  %89 = fsub float %83, %88
  %90 = fmul float %87, %83
  %91 = fsub float %90, %86
  %92 = getelementptr inbounds float, float* %1, i64 %74
  %93 = load float, float* %92, align 4
  %94 = or i64 %74, 2
  %95 = getelementptr inbounds float, float* %1, i64 %94
  %96 = load float, float* %95, align 4
  %97 = fadd float %93, %96
  %98 = or i64 %74, 1
  %99 = getelementptr inbounds float, float* %1, i64 %98
  %100 = load float, float* %99, align 4
  %101 = or i64 %74, 3
  %102 = getelementptr inbounds float, float* %1, i64 %101
  %103 = load float, float* %102, align 4
  %104 = fadd float %100, %103
  %105 = fsub float %93, %96
  %106 = fsub float %100, %103
  %107 = or i64 %74, 4
  %108 = getelementptr inbounds float, float* %1, i64 %107
  %109 = load float, float* %108, align 4
  %110 = or i64 %74, 6
  %111 = getelementptr inbounds float, float* %1, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fadd float %109, %112
  %114 = or i64 %74, 5
  %115 = getelementptr inbounds float, float* %1, i64 %114
  %116 = load float, float* %115, align 4
  %117 = or i64 %74, 7
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fadd float %116, %119
  %121 = fsub float %109, %112
  %122 = fsub float %116, %119
  %123 = fadd float %97, %113
  store float %123, float* %92, align 4
  %124 = fadd float %104, %120
  store float %124, float* %99, align 4
  %125 = fsub float %97, %113
  %126 = fsub float %104, %120
  %127 = fsub float %105, %122
  %128 = fadd float %106, %121
  %129 = insertelement <4 x float> undef, float %83, i32 0
  %130 = insertelement <4 x float> %129, float %83, i32 1
  %131 = insertelement <4 x float> %130, float %78, i32 2
  %132 = insertelement <4 x float> %131, float %81, i32 3
  %133 = insertelement <4 x float> undef, float %127, i32 0
  %134 = insertelement <4 x float> %133, float %128, i32 1
  %135 = insertelement <4 x float> %134, float %125, i32 2
  %136 = insertelement <4 x float> %135, float %125, i32 3
  %137 = fmul <4 x float> %132, %136
  %138 = insertelement <4 x float> undef, float %86, i32 0
  %139 = insertelement <4 x float> %138, float %86, i32 1
  %140 = insertelement <4 x float> %139, float %81, i32 2
  %141 = insertelement <4 x float> %140, float %78, i32 3
  %142 = insertelement <4 x float> undef, float %128, i32 0
  %143 = insertelement <4 x float> %142, float %127, i32 1
  %144 = insertelement <4 x float> %143, float %126, i32 2
  %145 = insertelement <4 x float> %144, float %126, i32 3
  %146 = fmul <4 x float> %141, %145
  %147 = fsub <4 x float> %137, %146
  %148 = fadd <4 x float> %137, %146
  %149 = shufflevector <4 x float> %147, <4 x float> %148, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %150 = bitcast float* %95 to <4 x float>*
  store <4 x float> %149, <4 x float>* %150, align 4
  %151 = fadd float %105, %122
  %152 = fsub float %106, %121
  %153 = fmul float %89, %151
  %154 = fmul float %91, %152
  %155 = fsub float %153, %154
  store float %155, float* %111, align 4
  %156 = fmul float %89, %152
  %157 = fmul float %91, %151
  %158 = fadd float %156, %157
  store float %158, float* %118, align 4
  %159 = or i64 %76, 2
  %160 = getelementptr inbounds float, float* %2, i64 %159
  %161 = load float, float* %160, align 4
  %162 = or i64 %76, 3
  %163 = getelementptr inbounds float, float* %2, i64 %162
  %164 = load float, float* %163, align 4
  %165 = fmul float %78, 2.000000e+00
  %166 = fmul float %165, %164
  %167 = fsub float %161, %166
  %168 = fmul float %165, %161
  %169 = fsub float %168, %164
  %170 = or i64 %74, 8
  %171 = getelementptr inbounds float, float* %1, i64 %170
  %172 = load float, float* %171, align 4
  %173 = or i64 %74, 10
  %174 = getelementptr inbounds float, float* %1, i64 %173
  %175 = load float, float* %174, align 4
  %176 = fadd float %172, %175
  %177 = or i64 %74, 9
  %178 = getelementptr inbounds float, float* %1, i64 %177
  %179 = load float, float* %178, align 4
  %180 = or i64 %74, 11
  %181 = getelementptr inbounds float, float* %1, i64 %180
  %182 = load float, float* %181, align 4
  %183 = fadd float %179, %182
  %184 = fsub float %172, %175
  %185 = fsub float %179, %182
  %186 = or i64 %74, 12
  %187 = getelementptr inbounds float, float* %1, i64 %186
  %188 = load float, float* %187, align 4
  %189 = or i64 %74, 14
  %190 = getelementptr inbounds float, float* %1, i64 %189
  %191 = load float, float* %190, align 4
  %192 = fadd float %188, %191
  %193 = or i64 %74, 13
  %194 = getelementptr inbounds float, float* %1, i64 %193
  %195 = load float, float* %194, align 4
  %196 = or i64 %74, 15
  %197 = getelementptr inbounds float, float* %1, i64 %196
  %198 = load float, float* %197, align 4
  %199 = fadd float %195, %198
  %200 = fsub float %188, %191
  %201 = fsub float %195, %198
  %202 = fadd float %176, %192
  store float %202, float* %171, align 4
  %203 = fadd float %183, %199
  store float %203, float* %178, align 4
  %204 = fsub float %176, %192
  %205 = fsub float %183, %199
  %206 = fsub float -0.000000e+00, %81
  %207 = fsub float %184, %201
  %208 = fadd float %185, %200
  %209 = insertelement <4 x float> undef, float %161, i32 0
  %210 = insertelement <4 x float> %209, float %161, i32 1
  %211 = insertelement <4 x float> %210, float %204, i32 2
  %212 = insertelement <4 x float> %211, float %78, i32 3
  %213 = insertelement <4 x float> undef, float %207, i32 0
  %214 = insertelement <4 x float> %213, float %208, i32 1
  %215 = insertelement <4 x float> %214, float %206, i32 2
  %216 = insertelement <4 x float> %215, float %204, i32 3
  %217 = fmul <4 x float> %212, %216
  %218 = insertelement <4 x float> undef, float %164, i32 0
  %219 = insertelement <4 x float> %218, float %164, i32 1
  %220 = insertelement <4 x float> %219, float %78, i32 2
  %221 = insertelement <4 x float> %220, float %205, i32 3
  %222 = insertelement <4 x float> undef, float %208, i32 0
  %223 = insertelement <4 x float> %222, float %207, i32 1
  %224 = insertelement <4 x float> %223, float %205, i32 2
  %225 = insertelement <4 x float> %224, float %206, i32 3
  %226 = fmul <4 x float> %221, %225
  %227 = fsub <4 x float> %217, %226
  %228 = fadd <4 x float> %217, %226
  %229 = shufflevector <4 x float> %227, <4 x float> %228, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %230 = bitcast float* %174 to <4 x float>*
  store <4 x float> %229, <4 x float>* %230, align 4
  %231 = fadd float %184, %201
  %232 = fsub float %185, %200
  %233 = fmul float %167, %231
  %234 = fmul float %169, %232
  %235 = fsub float %233, %234
  store float %235, float* %190, align 4
  %236 = fmul float %167, %232
  %237 = fmul float %169, %231
  %238 = fadd float %236, %237
  store float %238, float* %197, align 4
  %239 = add i64 %74, 16
  %240 = icmp ult i64 %239, %0
  br i1 %240, label %72, label %241

241:                                              ; preds = %72, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc12_GLOBAL__N_16cftmdlEmmPfS1_(i64, i64, float*, float* nocapture readonly) unnamed_addr #1 {
  %5 = shl i64 %1, 2
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %4, %7
  %8 = phi i64 [ %48, %7 ], [ 0, %4 ]
  %9 = add i64 %8, %1
  %10 = add i64 %9, %1
  %11 = add i64 %10, %1
  %12 = getelementptr inbounds float, float* %2, i64 %8
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds float, float* %2, i64 %9
  %15 = load float, float* %14, align 4
  %16 = fadd float %13, %15
  %17 = or i64 %8, 1
  %18 = getelementptr inbounds float, float* %2, i64 %17
  %19 = load float, float* %18, align 4
  %20 = add i64 %9, 1
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = load float, float* %21, align 4
  %23 = fadd float %19, %22
  %24 = fsub float %13, %15
  %25 = fsub float %19, %22
  %26 = getelementptr inbounds float, float* %2, i64 %10
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds float, float* %2, i64 %11
  %29 = load float, float* %28, align 4
  %30 = fadd float %27, %29
  %31 = add i64 %10, 1
  %32 = getelementptr inbounds float, float* %2, i64 %31
  %33 = load float, float* %32, align 4
  %34 = add i64 %11, 1
  %35 = getelementptr inbounds float, float* %2, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fadd float %33, %36
  %38 = fsub float %27, %29
  %39 = fsub float %33, %36
  %40 = fadd float %16, %30
  store float %40, float* %12, align 4
  %41 = fadd float %23, %37
  store float %41, float* %18, align 4
  %42 = fsub float %16, %30
  store float %42, float* %26, align 4
  %43 = fsub float %23, %37
  store float %43, float* %32, align 4
  %44 = fsub float %24, %39
  store float %44, float* %14, align 4
  %45 = fadd float %25, %38
  store float %45, float* %21, align 4
  %46 = fadd float %24, %39
  store float %46, float* %28, align 4
  %47 = fsub float %25, %38
  store float %47, float* %35, align 4
  %48 = add i64 %8, 2
  %49 = icmp ult i64 %48, %1
  br i1 %49, label %7, label %50

50:                                               ; preds = %7, %4
  %51 = getelementptr inbounds float, float* %3, i64 2
  %52 = load float, float* %51, align 4
  %53 = mul i64 %1, 5
  %54 = icmp ult i64 %5, %53
  br i1 %54, label %55, label %106

55:                                               ; preds = %50, %55
  %56 = phi i64 [ %104, %55 ], [ %5, %50 ]
  %57 = add i64 %56, %1
  %58 = add i64 %57, %1
  %59 = add i64 %58, %1
  %60 = getelementptr inbounds float, float* %2, i64 %56
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds float, float* %2, i64 %57
  %63 = load float, float* %62, align 4
  %64 = fadd float %61, %63
  %65 = or i64 %56, 1
  %66 = getelementptr inbounds float, float* %2, i64 %65
  %67 = load float, float* %66, align 4
  %68 = add i64 %57, 1
  %69 = getelementptr inbounds float, float* %2, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fadd float %67, %70
  %72 = fsub float %61, %63
  %73 = fsub float %67, %70
  %74 = getelementptr inbounds float, float* %2, i64 %58
  %75 = load float, float* %74, align 4
  %76 = getelementptr inbounds float, float* %2, i64 %59
  %77 = load float, float* %76, align 4
  %78 = fadd float %75, %77
  %79 = add i64 %58, 1
  %80 = getelementptr inbounds float, float* %2, i64 %79
  %81 = load float, float* %80, align 4
  %82 = add i64 %59, 1
  %83 = getelementptr inbounds float, float* %2, i64 %82
  %84 = load float, float* %83, align 4
  %85 = fadd float %81, %84
  %86 = fsub float %75, %77
  %87 = fsub float %81, %84
  %88 = fadd float %64, %78
  store float %88, float* %60, align 4
  %89 = fadd float %71, %85
  store float %89, float* %66, align 4
  %90 = fsub float %85, %71
  store float %90, float* %74, align 4
  %91 = fsub float %64, %78
  store float %91, float* %80, align 4
  %92 = fsub float %72, %87
  %93 = fadd float %73, %86
  %94 = fsub float %92, %93
  %95 = fmul float %52, %94
  store float %95, float* %62, align 4
  %96 = fadd float %93, %92
  %97 = fmul float %52, %96
  store float %97, float* %69, align 4
  %98 = fadd float %72, %87
  %99 = fsub float %86, %73
  %100 = fsub float %99, %98
  %101 = fmul float %52, %100
  store float %101, float* %76, align 4
  %102 = fadd float %99, %98
  %103 = fmul float %52, %102
  store float %103, float* %83, align 4
  %104 = add i64 %56, 2
  %105 = icmp ult i64 %104, %53
  br i1 %105, label %55, label %106

106:                                              ; preds = %55, %50
  %107 = shl i64 %1, 3
  %108 = icmp ult i64 %107, %0
  br i1 %108, label %109, label %273

109:                                              ; preds = %106, %270
  %110 = phi i64 [ %112, %270 ], [ 0, %106 ]
  %111 = phi i64 [ %271, %270 ], [ %107, %106 ]
  %112 = add i64 %110, 2
  %113 = shl i64 %112, 1
  %114 = getelementptr inbounds float, float* %3, i64 %112
  %115 = load float, float* %114, align 4
  %116 = add i64 %110, 3
  %117 = getelementptr inbounds float, float* %3, i64 %116
  %118 = load float, float* %117, align 4
  %119 = getelementptr inbounds float, float* %3, i64 %113
  %120 = load float, float* %119, align 4
  %121 = or i64 %113, 1
  %122 = getelementptr inbounds float, float* %3, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fmul float %118, 2.000000e+00
  %125 = fmul float %124, %123
  %126 = fsub float %120, %125
  %127 = fmul float %124, %120
  %128 = fsub float %127, %123
  %129 = add i64 %111, %1
  %130 = icmp ult i64 %111, %129
  br i1 %130, label %131, label %192

131:                                              ; preds = %109, %131
  %132 = phi i64 [ %190, %131 ], [ %111, %109 ]
  %133 = add i64 %132, %1
  %134 = add i64 %133, %1
  %135 = add i64 %134, %1
  %136 = getelementptr inbounds float, float* %2, i64 %132
  %137 = load float, float* %136, align 4
  %138 = getelementptr inbounds float, float* %2, i64 %133
  %139 = load float, float* %138, align 4
  %140 = fadd float %137, %139
  %141 = or i64 %132, 1
  %142 = getelementptr inbounds float, float* %2, i64 %141
  %143 = load float, float* %142, align 4
  %144 = add i64 %133, 1
  %145 = getelementptr inbounds float, float* %2, i64 %144
  %146 = load float, float* %145, align 4
  %147 = fadd float %143, %146
  %148 = fsub float %137, %139
  %149 = fsub float %143, %146
  %150 = getelementptr inbounds float, float* %2, i64 %134
  %151 = load float, float* %150, align 4
  %152 = getelementptr inbounds float, float* %2, i64 %135
  %153 = load float, float* %152, align 4
  %154 = fadd float %151, %153
  %155 = add i64 %134, 1
  %156 = getelementptr inbounds float, float* %2, i64 %155
  %157 = load float, float* %156, align 4
  %158 = add i64 %135, 1
  %159 = getelementptr inbounds float, float* %2, i64 %158
  %160 = load float, float* %159, align 4
  %161 = fadd float %157, %160
  %162 = fsub float %151, %153
  %163 = fsub float %157, %160
  %164 = fadd float %140, %154
  store float %164, float* %136, align 4
  %165 = fadd float %147, %161
  store float %165, float* %142, align 4
  %166 = fsub float %140, %154
  %167 = fsub float %147, %161
  %168 = fmul float %115, %166
  %169 = fmul float %118, %167
  %170 = fsub float %168, %169
  store float %170, float* %150, align 4
  %171 = fmul float %115, %167
  %172 = fmul float %118, %166
  %173 = fadd float %172, %171
  store float %173, float* %156, align 4
  %174 = fsub float %148, %163
  %175 = fadd float %149, %162
  %176 = fmul float %120, %174
  %177 = fmul float %123, %175
  %178 = fsub float %176, %177
  store float %178, float* %138, align 4
  %179 = fmul float %120, %175
  %180 = fmul float %123, %174
  %181 = fadd float %179, %180
  store float %181, float* %145, align 4
  %182 = fadd float %148, %163
  %183 = fsub float %149, %162
  %184 = fmul float %126, %182
  %185 = fmul float %128, %183
  %186 = fsub float %184, %185
  store float %186, float* %152, align 4
  %187 = fmul float %126, %183
  %188 = fmul float %128, %182
  %189 = fadd float %187, %188
  store float %189, float* %159, align 4
  %190 = add i64 %132, 2
  %191 = icmp ult i64 %190, %129
  br i1 %191, label %131, label %192

192:                                              ; preds = %131, %109
  %193 = or i64 %113, 2
  %194 = getelementptr inbounds float, float* %3, i64 %193
  %195 = load float, float* %194, align 4
  %196 = or i64 %113, 3
  %197 = getelementptr inbounds float, float* %3, i64 %196
  %198 = load float, float* %197, align 4
  %199 = fmul float %115, 2.000000e+00
  %200 = fmul float %199, %198
  %201 = fsub float %195, %200
  %202 = fmul float %199, %195
  %203 = fsub float %202, %198
  %204 = add i64 %111, %5
  %205 = add i64 %204, %1
  %206 = icmp ult i64 %204, %205
  br i1 %206, label %207, label %270

207:                                              ; preds = %192
  %208 = fsub float -0.000000e+00, %118
  br label %209

209:                                              ; preds = %207, %209
  %210 = phi i64 [ %204, %207 ], [ %268, %209 ]
  %211 = add i64 %210, %1
  %212 = add i64 %211, %1
  %213 = add i64 %212, %1
  %214 = getelementptr inbounds float, float* %2, i64 %210
  %215 = load float, float* %214, align 4
  %216 = getelementptr inbounds float, float* %2, i64 %211
  %217 = load float, float* %216, align 4
  %218 = fadd float %215, %217
  %219 = add nuw i64 %210, 1
  %220 = getelementptr inbounds float, float* %2, i64 %219
  %221 = load float, float* %220, align 4
  %222 = add i64 %211, 1
  %223 = getelementptr inbounds float, float* %2, i64 %222
  %224 = load float, float* %223, align 4
  %225 = fadd float %221, %224
  %226 = fsub float %215, %217
  %227 = fsub float %221, %224
  %228 = getelementptr inbounds float, float* %2, i64 %212
  %229 = load float, float* %228, align 4
  %230 = getelementptr inbounds float, float* %2, i64 %213
  %231 = load float, float* %230, align 4
  %232 = fadd float %229, %231
  %233 = add i64 %212, 1
  %234 = getelementptr inbounds float, float* %2, i64 %233
  %235 = load float, float* %234, align 4
  %236 = add i64 %213, 1
  %237 = getelementptr inbounds float, float* %2, i64 %236
  %238 = load float, float* %237, align 4
  %239 = fadd float %235, %238
  %240 = fsub float %229, %231
  %241 = fsub float %235, %238
  %242 = fadd float %218, %232
  store float %242, float* %214, align 4
  %243 = fadd float %225, %239
  store float %243, float* %220, align 4
  %244 = fsub float %218, %232
  %245 = fsub float %225, %239
  %246 = fmul float %244, %208
  %247 = fmul float %115, %245
  %248 = fsub float %246, %247
  store float %248, float* %228, align 4
  %249 = fmul float %245, %208
  %250 = fmul float %115, %244
  %251 = fadd float %250, %249
  store float %251, float* %234, align 4
  %252 = fsub float %226, %241
  %253 = fadd float %227, %240
  %254 = fmul float %195, %252
  %255 = fmul float %198, %253
  %256 = fsub float %254, %255
  store float %256, float* %216, align 4
  %257 = fmul float %195, %253
  %258 = fmul float %198, %252
  %259 = fadd float %257, %258
  store float %259, float* %223, align 4
  %260 = fadd float %226, %241
  %261 = fsub float %227, %240
  %262 = fmul float %201, %260
  %263 = fmul float %203, %261
  %264 = fsub float %262, %263
  store float %264, float* %230, align 4
  %265 = fmul float %201, %261
  %266 = fmul float %203, %260
  %267 = fadd float %265, %266
  store float %267, float* %237, align 4
  %268 = add i64 %210, 2
  %269 = icmp ult i64 %268, %205
  br i1 %269, label %209, label %270

270:                                              ; preds = %209, %192
  %271 = add i64 %111, %107
  %272 = icmp ult i64 %271, %0
  br i1 %272, label %109, label %273

273:                                              ; preds = %270, %106
  ret void
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
