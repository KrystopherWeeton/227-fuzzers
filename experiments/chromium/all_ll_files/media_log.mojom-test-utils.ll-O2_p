; ModuleID = 'gen/media/mojo/mojom/media_log.mojom-test-utils.cc'
source_filename = "gen/media/mojo/mojom/media_log.mojom-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::mojom::MediaLogAsyncWaiter" = type { %"class.media::mojom::MediaLog"* }
%"class.media::mojom::MediaLog" = type { i32 (...)** }
%"class.media::mojom::MediaLogInterceptorForTesting" = type { %"class.media::mojom::MediaLog" }
%"struct.media::MediaLogRecord" = type { i32, i32, %"class.base::DictionaryValue", %"class.base::TimeTicks" }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

$_ZN5media5mojom8MediaLogD2Ev = comdat any

$_ZN5media5mojom29MediaLogInterceptorForTestingD0Ev = comdat any

@_ZTVN5media5mojom29MediaLogInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::mojom::MediaLog"*)* @_ZN5media5mojom8MediaLogD2Ev to i8*), i8* bitcast (void (%"class.media::mojom::MediaLogInterceptorForTesting"*)* @_ZN5media5mojom29MediaLogInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.media::mojom::MediaLogInterceptorForTesting"*, %"struct.media::MediaLogRecord"*)* @_ZN5media5mojom29MediaLogInterceptorForTesting12AddLogRecordERKNS_14MediaLogRecordE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5media5mojom19MediaLogAsyncWaiterC1EPNS0_8MediaLogE = hidden unnamed_addr alias void (%"class.media::mojom::MediaLogAsyncWaiter"*, %"class.media::mojom::MediaLog"*), void (%"class.media::mojom::MediaLogAsyncWaiter"*, %"class.media::mojom::MediaLog"*)* @_ZN5media5mojom19MediaLogAsyncWaiterC2EPNS0_8MediaLogE
@_ZN5media5mojom19MediaLogAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.media::mojom::MediaLogAsyncWaiter"*), void (%"class.media::mojom::MediaLogAsyncWaiter"*)* @_ZN5media5mojom19MediaLogAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media5mojom29MediaLogInterceptorForTesting12AddLogRecordERKNS_14MediaLogRecordE(%"class.media::mojom::MediaLogInterceptorForTesting"*, %"struct.media::MediaLogRecord"* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.media::mojom::MediaLogInterceptorForTesting"* %0 to %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)***
  %4 = load %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)**, %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)*, %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)** %4, i64 3
  %6 = load %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)*, %"class.media::mojom::MediaLog"* (%"class.media::mojom::MediaLogInterceptorForTesting"*)** %5, align 8
  %7 = tail call %"class.media::mojom::MediaLog"* %6(%"class.media::mojom::MediaLogInterceptorForTesting"* %0) #5
  %8 = bitcast %"class.media::mojom::MediaLog"* %7 to void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)***
  %9 = load void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)**, void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)*, void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)** %9, i64 2
  %11 = load void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)*, void (%"class.media::mojom::MediaLog"*, %"struct.media::MediaLogRecord"*)** %10, align 8
  tail call void %11(%"class.media::mojom::MediaLog"* %7, %"struct.media::MediaLogRecord"* dereferenceable(48) %1) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media5mojom19MediaLogAsyncWaiterC2EPNS0_8MediaLogE(%"class.media::mojom::MediaLogAsyncWaiter"* nocapture, %"class.media::mojom::MediaLog"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.media::mojom::MediaLogAsyncWaiter", %"class.media::mojom::MediaLogAsyncWaiter"* %0, i64 0, i32 0
  store %"class.media::mojom::MediaLog"* %1, %"class.media::mojom::MediaLog"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media5mojom19MediaLogAsyncWaiterD2Ev(%"class.media::mojom::MediaLogAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media5mojom8MediaLogD2Ev(%"class.media::mojom::MediaLog"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5media5mojom29MediaLogInterceptorForTestingD0Ev(%"class.media::mojom::MediaLogInterceptorForTesting"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
