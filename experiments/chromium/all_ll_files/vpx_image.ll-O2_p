; ModuleID = '../../third_party/libvpx/source/libvpx/vpx/src/vpx_image.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx/src/vpx_image.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.vpx_image* @vpx_img_alloc(%struct.vpx_image*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = tail call fastcc %struct.vpx_image* @img_alloc_helper(%struct.vpx_image* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %4, i8* null)
  ret %struct.vpx_image* %6
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.vpx_image* @img_alloc_helper(%struct.vpx_image*, i32, i32, i32, i32, i32, i8*) unnamed_addr #0 {
  %8 = icmp eq i32 %4, 0
  %9 = select i1 %8, i32 1, i32 %4
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9), !range !2
  %11 = icmp ugt i32 %10, 1
  br i1 %11, label %151, label %12

12:                                               ; preds = %7
  %13 = icmp eq i32 %5, 0
  %14 = select i1 %13, i32 1, i32 %5
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14), !range !2
  %16 = icmp ugt i32 %15, 1
  br i1 %16, label %151, label %17

17:                                               ; preds = %12
  switch i32 %1, label %21 [
    i32 258, label %22
    i32 769, label %22
    i32 265, label %22
    i32 261, label %18
    i32 263, label %18
    i32 262, label %24
    i32 2306, label %30
    i32 2309, label %19
    i32 2311, label %19
    i32 2310, label %20
  ]

18:                                               ; preds = %17, %17
  br label %22

19:                                               ; preds = %17, %17
  br label %22

20:                                               ; preds = %17
  br label %24

21:                                               ; preds = %17
  br label %22

22:                                               ; preds = %17, %17, %17, %21, %19, %18
  %23 = phi i32 [ 16, %21 ], [ 32, %19 ], [ 16, %18 ], [ 12, %17 ], [ 12, %17 ], [ 12, %17 ]
  switch i32 %1, label %24 [
    i32 258, label %26
    i32 769, label %26
    i32 261, label %26
    i32 2306, label %26
    i32 2309, label %26
  ]

24:                                               ; preds = %17, %20, %22
  %25 = phi i32 [ %23, %22 ], [ 48, %20 ], [ 24, %17 ]
  br label %26

26:                                               ; preds = %22, %22, %22, %22, %22, %24
  %27 = phi i32 [ %25, %24 ], [ %23, %22 ], [ %23, %22 ], [ %23, %22 ], [ %23, %22 ], [ %23, %22 ]
  %28 = phi i32 [ 0, %24 ], [ 1, %22 ], [ 1, %22 ], [ 1, %22 ], [ 1, %22 ], [ 1, %22 ]
  switch i32 %1, label %29 [
    i32 258, label %30
    i32 265, label %30
    i32 263, label %30
    i32 769, label %30
    i32 2306, label %30
    i32 2311, label %30
  ]

29:                                               ; preds = %26
  br label %30

30:                                               ; preds = %17, %26, %26, %26, %26, %26, %26, %29
  %31 = phi i32 [ %28, %29 ], [ %28, %26 ], [ %28, %26 ], [ %28, %26 ], [ %28, %26 ], [ %28, %26 ], [ %28, %26 ], [ 1, %17 ]
  %32 = phi i32 [ %27, %29 ], [ %27, %26 ], [ %27, %26 ], [ %27, %26 ], [ %27, %26 ], [ %27, %26 ], [ %27, %26 ], [ 24, %17 ]
  %33 = phi i32 [ 0, %29 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %17 ]
  %34 = and i32 %1, 256
  %35 = icmp ne i32 %34, 0
  %36 = mul i32 %32, %2
  %37 = lshr i32 %36, 3
  %38 = select i1 %35, i32 %2, i32 %37
  %39 = add i32 %14, -1
  %40 = add i32 %39, %38
  %41 = sub i32 0, %14
  %42 = and i32 %40, %41
  %43 = and i32 %1, 2048
  %44 = icmp eq i32 %43, 0
  %45 = lshr exact i32 %43, 11
  %46 = icmp eq %struct.vpx_image* %0, null
  br i1 %46, label %47, label %54

47:                                               ; preds = %30
  %48 = tail call noalias i8* @calloc(i64 1, i64 136) #7
  %49 = icmp eq i8* %48, null
  br i1 %49, label %169, label %50

50:                                               ; preds = %47
  %51 = bitcast i8* %48 to %struct.vpx_image*
  %52 = getelementptr inbounds i8, i8* %48, i64 124
  %53 = bitcast i8* %52 to i32*
  store i32 1, i32* %53, align 4
  br label %56

54:                                               ; preds = %30
  %55 = bitcast %struct.vpx_image* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 136, i1 false)
  br label %56

56:                                               ; preds = %54, %50
  %57 = phi %struct.vpx_image* [ %0, %54 ], [ %51, %50 ]
  %58 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 16
  store i8* %6, i8** %58, align 8
  %59 = icmp eq i8* %6, null
  br i1 %59, label %60, label %85

60:                                               ; preds = %56
  %61 = shl nsw i32 -1, %31
  %62 = xor i32 %61, -1
  %63 = add i32 %62, %2
  %64 = and i32 %63, %61
  %65 = shl nsw i32 -1, %33
  %66 = xor i32 %65, -1
  %67 = add i32 %66, %3
  %68 = and i32 %67, %65
  %69 = mul i32 %64, %32
  %70 = lshr i32 %69, 3
  %71 = select i1 %35, i32 %64, i32 %70
  %72 = add i32 %39, %71
  %73 = and i32 %72, %41
  %74 = zext i32 %68 to i64
  %75 = zext i32 %73 to i64
  %76 = mul nuw i64 %75, %74
  %77 = zext i32 %32 to i64
  %78 = mul i64 %76, %77
  %79 = lshr i64 %78, 3
  %80 = select i1 %35, i64 %79, i64 %76
  %81 = zext i32 %9 to i64
  %82 = tail call i8* @vpx_memalign(i64 %81, i64 %80) #7
  store i8* %82, i8** %58, align 8
  %83 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 17
  store i32 1, i32* %83, align 8
  %84 = icmp eq i8* %82, null
  br i1 %84, label %151, label %85

85:                                               ; preds = %56, %60
  %86 = phi i32 [ %73, %60 ], [ %42, %56 ]
  %87 = phi i32 [ %64, %60 ], [ %2, %56 ]
  %88 = phi i32 [ %68, %60 ], [ %3, %56 ]
  %89 = phi i8* [ %82, %60 ], [ %6, %56 ]
  %90 = shl i32 %86, %45
  %91 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 0
  store i32 %1, i32* %91, align 8
  %92 = select i1 %44, i32 8, i32 16
  %93 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 5
  store i32 %92, i32* %93, align 4
  %94 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 3
  store i32 %87, i32* %94, align 4
  %95 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 4
  store i32 %88, i32* %95, align 8
  %96 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 10
  store i32 %31, i32* %96, align 8
  %97 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 11
  store i32 %33, i32* %97, align 4
  %98 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 14
  store i32 %32, i32* %98, align 8
  %99 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 13, i64 3
  store i32 %90, i32* %99, align 4
  %100 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 13, i64 0
  store i32 %90, i32* %100, align 8
  %101 = lshr i32 %90, %31
  %102 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 13, i64 2
  store i32 %101, i32* %102, align 8
  %103 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 13, i64 1
  store i32 %101, i32* %103, align 4
  %104 = icmp ult i32 %87, %2
  %105 = icmp ult i32 %88, %3
  %106 = or i1 %104, %105
  br i1 %106, label %151, label %107

107:                                              ; preds = %85
  %108 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 6
  store i32 %2, i32* %108, align 8
  %109 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 7
  store i32 %3, i32* %109, align 4
  %110 = icmp eq i32 %34, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 0
  store i8* %89, i8** %112, align 8
  br label %169

113:                                              ; preds = %107
  %114 = and i32 %1, 1024
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %113
  %117 = mul i32 %88, %90
  %118 = zext i32 %117 to i64
  br label %124

119:                                              ; preds = %113
  %120 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 3
  store i8* %89, i8** %120, align 8
  %121 = mul i32 %88, %90
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %89, i64 %122
  br label %124

124:                                              ; preds = %116, %119
  %125 = phi i64 [ %118, %116 ], [ %122, %119 ]
  %126 = phi i8* [ %89, %116 ], [ %123, %119 ]
  %127 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 0
  store i8* %126, i8** %127, align 8
  %128 = getelementptr inbounds i8, i8* %126, i64 %125
  %129 = icmp eq i32 %1, 265
  br i1 %129, label %130, label %134

130:                                              ; preds = %124
  %131 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 1
  store i8* %128, i8** %131, align 8
  %132 = getelementptr inbounds i8, i8* %128, i64 1
  %133 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 2
  store i8* %132, i8** %133, align 8
  br label %169

134:                                              ; preds = %124
  %135 = and i32 %1, 512
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %144

137:                                              ; preds = %134
  %138 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 1
  store i8* %128, i8** %138, align 8
  %139 = lshr i32 %88, %33
  %140 = mul i32 %139, %101
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %128, i64 %141
  %143 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 2
  store i8* %142, i8** %143, align 8
  br label %169

144:                                              ; preds = %134
  %145 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 2
  store i8* %128, i8** %145, align 8
  %146 = lshr i32 %88, %33
  %147 = mul i32 %146, %101
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %128, i64 %148
  %150 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %57, i64 0, i32 12, i64 1
  store i8* %149, i8** %150, align 8
  br label %169

151:                                              ; preds = %85, %60, %12, %7
  %152 = phi %struct.vpx_image* [ %0, %7 ], [ %0, %12 ], [ %57, %60 ], [ %57, %85 ]
  %153 = icmp eq %struct.vpx_image* %152, null
  br i1 %153, label %169, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %152, i64 0, i32 16
  %156 = load i8*, i8** %155, align 8
  %157 = icmp eq i8* %156, null
  br i1 %157, label %163, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %152, i64 0, i32 17
  %160 = load i32, i32* %159, align 8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %163, label %162

162:                                              ; preds = %158
  tail call void @vpx_free(i8* nonnull %156) #7
  br label %163

163:                                              ; preds = %162, %158, %154
  %164 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %152, i64 0, i32 18
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %169, label %167

167:                                              ; preds = %163
  %168 = bitcast %struct.vpx_image* %152 to i8*
  tail call void @free(i8* %168) #7
  br label %169

169:                                              ; preds = %111, %137, %144, %130, %47, %167, %163, %151
  %170 = phi %struct.vpx_image* [ null, %151 ], [ null, %163 ], [ null, %167 ], [ null, %47 ], [ %57, %130 ], [ %57, %144 ], [ %57, %137 ], [ %57, %111 ]
  ret %struct.vpx_image* %170
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.vpx_image* @vpx_img_wrap(%struct.vpx_image*, i32, i32, i32, i32, i8*) local_unnamed_addr #0 {
  %7 = tail call fastcc %struct.vpx_image* @img_alloc_helper(%struct.vpx_image* %0, i32 %1, i32 %2, i32 %3, i32 1, i32 %4, i8* %5)
  ret %struct.vpx_image* %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vpx_img_set_rect(%struct.vpx_image*, i32, i32, i32, i32) local_unnamed_addr #1 {
  %6 = add i32 %3, %1
  %7 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %136, label %10

10:                                               ; preds = %5
  %11 = add i32 %4, %2
  %12 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %11, %13
  br i1 %14, label %136, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 6
  store i32 %3, i32* %16, align 8
  %17 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 7
  store i32 %4, i32* %17, align 4
  %18 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 256
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %37

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 16
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 14
  %26 = load i32, i32* %25, align 8
  %27 = mul i32 %26, %1
  %28 = lshr i32 %27, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 0
  %32 = load i32, i32* %31, align 8
  %33 = mul i32 %32, %2
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %30, i64 %34
  %36 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 0
  store i8* %35, i8** %36, align 8
  br label %136

37:                                               ; preds = %15
  %38 = and i32 %19, 2048
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i32 1, i32 2
  %41 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 16
  %42 = load i8*, i8** %41, align 8
  %43 = and i32 %19, 1024
  %44 = icmp eq i32 %43, 0
  %45 = mul i32 %40, %1
  %46 = zext i32 %45 to i64
  br i1 %44, label %58, label %47

47:                                               ; preds = %37
  %48 = getelementptr inbounds i8, i8* %42, i64 %46
  %49 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 3
  %50 = load i32, i32* %49, align 4
  %51 = mul i32 %50, %2
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %48, i64 %52
  %54 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 3
  store i8* %53, i8** %54, align 8
  %55 = mul i32 %50, %13
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %42, i64 %56
  br label %58

58:                                               ; preds = %37, %47
  %59 = phi i8* [ %57, %47 ], [ %42, %37 ]
  %60 = getelementptr inbounds i8, i8* %59, i64 %46
  %61 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 0
  %62 = load i32, i32* %61, align 8
  %63 = mul i32 %62, %2
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %60, i64 %64
  %66 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 0
  store i8* %65, i8** %66, align 8
  %67 = mul i32 %62, %13
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %59, i64 %68
  %70 = icmp eq i32 %19, 265
  br i1 %70, label %71, label %88

71:                                               ; preds = %58
  %72 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 10
  %73 = load i32, i32* %72, align 8
  %74 = lshr i32 %1, %73
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %69, i64 %75
  %77 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 11
  %78 = load i32, i32* %77, align 4
  %79 = lshr i32 %2, %78
  %80 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 1
  %81 = load i32, i32* %80, align 4
  %82 = mul i32 %79, %81
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %76, i64 %83
  %85 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds i8, i8* %84, i64 1
  %87 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  store i8* %86, i8** %87, align 8
  br label %136

88:                                               ; preds = %58
  %89 = and i32 %19, 512
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 10
  %92 = load i32, i32* %91, align 8
  %93 = lshr i32 %1, %92
  %94 = mul i32 %93, %40
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %69, i64 %95
  %97 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 11
  %98 = load i32, i32* %97, align 4
  %99 = lshr i32 %2, %98
  br i1 %90, label %100, label %118

100:                                              ; preds = %88
  %101 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 1
  %102 = load i32, i32* %101, align 4
  %103 = mul i32 %102, %99
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %96, i64 %104
  %106 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  store i8* %105, i8** %106, align 8
  %107 = lshr i32 %13, %98
  %108 = mul i32 %102, %107
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %69, i64 %109
  %111 = getelementptr inbounds i8, i8* %110, i64 %95
  %112 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 2
  %113 = load i32, i32* %112, align 8
  %114 = mul i32 %113, %99
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %111, i64 %115
  %117 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  store i8* %116, i8** %117, align 8
  br label %136

118:                                              ; preds = %88
  %119 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 2
  %120 = load i32, i32* %119, align 8
  %121 = mul i32 %120, %99
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %96, i64 %122
  %124 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  store i8* %123, i8** %124, align 8
  %125 = lshr i32 %13, %98
  %126 = mul i32 %120, %125
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %69, i64 %127
  %129 = getelementptr inbounds i8, i8* %128, i64 %95
  %130 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 1
  %131 = load i32, i32* %130, align 4
  %132 = mul i32 %131, %99
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %129, i64 %133
  %135 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  store i8* %134, i8** %135, align 8
  br label %136

136:                                              ; preds = %5, %10, %22, %100, %118, %71
  %137 = phi i32 [ 0, %71 ], [ 0, %118 ], [ 0, %100 ], [ 0, %22 ], [ -1, %10 ], [ -1, %5 ]
  ret i32 %137
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_img_flip(%struct.vpx_image* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -1
  %5 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 0
  %6 = bitcast i32* %5 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 8
  %8 = extractelement <4 x i32> %7, i32 0
  %9 = mul nsw i32 %4, %8
  %10 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 0
  %11 = load i8*, i8** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds i8, i8* %11, i64 %12
  store i8* %13, i8** %10, align 8
  %14 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 11
  %15 = load i32, i32* %14, align 4
  %16 = lshr i32 %3, %15
  %17 = add i32 %16, -1
  %18 = extractelement <4 x i32> %7, i32 1
  %19 = mul nsw i32 %17, %18
  %20 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  store i8* %23, i8** %20, align 8
  %24 = extractelement <4 x i32> %7, i32 2
  %25 = mul nsw i32 %24, %17
  %26 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  store i8* %29, i8** %26, align 8
  %30 = extractelement <4 x i32> %7, i32 3
  %31 = mul nsw i32 %30, %4
  %32 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 3
  %33 = load i8*, i8** %32, align 8
  %34 = sext i32 %31 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  store i8* %35, i8** %32, align 8
  %36 = sub nsw <4 x i32> zeroinitializer, %7
  %37 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %37, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_img_free(%struct.vpx_image*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.vpx_image* %0, null
  br i1 %2, label %18, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 16
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 17
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @vpx_free(i8* nonnull %5) #7
  br label %12

12:                                               ; preds = %7, %3, %11
  %13 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 18
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = bitcast %struct.vpx_image* %0 to i8*
  tail call void @free(i8* %17) #7
  br label %18

18:                                               ; preds = %12, %1, %16
  ret void
}

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
