; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/wiener_convolve_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/wiener_convolve_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_wiener_convolve_add_src_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [17280 x i16], align 16
  %13 = bitcast [17280 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 34560, i1 false)
  %14 = add i32 %9, 6
  %15 = shl nsw i32 %14, 7
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [17280 x i16], [17280 x i16]* %12, i64 0, i64 %16
  %18 = bitcast i16* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 128, i1 false)
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = getelementptr inbounds i8, i8* %20, i64 -3
  %22 = bitcast i16* %4 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = add <8 x i16> %23, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %25 = bitcast <8 x i16> %24 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, -1
  %33 = shl i32 1, %32
  %34 = add nsw i32 %33, 16384
  %35 = insertelement <4 x i32> undef, i32 %34, i32 0
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> zeroinitializer
  %37 = icmp sgt i32 %14, 0
  br i1 %37, label %38, label %122

38:                                               ; preds = %11
  %39 = shufflevector <2 x i64> %29, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %40 = shufflevector <2 x i64> %29, <2 x i64> undef, <2 x i32> zeroinitializer
  %41 = shufflevector <2 x i64> %27, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %42 = shufflevector <2 x i64> %27, <2 x i64> undef, <2 x i32> zeroinitializer
  %43 = icmp sgt i32 %8, 0
  %44 = bitcast <2 x i64> %42 to <8 x i16>
  %45 = bitcast <2 x i64> %41 to <8 x i16>
  %46 = bitcast <2 x i64> %40 to <8 x i16>
  %47 = bitcast <2 x i64> %39 to <8 x i16>
  %48 = sub nsw i32 16, %31
  %49 = shl nsw i32 -1, %48
  %50 = trunc i32 %49 to i16
  %51 = xor i16 %50, -1
  %52 = insertelement <8 x i16> undef, i16 %51, i32 0
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> zeroinitializer
  %54 = sext i32 %8 to i64
  %55 = zext i32 %14 to i64
  br label %56

56:                                               ; preds = %119, %38
  %57 = phi i64 [ 0, %38 ], [ %120, %119 ]
  br i1 %43, label %58, label %119

58:                                               ; preds = %56
  %59 = mul nsw i64 %57, %1
  %60 = shl i64 %57, 7
  %61 = and i64 %60, 4294967168
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i64 [ 0, %58 ], [ %117, %62 ]
  %64 = add nsw i64 %59, %63
  %65 = getelementptr inbounds i8, i8* %21, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = bitcast <16 x i8> %68 to <8 x i16>
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> %44) #3
  %71 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast <16 x i8> %72 to <8 x i16>
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> %45) #3
  %75 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <16 x i8> %76 to <8 x i16>
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %46) #3
  %79 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = bitcast <16 x i8> %80 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %47) #3
  %83 = add <4 x i32> %70, %36
  %84 = add <4 x i32> %83, %74
  %85 = add <4 x i32> %84, %78
  %86 = add <4 x i32> %85, %82
  %87 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %86, i32 %31) #3
  %88 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = shufflevector <16 x i8> %88, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = bitcast <16 x i8> %89 to <8 x i16>
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %44) #3
  %92 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = bitcast <16 x i8> %93 to <8 x i16>
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> %45) #3
  %96 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = bitcast <16 x i8> %97 to <8 x i16>
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> %46) #3
  %100 = shufflevector <16 x i8> %67, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = bitcast <16 x i8> %101 to <8 x i16>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %47) #3
  %104 = add <4 x i32> %91, %36
  %105 = add <4 x i32> %104, %95
  %106 = add <4 x i32> %105, %99
  %107 = add <4 x i32> %106, %103
  %108 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %107, i32 %31) #3
  %109 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %87, <4 x i32> %108) #3
  %110 = icmp sgt <8 x i16> %109, zeroinitializer
  %111 = select <8 x i1> %110, <8 x i16> %109, <8 x i16> zeroinitializer
  %112 = icmp slt <8 x i16> %111, %53
  %113 = select <8 x i1> %112, <8 x i16> %111, <8 x i16> %53
  %114 = add nuw nsw i64 %63, %61
  %115 = getelementptr inbounds [17280 x i16], [17280 x i16]* %12, i64 0, i64 %114
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 16
  %117 = add nuw nsw i64 %63, 8
  %118 = icmp slt i64 %117, %54
  br i1 %118, label %62, label %119

119:                                              ; preds = %62, %56
  %120 = add nuw nsw i64 %57, 1
  %121 = icmp eq i64 %120, %55
  br i1 %121, label %122, label %56

122:                                              ; preds = %119, %11
  %123 = bitcast i16* %6 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = add <8 x i16> %124, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %126 = bitcast <8 x i16> %125 to <4 x i32>
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %128 = bitcast <4 x i32> %127 to <2 x i64>
  %129 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %132 = load i32, i32* %131, align 8
  %133 = add nsw i32 %132, -1
  %134 = shl i32 1, %133
  %135 = add nsw i32 %132, 7
  %136 = shl i32 1, %135
  %137 = sub nsw i32 %134, %136
  %138 = insertelement <4 x i32> undef, i32 %137, i32 0
  %139 = shufflevector <4 x i32> %138, <4 x i32> undef, <4 x i32> zeroinitializer
  %140 = icmp sgt i32 %9, 0
  br i1 %140, label %141, label %227

141:                                              ; preds = %122
  %142 = shufflevector <2 x i64> %130, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %143 = shufflevector <2 x i64> %130, <2 x i64> undef, <2 x i32> zeroinitializer
  %144 = shufflevector <2 x i64> %128, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %145 = shufflevector <2 x i64> %128, <2 x i64> undef, <2 x i32> zeroinitializer
  %146 = icmp sgt i32 %8, 0
  %147 = bitcast <2 x i64> %145 to <8 x i16>
  %148 = bitcast <2 x i64> %144 to <8 x i16>
  %149 = bitcast <2 x i64> %143 to <8 x i16>
  %150 = bitcast <2 x i64> %142 to <8 x i16>
  %151 = sext i32 %8 to i64
  %152 = zext i32 %9 to i64
  br label %153

153:                                              ; preds = %224, %141
  %154 = phi i64 [ 0, %141 ], [ %225, %224 ]
  br i1 %146, label %155, label %224

155:                                              ; preds = %153
  %156 = shl i64 %154, 7
  %157 = mul nsw i64 %154, %3
  %158 = and i64 %156, 4294967168
  br label %159

159:                                              ; preds = %155, %159
  %160 = phi i64 [ 0, %155 ], [ %222, %159 ]
  %161 = add nuw nsw i64 %160, %158
  %162 = getelementptr inbounds [17280 x i16], [17280 x i16]* %12, i64 0, i64 %161
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 16
  %165 = getelementptr inbounds i16, i16* %162, i64 128
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 16
  %168 = shufflevector <8 x i16> %164, <8 x i16> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %169 = getelementptr inbounds i16, i16* %162, i64 256
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 16
  %172 = getelementptr inbounds i16, i16* %162, i64 384
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = shufflevector <8 x i16> %171, <8 x i16> %174, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %176 = getelementptr inbounds i16, i16* %162, i64 512
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = getelementptr inbounds i16, i16* %162, i64 640
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 16
  %182 = shufflevector <8 x i16> %178, <8 x i16> %181, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %183 = getelementptr inbounds i16, i16* %162, i64 768
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 16
  %186 = getelementptr inbounds i16, i16* %162, i64 896
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 16
  %189 = shufflevector <8 x i16> %185, <8 x i16> %188, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %190 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %147) #3
  %191 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %148) #3
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> %149) #3
  %193 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %189, <8 x i16> %150) #3
  %194 = add <4 x i32> %191, %190
  %195 = add <4 x i32> %194, %192
  %196 = add <4 x i32> %195, %193
  %197 = shufflevector <8 x i16> %164, <8 x i16> %167, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %198 = shufflevector <8 x i16> %171, <8 x i16> %174, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %199 = shufflevector <8 x i16> %178, <8 x i16> %181, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %200 = shufflevector <8 x i16> %185, <8 x i16> %188, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %197, <8 x i16> %147) #3
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> %148) #3
  %203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %199, <8 x i16> %149) #3
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> %150) #3
  %205 = add <4 x i32> %202, %201
  %206 = add <4 x i32> %205, %203
  %207 = add <4 x i32> %206, %204
  %208 = shufflevector <4 x i32> %196, <4 x i32> %207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %209 = shufflevector <4 x i32> %196, <4 x i32> %207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %210 = add <4 x i32> %208, %139
  %211 = load i32, i32* %131, align 8
  %212 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %210, i32 %211) #3
  %213 = add <4 x i32> %209, %139
  %214 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %213, i32 %211) #3
  %215 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %212, <4 x i32> %214) #3
  %216 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %215, <8 x i16> undef) #3
  %217 = bitcast <16 x i8> %216 to <2 x i64>
  %218 = add nsw i64 %157, %160
  %219 = getelementptr inbounds i8, i8* %2, i64 %218
  %220 = extractelement <2 x i64> %217, i32 0
  %221 = bitcast i8* %219 to i64*
  store i64 %220, i64* %221, align 1
  %222 = add nuw nsw i64 %160, 8
  %223 = icmp slt i64 %222, %151
  br i1 %223, label %159, label %224

224:                                              ; preds = %159, %153
  %225 = add nuw nsw i64 %154, 1
  %226 = icmp eq i64 %225, %152
  br i1 %226, label %227, label %153

227:                                              ; preds = %224, %122
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %13) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
