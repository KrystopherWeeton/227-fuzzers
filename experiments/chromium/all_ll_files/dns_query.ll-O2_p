; ModuleID = '../../net/dns/dns_query.cc'
source_filename = "../../net/dns/dns_query.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.net::DnsQuery" = type { i64, %class.scoped_refptr, %"struct.net::dns_protocol::Header"* }
%class.scoped_refptr = type { %"class.net::IOBufferWithSize"* }
%"class.net::IOBufferWithSize" = type <{ %"class.net::IOBuffer", i32, [4 x i8] }>
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::dns_protocol::Header" = type { i16, i16, i16, i16, i16, i16 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.net::OptRecordRdata" = type { %"class.net::RecordRdata", %"class.std::__1::vector", %"class.std::__1::vector.7" }
%"class.net::RecordRdata" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::OptRecordRdata::Opt"*, %"class.net::OptRecordRdata::Opt"*, %"class.std::__1::__compressed_pair.2" }
%"class.net::OptRecordRdata::Opt" = type { i16, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.net::OptRecordRdata::Opt"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { i8*, i8*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.net::OptRecordRdata" }
%"class.base::BigEndianWriter" = type { i8*, i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::BigEndianReader" = type { i8*, i8* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [27 x i8] c"../../net/dns/dns_query.cc\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"valid_bytes <= base::checked_cast<size_t>(io_buffer_->size())\00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"Not supporting parsing a DNS query with multiple (or zero) questions.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN3net8DnsQueryC1EtRKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEtPKNS_14OptRecordRdataENS0_15PaddingStrategyE = hidden unnamed_addr alias void (%"class.net::DnsQuery"*, i16, %"class.base::BasicStringPiece"*, i16, %"class.net::OptRecordRdata"*, i32), void (%"class.net::DnsQuery"*, i16, %"class.base::BasicStringPiece"*, i16, %"class.net::OptRecordRdata"*, i32)* @_ZN3net8DnsQueryC2EtRKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEtPKNS_14OptRecordRdataENS0_15PaddingStrategyE
@_ZN3net8DnsQueryC1E13scoped_refptrINS_16IOBufferWithSizeEE = hidden unnamed_addr alias void (%"class.net::DnsQuery"*, %"class.net::IOBufferWithSize"*), void (%"class.net::DnsQuery"*, %"class.net::IOBufferWithSize"*)* @_ZN3net8DnsQueryC2E13scoped_refptrINS_16IOBufferWithSizeEE
@_ZN3net8DnsQueryC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::DnsQuery"*, %"class.net::DnsQuery"*), void (%"class.net::DnsQuery"*, %"class.net::DnsQuery"*)* @_ZN3net8DnsQueryC2ERKS0_
@_ZN3net8DnsQueryD1Ev = hidden unnamed_addr alias void (%"class.net::DnsQuery"*), void (%"class.net::DnsQuery"*)* @_ZN3net8DnsQueryD2Ev
@_ZN3net8DnsQueryC1ERKS0_t = hidden unnamed_addr alias void (%"class.net::DnsQuery"*, %"class.net::DnsQuery"*, i16), void (%"class.net::DnsQuery"*, %"class.net::DnsQuery"*, i16)* @_ZN3net8DnsQueryC2ERKS0_t

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQueryC2EtRKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEtPKNS_14OptRecordRdataENS0_15PaddingStrategyE(%"class.net::DnsQuery"* nocapture, i16 zeroext, %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16), i16 zeroext, %"class.net::OptRecordRdata"*, i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.net::OptRecordRdata", align 8
  %8 = alloca %"class.net::OptRecordRdata::Opt", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.absl::optional", align 8
  %11 = alloca %"class.base::BigEndianWriter", align 8
  %12 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %15, i64 0, i32 0
  %17 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %18 = add i64 %14, 16
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = bitcast %class.scoped_refptr* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %19) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 64, i1 false)
  %21 = icmp eq %"class.net::OptRecordRdata"* %4, null
  %22 = icmp eq i32 %5, 0
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %27

24:                                               ; preds = %6
  store i8 0, i8* %19, align 8, !alias.scope !2
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast %union.anon.11* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 56, i1 false) #12, !alias.scope !2
  br label %108

27:                                               ; preds = %6
  %28 = bitcast %"class.net::OptRecordRdata"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #12, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 56, i1 false) #12, !noalias !2
  call void @_ZN3net14OptRecordRdataC1Ev(%"class.net::OptRecordRdata"* nonnull %7) #12, !noalias !2
  br i1 %21, label %30, label %29

29:                                               ; preds = %27
  call void @_ZN3net14OptRecordRdata7AddOptsERKS0_(%"class.net::OptRecordRdata"* nonnull %7, %"class.net::OptRecordRdata"* nonnull dereferenceable(56) %4) #12
  br label %30

30:                                               ; preds = %29, %27
  br i1 %22, label %90, label %31

31:                                               ; preds = %30
  %32 = getelementptr inbounds %"class.net::OptRecordRdata", %"class.net::OptRecordRdata"* %7, i64 0, i32 2, i32 0, i32 1
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8, !noalias !2
  %35 = getelementptr inbounds %"class.net::OptRecordRdata", %"class.net::OptRecordRdata"* %7, i64 0, i32 2
  %36 = bitcast %"class.std::__1::vector.7"* %35 to i64*
  %37 = load i64, i64* %36, align 8, !noalias !2
  %38 = sub i64 97, %14
  %39 = sub i64 %38, %34
  %40 = add i64 %39, %37
  %41 = and i64 %40, 127
  %42 = bitcast %"class.net::OptRecordRdata::Opt"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #12, !noalias !2
  %43 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #12, !noalias !2
  %44 = icmp ult i64 %41, 23
  br i1 %44, label %54, label %45

45:                                               ; preds = %31
  %46 = add nuw nsw i64 %41, 16
  %47 = and i64 %46, 240
  %48 = call i8* @_Znwm(i64 %47) #13
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %48, i8** %49, align 8, !noalias !2
  %50 = or i64 %47, -9223372036854775808
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %50, i64* %51, align 8, !noalias !2
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %41, i64* %52, align 8, !noalias !2
  %53 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %59

54:                                               ; preds = %31
  %55 = trunc i64 %41 to i8
  %56 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  store i8 %55, i8* %57, align 1, !noalias !2
  %58 = icmp eq i64 %41, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %54, %45
  %60 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %56, %54 ], [ %53, %45 ]
  %61 = phi i8* [ %43, %54 ], [ %48, %45 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %61, i8 0, i64 %41, i1 false) #12, !noalias !2
  br label %62

62:                                               ; preds = %59, %54
  %63 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %56, %54 ], [ %60, %59 ]
  %64 = phi i8* [ %43, %54 ], [ %61, %59 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 %41
  store i8 0, i8* %65, align 1, !noalias !2
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %67 = load i8, i8* %66, align 1, !noalias !2
  %68 = icmp slt i8 %67, 0
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8, !noalias !2
  %71 = select i1 %68, i8* %70, i8* %43
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = load i64, i64* %72, align 8, !noalias !2
  %74 = zext i8 %67 to i64
  %75 = select i1 %68, i64 %73, i64 %74
  call void @_ZN3net14OptRecordRdata3OptC1EtN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::OptRecordRdata::Opt"* nonnull %8, i16 zeroext 12, i8* %71, i64 %75) #12
  call void @_ZN3net14OptRecordRdata6AddOptERKNS0_3OptE(%"class.net::OptRecordRdata"* nonnull %7, %"class.net::OptRecordRdata::Opt"* nonnull dereferenceable(32) %8) #12
  %76 = getelementptr inbounds %"class.net::OptRecordRdata::Opt", %"class.net::OptRecordRdata::Opt"* %8, i64 0, i32 1
  %77 = bitcast %"class.std::__1::basic_string"* %76 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = load i8, i8* %78, align 1, !noalias !2
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %62
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8, !noalias !2
  call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %81, %62
  %85 = load i8, i8* %66, align 1, !noalias !2
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = load i8*, i8** %69, align 8, !noalias !2
  call void @_ZdlPv(i8* %88) #13
  br label %89

89:                                               ; preds = %87, %84
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #12, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #12, !noalias !2
  br label %90

90:                                               ; preds = %30, %89
  store i8 1, i8* %19, align 8, !alias.scope !2
  %91 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net14OptRecordRdataC1EOS0_(%"class.net::OptRecordRdata"* %91, %"class.net::OptRecordRdata"* nonnull dereferenceable(56) %7) #12
  call void @_ZN3net14OptRecordRdataD1Ev(%"class.net::OptRecordRdata"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #12, !noalias !2
  %92 = load i8, i8* %19, align 8
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %108, label %94

94:                                               ; preds = %90
  %95 = icmp eq %"class.net::OptRecordRdata"* %91, null
  br i1 %95, label %105, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %98 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 1
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.7"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %100, 11
  %104 = sub i64 %103, %102
  br label %105

105:                                              ; preds = %94, %96
  %106 = phi i64 [ %104, %96 ], [ 0, %94 ]
  %107 = add i64 %106, %18
  br label %108

108:                                              ; preds = %90, %24, %105
  %109 = phi i64 [ %107, %105 ], [ %18, %90 ], [ %18, %24 ]
  %110 = call i8* @_Znwm(i64 32) #13
  %111 = bitcast i8* %110 to %"class.net::IOBufferWithSize"*
  call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %111, i64 %109) #12
  %112 = getelementptr inbounds i8, i8* %110, i64 8
  %113 = bitcast i8* %112 to i32*
  %114 = atomicrmw add i32* %113, i32 1 monotonic
  %115 = ptrtoint i8* %110 to i64
  %116 = bitcast %class.scoped_refptr* %15 to i64*
  %117 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %16, align 8
  store i64 %115, i64* %116, align 8
  %118 = icmp eq %"class.net::IOBufferWithSize"* %117, null
  br i1 %118, label %131, label %119

119:                                              ; preds = %108
  %120 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %117, i64 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = atomicrmw sub i32* %121, i32 1 acq_rel
  %123 = icmp eq i32 %122, 1
  br i1 %123, label %124, label %131

124:                                              ; preds = %119
  %125 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %120, i64 -2
  %126 = bitcast %"class.base::RefCountedThreadSafe"* %125 to %"class.net::IOBuffer"*
  %127 = bitcast %"class.base::RefCountedThreadSafe"* %125 to void (%"class.net::IOBuffer"*)***
  %128 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %127, align 8
  %129 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %128, i64 1
  %130 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %129, align 8
  call void %130(%"class.net::IOBuffer"* nonnull %126) #12
  br label %131

131:                                              ; preds = %108, %119, %124
  %132 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %16, align 8
  %133 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %132, i64 0, i32 0, i32 2
  %134 = load i8*, i8** %133, align 8
  %135 = bitcast %"struct.net::dns_protocol::Header"** %17 to i8**
  store i8* %134, i8** %135, align 8
  %136 = call i16 @llvm.bswap.i16(i16 %1) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 0, i64 12, i1 false)
  %137 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %17, align 8
  %138 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %137, i64 0, i32 0
  store i16 %136, i16* %138, align 1
  %139 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %17, align 8
  %140 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %139, i64 0, i32 1
  store i16 1, i16* %140, align 1
  %141 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %17, align 8
  %142 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %141, i64 0, i32 2
  store i16 256, i16* %142, align 1
  %143 = bitcast %"class.base::BigEndianWriter"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #12
  %144 = bitcast %"class.base::BigEndianWriter"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %144, i8 -86, i64 16, i1 false)
  %145 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %16, align 8
  %146 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %145, i64 0, i32 0, i32 2
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 12
  %149 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %145, i64 0, i32 1
  %150 = load i32, i32* %149, align 8
  %151 = sext i32 %150 to i64
  %152 = add nsw i64 %151, -12
  call void @_ZN4base15BigEndianWriterC1EPcm(%"class.base::BigEndianWriter"* nonnull %11, i8* %148, i64 %152) #12
  %153 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = load i64, i64* %13, align 8
  %156 = call zeroext i1 @_ZN4base15BigEndianWriter10WriteBytesEPKvm(%"class.base::BigEndianWriter"* nonnull %11, i8* %154, i64 %155) #12
  %157 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext %3) #12
  %158 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext 1) #12
  %159 = load i8, i8* %19, align 8, !range !5
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %131
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #12
  br label %198

162:                                              ; preds = %131
  %163 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %17, align 8
  %164 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %163, i64 0, i32 5
  store i16 256, i16* %164, align 1
  %165 = call zeroext i1 @_ZN4base15BigEndianWriter7WriteU8Eh(%"class.base::BigEndianWriter"* nonnull %11, i8 zeroext 0) #12
  %166 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext 41) #12
  %167 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext 4096) #12
  %168 = call zeroext i1 @_ZN4base15BigEndianWriter7WriteU8Eh(%"class.base::BigEndianWriter"* nonnull %11, i8 zeroext 0) #12
  %169 = call zeroext i1 @_ZN4base15BigEndianWriter7WriteU8Eh(%"class.base::BigEndianWriter"* nonnull %11, i8 zeroext 0) #12
  %170 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext 0) #12
  %171 = load i8, i8* %19, align 8, !range !5
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %174

173:                                              ; preds = %162
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #14
  unreachable

174:                                              ; preds = %162
  %175 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %176 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 1
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.7"* %175 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = trunc i64 %181 to i16
  %183 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %11, i16 zeroext %182) #12
  %184 = load i8, i8* %19, align 8, !range !5
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %174
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #14
  unreachable

187:                                              ; preds = %174
  %188 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %175, i64 0, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = load i64, i64* %177, align 8
  %191 = ptrtoint i8* %189 to i64
  %192 = sub i64 %190, %191
  %193 = call zeroext i1 @_ZN4base15BigEndianWriter10WriteBytesEPKvm(%"class.base::BigEndianWriter"* nonnull %11, i8* %189, i64 %192) #12
  %194 = load i8, i8* %19, align 8, !range !5
  %195 = icmp eq i8 %194, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #12
  br i1 %195, label %198, label %196

196:                                              ; preds = %187
  %197 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net14OptRecordRdataD1Ev(%"class.net::OptRecordRdata"* %197) #12
  store i8 0, i8* %19, align 8
  br label %198

198:                                              ; preds = %161, %187, %196
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %19) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base15BigEndianWriterC1EPcm(%"class.base::BigEndianWriter"*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZN4base15BigEndianWriter10WriteBytesEPKvm(%"class.base::BigEndianWriter"*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"*, i16 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN4base15BigEndianWriter7WriteU8Eh(%"class.base::BigEndianWriter"*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQueryC2E13scoped_refptrINS_16IOBufferWithSizeEE(%"class.net::DnsQuery"* nocapture, %"class.net::IOBufferWithSize"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.net::IOBufferWithSize"* %1 to i64
  %4 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %6 = bitcast %class.scoped_refptr* %5 to i64*
  store i64 %3, i64* %6, align 8
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  store %"struct.net::dns_protocol::Header"* null, %"struct.net::dns_protocol::Header"** %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQueryC2ERKS0_(%"class.net::DnsQuery"* nocapture, %"class.net::DnsQuery"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  %6 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 0
  %8 = bitcast %"class.net::DnsQuery"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false)
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 1, i32 0
  %11 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %12 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %11, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = tail call i8* @_Znwm(i64 32) #13
  %15 = bitcast i8* %14 to %"class.net::IOBufferWithSize"*
  %16 = sext i32 %13 to i64
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %15, i64 %16) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = atomicrmw add i32* %18, i32 1 monotonic
  %20 = ptrtoint i8* %14 to i64
  %21 = bitcast %class.scoped_refptr* %4 to i64*
  %22 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %5, align 8
  store i64 %20, i64* %21, align 8
  %23 = icmp eq %"class.net::IOBufferWithSize"* %22, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %22, i64 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw sub i32* %26, i32 1 acq_rel
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %36

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 -2
  %31 = bitcast %"class.base::RefCountedThreadSafe"* %30 to %"class.net::IOBuffer"*
  %32 = bitcast %"class.base::RefCountedThreadSafe"* %30 to void (%"class.net::IOBuffer"*)***
  %33 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %33, i64 1
  %35 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %34, align 8
  tail call void %35(%"class.net::IOBuffer"* nonnull %31) #12
  br label %36

36:                                               ; preds = %2, %24, %29
  %37 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %5, align 8
  %38 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %37, i64 0, i32 0, i32 2
  %39 = load i8*, i8** %38, align 8
  %40 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %41 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %40, i64 0, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %37, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %42, i64 %45, i1 false) #12
  %46 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %5, align 8
  %47 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %46, i64 0, i32 0, i32 2
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"struct.net::dns_protocol::Header"** %6 to i64*
  store i64 %49, i64* %50, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQuery8CopyFromERKS0_(%"class.net::DnsQuery"* nocapture, %"class.net::DnsQuery"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 1, i32 0
  %7 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %8 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = tail call i8* @_Znwm(i64 32) #13
  %11 = bitcast i8* %10 to %"class.net::IOBufferWithSize"*
  %12 = sext i32 %9 to i64
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %11, i64 %12) #12
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to i32*
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  %16 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %17 = ptrtoint i8* %10 to i64
  %18 = bitcast %class.scoped_refptr* %16 to i64*
  %19 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 0, i32 0
  %20 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  store i64 %17, i64* %18, align 8
  %21 = icmp eq %"class.net::IOBufferWithSize"* %20, null
  br i1 %21, label %34, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %20, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %34

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 -2
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %28 to %"class.net::IOBuffer"*
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %28 to void (%"class.net::IOBuffer"*)***
  %31 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %31, i64 1
  %33 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %32, align 8
  tail call void %33(%"class.net::IOBuffer"* nonnull %29) #12
  br label %34

34:                                               ; preds = %2, %22, %27
  %35 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  %36 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %35, i64 0, i32 0, i32 2
  %37 = load i8*, i8** %36, align 8
  %38 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %39 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %38, i64 0, i32 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %35, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = sext i32 %42 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %40, i64 %43, i1 false)
  %44 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  %45 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %44, i64 0, i32 0, i32 2
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %49 = bitcast %"struct.net::dns_protocol::Header"** %48 to i64*
  store i64 %47, i64* %49, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.net::DnsQuery"* @_ZN3net8DnsQueryaSERKS0_(%"class.net::DnsQuery"* returned, %"class.net::DnsQuery"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 1, i32 0
  %7 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %8 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %7, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = tail call i8* @_Znwm(i64 32) #13
  %11 = bitcast i8* %10 to %"class.net::IOBufferWithSize"*
  %12 = sext i32 %9 to i64
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %11, i64 %12) #12
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to i32*
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  %16 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %17 = ptrtoint i8* %10 to i64
  %18 = bitcast %class.scoped_refptr* %16 to i64*
  %19 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 0, i32 0
  %20 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  store i64 %17, i64* %18, align 8
  %21 = icmp eq %"class.net::IOBufferWithSize"* %20, null
  br i1 %21, label %34, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %20, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %34

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 -2
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %28 to %"class.net::IOBuffer"*
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %28 to void (%"class.net::IOBuffer"*)***
  %31 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %31, i64 1
  %33 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %32, align 8
  tail call void %33(%"class.net::IOBuffer"* nonnull %29) #12
  br label %34

34:                                               ; preds = %2, %22, %27
  %35 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  %36 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %35, i64 0, i32 0, i32 2
  %37 = load i8*, i8** %36, align 8
  %38 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %39 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %38, i64 0, i32 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %35, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = sext i32 %42 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %40, i64 %43, i1 false) #12
  %44 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %19, align 8
  %45 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %44, i64 0, i32 0, i32 2
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %49 = bitcast %"struct.net::dns_protocol::Header"** %48 to i64*
  store i64 %47, i64* %49, align 8
  ret %"class.net::DnsQuery"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQueryD2Ev(%"class.net::DnsQuery"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %2, align 8
  %4 = icmp eq %"class.net::IOBufferWithSize"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.net::IOBuffer"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.net::IOBuffer"*)***
  %14 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %14, i64 1
  %16 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %15, align 8
  tail call void %16(%"class.net::IOBuffer"* nonnull %12) #12
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %"class.net::DnsQuery"* @_ZNK3net8DnsQuery14CloneWithNewIdEt(%"class.net::DnsQuery"* nocapture readonly, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 24) #13
  %4 = bitcast i8* %3 to %"class.net::DnsQuery"*
  %5 = bitcast i8* %3 to i64*
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  %8 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %11 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %12 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %11, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = tail call i8* @_Znwm(i64 32) #13
  %15 = bitcast i8* %14 to %"class.net::IOBufferWithSize"*
  %16 = sext i32 %13 to i64
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %15, i64 %16) #12
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = atomicrmw add i32* %18, i32 1 monotonic
  %20 = ptrtoint i8* %14 to i64
  %21 = bitcast i8* %6 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %14, i64 16
  %23 = bitcast i8* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %26 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %25, i64 0, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %14, i64 24
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %14, i64 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %27, i64 %31, i1 false) #12
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast i8* %7 to i64*
  store i64 %34, i64* %35, align 8
  %36 = tail call i16 @llvm.bswap.i16(i16 %1) #12
  %37 = inttoptr i64 %34 to %"struct.net::dns_protocol::Header"*
  %38 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %37, i64 0, i32 0
  store i16 %36, i16* %38, align 1
  ret %"class.net::DnsQuery"* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net8DnsQuery5ParseEm(%"class.net::DnsQuery"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::BigEndianReader", align 8
  %5 = alloca %"struct.net::dns_protocol::Header", align 2
  %6 = alloca %"class.logging::LogMessage", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %11 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %12 = icmp eq %"class.net::IOBufferWithSize"* %11, null
  br i1 %12, label %110, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %11, i64 0, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %110, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %11, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %22, label %21, !prof !6

21:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %17
  %23 = sext i32 %19 to i64
  %24 = icmp ult i64 %23, %1
  br i1 %24, label %25, label %31

25:                                               ; preds = %22
  %26 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 173, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0)) #12
  %27 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #12
  %28 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %29 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %28, i64 0, i32 0, i32 2
  %30 = load i8*, i8** %29, align 8
  br label %31

31:                                               ; preds = %22, %25
  %32 = phi i8* [ %15, %22 ], [ %30, %25 ]
  %33 = bitcast %"class.base::BigEndianReader"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #12
  %34 = bitcast %"class.base::BigEndianReader"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 16, i1 false)
  call void @_ZN4base15BigEndianReaderC1EPKcm(%"class.base::BigEndianReader"* nonnull %4, i8* %32, i64 %1) #12
  %35 = bitcast %"struct.net::dns_protocol::Header"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 0
  %37 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 1
  %38 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 2
  %39 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 3
  %40 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 4
  %41 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %5, i64 0, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %35, i8 0, i64 12, i1 false) #12
  %42 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* nonnull %36) #12
  br i1 %42, label %43, label %108

43:                                               ; preds = %31
  %44 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* %37) #12
  br i1 %44, label %45, label %108

45:                                               ; preds = %43
  %46 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* %38) #12
  br i1 %46, label %47, label %108

47:                                               ; preds = %45
  %48 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* %39) #12
  br i1 %48, label %49, label %108

49:                                               ; preds = %47
  %50 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* %40) #12
  br i1 %50, label %51, label %108

51:                                               ; preds = %49
  %52 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* %41) #12
  %53 = xor i1 %52, true
  %54 = load i16, i16* %37, align 2
  %55 = icmp slt i16 %54, 0
  %56 = or i1 %55, %53
  br i1 %56, label %108, label %57

57:                                               ; preds = %51
  %58 = load i16, i16* %38, align 2
  %59 = icmp eq i16 %58, 1
  br i1 %59, label %68, label %60

60:                                               ; preds = %57
  %61 = call i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i64 27) #12
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %108

63:                                               ; preds = %60
  %64 = bitcast %"class.logging::LogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %64) #12
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %6, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 187, i32 -1) #12
  %65 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %6, i64 0, i32 2
  %66 = bitcast %"class.std::__1::basic_ostringstream"* %65 to %"class.std::__1::basic_ostream"*
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %66, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.2, i64 0, i64 0), i64 69) #12
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %64) #12
  br label %108

68:                                               ; preds = %57
  %69 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #12
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 24, i1 false) #12
  %72 = call zeroext i1 @_ZN3net8DnsQuery8ReadNameEPN4base15BigEndianReaderEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.net::DnsQuery"* undef, %"class.base::BigEndianReader"* nonnull %4, %"class.std::__1::basic_string"* nonnull %7)
  br i1 %72, label %73, label %99

73:                                               ; preds = %68
  %74 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %74) #12
  store i16 -21846, i16* %8, align 2
  %75 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %75) #12
  store i16 -21846, i16* %9, align 2
  %76 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* nonnull %8) #12
  br i1 %76, label %77, label %97

77:                                               ; preds = %73
  %78 = call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* nonnull %4, i16* nonnull %9) #12
  %79 = load i16, i16* %9, align 2
  %80 = icmp eq i16 %79, 1
  %81 = and i1 %78, %80
  br i1 %81, label %82, label %97

82:                                               ; preds = %77
  %83 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %83, i64 0, i32 1, i32 0
  %85 = load i8, i8* %84, align 1
  %86 = icmp slt i8 %85, 0
  %87 = load i64, i64* %71, align 8
  %88 = zext i8 %85 to i64
  %89 = select i1 %86, i64 %87, i64 %88
  %90 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  store i64 %89, i64* %90, align 8
  %91 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %10, align 8
  %92 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %91, i64 0, i32 0, i32 2
  %93 = bitcast i8** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %96 = bitcast %"struct.net::dns_protocol::Header"** %95 to i64*
  store i64 %94, i64* %96, align 8
  br label %97

97:                                               ; preds = %73, %77, %82
  %98 = phi i1 [ true, %82 ], [ false, %77 ], [ false, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %75) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %74) #12
  br label %99

99:                                               ; preds = %68, %97
  %100 = phi i1 [ %98, %97 ], [ false, %68 ]
  %101 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %102 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %101, i64 0, i32 1, i32 0
  %103 = load i8, i8* %102, align 1
  %104 = icmp slt i8 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %99
  %106 = load i8*, i8** %70, align 8
  call void @_ZdlPv(i8* %106) #13
  br label %107

107:                                              ; preds = %99, %105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #12
  br label %108

108:                                              ; preds = %31, %43, %45, %47, %49, %63, %60, %51, %107
  %109 = phi i1 [ %100, %107 ], [ false, %51 ], [ false, %60 ], [ false, %63 ], [ false, %49 ], [ false, %47 ], [ false, %45 ], [ false, %43 ], [ false, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %35) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #12
  br label %110

110:                                              ; preds = %2, %13, %108
  %111 = phi i1 [ %109, %108 ], [ false, %13 ], [ false, %2 ]
  ret i1 %111
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare void @_ZN4base15BigEndianReaderC1EPKcm(%"class.base::BigEndianReader"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net8DnsQuery10ReadHeaderEPN4base15BigEndianReaderEPNS_12dns_protocol6HeaderE(%"class.net::DnsQuery"* nocapture readnone, %"class.base::BigEndianReader"*, %"struct.net::dns_protocol::Header"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %4) #12
  br i1 %5, label %6, label %21

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 1
  %8 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %7) #12
  br i1 %8, label %9, label %21

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 2
  %11 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %10) #12
  br i1 %11, label %12, label %21

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 3
  %14 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %13) #12
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 4
  %17 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %16) #12
  br i1 %17, label %18, label %21

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %2, i64 0, i32 5
  %20 = tail call zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"* %1, i16* %19) #12
  br label %21

21:                                               ; preds = %18, %15, %12, %9, %6, %3
  %22 = phi i1 [ false, %15 ], [ false, %12 ], [ false, %9 ], [ false, %6 ], [ false, %3 ], [ %20, %18 ]
  ret i1 %22
}

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net8DnsQuery8ReadNameEPN4base15BigEndianReaderEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.net::DnsQuery"* nocapture readnone, %"class.base::BigEndianReader"*, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %13, align 8
  br label %16

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %15, align 1
  store i8 0, i8* %7, align 1
  br label %16

16:                                               ; preds = %10, %14
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %2, i64 256) #12
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #12
  store i8 -86, i8* %4, align 1
  %17 = call zeroext i1 @_ZN4base15BigEndianReader6ReadU8EPh(%"class.base::BigEndianReader"* %1, i8* nonnull %4) #12
  br i1 %17, label %18, label %52

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  br label %23

23:                                               ; preds = %18, %44
  %24 = load i8, i8* %4, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = load i64, i64* %19, align 8
  br label %33

31:                                               ; preds = %26
  %32 = zext i8 %27 to i64
  br label %33

33:                                               ; preds = %29, %31
  %34 = phi i64 [ %30, %29 ], [ %32, %31 ]
  %35 = zext i8 %24 to i64
  %36 = add nuw nsw i64 %35, 1
  %37 = add i64 %36, %34
  %38 = icmp ugt i64 %37, 255
  br i1 %38, label %52, label %39

39:                                               ; preds = %33
  %40 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %2, i8* nonnull %4, i64 1) #12
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 16, i1 false) #12
  %41 = load i8, i8* %4, align 1
  %42 = zext i8 %41 to i64
  %43 = call zeroext i1 @_ZN4base15BigEndianReader9ReadPieceEPNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEm(%"class.base::BigEndianReader"* %1, %"class.base::BasicStringPiece"* nonnull %5, i64 %42) #12
  br i1 %43, label %44, label %51

44:                                               ; preds = %39
  %45 = load i8*, i8** %21, align 8
  %46 = load i64, i64* %22, align 8
  %47 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %2, i8* %45, i64 %46) #12
  %48 = call zeroext i1 @_ZN4base15BigEndianReader6ReadU8EPh(%"class.base::BigEndianReader"* %1, i8* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #12
  br i1 %48, label %23, label %52

49:                                               ; preds = %23
  %50 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc(%"class.std::__1::basic_string"* %2, i64 1, i8 signext 0) #12
  br label %52

51:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #12
  br label %52

52:                                               ; preds = %33, %44, %51, %16, %49
  %53 = phi i1 [ true, %49 ], [ false, %16 ], [ false, %51 ], [ false, %44 ], [ false, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #12
  ret i1 %53
}

declare zeroext i1 @_ZN4base15BigEndianReader7ReadU16EPt(%"class.base::BigEndianReader"*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK3net8DnsQuery2idEv(%"class.net::DnsQuery"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %3 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %2, align 8
  %4 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %3, i64 0, i32 0
  %5 = load i16, i16* %4, align 1
  %6 = tail call i16 @llvm.bswap.i16(i16 %5) #12
  ret i16 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK3net8DnsQuery5qnameEv(%"class.net::DnsQuery"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %2, align 8
  %4 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %3, i64 0, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 12
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = insertvalue { i8*, i64 } undef, i8* %6, 0
  %10 = insertvalue { i8*, i64 } %9, i64 %8, 1
  ret { i8*, i64 } %10
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK3net8DnsQuery5qtypeEv(%"class.net::DnsQuery"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %2, align 8
  %4 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %3, i64 0, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 12
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = getelementptr inbounds i8, i8* %9, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = or i16 %12, %15
  ret i16 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK3net8DnsQuery8questionEv(%"class.net::DnsQuery"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %2, align 8
  %4 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %3, i64 0, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 12
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 4
  %10 = insertvalue { i8*, i64 } undef, i8* %6, 0
  %11 = insertvalue { i8*, i64 } %10, i64 %9, 1
  ret { i8*, i64 } %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3net8DnsQuery13question_sizeEv(%"class.net::DnsQuery"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 4
  ret i64 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net8DnsQuery9set_flagsEt(%"class.net::DnsQuery"* nocapture readonly, i16 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %4 = load %"struct.net::dns_protocol::Header"*, %"struct.net::dns_protocol::Header"** %3, align 8
  %5 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %4, i64 0, i32 1
  store i16 %1, i16* %5, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net8DnsQueryC2ERKS0_t(%"class.net::DnsQuery"* nocapture, %"class.net::DnsQuery"* nocapture readonly dereferenceable(24), i16 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 0, i32 0
  %7 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 0
  %9 = bitcast %"class.net::DnsQuery"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false)
  %10 = load i64, i64* %8, align 8
  store i64 %10, i64* %4, align 8
  %11 = getelementptr inbounds %"class.net::DnsQuery", %"class.net::DnsQuery"* %1, i64 0, i32 1, i32 0
  %12 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %11, align 8
  %13 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %12, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = tail call i8* @_Znwm(i64 32) #13
  %16 = bitcast i8* %15 to %"class.net::IOBufferWithSize"*
  %17 = sext i32 %14 to i64
  tail call void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"* nonnull %16, i64 %17) #12
  %18 = getelementptr inbounds i8, i8* %15, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = atomicrmw add i32* %19, i32 1 monotonic
  %21 = ptrtoint i8* %15 to i64
  %22 = bitcast %class.scoped_refptr* %5 to i64*
  %23 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  store i64 %21, i64* %22, align 8
  %24 = icmp eq %"class.net::IOBufferWithSize"* %23, null
  br i1 %24, label %37, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %23, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %37

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %26, i64 -2
  %32 = bitcast %"class.base::RefCountedThreadSafe"* %31 to %"class.net::IOBuffer"*
  %33 = bitcast %"class.base::RefCountedThreadSafe"* %31 to void (%"class.net::IOBuffer"*)***
  %34 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %34, i64 1
  %36 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %35, align 8
  tail call void %36(%"class.net::IOBuffer"* nonnull %32) #12
  br label %37

37:                                               ; preds = %3, %25, %30
  %38 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %39 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %38, i64 0, i32 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %11, align 8
  %42 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %41, i64 0, i32 0, i32 2
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %38, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = sext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %43, i64 %46, i1 false) #12
  %47 = load %"class.net::IOBufferWithSize"*, %"class.net::IOBufferWithSize"** %6, align 8
  %48 = getelementptr inbounds %"class.net::IOBufferWithSize", %"class.net::IOBufferWithSize"* %47, i64 0, i32 0, i32 2
  %49 = bitcast i8** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"struct.net::dns_protocol::Header"** %7 to i64*
  store i64 %50, i64* %51, align 8
  %52 = tail call i16 @llvm.bswap.i16(i16 %2) #12
  %53 = inttoptr i64 %50 to %"struct.net::dns_protocol::Header"*
  %54 = getelementptr inbounds %"struct.net::dns_protocol::Header", %"struct.net::dns_protocol::Header"* %53, i64 0, i32 0
  store i16 %52, i16* %54, align 1
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4base15BigEndianReader6ReadU8EPh(%"class.base::BigEndianReader"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4base15BigEndianReader9ReadPieceEPNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEm(%"class.base::BigEndianReader"*, %"class.base::BasicStringPiece"*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #2

declare void @_ZN3net14OptRecordRdataC1Ev(%"class.net::OptRecordRdata"*) unnamed_addr #2

declare void @_ZN3net14OptRecordRdata7AddOptsERKS0_(%"class.net::OptRecordRdata"*, %"class.net::OptRecordRdata"* dereferenceable(56)) local_unnamed_addr #2

declare void @_ZN3net14OptRecordRdata6AddOptERKNS0_3OptE(%"class.net::OptRecordRdata"*, %"class.net::OptRecordRdata::Opt"* dereferenceable(32)) local_unnamed_addr #2

declare void @_ZN3net14OptRecordRdata3OptC1EtN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::OptRecordRdata::Opt"*, i16 zeroext, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net14OptRecordRdataD1Ev(%"class.net::OptRecordRdata"*) unnamed_addr #4

declare void @_ZN3net14OptRecordRdataC1EOS0_(%"class.net::OptRecordRdata"*, %"class.net::OptRecordRdata"* dereferenceable(56)) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !5
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #13
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #13
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #11

declare void @_ZN3net16IOBufferWithSizeC1Em(%"class.net::IOBufferWithSize"*, i64) unnamed_addr #2

declare i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3net12_GLOBAL__N_121AddPaddingIfNecessaryEPKNS_14OptRecordRdataENS_8DnsQuery15PaddingStrategyEm: argument 0"}
!4 = distinct !{!4, !"_ZN3net12_GLOBAL__N_121AddPaddingIfNecessaryEPKNS_14OptRecordRdataENS_8DnsQuery15PaddingStrategyEm"}
!5 = !{i8 0, i8 2}
!6 = !{!"branch_weights", i32 2000, i32 1}
