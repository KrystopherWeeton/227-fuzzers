; ModuleID = '../../third_party/blink/renderer/core/inspector/inspector_task_runner.cc'
source_filename = "../../third_party/blink/renderer/core/inspector/inspector_task_runner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::InspectorTaskRunner" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.WTF::Mutex", %class.scoped_refptr, %"class.v8::Isolate"*, %"class.WTF::Deque", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%class.scoped_refptr = type { %"class.base::SingleThreadTaskRunner"* }
%"class.v8::Isolate" = type { i8 }
%"class.WTF::Deque" = type { %"class.WTF::Deque<WTF::CrossThreadOnceFunction<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<WTF::CrossThreadOnceFunction<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::CrossThreadOnceFunction"*, i32, i32 }
%"class.WTF::CrossThreadOnceFunction" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.3", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.3" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1" }>
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1", [4 x i8] }>
%"class.WTF::ConditionalDestructor" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF21ConditionalDestructorINS_5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS4_EEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS3_EEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_23CrossThreadOnceFunctionIFvvEEEEEmm = comdat any

@.str = private unnamed_addr constant [11 x i8] c"AppendTask\00", align 1
@.str.1 = private unnamed_addr constant [73 x i8] c"../../third_party/blink/renderer/core/inspector/inspector_task_runner.cc\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"AppendTaskDontInterrupt\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_23CrossThreadOnceFunctionIFvvEEEEEPKcv = private unnamed_addr constant [85 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::CrossThreadOnceFunction<void ()>]\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1

@_ZN5blink19InspectorTaskRunnerC1E13scoped_refptrIN4base22SingleThreadTaskRunnerEE = hidden unnamed_addr alias void (%"class.blink::InspectorTaskRunner"*, %"class.base::SingleThreadTaskRunner"*), void (%"class.blink::InspectorTaskRunner"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN5blink19InspectorTaskRunnerC2E13scoped_refptrIN4base22SingleThreadTaskRunnerEE
@_ZN5blink19InspectorTaskRunnerD1Ev = hidden unnamed_addr alias void (%"class.blink::InspectorTaskRunner"*), void (%"class.blink::InspectorTaskRunner"*)* @_ZN5blink19InspectorTaskRunnerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunnerC2E13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.blink::InspectorTaskRunner"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"* %4, i1 zeroext false) #6
  %5 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 3, i32 0
  store %"class.base::SingleThreadTaskRunner"* %1, %"class.base::SingleThreadTaskRunner"** %5, align 8
  %6 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  %10 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 4
  %11 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.v8::Isolate"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 33, i1 false)
  %14 = atomicrmw sub i32* %12, i32 1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %22

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %11, i64 -2
  %18 = bitcast %"class.base::RefCountedThreadSafe.1"* %17 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %18) #6
  br label %22

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 4
  %21 = bitcast %"class.v8::Isolate"** %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 33, i1 false)
  br label %22

22:                                               ; preds = %19, %7, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunnerD2Ev(%"class.blink::InspectorTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5
  %3 = bitcast %"class.WTF::Deque"* %2 to %"class.WTF::ConditionalDestructor"*
  tail call void @_ZN3WTF21ConditionalDestructorINS_5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"* %3) #6
  %4 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 3, i32 0
  %5 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %4, align 8
  %6 = icmp eq %"class.base::SingleThreadTaskRunner"* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %8, i64 -2
  %14 = bitcast %"class.base::RefCountedThreadSafe.1"* %13 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %14) #6
  br label %15

15:                                               ; preds = %1, %7, %12
  %16 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"* %16) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF21ConditionalDestructorINS_5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.WTF::ConditionalDestructor"* %0 to %"class.WTF::CrossThreadOnceFunction"**
  %3 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %2, align 8
  %4 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %3, null
  br i1 %4, label %55, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 16
  %7 = bitcast %"class.WTF::ConditionalDestructor"* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 20
  %10 = bitcast %"class.WTF::ConditionalDestructor"* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %8, %11
  br i1 %12, label %52, label %13

13:                                               ; preds = %5
  %14 = icmp ugt i32 %8, %11
  %15 = zext i32 %11 to i64
  %16 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %3, i64 %15
  br i1 %14, label %25, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %3, i64 %18
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi %"class.WTF::CrossThreadOnceFunction"* [ %23, %20 ], [ %19, %17 ]
  %22 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %21, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %22) #6
  %23 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %21, i64 1
  %24 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %23, %16
  br i1 %24, label %52, label %20

25:                                               ; preds = %13
  %26 = icmp eq i32 %11, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %25, %27
  %28 = phi %"class.WTF::CrossThreadOnceFunction"* [ %30, %27 ], [ %3, %25 ]
  %29 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %28, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %29) #6
  %30 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %28, i64 1
  %31 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %30, %16
  br i1 %31, label %32, label %27

32:                                               ; preds = %27
  %33 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %2, align 8
  %34 = load i32, i32* %7, align 8
  br label %35

35:                                               ; preds = %32, %25
  %36 = phi i32 [ %34, %32 ], [ %8, %25 ]
  %37 = phi %"class.WTF::CrossThreadOnceFunction"* [ %33, %32 ], [ %3, %25 ]
  %38 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 8
  %39 = bitcast %"class.WTF::ConditionalDestructor"* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %37, i64 %41
  %43 = icmp eq i32 %36, %40
  br i1 %43, label %52, label %44

44:                                               ; preds = %35
  %45 = zext i32 %36 to i64
  %46 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %37, i64 %45
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi %"class.WTF::CrossThreadOnceFunction"* [ %50, %47 ], [ %46, %44 ]
  %49 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %48, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %49) #6
  %50 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %48, i64 1
  %51 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %50, %42
  br i1 %51, label %52, label %47

52:                                               ; preds = %20, %47, %35, %5
  %53 = bitcast %"class.WTF::ConditionalDestructor"* %0 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %54) #6
  store %"class.WTF::CrossThreadOnceFunction"* null, %"class.WTF::CrossThreadOnceFunction"** %2, align 8
  br label %55

55:                                               ; preds = %1, %52
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunner11InitIsolateEPN2v87IsolateE(%"class.blink::InspectorTaskRunner"*, %"class.v8::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %3) #6
  %4 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 4
  store %"class.v8::Isolate"* %1, %"class.v8::Isolate"** %4, align 8
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %3) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunner7DisposeEv(%"class.blink::InspectorTaskRunner"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %2) #6
  %3 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 6
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 4
  store %"class.v8::Isolate"* null, %"class.v8::Isolate"** %4, align 8
  %5 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 3
  %6 = bitcast %class.scoped_refptr* %5 to i64*
  %7 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 0, i32 0
  %8 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %7, align 8
  store i64 0, i64* %6, align 8
  %9 = icmp eq %"class.base::SingleThreadTaskRunner"* %8, null
  br i1 %9, label %18, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %8, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw sub i32* %12, i32 1 acq_rel
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %11, i64 -2
  %17 = bitcast %"class.base::RefCountedThreadSafe.1"* %16 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %17) #6
  br label %18

18:                                               ; preds = %1, %10, %15
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19InspectorTaskRunner10AppendTaskEN3WTF23CrossThreadOnceFunctionIFvvEEE(%"class.blink::InspectorTaskRunner"*, %"class.WTF::CrossThreadOnceFunction"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.base::Location", align 8
  %10 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %11 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %11) #6
  %12 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 6
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %106

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5
  %17 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 2
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %25, label %22

22:                                               ; preds = %15
  %23 = add i32 %21, 1
  %24 = icmp eq i32 %23, %18
  br i1 %24, label %34, label %36

25:                                               ; preds = %15
  %26 = icmp eq i32 %21, 0
  %27 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  br i1 %26, label %32, label %29

29:                                               ; preds = %25
  %30 = add i32 %28, -1
  %31 = icmp eq i32 %21, %30
  br i1 %31, label %34, label %36

32:                                               ; preds = %25
  %33 = icmp eq i32 %28, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %32, %29, %22
  tail call void @_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"* %16) #6
  %35 = load i32, i32* %20, align 4
  br label %36

36:                                               ; preds = %22, %29, %32, %34
  %37 = phi i32 [ %21, %22 ], [ %21, %29 ], [ 0, %32 ], [ %35, %34 ]
  %38 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %38, align 8
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %39, i64 %40
  %42 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = add i32 %43, -1
  %45 = icmp eq i32 %37, %44
  %46 = add i32 %37, 1
  %47 = select i1 %45, i32 0, i32 %46
  store i32 %47, i32* %20, align 4
  %48 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %49 = bitcast %"class.WTF::CrossThreadOnceFunction"* %1 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.WTF::CrossThreadOnceFunction"* %41 to i64*
  store i64 %50, i64* %51, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %48, align 8
  %52 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 3, i32 0
  %53 = bitcast %"class.base::SingleThreadTaskRunner"** %52 to %"class.base::SequencedTaskRunner"**
  %54 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %53, align 8
  %55 = bitcast %"class.base::Location"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #6
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.1, i64 0, i64 0), i32 37) #6
  %56 = icmp eq %"class.blink::InspectorTaskRunner"* %0, null
  br i1 %56, label %64, label %57

57:                                               ; preds = %36
  %58 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 1 monotonic
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %57
  %62 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #6
  %63 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #6
  br label %64

64:                                               ; preds = %61, %57, %36
  %65 = ptrtoint %"class.blink::InspectorTaskRunner"* %0 to i64
  %66 = bitcast %"class.base::OnceCallback"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66)
  %67 = call i8* @_Znwm(i64 56) #7, !noalias !3
  %68 = bitcast i8* %67 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %68, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS4_EEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS3_EEE7DestroyEPKNS0_13BindStateBaseE) #6, !noalias !3
  %69 = getelementptr inbounds i8, i8* %67, i64 32
  %70 = bitcast i8* %69 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.blink::InspectorTaskRunner"*)* @_ZN5blink19InspectorTaskRunner37PerformSingleInterruptingTaskDontWaitEv to i64), i64 0>, <2 x i64>* %70, align 8, !noalias !3
  %71 = getelementptr inbounds i8, i8* %67, i64 48
  %72 = bitcast i8* %71 to i64*
  store i64 %65, i64* %72, align 8, !noalias !3
  %73 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #6, !noalias !10
  %74 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0, i32 0, i32 0
  %75 = ptrtoint i8* %67 to i64
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %74, align 8, !noalias !11
  %76 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %76, align 8, !noalias !11
  %77 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %77) #6, !noalias !11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #6, !noalias !10
  %78 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %78) #6, !noalias !10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66)
  %79 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79)
  %80 = bitcast %"class.WTF::CrossThreadOnceFunction"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80)
  %81 = bitcast %"class.base::SequencedTaskRunner"* %54 to %"class.base::TaskRunner"*
  %82 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %82, align 8
  %83 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %75, i64* %84, align 8, !alias.scope !14
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %83, align 8, !noalias !14
  %85 = bitcast %"class.base::SequencedTaskRunner"* %54 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %86 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %85, align 8
  %87 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %86, align 8
  %88 = call zeroext i1 %87(%"class.base::TaskRunner"* %81, %"class.base::Location"* nonnull dereferenceable(32) %9, %"class.base::OnceCallback"* nonnull %3, i64 0) #6
  %89 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %89) #6
  %90 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %90) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80)
  %91 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %10, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %91) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #6
  %92 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 4
  %93 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %92, align 8
  %94 = icmp eq %"class.v8::Isolate"* %93, null
  br i1 %94, label %106, label %95

95:                                               ; preds = %64
  %96 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = atomicrmw add i32* %96, i32 1 monotonic
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %95
  %100 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #6
  %101 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #6
  %102 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %92, align 8
  br label %103

103:                                              ; preds = %95, %99
  %104 = phi %"class.v8::Isolate"* [ %93, %95 ], [ %102, %99 ]
  %105 = bitcast %"class.blink::InspectorTaskRunner"* %0 to i8*
  call void @_ZN2v87Isolate16RequestInterruptEPFvPS0_PvES2_(%"class.v8::Isolate"* %104, void (%"class.v8::Isolate"*, i8*)* nonnull @_ZN5blink19InspectorTaskRunner19V8InterruptCallbackEPN2v87IsolateEPv, i8* %105) #6
  br label %106

106:                                              ; preds = %103, %64, %2
  %107 = phi i1 [ false, %2 ], [ true, %64 ], [ true, %103 ]
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %11) #6
  ret i1 %107
}

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunner37PerformSingleInterruptingTaskDontWaitEv(%"class.blink::InspectorTaskRunner"*) #0 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %4 = bitcast %"class.WTF::CrossThreadOnceFunction"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %5, align 8
  %6 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %6) #6, !noalias !17
  %7 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 6
  %8 = load i8, i8* %7, align 8, !range !2, !noalias !17
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 1
  %12 = load i32, i32* %11, align 8, !noalias !17
  %13 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 2
  %14 = load i32, i32* %13, align 4, !noalias !17
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %1, %10
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8, !alias.scope !17
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %6) #6, !noalias !17
  br label %56

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %18, align 8, !noalias !20
  %20 = zext i32 %12 to i64
  %21 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %19, i64 %20
  %22 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = bitcast %"class.WTF::CrossThreadOnceFunction"* %21 to i64*
  %24 = load i64, i64* %23, align 8, !noalias !20
  %25 = bitcast %"class.WTF::CrossThreadOnceFunction"* %3 to i64*
  store i64 %24, i64* %25, align 8, !alias.scope !20
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %22, align 8, !noalias !20
  %26 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %18, align 8, !noalias !20
  %27 = load i32, i32* %11, align 8, !noalias !20
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %26, i64 %28
  %30 = add i32 %27, 1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %26, i64 %31
  br label %33

33:                                               ; preds = %33, %17
  %34 = phi %"class.WTF::CrossThreadOnceFunction"* [ %36, %33 ], [ %29, %17 ]
  %35 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %34, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %35) #6, !noalias !20
  %36 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %34, i64 1
  %37 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %36, %32
  br i1 %37, label %38, label %33

38:                                               ; preds = %33
  %39 = load i32, i32* %11, align 8, !noalias !20
  %40 = add i32 %39, 1
  %41 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8, !noalias !20
  %43 = add i32 %42, -1
  %44 = icmp eq i32 %39, %43
  %45 = select i1 %44, i32 0, i32 %40
  store i32 %45, i32* %11, align 8, !noalias !20
  %46 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %5, align 8
  %47 = icmp eq %"class.base::internal::BindStateBase"* %46, null
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %6) #6, !noalias !17
  br i1 %47, label %56, label %48

48:                                               ; preds = %38
  %49 = ptrtoint %"class.base::internal::BindStateBase"* %46 to i64
  %50 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #6
  %51 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %49, i64* %51, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %52 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %53 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %46, i64 0, i32 1
  %54 = bitcast void ()** %53 to void (%"class.base::internal::BindStateBase"*)**
  %55 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %54, align 8
  tail call void %55(%"class.base::internal::BindStateBase"* nonnull %46) #6
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %52) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #6
  br label %56

56:                                               ; preds = %16, %38, %48
  %57 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %57) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret void
}

declare void @_ZN2v87Isolate16RequestInterruptEPFvPS0_PvES2_(%"class.v8::Isolate"*, void (%"class.v8::Isolate"*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunner19V8InterruptCallbackEPN2v87IsolateEPv(%"class.v8::Isolate"* nocapture readnone, i8*) #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %5 = bitcast %"class.WTF::CrossThreadOnceFunction"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %6, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 8
  %8 = bitcast i8* %7 to %"class.WTF::MutexBase"*
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %8) #6, !noalias !23
  %9 = getelementptr inbounds i8, i8* %1, i64 88
  %10 = load i8, i8* %9, align 8, !range !2, !noalias !23
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %1, i64 80
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 8, !noalias !23
  %16 = getelementptr inbounds i8, i8* %1, i64 84
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4, !noalias !23
  %19 = icmp eq i32 %15, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %12, %2
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8, !alias.scope !23
  br label %52

21:                                               ; preds = %12
  %22 = getelementptr inbounds i8, i8* %1, i64 64
  %23 = bitcast i8* %22 to %"class.WTF::CrossThreadOnceFunction"**
  %24 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %23, align 8, !noalias !26
  %25 = zext i32 %15 to i64
  %26 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %24, i64 %25
  %27 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = bitcast %"class.WTF::CrossThreadOnceFunction"* %26 to i64*
  %29 = load i64, i64* %28, align 8, !noalias !26
  %30 = bitcast %"class.WTF::CrossThreadOnceFunction"* %4 to i64*
  store i64 %29, i64* %30, align 8, !alias.scope !26
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %27, align 8, !noalias !26
  %31 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %23, align 8, !noalias !26
  %32 = load i32, i32* %14, align 8, !noalias !26
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %31, i64 %33
  %35 = add i32 %32, 1
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %31, i64 %36
  br label %38

38:                                               ; preds = %38, %21
  %39 = phi %"class.WTF::CrossThreadOnceFunction"* [ %41, %38 ], [ %34, %21 ]
  %40 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %39, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %40) #6, !noalias !26
  %41 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %39, i64 1
  %42 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %41, %37
  br i1 %42, label %43, label %38

43:                                               ; preds = %38
  %44 = load i32, i32* %14, align 8, !noalias !26
  %45 = add i32 %44, 1
  %46 = getelementptr inbounds i8, i8* %1, i64 72
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 8, !noalias !26
  %49 = add i32 %48, -1
  %50 = icmp eq i32 %44, %49
  %51 = select i1 %50, i32 0, i32 %45
  store i32 %51, i32* %14, align 8, !noalias !26
  br label %52

52:                                               ; preds = %20, %43
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %8) #6, !noalias !23
  %53 = bitcast i8* %1 to i32*
  %54 = atomicrmw sub i32* %53, i32 1 acq_rel
  %55 = icmp ne i32 %54, 1
  %56 = icmp eq i8* %1, null
  %57 = or i1 %56, %55
  br i1 %57, label %74, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds i8, i8* %1, i64 64
  %60 = bitcast i8* %59 to %"class.WTF::ConditionalDestructor"*
  tail call void @_ZN3WTF21ConditionalDestructorINS_5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"* %60) #6
  %61 = getelementptr inbounds i8, i8* %1, i64 48
  %62 = bitcast i8* %61 to %"class.base::SingleThreadTaskRunner"**
  %63 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %62, align 8
  %64 = icmp eq %"class.base::SingleThreadTaskRunner"* %63, null
  br i1 %64, label %73, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %63, i64 0, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %67, i32 1 acq_rel
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %66, i64 -2
  %72 = bitcast %"class.base::RefCountedThreadSafe.1"* %71 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %72) #6
  br label %73

73:                                               ; preds = %70, %65, %58
  tail call void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"* %8) #6
  tail call void @free(i8* nonnull %1) #6
  br label %74

74:                                               ; preds = %52, %73
  %75 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %6, align 8
  %76 = icmp eq %"class.base::internal::BindStateBase"* %75, null
  br i1 %76, label %85, label %77

77:                                               ; preds = %74
  %78 = ptrtoint %"class.base::internal::BindStateBase"* %75 to i64
  %79 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #6
  %80 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %78, i64* %80, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %81 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %82 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %75, i64 0, i32 1
  %83 = bitcast void ()** %82 to void (%"class.base::internal::BindStateBase"*)**
  %84 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %83, align 8
  tail call void %84(%"class.base::internal::BindStateBase"* nonnull %75) #6
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %81) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #6
  br label %85

85:                                               ; preds = %74, %77
  %86 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %86) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19InspectorTaskRunner23AppendTaskDontInterruptEN3WTF23CrossThreadOnceFunctionIFvvEEE(%"class.blink::InspectorTaskRunner"*, %"class.WTF::CrossThreadOnceFunction"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %5 = alloca %"class.base::Location", align 8
  %6 = alloca %"class.WTF::CrossThreadOnceFunction", align 8
  %7 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %7) #6
  %8 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 6
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %32

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %0, i64 0, i32 3, i32 0
  %13 = bitcast %"class.base::SingleThreadTaskRunner"** %12 to %"class.base::SequencedTaskRunner"**
  %14 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %13, align 8
  %15 = bitcast %"class.base::Location"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #6
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.1, i64 0, i64 0), i32 52) #6
  %16 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.WTF::CrossThreadOnceFunction"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %16, align 8
  %19 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = bitcast %"class.WTF::CrossThreadOnceFunction"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %21 = bitcast %"class.base::SequencedTaskRunner"* %14 to %"class.base::TaskRunner"*
  %22 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %22, align 8
  %23 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %18, i64* %24, align 8, !alias.scope !29
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %23, align 8, !noalias !29
  %25 = bitcast %"class.base::SequencedTaskRunner"* %14 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %26 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %25, align 8
  %27 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %26, align 8
  %28 = call zeroext i1 %27(%"class.base::TaskRunner"* %21, %"class.base::Location"* nonnull dereferenceable(32) %5, %"class.base::OnceCallback"* nonnull %3, i64 0) #6
  %29 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %29) #6
  %30 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %30) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  %31 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %6, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %31) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #6
  br label %32

32:                                               ; preds = %2, %11
  %33 = phi i1 [ true, %11 ], [ false, %2 ]
  call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %7) #6
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19InspectorTaskRunner24TakeNextInterruptingTaskEv(%"class.WTF::CrossThreadOnceFunction"* noalias nocapture sret, %"class.blink::InspectorTaskRunner"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 2, i32 0
  tail call void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"* %3) #6
  %4 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 6
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 5, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 5, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  br label %44

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %16, align 8, !noalias !32
  %18 = zext i32 %9 to i64
  %19 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %17, i64 %18
  %20 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.WTF::CrossThreadOnceFunction"* %19 to i64*
  %22 = load i64, i64* %21, align 8, !noalias !32
  %23 = bitcast %"class.WTF::CrossThreadOnceFunction"* %0 to i64*
  store i64 %22, i64* %23, align 8, !alias.scope !32
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %20, align 8, !noalias !32
  %24 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %16, align 8, !noalias !32
  %25 = load i32, i32* %8, align 8, !noalias !32
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %24, i64 %26
  %28 = add i32 %25, 1
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %24, i64 %29
  br label %31

31:                                               ; preds = %31, %15
  %32 = phi %"class.WTF::CrossThreadOnceFunction"* [ %34, %31 ], [ %27, %15 ]
  %33 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %32, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %33) #6, !noalias !32
  %34 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %32, i64 1
  %35 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %34, %30
  br i1 %35, label %36, label %31

36:                                               ; preds = %31
  %37 = load i32, i32* %8, align 8, !noalias !32
  %38 = add i32 %37, 1
  %39 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %40 = load i32, i32* %39, align 8, !noalias !32
  %41 = add i32 %40, -1
  %42 = icmp eq i32 %37, %41
  %43 = select i1 %42, i32 0, i32 %38
  store i32 %43, i32* %8, align 8, !noalias !32
  br label %44

44:                                               ; preds = %36, %13
  tail call void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"* %3) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3WTF9MutexBaseC2Eb(%"class.WTF::MutexBase"*, i1 zeroext) unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN3WTF9MutexBase4lockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #3

declare void @_ZN3WTF9MutexBase6unlockEv(%"class.WTF::MutexBase"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS4_EEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %8
  %12 = bitcast i8* %11 to %"class.blink::InspectorTaskRunner"*
  %13 = and i64 %5, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %5, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.blink::InspectorTaskRunner"*)**
  %21 = load void (%"class.blink::InspectorTaskRunner"*)*, void (%"class.blink::InspectorTaskRunner"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %5 to void (%"class.blink::InspectorTaskRunner"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.blink::InspectorTaskRunner"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.blink::InspectorTaskRunner"* %12) #6
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS3_EEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %34, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.blink::InspectorTaskRunner"**
  %6 = load %"class.blink::InspectorTaskRunner"*, %"class.blink::InspectorTaskRunner"** %5, align 8
  %7 = icmp eq %"class.blink::InspectorTaskRunner"* %6, null
  br i1 %7, label %32, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %6, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.blink::InspectorTaskRunner", %"class.blink::InspectorTaskRunner"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %32

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %9, i64 16
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %14 to %"class.WTF::ConditionalDestructor"*
  tail call void @_ZN3WTF21ConditionalDestructorINS_5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"* %15) #6
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %9, i64 12
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to %"class.base::SingleThreadTaskRunner"**
  %18 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %17, align 8
  %19 = icmp eq %"class.base::SingleThreadTaskRunner"* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %18, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %21, i64 -2
  %27 = bitcast %"class.base::RefCountedThreadSafe.1"* %26 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %27) #6
  br label %28

28:                                               ; preds = %25, %20, %13
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %9, i64 2
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %29 to %"class.WTF::MutexBase"*
  tail call void @_ZN3WTF9MutexBaseD2Ev(%"class.WTF::MutexBase"* %30) #6
  %31 = bitcast %"class.blink::InspectorTaskRunner"* %6 to i8*
  tail call void @free(i8* %31) #6
  br label %32

32:                                               ; preds = %3, %8, %28
  %33 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %33) #7
  br label %34

34:                                               ; preds = %32, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %4, align 8
  %6 = lshr i32 %3, 2
  %7 = add i32 %3, 1
  %8 = add i32 %7, %6
  %9 = icmp ugt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  %11 = zext i32 %10 to i64
  %12 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_23CrossThreadOnceFunctionIFvvEEEEEmm(i64 %11) #6
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_23CrossThreadOnceFunctionIFvvEEEEEmm(i64 %11) #6
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_23CrossThreadOnceFunctionIFvvEEEEEPKcv, i64 0, i64 0)) #6
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 3
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %2, align 8
  %19 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = bitcast i8* %14 to %"class.WTF::CrossThreadOnceFunction"*
  br i1 %23, label %44, label %25

25:                                               ; preds = %1
  %26 = zext i32 %20 to i64
  %27 = zext i32 %22 to i64
  %28 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %5, i64 %27
  %29 = icmp eq i32 %20, %22
  br i1 %29, label %89, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %24, i64 %26
  %32 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %5, i64 %26
  br label %33

33:                                               ; preds = %30, %33
  %34 = phi %"class.WTF::CrossThreadOnceFunction"* [ %42, %33 ], [ %32, %30 ]
  %35 = phi %"class.WTF::CrossThreadOnceFunction"* [ %41, %33 ], [ %31, %30 ]
  %36 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %37 = bitcast %"class.WTF::CrossThreadOnceFunction"* %34 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.WTF::CrossThreadOnceFunction"* %35 to i64*
  store i64 %38, i64* %39, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %36, align 8
  %40 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %34, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %40) #6
  %41 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %35, i64 1
  %42 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %34, i64 1
  %43 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %42, %28
  br i1 %43, label %89, label %33

44:                                               ; preds = %1
  %45 = zext i32 %22 to i64
  %46 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %5, i64 %45
  %47 = icmp eq i32 %22, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %44, %48
  %49 = phi %"class.WTF::CrossThreadOnceFunction"* [ %57, %48 ], [ %5, %44 ]
  %50 = phi %"class.WTF::CrossThreadOnceFunction"* [ %56, %48 ], [ %24, %44 ]
  %51 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = bitcast %"class.WTF::CrossThreadOnceFunction"* %49 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.WTF::CrossThreadOnceFunction"* %50 to i64*
  store i64 %53, i64* %54, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %51, align 8
  %55 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %49, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %55) #6
  %56 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %50, i64 1
  %57 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %49, i64 1
  %58 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %57, %46
  br i1 %58, label %59, label %48

59:                                               ; preds = %48
  %60 = load i32, i32* %2, align 8
  %61 = load i32, i32* %19, align 8
  %62 = load %"class.WTF::CrossThreadOnceFunction"*, %"class.WTF::CrossThreadOnceFunction"** %4, align 8
  br label %63

63:                                               ; preds = %59, %44
  %64 = phi %"class.WTF::CrossThreadOnceFunction"* [ %62, %59 ], [ %24, %44 ]
  %65 = phi i32 [ %61, %59 ], [ %20, %44 ]
  %66 = phi i32 [ %60, %59 ], [ %18, %44 ]
  %67 = sub i32 %65, %3
  %68 = add i32 %67, %66
  %69 = zext i32 %3 to i64
  %70 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %5, i64 %69
  %71 = icmp eq i32 %65, %3
  br i1 %71, label %88, label %72

72:                                               ; preds = %63
  %73 = zext i32 %68 to i64
  %74 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %64, i64 %73
  %75 = zext i32 %65 to i64
  %76 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %5, i64 %75
  br label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.WTF::CrossThreadOnceFunction"* [ %86, %77 ], [ %76, %72 ]
  %79 = phi %"class.WTF::CrossThreadOnceFunction"* [ %85, %77 ], [ %74, %72 ]
  %80 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %78, i64 0, i32 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.WTF::CrossThreadOnceFunction"* %78 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.WTF::CrossThreadOnceFunction"* %79 to i64*
  store i64 %82, i64* %83, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %80, align 8
  %84 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %78, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %84) #6
  %85 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %79, i64 1
  %86 = getelementptr inbounds %"class.WTF::CrossThreadOnceFunction", %"class.WTF::CrossThreadOnceFunction"* %78, i64 1
  %87 = icmp eq %"class.WTF::CrossThreadOnceFunction"* %86, %70
  br i1 %87, label %88, label %77

88:                                               ; preds = %77, %63
  store i32 %68, i32* %19, align 8
  br label %89

89:                                               ; preds = %33, %25, %88
  %90 = bitcast %"class.WTF::CrossThreadOnceFunction"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_23CrossThreadOnceFunctionIFvvEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #1

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6, !8}
!4 = distinct !{!4, !5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS4_EEEEDcOT0_DpOT1_: argument 0"}
!5 = distinct !{!5, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS4_EEEEDcOT0_DpOT1_"}
!6 = distinct !{!6, !7, !"_ZN4base8BindOnceIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS2_EEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSA_DpOSB_: argument 0"}
!7 = distinct !{!7, !"_ZN4base8BindOnceIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS2_EEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSA_DpOSB_"}
!8 = distinct !{!8, !9, !"_ZN3WTF19CrossThreadBindOnceIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS2_EEEEDaOT_DpOT0_: argument 0"}
!9 = distinct !{!9, !"_ZN3WTF19CrossThreadBindOnceIMN5blink19InspectorTaskRunnerEFvvEJ13scoped_refptrIS2_EEEEDaOT_DpOT0_"}
!10 = !{!8}
!11 = !{!12, !8}
!12 = distinct !{!12, !13, !"_ZN3WTF8internal27MakeCrossThreadOnceFunctionIFvvEEEDaN4base12OnceCallbackIT_EE: argument 0"}
!13 = distinct !{!13, !"_ZN3WTF8internal27MakeCrossThreadOnceFunctionIFvvEEEDaN4base12OnceCallbackIT_EE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3WTF25ConvertToBaseOnceCallbackENS_23CrossThreadOnceFunctionIFvvEEE: argument 0"}
!16 = distinct !{!16, !"_ZN3WTF25ConvertToBaseOnceCallbackENS_23CrossThreadOnceFunctionIFvvEEE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blink19InspectorTaskRunner24TakeNextInterruptingTaskEv: argument 0"}
!19 = distinct !{!19, !"_ZN5blink19InspectorTaskRunner24TakeNextInterruptingTaskEv"}
!20 = !{!21, !18}
!21 = distinct !{!21, !22, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv: argument 0"}
!22 = distinct !{!22, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN5blink19InspectorTaskRunner24TakeNextInterruptingTaskEv: argument 0"}
!25 = distinct !{!25, !"_ZN5blink19InspectorTaskRunner24TakeNextInterruptingTaskEv"}
!26 = !{!27, !24}
!27 = distinct !{!27, !28, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv: argument 0"}
!28 = distinct !{!28, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3WTF25ConvertToBaseOnceCallbackENS_23CrossThreadOnceFunctionIFvvEEE: argument 0"}
!31 = distinct !{!31, !"_ZN3WTF25ConvertToBaseOnceCallbackENS_23CrossThreadOnceFunctionIFvvEEE"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv: argument 0"}
!34 = distinct !{!34, !"_ZN3WTF5DequeINS_23CrossThreadOnceFunctionIFvvEEELj0ENS_18PartitionAllocatorEE9TakeFirstEv"}
