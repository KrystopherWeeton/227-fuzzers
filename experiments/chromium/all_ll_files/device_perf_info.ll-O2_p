; ModuleID = '../../gpu/config/device_perf_info.cc'
source_filename = "../../gpu/config/device_perf_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [40 x i8] }
%"struct.absl::optional_internal::empty_struct" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [3 x i8], %union.anon }
%union.anon = type { %"struct.gpu::DevicePerfInfo" }
%"struct.gpu::DevicePerfInfo" = type <{ i32, i32, i32, i32, i8, [3 x i8] }>
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }

@_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock = internal global i64 0, align 8
@_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE = internal unnamed_addr global { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } } { i8 0, [3 x i8] undef, { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } undef }, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu17GetDevicePerfInfoEv(%"class.absl::optional"* noalias nocapture sret) local_unnamed_addr #0 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %"class.base::internal::LockImpl"*)) #5
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock) #5
  br label %8

8:                                                ; preds = %1, %4, %7
  %9 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %union.pthread_mutex_t*)) #5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %8
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %"class.base::internal::LockImpl"*)) #5
  br label %12

12:                                               ; preds = %8, %11
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE, i64 0, i32 0), i64 24, i1 false)
  %14 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %union.pthread_mutex_t*)) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gpu17SetDevicePerfInfoERKNS_14DevicePerfInfoE(%"struct.gpu::DevicePerfInfo"* nocapture readonly dereferenceable(20)) local_unnamed_addr #0 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %"class.base::internal::LockImpl"*)) #5
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3gpu12_GLOBAL__N_17GetLockEvE4lock) #5
  br label %8

8:                                                ; preds = %1, %4, %7
  %9 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %union.pthread_mutex_t*)) #5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %8
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %"class.base::internal::LockImpl"*)) #5
  br label %12

12:                                               ; preds = %8, %11
  %13 = load i8, i8* getelementptr inbounds ({ i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE, i64 0, i32 0), align 4, !range !4
  %14 = icmp eq i8 %13, 0
  %15 = bitcast %"struct.gpu::DevicePerfInfo"* %0 to i8*
  br i1 %14, label %17, label %16

16:                                               ; preds = %12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 getelementptr inbounds ({ i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8* align 4 %15, i64 17, i1 false) #5
  br label %18

17:                                               ; preds = %12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 getelementptr inbounds ({ i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0), i8* align 4 %15, i64 20, i1 false) #5
  store i8 1, i8* getelementptr inbounds ({ i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [3 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN3gpu12_GLOBAL__N_118g_device_perf_infoE, i64 0, i32 0), align 4
  br label %18

18:                                               ; preds = %16, %17
  %19 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* bitcast (%"class.base::NoDestructor"* @_ZZN3gpu12_GLOBAL__N_17GetLockEvE4lock to %union.pthread_mutex_t*)) #5
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
