; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/lstm_eval.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/lstm_eval.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.TfLiteLSTMParams = type { i32, float, float, i32, i8 }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%"struct.Eigen::internal::assign_op" = type { i8 }
%"class.Eigen::CwiseUnaryOp" = type { %"class.Eigen::ArrayWrapper", %"struct.Eigen::internal::scalar_logistic_op", [7 x i8] }
%"class.Eigen::ArrayWrapper" = type { %"class.Eigen::Map" }
%"class.Eigen::Map" = type { %"class.Eigen::MapBase.base.28", %"class.Eigen::Stride", [5 x i8] }
%"class.Eigen::MapBase.base.28" = type { %"class.Eigen::MapBase.base" }
%"class.Eigen::MapBase.base" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.27" }>
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"class.Eigen::internal::variable_if_dynamic.27" = type { i8 }
%"class.Eigen::Stride" = type { %"class.Eigen::internal::variable_if_dynamic.29", %"class.Eigen::internal::variable_if_dynamic.29" }
%"class.Eigen::internal::variable_if_dynamic.29" = type { i8 }
%"struct.Eigen::internal::scalar_logistic_op" = type { i8 }
%"class.tflite::CpuBackendContext" = type <{ %"class.tflite::TfLiteInternalBackendContext", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2", i32, i8, [3 x i8] }>
%"class.tflite::TfLiteInternalBackendContext" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ruy::Context"* }
%"class.ruy::Context" = type { %"class.ruy::CtxImpl"* }
%"class.ruy::CtxImpl" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.gemmlowp::GemmContext"* }
%"class.gemmlowp::GemmContext" = type { %"class.gemmlowp::MultiThreadGemmContext" }
%"class.gemmlowp::MultiThreadGemmContext" = type { %"class.gemmlowp::MultiThreadGemmContextBase", %"class.gemmlowp::WorkersPool" }
%"class.gemmlowp::MultiThreadGemmContextBase" = type { %"class.gemmlowp::SingleThreadGemmContext.base", i32 }
%"class.gemmlowp::SingleThreadGemmContext.base" = type <{ %"class.gemmlowp::Allocator", i32, i32, float }>
%"class.gemmlowp::Allocator" = type { i8, i64, i8*, i64, i64, [5 x i64], i64 }
%"class.gemmlowp::WorkersPool" = type { %"class.std::__1::vector", %"class.gemmlowp::BlockingCounter", %"class.gemmlowp::Allocator" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"**, %"class.std::__1::__compressed_pair.12" }
%"class.gemmlowp::Worker" = type { i64, %"struct.gemmlowp::Task"*, %union.pthread_cond_t, %union.pthread_mutex_t, %"struct.std::__1::atomic", %"class.gemmlowp::Allocator", %"class.gemmlowp::BlockingCounter"* }
%"struct.gemmlowp::Task" = type { i32 (...)**, %"class.gemmlowp::Allocator"* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.5, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.5 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gemmlowp::Worker"** }
%"class.gemmlowp::BlockingCounter" = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i64 }
%"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i8, i32, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", [8 x i32], [8 x i32], [12 x i32] }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { i16*, i16*, %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.Eigen::internal::evaluator.55" = type { %"struct.Eigen::internal::unary_evaluator.56" }
%"struct.Eigen::internal::unary_evaluator.56" = type { %"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" }
%"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" = type { %"struct.Eigen::internal::evaluator.40" }
%"struct.Eigen::internal::evaluator.40" = type { %"struct.Eigen::internal::evaluator.41" }
%"struct.Eigen::internal::evaluator.41" = type { %"struct.Eigen::internal::unary_evaluator.42" }
%"struct.Eigen::internal::unary_evaluator.42" = type { %"struct.Eigen::internal::evaluator_wrapper_base" }
%"struct.Eigen::internal::evaluator_wrapper_base" = type { %"struct.Eigen::internal::evaluator.45" }
%"struct.Eigen::internal::evaluator.45" = type { %"struct.Eigen::internal::mapbase_evaluator" }
%"struct.Eigen::internal::mapbase_evaluator" = type { float*, %"class.Eigen::internal::variable_if_dynamic.27", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::generic_dense_assignment_kernel.59" = type { %"struct.Eigen::internal::evaluator.41"*, %"struct.Eigen::internal::evaluator.55"*, %"struct.Eigen::internal::assign_op"*, %"class.Eigen::ArrayWrapper"* }
%"struct.Eigen::EigenBase.39" = type { i8 }

$_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf = comdat any

$_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_ = comdat any

$_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_ = comdat any

@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [49 x i8] c"input->dims->size >= 2 && input->dims->size <= 3\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\0AFATAL\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"row_sums_size == num_row_sums\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin9lstm_eval9EvalFloatEPK12TfLiteTensorS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsbbiPS3_S9_S9_S9_(%struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteLSTMParams* nocapture readonly, i1 zeroext, i1 zeroext, i32, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly) local_unnamed_addr #0 {
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %37 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %36, align 8
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, -2
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %43) #13
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %45) #13
  tail call void @abort() #14
  unreachable

47:                                               ; preds = %35
  %48 = icmp eq i32 %39, 3
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 1, i64 0
  br i1 %48, label %50, label %55

50:                                               ; preds = %47
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 1, i64 1
  %52 = select i1 %29, i32* %49, i32* %51
  %53 = load i32, i32* %52, align 4
  %54 = select i1 %29, i32* %51, i32* %49
  br label %55

55:                                               ; preds = %47, %50
  %56 = phi i32* [ %54, %50 ], [ %49, %47 ]
  %57 = phi i32 [ %53, %50 ], [ 1, %47 ]
  %58 = load i32, i32* %56, align 4
  %59 = add nsw i32 %39, -1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 1, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = icmp ne %struct.TfLiteTensor* %16, null
  br i1 %63, label %64, label %73

64:                                               ; preds = %55
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %66 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %65, align 8
  %67 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %66, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, -1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %66, i64 0, i32 1, i64 %70
  %72 = load i32, i32* %71, align 4
  br label %73

73:                                               ; preds = %55, %64
  %74 = phi i32 [ %72, %64 ], [ 0, %55 ]
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq %struct.TfLiteTensor* %1, null
  %84 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %84, label %89, label %85

85:                                               ; preds = %73
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %87 = bitcast %union.TfLitePtrUnion* %86 to float**
  %88 = load float*, float** %87, align 8
  br label %89

89:                                               ; preds = %73, %85
  %90 = phi float* [ %88, %85 ], [ null, %73 ]
  br i1 %83, label %91, label %93

91:                                               ; preds = %89
  %92 = shl nsw i32 %78, 1
  br label %99

93:                                               ; preds = %89
  %94 = mul nsw i32 %78, %58
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %90, i64 %95
  %97 = shl nsw i32 %78, 1
  %98 = mul nsw i32 %78, 3
  br label %99

99:                                               ; preds = %93, %91
  %100 = phi float* [ null, %91 ], [ %90, %93 ]
  %101 = phi float* [ %90, %91 ], [ %96, %93 ]
  %102 = phi i32 [ %78, %91 ], [ %97, %93 ]
  %103 = phi i32 [ %92, %91 ], [ %98, %93 ]
  %104 = mul nsw i32 %103, %58
  %105 = mul nsw i32 %102, %58
  %106 = sext i32 %104 to i64
  %107 = sext i32 %105 to i64
  %108 = getelementptr inbounds float, float* %90, i64 %106
  %109 = getelementptr inbounds float, float* %90, i64 %107
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %111 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %110, align 8
  %112 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %111, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = add nsw i32 %113, -1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %111, i64 0, i32 1, i64 %115
  %117 = load i32, i32* %116, align 4
  br i1 %29, label %215, label %118

118:                                              ; preds = %99
  %119 = icmp sgt i32 %58, 0
  br i1 %119, label %120, label %596

120:                                              ; preds = %118
  %121 = icmp sgt i32 %57, 0
  %122 = icmp eq %struct.TfLiteTensor* %0, null
  %123 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %124 = bitcast %union.TfLitePtrUnion* %123 to float**
  %125 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %126 = bitcast %union.TfLitePtrUnion* %125 to float**
  %127 = icmp eq %struct.TfLiteTensor* %34, null
  %128 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %129 = bitcast %union.TfLitePtrUnion* %128 to float**
  %130 = sext i32 %30 to i64
  %131 = icmp eq %struct.TfLiteTensor* %32, null
  %132 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %133 = bitcast %union.TfLitePtrUnion* %132 to float**
  %134 = icmp eq %struct.TfLiteTensor* %33, null
  %135 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %136 = bitcast %union.TfLitePtrUnion* %135 to float**
  %137 = icmp eq float* %100, null
  %138 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %139 = bitcast %union.TfLitePtrUnion* %138 to float**
  %140 = icmp eq %struct.TfLiteTensor* %2, null
  %141 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %142 = bitcast %union.TfLitePtrUnion* %141 to float**
  %143 = icmp eq %struct.TfLiteTensor* %3, null
  %144 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %145 = bitcast %union.TfLitePtrUnion* %144 to float**
  %146 = icmp eq %struct.TfLiteTensor* %4, null
  %147 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %148 = bitcast %union.TfLitePtrUnion* %147 to float**
  %149 = icmp eq %struct.TfLiteTensor* %17, null
  %150 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1
  %151 = bitcast %union.TfLitePtrUnion* %150 to float**
  %152 = icmp eq %struct.TfLiteTensor* %18, null
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %154 = bitcast %union.TfLitePtrUnion* %153 to float**
  %155 = icmp eq %struct.TfLiteTensor* %19, null
  %156 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %157 = bitcast %union.TfLitePtrUnion* %156 to float**
  %158 = icmp eq %struct.TfLiteTensor* %20, null
  %159 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %160 = bitcast %union.TfLitePtrUnion* %159 to float**
  %161 = icmp eq %struct.TfLiteTensor* %5, null
  %162 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %163 = bitcast %union.TfLitePtrUnion* %162 to float**
  %164 = icmp eq %struct.TfLiteTensor* %6, null
  %165 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %166 = bitcast %union.TfLitePtrUnion* %165 to float**
  %167 = icmp eq %struct.TfLiteTensor* %7, null
  %168 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %169 = bitcast %union.TfLitePtrUnion* %168 to float**
  %170 = icmp eq %struct.TfLiteTensor* %8, null
  %171 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %172 = bitcast %union.TfLitePtrUnion* %171 to float**
  %173 = icmp eq %struct.TfLiteTensor* %9, null
  %174 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 1
  %175 = bitcast %union.TfLitePtrUnion* %174 to float**
  %176 = icmp eq %struct.TfLiteTensor* %10, null
  %177 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 1
  %178 = bitcast %union.TfLitePtrUnion* %177 to float**
  %179 = icmp eq %struct.TfLiteTensor* %11, null
  %180 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 1
  %181 = bitcast %union.TfLitePtrUnion* %180 to float**
  %182 = icmp eq %struct.TfLiteTensor* %12, null
  %183 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 0, i32 1
  %184 = bitcast %union.TfLitePtrUnion* %183 to float**
  %185 = icmp eq %struct.TfLiteTensor* %13, null
  %186 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %187 = bitcast %union.TfLitePtrUnion* %186 to float**
  %188 = icmp eq %struct.TfLiteTensor* %14, null
  %189 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %190 = bitcast %union.TfLitePtrUnion* %189 to float**
  %191 = icmp eq %struct.TfLiteTensor* %15, null
  %192 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %193 = bitcast %union.TfLitePtrUnion* %192 to float**
  %194 = icmp eq %struct.TfLiteTensor* %21, null
  %195 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %196 = bitcast %union.TfLitePtrUnion* %195 to float**
  %197 = icmp eq %struct.TfLiteTensor* %22, null
  %198 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %199 = bitcast %union.TfLitePtrUnion* %198 to float**
  %200 = icmp eq %struct.TfLiteTensor* %23, null
  %201 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %202 = bitcast %union.TfLitePtrUnion* %201 to float**
  %203 = icmp eq %struct.TfLiteTensor* %24, null
  %204 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %205 = bitcast %union.TfLitePtrUnion* %204 to float**
  %206 = icmp eq %struct.TfLiteTensor* %25, null
  %207 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %208 = bitcast %union.TfLitePtrUnion* %207 to float**
  %209 = icmp eq %struct.TfLiteTensor* %26, null
  %210 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %211 = bitcast %union.TfLitePtrUnion* %210 to float**
  %212 = sext i32 %78 to i64
  %213 = sext i32 %117 to i64
  %214 = zext i32 %58 to i64
  br label %443

215:                                              ; preds = %99
  %216 = icmp sgt i32 %57, 0
  br i1 %216, label %217, label %596

217:                                              ; preds = %215
  %218 = icmp eq %struct.TfLiteTensor* %0, null
  %219 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %220 = bitcast %union.TfLitePtrUnion* %219 to float**
  %221 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %222 = bitcast %union.TfLitePtrUnion* %221 to float**
  %223 = icmp eq %struct.TfLiteTensor* %34, null
  %224 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %225 = bitcast %union.TfLitePtrUnion* %224 to float**
  %226 = sext i32 %30 to i64
  %227 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %228 = bitcast %union.TfLitePtrUnion* %227 to float**
  %229 = icmp eq %struct.TfLiteTensor* %2, null
  %230 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %231 = bitcast %union.TfLitePtrUnion* %230 to float**
  %232 = icmp eq %struct.TfLiteTensor* %3, null
  %233 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %234 = bitcast %union.TfLitePtrUnion* %233 to float**
  %235 = icmp eq %struct.TfLiteTensor* %4, null
  %236 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %237 = bitcast %union.TfLitePtrUnion* %236 to float**
  %238 = icmp eq %struct.TfLiteTensor* %17, null
  %239 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1
  %240 = bitcast %union.TfLitePtrUnion* %239 to float**
  %241 = icmp eq %struct.TfLiteTensor* %18, null
  %242 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %243 = bitcast %union.TfLitePtrUnion* %242 to float**
  %244 = icmp eq %struct.TfLiteTensor* %19, null
  %245 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %246 = bitcast %union.TfLitePtrUnion* %245 to float**
  %247 = icmp eq %struct.TfLiteTensor* %20, null
  %248 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %249 = bitcast %union.TfLitePtrUnion* %248 to float**
  %250 = icmp eq %struct.TfLiteTensor* %5, null
  %251 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %252 = bitcast %union.TfLitePtrUnion* %251 to float**
  %253 = icmp eq %struct.TfLiteTensor* %6, null
  %254 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %255 = bitcast %union.TfLitePtrUnion* %254 to float**
  %256 = icmp eq %struct.TfLiteTensor* %7, null
  %257 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %258 = bitcast %union.TfLitePtrUnion* %257 to float**
  %259 = icmp eq %struct.TfLiteTensor* %8, null
  %260 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %261 = bitcast %union.TfLitePtrUnion* %260 to float**
  %262 = icmp eq %struct.TfLiteTensor* %9, null
  %263 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 1
  %264 = bitcast %union.TfLitePtrUnion* %263 to float**
  %265 = icmp eq %struct.TfLiteTensor* %10, null
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 1
  %267 = bitcast %union.TfLitePtrUnion* %266 to float**
  %268 = icmp eq %struct.TfLiteTensor* %11, null
  %269 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 1
  %270 = bitcast %union.TfLitePtrUnion* %269 to float**
  %271 = icmp eq %struct.TfLiteTensor* %12, null
  %272 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 0, i32 1
  %273 = bitcast %union.TfLitePtrUnion* %272 to float**
  %274 = icmp eq %struct.TfLiteTensor* %13, null
  %275 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %276 = bitcast %union.TfLitePtrUnion* %275 to float**
  %277 = icmp eq %struct.TfLiteTensor* %14, null
  %278 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %279 = bitcast %union.TfLitePtrUnion* %278 to float**
  %280 = icmp eq %struct.TfLiteTensor* %15, null
  %281 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %282 = bitcast %union.TfLitePtrUnion* %281 to float**
  %283 = icmp eq %struct.TfLiteTensor* %21, null
  %284 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %285 = bitcast %union.TfLitePtrUnion* %284 to float**
  %286 = icmp eq %struct.TfLiteTensor* %22, null
  %287 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %288 = bitcast %union.TfLitePtrUnion* %287 to float**
  %289 = icmp eq %struct.TfLiteTensor* %23, null
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to float**
  %292 = icmp eq %struct.TfLiteTensor* %24, null
  %293 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %294 = bitcast %union.TfLitePtrUnion* %293 to float**
  %295 = icmp eq %struct.TfLiteTensor* %25, null
  %296 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %297 = bitcast %union.TfLitePtrUnion* %296 to float**
  %298 = icmp eq %struct.TfLiteTensor* %26, null
  %299 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %300 = bitcast %union.TfLitePtrUnion* %299 to float**
  %301 = icmp eq %struct.TfLiteTensor* %32, null
  %302 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %303 = bitcast %union.TfLitePtrUnion* %302 to float**
  %304 = icmp eq %struct.TfLiteTensor* %33, null
  %305 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %306 = bitcast %union.TfLitePtrUnion* %305 to float**
  br label %307

307:                                              ; preds = %439, %217
  %308 = phi i32 [ 0, %217 ], [ %441, %439 ]
  %309 = xor i32 %308, -1
  %310 = add i32 %57, %309
  %311 = select i1 %28, i32 %308, i32 %310
  br i1 %218, label %314, label %312

312:                                              ; preds = %307
  %313 = load float*, float** %220, align 8
  br label %314

314:                                              ; preds = %307, %312
  %315 = phi float* [ %313, %312 ], [ null, %307 ]
  %316 = mul i32 %311, %58
  %317 = mul i32 %316, %62
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds float, float* %315, i64 %318
  br i1 %63, label %320, label %323

320:                                              ; preds = %314
  %321 = load float*, float** %222, align 8
  %322 = getelementptr inbounds float, float* %321, i64 %318
  br label %323

323:                                              ; preds = %320, %314
  %324 = phi float* [ %322, %320 ], [ null, %314 ]
  br i1 %223, label %327, label %325

325:                                              ; preds = %323
  %326 = load float*, float** %225, align 8
  br label %327

327:                                              ; preds = %323, %325
  %328 = phi float* [ %326, %325 ], [ null, %323 ]
  %329 = mul i32 %316, %117
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds float, float* %328, i64 %226
  %332 = getelementptr inbounds float, float* %331, i64 %330
  br i1 %83, label %335, label %333

333:                                              ; preds = %327
  %334 = load float*, float** %228, align 8
  br label %335

335:                                              ; preds = %327, %333
  %336 = phi float* [ %334, %333 ], [ null, %327 ]
  br i1 %229, label %339, label %337

337:                                              ; preds = %335
  %338 = load float*, float** %231, align 8
  br label %339

339:                                              ; preds = %335, %337
  %340 = phi float* [ %338, %337 ], [ null, %335 ]
  br i1 %232, label %343, label %341

341:                                              ; preds = %339
  %342 = load float*, float** %234, align 8
  br label %343

343:                                              ; preds = %339, %341
  %344 = phi float* [ %342, %341 ], [ null, %339 ]
  br i1 %235, label %347, label %345

345:                                              ; preds = %343
  %346 = load float*, float** %237, align 8
  br label %347

347:                                              ; preds = %343, %345
  %348 = phi float* [ %346, %345 ], [ null, %343 ]
  br i1 %238, label %351, label %349

349:                                              ; preds = %347
  %350 = load float*, float** %240, align 8
  br label %351

351:                                              ; preds = %347, %349
  %352 = phi float* [ %350, %349 ], [ null, %347 ]
  br i1 %241, label %355, label %353

353:                                              ; preds = %351
  %354 = load float*, float** %243, align 8
  br label %355

355:                                              ; preds = %351, %353
  %356 = phi float* [ %354, %353 ], [ null, %351 ]
  br i1 %244, label %359, label %357

357:                                              ; preds = %355
  %358 = load float*, float** %246, align 8
  br label %359

359:                                              ; preds = %355, %357
  %360 = phi float* [ %358, %357 ], [ null, %355 ]
  br i1 %247, label %363, label %361

361:                                              ; preds = %359
  %362 = load float*, float** %249, align 8
  br label %363

363:                                              ; preds = %359, %361
  %364 = phi float* [ %362, %361 ], [ null, %359 ]
  br i1 %250, label %367, label %365

365:                                              ; preds = %363
  %366 = load float*, float** %252, align 8
  br label %367

367:                                              ; preds = %363, %365
  %368 = phi float* [ %366, %365 ], [ null, %363 ]
  br i1 %253, label %371, label %369

369:                                              ; preds = %367
  %370 = load float*, float** %255, align 8
  br label %371

371:                                              ; preds = %367, %369
  %372 = phi float* [ %370, %369 ], [ null, %367 ]
  br i1 %256, label %375, label %373

373:                                              ; preds = %371
  %374 = load float*, float** %258, align 8
  br label %375

375:                                              ; preds = %371, %373
  %376 = phi float* [ %374, %373 ], [ null, %371 ]
  br i1 %259, label %379, label %377

377:                                              ; preds = %375
  %378 = load float*, float** %261, align 8
  br label %379

379:                                              ; preds = %375, %377
  %380 = phi float* [ %378, %377 ], [ null, %375 ]
  br i1 %262, label %383, label %381

381:                                              ; preds = %379
  %382 = load float*, float** %264, align 8
  br label %383

383:                                              ; preds = %379, %381
  %384 = phi float* [ %382, %381 ], [ null, %379 ]
  br i1 %265, label %387, label %385

385:                                              ; preds = %383
  %386 = load float*, float** %267, align 8
  br label %387

387:                                              ; preds = %383, %385
  %388 = phi float* [ %386, %385 ], [ null, %383 ]
  br i1 %268, label %391, label %389

389:                                              ; preds = %387
  %390 = load float*, float** %270, align 8
  br label %391

391:                                              ; preds = %387, %389
  %392 = phi float* [ %390, %389 ], [ null, %387 ]
  br i1 %271, label %395, label %393

393:                                              ; preds = %391
  %394 = load float*, float** %273, align 8
  br label %395

395:                                              ; preds = %391, %393
  %396 = phi float* [ %394, %393 ], [ null, %391 ]
  br i1 %274, label %399, label %397

397:                                              ; preds = %395
  %398 = load float*, float** %276, align 8
  br label %399

399:                                              ; preds = %395, %397
  %400 = phi float* [ %398, %397 ], [ null, %395 ]
  br i1 %277, label %403, label %401

401:                                              ; preds = %399
  %402 = load float*, float** %279, align 8
  br label %403

403:                                              ; preds = %399, %401
  %404 = phi float* [ %402, %401 ], [ null, %399 ]
  br i1 %280, label %407, label %405

405:                                              ; preds = %403
  %406 = load float*, float** %282, align 8
  br label %407

407:                                              ; preds = %403, %405
  %408 = phi float* [ %406, %405 ], [ null, %403 ]
  br i1 %283, label %411, label %409

409:                                              ; preds = %407
  %410 = load float*, float** %285, align 8
  br label %411

411:                                              ; preds = %407, %409
  %412 = phi float* [ %410, %409 ], [ null, %407 ]
  br i1 %286, label %415, label %413

413:                                              ; preds = %411
  %414 = load float*, float** %288, align 8
  br label %415

415:                                              ; preds = %411, %413
  %416 = phi float* [ %414, %413 ], [ null, %411 ]
  br i1 %289, label %419, label %417

417:                                              ; preds = %415
  %418 = load float*, float** %291, align 8
  br label %419

419:                                              ; preds = %415, %417
  %420 = phi float* [ %418, %417 ], [ null, %415 ]
  br i1 %292, label %423, label %421

421:                                              ; preds = %419
  %422 = load float*, float** %294, align 8
  br label %423

423:                                              ; preds = %419, %421
  %424 = phi float* [ %422, %421 ], [ null, %419 ]
  br i1 %295, label %427, label %425

425:                                              ; preds = %423
  %426 = load float*, float** %297, align 8
  br label %427

427:                                              ; preds = %423, %425
  %428 = phi float* [ %426, %425 ], [ null, %423 ]
  br i1 %298, label %431, label %429

429:                                              ; preds = %427
  %430 = load float*, float** %300, align 8
  br label %431

431:                                              ; preds = %427, %429
  %432 = phi float* [ %430, %429 ], [ null, %427 ]
  br i1 %301, label %435, label %433

433:                                              ; preds = %431
  %434 = load float*, float** %303, align 8
  br label %435

435:                                              ; preds = %431, %433
  %436 = phi float* [ %434, %433 ], [ null, %431 ]
  br i1 %304, label %439, label %437

437:                                              ; preds = %435
  %438 = load float*, float** %306, align 8
  br label %439

439:                                              ; preds = %435, %437
  %440 = phi float* [ %438, %437 ], [ null, %435 ]
  tail call fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_113LstmStepFloatEPKfS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsiiiiiiPfS9_S9_S9_S9_S9_S9_(float* %319, float* %336, float* %340, float* %344, float* %348, float* %324, float* %352, float* %356, float* %360, float* %364, float* %368, float* %372, float* %376, float* %380, float* %384, float* %388, float* %392, float* %396, float* %400, float* %404, float* %408, float* %412, float* %416, float* %420, float* %424, float* %428, float* %432, %struct.TfLiteLSTMParams* %27, i32 %58, i32 %78, i32 %62, i32 %74, i32 %82, i32 %117, float* %436, float* %440, float* %100, float* %109, float* %101, float* %108, float* %332)
  %441 = add nuw nsw i32 %308, 1
  %442 = icmp eq i32 %441, %57
  br i1 %442, label %596, label %307

443:                                              ; preds = %455, %120
  %444 = phi i64 [ 0, %120 ], [ %456, %455 ]
  br i1 %121, label %445, label %455

445:                                              ; preds = %443
  %446 = mul nsw i64 %444, %213
  %447 = mul nsw i64 %444, %212
  %448 = getelementptr inbounds float, float* %100, i64 %447
  %449 = select i1 %137, float* null, float* %448
  %450 = getelementptr inbounds float, float* %109, i64 %447
  %451 = getelementptr inbounds float, float* %101, i64 %447
  %452 = getelementptr inbounds float, float* %108, i64 %447
  %453 = trunc i64 %444 to i32
  %454 = mul i32 %57, %453
  br label %458

455:                                              ; preds = %592, %443
  %456 = add nuw nsw i64 %444, 1
  %457 = icmp eq i64 %456, %214
  br i1 %457, label %596, label %443

458:                                              ; preds = %592, %445
  %459 = phi i32 [ 0, %445 ], [ %594, %592 ]
  %460 = xor i32 %459, -1
  %461 = add i32 %57, %460
  %462 = select i1 %28, i32 %459, i32 %461
  %463 = add nsw i32 %462, %454
  br i1 %122, label %466, label %464

464:                                              ; preds = %458
  %465 = load float*, float** %124, align 8
  br label %466

466:                                              ; preds = %458, %464
  %467 = phi float* [ %465, %464 ], [ null, %458 ]
  %468 = mul nsw i32 %463, %62
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds float, float* %467, i64 %469
  br i1 %63, label %471, label %474

471:                                              ; preds = %466
  %472 = load float*, float** %126, align 8
  %473 = getelementptr inbounds float, float* %472, i64 %469
  br label %474

474:                                              ; preds = %471, %466
  %475 = phi float* [ %473, %471 ], [ null, %466 ]
  br i1 %127, label %478, label %476

476:                                              ; preds = %474
  %477 = load float*, float** %129, align 8
  br label %478

478:                                              ; preds = %474, %476
  %479 = phi float* [ %477, %476 ], [ null, %474 ]
  %480 = mul nsw i32 %463, %117
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds float, float* %479, i64 %130
  %483 = getelementptr inbounds float, float* %482, i64 %481
  br i1 %131, label %486, label %484

484:                                              ; preds = %478
  %485 = load float*, float** %133, align 8
  br label %486

486:                                              ; preds = %478, %484
  %487 = phi float* [ %485, %484 ], [ null, %478 ]
  %488 = getelementptr inbounds float, float* %487, i64 %446
  br i1 %134, label %491, label %489

489:                                              ; preds = %486
  %490 = load float*, float** %136, align 8
  br label %491

491:                                              ; preds = %486, %489
  %492 = phi float* [ %490, %489 ], [ null, %486 ]
  %493 = getelementptr inbounds float, float* %492, i64 %447
  br i1 %83, label %496, label %494

494:                                              ; preds = %491
  %495 = load float*, float** %139, align 8
  br label %496

496:                                              ; preds = %491, %494
  %497 = phi float* [ %495, %494 ], [ null, %491 ]
  br i1 %140, label %500, label %498

498:                                              ; preds = %496
  %499 = load float*, float** %142, align 8
  br label %500

500:                                              ; preds = %496, %498
  %501 = phi float* [ %499, %498 ], [ null, %496 ]
  br i1 %143, label %504, label %502

502:                                              ; preds = %500
  %503 = load float*, float** %145, align 8
  br label %504

504:                                              ; preds = %500, %502
  %505 = phi float* [ %503, %502 ], [ null, %500 ]
  br i1 %146, label %508, label %506

506:                                              ; preds = %504
  %507 = load float*, float** %148, align 8
  br label %508

508:                                              ; preds = %504, %506
  %509 = phi float* [ %507, %506 ], [ null, %504 ]
  br i1 %149, label %512, label %510

510:                                              ; preds = %508
  %511 = load float*, float** %151, align 8
  br label %512

512:                                              ; preds = %508, %510
  %513 = phi float* [ %511, %510 ], [ null, %508 ]
  br i1 %152, label %516, label %514

514:                                              ; preds = %512
  %515 = load float*, float** %154, align 8
  br label %516

516:                                              ; preds = %512, %514
  %517 = phi float* [ %515, %514 ], [ null, %512 ]
  br i1 %155, label %520, label %518

518:                                              ; preds = %516
  %519 = load float*, float** %157, align 8
  br label %520

520:                                              ; preds = %516, %518
  %521 = phi float* [ %519, %518 ], [ null, %516 ]
  br i1 %158, label %524, label %522

522:                                              ; preds = %520
  %523 = load float*, float** %160, align 8
  br label %524

524:                                              ; preds = %520, %522
  %525 = phi float* [ %523, %522 ], [ null, %520 ]
  br i1 %161, label %528, label %526

526:                                              ; preds = %524
  %527 = load float*, float** %163, align 8
  br label %528

528:                                              ; preds = %524, %526
  %529 = phi float* [ %527, %526 ], [ null, %524 ]
  br i1 %164, label %532, label %530

530:                                              ; preds = %528
  %531 = load float*, float** %166, align 8
  br label %532

532:                                              ; preds = %528, %530
  %533 = phi float* [ %531, %530 ], [ null, %528 ]
  br i1 %167, label %536, label %534

534:                                              ; preds = %532
  %535 = load float*, float** %169, align 8
  br label %536

536:                                              ; preds = %532, %534
  %537 = phi float* [ %535, %534 ], [ null, %532 ]
  br i1 %170, label %540, label %538

538:                                              ; preds = %536
  %539 = load float*, float** %172, align 8
  br label %540

540:                                              ; preds = %536, %538
  %541 = phi float* [ %539, %538 ], [ null, %536 ]
  br i1 %173, label %544, label %542

542:                                              ; preds = %540
  %543 = load float*, float** %175, align 8
  br label %544

544:                                              ; preds = %540, %542
  %545 = phi float* [ %543, %542 ], [ null, %540 ]
  br i1 %176, label %548, label %546

546:                                              ; preds = %544
  %547 = load float*, float** %178, align 8
  br label %548

548:                                              ; preds = %544, %546
  %549 = phi float* [ %547, %546 ], [ null, %544 ]
  br i1 %179, label %552, label %550

550:                                              ; preds = %548
  %551 = load float*, float** %181, align 8
  br label %552

552:                                              ; preds = %548, %550
  %553 = phi float* [ %551, %550 ], [ null, %548 ]
  br i1 %182, label %556, label %554

554:                                              ; preds = %552
  %555 = load float*, float** %184, align 8
  br label %556

556:                                              ; preds = %552, %554
  %557 = phi float* [ %555, %554 ], [ null, %552 ]
  br i1 %185, label %560, label %558

558:                                              ; preds = %556
  %559 = load float*, float** %187, align 8
  br label %560

560:                                              ; preds = %556, %558
  %561 = phi float* [ %559, %558 ], [ null, %556 ]
  br i1 %188, label %564, label %562

562:                                              ; preds = %560
  %563 = load float*, float** %190, align 8
  br label %564

564:                                              ; preds = %560, %562
  %565 = phi float* [ %563, %562 ], [ null, %560 ]
  br i1 %191, label %568, label %566

566:                                              ; preds = %564
  %567 = load float*, float** %193, align 8
  br label %568

568:                                              ; preds = %564, %566
  %569 = phi float* [ %567, %566 ], [ null, %564 ]
  br i1 %194, label %572, label %570

570:                                              ; preds = %568
  %571 = load float*, float** %196, align 8
  br label %572

572:                                              ; preds = %568, %570
  %573 = phi float* [ %571, %570 ], [ null, %568 ]
  br i1 %197, label %576, label %574

574:                                              ; preds = %572
  %575 = load float*, float** %199, align 8
  br label %576

576:                                              ; preds = %572, %574
  %577 = phi float* [ %575, %574 ], [ null, %572 ]
  br i1 %200, label %580, label %578

578:                                              ; preds = %576
  %579 = load float*, float** %202, align 8
  br label %580

580:                                              ; preds = %576, %578
  %581 = phi float* [ %579, %578 ], [ null, %576 ]
  br i1 %203, label %584, label %582

582:                                              ; preds = %580
  %583 = load float*, float** %205, align 8
  br label %584

584:                                              ; preds = %580, %582
  %585 = phi float* [ %583, %582 ], [ null, %580 ]
  br i1 %206, label %588, label %586

586:                                              ; preds = %584
  %587 = load float*, float** %208, align 8
  br label %588

588:                                              ; preds = %584, %586
  %589 = phi float* [ %587, %586 ], [ null, %584 ]
  br i1 %209, label %592, label %590

590:                                              ; preds = %588
  %591 = load float*, float** %211, align 8
  br label %592

592:                                              ; preds = %588, %590
  %593 = phi float* [ %591, %590 ], [ null, %588 ]
  tail call fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_113LstmStepFloatEPKfS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsiiiiiiPfS9_S9_S9_S9_S9_S9_(float* %470, float* %497, float* %501, float* %505, float* %509, float* %475, float* %513, float* %517, float* %521, float* %525, float* %529, float* %533, float* %537, float* %541, float* %545, float* %549, float* %553, float* %557, float* %561, float* %565, float* %569, float* %573, float* %577, float* %581, float* %585, float* %589, float* %593, %struct.TfLiteLSTMParams* %27, i32 1, i32 %78, i32 %62, i32 %74, i32 %82, i32 %117, float* %488, float* %493, float* %449, float* %450, float* %451, float* %452, float* %483)
  %594 = add nuw nsw i32 %459, 1
  %595 = icmp eq i32 %594, %57
  br i1 %595, label %455, label %458

596:                                              ; preds = %455, %439, %118, %215
  ret i32 0
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_113LstmStepFloatEPKfS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsiiiiiiPfS9_S9_S9_S9_S9_S9_(float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float* nocapture readonly, float* nocapture readonly, float* readonly, float* nocapture readonly, float* readonly, float* nocapture readonly, float* nocapture readonly, float*, float*, float*, float*, float*, float* readonly, %struct.TfLiteLSTMParams* nocapture readonly, i32, i32, i32, i32, i32, i32, float*, float*, float*, float*, float*, float*, float* nocapture) unnamed_addr #3 {
  %42 = bitcast float* %34 to i8*
  %43 = bitcast float* %39 to i8*
  %44 = bitcast float* %38 to i8*
  %45 = bitcast float* %37 to i8*
  %46 = bitcast float* %36 to i8*
  %47 = alloca %"struct.Eigen::internal::assign_op", align 1
  %48 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %49 = alloca %"class.Eigen::ArrayWrapper", align 8
  %50 = alloca %"struct.Eigen::internal::assign_op", align 1
  %51 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %52 = alloca %"class.Eigen::ArrayWrapper", align 8
  %53 = alloca %"struct.Eigen::internal::assign_op", align 1
  %54 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %55 = alloca %"class.Eigen::ArrayWrapper", align 8
  %56 = icmp eq float* %1, null
  %57 = icmp ne float* %16, null
  %58 = icmp ne float* %18, null
  br i1 %58, label %59, label %70

59:                                               ; preds = %41
  %60 = mul i32 %29, %28
  %61 = icmp sgt i32 %60, 0
  br i1 %56, label %66, label %62

62:                                               ; preds = %59
  br i1 %61, label %63, label %243

63:                                               ; preds = %62
  %64 = zext i32 %60 to i64
  %65 = shl nuw nsw i64 %64, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %46, i8 0, i64 %65, i1 false)
  br label %67

66:                                               ; preds = %59
  br i1 %61, label %67, label %243

67:                                               ; preds = %63, %66
  %68 = zext i32 %60 to i64
  %69 = shl nuw nsw i64 %68, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 %69, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 %69, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 0, i64 %69, i1 false)
  br label %243

70:                                               ; preds = %41
  br i1 %56, label %117, label %71

71:                                               ; preds = %70
  %72 = icmp sgt i32 %28, 0
  br i1 %72, label %73, label %243

73:                                               ; preds = %71
  %74 = icmp eq i32 %29, 0
  %75 = sext i32 %29 to i64
  %76 = shl nuw nsw i64 %75, 2
  %77 = bitcast float* %21 to i8*
  %78 = zext i32 %28 to i64
  %79 = add nsw i64 %78, -1
  %80 = and i64 %78, 3
  %81 = icmp ult i64 %79, 3
  br i1 %81, label %103, label %82

82:                                               ; preds = %73
  %83 = sub nsw i64 %78, %80
  br label %84

84:                                               ; preds = %1773, %82
  %85 = phi i64 [ 0, %82 ], [ %1774, %1773 ]
  %86 = phi i64 [ %83, %82 ], [ %1775, %1773 ]
  br i1 %74, label %1773, label %87

87:                                               ; preds = %84
  %88 = mul nsw i64 %85, %75
  %89 = getelementptr inbounds float, float* %36, i64 %88
  %90 = bitcast float* %89 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %90, i8* align 4 %77, i64 %76, i1 false) #15
  %91 = or i64 %85, 1
  %92 = mul nsw i64 %91, %75
  %93 = getelementptr inbounds float, float* %36, i64 %92
  %94 = bitcast float* %93 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %77, i64 %76, i1 false) #15
  %95 = or i64 %85, 2
  %96 = mul nsw i64 %95, %75
  %97 = getelementptr inbounds float, float* %36, i64 %96
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %98, i8* align 4 %77, i64 %76, i1 false) #15
  %99 = or i64 %85, 3
  %100 = mul nsw i64 %99, %75
  %101 = getelementptr inbounds float, float* %36, i64 %100
  %102 = bitcast float* %101 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %77, i64 %76, i1 false) #15
  br label %1773

103:                                              ; preds = %1773, %73
  %104 = phi i64 [ 0, %73 ], [ %1774, %1773 ]
  %105 = icmp eq i64 %80, 0
  br i1 %105, label %117, label %106

106:                                              ; preds = %103, %113
  %107 = phi i64 [ %114, %113 ], [ %104, %103 ]
  %108 = phi i64 [ %115, %113 ], [ %80, %103 ]
  br i1 %74, label %113, label %109

109:                                              ; preds = %106
  %110 = mul nsw i64 %107, %75
  %111 = getelementptr inbounds float, float* %36, i64 %110
  %112 = bitcast float* %111 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %112, i8* align 4 %77, i64 %76, i1 false) #15
  br label %113

113:                                              ; preds = %109, %106
  %114 = add nuw nsw i64 %107, 1
  %115 = add i64 %108, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %106, !llvm.loop !2

117:                                              ; preds = %103, %113, %70
  %118 = icmp sgt i32 %28, 0
  br i1 %118, label %119, label %243

119:                                              ; preds = %117
  %120 = icmp eq i32 %29, 0
  %121 = sext i32 %29 to i64
  %122 = shl nuw nsw i64 %121, 2
  %123 = bitcast float* %22 to i8*
  %124 = zext i32 %28 to i64
  %125 = add nsw i64 %124, -1
  %126 = and i64 %124, 3
  %127 = icmp ult i64 %125, 3
  br i1 %127, label %149, label %128

128:                                              ; preds = %119
  %129 = sub nsw i64 %124, %126
  br label %130

130:                                              ; preds = %1769, %128
  %131 = phi i64 [ 0, %128 ], [ %1770, %1769 ]
  %132 = phi i64 [ %129, %128 ], [ %1771, %1769 ]
  br i1 %120, label %1769, label %133

133:                                              ; preds = %130
  %134 = mul nsw i64 %131, %121
  %135 = getelementptr inbounds float, float* %37, i64 %134
  %136 = bitcast float* %135 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %136, i8* align 4 %123, i64 %122, i1 false) #15
  %137 = or i64 %131, 1
  %138 = mul nsw i64 %137, %121
  %139 = getelementptr inbounds float, float* %37, i64 %138
  %140 = bitcast float* %139 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %140, i8* align 4 %123, i64 %122, i1 false) #15
  %141 = or i64 %131, 2
  %142 = mul nsw i64 %141, %121
  %143 = getelementptr inbounds float, float* %37, i64 %142
  %144 = bitcast float* %143 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %144, i8* align 4 %123, i64 %122, i1 false) #15
  %145 = or i64 %131, 3
  %146 = mul nsw i64 %145, %121
  %147 = getelementptr inbounds float, float* %37, i64 %146
  %148 = bitcast float* %147 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %123, i64 %122, i1 false) #15
  br label %1769

149:                                              ; preds = %1769, %119
  %150 = phi i64 [ 0, %119 ], [ %1770, %1769 ]
  %151 = icmp eq i64 %126, 0
  br i1 %151, label %163, label %152

152:                                              ; preds = %149, %159
  %153 = phi i64 [ %160, %159 ], [ %150, %149 ]
  %154 = phi i64 [ %161, %159 ], [ %126, %149 ]
  br i1 %120, label %159, label %155

155:                                              ; preds = %152
  %156 = mul nsw i64 %153, %121
  %157 = getelementptr inbounds float, float* %37, i64 %156
  %158 = bitcast float* %157 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %158, i8* align 4 %123, i64 %122, i1 false) #15
  br label %159

159:                                              ; preds = %155, %152
  %160 = add nuw nsw i64 %153, 1
  %161 = add i64 %154, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %152, !llvm.loop !4

163:                                              ; preds = %159, %149
  %164 = bitcast float* %23 to i8*
  %165 = add nsw i64 %124, -1
  %166 = and i64 %124, 3
  %167 = icmp ult i64 %165, 3
  br i1 %167, label %189, label %168

168:                                              ; preds = %163
  %169 = sub nsw i64 %124, %166
  br label %170

170:                                              ; preds = %1765, %168
  %171 = phi i64 [ 0, %168 ], [ %1766, %1765 ]
  %172 = phi i64 [ %169, %168 ], [ %1767, %1765 ]
  br i1 %120, label %1765, label %173

173:                                              ; preds = %170
  %174 = mul nsw i64 %171, %121
  %175 = getelementptr inbounds float, float* %38, i64 %174
  %176 = bitcast float* %175 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %176, i8* align 4 %164, i64 %122, i1 false) #15
  %177 = or i64 %171, 1
  %178 = mul nsw i64 %177, %121
  %179 = getelementptr inbounds float, float* %38, i64 %178
  %180 = bitcast float* %179 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %180, i8* align 4 %164, i64 %122, i1 false) #15
  %181 = or i64 %171, 2
  %182 = mul nsw i64 %181, %121
  %183 = getelementptr inbounds float, float* %38, i64 %182
  %184 = bitcast float* %183 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %184, i8* align 4 %164, i64 %122, i1 false) #15
  %185 = or i64 %171, 3
  %186 = mul nsw i64 %185, %121
  %187 = getelementptr inbounds float, float* %38, i64 %186
  %188 = bitcast float* %187 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %188, i8* align 4 %164, i64 %122, i1 false) #15
  br label %1765

189:                                              ; preds = %1765, %163
  %190 = phi i64 [ 0, %163 ], [ %1766, %1765 ]
  %191 = icmp eq i64 %166, 0
  br i1 %191, label %203, label %192

192:                                              ; preds = %189, %199
  %193 = phi i64 [ %200, %199 ], [ %190, %189 ]
  %194 = phi i64 [ %201, %199 ], [ %166, %189 ]
  br i1 %120, label %199, label %195

195:                                              ; preds = %192
  %196 = mul nsw i64 %193, %121
  %197 = getelementptr inbounds float, float* %38, i64 %196
  %198 = bitcast float* %197 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %164, i64 %122, i1 false) #15
  br label %199

199:                                              ; preds = %195, %192
  %200 = add nuw nsw i64 %193, 1
  %201 = add i64 %194, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %192, !llvm.loop !5

203:                                              ; preds = %199, %189
  %204 = bitcast float* %24 to i8*
  %205 = add nsw i64 %124, -1
  %206 = and i64 %124, 3
  %207 = icmp ult i64 %205, 3
  br i1 %207, label %229, label %208

208:                                              ; preds = %203
  %209 = sub nsw i64 %124, %206
  br label %210

210:                                              ; preds = %1761, %208
  %211 = phi i64 [ 0, %208 ], [ %1762, %1761 ]
  %212 = phi i64 [ %209, %208 ], [ %1763, %1761 ]
  br i1 %120, label %1761, label %213

213:                                              ; preds = %210
  %214 = mul nsw i64 %211, %121
  %215 = getelementptr inbounds float, float* %39, i64 %214
  %216 = bitcast float* %215 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %216, i8* align 4 %204, i64 %122, i1 false) #15
  %217 = or i64 %211, 1
  %218 = mul nsw i64 %217, %121
  %219 = getelementptr inbounds float, float* %39, i64 %218
  %220 = bitcast float* %219 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %220, i8* align 4 %204, i64 %122, i1 false) #15
  %221 = or i64 %211, 2
  %222 = mul nsw i64 %221, %121
  %223 = getelementptr inbounds float, float* %39, i64 %222
  %224 = bitcast float* %223 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %224, i8* align 4 %204, i64 %122, i1 false) #15
  %225 = or i64 %211, 3
  %226 = mul nsw i64 %225, %121
  %227 = getelementptr inbounds float, float* %39, i64 %226
  %228 = bitcast float* %227 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %228, i8* align 4 %204, i64 %122, i1 false) #15
  br label %1761

229:                                              ; preds = %1761, %203
  %230 = phi i64 [ 0, %203 ], [ %1762, %1761 ]
  %231 = icmp eq i64 %206, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %229, %239
  %233 = phi i64 [ %240, %239 ], [ %230, %229 ]
  %234 = phi i64 [ %241, %239 ], [ %206, %229 ]
  br i1 %120, label %239, label %235

235:                                              ; preds = %232
  %236 = mul nsw i64 %233, %121
  %237 = getelementptr inbounds float, float* %39, i64 %236
  %238 = bitcast float* %237 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %238, i8* align 4 %204, i64 %122, i1 false) #15
  br label %239

239:                                              ; preds = %235, %232
  %240 = add nuw nsw i64 %233, 1
  %241 = add i64 %234, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !6

243:                                              ; preds = %229, %239, %62, %67, %117, %71, %66
  %244 = mul nsw i32 %30, %28
  %245 = tail call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %0, i32 %244) #15
  br i1 %245, label %249, label %246

246:                                              ; preds = %243
  br i1 %56, label %248, label %247

247:                                              ; preds = %246
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* nonnull %1, i32 %29, i32 %30, float* %0, i32 %28, float* %36) #15
  br label %248

248:                                              ; preds = %247, %246
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %2, i32 %29, i32 %30, float* %0, i32 %28, float* %37) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %3, i32 %29, i32 %30, float* %0, i32 %28, float* %38) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %4, i32 %29, i32 %30, float* %0, i32 %28, float* %39) #15
  br label %249

249:                                              ; preds = %248, %243
  %250 = icmp eq float* %5, null
  br i1 %250, label %257, label %251

251:                                              ; preds = %249
  %252 = mul nsw i32 %31, %28
  %253 = tail call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* nonnull %5, i32 %252) #15
  br i1 %253, label %257, label %254

254:                                              ; preds = %251
  br i1 %56, label %256, label %255

255:                                              ; preds = %254
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %6, i32 %29, i32 %31, float* nonnull %5, i32 %28, float* %36) #15
  br label %256

256:                                              ; preds = %255, %254
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %7, i32 %29, i32 %31, float* nonnull %5, i32 %28, float* %37) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %8, i32 %29, i32 %31, float* nonnull %5, i32 %28, float* %38) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %9, i32 %29, i32 %31, float* nonnull %5, i32 %28, float* %39) #15
  br label %257

257:                                              ; preds = %249, %256, %251
  br i1 %56, label %512, label %258

258:                                              ; preds = %257
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %10, i32 %29, i32 %32, float* %34, i32 %28, float* %36) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %11, i32 %29, i32 %32, float* %34, i32 %28, float* %37) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %12, i32 %29, i32 %32, float* %34, i32 %28, float* %38) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %13, i32 %29, i32 %32, float* %34, i32 %28, float* %39) #15
  %259 = icmp sgt i32 %28, 0
  %260 = and i1 %57, %259
  br i1 %260, label %261, label %396

261:                                              ; preds = %258
  %262 = icmp sgt i32 %29, 0
  %263 = sext i32 %29 to i64
  %264 = add i32 %29, -1
  %265 = zext i32 %264 to i64
  %266 = add nuw nsw i64 %265, 1
  %267 = and i64 %266, 8589934584
  %268 = add nsw i64 %267, -8
  %269 = lshr exact i64 %268, 3
  %270 = add nuw nsw i64 %269, 1
  %271 = icmp ult i64 %266, 8
  %272 = and i64 %266, 8589934584
  %273 = trunc i64 %272 to i32
  %274 = getelementptr float, float* %14, i64 %272
  %275 = and i64 %270, 1
  %276 = icmp eq i64 %268, 0
  %277 = sub nuw nsw i64 %270, %275
  %278 = icmp eq i64 %275, 0
  %279 = icmp eq i64 %266, %272
  br label %280

280:                                              ; preds = %391, %261
  %281 = phi i32 [ 0, %261 ], [ %394, %391 ]
  %282 = phi float* [ %36, %261 ], [ %392, %391 ]
  %283 = phi float* [ %35, %261 ], [ %393, %391 ]
  br i1 %262, label %284, label %391

284:                                              ; preds = %280
  br i1 %271, label %371, label %285

285:                                              ; preds = %284
  %286 = getelementptr float, float* %282, i64 %272
  %287 = getelementptr float, float* %283, i64 %272
  br i1 %276, label %343, label %288

288:                                              ; preds = %285, %288
  %289 = phi i64 [ %340, %288 ], [ 0, %285 ]
  %290 = phi i64 [ %341, %288 ], [ %277, %285 ]
  %291 = getelementptr float, float* %282, i64 %289
  %292 = getelementptr float, float* %14, i64 %289
  %293 = getelementptr float, float* %283, i64 %289
  %294 = bitcast float* %292 to <4 x float>*
  %295 = load <4 x float>, <4 x float>* %294, align 4, !alias.scope !7, !noalias !10
  %296 = getelementptr float, float* %292, i64 4
  %297 = bitcast float* %296 to <4 x float>*
  %298 = load <4 x float>, <4 x float>* %297, align 4, !alias.scope !7, !noalias !10
  %299 = bitcast float* %293 to <4 x float>*
  %300 = load <4 x float>, <4 x float>* %299, align 4, !alias.scope !13, !noalias !14
  %301 = getelementptr float, float* %293, i64 4
  %302 = bitcast float* %301 to <4 x float>*
  %303 = load <4 x float>, <4 x float>* %302, align 4, !alias.scope !13, !noalias !14
  %304 = fmul <4 x float> %295, %300
  %305 = fmul <4 x float> %298, %303
  %306 = bitcast float* %291 to <4 x float>*
  %307 = load <4 x float>, <4 x float>* %306, align 4, !alias.scope !15, !noalias !16
  %308 = getelementptr float, float* %291, i64 4
  %309 = bitcast float* %308 to <4 x float>*
  %310 = load <4 x float>, <4 x float>* %309, align 4, !alias.scope !15, !noalias !16
  %311 = fadd <4 x float> %307, %304
  %312 = fadd <4 x float> %310, %305
  %313 = bitcast float* %291 to <4 x float>*
  store <4 x float> %311, <4 x float>* %313, align 4, !alias.scope !15, !noalias !16
  %314 = bitcast float* %308 to <4 x float>*
  store <4 x float> %312, <4 x float>* %314, align 4, !alias.scope !15, !noalias !16
  %315 = or i64 %289, 8
  %316 = getelementptr float, float* %282, i64 %315
  %317 = getelementptr float, float* %14, i64 %315
  %318 = getelementptr float, float* %283, i64 %315
  %319 = bitcast float* %317 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 4, !alias.scope !7, !noalias !10
  %321 = getelementptr float, float* %317, i64 4
  %322 = bitcast float* %321 to <4 x float>*
  %323 = load <4 x float>, <4 x float>* %322, align 4, !alias.scope !7, !noalias !10
  %324 = bitcast float* %318 to <4 x float>*
  %325 = load <4 x float>, <4 x float>* %324, align 4, !alias.scope !13, !noalias !14
  %326 = getelementptr float, float* %318, i64 4
  %327 = bitcast float* %326 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 4, !alias.scope !13, !noalias !14
  %329 = fmul <4 x float> %320, %325
  %330 = fmul <4 x float> %323, %328
  %331 = bitcast float* %316 to <4 x float>*
  %332 = load <4 x float>, <4 x float>* %331, align 4, !alias.scope !15, !noalias !16
  %333 = getelementptr float, float* %316, i64 4
  %334 = bitcast float* %333 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 4, !alias.scope !15, !noalias !16
  %336 = fadd <4 x float> %332, %329
  %337 = fadd <4 x float> %335, %330
  %338 = bitcast float* %316 to <4 x float>*
  store <4 x float> %336, <4 x float>* %338, align 4, !alias.scope !15, !noalias !16
  %339 = bitcast float* %333 to <4 x float>*
  store <4 x float> %337, <4 x float>* %339, align 4, !alias.scope !15, !noalias !16
  %340 = add i64 %289, 16
  %341 = add i64 %290, -2
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %288, !llvm.loop !17

343:                                              ; preds = %288, %285
  %344 = phi i64 [ 0, %285 ], [ %340, %288 ]
  br i1 %278, label %370, label %345

345:                                              ; preds = %343
  %346 = getelementptr float, float* %282, i64 %344
  %347 = getelementptr float, float* %14, i64 %344
  %348 = getelementptr float, float* %283, i64 %344
  %349 = bitcast float* %347 to <4 x float>*
  %350 = load <4 x float>, <4 x float>* %349, align 4, !alias.scope !7, !noalias !10
  %351 = getelementptr float, float* %347, i64 4
  %352 = bitcast float* %351 to <4 x float>*
  %353 = load <4 x float>, <4 x float>* %352, align 4, !alias.scope !7, !noalias !10
  %354 = bitcast float* %348 to <4 x float>*
  %355 = load <4 x float>, <4 x float>* %354, align 4, !alias.scope !13, !noalias !14
  %356 = getelementptr float, float* %348, i64 4
  %357 = bitcast float* %356 to <4 x float>*
  %358 = load <4 x float>, <4 x float>* %357, align 4, !alias.scope !13, !noalias !14
  %359 = fmul <4 x float> %350, %355
  %360 = fmul <4 x float> %353, %358
  %361 = bitcast float* %346 to <4 x float>*
  %362 = load <4 x float>, <4 x float>* %361, align 4, !alias.scope !15, !noalias !16
  %363 = getelementptr float, float* %346, i64 4
  %364 = bitcast float* %363 to <4 x float>*
  %365 = load <4 x float>, <4 x float>* %364, align 4, !alias.scope !15, !noalias !16
  %366 = fadd <4 x float> %362, %359
  %367 = fadd <4 x float> %365, %360
  %368 = bitcast float* %346 to <4 x float>*
  store <4 x float> %366, <4 x float>* %368, align 4, !alias.scope !15, !noalias !16
  %369 = bitcast float* %363 to <4 x float>*
  store <4 x float> %367, <4 x float>* %369, align 4, !alias.scope !15, !noalias !16
  br label %370

370:                                              ; preds = %343, %345
  br i1 %279, label %391, label %371

371:                                              ; preds = %370, %284
  %372 = phi i32 [ 0, %284 ], [ %273, %370 ]
  %373 = phi float* [ %282, %284 ], [ %286, %370 ]
  %374 = phi float* [ %14, %284 ], [ %274, %370 ]
  %375 = phi float* [ %283, %284 ], [ %287, %370 ]
  br label %376

376:                                              ; preds = %371, %376
  %377 = phi i32 [ %389, %376 ], [ %372, %371 ]
  %378 = phi float* [ %386, %376 ], [ %373, %371 ]
  %379 = phi float* [ %381, %376 ], [ %374, %371 ]
  %380 = phi float* [ %383, %376 ], [ %375, %371 ]
  %381 = getelementptr inbounds float, float* %379, i64 1
  %382 = load float, float* %379, align 4, !alias.scope !7, !noalias !10
  %383 = getelementptr inbounds float, float* %380, i64 1
  %384 = load float, float* %380, align 4, !alias.scope !13, !noalias !14
  %385 = fmul float %382, %384
  %386 = getelementptr inbounds float, float* %378, i64 1
  %387 = load float, float* %378, align 4, !alias.scope !15, !noalias !16
  %388 = fadd float %387, %385
  store float %388, float* %378, align 4, !alias.scope !15, !noalias !16
  %389 = add nuw nsw i32 %377, 1
  %390 = icmp eq i32 %389, %29
  br i1 %390, label %391, label %376, !llvm.loop !19

391:                                              ; preds = %376, %370, %280
  %392 = getelementptr inbounds float, float* %282, i64 %263
  %393 = getelementptr inbounds float, float* %283, i64 %263
  %394 = add nuw nsw i32 %281, 1
  %395 = icmp eq i32 %394, %28
  br i1 %395, label %396, label %280

396:                                              ; preds = %391, %258
  br i1 %58, label %397, label %502

397:                                              ; preds = %396
  tail call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %36, float* %36, i32 %29, i32 %28) #15
  br i1 %259, label %398, label %501

398:                                              ; preds = %397
  %399 = icmp sgt i32 %29, 0
  %400 = sext i32 %29 to i64
  %401 = add i32 %29, -1
  %402 = zext i32 %401 to i64
  %403 = add nuw nsw i64 %402, 1
  %404 = and i64 %403, 8589934584
  %405 = add nsw i64 %404, -8
  %406 = lshr exact i64 %405, 3
  %407 = add nuw nsw i64 %406, 1
  %408 = icmp ult i64 %403, 8
  %409 = and i64 %403, 8589934584
  %410 = trunc i64 %409 to i32
  %411 = getelementptr float, float* %17, i64 %409
  %412 = and i64 %407, 1
  %413 = icmp eq i64 %405, 0
  %414 = sub nuw nsw i64 %407, %412
  %415 = icmp eq i64 %412, 0
  %416 = icmp eq i64 %403, %409
  br label %417

417:                                              ; preds = %497, %398
  %418 = phi i32 [ 0, %398 ], [ %499, %497 ]
  %419 = phi float* [ %36, %398 ], [ %498, %497 ]
  br i1 %399, label %420, label %497

420:                                              ; preds = %417
  br i1 %408, label %482, label %421

421:                                              ; preds = %420
  %422 = getelementptr float, float* %419, i64 %409
  br i1 %413, label %462, label %423

423:                                              ; preds = %421, %423
  %424 = phi i64 [ %459, %423 ], [ 0, %421 ]
  %425 = phi i64 [ %460, %423 ], [ %414, %421 ]
  %426 = getelementptr float, float* %419, i64 %424
  %427 = getelementptr float, float* %17, i64 %424
  %428 = bitcast float* %427 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 4, !alias.scope !21, !noalias !24
  %430 = getelementptr float, float* %427, i64 4
  %431 = bitcast float* %430 to <4 x float>*
  %432 = load <4 x float>, <4 x float>* %431, align 4, !alias.scope !21, !noalias !24
  %433 = bitcast float* %426 to <4 x float>*
  %434 = load <4 x float>, <4 x float>* %433, align 4, !alias.scope !27, !noalias !28
  %435 = getelementptr float, float* %426, i64 4
  %436 = bitcast float* %435 to <4 x float>*
  %437 = load <4 x float>, <4 x float>* %436, align 4, !alias.scope !27, !noalias !28
  %438 = fmul <4 x float> %429, %434
  %439 = fmul <4 x float> %432, %437
  %440 = bitcast float* %426 to <4 x float>*
  store <4 x float> %438, <4 x float>* %440, align 4, !alias.scope !29, !noalias !30
  %441 = bitcast float* %435 to <4 x float>*
  store <4 x float> %439, <4 x float>* %441, align 4, !alias.scope !29, !noalias !30
  %442 = or i64 %424, 8
  %443 = getelementptr float, float* %419, i64 %442
  %444 = getelementptr float, float* %17, i64 %442
  %445 = bitcast float* %444 to <4 x float>*
  %446 = load <4 x float>, <4 x float>* %445, align 4, !alias.scope !21, !noalias !24
  %447 = getelementptr float, float* %444, i64 4
  %448 = bitcast float* %447 to <4 x float>*
  %449 = load <4 x float>, <4 x float>* %448, align 4, !alias.scope !21, !noalias !24
  %450 = bitcast float* %443 to <4 x float>*
  %451 = load <4 x float>, <4 x float>* %450, align 4, !alias.scope !27, !noalias !28
  %452 = getelementptr float, float* %443, i64 4
  %453 = bitcast float* %452 to <4 x float>*
  %454 = load <4 x float>, <4 x float>* %453, align 4, !alias.scope !27, !noalias !28
  %455 = fmul <4 x float> %446, %451
  %456 = fmul <4 x float> %449, %454
  %457 = bitcast float* %443 to <4 x float>*
  store <4 x float> %455, <4 x float>* %457, align 4, !alias.scope !29, !noalias !30
  %458 = bitcast float* %452 to <4 x float>*
  store <4 x float> %456, <4 x float>* %458, align 4, !alias.scope !29, !noalias !30
  %459 = add i64 %424, 16
  %460 = add i64 %425, -2
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %423, !llvm.loop !31

462:                                              ; preds = %423, %421
  %463 = phi i64 [ 0, %421 ], [ %459, %423 ]
  br i1 %415, label %481, label %464

464:                                              ; preds = %462
  %465 = getelementptr float, float* %419, i64 %463
  %466 = getelementptr float, float* %17, i64 %463
  %467 = bitcast float* %466 to <4 x float>*
  %468 = load <4 x float>, <4 x float>* %467, align 4, !alias.scope !21, !noalias !24
  %469 = getelementptr float, float* %466, i64 4
  %470 = bitcast float* %469 to <4 x float>*
  %471 = load <4 x float>, <4 x float>* %470, align 4, !alias.scope !21, !noalias !24
  %472 = bitcast float* %465 to <4 x float>*
  %473 = load <4 x float>, <4 x float>* %472, align 4, !alias.scope !27, !noalias !28
  %474 = getelementptr float, float* %465, i64 4
  %475 = bitcast float* %474 to <4 x float>*
  %476 = load <4 x float>, <4 x float>* %475, align 4, !alias.scope !27, !noalias !28
  %477 = fmul <4 x float> %468, %473
  %478 = fmul <4 x float> %471, %476
  %479 = bitcast float* %465 to <4 x float>*
  store <4 x float> %477, <4 x float>* %479, align 4, !alias.scope !29, !noalias !30
  %480 = bitcast float* %474 to <4 x float>*
  store <4 x float> %478, <4 x float>* %480, align 4, !alias.scope !29, !noalias !30
  br label %481

481:                                              ; preds = %462, %464
  br i1 %416, label %497, label %482

482:                                              ; preds = %481, %420
  %483 = phi i32 [ 0, %420 ], [ %410, %481 ]
  %484 = phi float* [ %419, %420 ], [ %422, %481 ]
  %485 = phi float* [ %17, %420 ], [ %411, %481 ]
  br label %486

486:                                              ; preds = %482, %486
  %487 = phi i32 [ %495, %486 ], [ %483, %482 ]
  %488 = phi float* [ %492, %486 ], [ %484, %482 ]
  %489 = phi float* [ %490, %486 ], [ %485, %482 ]
  %490 = getelementptr inbounds float, float* %489, i64 1
  %491 = load float, float* %489, align 4, !alias.scope !21, !noalias !24
  %492 = getelementptr inbounds float, float* %488, i64 1
  %493 = load float, float* %488, align 4, !alias.scope !27, !noalias !28
  %494 = fmul float %491, %493
  store float %494, float* %488, align 4, !alias.scope !29, !noalias !30
  %495 = add nuw nsw i32 %487, 1
  %496 = icmp eq i32 %495, %29
  br i1 %496, label %497, label %486, !llvm.loop !32

497:                                              ; preds = %486, %481, %417
  %498 = getelementptr inbounds float, float* %419, i64 %400
  %499 = add nuw nsw i32 %418, 1
  %500 = icmp eq i32 %499, %28
  br i1 %500, label %501, label %417

501:                                              ; preds = %497, %397
  tail call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %21, i32 %29, i32 %28, float* %36) #15
  br label %502

502:                                              ; preds = %501, %396
  %503 = mul nsw i32 %29, %28
  %504 = sext i32 %503 to i64
  %505 = bitcast %"class.Eigen::CwiseUnaryOp"* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %505) #15, !noalias !33
  %506 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %36, float** %506, align 8, !noalias !33
  %507 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %504, i64* %507, align 8, !noalias !33
  %508 = bitcast %"class.Eigen::ArrayWrapper"* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %508) #15, !noalias !33
  %509 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %36, float** %509, align 8, !noalias !33
  %510 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %49, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %504, i64* %510, align 8, !noalias !33
  %511 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %47, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %511) #15, !noalias !33
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %49, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %48, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %47) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %511) #15, !noalias !33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %508) #15, !noalias !33
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %505) #15, !noalias !33
  br label %513

512:                                              ; preds = %257
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %11, i32 %29, i32 %32, float* %34, i32 %28, float* %37) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %12, i32 %29, i32 %32, float* %34, i32 %28, float* %38) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %13, i32 %29, i32 %32, float* %34, i32 %28, float* %39) #15
  br label %513

513:                                              ; preds = %512, %502
  %514 = icmp sgt i32 %28, 0
  %515 = and i1 %57, %514
  br i1 %515, label %516, label %651

516:                                              ; preds = %513
  %517 = icmp sgt i32 %29, 0
  %518 = sext i32 %29 to i64
  %519 = add i32 %29, -1
  %520 = zext i32 %519 to i64
  %521 = add nuw nsw i64 %520, 1
  %522 = and i64 %521, 8589934584
  %523 = add nsw i64 %522, -8
  %524 = lshr exact i64 %523, 3
  %525 = add nuw nsw i64 %524, 1
  %526 = icmp ult i64 %521, 8
  %527 = and i64 %521, 8589934584
  %528 = trunc i64 %527 to i32
  %529 = getelementptr float, float* %15, i64 %527
  %530 = and i64 %525, 1
  %531 = icmp eq i64 %523, 0
  %532 = sub nuw nsw i64 %525, %530
  %533 = icmp eq i64 %530, 0
  %534 = icmp eq i64 %521, %527
  br label %535

535:                                              ; preds = %646, %516
  %536 = phi i32 [ 0, %516 ], [ %649, %646 ]
  %537 = phi float* [ %37, %516 ], [ %647, %646 ]
  %538 = phi float* [ %35, %516 ], [ %648, %646 ]
  br i1 %517, label %539, label %646

539:                                              ; preds = %535
  br i1 %526, label %626, label %540

540:                                              ; preds = %539
  %541 = getelementptr float, float* %537, i64 %527
  %542 = getelementptr float, float* %538, i64 %527
  br i1 %531, label %598, label %543

543:                                              ; preds = %540, %543
  %544 = phi i64 [ %595, %543 ], [ 0, %540 ]
  %545 = phi i64 [ %596, %543 ], [ %532, %540 ]
  %546 = getelementptr float, float* %537, i64 %544
  %547 = getelementptr float, float* %15, i64 %544
  %548 = getelementptr float, float* %538, i64 %544
  %549 = bitcast float* %547 to <4 x float>*
  %550 = load <4 x float>, <4 x float>* %549, align 4, !alias.scope !37, !noalias !40
  %551 = getelementptr float, float* %547, i64 4
  %552 = bitcast float* %551 to <4 x float>*
  %553 = load <4 x float>, <4 x float>* %552, align 4, !alias.scope !37, !noalias !40
  %554 = bitcast float* %548 to <4 x float>*
  %555 = load <4 x float>, <4 x float>* %554, align 4, !alias.scope !43, !noalias !44
  %556 = getelementptr float, float* %548, i64 4
  %557 = bitcast float* %556 to <4 x float>*
  %558 = load <4 x float>, <4 x float>* %557, align 4, !alias.scope !43, !noalias !44
  %559 = fmul <4 x float> %550, %555
  %560 = fmul <4 x float> %553, %558
  %561 = bitcast float* %546 to <4 x float>*
  %562 = load <4 x float>, <4 x float>* %561, align 4, !alias.scope !45, !noalias !46
  %563 = getelementptr float, float* %546, i64 4
  %564 = bitcast float* %563 to <4 x float>*
  %565 = load <4 x float>, <4 x float>* %564, align 4, !alias.scope !45, !noalias !46
  %566 = fadd <4 x float> %562, %559
  %567 = fadd <4 x float> %565, %560
  %568 = bitcast float* %546 to <4 x float>*
  store <4 x float> %566, <4 x float>* %568, align 4, !alias.scope !45, !noalias !46
  %569 = bitcast float* %563 to <4 x float>*
  store <4 x float> %567, <4 x float>* %569, align 4, !alias.scope !45, !noalias !46
  %570 = or i64 %544, 8
  %571 = getelementptr float, float* %537, i64 %570
  %572 = getelementptr float, float* %15, i64 %570
  %573 = getelementptr float, float* %538, i64 %570
  %574 = bitcast float* %572 to <4 x float>*
  %575 = load <4 x float>, <4 x float>* %574, align 4, !alias.scope !37, !noalias !40
  %576 = getelementptr float, float* %572, i64 4
  %577 = bitcast float* %576 to <4 x float>*
  %578 = load <4 x float>, <4 x float>* %577, align 4, !alias.scope !37, !noalias !40
  %579 = bitcast float* %573 to <4 x float>*
  %580 = load <4 x float>, <4 x float>* %579, align 4, !alias.scope !43, !noalias !44
  %581 = getelementptr float, float* %573, i64 4
  %582 = bitcast float* %581 to <4 x float>*
  %583 = load <4 x float>, <4 x float>* %582, align 4, !alias.scope !43, !noalias !44
  %584 = fmul <4 x float> %575, %580
  %585 = fmul <4 x float> %578, %583
  %586 = bitcast float* %571 to <4 x float>*
  %587 = load <4 x float>, <4 x float>* %586, align 4, !alias.scope !45, !noalias !46
  %588 = getelementptr float, float* %571, i64 4
  %589 = bitcast float* %588 to <4 x float>*
  %590 = load <4 x float>, <4 x float>* %589, align 4, !alias.scope !45, !noalias !46
  %591 = fadd <4 x float> %587, %584
  %592 = fadd <4 x float> %590, %585
  %593 = bitcast float* %571 to <4 x float>*
  store <4 x float> %591, <4 x float>* %593, align 4, !alias.scope !45, !noalias !46
  %594 = bitcast float* %588 to <4 x float>*
  store <4 x float> %592, <4 x float>* %594, align 4, !alias.scope !45, !noalias !46
  %595 = add i64 %544, 16
  %596 = add i64 %545, -2
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %598, label %543, !llvm.loop !47

598:                                              ; preds = %543, %540
  %599 = phi i64 [ 0, %540 ], [ %595, %543 ]
  br i1 %533, label %625, label %600

600:                                              ; preds = %598
  %601 = getelementptr float, float* %537, i64 %599
  %602 = getelementptr float, float* %15, i64 %599
  %603 = getelementptr float, float* %538, i64 %599
  %604 = bitcast float* %602 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 4, !alias.scope !37, !noalias !40
  %606 = getelementptr float, float* %602, i64 4
  %607 = bitcast float* %606 to <4 x float>*
  %608 = load <4 x float>, <4 x float>* %607, align 4, !alias.scope !37, !noalias !40
  %609 = bitcast float* %603 to <4 x float>*
  %610 = load <4 x float>, <4 x float>* %609, align 4, !alias.scope !43, !noalias !44
  %611 = getelementptr float, float* %603, i64 4
  %612 = bitcast float* %611 to <4 x float>*
  %613 = load <4 x float>, <4 x float>* %612, align 4, !alias.scope !43, !noalias !44
  %614 = fmul <4 x float> %605, %610
  %615 = fmul <4 x float> %608, %613
  %616 = bitcast float* %601 to <4 x float>*
  %617 = load <4 x float>, <4 x float>* %616, align 4, !alias.scope !45, !noalias !46
  %618 = getelementptr float, float* %601, i64 4
  %619 = bitcast float* %618 to <4 x float>*
  %620 = load <4 x float>, <4 x float>* %619, align 4, !alias.scope !45, !noalias !46
  %621 = fadd <4 x float> %617, %614
  %622 = fadd <4 x float> %620, %615
  %623 = bitcast float* %601 to <4 x float>*
  store <4 x float> %621, <4 x float>* %623, align 4, !alias.scope !45, !noalias !46
  %624 = bitcast float* %618 to <4 x float>*
  store <4 x float> %622, <4 x float>* %624, align 4, !alias.scope !45, !noalias !46
  br label %625

625:                                              ; preds = %598, %600
  br i1 %534, label %646, label %626

626:                                              ; preds = %625, %539
  %627 = phi i32 [ 0, %539 ], [ %528, %625 ]
  %628 = phi float* [ %537, %539 ], [ %541, %625 ]
  %629 = phi float* [ %15, %539 ], [ %529, %625 ]
  %630 = phi float* [ %538, %539 ], [ %542, %625 ]
  br label %631

631:                                              ; preds = %626, %631
  %632 = phi i32 [ %644, %631 ], [ %627, %626 ]
  %633 = phi float* [ %641, %631 ], [ %628, %626 ]
  %634 = phi float* [ %636, %631 ], [ %629, %626 ]
  %635 = phi float* [ %638, %631 ], [ %630, %626 ]
  %636 = getelementptr inbounds float, float* %634, i64 1
  %637 = load float, float* %634, align 4, !alias.scope !37, !noalias !40
  %638 = getelementptr inbounds float, float* %635, i64 1
  %639 = load float, float* %635, align 4, !alias.scope !43, !noalias !44
  %640 = fmul float %637, %639
  %641 = getelementptr inbounds float, float* %633, i64 1
  %642 = load float, float* %633, align 4, !alias.scope !45, !noalias !46
  %643 = fadd float %642, %640
  store float %643, float* %633, align 4, !alias.scope !45, !noalias !46
  %644 = add nuw nsw i32 %632, 1
  %645 = icmp eq i32 %644, %29
  br i1 %645, label %646, label %631, !llvm.loop !48

646:                                              ; preds = %631, %625, %535
  %647 = getelementptr inbounds float, float* %537, i64 %518
  %648 = getelementptr inbounds float, float* %538, i64 %518
  %649 = add nuw nsw i32 %536, 1
  %650 = icmp eq i32 %649, %28
  br i1 %650, label %651, label %535

651:                                              ; preds = %646, %513
  br i1 %58, label %652, label %757

652:                                              ; preds = %651
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %37, float* %37, i32 %29, i32 %28) #15
  br i1 %514, label %653, label %756

653:                                              ; preds = %652
  %654 = icmp sgt i32 %29, 0
  %655 = sext i32 %29 to i64
  %656 = add i32 %29, -1
  %657 = zext i32 %656 to i64
  %658 = add nuw nsw i64 %657, 1
  %659 = and i64 %658, 8589934584
  %660 = add nsw i64 %659, -8
  %661 = lshr exact i64 %660, 3
  %662 = add nuw nsw i64 %661, 1
  %663 = icmp ult i64 %658, 8
  %664 = and i64 %658, 8589934584
  %665 = trunc i64 %664 to i32
  %666 = getelementptr float, float* %18, i64 %664
  %667 = and i64 %662, 1
  %668 = icmp eq i64 %660, 0
  %669 = sub nuw nsw i64 %662, %667
  %670 = icmp eq i64 %667, 0
  %671 = icmp eq i64 %658, %664
  br label %672

672:                                              ; preds = %752, %653
  %673 = phi i32 [ 0, %653 ], [ %754, %752 ]
  %674 = phi float* [ %37, %653 ], [ %753, %752 ]
  br i1 %654, label %675, label %752

675:                                              ; preds = %672
  br i1 %663, label %737, label %676

676:                                              ; preds = %675
  %677 = getelementptr float, float* %674, i64 %664
  br i1 %668, label %717, label %678

678:                                              ; preds = %676, %678
  %679 = phi i64 [ %714, %678 ], [ 0, %676 ]
  %680 = phi i64 [ %715, %678 ], [ %669, %676 ]
  %681 = getelementptr float, float* %674, i64 %679
  %682 = getelementptr float, float* %18, i64 %679
  %683 = bitcast float* %682 to <4 x float>*
  %684 = load <4 x float>, <4 x float>* %683, align 4, !alias.scope !49, !noalias !52
  %685 = getelementptr float, float* %682, i64 4
  %686 = bitcast float* %685 to <4 x float>*
  %687 = load <4 x float>, <4 x float>* %686, align 4, !alias.scope !49, !noalias !52
  %688 = bitcast float* %681 to <4 x float>*
  %689 = load <4 x float>, <4 x float>* %688, align 4, !alias.scope !55, !noalias !56
  %690 = getelementptr float, float* %681, i64 4
  %691 = bitcast float* %690 to <4 x float>*
  %692 = load <4 x float>, <4 x float>* %691, align 4, !alias.scope !55, !noalias !56
  %693 = fmul <4 x float> %684, %689
  %694 = fmul <4 x float> %687, %692
  %695 = bitcast float* %681 to <4 x float>*
  store <4 x float> %693, <4 x float>* %695, align 4, !alias.scope !57, !noalias !58
  %696 = bitcast float* %690 to <4 x float>*
  store <4 x float> %694, <4 x float>* %696, align 4, !alias.scope !57, !noalias !58
  %697 = or i64 %679, 8
  %698 = getelementptr float, float* %674, i64 %697
  %699 = getelementptr float, float* %18, i64 %697
  %700 = bitcast float* %699 to <4 x float>*
  %701 = load <4 x float>, <4 x float>* %700, align 4, !alias.scope !49, !noalias !52
  %702 = getelementptr float, float* %699, i64 4
  %703 = bitcast float* %702 to <4 x float>*
  %704 = load <4 x float>, <4 x float>* %703, align 4, !alias.scope !49, !noalias !52
  %705 = bitcast float* %698 to <4 x float>*
  %706 = load <4 x float>, <4 x float>* %705, align 4, !alias.scope !55, !noalias !56
  %707 = getelementptr float, float* %698, i64 4
  %708 = bitcast float* %707 to <4 x float>*
  %709 = load <4 x float>, <4 x float>* %708, align 4, !alias.scope !55, !noalias !56
  %710 = fmul <4 x float> %701, %706
  %711 = fmul <4 x float> %704, %709
  %712 = bitcast float* %698 to <4 x float>*
  store <4 x float> %710, <4 x float>* %712, align 4, !alias.scope !57, !noalias !58
  %713 = bitcast float* %707 to <4 x float>*
  store <4 x float> %711, <4 x float>* %713, align 4, !alias.scope !57, !noalias !58
  %714 = add i64 %679, 16
  %715 = add i64 %680, -2
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %678, !llvm.loop !59

717:                                              ; preds = %678, %676
  %718 = phi i64 [ 0, %676 ], [ %714, %678 ]
  br i1 %670, label %736, label %719

719:                                              ; preds = %717
  %720 = getelementptr float, float* %674, i64 %718
  %721 = getelementptr float, float* %18, i64 %718
  %722 = bitcast float* %721 to <4 x float>*
  %723 = load <4 x float>, <4 x float>* %722, align 4, !alias.scope !49, !noalias !52
  %724 = getelementptr float, float* %721, i64 4
  %725 = bitcast float* %724 to <4 x float>*
  %726 = load <4 x float>, <4 x float>* %725, align 4, !alias.scope !49, !noalias !52
  %727 = bitcast float* %720 to <4 x float>*
  %728 = load <4 x float>, <4 x float>* %727, align 4, !alias.scope !55, !noalias !56
  %729 = getelementptr float, float* %720, i64 4
  %730 = bitcast float* %729 to <4 x float>*
  %731 = load <4 x float>, <4 x float>* %730, align 4, !alias.scope !55, !noalias !56
  %732 = fmul <4 x float> %723, %728
  %733 = fmul <4 x float> %726, %731
  %734 = bitcast float* %720 to <4 x float>*
  store <4 x float> %732, <4 x float>* %734, align 4, !alias.scope !57, !noalias !58
  %735 = bitcast float* %729 to <4 x float>*
  store <4 x float> %733, <4 x float>* %735, align 4, !alias.scope !57, !noalias !58
  br label %736

736:                                              ; preds = %717, %719
  br i1 %671, label %752, label %737

737:                                              ; preds = %736, %675
  %738 = phi i32 [ 0, %675 ], [ %665, %736 ]
  %739 = phi float* [ %674, %675 ], [ %677, %736 ]
  %740 = phi float* [ %18, %675 ], [ %666, %736 ]
  br label %741

741:                                              ; preds = %737, %741
  %742 = phi i32 [ %750, %741 ], [ %738, %737 ]
  %743 = phi float* [ %747, %741 ], [ %739, %737 ]
  %744 = phi float* [ %745, %741 ], [ %740, %737 ]
  %745 = getelementptr inbounds float, float* %744, i64 1
  %746 = load float, float* %744, align 4, !alias.scope !49, !noalias !52
  %747 = getelementptr inbounds float, float* %743, i64 1
  %748 = load float, float* %743, align 4, !alias.scope !55, !noalias !56
  %749 = fmul float %746, %748
  store float %749, float* %743, align 4, !alias.scope !57, !noalias !58
  %750 = add nuw nsw i32 %742, 1
  %751 = icmp eq i32 %750, %29
  br i1 %751, label %752, label %741, !llvm.loop !60

752:                                              ; preds = %741, %736, %672
  %753 = getelementptr inbounds float, float* %674, i64 %655
  %754 = add nuw nsw i32 %673, 1
  %755 = icmp eq i32 %754, %28
  br i1 %755, label %756, label %672

756:                                              ; preds = %752, %652
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %22, i32 %29, i32 %28, float* %37) #15
  br label %757

757:                                              ; preds = %756, %651
  %758 = mul nsw i32 %29, %28
  %759 = sext i32 %758 to i64
  %760 = bitcast %"class.Eigen::CwiseUnaryOp"* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %760) #15, !noalias !61
  %761 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %37, float** %761, align 8, !noalias !61
  %762 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %759, i64* %762, align 8, !noalias !61
  %763 = bitcast %"class.Eigen::ArrayWrapper"* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %763) #15, !noalias !61
  %764 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %37, float** %764, align 8, !noalias !61
  %765 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %52, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %759, i64* %765, align 8, !noalias !61
  %766 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %50, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %766) #15, !noalias !61
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %52, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %51, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %50) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %766) #15, !noalias !61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %763) #15, !noalias !61
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %760) #15, !noalias !61
  %767 = icmp sgt i32 %758, 0
  br i1 %767, label %768, label %862

768:                                              ; preds = %757
  %769 = mul i32 %29, %28
  %770 = add i32 %769, -1
  %771 = zext i32 %770 to i64
  %772 = add nuw nsw i64 %771, 1
  %773 = icmp ult i64 %772, 8
  br i1 %773, label %847, label %774

774:                                              ; preds = %768
  %775 = and i64 %772, 8589934584
  %776 = trunc i64 %775 to i32
  %777 = getelementptr float, float* %35, i64 %775
  %778 = getelementptr float, float* %37, i64 %775
  %779 = add nsw i64 %775, -8
  %780 = lshr exact i64 %779, 3
  %781 = add nuw nsw i64 %780, 1
  %782 = and i64 %781, 1
  %783 = icmp eq i64 %779, 0
  br i1 %783, label %825, label %784

784:                                              ; preds = %774
  %785 = sub nuw nsw i64 %781, %782
  br label %786

786:                                              ; preds = %786, %784
  %787 = phi i64 [ 0, %784 ], [ %822, %786 ]
  %788 = phi i64 [ %785, %784 ], [ %823, %786 ]
  %789 = getelementptr float, float* %35, i64 %787
  %790 = getelementptr float, float* %37, i64 %787
  %791 = bitcast float* %790 to <4 x float>*
  %792 = load <4 x float>, <4 x float>* %791, align 4, !alias.scope !65, !noalias !68
  %793 = getelementptr float, float* %790, i64 4
  %794 = bitcast float* %793 to <4 x float>*
  %795 = load <4 x float>, <4 x float>* %794, align 4, !alias.scope !65, !noalias !68
  %796 = bitcast float* %789 to <4 x float>*
  %797 = load <4 x float>, <4 x float>* %796, align 4, !alias.scope !71, !noalias !72
  %798 = getelementptr float, float* %789, i64 4
  %799 = bitcast float* %798 to <4 x float>*
  %800 = load <4 x float>, <4 x float>* %799, align 4, !alias.scope !71, !noalias !72
  %801 = fmul <4 x float> %792, %797
  %802 = fmul <4 x float> %795, %800
  %803 = bitcast float* %789 to <4 x float>*
  store <4 x float> %801, <4 x float>* %803, align 4, !alias.scope !73, !noalias !74
  %804 = bitcast float* %798 to <4 x float>*
  store <4 x float> %802, <4 x float>* %804, align 4, !alias.scope !73, !noalias !74
  %805 = or i64 %787, 8
  %806 = getelementptr float, float* %35, i64 %805
  %807 = getelementptr float, float* %37, i64 %805
  %808 = bitcast float* %807 to <4 x float>*
  %809 = load <4 x float>, <4 x float>* %808, align 4, !alias.scope !65, !noalias !68
  %810 = getelementptr float, float* %807, i64 4
  %811 = bitcast float* %810 to <4 x float>*
  %812 = load <4 x float>, <4 x float>* %811, align 4, !alias.scope !65, !noalias !68
  %813 = bitcast float* %806 to <4 x float>*
  %814 = load <4 x float>, <4 x float>* %813, align 4, !alias.scope !71, !noalias !72
  %815 = getelementptr float, float* %806, i64 4
  %816 = bitcast float* %815 to <4 x float>*
  %817 = load <4 x float>, <4 x float>* %816, align 4, !alias.scope !71, !noalias !72
  %818 = fmul <4 x float> %809, %814
  %819 = fmul <4 x float> %812, %817
  %820 = bitcast float* %806 to <4 x float>*
  store <4 x float> %818, <4 x float>* %820, align 4, !alias.scope !73, !noalias !74
  %821 = bitcast float* %815 to <4 x float>*
  store <4 x float> %819, <4 x float>* %821, align 4, !alias.scope !73, !noalias !74
  %822 = add i64 %787, 16
  %823 = add i64 %788, -2
  %824 = icmp eq i64 %823, 0
  br i1 %824, label %825, label %786, !llvm.loop !75

825:                                              ; preds = %786, %774
  %826 = phi i64 [ 0, %774 ], [ %822, %786 ]
  %827 = icmp eq i64 %782, 0
  br i1 %827, label %845, label %828

828:                                              ; preds = %825
  %829 = getelementptr float, float* %35, i64 %826
  %830 = getelementptr float, float* %37, i64 %826
  %831 = bitcast float* %830 to <4 x float>*
  %832 = load <4 x float>, <4 x float>* %831, align 4, !alias.scope !65, !noalias !68
  %833 = getelementptr float, float* %830, i64 4
  %834 = bitcast float* %833 to <4 x float>*
  %835 = load <4 x float>, <4 x float>* %834, align 4, !alias.scope !65, !noalias !68
  %836 = bitcast float* %829 to <4 x float>*
  %837 = load <4 x float>, <4 x float>* %836, align 4, !alias.scope !71, !noalias !72
  %838 = getelementptr float, float* %829, i64 4
  %839 = bitcast float* %838 to <4 x float>*
  %840 = load <4 x float>, <4 x float>* %839, align 4, !alias.scope !71, !noalias !72
  %841 = fmul <4 x float> %832, %837
  %842 = fmul <4 x float> %835, %840
  %843 = bitcast float* %829 to <4 x float>*
  store <4 x float> %841, <4 x float>* %843, align 4, !alias.scope !73, !noalias !74
  %844 = bitcast float* %838 to <4 x float>*
  store <4 x float> %842, <4 x float>* %844, align 4, !alias.scope !73, !noalias !74
  br label %845

845:                                              ; preds = %825, %828
  %846 = icmp eq i64 %772, %775
  br i1 %846, label %862, label %847

847:                                              ; preds = %845, %768
  %848 = phi i32 [ 0, %768 ], [ %776, %845 ]
  %849 = phi float* [ %35, %768 ], [ %777, %845 ]
  %850 = phi float* [ %37, %768 ], [ %778, %845 ]
  br label %851

851:                                              ; preds = %847, %851
  %852 = phi i32 [ %860, %851 ], [ %848, %847 ]
  %853 = phi float* [ %857, %851 ], [ %849, %847 ]
  %854 = phi float* [ %855, %851 ], [ %850, %847 ]
  %855 = getelementptr inbounds float, float* %854, i64 1
  %856 = load float, float* %854, align 4, !alias.scope !65, !noalias !68
  %857 = getelementptr inbounds float, float* %853, i64 1
  %858 = load float, float* %853, align 4, !alias.scope !71, !noalias !72
  %859 = fmul float %856, %858
  store float %859, float* %853, align 4, !alias.scope !73, !noalias !74
  %860 = add nuw nsw i32 %852, 1
  %861 = icmp eq i32 %860, %758
  br i1 %861, label %862, label %851, !llvm.loop !76

862:                                              ; preds = %851, %845, %757
  br i1 %58, label %863, label %968

863:                                              ; preds = %862
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %38, float* %38, i32 %29, i32 %28) #15
  br i1 %514, label %864, label %967

864:                                              ; preds = %863
  %865 = icmp sgt i32 %29, 0
  %866 = sext i32 %29 to i64
  %867 = add i32 %29, -1
  %868 = zext i32 %867 to i64
  %869 = add nuw nsw i64 %868, 1
  %870 = and i64 %869, 8589934584
  %871 = add nsw i64 %870, -8
  %872 = lshr exact i64 %871, 3
  %873 = add nuw nsw i64 %872, 1
  %874 = icmp ult i64 %869, 8
  %875 = and i64 %869, 8589934584
  %876 = trunc i64 %875 to i32
  %877 = getelementptr float, float* %19, i64 %875
  %878 = and i64 %873, 1
  %879 = icmp eq i64 %871, 0
  %880 = sub nuw nsw i64 %873, %878
  %881 = icmp eq i64 %878, 0
  %882 = icmp eq i64 %869, %875
  br label %883

883:                                              ; preds = %963, %864
  %884 = phi i32 [ 0, %864 ], [ %965, %963 ]
  %885 = phi float* [ %38, %864 ], [ %964, %963 ]
  br i1 %865, label %886, label %963

886:                                              ; preds = %883
  br i1 %874, label %948, label %887

887:                                              ; preds = %886
  %888 = getelementptr float, float* %885, i64 %875
  br i1 %879, label %928, label %889

889:                                              ; preds = %887, %889
  %890 = phi i64 [ %925, %889 ], [ 0, %887 ]
  %891 = phi i64 [ %926, %889 ], [ %880, %887 ]
  %892 = getelementptr float, float* %885, i64 %890
  %893 = getelementptr float, float* %19, i64 %890
  %894 = bitcast float* %893 to <4 x float>*
  %895 = load <4 x float>, <4 x float>* %894, align 4, !alias.scope !77, !noalias !80
  %896 = getelementptr float, float* %893, i64 4
  %897 = bitcast float* %896 to <4 x float>*
  %898 = load <4 x float>, <4 x float>* %897, align 4, !alias.scope !77, !noalias !80
  %899 = bitcast float* %892 to <4 x float>*
  %900 = load <4 x float>, <4 x float>* %899, align 4, !alias.scope !83, !noalias !84
  %901 = getelementptr float, float* %892, i64 4
  %902 = bitcast float* %901 to <4 x float>*
  %903 = load <4 x float>, <4 x float>* %902, align 4, !alias.scope !83, !noalias !84
  %904 = fmul <4 x float> %895, %900
  %905 = fmul <4 x float> %898, %903
  %906 = bitcast float* %892 to <4 x float>*
  store <4 x float> %904, <4 x float>* %906, align 4, !alias.scope !85, !noalias !86
  %907 = bitcast float* %901 to <4 x float>*
  store <4 x float> %905, <4 x float>* %907, align 4, !alias.scope !85, !noalias !86
  %908 = or i64 %890, 8
  %909 = getelementptr float, float* %885, i64 %908
  %910 = getelementptr float, float* %19, i64 %908
  %911 = bitcast float* %910 to <4 x float>*
  %912 = load <4 x float>, <4 x float>* %911, align 4, !alias.scope !77, !noalias !80
  %913 = getelementptr float, float* %910, i64 4
  %914 = bitcast float* %913 to <4 x float>*
  %915 = load <4 x float>, <4 x float>* %914, align 4, !alias.scope !77, !noalias !80
  %916 = bitcast float* %909 to <4 x float>*
  %917 = load <4 x float>, <4 x float>* %916, align 4, !alias.scope !83, !noalias !84
  %918 = getelementptr float, float* %909, i64 4
  %919 = bitcast float* %918 to <4 x float>*
  %920 = load <4 x float>, <4 x float>* %919, align 4, !alias.scope !83, !noalias !84
  %921 = fmul <4 x float> %912, %917
  %922 = fmul <4 x float> %915, %920
  %923 = bitcast float* %909 to <4 x float>*
  store <4 x float> %921, <4 x float>* %923, align 4, !alias.scope !85, !noalias !86
  %924 = bitcast float* %918 to <4 x float>*
  store <4 x float> %922, <4 x float>* %924, align 4, !alias.scope !85, !noalias !86
  %925 = add i64 %890, 16
  %926 = add i64 %891, -2
  %927 = icmp eq i64 %926, 0
  br i1 %927, label %928, label %889, !llvm.loop !87

928:                                              ; preds = %889, %887
  %929 = phi i64 [ 0, %887 ], [ %925, %889 ]
  br i1 %881, label %947, label %930

930:                                              ; preds = %928
  %931 = getelementptr float, float* %885, i64 %929
  %932 = getelementptr float, float* %19, i64 %929
  %933 = bitcast float* %932 to <4 x float>*
  %934 = load <4 x float>, <4 x float>* %933, align 4, !alias.scope !77, !noalias !80
  %935 = getelementptr float, float* %932, i64 4
  %936 = bitcast float* %935 to <4 x float>*
  %937 = load <4 x float>, <4 x float>* %936, align 4, !alias.scope !77, !noalias !80
  %938 = bitcast float* %931 to <4 x float>*
  %939 = load <4 x float>, <4 x float>* %938, align 4, !alias.scope !83, !noalias !84
  %940 = getelementptr float, float* %931, i64 4
  %941 = bitcast float* %940 to <4 x float>*
  %942 = load <4 x float>, <4 x float>* %941, align 4, !alias.scope !83, !noalias !84
  %943 = fmul <4 x float> %934, %939
  %944 = fmul <4 x float> %937, %942
  %945 = bitcast float* %931 to <4 x float>*
  store <4 x float> %943, <4 x float>* %945, align 4, !alias.scope !85, !noalias !86
  %946 = bitcast float* %940 to <4 x float>*
  store <4 x float> %944, <4 x float>* %946, align 4, !alias.scope !85, !noalias !86
  br label %947

947:                                              ; preds = %928, %930
  br i1 %882, label %963, label %948

948:                                              ; preds = %947, %886
  %949 = phi i32 [ 0, %886 ], [ %876, %947 ]
  %950 = phi float* [ %885, %886 ], [ %888, %947 ]
  %951 = phi float* [ %19, %886 ], [ %877, %947 ]
  br label %952

952:                                              ; preds = %948, %952
  %953 = phi i32 [ %961, %952 ], [ %949, %948 ]
  %954 = phi float* [ %958, %952 ], [ %950, %948 ]
  %955 = phi float* [ %956, %952 ], [ %951, %948 ]
  %956 = getelementptr inbounds float, float* %955, i64 1
  %957 = load float, float* %955, align 4, !alias.scope !77, !noalias !80
  %958 = getelementptr inbounds float, float* %954, i64 1
  %959 = load float, float* %954, align 4, !alias.scope !83, !noalias !84
  %960 = fmul float %957, %959
  store float %960, float* %954, align 4, !alias.scope !85, !noalias !86
  %961 = add nuw nsw i32 %953, 1
  %962 = icmp eq i32 %961, %29
  br i1 %962, label %963, label %952, !llvm.loop !88

963:                                              ; preds = %952, %947, %883
  %964 = getelementptr inbounds float, float* %885, i64 %866
  %965 = add nuw nsw i32 %884, 1
  %966 = icmp eq i32 %965, %28
  br i1 %966, label %967, label %883

967:                                              ; preds = %963, %863
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %23, i32 %29, i32 %28, float* %38) #15
  br label %968

968:                                              ; preds = %967, %862
  %969 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %27, i64 0, i32 0
  %970 = load i32, i32* %969, align 4
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %38, i32 %758, i32 %970, float* %38)
  br i1 %56, label %971, label %1096

971:                                              ; preds = %968
  call void @_ZN6tflite12tensor_utils10Sub1VectorEPKfiPf(float* %37, i32 %758, float* %37) #15
  br i1 %767, label %972, label %1221

972:                                              ; preds = %971
  %973 = mul i32 %29, %28
  %974 = add i32 %973, -1
  %975 = zext i32 %974 to i64
  %976 = add nuw nsw i64 %975, 1
  %977 = icmp ult i64 %976, 8
  br i1 %977, label %1076, label %978

978:                                              ; preds = %972
  %979 = and i64 %976, 8589934584
  %980 = trunc i64 %979 to i32
  %981 = getelementptr float, float* %35, i64 %979
  %982 = getelementptr float, float* %38, i64 %979
  %983 = getelementptr float, float* %37, i64 %979
  %984 = add nsw i64 %979, -8
  %985 = lshr exact i64 %984, 3
  %986 = add nuw nsw i64 %985, 1
  %987 = and i64 %986, 1
  %988 = icmp eq i64 %984, 0
  br i1 %988, label %1046, label %989

989:                                              ; preds = %978
  %990 = sub nuw nsw i64 %986, %987
  br label %991

991:                                              ; preds = %991, %989
  %992 = phi i64 [ 0, %989 ], [ %1043, %991 ]
  %993 = phi i64 [ %990, %989 ], [ %1044, %991 ]
  %994 = getelementptr float, float* %35, i64 %992
  %995 = getelementptr float, float* %38, i64 %992
  %996 = getelementptr float, float* %37, i64 %992
  %997 = bitcast float* %995 to <4 x float>*
  %998 = load <4 x float>, <4 x float>* %997, align 4, !alias.scope !89, !noalias !92
  %999 = getelementptr float, float* %995, i64 4
  %1000 = bitcast float* %999 to <4 x float>*
  %1001 = load <4 x float>, <4 x float>* %1000, align 4, !alias.scope !89, !noalias !92
  %1002 = bitcast float* %996 to <4 x float>*
  %1003 = load <4 x float>, <4 x float>* %1002, align 4, !alias.scope !95, !noalias !96
  %1004 = getelementptr float, float* %996, i64 4
  %1005 = bitcast float* %1004 to <4 x float>*
  %1006 = load <4 x float>, <4 x float>* %1005, align 4, !alias.scope !95, !noalias !96
  %1007 = fmul <4 x float> %998, %1003
  %1008 = fmul <4 x float> %1001, %1006
  %1009 = bitcast float* %994 to <4 x float>*
  %1010 = load <4 x float>, <4 x float>* %1009, align 4, !alias.scope !97, !noalias !98
  %1011 = getelementptr float, float* %994, i64 4
  %1012 = bitcast float* %1011 to <4 x float>*
  %1013 = load <4 x float>, <4 x float>* %1012, align 4, !alias.scope !97, !noalias !98
  %1014 = fadd <4 x float> %1010, %1007
  %1015 = fadd <4 x float> %1013, %1008
  %1016 = bitcast float* %994 to <4 x float>*
  store <4 x float> %1014, <4 x float>* %1016, align 4, !alias.scope !97, !noalias !98
  %1017 = bitcast float* %1011 to <4 x float>*
  store <4 x float> %1015, <4 x float>* %1017, align 4, !alias.scope !97, !noalias !98
  %1018 = or i64 %992, 8
  %1019 = getelementptr float, float* %35, i64 %1018
  %1020 = getelementptr float, float* %38, i64 %1018
  %1021 = getelementptr float, float* %37, i64 %1018
  %1022 = bitcast float* %1020 to <4 x float>*
  %1023 = load <4 x float>, <4 x float>* %1022, align 4, !alias.scope !89, !noalias !92
  %1024 = getelementptr float, float* %1020, i64 4
  %1025 = bitcast float* %1024 to <4 x float>*
  %1026 = load <4 x float>, <4 x float>* %1025, align 4, !alias.scope !89, !noalias !92
  %1027 = bitcast float* %1021 to <4 x float>*
  %1028 = load <4 x float>, <4 x float>* %1027, align 4, !alias.scope !95, !noalias !96
  %1029 = getelementptr float, float* %1021, i64 4
  %1030 = bitcast float* %1029 to <4 x float>*
  %1031 = load <4 x float>, <4 x float>* %1030, align 4, !alias.scope !95, !noalias !96
  %1032 = fmul <4 x float> %1023, %1028
  %1033 = fmul <4 x float> %1026, %1031
  %1034 = bitcast float* %1019 to <4 x float>*
  %1035 = load <4 x float>, <4 x float>* %1034, align 4, !alias.scope !97, !noalias !98
  %1036 = getelementptr float, float* %1019, i64 4
  %1037 = bitcast float* %1036 to <4 x float>*
  %1038 = load <4 x float>, <4 x float>* %1037, align 4, !alias.scope !97, !noalias !98
  %1039 = fadd <4 x float> %1035, %1032
  %1040 = fadd <4 x float> %1038, %1033
  %1041 = bitcast float* %1019 to <4 x float>*
  store <4 x float> %1039, <4 x float>* %1041, align 4, !alias.scope !97, !noalias !98
  %1042 = bitcast float* %1036 to <4 x float>*
  store <4 x float> %1040, <4 x float>* %1042, align 4, !alias.scope !97, !noalias !98
  %1043 = add i64 %992, 16
  %1044 = add i64 %993, -2
  %1045 = icmp eq i64 %1044, 0
  br i1 %1045, label %1046, label %991, !llvm.loop !99

1046:                                             ; preds = %991, %978
  %1047 = phi i64 [ 0, %978 ], [ %1043, %991 ]
  %1048 = icmp eq i64 %987, 0
  br i1 %1048, label %1074, label %1049

1049:                                             ; preds = %1046
  %1050 = getelementptr float, float* %35, i64 %1047
  %1051 = getelementptr float, float* %38, i64 %1047
  %1052 = getelementptr float, float* %37, i64 %1047
  %1053 = bitcast float* %1051 to <4 x float>*
  %1054 = load <4 x float>, <4 x float>* %1053, align 4, !alias.scope !89, !noalias !92
  %1055 = getelementptr float, float* %1051, i64 4
  %1056 = bitcast float* %1055 to <4 x float>*
  %1057 = load <4 x float>, <4 x float>* %1056, align 4, !alias.scope !89, !noalias !92
  %1058 = bitcast float* %1052 to <4 x float>*
  %1059 = load <4 x float>, <4 x float>* %1058, align 4, !alias.scope !95, !noalias !96
  %1060 = getelementptr float, float* %1052, i64 4
  %1061 = bitcast float* %1060 to <4 x float>*
  %1062 = load <4 x float>, <4 x float>* %1061, align 4, !alias.scope !95, !noalias !96
  %1063 = fmul <4 x float> %1054, %1059
  %1064 = fmul <4 x float> %1057, %1062
  %1065 = bitcast float* %1050 to <4 x float>*
  %1066 = load <4 x float>, <4 x float>* %1065, align 4, !alias.scope !97, !noalias !98
  %1067 = getelementptr float, float* %1050, i64 4
  %1068 = bitcast float* %1067 to <4 x float>*
  %1069 = load <4 x float>, <4 x float>* %1068, align 4, !alias.scope !97, !noalias !98
  %1070 = fadd <4 x float> %1066, %1063
  %1071 = fadd <4 x float> %1069, %1064
  %1072 = bitcast float* %1050 to <4 x float>*
  store <4 x float> %1070, <4 x float>* %1072, align 4, !alias.scope !97, !noalias !98
  %1073 = bitcast float* %1067 to <4 x float>*
  store <4 x float> %1071, <4 x float>* %1073, align 4, !alias.scope !97, !noalias !98
  br label %1074

1074:                                             ; preds = %1046, %1049
  %1075 = icmp eq i64 %976, %979
  br i1 %1075, label %1221, label %1076

1076:                                             ; preds = %1074, %972
  %1077 = phi i32 [ 0, %972 ], [ %980, %1074 ]
  %1078 = phi float* [ %35, %972 ], [ %981, %1074 ]
  %1079 = phi float* [ %38, %972 ], [ %982, %1074 ]
  %1080 = phi float* [ %37, %972 ], [ %983, %1074 ]
  br label %1081

1081:                                             ; preds = %1076, %1081
  %1082 = phi i32 [ %1094, %1081 ], [ %1077, %1076 ]
  %1083 = phi float* [ %1091, %1081 ], [ %1078, %1076 ]
  %1084 = phi float* [ %1086, %1081 ], [ %1079, %1076 ]
  %1085 = phi float* [ %1088, %1081 ], [ %1080, %1076 ]
  %1086 = getelementptr inbounds float, float* %1084, i64 1
  %1087 = load float, float* %1084, align 4, !alias.scope !89, !noalias !92
  %1088 = getelementptr inbounds float, float* %1085, i64 1
  %1089 = load float, float* %1085, align 4, !alias.scope !95, !noalias !96
  %1090 = fmul float %1087, %1089
  %1091 = getelementptr inbounds float, float* %1083, i64 1
  %1092 = load float, float* %1083, align 4, !alias.scope !97, !noalias !98
  %1093 = fadd float %1092, %1090
  store float %1093, float* %1083, align 4, !alias.scope !97, !noalias !98
  %1094 = add nuw nsw i32 %1082, 1
  %1095 = icmp eq i32 %1094, %758
  br i1 %1095, label %1221, label %1081, !llvm.loop !100

1096:                                             ; preds = %968
  br i1 %767, label %1097, label %1221

1097:                                             ; preds = %1096
  %1098 = mul i32 %29, %28
  %1099 = add i32 %1098, -1
  %1100 = zext i32 %1099 to i64
  %1101 = add nuw nsw i64 %1100, 1
  %1102 = icmp ult i64 %1101, 8
  br i1 %1102, label %1201, label %1103

1103:                                             ; preds = %1097
  %1104 = and i64 %1101, 8589934584
  %1105 = trunc i64 %1104 to i32
  %1106 = getelementptr float, float* %35, i64 %1104
  %1107 = getelementptr float, float* %38, i64 %1104
  %1108 = getelementptr float, float* %36, i64 %1104
  %1109 = add nsw i64 %1104, -8
  %1110 = lshr exact i64 %1109, 3
  %1111 = add nuw nsw i64 %1110, 1
  %1112 = and i64 %1111, 1
  %1113 = icmp eq i64 %1109, 0
  br i1 %1113, label %1171, label %1114

1114:                                             ; preds = %1103
  %1115 = sub nuw nsw i64 %1111, %1112
  br label %1116

1116:                                             ; preds = %1116, %1114
  %1117 = phi i64 [ 0, %1114 ], [ %1168, %1116 ]
  %1118 = phi i64 [ %1115, %1114 ], [ %1169, %1116 ]
  %1119 = getelementptr float, float* %35, i64 %1117
  %1120 = getelementptr float, float* %38, i64 %1117
  %1121 = getelementptr float, float* %36, i64 %1117
  %1122 = bitcast float* %1120 to <4 x float>*
  %1123 = load <4 x float>, <4 x float>* %1122, align 4, !alias.scope !101, !noalias !104
  %1124 = getelementptr float, float* %1120, i64 4
  %1125 = bitcast float* %1124 to <4 x float>*
  %1126 = load <4 x float>, <4 x float>* %1125, align 4, !alias.scope !101, !noalias !104
  %1127 = bitcast float* %1121 to <4 x float>*
  %1128 = load <4 x float>, <4 x float>* %1127, align 4, !alias.scope !107, !noalias !108
  %1129 = getelementptr float, float* %1121, i64 4
  %1130 = bitcast float* %1129 to <4 x float>*
  %1131 = load <4 x float>, <4 x float>* %1130, align 4, !alias.scope !107, !noalias !108
  %1132 = fmul <4 x float> %1123, %1128
  %1133 = fmul <4 x float> %1126, %1131
  %1134 = bitcast float* %1119 to <4 x float>*
  %1135 = load <4 x float>, <4 x float>* %1134, align 4, !alias.scope !109, !noalias !110
  %1136 = getelementptr float, float* %1119, i64 4
  %1137 = bitcast float* %1136 to <4 x float>*
  %1138 = load <4 x float>, <4 x float>* %1137, align 4, !alias.scope !109, !noalias !110
  %1139 = fadd <4 x float> %1135, %1132
  %1140 = fadd <4 x float> %1138, %1133
  %1141 = bitcast float* %1119 to <4 x float>*
  store <4 x float> %1139, <4 x float>* %1141, align 4, !alias.scope !109, !noalias !110
  %1142 = bitcast float* %1136 to <4 x float>*
  store <4 x float> %1140, <4 x float>* %1142, align 4, !alias.scope !109, !noalias !110
  %1143 = or i64 %1117, 8
  %1144 = getelementptr float, float* %35, i64 %1143
  %1145 = getelementptr float, float* %38, i64 %1143
  %1146 = getelementptr float, float* %36, i64 %1143
  %1147 = bitcast float* %1145 to <4 x float>*
  %1148 = load <4 x float>, <4 x float>* %1147, align 4, !alias.scope !101, !noalias !104
  %1149 = getelementptr float, float* %1145, i64 4
  %1150 = bitcast float* %1149 to <4 x float>*
  %1151 = load <4 x float>, <4 x float>* %1150, align 4, !alias.scope !101, !noalias !104
  %1152 = bitcast float* %1146 to <4 x float>*
  %1153 = load <4 x float>, <4 x float>* %1152, align 4, !alias.scope !107, !noalias !108
  %1154 = getelementptr float, float* %1146, i64 4
  %1155 = bitcast float* %1154 to <4 x float>*
  %1156 = load <4 x float>, <4 x float>* %1155, align 4, !alias.scope !107, !noalias !108
  %1157 = fmul <4 x float> %1148, %1153
  %1158 = fmul <4 x float> %1151, %1156
  %1159 = bitcast float* %1144 to <4 x float>*
  %1160 = load <4 x float>, <4 x float>* %1159, align 4, !alias.scope !109, !noalias !110
  %1161 = getelementptr float, float* %1144, i64 4
  %1162 = bitcast float* %1161 to <4 x float>*
  %1163 = load <4 x float>, <4 x float>* %1162, align 4, !alias.scope !109, !noalias !110
  %1164 = fadd <4 x float> %1160, %1157
  %1165 = fadd <4 x float> %1163, %1158
  %1166 = bitcast float* %1144 to <4 x float>*
  store <4 x float> %1164, <4 x float>* %1166, align 4, !alias.scope !109, !noalias !110
  %1167 = bitcast float* %1161 to <4 x float>*
  store <4 x float> %1165, <4 x float>* %1167, align 4, !alias.scope !109, !noalias !110
  %1168 = add i64 %1117, 16
  %1169 = add i64 %1118, -2
  %1170 = icmp eq i64 %1169, 0
  br i1 %1170, label %1171, label %1116, !llvm.loop !111

1171:                                             ; preds = %1116, %1103
  %1172 = phi i64 [ 0, %1103 ], [ %1168, %1116 ]
  %1173 = icmp eq i64 %1112, 0
  br i1 %1173, label %1199, label %1174

1174:                                             ; preds = %1171
  %1175 = getelementptr float, float* %35, i64 %1172
  %1176 = getelementptr float, float* %38, i64 %1172
  %1177 = getelementptr float, float* %36, i64 %1172
  %1178 = bitcast float* %1176 to <4 x float>*
  %1179 = load <4 x float>, <4 x float>* %1178, align 4, !alias.scope !101, !noalias !104
  %1180 = getelementptr float, float* %1176, i64 4
  %1181 = bitcast float* %1180 to <4 x float>*
  %1182 = load <4 x float>, <4 x float>* %1181, align 4, !alias.scope !101, !noalias !104
  %1183 = bitcast float* %1177 to <4 x float>*
  %1184 = load <4 x float>, <4 x float>* %1183, align 4, !alias.scope !107, !noalias !108
  %1185 = getelementptr float, float* %1177, i64 4
  %1186 = bitcast float* %1185 to <4 x float>*
  %1187 = load <4 x float>, <4 x float>* %1186, align 4, !alias.scope !107, !noalias !108
  %1188 = fmul <4 x float> %1179, %1184
  %1189 = fmul <4 x float> %1182, %1187
  %1190 = bitcast float* %1175 to <4 x float>*
  %1191 = load <4 x float>, <4 x float>* %1190, align 4, !alias.scope !109, !noalias !110
  %1192 = getelementptr float, float* %1175, i64 4
  %1193 = bitcast float* %1192 to <4 x float>*
  %1194 = load <4 x float>, <4 x float>* %1193, align 4, !alias.scope !109, !noalias !110
  %1195 = fadd <4 x float> %1191, %1188
  %1196 = fadd <4 x float> %1194, %1189
  %1197 = bitcast float* %1175 to <4 x float>*
  store <4 x float> %1195, <4 x float>* %1197, align 4, !alias.scope !109, !noalias !110
  %1198 = bitcast float* %1192 to <4 x float>*
  store <4 x float> %1196, <4 x float>* %1198, align 4, !alias.scope !109, !noalias !110
  br label %1199

1199:                                             ; preds = %1171, %1174
  %1200 = icmp eq i64 %1101, %1104
  br i1 %1200, label %1221, label %1201

1201:                                             ; preds = %1199, %1097
  %1202 = phi i32 [ 0, %1097 ], [ %1105, %1199 ]
  %1203 = phi float* [ %35, %1097 ], [ %1106, %1199 ]
  %1204 = phi float* [ %38, %1097 ], [ %1107, %1199 ]
  %1205 = phi float* [ %36, %1097 ], [ %1108, %1199 ]
  br label %1206

1206:                                             ; preds = %1201, %1206
  %1207 = phi i32 [ %1219, %1206 ], [ %1202, %1201 ]
  %1208 = phi float* [ %1216, %1206 ], [ %1203, %1201 ]
  %1209 = phi float* [ %1211, %1206 ], [ %1204, %1201 ]
  %1210 = phi float* [ %1213, %1206 ], [ %1205, %1201 ]
  %1211 = getelementptr inbounds float, float* %1209, i64 1
  %1212 = load float, float* %1209, align 4, !alias.scope !101, !noalias !104
  %1213 = getelementptr inbounds float, float* %1210, i64 1
  %1214 = load float, float* %1210, align 4, !alias.scope !107, !noalias !108
  %1215 = fmul float %1212, %1214
  %1216 = getelementptr inbounds float, float* %1208, i64 1
  %1217 = load float, float* %1208, align 4, !alias.scope !109, !noalias !110
  %1218 = fadd float %1217, %1215
  store float %1218, float* %1208, align 4, !alias.scope !109, !noalias !110
  %1219 = add nuw nsw i32 %1207, 1
  %1220 = icmp eq i32 %1219, %758
  br i1 %1220, label %1221, label %1206, !llvm.loop !112

1221:                                             ; preds = %1206, %1081, %1199, %1074, %1096, %971
  %1222 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %27, i64 0, i32 1
  %1223 = load float, float* %1222, align 4
  %1224 = fcmp ogt float %1223, 0.000000e+00
  br i1 %1224, label %1225, label %1226

1225:                                             ; preds = %1221
  call void @_ZN6tflite12tensor_utils10ClipVectorEPKfifPf(float* %35, i32 %758, float %1223, float* %35) #15
  br label %1226

1226:                                             ; preds = %1225, %1221
  br i1 %515, label %1227, label %1362

1227:                                             ; preds = %1226
  %1228 = icmp sgt i32 %29, 0
  %1229 = sext i32 %29 to i64
  %1230 = add i32 %29, -1
  %1231 = zext i32 %1230 to i64
  %1232 = add nuw nsw i64 %1231, 1
  %1233 = and i64 %1232, 8589934584
  %1234 = add nsw i64 %1233, -8
  %1235 = lshr exact i64 %1234, 3
  %1236 = add nuw nsw i64 %1235, 1
  %1237 = icmp ult i64 %1232, 8
  %1238 = and i64 %1232, 8589934584
  %1239 = trunc i64 %1238 to i32
  %1240 = getelementptr float, float* %16, i64 %1238
  %1241 = and i64 %1236, 1
  %1242 = icmp eq i64 %1234, 0
  %1243 = sub nuw nsw i64 %1236, %1241
  %1244 = icmp eq i64 %1241, 0
  %1245 = icmp eq i64 %1232, %1238
  br label %1246

1246:                                             ; preds = %1357, %1227
  %1247 = phi i32 [ 0, %1227 ], [ %1360, %1357 ]
  %1248 = phi float* [ %39, %1227 ], [ %1358, %1357 ]
  %1249 = phi float* [ %35, %1227 ], [ %1359, %1357 ]
  br i1 %1228, label %1250, label %1357

1250:                                             ; preds = %1246
  br i1 %1237, label %1337, label %1251

1251:                                             ; preds = %1250
  %1252 = getelementptr float, float* %1248, i64 %1238
  %1253 = getelementptr float, float* %1249, i64 %1238
  br i1 %1242, label %1309, label %1254

1254:                                             ; preds = %1251, %1254
  %1255 = phi i64 [ %1306, %1254 ], [ 0, %1251 ]
  %1256 = phi i64 [ %1307, %1254 ], [ %1243, %1251 ]
  %1257 = getelementptr float, float* %1248, i64 %1255
  %1258 = getelementptr float, float* %16, i64 %1255
  %1259 = getelementptr float, float* %1249, i64 %1255
  %1260 = bitcast float* %1258 to <4 x float>*
  %1261 = load <4 x float>, <4 x float>* %1260, align 4, !alias.scope !113, !noalias !116
  %1262 = getelementptr float, float* %1258, i64 4
  %1263 = bitcast float* %1262 to <4 x float>*
  %1264 = load <4 x float>, <4 x float>* %1263, align 4, !alias.scope !113, !noalias !116
  %1265 = bitcast float* %1259 to <4 x float>*
  %1266 = load <4 x float>, <4 x float>* %1265, align 4, !alias.scope !119, !noalias !120
  %1267 = getelementptr float, float* %1259, i64 4
  %1268 = bitcast float* %1267 to <4 x float>*
  %1269 = load <4 x float>, <4 x float>* %1268, align 4, !alias.scope !119, !noalias !120
  %1270 = fmul <4 x float> %1261, %1266
  %1271 = fmul <4 x float> %1264, %1269
  %1272 = bitcast float* %1257 to <4 x float>*
  %1273 = load <4 x float>, <4 x float>* %1272, align 4, !alias.scope !121, !noalias !122
  %1274 = getelementptr float, float* %1257, i64 4
  %1275 = bitcast float* %1274 to <4 x float>*
  %1276 = load <4 x float>, <4 x float>* %1275, align 4, !alias.scope !121, !noalias !122
  %1277 = fadd <4 x float> %1273, %1270
  %1278 = fadd <4 x float> %1276, %1271
  %1279 = bitcast float* %1257 to <4 x float>*
  store <4 x float> %1277, <4 x float>* %1279, align 4, !alias.scope !121, !noalias !122
  %1280 = bitcast float* %1274 to <4 x float>*
  store <4 x float> %1278, <4 x float>* %1280, align 4, !alias.scope !121, !noalias !122
  %1281 = or i64 %1255, 8
  %1282 = getelementptr float, float* %1248, i64 %1281
  %1283 = getelementptr float, float* %16, i64 %1281
  %1284 = getelementptr float, float* %1249, i64 %1281
  %1285 = bitcast float* %1283 to <4 x float>*
  %1286 = load <4 x float>, <4 x float>* %1285, align 4, !alias.scope !113, !noalias !116
  %1287 = getelementptr float, float* %1283, i64 4
  %1288 = bitcast float* %1287 to <4 x float>*
  %1289 = load <4 x float>, <4 x float>* %1288, align 4, !alias.scope !113, !noalias !116
  %1290 = bitcast float* %1284 to <4 x float>*
  %1291 = load <4 x float>, <4 x float>* %1290, align 4, !alias.scope !119, !noalias !120
  %1292 = getelementptr float, float* %1284, i64 4
  %1293 = bitcast float* %1292 to <4 x float>*
  %1294 = load <4 x float>, <4 x float>* %1293, align 4, !alias.scope !119, !noalias !120
  %1295 = fmul <4 x float> %1286, %1291
  %1296 = fmul <4 x float> %1289, %1294
  %1297 = bitcast float* %1282 to <4 x float>*
  %1298 = load <4 x float>, <4 x float>* %1297, align 4, !alias.scope !121, !noalias !122
  %1299 = getelementptr float, float* %1282, i64 4
  %1300 = bitcast float* %1299 to <4 x float>*
  %1301 = load <4 x float>, <4 x float>* %1300, align 4, !alias.scope !121, !noalias !122
  %1302 = fadd <4 x float> %1298, %1295
  %1303 = fadd <4 x float> %1301, %1296
  %1304 = bitcast float* %1282 to <4 x float>*
  store <4 x float> %1302, <4 x float>* %1304, align 4, !alias.scope !121, !noalias !122
  %1305 = bitcast float* %1299 to <4 x float>*
  store <4 x float> %1303, <4 x float>* %1305, align 4, !alias.scope !121, !noalias !122
  %1306 = add i64 %1255, 16
  %1307 = add i64 %1256, -2
  %1308 = icmp eq i64 %1307, 0
  br i1 %1308, label %1309, label %1254, !llvm.loop !123

1309:                                             ; preds = %1254, %1251
  %1310 = phi i64 [ 0, %1251 ], [ %1306, %1254 ]
  br i1 %1244, label %1336, label %1311

1311:                                             ; preds = %1309
  %1312 = getelementptr float, float* %1248, i64 %1310
  %1313 = getelementptr float, float* %16, i64 %1310
  %1314 = getelementptr float, float* %1249, i64 %1310
  %1315 = bitcast float* %1313 to <4 x float>*
  %1316 = load <4 x float>, <4 x float>* %1315, align 4, !alias.scope !113, !noalias !116
  %1317 = getelementptr float, float* %1313, i64 4
  %1318 = bitcast float* %1317 to <4 x float>*
  %1319 = load <4 x float>, <4 x float>* %1318, align 4, !alias.scope !113, !noalias !116
  %1320 = bitcast float* %1314 to <4 x float>*
  %1321 = load <4 x float>, <4 x float>* %1320, align 4, !alias.scope !119, !noalias !120
  %1322 = getelementptr float, float* %1314, i64 4
  %1323 = bitcast float* %1322 to <4 x float>*
  %1324 = load <4 x float>, <4 x float>* %1323, align 4, !alias.scope !119, !noalias !120
  %1325 = fmul <4 x float> %1316, %1321
  %1326 = fmul <4 x float> %1319, %1324
  %1327 = bitcast float* %1312 to <4 x float>*
  %1328 = load <4 x float>, <4 x float>* %1327, align 4, !alias.scope !121, !noalias !122
  %1329 = getelementptr float, float* %1312, i64 4
  %1330 = bitcast float* %1329 to <4 x float>*
  %1331 = load <4 x float>, <4 x float>* %1330, align 4, !alias.scope !121, !noalias !122
  %1332 = fadd <4 x float> %1328, %1325
  %1333 = fadd <4 x float> %1331, %1326
  %1334 = bitcast float* %1312 to <4 x float>*
  store <4 x float> %1332, <4 x float>* %1334, align 4, !alias.scope !121, !noalias !122
  %1335 = bitcast float* %1329 to <4 x float>*
  store <4 x float> %1333, <4 x float>* %1335, align 4, !alias.scope !121, !noalias !122
  br label %1336

1336:                                             ; preds = %1309, %1311
  br i1 %1245, label %1357, label %1337

1337:                                             ; preds = %1336, %1250
  %1338 = phi i32 [ 0, %1250 ], [ %1239, %1336 ]
  %1339 = phi float* [ %1248, %1250 ], [ %1252, %1336 ]
  %1340 = phi float* [ %16, %1250 ], [ %1240, %1336 ]
  %1341 = phi float* [ %1249, %1250 ], [ %1253, %1336 ]
  br label %1342

1342:                                             ; preds = %1337, %1342
  %1343 = phi i32 [ %1355, %1342 ], [ %1338, %1337 ]
  %1344 = phi float* [ %1352, %1342 ], [ %1339, %1337 ]
  %1345 = phi float* [ %1347, %1342 ], [ %1340, %1337 ]
  %1346 = phi float* [ %1349, %1342 ], [ %1341, %1337 ]
  %1347 = getelementptr inbounds float, float* %1345, i64 1
  %1348 = load float, float* %1345, align 4, !alias.scope !113, !noalias !116
  %1349 = getelementptr inbounds float, float* %1346, i64 1
  %1350 = load float, float* %1346, align 4, !alias.scope !119, !noalias !120
  %1351 = fmul float %1348, %1350
  %1352 = getelementptr inbounds float, float* %1344, i64 1
  %1353 = load float, float* %1344, align 4, !alias.scope !121, !noalias !122
  %1354 = fadd float %1353, %1351
  store float %1354, float* %1344, align 4, !alias.scope !121, !noalias !122
  %1355 = add nuw nsw i32 %1343, 1
  %1356 = icmp eq i32 %1355, %29
  br i1 %1356, label %1357, label %1342, !llvm.loop !124

1357:                                             ; preds = %1342, %1336, %1246
  %1358 = getelementptr inbounds float, float* %1248, i64 %1229
  %1359 = getelementptr inbounds float, float* %1249, i64 %1229
  %1360 = add nuw nsw i32 %1247, 1
  %1361 = icmp eq i32 %1360, %28
  br i1 %1361, label %1362, label %1246

1362:                                             ; preds = %1357, %1226
  br i1 %58, label %1363, label %1468

1363:                                             ; preds = %1362
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %39, float* %39, i32 %29, i32 %28) #15
  br i1 %514, label %1364, label %1467

1364:                                             ; preds = %1363
  %1365 = icmp sgt i32 %29, 0
  %1366 = sext i32 %29 to i64
  %1367 = add i32 %29, -1
  %1368 = zext i32 %1367 to i64
  %1369 = add nuw nsw i64 %1368, 1
  %1370 = and i64 %1369, 8589934584
  %1371 = add nsw i64 %1370, -8
  %1372 = lshr exact i64 %1371, 3
  %1373 = add nuw nsw i64 %1372, 1
  %1374 = icmp ult i64 %1369, 8
  %1375 = and i64 %1369, 8589934584
  %1376 = trunc i64 %1375 to i32
  %1377 = getelementptr float, float* %20, i64 %1375
  %1378 = and i64 %1373, 1
  %1379 = icmp eq i64 %1371, 0
  %1380 = sub nuw nsw i64 %1373, %1378
  %1381 = icmp eq i64 %1378, 0
  %1382 = icmp eq i64 %1369, %1375
  br label %1383

1383:                                             ; preds = %1463, %1364
  %1384 = phi i32 [ 0, %1364 ], [ %1465, %1463 ]
  %1385 = phi float* [ %39, %1364 ], [ %1464, %1463 ]
  br i1 %1365, label %1386, label %1463

1386:                                             ; preds = %1383
  br i1 %1374, label %1448, label %1387

1387:                                             ; preds = %1386
  %1388 = getelementptr float, float* %1385, i64 %1375
  br i1 %1379, label %1428, label %1389

1389:                                             ; preds = %1387, %1389
  %1390 = phi i64 [ %1425, %1389 ], [ 0, %1387 ]
  %1391 = phi i64 [ %1426, %1389 ], [ %1380, %1387 ]
  %1392 = getelementptr float, float* %1385, i64 %1390
  %1393 = getelementptr float, float* %20, i64 %1390
  %1394 = bitcast float* %1393 to <4 x float>*
  %1395 = load <4 x float>, <4 x float>* %1394, align 4, !alias.scope !125, !noalias !128
  %1396 = getelementptr float, float* %1393, i64 4
  %1397 = bitcast float* %1396 to <4 x float>*
  %1398 = load <4 x float>, <4 x float>* %1397, align 4, !alias.scope !125, !noalias !128
  %1399 = bitcast float* %1392 to <4 x float>*
  %1400 = load <4 x float>, <4 x float>* %1399, align 4, !alias.scope !131, !noalias !132
  %1401 = getelementptr float, float* %1392, i64 4
  %1402 = bitcast float* %1401 to <4 x float>*
  %1403 = load <4 x float>, <4 x float>* %1402, align 4, !alias.scope !131, !noalias !132
  %1404 = fmul <4 x float> %1395, %1400
  %1405 = fmul <4 x float> %1398, %1403
  %1406 = bitcast float* %1392 to <4 x float>*
  store <4 x float> %1404, <4 x float>* %1406, align 4, !alias.scope !133, !noalias !134
  %1407 = bitcast float* %1401 to <4 x float>*
  store <4 x float> %1405, <4 x float>* %1407, align 4, !alias.scope !133, !noalias !134
  %1408 = or i64 %1390, 8
  %1409 = getelementptr float, float* %1385, i64 %1408
  %1410 = getelementptr float, float* %20, i64 %1408
  %1411 = bitcast float* %1410 to <4 x float>*
  %1412 = load <4 x float>, <4 x float>* %1411, align 4, !alias.scope !125, !noalias !128
  %1413 = getelementptr float, float* %1410, i64 4
  %1414 = bitcast float* %1413 to <4 x float>*
  %1415 = load <4 x float>, <4 x float>* %1414, align 4, !alias.scope !125, !noalias !128
  %1416 = bitcast float* %1409 to <4 x float>*
  %1417 = load <4 x float>, <4 x float>* %1416, align 4, !alias.scope !131, !noalias !132
  %1418 = getelementptr float, float* %1409, i64 4
  %1419 = bitcast float* %1418 to <4 x float>*
  %1420 = load <4 x float>, <4 x float>* %1419, align 4, !alias.scope !131, !noalias !132
  %1421 = fmul <4 x float> %1412, %1417
  %1422 = fmul <4 x float> %1415, %1420
  %1423 = bitcast float* %1409 to <4 x float>*
  store <4 x float> %1421, <4 x float>* %1423, align 4, !alias.scope !133, !noalias !134
  %1424 = bitcast float* %1418 to <4 x float>*
  store <4 x float> %1422, <4 x float>* %1424, align 4, !alias.scope !133, !noalias !134
  %1425 = add i64 %1390, 16
  %1426 = add i64 %1391, -2
  %1427 = icmp eq i64 %1426, 0
  br i1 %1427, label %1428, label %1389, !llvm.loop !135

1428:                                             ; preds = %1389, %1387
  %1429 = phi i64 [ 0, %1387 ], [ %1425, %1389 ]
  br i1 %1381, label %1447, label %1430

1430:                                             ; preds = %1428
  %1431 = getelementptr float, float* %1385, i64 %1429
  %1432 = getelementptr float, float* %20, i64 %1429
  %1433 = bitcast float* %1432 to <4 x float>*
  %1434 = load <4 x float>, <4 x float>* %1433, align 4, !alias.scope !125, !noalias !128
  %1435 = getelementptr float, float* %1432, i64 4
  %1436 = bitcast float* %1435 to <4 x float>*
  %1437 = load <4 x float>, <4 x float>* %1436, align 4, !alias.scope !125, !noalias !128
  %1438 = bitcast float* %1431 to <4 x float>*
  %1439 = load <4 x float>, <4 x float>* %1438, align 4, !alias.scope !131, !noalias !132
  %1440 = getelementptr float, float* %1431, i64 4
  %1441 = bitcast float* %1440 to <4 x float>*
  %1442 = load <4 x float>, <4 x float>* %1441, align 4, !alias.scope !131, !noalias !132
  %1443 = fmul <4 x float> %1434, %1439
  %1444 = fmul <4 x float> %1437, %1442
  %1445 = bitcast float* %1431 to <4 x float>*
  store <4 x float> %1443, <4 x float>* %1445, align 4, !alias.scope !133, !noalias !134
  %1446 = bitcast float* %1440 to <4 x float>*
  store <4 x float> %1444, <4 x float>* %1446, align 4, !alias.scope !133, !noalias !134
  br label %1447

1447:                                             ; preds = %1428, %1430
  br i1 %1382, label %1463, label %1448

1448:                                             ; preds = %1447, %1386
  %1449 = phi i32 [ 0, %1386 ], [ %1376, %1447 ]
  %1450 = phi float* [ %1385, %1386 ], [ %1388, %1447 ]
  %1451 = phi float* [ %20, %1386 ], [ %1377, %1447 ]
  br label %1452

1452:                                             ; preds = %1448, %1452
  %1453 = phi i32 [ %1461, %1452 ], [ %1449, %1448 ]
  %1454 = phi float* [ %1458, %1452 ], [ %1450, %1448 ]
  %1455 = phi float* [ %1456, %1452 ], [ %1451, %1448 ]
  %1456 = getelementptr inbounds float, float* %1455, i64 1
  %1457 = load float, float* %1455, align 4, !alias.scope !125, !noalias !128
  %1458 = getelementptr inbounds float, float* %1454, i64 1
  %1459 = load float, float* %1454, align 4, !alias.scope !131, !noalias !132
  %1460 = fmul float %1457, %1459
  store float %1460, float* %1454, align 4, !alias.scope !133, !noalias !134
  %1461 = add nuw nsw i32 %1453, 1
  %1462 = icmp eq i32 %1461, %29
  br i1 %1462, label %1463, label %1452, !llvm.loop !136

1463:                                             ; preds = %1452, %1447, %1383
  %1464 = getelementptr inbounds float, float* %1385, i64 %1366
  %1465 = add nuw nsw i32 %1384, 1
  %1466 = icmp eq i32 %1465, %28
  br i1 %1466, label %1467, label %1383

1467:                                             ; preds = %1463, %1363
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %24, i32 %29, i32 %28, float* %39) #15
  br label %1468

1468:                                             ; preds = %1467, %1362
  %1469 = bitcast %"class.Eigen::CwiseUnaryOp"* %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1469) #15, !noalias !137
  %1470 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %39, float** %1470, align 8, !noalias !137
  %1471 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %759, i64* %1471, align 8, !noalias !137
  %1472 = bitcast %"class.Eigen::ArrayWrapper"* %55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1472) #15, !noalias !137
  %1473 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %55, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %39, float** %1473, align 8, !noalias !137
  %1474 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %55, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %759, i64* %1474, align 8, !noalias !137
  %1475 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %53, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1475) #15, !noalias !137
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %55, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %54, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %53) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1475) #15, !noalias !137
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1472) #15, !noalias !137
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1469) #15, !noalias !137
  %1476 = load i32, i32* %969, align 4
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %35, i32 %758, i32 %1476, float* %38)
  br i1 %767, label %1477, label %1619

1477:                                             ; preds = %1468
  %1478 = mul i32 %29, %28
  %1479 = add i32 %1478, -1
  %1480 = zext i32 %1479 to i64
  %1481 = add nuw nsw i64 %1480, 1
  %1482 = icmp ult i64 %1481, 8
  br i1 %1482, label %1566, label %1483

1483:                                             ; preds = %1477
  %1484 = mul i32 %29, %28
  %1485 = add i32 %1484, -1
  %1486 = zext i32 %1485 to i64
  %1487 = add nuw nsw i64 %1486, 1
  %1488 = getelementptr float, float* %39, i64 %1487
  %1489 = getelementptr float, float* %38, i64 %1487
  %1490 = icmp ugt float* %1489, %39
  %1491 = icmp ugt float* %1488, %38
  %1492 = and i1 %1490, %1491
  br i1 %1492, label %1566, label %1493

1493:                                             ; preds = %1483
  %1494 = and i64 %1481, 8589934584
  %1495 = trunc i64 %1494 to i32
  %1496 = getelementptr float, float* %39, i64 %1494
  %1497 = getelementptr float, float* %38, i64 %1494
  %1498 = add nsw i64 %1494, -8
  %1499 = lshr exact i64 %1498, 3
  %1500 = add nuw nsw i64 %1499, 1
  %1501 = and i64 %1500, 1
  %1502 = icmp eq i64 %1498, 0
  br i1 %1502, label %1544, label %1503

1503:                                             ; preds = %1493
  %1504 = sub nuw nsw i64 %1500, %1501
  br label %1505

1505:                                             ; preds = %1505, %1503
  %1506 = phi i64 [ 0, %1503 ], [ %1541, %1505 ]
  %1507 = phi i64 [ %1504, %1503 ], [ %1542, %1505 ]
  %1508 = getelementptr float, float* %39, i64 %1506
  %1509 = getelementptr float, float* %38, i64 %1506
  %1510 = bitcast float* %1508 to <4 x float>*
  %1511 = load <4 x float>, <4 x float>* %1510, align 4, !alias.scope !141, !noalias !146
  %1512 = getelementptr float, float* %1508, i64 4
  %1513 = bitcast float* %1512 to <4 x float>*
  %1514 = load <4 x float>, <4 x float>* %1513, align 4, !alias.scope !141, !noalias !146
  %1515 = bitcast float* %1509 to <4 x float>*
  %1516 = load <4 x float>, <4 x float>* %1515, align 4, !alias.scope !150, !noalias !151
  %1517 = getelementptr float, float* %1509, i64 4
  %1518 = bitcast float* %1517 to <4 x float>*
  %1519 = load <4 x float>, <4 x float>* %1518, align 4, !alias.scope !150, !noalias !151
  %1520 = fmul <4 x float> %1511, %1516
  %1521 = fmul <4 x float> %1514, %1519
  %1522 = bitcast float* %1508 to <4 x float>*
  store <4 x float> %1520, <4 x float>* %1522, align 4, !alias.scope !152, !noalias !153
  %1523 = bitcast float* %1512 to <4 x float>*
  store <4 x float> %1521, <4 x float>* %1523, align 4, !alias.scope !152, !noalias !153
  %1524 = or i64 %1506, 8
  %1525 = getelementptr float, float* %39, i64 %1524
  %1526 = getelementptr float, float* %38, i64 %1524
  %1527 = bitcast float* %1525 to <4 x float>*
  %1528 = load <4 x float>, <4 x float>* %1527, align 4, !alias.scope !141, !noalias !146
  %1529 = getelementptr float, float* %1525, i64 4
  %1530 = bitcast float* %1529 to <4 x float>*
  %1531 = load <4 x float>, <4 x float>* %1530, align 4, !alias.scope !141, !noalias !146
  %1532 = bitcast float* %1526 to <4 x float>*
  %1533 = load <4 x float>, <4 x float>* %1532, align 4, !alias.scope !150, !noalias !151
  %1534 = getelementptr float, float* %1526, i64 4
  %1535 = bitcast float* %1534 to <4 x float>*
  %1536 = load <4 x float>, <4 x float>* %1535, align 4, !alias.scope !150, !noalias !151
  %1537 = fmul <4 x float> %1528, %1533
  %1538 = fmul <4 x float> %1531, %1536
  %1539 = bitcast float* %1525 to <4 x float>*
  store <4 x float> %1537, <4 x float>* %1539, align 4, !alias.scope !152, !noalias !153
  %1540 = bitcast float* %1529 to <4 x float>*
  store <4 x float> %1538, <4 x float>* %1540, align 4, !alias.scope !152, !noalias !153
  %1541 = add i64 %1506, 16
  %1542 = add i64 %1507, -2
  %1543 = icmp eq i64 %1542, 0
  br i1 %1543, label %1544, label %1505, !llvm.loop !154

1544:                                             ; preds = %1505, %1493
  %1545 = phi i64 [ 0, %1493 ], [ %1541, %1505 ]
  %1546 = icmp eq i64 %1501, 0
  br i1 %1546, label %1564, label %1547

1547:                                             ; preds = %1544
  %1548 = getelementptr float, float* %39, i64 %1545
  %1549 = getelementptr float, float* %38, i64 %1545
  %1550 = bitcast float* %1548 to <4 x float>*
  %1551 = load <4 x float>, <4 x float>* %1550, align 4, !alias.scope !141, !noalias !146
  %1552 = getelementptr float, float* %1548, i64 4
  %1553 = bitcast float* %1552 to <4 x float>*
  %1554 = load <4 x float>, <4 x float>* %1553, align 4, !alias.scope !141, !noalias !146
  %1555 = bitcast float* %1549 to <4 x float>*
  %1556 = load <4 x float>, <4 x float>* %1555, align 4, !alias.scope !150, !noalias !151
  %1557 = getelementptr float, float* %1549, i64 4
  %1558 = bitcast float* %1557 to <4 x float>*
  %1559 = load <4 x float>, <4 x float>* %1558, align 4, !alias.scope !150, !noalias !151
  %1560 = fmul <4 x float> %1551, %1556
  %1561 = fmul <4 x float> %1554, %1559
  %1562 = bitcast float* %1548 to <4 x float>*
  store <4 x float> %1560, <4 x float>* %1562, align 4, !alias.scope !152, !noalias !153
  %1563 = bitcast float* %1552 to <4 x float>*
  store <4 x float> %1561, <4 x float>* %1563, align 4, !alias.scope !152, !noalias !153
  br label %1564

1564:                                             ; preds = %1544, %1547
  %1565 = icmp eq i64 %1481, %1494
  br i1 %1565, label %1619, label %1566

1566:                                             ; preds = %1564, %1483, %1477
  %1567 = phi i32 [ 0, %1483 ], [ 0, %1477 ], [ %1495, %1564 ]
  %1568 = phi float* [ %39, %1483 ], [ %39, %1477 ], [ %1496, %1564 ]
  %1569 = phi float* [ %38, %1483 ], [ %38, %1477 ], [ %1497, %1564 ]
  %1570 = sub i32 %1478, %1567
  %1571 = xor i32 %1567, -1
  %1572 = add i32 %1478, %1571
  %1573 = and i32 %1570, 3
  %1574 = icmp eq i32 %1573, 0
  br i1 %1574, label %1588, label %1575

1575:                                             ; preds = %1566, %1575
  %1576 = phi i32 [ %1585, %1575 ], [ %1567, %1566 ]
  %1577 = phi float* [ %1580, %1575 ], [ %1568, %1566 ]
  %1578 = phi float* [ %1582, %1575 ], [ %1569, %1566 ]
  %1579 = phi i32 [ %1586, %1575 ], [ %1573, %1566 ]
  %1580 = getelementptr inbounds float, float* %1577, i64 1
  %1581 = load float, float* %1577, align 4, !alias.scope !155, !noalias !156
  %1582 = getelementptr inbounds float, float* %1578, i64 1
  %1583 = load float, float* %1578, align 4, !alias.scope !157, !noalias !151
  %1584 = fmul float %1581, %1583
  store float %1584, float* %1577, align 4, !alias.scope !158, !noalias !159
  %1585 = add nuw nsw i32 %1576, 1
  %1586 = add i32 %1579, -1
  %1587 = icmp eq i32 %1586, 0
  br i1 %1587, label %1588, label %1575, !llvm.loop !160

1588:                                             ; preds = %1575, %1566
  %1589 = phi i32 [ %1567, %1566 ], [ %1585, %1575 ]
  %1590 = phi float* [ %1568, %1566 ], [ %1580, %1575 ]
  %1591 = phi float* [ %1569, %1566 ], [ %1582, %1575 ]
  %1592 = icmp ult i32 %1572, 3
  br i1 %1592, label %1619, label %1593

1593:                                             ; preds = %1588, %1593
  %1594 = phi i32 [ %1617, %1593 ], [ %1589, %1588 ]
  %1595 = phi float* [ %1612, %1593 ], [ %1590, %1588 ]
  %1596 = phi float* [ %1614, %1593 ], [ %1591, %1588 ]
  %1597 = getelementptr inbounds float, float* %1595, i64 1
  %1598 = load float, float* %1595, align 4, !alias.scope !155, !noalias !156
  %1599 = getelementptr inbounds float, float* %1596, i64 1
  %1600 = load float, float* %1596, align 4, !alias.scope !157, !noalias !151
  %1601 = fmul float %1598, %1600
  store float %1601, float* %1595, align 4, !alias.scope !158, !noalias !159
  %1602 = getelementptr inbounds float, float* %1595, i64 2
  %1603 = load float, float* %1597, align 4, !alias.scope !155, !noalias !156
  %1604 = getelementptr inbounds float, float* %1596, i64 2
  %1605 = load float, float* %1599, align 4, !alias.scope !157, !noalias !151
  %1606 = fmul float %1603, %1605
  store float %1606, float* %1597, align 4, !alias.scope !158, !noalias !159
  %1607 = getelementptr inbounds float, float* %1595, i64 3
  %1608 = load float, float* %1602, align 4, !alias.scope !155, !noalias !156
  %1609 = getelementptr inbounds float, float* %1596, i64 3
  %1610 = load float, float* %1604, align 4, !alias.scope !157, !noalias !151
  %1611 = fmul float %1608, %1610
  store float %1611, float* %1602, align 4, !alias.scope !158, !noalias !159
  %1612 = getelementptr inbounds float, float* %1595, i64 4
  %1613 = load float, float* %1607, align 4, !alias.scope !155, !noalias !156
  %1614 = getelementptr inbounds float, float* %1596, i64 4
  %1615 = load float, float* %1609, align 4, !alias.scope !157, !noalias !151
  %1616 = fmul float %1613, %1615
  store float %1616, float* %1607, align 4, !alias.scope !158, !noalias !159
  %1617 = add nuw nsw i32 %1594, 4
  %1618 = icmp eq i32 %1617, %758
  br i1 %1618, label %1619, label %1593, !llvm.loop !161

1619:                                             ; preds = %1588, %1593, %1564, %1468
  %1620 = icmp eq float* %25, null
  br i1 %1620, label %1680, label %1621

1621:                                             ; preds = %1619
  %1622 = icmp eq float* %26, null
  br i1 %1622, label %1654, label %1623

1623:                                             ; preds = %1621
  br i1 %514, label %1624, label %1674

1624:                                             ; preds = %1623
  %1625 = icmp eq i32 %32, 0
  %1626 = sext i32 %32 to i64
  %1627 = shl nuw nsw i64 %1626, 2
  %1628 = bitcast float* %26 to i8*
  %1629 = zext i32 %28 to i64
  %1630 = add nsw i64 %1629, -1
  %1631 = and i64 %1629, 3
  %1632 = icmp ult i64 %1630, 3
  br i1 %1632, label %1660, label %1633

1633:                                             ; preds = %1624
  %1634 = sub nsw i64 %1629, %1631
  br label %1635

1635:                                             ; preds = %1757, %1633
  %1636 = phi i64 [ 0, %1633 ], [ %1758, %1757 ]
  %1637 = phi i64 [ %1634, %1633 ], [ %1759, %1757 ]
  br i1 %1625, label %1757, label %1638

1638:                                             ; preds = %1635
  %1639 = mul nsw i64 %1636, %1626
  %1640 = getelementptr inbounds float, float* %34, i64 %1639
  %1641 = bitcast float* %1640 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1641, i8* nonnull align 4 %1628, i64 %1627, i1 false) #15
  %1642 = or i64 %1636, 1
  %1643 = mul nsw i64 %1642, %1626
  %1644 = getelementptr inbounds float, float* %34, i64 %1643
  %1645 = bitcast float* %1644 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1645, i8* nonnull align 4 %1628, i64 %1627, i1 false) #15
  %1646 = or i64 %1636, 2
  %1647 = mul nsw i64 %1646, %1626
  %1648 = getelementptr inbounds float, float* %34, i64 %1647
  %1649 = bitcast float* %1648 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1649, i8* nonnull align 4 %1628, i64 %1627, i1 false) #15
  %1650 = or i64 %1636, 3
  %1651 = mul nsw i64 %1650, %1626
  %1652 = getelementptr inbounds float, float* %34, i64 %1651
  %1653 = bitcast float* %1652 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1653, i8* nonnull align 4 %1628, i64 %1627, i1 false) #15
  br label %1757

1654:                                             ; preds = %1621
  %1655 = mul i32 %32, %28
  %1656 = icmp sgt i32 %1655, 0
  br i1 %1656, label %1657, label %1674

1657:                                             ; preds = %1654
  %1658 = zext i32 %1655 to i64
  %1659 = shl nuw nsw i64 %1658, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %42, i8 0, i64 %1659, i1 false)
  br label %1674

1660:                                             ; preds = %1757, %1624
  %1661 = phi i64 [ 0, %1624 ], [ %1758, %1757 ]
  %1662 = icmp eq i64 %1631, 0
  br i1 %1662, label %1674, label %1663

1663:                                             ; preds = %1660, %1670
  %1664 = phi i64 [ %1671, %1670 ], [ %1661, %1660 ]
  %1665 = phi i64 [ %1672, %1670 ], [ %1631, %1660 ]
  br i1 %1625, label %1670, label %1666

1666:                                             ; preds = %1663
  %1667 = mul nsw i64 %1664, %1626
  %1668 = getelementptr inbounds float, float* %34, i64 %1667
  %1669 = bitcast float* %1668 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1669, i8* nonnull align 4 %1628, i64 %1627, i1 false) #15
  br label %1670

1670:                                             ; preds = %1666, %1663
  %1671 = add nuw nsw i64 %1664, 1
  %1672 = add i64 %1665, -1
  %1673 = icmp eq i64 %1672, 0
  br i1 %1673, label %1674, label %1663, !llvm.loop !162

1674:                                             ; preds = %1660, %1670, %1657, %1654, %1623
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* nonnull %25, i32 %32, i32 %29, float* %39, i32 %28, float* %34) #15
  %1675 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %27, i64 0, i32 2
  %1676 = load float, float* %1675, align 4
  %1677 = fcmp ogt float %1676, 0.000000e+00
  br i1 %1677, label %1678, label %1686

1678:                                             ; preds = %1674
  %1679 = mul nsw i32 %32, %28
  call void @_ZN6tflite12tensor_utils10ClipVectorEPKfifPf(float* %34, i32 %1679, float %1676, float* %34) #15
  br label %1686

1680:                                             ; preds = %1619
  %1681 = mul nsw i32 %32, %28
  %1682 = icmp eq i32 %1681, 0
  br i1 %1682, label %1686, label %1683

1683:                                             ; preds = %1680
  %1684 = sext i32 %1681 to i64
  %1685 = shl nuw nsw i64 %1684, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %43, i64 %1685, i1 false) #15
  br label %1686

1686:                                             ; preds = %1683, %1680, %1674, %1678
  br i1 %514, label %1687, label %1715

1687:                                             ; preds = %1686
  %1688 = icmp eq i32 %32, 0
  %1689 = sext i32 %32 to i64
  %1690 = shl nuw nsw i64 %1689, 2
  %1691 = sext i32 %33 to i64
  %1692 = zext i32 %28 to i64
  %1693 = add nsw i64 %1692, -1
  %1694 = and i64 %1692, 3
  %1695 = icmp ult i64 %1693, 3
  br i1 %1695, label %1698, label %1696

1696:                                             ; preds = %1687
  %1697 = sub nsw i64 %1692, %1694
  br label %1716

1698:                                             ; preds = %1753, %1687
  %1699 = phi i64 [ 0, %1687 ], [ %1754, %1753 ]
  %1700 = icmp eq i64 %1694, 0
  br i1 %1700, label %1715, label %1701

1701:                                             ; preds = %1698, %1711
  %1702 = phi i64 [ %1712, %1711 ], [ %1699, %1698 ]
  %1703 = phi i64 [ %1713, %1711 ], [ %1694, %1698 ]
  br i1 %1688, label %1711, label %1704

1704:                                             ; preds = %1701
  %1705 = mul nsw i64 %1702, %1691
  %1706 = getelementptr inbounds float, float* %40, i64 %1705
  %1707 = mul nsw i64 %1702, %1689
  %1708 = getelementptr inbounds float, float* %34, i64 %1707
  %1709 = bitcast float* %1706 to i8*
  %1710 = bitcast float* %1708 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1709, i8* align 4 %1710, i64 %1690, i1 false) #15
  br label %1711

1711:                                             ; preds = %1704, %1701
  %1712 = add nuw nsw i64 %1702, 1
  %1713 = add i64 %1703, -1
  %1714 = icmp eq i64 %1713, 0
  br i1 %1714, label %1715, label %1701, !llvm.loop !163

1715:                                             ; preds = %1698, %1711, %1686
  ret void

1716:                                             ; preds = %1753, %1696
  %1717 = phi i64 [ 0, %1696 ], [ %1754, %1753 ]
  %1718 = phi i64 [ %1697, %1696 ], [ %1755, %1753 ]
  br i1 %1688, label %1726, label %1719

1719:                                             ; preds = %1716
  %1720 = mul nsw i64 %1717, %1691
  %1721 = getelementptr inbounds float, float* %40, i64 %1720
  %1722 = mul nsw i64 %1717, %1689
  %1723 = getelementptr inbounds float, float* %34, i64 %1722
  %1724 = bitcast float* %1721 to i8*
  %1725 = bitcast float* %1723 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1724, i8* align 4 %1725, i64 %1690, i1 false) #15
  br label %1726

1726:                                             ; preds = %1716, %1719
  %1727 = or i64 %1717, 1
  br i1 %1688, label %1735, label %1728

1728:                                             ; preds = %1726
  %1729 = mul nsw i64 %1727, %1691
  %1730 = getelementptr inbounds float, float* %40, i64 %1729
  %1731 = mul nsw i64 %1727, %1689
  %1732 = getelementptr inbounds float, float* %34, i64 %1731
  %1733 = bitcast float* %1730 to i8*
  %1734 = bitcast float* %1732 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1733, i8* align 4 %1734, i64 %1690, i1 false) #15
  br label %1735

1735:                                             ; preds = %1728, %1726
  %1736 = or i64 %1717, 2
  br i1 %1688, label %1744, label %1737

1737:                                             ; preds = %1735
  %1738 = mul nsw i64 %1736, %1691
  %1739 = getelementptr inbounds float, float* %40, i64 %1738
  %1740 = mul nsw i64 %1736, %1689
  %1741 = getelementptr inbounds float, float* %34, i64 %1740
  %1742 = bitcast float* %1739 to i8*
  %1743 = bitcast float* %1741 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1742, i8* align 4 %1743, i64 %1690, i1 false) #15
  br label %1744

1744:                                             ; preds = %1737, %1735
  %1745 = or i64 %1717, 3
  br i1 %1688, label %1753, label %1746

1746:                                             ; preds = %1744
  %1747 = mul nsw i64 %1745, %1691
  %1748 = getelementptr inbounds float, float* %40, i64 %1747
  %1749 = mul nsw i64 %1745, %1689
  %1750 = getelementptr inbounds float, float* %34, i64 %1749
  %1751 = bitcast float* %1748 to i8*
  %1752 = bitcast float* %1750 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1751, i8* align 4 %1752, i64 %1690, i1 false) #15
  br label %1753

1753:                                             ; preds = %1746, %1744
  %1754 = add nuw nsw i64 %1717, 4
  %1755 = add i64 %1718, -4
  %1756 = icmp eq i64 %1755, 0
  br i1 %1756, label %1698, label %1716

1757:                                             ; preds = %1635, %1638
  %1758 = add nuw nsw i64 %1636, 4
  %1759 = add i64 %1637, -4
  %1760 = icmp eq i64 %1759, 0
  br i1 %1760, label %1660, label %1635

1761:                                             ; preds = %210, %213
  %1762 = add nuw nsw i64 %211, 4
  %1763 = add i64 %212, -4
  %1764 = icmp eq i64 %1763, 0
  br i1 %1764, label %229, label %210

1765:                                             ; preds = %170, %173
  %1766 = add nuw nsw i64 %171, 4
  %1767 = add i64 %172, -4
  %1768 = icmp eq i64 %1767, 0
  br i1 %1768, label %189, label %170

1769:                                             ; preds = %130, %133
  %1770 = add nuw nsw i64 %131, 4
  %1771 = add i64 %132, -4
  %1772 = icmp eq i64 %1771, 0
  br i1 %1772, label %149, label %130

1773:                                             ; preds = %84, %87
  %1774 = add nuw nsw i64 %85, 4
  %1775 = add i64 %86, -4
  %1776 = icmp eq i64 %1775, 0
  br i1 %1776, label %103, label %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin9lstm_eval10EvalHybridEPK12TfLiteTensorS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsbbiPS3_S9_S9_S9_S9_S9_S9_S9_S9_S9_S9_S9_S9_S9_iPbPNS_17CpuBackendContextE(%struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteLSTMParams* nocapture readonly, i1 zeroext, i1 zeroext, i32, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, i32, i8*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #0 {
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %50 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %49, align 8
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, -2
  %54 = icmp eq i32 %53, 2
  br i1 %54, label %60, label %55

55:                                               ; preds = %48
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %57 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %56) #13
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %59 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %58) #13
  tail call void @abort() #14
  unreachable

60:                                               ; preds = %48
  %61 = add nsw i32 %52, -1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 1, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %52, 2
  %66 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 1, i64 0
  br i1 %65, label %72, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 1, i64 1
  %69 = select i1 %29, i32* %66, i32* %68
  %70 = load i32, i32* %69, align 4
  %71 = select i1 %29, i32* %68, i32* %66
  br label %72

72:                                               ; preds = %60, %67
  %73 = phi i32* [ %71, %67 ], [ %66, %60 ]
  %74 = phi i32 [ %70, %67 ], [ 1, %60 ]
  %75 = load i32, i32* %73, align 4
  %76 = icmp ne %struct.TfLiteTensor* %16, null
  br i1 %76, label %77, label %86

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %79 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = add nsw i32 %81, -1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 1, i64 %83
  %85 = load i32, i32* %84, align 4
  br label %86

86:                                               ; preds = %72, %77
  %87 = phi i32 [ %85, %77 ], [ 0, %72 ]
  %88 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %89 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %88, align 8
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %89, i64 0, i32 1, i64 0
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 2
  %93 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %92, align 8
  %94 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %93, i64 0, i32 1, i64 1
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq %struct.TfLiteTensor* %1, null
  %97 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %97, label %102, label %98

98:                                               ; preds = %86
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to float**
  %101 = load float*, float** %100, align 8
  br label %102

102:                                              ; preds = %86, %98
  %103 = phi float* [ %101, %98 ], [ null, %86 ]
  br i1 %96, label %104, label %106

104:                                              ; preds = %102
  %105 = shl nsw i32 %91, 1
  br label %112

106:                                              ; preds = %102
  %107 = mul nsw i32 %91, %75
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %103, i64 %108
  %110 = shl nsw i32 %91, 1
  %111 = mul nsw i32 %91, 3
  br label %112

112:                                              ; preds = %106, %104
  %113 = phi float* [ null, %104 ], [ %103, %106 ]
  %114 = phi float* [ %103, %104 ], [ %109, %106 ]
  %115 = phi i32 [ %91, %104 ], [ %110, %106 ]
  %116 = phi i32 [ %105, %104 ], [ %111, %106 ]
  %117 = mul nsw i32 %116, %75
  %118 = mul nsw i32 %115, %75
  %119 = sext i32 %117 to i64
  %120 = sext i32 %118 to i64
  %121 = getelementptr inbounds float, float* %103, i64 %119
  %122 = getelementptr inbounds float, float* %103, i64 %120
  %123 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %124 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %123, align 8
  %125 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %124, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, -1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %124, i64 0, i32 1, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %27, i64 0, i32 4
  %132 = load i8, i8* %131, align 4, !range !164
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %145, label %134

134:                                              ; preds = %112
  %135 = icmp eq %struct.TfLiteTensor* %43, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %134
  %137 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 1, i32 0
  %138 = load i32*, i32** %137, align 8
  br label %139

139:                                              ; preds = %134, %136
  %140 = phi i32* [ %138, %136 ], [ null, %134 ]
  %141 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %141, label %145, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1, i32 0
  %144 = load i32*, i32** %143, align 8
  br label %145

145:                                              ; preds = %142, %139, %112
  %146 = phi i32* [ null, %112 ], [ %140, %139 ], [ %140, %142 ]
  %147 = phi i32* [ null, %112 ], [ null, %139 ], [ %144, %142 ]
  br i1 %29, label %284, label %148

148:                                              ; preds = %145
  %149 = icmp sgt i32 %75, 0
  br i1 %149, label %150, label %836

150:                                              ; preds = %148
  %151 = icmp sgt i32 %74, 0
  %152 = icmp eq %struct.TfLiteTensor* %0, null
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %154 = bitcast %union.TfLitePtrUnion* %153 to float**
  %155 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %156 = bitcast %union.TfLitePtrUnion* %155 to float**
  %157 = icmp eq %struct.TfLiteTensor* %42, null
  %158 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %159 = bitcast %union.TfLitePtrUnion* %158 to float**
  %160 = sext i32 %30 to i64
  %161 = icmp eq %struct.TfLiteTensor* %39, null
  %162 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 0, i32 1
  %163 = bitcast %union.TfLitePtrUnion* %162 to float**
  %164 = icmp eq %struct.TfLiteTensor* %40, null
  %165 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %166 = bitcast %union.TfLitePtrUnion* %165 to float**
  %167 = icmp eq float* %113, null
  %168 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %169 = bitcast %union.TfLitePtrUnion* %168 to i8**
  %170 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 3, i32 0
  %171 = icmp eq %struct.TfLiteTensor* %2, null
  %172 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %173 = bitcast %union.TfLitePtrUnion* %172 to i8**
  %174 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %175 = icmp eq %struct.TfLiteTensor* %3, null
  %176 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %177 = bitcast %union.TfLitePtrUnion* %176 to i8**
  %178 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 0
  %179 = icmp eq %struct.TfLiteTensor* %4, null
  %180 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %181 = bitcast %union.TfLitePtrUnion* %180 to i8**
  %182 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 3, i32 0
  %183 = icmp eq %struct.TfLiteTensor* %17, null
  %184 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1
  %185 = bitcast %union.TfLitePtrUnion* %184 to i8**
  %186 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 3, i32 0
  %187 = icmp eq %struct.TfLiteTensor* %18, null
  %188 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %189 = bitcast %union.TfLitePtrUnion* %188 to i8**
  %190 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %191 = icmp eq %struct.TfLiteTensor* %19, null
  %192 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %193 = bitcast %union.TfLitePtrUnion* %192 to i8**
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 0
  %195 = icmp eq %struct.TfLiteTensor* %20, null
  %196 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %197 = bitcast %union.TfLitePtrUnion* %196 to i8**
  %198 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 3, i32 0
  %199 = icmp eq %struct.TfLiteTensor* %5, null
  %200 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %201 = bitcast %union.TfLitePtrUnion* %200 to i8**
  %202 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 3, i32 0
  %203 = icmp eq %struct.TfLiteTensor* %6, null
  %204 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %205 = bitcast %union.TfLitePtrUnion* %204 to i8**
  %206 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 3, i32 0
  %207 = icmp eq %struct.TfLiteTensor* %7, null
  %208 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %209 = bitcast %union.TfLitePtrUnion* %208 to i8**
  %210 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 3, i32 0
  %211 = icmp eq %struct.TfLiteTensor* %8, null
  %212 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %213 = bitcast %union.TfLitePtrUnion* %212 to i8**
  %214 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 3, i32 0
  %215 = icmp eq %struct.TfLiteTensor* %9, null
  %216 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 1
  %217 = bitcast %union.TfLitePtrUnion* %216 to i8**
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 3, i32 0
  %219 = icmp eq %struct.TfLiteTensor* %10, null
  %220 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 1
  %221 = bitcast %union.TfLitePtrUnion* %220 to i8**
  %222 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 3, i32 0
  %223 = icmp eq %struct.TfLiteTensor* %11, null
  %224 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 1
  %225 = bitcast %union.TfLitePtrUnion* %224 to i8**
  %226 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 3, i32 0
  %227 = icmp eq %struct.TfLiteTensor* %12, null
  %228 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 0, i32 1
  %229 = bitcast %union.TfLitePtrUnion* %228 to float**
  %230 = icmp eq %struct.TfLiteTensor* %13, null
  %231 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %232 = bitcast %union.TfLitePtrUnion* %231 to float**
  %233 = icmp eq %struct.TfLiteTensor* %14, null
  %234 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %235 = bitcast %union.TfLitePtrUnion* %234 to float**
  %236 = icmp eq %struct.TfLiteTensor* %15, null
  %237 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %238 = bitcast %union.TfLitePtrUnion* %237 to float**
  %239 = icmp eq %struct.TfLiteTensor* %21, null
  %240 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %241 = bitcast %union.TfLitePtrUnion* %240 to float**
  %242 = icmp eq %struct.TfLiteTensor* %22, null
  %243 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %244 = bitcast %union.TfLitePtrUnion* %243 to float**
  %245 = icmp eq %struct.TfLiteTensor* %23, null
  %246 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %247 = bitcast %union.TfLitePtrUnion* %246 to float**
  %248 = icmp eq %struct.TfLiteTensor* %24, null
  %249 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %250 = bitcast %union.TfLitePtrUnion* %249 to float**
  %251 = icmp eq %struct.TfLiteTensor* %25, null
  %252 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %253 = bitcast %union.TfLitePtrUnion* %252 to i8**
  %254 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 3, i32 0
  %255 = icmp eq %struct.TfLiteTensor* %26, null
  %256 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %257 = bitcast %union.TfLitePtrUnion* %256 to float**
  %258 = icmp eq %struct.TfLiteTensor* %32, null
  %259 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %260 = bitcast %union.TfLitePtrUnion* %259 to float**
  %261 = icmp eq %struct.TfLiteTensor* %33, null
  %262 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %263 = bitcast %union.TfLitePtrUnion* %262 to float**
  %264 = icmp eq %struct.TfLiteTensor* %34, null
  %265 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %266 = bitcast %union.TfLitePtrUnion* %265 to float**
  %267 = icmp eq %struct.TfLiteTensor* %35, null
  %268 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %269 = bitcast %union.TfLitePtrUnion* %268 to i8**
  %270 = icmp eq %struct.TfLiteTensor* %36, null
  %271 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 0, i32 1
  %272 = bitcast %union.TfLitePtrUnion* %271 to i8**
  %273 = icmp eq %struct.TfLiteTensor* %37, null
  %274 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %275 = bitcast %union.TfLitePtrUnion* %274 to i8**
  %276 = icmp eq %struct.TfLiteTensor* %38, null
  %277 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 1
  %278 = bitcast %union.TfLitePtrUnion* %277 to i8**
  %279 = icmp eq %struct.TfLiteTensor* %41, null
  %280 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1, i32 0
  %281 = sext i32 %91 to i64
  %282 = sext i32 %130 to i64
  %283 = zext i32 %75 to i64
  br label %617

284:                                              ; preds = %145
  %285 = icmp sgt i32 %74, 0
  br i1 %285, label %286, label %836

286:                                              ; preds = %284
  %287 = icmp eq %struct.TfLiteTensor* %0, null
  %288 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %289 = bitcast %union.TfLitePtrUnion* %288 to float**
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to float**
  %292 = icmp eq %struct.TfLiteTensor* %42, null
  %293 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %294 = bitcast %union.TfLitePtrUnion* %293 to float**
  %295 = sext i32 %30 to i64
  %296 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %297 = bitcast %union.TfLitePtrUnion* %296 to i8**
  %298 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 3, i32 0
  %299 = icmp eq %struct.TfLiteTensor* %2, null
  %300 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %301 = bitcast %union.TfLitePtrUnion* %300 to i8**
  %302 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %303 = icmp eq %struct.TfLiteTensor* %3, null
  %304 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %305 = bitcast %union.TfLitePtrUnion* %304 to i8**
  %306 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 0
  %307 = icmp eq %struct.TfLiteTensor* %4, null
  %308 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %309 = bitcast %union.TfLitePtrUnion* %308 to i8**
  %310 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 3, i32 0
  %311 = icmp eq %struct.TfLiteTensor* %17, null
  %312 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1
  %313 = bitcast %union.TfLitePtrUnion* %312 to i8**
  %314 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 3, i32 0
  %315 = icmp eq %struct.TfLiteTensor* %18, null
  %316 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %317 = bitcast %union.TfLitePtrUnion* %316 to i8**
  %318 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %319 = icmp eq %struct.TfLiteTensor* %19, null
  %320 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %321 = bitcast %union.TfLitePtrUnion* %320 to i8**
  %322 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 0
  %323 = icmp eq %struct.TfLiteTensor* %20, null
  %324 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %325 = bitcast %union.TfLitePtrUnion* %324 to i8**
  %326 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 3, i32 0
  %327 = icmp eq %struct.TfLiteTensor* %5, null
  %328 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %329 = bitcast %union.TfLitePtrUnion* %328 to i8**
  %330 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 3, i32 0
  %331 = icmp eq %struct.TfLiteTensor* %6, null
  %332 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %333 = bitcast %union.TfLitePtrUnion* %332 to i8**
  %334 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 3, i32 0
  %335 = icmp eq %struct.TfLiteTensor* %7, null
  %336 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %337 = bitcast %union.TfLitePtrUnion* %336 to i8**
  %338 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 3, i32 0
  %339 = icmp eq %struct.TfLiteTensor* %8, null
  %340 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %341 = bitcast %union.TfLitePtrUnion* %340 to i8**
  %342 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 3, i32 0
  %343 = icmp eq %struct.TfLiteTensor* %9, null
  %344 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 1
  %345 = bitcast %union.TfLitePtrUnion* %344 to i8**
  %346 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 3, i32 0
  %347 = icmp eq %struct.TfLiteTensor* %10, null
  %348 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 1
  %349 = bitcast %union.TfLitePtrUnion* %348 to i8**
  %350 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 3, i32 0
  %351 = icmp eq %struct.TfLiteTensor* %11, null
  %352 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 1
  %353 = bitcast %union.TfLitePtrUnion* %352 to i8**
  %354 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 3, i32 0
  %355 = icmp eq %struct.TfLiteTensor* %12, null
  %356 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 0, i32 1
  %357 = bitcast %union.TfLitePtrUnion* %356 to float**
  %358 = icmp eq %struct.TfLiteTensor* %13, null
  %359 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %360 = bitcast %union.TfLitePtrUnion* %359 to float**
  %361 = icmp eq %struct.TfLiteTensor* %14, null
  %362 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %363 = bitcast %union.TfLitePtrUnion* %362 to float**
  %364 = icmp eq %struct.TfLiteTensor* %15, null
  %365 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %366 = bitcast %union.TfLitePtrUnion* %365 to float**
  %367 = icmp eq %struct.TfLiteTensor* %21, null
  %368 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %369 = bitcast %union.TfLitePtrUnion* %368 to float**
  %370 = icmp eq %struct.TfLiteTensor* %22, null
  %371 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 1
  %372 = bitcast %union.TfLitePtrUnion* %371 to float**
  %373 = icmp eq %struct.TfLiteTensor* %23, null
  %374 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %375 = bitcast %union.TfLitePtrUnion* %374 to float**
  %376 = icmp eq %struct.TfLiteTensor* %24, null
  %377 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %378 = bitcast %union.TfLitePtrUnion* %377 to float**
  %379 = icmp eq %struct.TfLiteTensor* %25, null
  %380 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %381 = bitcast %union.TfLitePtrUnion* %380 to i8**
  %382 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 3, i32 0
  %383 = icmp eq %struct.TfLiteTensor* %26, null
  %384 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %385 = bitcast %union.TfLitePtrUnion* %384 to float**
  %386 = icmp eq %struct.TfLiteTensor* %32, null
  %387 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %388 = bitcast %union.TfLitePtrUnion* %387 to float**
  %389 = icmp eq %struct.TfLiteTensor* %33, null
  %390 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %391 = bitcast %union.TfLitePtrUnion* %390 to float**
  %392 = icmp eq %struct.TfLiteTensor* %34, null
  %393 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %394 = bitcast %union.TfLitePtrUnion* %393 to float**
  %395 = icmp eq %struct.TfLiteTensor* %35, null
  %396 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %397 = bitcast %union.TfLitePtrUnion* %396 to i8**
  %398 = icmp eq %struct.TfLiteTensor* %36, null
  %399 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 0, i32 1
  %400 = bitcast %union.TfLitePtrUnion* %399 to i8**
  %401 = icmp eq %struct.TfLiteTensor* %37, null
  %402 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %403 = bitcast %union.TfLitePtrUnion* %402 to i8**
  %404 = icmp eq %struct.TfLiteTensor* %38, null
  %405 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 1
  %406 = bitcast %union.TfLitePtrUnion* %405 to i8**
  %407 = icmp eq %struct.TfLiteTensor* %39, null
  %408 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 0, i32 1
  %409 = bitcast %union.TfLitePtrUnion* %408 to float**
  %410 = icmp eq %struct.TfLiteTensor* %40, null
  %411 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %412 = bitcast %union.TfLitePtrUnion* %411 to float**
  %413 = icmp eq %struct.TfLiteTensor* %41, null
  %414 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1, i32 0
  br label %415

415:                                              ; preds = %611, %286
  %416 = phi i32 [ 0, %286 ], [ %615, %611 ]
  %417 = xor i32 %416, -1
  %418 = add i32 %74, %417
  %419 = select i1 %28, i32 %416, i32 %418
  br i1 %287, label %422, label %420

420:                                              ; preds = %415
  %421 = load float*, float** %289, align 8
  br label %422

422:                                              ; preds = %415, %420
  %423 = phi float* [ %421, %420 ], [ null, %415 ]
  %424 = mul i32 %419, %75
  %425 = mul i32 %424, %64
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds float, float* %423, i64 %426
  br i1 %76, label %428, label %431

428:                                              ; preds = %422
  %429 = load float*, float** %291, align 8
  %430 = getelementptr inbounds float, float* %429, i64 %426
  br label %431

431:                                              ; preds = %428, %422
  %432 = phi float* [ %430, %428 ], [ null, %422 ]
  br i1 %292, label %435, label %433

433:                                              ; preds = %431
  %434 = load float*, float** %294, align 8
  br label %435

435:                                              ; preds = %431, %433
  %436 = phi float* [ %434, %433 ], [ null, %431 ]
  %437 = mul i32 %424, %130
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds float, float* %436, i64 %295
  %440 = getelementptr inbounds float, float* %439, i64 %438
  br i1 %96, label %444, label %441

441:                                              ; preds = %435
  %442 = load i8*, i8** %297, align 8
  %443 = load float, float* %298, align 8
  br label %444

444:                                              ; preds = %435, %441
  %445 = phi i8* [ %442, %441 ], [ null, %435 ]
  %446 = phi float [ %443, %441 ], [ 1.000000e+00, %435 ]
  br i1 %299, label %450, label %447

447:                                              ; preds = %444
  %448 = load i8*, i8** %301, align 8
  %449 = load float, float* %302, align 8
  br label %450

450:                                              ; preds = %444, %447
  %451 = phi i8* [ %448, %447 ], [ null, %444 ]
  %452 = phi float [ %449, %447 ], [ 1.000000e+00, %444 ]
  br i1 %303, label %456, label %453

453:                                              ; preds = %450
  %454 = load i8*, i8** %305, align 8
  %455 = load float, float* %306, align 8
  br label %456

456:                                              ; preds = %450, %453
  %457 = phi i8* [ %454, %453 ], [ null, %450 ]
  %458 = phi float [ %455, %453 ], [ 1.000000e+00, %450 ]
  br i1 %307, label %462, label %459

459:                                              ; preds = %456
  %460 = load i8*, i8** %309, align 8
  %461 = load float, float* %310, align 8
  br label %462

462:                                              ; preds = %456, %459
  %463 = phi i8* [ %460, %459 ], [ null, %456 ]
  %464 = phi float [ %461, %459 ], [ 1.000000e+00, %456 ]
  br i1 %311, label %468, label %465

465:                                              ; preds = %462
  %466 = load i8*, i8** %313, align 8
  %467 = load float, float* %314, align 8
  br label %468

468:                                              ; preds = %462, %465
  %469 = phi i8* [ %466, %465 ], [ null, %462 ]
  %470 = phi float [ %467, %465 ], [ 1.000000e+00, %462 ]
  br i1 %315, label %474, label %471

471:                                              ; preds = %468
  %472 = load i8*, i8** %317, align 8
  %473 = load float, float* %318, align 8
  br label %474

474:                                              ; preds = %468, %471
  %475 = phi i8* [ %472, %471 ], [ null, %468 ]
  %476 = phi float [ %473, %471 ], [ 1.000000e+00, %468 ]
  br i1 %319, label %480, label %477

477:                                              ; preds = %474
  %478 = load i8*, i8** %321, align 8
  %479 = load float, float* %322, align 8
  br label %480

480:                                              ; preds = %474, %477
  %481 = phi i8* [ %478, %477 ], [ null, %474 ]
  %482 = phi float [ %479, %477 ], [ 1.000000e+00, %474 ]
  br i1 %323, label %486, label %483

483:                                              ; preds = %480
  %484 = load i8*, i8** %325, align 8
  %485 = load float, float* %326, align 8
  br label %486

486:                                              ; preds = %480, %483
  %487 = phi i8* [ %484, %483 ], [ null, %480 ]
  %488 = phi float [ %485, %483 ], [ 1.000000e+00, %480 ]
  br i1 %327, label %492, label %489

489:                                              ; preds = %486
  %490 = load i8*, i8** %329, align 8
  %491 = load float, float* %330, align 8
  br label %492

492:                                              ; preds = %486, %489
  %493 = phi i8* [ %490, %489 ], [ null, %486 ]
  %494 = phi float [ %491, %489 ], [ 1.000000e+00, %486 ]
  br i1 %331, label %498, label %495

495:                                              ; preds = %492
  %496 = load i8*, i8** %333, align 8
  %497 = load float, float* %334, align 8
  br label %498

498:                                              ; preds = %492, %495
  %499 = phi i8* [ %496, %495 ], [ null, %492 ]
  %500 = phi float [ %497, %495 ], [ 1.000000e+00, %492 ]
  br i1 %335, label %504, label %501

501:                                              ; preds = %498
  %502 = load i8*, i8** %337, align 8
  %503 = load float, float* %338, align 8
  br label %504

504:                                              ; preds = %498, %501
  %505 = phi i8* [ %502, %501 ], [ null, %498 ]
  %506 = phi float [ %503, %501 ], [ 1.000000e+00, %498 ]
  br i1 %339, label %510, label %507

507:                                              ; preds = %504
  %508 = load i8*, i8** %341, align 8
  %509 = load float, float* %342, align 8
  br label %510

510:                                              ; preds = %504, %507
  %511 = phi i8* [ %508, %507 ], [ null, %504 ]
  %512 = phi float [ %509, %507 ], [ 1.000000e+00, %504 ]
  br i1 %343, label %516, label %513

513:                                              ; preds = %510
  %514 = load i8*, i8** %345, align 8
  %515 = load float, float* %346, align 8
  br label %516

516:                                              ; preds = %510, %513
  %517 = phi i8* [ %514, %513 ], [ null, %510 ]
  %518 = phi float [ %515, %513 ], [ 1.000000e+00, %510 ]
  br i1 %347, label %522, label %519

519:                                              ; preds = %516
  %520 = load i8*, i8** %349, align 8
  %521 = load float, float* %350, align 8
  br label %522

522:                                              ; preds = %516, %519
  %523 = phi i8* [ %520, %519 ], [ null, %516 ]
  %524 = phi float [ %521, %519 ], [ 1.000000e+00, %516 ]
  br i1 %351, label %528, label %525

525:                                              ; preds = %522
  %526 = load i8*, i8** %353, align 8
  %527 = load float, float* %354, align 8
  br label %528

528:                                              ; preds = %522, %525
  %529 = phi i8* [ %526, %525 ], [ null, %522 ]
  %530 = phi float [ %527, %525 ], [ 1.000000e+00, %522 ]
  br i1 %355, label %533, label %531

531:                                              ; preds = %528
  %532 = load float*, float** %357, align 8
  br label %533

533:                                              ; preds = %528, %531
  %534 = phi float* [ %532, %531 ], [ null, %528 ]
  br i1 %358, label %537, label %535

535:                                              ; preds = %533
  %536 = load float*, float** %360, align 8
  br label %537

537:                                              ; preds = %533, %535
  %538 = phi float* [ %536, %535 ], [ null, %533 ]
  br i1 %361, label %541, label %539

539:                                              ; preds = %537
  %540 = load float*, float** %363, align 8
  br label %541

541:                                              ; preds = %537, %539
  %542 = phi float* [ %540, %539 ], [ null, %537 ]
  br i1 %364, label %545, label %543

543:                                              ; preds = %541
  %544 = load float*, float** %366, align 8
  br label %545

545:                                              ; preds = %541, %543
  %546 = phi float* [ %544, %543 ], [ null, %541 ]
  br i1 %367, label %549, label %547

547:                                              ; preds = %545
  %548 = load float*, float** %369, align 8
  br label %549

549:                                              ; preds = %545, %547
  %550 = phi float* [ %548, %547 ], [ null, %545 ]
  br i1 %370, label %553, label %551

551:                                              ; preds = %549
  %552 = load float*, float** %372, align 8
  br label %553

553:                                              ; preds = %549, %551
  %554 = phi float* [ %552, %551 ], [ null, %549 ]
  br i1 %373, label %557, label %555

555:                                              ; preds = %553
  %556 = load float*, float** %375, align 8
  br label %557

557:                                              ; preds = %553, %555
  %558 = phi float* [ %556, %555 ], [ null, %553 ]
  br i1 %376, label %561, label %559

559:                                              ; preds = %557
  %560 = load float*, float** %378, align 8
  br label %561

561:                                              ; preds = %557, %559
  %562 = phi float* [ %560, %559 ], [ null, %557 ]
  br i1 %379, label %566, label %563

563:                                              ; preds = %561
  %564 = load i8*, i8** %381, align 8
  %565 = load float, float* %382, align 8
  br label %566

566:                                              ; preds = %561, %563
  %567 = phi i8* [ %564, %563 ], [ null, %561 ]
  %568 = phi float [ %565, %563 ], [ 1.000000e+00, %561 ]
  br i1 %383, label %571, label %569

569:                                              ; preds = %566
  %570 = load float*, float** %385, align 8
  br label %571

571:                                              ; preds = %566, %569
  %572 = phi float* [ %570, %569 ], [ null, %566 ]
  br i1 %386, label %575, label %573

573:                                              ; preds = %571
  %574 = load float*, float** %388, align 8
  br label %575

575:                                              ; preds = %571, %573
  %576 = phi float* [ %574, %573 ], [ null, %571 ]
  br i1 %389, label %579, label %577

577:                                              ; preds = %575
  %578 = load float*, float** %391, align 8
  br label %579

579:                                              ; preds = %575, %577
  %580 = phi float* [ %578, %577 ], [ null, %575 ]
  br i1 %392, label %583, label %581

581:                                              ; preds = %579
  %582 = load float*, float** %394, align 8
  br label %583

583:                                              ; preds = %579, %581
  %584 = phi float* [ %582, %581 ], [ null, %579 ]
  br i1 %395, label %587, label %585

585:                                              ; preds = %583
  %586 = load i8*, i8** %397, align 8
  br label %587

587:                                              ; preds = %583, %585
  %588 = phi i8* [ %586, %585 ], [ null, %583 ]
  br i1 %398, label %591, label %589

589:                                              ; preds = %587
  %590 = load i8*, i8** %400, align 8
  br label %591

591:                                              ; preds = %587, %589
  %592 = phi i8* [ %590, %589 ], [ null, %587 ]
  br i1 %401, label %595, label %593

593:                                              ; preds = %591
  %594 = load i8*, i8** %403, align 8
  br label %595

595:                                              ; preds = %591, %593
  %596 = phi i8* [ %594, %593 ], [ null, %591 ]
  br i1 %404, label %599, label %597

597:                                              ; preds = %595
  %598 = load i8*, i8** %406, align 8
  br label %599

599:                                              ; preds = %595, %597
  %600 = phi i8* [ %598, %597 ], [ null, %595 ]
  br i1 %407, label %603, label %601

601:                                              ; preds = %599
  %602 = load float*, float** %409, align 8
  br label %603

603:                                              ; preds = %599, %601
  %604 = phi float* [ %602, %601 ], [ null, %599 ]
  br i1 %410, label %607, label %605

605:                                              ; preds = %603
  %606 = load float*, float** %412, align 8
  br label %607

607:                                              ; preds = %603, %605
  %608 = phi float* [ %606, %605 ], [ null, %603 ]
  br i1 %413, label %611, label %609

609:                                              ; preds = %607
  %610 = load i32*, i32** %414, align 8
  br label %611

611:                                              ; preds = %607, %609
  %612 = phi i32* [ %610, %609 ], [ null, %607 ]
  %613 = load i8, i8* %131, align 4, !range !164
  %614 = icmp ne i8 %613, 0
  tail call fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_114LstmStepHybridEPKfPKafS7_fS7_fS7_fS5_S7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS5_S5_S5_S5_S5_S5_S5_S5_S7_fS5_PK16TfLiteLSTMParamsiiiiiiPfSB_SB_SB_SB_SB_SB_PaSC_SC_SC_SB_SB_PiSB_SD_SD_iPbbPNS_17CpuBackendContextE(float* %427, i8* %445, float %446, i8* %451, float %452, i8* %457, float %458, i8* %463, float %464, float* %432, i8* %469, float %470, i8* %475, float %476, i8* %481, float %482, i8* %487, float %488, i8* %493, float %494, i8* %499, float %500, i8* %505, float %506, i8* %511, float %512, i8* %517, float %518, i8* %523, float %524, i8* %529, float %530, float* %534, float* %538, float* %542, float* %546, float* %550, float* %554, float* %558, float* %562, i8* %567, float %568, float* %572, %struct.TfLiteLSTMParams* %27, i32 %75, i32 %91, i32 %64, i32 %87, i32 %95, i32 %130, float* %113, float* %122, float* %114, float* %121, float* %576, float* %580, float* %584, i8* %588, i8* %592, i8* %596, i8* %600, float* %604, float* %608, i32* %612, float* %440, i32* %146, i32* %147, i32 %45, i8* %46, i1 zeroext %614, %"class.tflite::CpuBackendContext"* %47)
  %615 = add nuw nsw i32 %416, 1
  %616 = icmp eq i32 %615, %74
  br i1 %616, label %836, label %415

617:                                              ; preds = %629, %150
  %618 = phi i64 [ 0, %150 ], [ %630, %629 ]
  br i1 %151, label %619, label %629

619:                                              ; preds = %617
  %620 = mul nsw i64 %618, %282
  %621 = mul nsw i64 %618, %281
  %622 = getelementptr inbounds float, float* %113, i64 %621
  %623 = select i1 %167, float* null, float* %622
  %624 = getelementptr inbounds float, float* %122, i64 %621
  %625 = getelementptr inbounds float, float* %114, i64 %621
  %626 = getelementptr inbounds float, float* %121, i64 %621
  %627 = trunc i64 %618 to i32
  %628 = mul i32 %74, %627
  br label %632

629:                                              ; preds = %830, %617
  %630 = add nuw nsw i64 %618, 1
  %631 = icmp eq i64 %630, %283
  br i1 %631, label %836, label %617

632:                                              ; preds = %830, %619
  %633 = phi i32 [ 0, %619 ], [ %834, %830 ]
  %634 = xor i32 %633, -1
  %635 = add i32 %74, %634
  %636 = select i1 %28, i32 %633, i32 %635
  %637 = add nsw i32 %636, %628
  br i1 %152, label %640, label %638

638:                                              ; preds = %632
  %639 = load float*, float** %154, align 8
  br label %640

640:                                              ; preds = %632, %638
  %641 = phi float* [ %639, %638 ], [ null, %632 ]
  %642 = mul nsw i32 %637, %64
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds float, float* %641, i64 %643
  br i1 %76, label %645, label %648

645:                                              ; preds = %640
  %646 = load float*, float** %156, align 8
  %647 = getelementptr inbounds float, float* %646, i64 %643
  br label %648

648:                                              ; preds = %645, %640
  %649 = phi float* [ %647, %645 ], [ null, %640 ]
  br i1 %157, label %652, label %650

650:                                              ; preds = %648
  %651 = load float*, float** %159, align 8
  br label %652

652:                                              ; preds = %648, %650
  %653 = phi float* [ %651, %650 ], [ null, %648 ]
  %654 = mul nsw i32 %637, %130
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds float, float* %653, i64 %160
  %657 = getelementptr inbounds float, float* %656, i64 %655
  br i1 %161, label %660, label %658

658:                                              ; preds = %652
  %659 = load float*, float** %163, align 8
  br label %660

660:                                              ; preds = %652, %658
  %661 = phi float* [ %659, %658 ], [ null, %652 ]
  %662 = getelementptr inbounds float, float* %661, i64 %620
  br i1 %164, label %665, label %663

663:                                              ; preds = %660
  %664 = load float*, float** %166, align 8
  br label %665

665:                                              ; preds = %660, %663
  %666 = phi float* [ %664, %663 ], [ null, %660 ]
  %667 = getelementptr inbounds float, float* %666, i64 %621
  br i1 %96, label %671, label %668

668:                                              ; preds = %665
  %669 = load i8*, i8** %169, align 8
  %670 = load float, float* %170, align 8
  br label %671

671:                                              ; preds = %665, %668
  %672 = phi i8* [ %669, %668 ], [ null, %665 ]
  %673 = phi float [ %670, %668 ], [ 1.000000e+00, %665 ]
  br i1 %171, label %677, label %674

674:                                              ; preds = %671
  %675 = load i8*, i8** %173, align 8
  %676 = load float, float* %174, align 8
  br label %677

677:                                              ; preds = %671, %674
  %678 = phi i8* [ %675, %674 ], [ null, %671 ]
  %679 = phi float [ %676, %674 ], [ 1.000000e+00, %671 ]
  br i1 %175, label %683, label %680

680:                                              ; preds = %677
  %681 = load i8*, i8** %177, align 8
  %682 = load float, float* %178, align 8
  br label %683

683:                                              ; preds = %677, %680
  %684 = phi i8* [ %681, %680 ], [ null, %677 ]
  %685 = phi float [ %682, %680 ], [ 1.000000e+00, %677 ]
  br i1 %179, label %689, label %686

686:                                              ; preds = %683
  %687 = load i8*, i8** %181, align 8
  %688 = load float, float* %182, align 8
  br label %689

689:                                              ; preds = %683, %686
  %690 = phi i8* [ %687, %686 ], [ null, %683 ]
  %691 = phi float [ %688, %686 ], [ 1.000000e+00, %683 ]
  br i1 %183, label %695, label %692

692:                                              ; preds = %689
  %693 = load i8*, i8** %185, align 8
  %694 = load float, float* %186, align 8
  br label %695

695:                                              ; preds = %689, %692
  %696 = phi i8* [ %693, %692 ], [ null, %689 ]
  %697 = phi float [ %694, %692 ], [ 1.000000e+00, %689 ]
  br i1 %187, label %701, label %698

698:                                              ; preds = %695
  %699 = load i8*, i8** %189, align 8
  %700 = load float, float* %190, align 8
  br label %701

701:                                              ; preds = %695, %698
  %702 = phi i8* [ %699, %698 ], [ null, %695 ]
  %703 = phi float [ %700, %698 ], [ 1.000000e+00, %695 ]
  br i1 %191, label %707, label %704

704:                                              ; preds = %701
  %705 = load i8*, i8** %193, align 8
  %706 = load float, float* %194, align 8
  br label %707

707:                                              ; preds = %701, %704
  %708 = phi i8* [ %705, %704 ], [ null, %701 ]
  %709 = phi float [ %706, %704 ], [ 1.000000e+00, %701 ]
  br i1 %195, label %713, label %710

710:                                              ; preds = %707
  %711 = load i8*, i8** %197, align 8
  %712 = load float, float* %198, align 8
  br label %713

713:                                              ; preds = %707, %710
  %714 = phi i8* [ %711, %710 ], [ null, %707 ]
  %715 = phi float [ %712, %710 ], [ 1.000000e+00, %707 ]
  br i1 %199, label %719, label %716

716:                                              ; preds = %713
  %717 = load i8*, i8** %201, align 8
  %718 = load float, float* %202, align 8
  br label %719

719:                                              ; preds = %713, %716
  %720 = phi i8* [ %717, %716 ], [ null, %713 ]
  %721 = phi float [ %718, %716 ], [ 1.000000e+00, %713 ]
  br i1 %203, label %725, label %722

722:                                              ; preds = %719
  %723 = load i8*, i8** %205, align 8
  %724 = load float, float* %206, align 8
  br label %725

725:                                              ; preds = %719, %722
  %726 = phi i8* [ %723, %722 ], [ null, %719 ]
  %727 = phi float [ %724, %722 ], [ 1.000000e+00, %719 ]
  br i1 %207, label %731, label %728

728:                                              ; preds = %725
  %729 = load i8*, i8** %209, align 8
  %730 = load float, float* %210, align 8
  br label %731

731:                                              ; preds = %725, %728
  %732 = phi i8* [ %729, %728 ], [ null, %725 ]
  %733 = phi float [ %730, %728 ], [ 1.000000e+00, %725 ]
  br i1 %211, label %737, label %734

734:                                              ; preds = %731
  %735 = load i8*, i8** %213, align 8
  %736 = load float, float* %214, align 8
  br label %737

737:                                              ; preds = %731, %734
  %738 = phi i8* [ %735, %734 ], [ null, %731 ]
  %739 = phi float [ %736, %734 ], [ 1.000000e+00, %731 ]
  br i1 %215, label %743, label %740

740:                                              ; preds = %737
  %741 = load i8*, i8** %217, align 8
  %742 = load float, float* %218, align 8
  br label %743

743:                                              ; preds = %737, %740
  %744 = phi i8* [ %741, %740 ], [ null, %737 ]
  %745 = phi float [ %742, %740 ], [ 1.000000e+00, %737 ]
  br i1 %219, label %749, label %746

746:                                              ; preds = %743
  %747 = load i8*, i8** %221, align 8
  %748 = load float, float* %222, align 8
  br label %749

749:                                              ; preds = %743, %746
  %750 = phi i8* [ %747, %746 ], [ null, %743 ]
  %751 = phi float [ %748, %746 ], [ 1.000000e+00, %743 ]
  br i1 %223, label %755, label %752

752:                                              ; preds = %749
  %753 = load i8*, i8** %225, align 8
  %754 = load float, float* %226, align 8
  br label %755

755:                                              ; preds = %749, %752
  %756 = phi i8* [ %753, %752 ], [ null, %749 ]
  %757 = phi float [ %754, %752 ], [ 1.000000e+00, %749 ]
  br i1 %227, label %760, label %758

758:                                              ; preds = %755
  %759 = load float*, float** %229, align 8
  br label %760

760:                                              ; preds = %755, %758
  %761 = phi float* [ %759, %758 ], [ null, %755 ]
  br i1 %230, label %764, label %762

762:                                              ; preds = %760
  %763 = load float*, float** %232, align 8
  br label %764

764:                                              ; preds = %760, %762
  %765 = phi float* [ %763, %762 ], [ null, %760 ]
  br i1 %233, label %768, label %766

766:                                              ; preds = %764
  %767 = load float*, float** %235, align 8
  br label %768

768:                                              ; preds = %764, %766
  %769 = phi float* [ %767, %766 ], [ null, %764 ]
  br i1 %236, label %772, label %770

770:                                              ; preds = %768
  %771 = load float*, float** %238, align 8
  br label %772

772:                                              ; preds = %768, %770
  %773 = phi float* [ %771, %770 ], [ null, %768 ]
  br i1 %239, label %776, label %774

774:                                              ; preds = %772
  %775 = load float*, float** %241, align 8
  br label %776

776:                                              ; preds = %772, %774
  %777 = phi float* [ %775, %774 ], [ null, %772 ]
  br i1 %242, label %780, label %778

778:                                              ; preds = %776
  %779 = load float*, float** %244, align 8
  br label %780

780:                                              ; preds = %776, %778
  %781 = phi float* [ %779, %778 ], [ null, %776 ]
  br i1 %245, label %784, label %782

782:                                              ; preds = %780
  %783 = load float*, float** %247, align 8
  br label %784

784:                                              ; preds = %780, %782
  %785 = phi float* [ %783, %782 ], [ null, %780 ]
  br i1 %248, label %788, label %786

786:                                              ; preds = %784
  %787 = load float*, float** %250, align 8
  br label %788

788:                                              ; preds = %784, %786
  %789 = phi float* [ %787, %786 ], [ null, %784 ]
  br i1 %251, label %793, label %790

790:                                              ; preds = %788
  %791 = load i8*, i8** %253, align 8
  %792 = load float, float* %254, align 8
  br label %793

793:                                              ; preds = %788, %790
  %794 = phi i8* [ %791, %790 ], [ null, %788 ]
  %795 = phi float [ %792, %790 ], [ 1.000000e+00, %788 ]
  br i1 %255, label %798, label %796

796:                                              ; preds = %793
  %797 = load float*, float** %257, align 8
  br label %798

798:                                              ; preds = %793, %796
  %799 = phi float* [ %797, %796 ], [ null, %793 ]
  br i1 %258, label %802, label %800

800:                                              ; preds = %798
  %801 = load float*, float** %260, align 8
  br label %802

802:                                              ; preds = %798, %800
  %803 = phi float* [ %801, %800 ], [ null, %798 ]
  br i1 %261, label %806, label %804

804:                                              ; preds = %802
  %805 = load float*, float** %263, align 8
  br label %806

806:                                              ; preds = %802, %804
  %807 = phi float* [ %805, %804 ], [ null, %802 ]
  br i1 %264, label %810, label %808

808:                                              ; preds = %806
  %809 = load float*, float** %266, align 8
  br label %810

810:                                              ; preds = %806, %808
  %811 = phi float* [ %809, %808 ], [ null, %806 ]
  br i1 %267, label %814, label %812

812:                                              ; preds = %810
  %813 = load i8*, i8** %269, align 8
  br label %814

814:                                              ; preds = %810, %812
  %815 = phi i8* [ %813, %812 ], [ null, %810 ]
  br i1 %270, label %818, label %816

816:                                              ; preds = %814
  %817 = load i8*, i8** %272, align 8
  br label %818

818:                                              ; preds = %814, %816
  %819 = phi i8* [ %817, %816 ], [ null, %814 ]
  br i1 %273, label %822, label %820

820:                                              ; preds = %818
  %821 = load i8*, i8** %275, align 8
  br label %822

822:                                              ; preds = %818, %820
  %823 = phi i8* [ %821, %820 ], [ null, %818 ]
  br i1 %276, label %826, label %824

824:                                              ; preds = %822
  %825 = load i8*, i8** %278, align 8
  br label %826

826:                                              ; preds = %822, %824
  %827 = phi i8* [ %825, %824 ], [ null, %822 ]
  br i1 %279, label %830, label %828

828:                                              ; preds = %826
  %829 = load i32*, i32** %280, align 8
  br label %830

830:                                              ; preds = %826, %828
  %831 = phi i32* [ %829, %828 ], [ null, %826 ]
  %832 = load i8, i8* %131, align 4, !range !164
  %833 = icmp ne i8 %832, 0
  tail call fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_114LstmStepHybridEPKfPKafS7_fS7_fS7_fS5_S7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS5_S5_S5_S5_S5_S5_S5_S5_S7_fS5_PK16TfLiteLSTMParamsiiiiiiPfSB_SB_SB_SB_SB_SB_PaSC_SC_SC_SB_SB_PiSB_SD_SD_iPbbPNS_17CpuBackendContextE(float* %644, i8* %672, float %673, i8* %678, float %679, i8* %684, float %685, i8* %690, float %691, float* %649, i8* %696, float %697, i8* %702, float %703, i8* %708, float %709, i8* %714, float %715, i8* %720, float %721, i8* %726, float %727, i8* %732, float %733, i8* %738, float %739, i8* %744, float %745, i8* %750, float %751, i8* %756, float %757, float* %761, float* %765, float* %769, float* %773, float* %777, float* %781, float* %785, float* %789, i8* %794, float %795, float* %799, %struct.TfLiteLSTMParams* %27, i32 1, i32 %91, i32 %64, i32 %87, i32 %95, i32 %130, float* %623, float* %624, float* %625, float* %626, float* %803, float* %807, float* %811, i8* %815, i8* %819, i8* %823, i8* %827, float* %662, float* %667, i32* %831, float* %657, i32* %146, i32* %147, i32 %45, i8* %46, i1 zeroext %833, %"class.tflite::CpuBackendContext"* %47)
  %834 = add nuw nsw i32 %633, 1
  %835 = icmp eq i32 %834, %74
  br i1 %835, label %629, label %632

836:                                              ; preds = %629, %611, %148, %284
  ret i32 0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_114LstmStepHybridEPKfPKafS7_fS7_fS7_fS5_S7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS7_fS5_S5_S5_S5_S5_S5_S5_S5_S7_fS5_PK16TfLiteLSTMParamsiiiiiiPfSB_SB_SB_SB_SB_SB_PaSC_SC_SC_SB_SB_PiSB_SD_SD_iPbbPNS_17CpuBackendContextE(float*, i8*, float, i8*, float, i8*, float, i8*, float, float*, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, i8*, float, float* nocapture readonly, float* readonly, float* nocapture readonly, float* nocapture readonly, float*, float*, float*, float*, i8*, float, float* readonly, %struct.TfLiteLSTMParams* nocapture readonly, i32, i32, i32, i32, i32, i32, float*, float*, float*, float*, float*, float*, float*, i8*, i8*, i8*, i8*, float*, float*, i32*, float* nocapture, i32*, i32*, i32, i8*, i1 zeroext, %"class.tflite::CpuBackendContext"*) unnamed_addr #3 {
  %72 = bitcast float* %61 to i8*
  %73 = bitcast float* %53 to i8*
  %74 = bitcast float* %52 to i8*
  %75 = bitcast float* %51 to i8*
  %76 = bitcast float* %50 to i8*
  %77 = alloca float, align 4
  %78 = alloca float, align 4
  %79 = alloca float, align 4
  %80 = alloca float, align 4
  %81 = alloca float, align 4
  %82 = alloca float, align 4
  %83 = alloca %"struct.Eigen::internal::assign_op", align 1
  %84 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %85 = alloca %"class.Eigen::ArrayWrapper", align 8
  %86 = alloca %"struct.Eigen::internal::assign_op", align 1
  %87 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %88 = alloca %"class.Eigen::ArrayWrapper", align 8
  %89 = alloca %"struct.Eigen::internal::assign_op", align 1
  %90 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %91 = alloca %"class.Eigen::ArrayWrapper", align 8
  %92 = alloca float, align 4
  %93 = alloca float, align 4
  %94 = icmp eq i8* %1, null
  %95 = icmp ne i8* %30, null
  %96 = icmp ne float* %33, null
  br i1 %96, label %97, label %108

97:                                               ; preds = %71
  %98 = mul i32 %45, %44
  %99 = icmp sgt i32 %98, 0
  br i1 %94, label %104, label %100

100:                                              ; preds = %97
  br i1 %99, label %101, label %281

101:                                              ; preds = %100
  %102 = zext i32 %98 to i64
  %103 = shl nuw nsw i64 %102, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %76, i8 0, i64 %103, i1 false)
  br label %105

104:                                              ; preds = %97
  br i1 %99, label %105, label %281

105:                                              ; preds = %101, %104
  %106 = zext i32 %98 to i64
  %107 = shl nuw nsw i64 %106, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %75, i8 0, i64 %107, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 4 %74, i8 0, i64 %107, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 4 %73, i8 0, i64 %107, i1 false)
  br label %281

108:                                              ; preds = %71
  br i1 %94, label %155, label %109

109:                                              ; preds = %108
  %110 = icmp sgt i32 %44, 0
  br i1 %110, label %111, label %281

111:                                              ; preds = %109
  %112 = icmp eq i32 %45, 0
  %113 = sext i32 %45 to i64
  %114 = shl nuw nsw i64 %113, 2
  %115 = bitcast float* %36 to i8*
  %116 = zext i32 %44 to i64
  %117 = add nsw i64 %116, -1
  %118 = and i64 %116, 3
  %119 = icmp ult i64 %117, 3
  br i1 %119, label %141, label %120

120:                                              ; preds = %111
  %121 = sub nsw i64 %116, %118
  br label %122

122:                                              ; preds = %3510, %120
  %123 = phi i64 [ 0, %120 ], [ %3511, %3510 ]
  %124 = phi i64 [ %121, %120 ], [ %3512, %3510 ]
  br i1 %112, label %3510, label %125

125:                                              ; preds = %122
  %126 = mul nsw i64 %123, %113
  %127 = getelementptr inbounds float, float* %50, i64 %126
  %128 = bitcast float* %127 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %128, i8* align 4 %115, i64 %114, i1 false) #15
  %129 = or i64 %123, 1
  %130 = mul nsw i64 %129, %113
  %131 = getelementptr inbounds float, float* %50, i64 %130
  %132 = bitcast float* %131 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %132, i8* align 4 %115, i64 %114, i1 false) #15
  %133 = or i64 %123, 2
  %134 = mul nsw i64 %133, %113
  %135 = getelementptr inbounds float, float* %50, i64 %134
  %136 = bitcast float* %135 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %136, i8* align 4 %115, i64 %114, i1 false) #15
  %137 = or i64 %123, 3
  %138 = mul nsw i64 %137, %113
  %139 = getelementptr inbounds float, float* %50, i64 %138
  %140 = bitcast float* %139 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %140, i8* align 4 %115, i64 %114, i1 false) #15
  br label %3510

141:                                              ; preds = %3510, %111
  %142 = phi i64 [ 0, %111 ], [ %3511, %3510 ]
  %143 = icmp eq i64 %118, 0
  br i1 %143, label %155, label %144

144:                                              ; preds = %141, %151
  %145 = phi i64 [ %152, %151 ], [ %142, %141 ]
  %146 = phi i64 [ %153, %151 ], [ %118, %141 ]
  br i1 %112, label %151, label %147

147:                                              ; preds = %144
  %148 = mul nsw i64 %145, %113
  %149 = getelementptr inbounds float, float* %50, i64 %148
  %150 = bitcast float* %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %150, i8* align 4 %115, i64 %114, i1 false) #15
  br label %151

151:                                              ; preds = %147, %144
  %152 = add nuw nsw i64 %145, 1
  %153 = add i64 %146, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %144, !llvm.loop !165

155:                                              ; preds = %141, %151, %108
  %156 = icmp sgt i32 %44, 0
  br i1 %156, label %157, label %281

157:                                              ; preds = %155
  %158 = icmp eq i32 %45, 0
  %159 = sext i32 %45 to i64
  %160 = shl nuw nsw i64 %159, 2
  %161 = bitcast float* %37 to i8*
  %162 = zext i32 %44 to i64
  %163 = add nsw i64 %162, -1
  %164 = and i64 %162, 3
  %165 = icmp ult i64 %163, 3
  br i1 %165, label %187, label %166

166:                                              ; preds = %157
  %167 = sub nsw i64 %162, %164
  br label %168

168:                                              ; preds = %3506, %166
  %169 = phi i64 [ 0, %166 ], [ %3507, %3506 ]
  %170 = phi i64 [ %167, %166 ], [ %3508, %3506 ]
  br i1 %158, label %3506, label %171

171:                                              ; preds = %168
  %172 = mul nsw i64 %169, %159
  %173 = getelementptr inbounds float, float* %51, i64 %172
  %174 = bitcast float* %173 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %161, i64 %160, i1 false) #15
  %175 = or i64 %169, 1
  %176 = mul nsw i64 %175, %159
  %177 = getelementptr inbounds float, float* %51, i64 %176
  %178 = bitcast float* %177 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %178, i8* align 4 %161, i64 %160, i1 false) #15
  %179 = or i64 %169, 2
  %180 = mul nsw i64 %179, %159
  %181 = getelementptr inbounds float, float* %51, i64 %180
  %182 = bitcast float* %181 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %182, i8* align 4 %161, i64 %160, i1 false) #15
  %183 = or i64 %169, 3
  %184 = mul nsw i64 %183, %159
  %185 = getelementptr inbounds float, float* %51, i64 %184
  %186 = bitcast float* %185 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %186, i8* align 4 %161, i64 %160, i1 false) #15
  br label %3506

187:                                              ; preds = %3506, %157
  %188 = phi i64 [ 0, %157 ], [ %3507, %3506 ]
  %189 = icmp eq i64 %164, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %187, %197
  %191 = phi i64 [ %198, %197 ], [ %188, %187 ]
  %192 = phi i64 [ %199, %197 ], [ %164, %187 ]
  br i1 %158, label %197, label %193

193:                                              ; preds = %190
  %194 = mul nsw i64 %191, %159
  %195 = getelementptr inbounds float, float* %51, i64 %194
  %196 = bitcast float* %195 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %196, i8* align 4 %161, i64 %160, i1 false) #15
  br label %197

197:                                              ; preds = %193, %190
  %198 = add nuw nsw i64 %191, 1
  %199 = add i64 %192, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !166

201:                                              ; preds = %197, %187
  %202 = bitcast float* %38 to i8*
  %203 = add nsw i64 %162, -1
  %204 = and i64 %162, 3
  %205 = icmp ult i64 %203, 3
  br i1 %205, label %227, label %206

206:                                              ; preds = %201
  %207 = sub nsw i64 %162, %204
  br label %208

208:                                              ; preds = %3502, %206
  %209 = phi i64 [ 0, %206 ], [ %3503, %3502 ]
  %210 = phi i64 [ %207, %206 ], [ %3504, %3502 ]
  br i1 %158, label %3502, label %211

211:                                              ; preds = %208
  %212 = mul nsw i64 %209, %159
  %213 = getelementptr inbounds float, float* %52, i64 %212
  %214 = bitcast float* %213 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %214, i8* align 4 %202, i64 %160, i1 false) #15
  %215 = or i64 %209, 1
  %216 = mul nsw i64 %215, %159
  %217 = getelementptr inbounds float, float* %52, i64 %216
  %218 = bitcast float* %217 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %218, i8* align 4 %202, i64 %160, i1 false) #15
  %219 = or i64 %209, 2
  %220 = mul nsw i64 %219, %159
  %221 = getelementptr inbounds float, float* %52, i64 %220
  %222 = bitcast float* %221 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %222, i8* align 4 %202, i64 %160, i1 false) #15
  %223 = or i64 %209, 3
  %224 = mul nsw i64 %223, %159
  %225 = getelementptr inbounds float, float* %52, i64 %224
  %226 = bitcast float* %225 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %226, i8* align 4 %202, i64 %160, i1 false) #15
  br label %3502

227:                                              ; preds = %3502, %201
  %228 = phi i64 [ 0, %201 ], [ %3503, %3502 ]
  %229 = icmp eq i64 %204, 0
  br i1 %229, label %241, label %230

230:                                              ; preds = %227, %237
  %231 = phi i64 [ %238, %237 ], [ %228, %227 ]
  %232 = phi i64 [ %239, %237 ], [ %204, %227 ]
  br i1 %158, label %237, label %233

233:                                              ; preds = %230
  %234 = mul nsw i64 %231, %159
  %235 = getelementptr inbounds float, float* %52, i64 %234
  %236 = bitcast float* %235 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %236, i8* align 4 %202, i64 %160, i1 false) #15
  br label %237

237:                                              ; preds = %233, %230
  %238 = add nuw nsw i64 %231, 1
  %239 = add i64 %232, -1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %230, !llvm.loop !167

241:                                              ; preds = %237, %227
  %242 = bitcast float* %39 to i8*
  %243 = add nsw i64 %162, -1
  %244 = and i64 %162, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %267, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %162, %244
  br label %248

248:                                              ; preds = %3498, %246
  %249 = phi i64 [ 0, %246 ], [ %3499, %3498 ]
  %250 = phi i64 [ %247, %246 ], [ %3500, %3498 ]
  br i1 %158, label %3498, label %251

251:                                              ; preds = %248
  %252 = mul nsw i64 %249, %159
  %253 = getelementptr inbounds float, float* %53, i64 %252
  %254 = bitcast float* %253 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %254, i8* align 4 %242, i64 %160, i1 false) #15
  %255 = or i64 %249, 1
  %256 = mul nsw i64 %255, %159
  %257 = getelementptr inbounds float, float* %53, i64 %256
  %258 = bitcast float* %257 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %258, i8* align 4 %242, i64 %160, i1 false) #15
  %259 = or i64 %249, 2
  %260 = mul nsw i64 %259, %159
  %261 = getelementptr inbounds float, float* %53, i64 %260
  %262 = bitcast float* %261 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %262, i8* align 4 %242, i64 %160, i1 false) #15
  %263 = or i64 %249, 3
  %264 = mul nsw i64 %263, %159
  %265 = getelementptr inbounds float, float* %53, i64 %264
  %266 = bitcast float* %265 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %266, i8* align 4 %242, i64 %160, i1 false) #15
  br label %3498

267:                                              ; preds = %3498, %241
  %268 = phi i64 [ 0, %241 ], [ %3499, %3498 ]
  %269 = icmp eq i64 %244, 0
  br i1 %269, label %281, label %270

270:                                              ; preds = %267, %277
  %271 = phi i64 [ %278, %277 ], [ %268, %267 ]
  %272 = phi i64 [ %279, %277 ], [ %244, %267 ]
  br i1 %158, label %277, label %273

273:                                              ; preds = %270
  %274 = mul nsw i64 %271, %159
  %275 = getelementptr inbounds float, float* %53, i64 %274
  %276 = bitcast float* %275 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %276, i8* align 4 %242, i64 %160, i1 false) #15
  br label %277

277:                                              ; preds = %273, %270
  %278 = add nuw nsw i64 %271, 1
  %279 = add i64 %272, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %270, !llvm.loop !168

281:                                              ; preds = %267, %277, %100, %105, %155, %109, %104
  br i1 %69, label %282, label %391

282:                                              ; preds = %281
  %283 = select i1 %94, i32 6, i32 8
  %284 = icmp ne float* %9, null
  %285 = select i1 %94, i32 9, i32 12
  %286 = select i1 %284, i32 %285, i32 %283
  %287 = icmp ne i8* %40, null
  br i1 %287, label %288, label %296

288:                                              ; preds = %282
  %289 = sitofp i32 %48 to float
  %290 = sitofp i32 %45 to float
  %291 = fdiv float %289, %290
  %292 = tail call float @llvm.ceil.f32(float %291) #15
  %293 = sitofp i32 %286 to float
  %294 = fadd float %292, %293
  %295 = fptosi float %294 to i32
  br label %296

296:                                              ; preds = %282, %288
  %297 = phi i32 [ %295, %288 ], [ %286, %282 ]
  %298 = icmp eq i32 %297, %67
  br i1 %298, label %304, label %299

299:                                              ; preds = %296
  %300 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %301 = tail call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* %300) #13
  %302 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %303 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %302) #13
  tail call void @abort() #14
  unreachable

304:                                              ; preds = %296
  %305 = sext i32 %45 to i64
  %306 = getelementptr inbounds i32, i32* %66, i64 %305
  %307 = select i1 %94, i32* %66, i32* %306
  %308 = getelementptr inbounds i32, i32* %307, i64 %305
  %309 = getelementptr inbounds i32, i32* %308, i64 %305
  br i1 %284, label %310, label %316

310:                                              ; preds = %304
  %311 = getelementptr inbounds i32, i32* %309, i64 %305
  %312 = getelementptr inbounds i32, i32* %311, i64 %305
  %313 = select i1 %94, i32* %311, i32* %312
  %314 = getelementptr inbounds i32, i32* %313, i64 %305
  %315 = getelementptr inbounds i32, i32* %314, i64 %305
  br label %316

316:                                              ; preds = %310, %304
  %317 = phi i32* [ %311, %310 ], [ null, %304 ]
  %318 = phi i32* [ %313, %310 ], [ null, %304 ]
  %319 = phi i32* [ %314, %310 ], [ null, %304 ]
  %320 = phi i32* [ %315, %310 ], [ null, %304 ]
  %321 = select i1 %284, i32* %320, i32* %309
  %322 = getelementptr inbounds i32, i32* %321, i64 %305
  %323 = getelementptr inbounds i32, i32* %322, i64 %305
  %324 = select i1 %94, i32* %322, i32* %323
  %325 = getelementptr inbounds i32, i32* %324, i64 %305
  %326 = getelementptr inbounds i32, i32* %325, i64 %305
  %327 = getelementptr inbounds i32, i32* %326, i64 %305
  %328 = select i1 %287, i32* %327, i32* null
  %329 = load i8, i8* %68, align 1, !range !164
  %330 = icmp eq i8 %329, 0
  br i1 %330, label %391, label %331

331:                                              ; preds = %316
  %332 = bitcast i32* %328 to i8*
  %333 = bitcast i32* %326 to i8*
  %334 = bitcast i32* %325 to i8*
  %335 = bitcast i32* %324 to i8*
  %336 = bitcast i32* %322 to i8*
  %337 = bitcast i32* %320 to i8*
  %338 = bitcast i32* %319 to i8*
  %339 = bitcast i32* %318 to i8*
  %340 = bitcast i32* %317 to i8*
  %341 = bitcast i32* %309 to i8*
  %342 = bitcast i32* %308 to i8*
  %343 = bitcast i32* %307 to i8*
  %344 = bitcast i32* %66 to i8*
  br i1 %94, label %351, label %345

345:                                              ; preds = %331
  %346 = icmp sgt i32 %45, 0
  br i1 %346, label %347, label %350

347:                                              ; preds = %345
  %348 = zext i32 %45 to i64
  %349 = shl nuw nsw i64 %348, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %344, i8 0, i64 %349, i1 false) #15
  br label %350

350:                                              ; preds = %347, %345
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* nonnull %1, i32* %66, i32 %45, i32 %46) #15
  br label %351

351:                                              ; preds = %350, %331
  %352 = icmp sgt i32 %45, 0
  br i1 %352, label %354, label %353

353:                                              ; preds = %351
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %3, i32* %307, i32 %45, i32 %46) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %5, i32* %308, i32 %45, i32 %46) #15
  br label %357

354:                                              ; preds = %351
  %355 = zext i32 %45 to i64
  %356 = shl nuw nsw i64 %355, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %343, i8 0, i64 %356, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %3, i32* %307, i32 %45, i32 %46) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %342, i8 0, i64 %356, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %5, i32* %308, i32 %45, i32 %46) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %341, i8 0, i64 %356, i1 false) #15
  br label %357

357:                                              ; preds = %354, %353
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %7, i32* %309, i32 %45, i32 %46) #15
  %358 = icmp eq float* %9, null
  br i1 %358, label %371, label %359

359:                                              ; preds = %357
  br i1 %94, label %365, label %360

360:                                              ; preds = %359
  br i1 %352, label %361, label %364

361:                                              ; preds = %360
  %362 = zext i32 %45 to i64
  %363 = shl nuw nsw i64 %362, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %340, i8 0, i64 %363, i1 false) #15
  br label %364

364:                                              ; preds = %361, %360
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %10, i32* %317, i32 %45, i32 %47) #15
  br label %365

365:                                              ; preds = %364, %359
  br i1 %352, label %367, label %366

366:                                              ; preds = %365
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %12, i32* %318, i32 %45, i32 %47) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %14, i32* %319, i32 %45, i32 %47) #15
  br label %370

367:                                              ; preds = %365
  %368 = zext i32 %45 to i64
  %369 = shl nuw nsw i64 %368, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %339, i8 0, i64 %369, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %12, i32* %318, i32 %45, i32 %47) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %338, i8 0, i64 %369, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %14, i32* %319, i32 %45, i32 %47) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %337, i8 0, i64 %369, i1 false) #15
  br label %370

370:                                              ; preds = %367, %366
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %16, i32* %320, i32 %45, i32 %47) #15
  br label %371

371:                                              ; preds = %370, %357
  br i1 %94, label %377, label %372

372:                                              ; preds = %371
  br i1 %352, label %373, label %376

373:                                              ; preds = %372
  %374 = zext i32 %45 to i64
  %375 = shl nuw nsw i64 %374, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %336, i8 0, i64 %375, i1 false) #15
  br label %376

376:                                              ; preds = %373, %372
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %18, i32* %322, i32 %45, i32 %48) #15
  br label %377

377:                                              ; preds = %376, %371
  br i1 %352, label %379, label %378

378:                                              ; preds = %377
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %20, i32* %324, i32 %45, i32 %48) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %22, i32* %325, i32 %45, i32 %48) #15
  br label %382

379:                                              ; preds = %377
  %380 = zext i32 %45 to i64
  %381 = shl nuw nsw i64 %380, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %335, i8 0, i64 %381, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %20, i32* %324, i32 %45, i32 %48) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %334, i8 0, i64 %381, i1 false) #15
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %22, i32* %325, i32 %45, i32 %48) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %333, i8 0, i64 %381, i1 false) #15
  br label %382

382:                                              ; preds = %379, %378
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %24, i32* %326, i32 %45, i32 %48) #15
  %383 = icmp eq i8* %40, null
  br i1 %383, label %390, label %384

384:                                              ; preds = %382
  %385 = icmp sgt i32 %48, 0
  br i1 %385, label %386, label %389

386:                                              ; preds = %384
  %387 = zext i32 %48 to i64
  %388 = shl nuw nsw i64 %387, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %332, i8 0, i64 %388, i1 false) #15
  br label %389

389:                                              ; preds = %386, %384
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* nonnull %40, i32* %328, i32 %48, i32 %45) #15
  br label %390

390:                                              ; preds = %382, %389
  store i8 0, i8* %68, align 1
  br label %391

391:                                              ; preds = %390, %316, %281
  %392 = phi i32* [ null, %281 ], [ %66, %316 ], [ %66, %390 ]
  %393 = phi i32* [ null, %281 ], [ %307, %316 ], [ %307, %390 ]
  %394 = phi i32* [ null, %281 ], [ %308, %316 ], [ %308, %390 ]
  %395 = phi i32* [ null, %281 ], [ %309, %316 ], [ %309, %390 ]
  %396 = phi i32* [ null, %281 ], [ %317, %316 ], [ %317, %390 ]
  %397 = phi i32* [ null, %281 ], [ %318, %316 ], [ %318, %390 ]
  %398 = phi i32* [ null, %281 ], [ %319, %316 ], [ %319, %390 ]
  %399 = phi i32* [ null, %281 ], [ %320, %316 ], [ %320, %390 ]
  %400 = phi i32* [ null, %281 ], [ %322, %316 ], [ %322, %390 ]
  %401 = phi i32* [ null, %281 ], [ %324, %316 ], [ %324, %390 ]
  %402 = phi i32* [ null, %281 ], [ %325, %316 ], [ %325, %390 ]
  %403 = phi i32* [ null, %281 ], [ %326, %316 ], [ %326, %390 ]
  %404 = phi i32* [ null, %281 ], [ %328, %316 ], [ %328, %390 ]
  %405 = mul nsw i32 %46, %44
  %406 = tail call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %0, i32 %405) #15
  br i1 %406, label %885, label %407

407:                                              ; preds = %391
  %408 = icmp sgt i32 %44, 0
  br i1 %408, label %409, label %429

409:                                              ; preds = %407
  %410 = bitcast float* %81 to i8*
  %411 = bitcast float* %82 to i8*
  %412 = sext i32 %46 to i64
  %413 = zext i32 %44 to i64
  br label %414

414:                                              ; preds = %426, %409
  %415 = phi i64 [ 0, %409 ], [ %427, %426 ]
  %416 = mul nsw i64 %415, %412
  br i1 %69, label %417, label %422

417:                                              ; preds = %414
  %418 = getelementptr inbounds float, float* %0, i64 %416
  %419 = getelementptr inbounds i8, i8* %57, i64 %416
  %420 = getelementptr inbounds float, float* %54, i64 %415
  %421 = getelementptr inbounds i32, i32* %65, i64 %415
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %418, i32 %46, i8* %419, float* %420, i32* %421) #15
  br label %426

422:                                              ; preds = %414
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %410) #15
  store float 0xFFFFFFFFE0000000, float* %81, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %411) #15
  store float 0xFFFFFFFFE0000000, float* %82, align 4
  %423 = getelementptr inbounds float, float* %0, i64 %416
  %424 = getelementptr inbounds i8, i8* %57, i64 %416
  %425 = getelementptr inbounds float, float* %54, i64 %415
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %423, i32 %46, i8* %424, float* nonnull %81, float* nonnull %82, float* %425) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %411) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %410) #15
  br label %426

426:                                              ; preds = %422, %417
  %427 = add nuw nsw i64 %415, 1
  %428 = icmp eq i64 %427, %413
  br i1 %428, label %429, label %414

429:                                              ; preds = %426, %407
  br i1 %94, label %545, label %430

430:                                              ; preds = %429
  br i1 %408, label %431, label %544

431:                                              ; preds = %430
  %432 = zext i32 %44 to i64
  %433 = icmp ult i32 %44, 8
  br i1 %433, label %502, label %434

434:                                              ; preds = %431
  %435 = getelementptr float, float* %55, i64 %432
  %436 = getelementptr float, float* %54, i64 %432
  %437 = icmp ugt float* %436, %55
  %438 = icmp ugt float* %435, %54
  %439 = and i1 %437, %438
  br i1 %439, label %502, label %440

440:                                              ; preds = %434
  %441 = and i64 %432, 4294967288
  %442 = insertelement <4 x float> undef, float %2, i32 0
  %443 = shufflevector <4 x float> %442, <4 x float> undef, <4 x i32> zeroinitializer
  %444 = insertelement <4 x float> undef, float %2, i32 0
  %445 = shufflevector <4 x float> %444, <4 x float> undef, <4 x i32> zeroinitializer
  %446 = add nsw i64 %441, -8
  %447 = lshr exact i64 %446, 3
  %448 = add nuw nsw i64 %447, 1
  %449 = and i64 %448, 1
  %450 = icmp eq i64 %446, 0
  br i1 %450, label %484, label %451

451:                                              ; preds = %440
  %452 = sub nuw nsw i64 %448, %449
  br label %453

453:                                              ; preds = %453, %451
  %454 = phi i64 [ 0, %451 ], [ %481, %453 ]
  %455 = phi i64 [ %452, %451 ], [ %482, %453 ]
  %456 = getelementptr inbounds float, float* %54, i64 %454
  %457 = bitcast float* %456 to <4 x float>*
  %458 = load <4 x float>, <4 x float>* %457, align 4, !alias.scope !169, !noalias !172
  %459 = getelementptr inbounds float, float* %456, i64 4
  %460 = bitcast float* %459 to <4 x float>*
  %461 = load <4 x float>, <4 x float>* %460, align 4, !alias.scope !169, !noalias !172
  %462 = fmul <4 x float> %458, %443
  %463 = fmul <4 x float> %461, %445
  %464 = getelementptr inbounds float, float* %55, i64 %454
  %465 = bitcast float* %464 to <4 x float>*
  store <4 x float> %462, <4 x float>* %465, align 4, !alias.scope !177, !noalias !179
  %466 = getelementptr inbounds float, float* %464, i64 4
  %467 = bitcast float* %466 to <4 x float>*
  store <4 x float> %463, <4 x float>* %467, align 4, !alias.scope !177, !noalias !179
  %468 = or i64 %454, 8
  %469 = getelementptr inbounds float, float* %54, i64 %468
  %470 = bitcast float* %469 to <4 x float>*
  %471 = load <4 x float>, <4 x float>* %470, align 4, !alias.scope !169, !noalias !172
  %472 = getelementptr inbounds float, float* %469, i64 4
  %473 = bitcast float* %472 to <4 x float>*
  %474 = load <4 x float>, <4 x float>* %473, align 4, !alias.scope !169, !noalias !172
  %475 = fmul <4 x float> %471, %443
  %476 = fmul <4 x float> %474, %445
  %477 = getelementptr inbounds float, float* %55, i64 %468
  %478 = bitcast float* %477 to <4 x float>*
  store <4 x float> %475, <4 x float>* %478, align 4, !alias.scope !177, !noalias !179
  %479 = getelementptr inbounds float, float* %477, i64 4
  %480 = bitcast float* %479 to <4 x float>*
  store <4 x float> %476, <4 x float>* %480, align 4, !alias.scope !177, !noalias !179
  %481 = add i64 %454, 16
  %482 = add i64 %455, -2
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %453, !llvm.loop !180

484:                                              ; preds = %453, %440
  %485 = phi i64 [ 0, %440 ], [ %481, %453 ]
  %486 = icmp eq i64 %449, 0
  br i1 %486, label %500, label %487

487:                                              ; preds = %484
  %488 = getelementptr inbounds float, float* %54, i64 %485
  %489 = bitcast float* %488 to <4 x float>*
  %490 = load <4 x float>, <4 x float>* %489, align 4, !alias.scope !169, !noalias !172
  %491 = getelementptr inbounds float, float* %488, i64 4
  %492 = bitcast float* %491 to <4 x float>*
  %493 = load <4 x float>, <4 x float>* %492, align 4, !alias.scope !169, !noalias !172
  %494 = fmul <4 x float> %490, %443
  %495 = fmul <4 x float> %493, %445
  %496 = getelementptr inbounds float, float* %55, i64 %485
  %497 = bitcast float* %496 to <4 x float>*
  store <4 x float> %494, <4 x float>* %497, align 4, !alias.scope !177, !noalias !179
  %498 = getelementptr inbounds float, float* %496, i64 4
  %499 = bitcast float* %498 to <4 x float>*
  store <4 x float> %495, <4 x float>* %499, align 4, !alias.scope !177, !noalias !179
  br label %500

500:                                              ; preds = %484, %487
  %501 = icmp eq i64 %441, %432
  br i1 %501, label %544, label %502

502:                                              ; preds = %500, %434, %431
  %503 = phi i64 [ 0, %434 ], [ 0, %431 ], [ %441, %500 ]
  %504 = xor i64 %503, -1
  %505 = add nsw i64 %504, %432
  %506 = and i64 %432, 3
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %518, label %508

508:                                              ; preds = %502, %508
  %509 = phi i64 [ %515, %508 ], [ %503, %502 ]
  %510 = phi i64 [ %516, %508 ], [ %506, %502 ]
  %511 = getelementptr inbounds float, float* %54, i64 %509
  %512 = load float, float* %511, align 4, !noalias !172
  %513 = fmul float %512, %2
  %514 = getelementptr inbounds float, float* %55, i64 %509
  store float %513, float* %514, align 4, !noalias !172
  %515 = add nuw nsw i64 %509, 1
  %516 = add i64 %510, -1
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %518, label %508, !llvm.loop !181

518:                                              ; preds = %508, %502
  %519 = phi i64 [ %503, %502 ], [ %515, %508 ]
  %520 = icmp ult i64 %505, 3
  br i1 %520, label %544, label %521

521:                                              ; preds = %518, %521
  %522 = phi i64 [ %542, %521 ], [ %519, %518 ]
  %523 = getelementptr inbounds float, float* %54, i64 %522
  %524 = load float, float* %523, align 4, !noalias !172
  %525 = fmul float %524, %2
  %526 = getelementptr inbounds float, float* %55, i64 %522
  store float %525, float* %526, align 4, !noalias !172
  %527 = add nuw nsw i64 %522, 1
  %528 = getelementptr inbounds float, float* %54, i64 %527
  %529 = load float, float* %528, align 4, !noalias !172
  %530 = fmul float %529, %2
  %531 = getelementptr inbounds float, float* %55, i64 %527
  store float %530, float* %531, align 4, !noalias !172
  %532 = add nuw nsw i64 %522, 2
  %533 = getelementptr inbounds float, float* %54, i64 %532
  %534 = load float, float* %533, align 4, !noalias !172
  %535 = fmul float %534, %2
  %536 = getelementptr inbounds float, float* %55, i64 %532
  store float %535, float* %536, align 4, !noalias !172
  %537 = add nuw nsw i64 %522, 3
  %538 = getelementptr inbounds float, float* %54, i64 %537
  %539 = load float, float* %538, align 4, !noalias !172
  %540 = fmul float %539, %2
  %541 = getelementptr inbounds float, float* %55, i64 %537
  store float %540, float* %541, align 4, !noalias !172
  %542 = add nuw nsw i64 %522, 4
  %543 = icmp eq i64 %542, %432
  br i1 %543, label %544, label %521, !llvm.loop !182

544:                                              ; preds = %518, %521, %500, %430
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* nonnull %1, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %50, float* null, i32* %65, i32* %63, i32* %392, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %545

545:                                              ; preds = %544, %429
  br i1 %408, label %546, label %771

546:                                              ; preds = %545
  %547 = zext i32 %44 to i64
  %548 = icmp ult i32 %44, 8
  br i1 %548, label %617, label %549

549:                                              ; preds = %546
  %550 = getelementptr float, float* %55, i64 %547
  %551 = getelementptr float, float* %54, i64 %547
  %552 = icmp ugt float* %551, %55
  %553 = icmp ugt float* %550, %54
  %554 = and i1 %552, %553
  br i1 %554, label %617, label %555

555:                                              ; preds = %549
  %556 = and i64 %547, 4294967288
  %557 = insertelement <4 x float> undef, float %4, i32 0
  %558 = shufflevector <4 x float> %557, <4 x float> undef, <4 x i32> zeroinitializer
  %559 = insertelement <4 x float> undef, float %4, i32 0
  %560 = shufflevector <4 x float> %559, <4 x float> undef, <4 x i32> zeroinitializer
  %561 = add nsw i64 %556, -8
  %562 = lshr exact i64 %561, 3
  %563 = add nuw nsw i64 %562, 1
  %564 = and i64 %563, 1
  %565 = icmp eq i64 %561, 0
  br i1 %565, label %599, label %566

566:                                              ; preds = %555
  %567 = sub nuw nsw i64 %563, %564
  br label %568

568:                                              ; preds = %568, %566
  %569 = phi i64 [ 0, %566 ], [ %596, %568 ]
  %570 = phi i64 [ %567, %566 ], [ %597, %568 ]
  %571 = getelementptr inbounds float, float* %54, i64 %569
  %572 = bitcast float* %571 to <4 x float>*
  %573 = load <4 x float>, <4 x float>* %572, align 4, !alias.scope !183, !noalias !186
  %574 = getelementptr inbounds float, float* %571, i64 4
  %575 = bitcast float* %574 to <4 x float>*
  %576 = load <4 x float>, <4 x float>* %575, align 4, !alias.scope !183, !noalias !186
  %577 = fmul <4 x float> %573, %558
  %578 = fmul <4 x float> %576, %560
  %579 = getelementptr inbounds float, float* %55, i64 %569
  %580 = bitcast float* %579 to <4 x float>*
  store <4 x float> %577, <4 x float>* %580, align 4, !alias.scope !191, !noalias !193
  %581 = getelementptr inbounds float, float* %579, i64 4
  %582 = bitcast float* %581 to <4 x float>*
  store <4 x float> %578, <4 x float>* %582, align 4, !alias.scope !191, !noalias !193
  %583 = or i64 %569, 8
  %584 = getelementptr inbounds float, float* %54, i64 %583
  %585 = bitcast float* %584 to <4 x float>*
  %586 = load <4 x float>, <4 x float>* %585, align 4, !alias.scope !183, !noalias !186
  %587 = getelementptr inbounds float, float* %584, i64 4
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 4, !alias.scope !183, !noalias !186
  %590 = fmul <4 x float> %586, %558
  %591 = fmul <4 x float> %589, %560
  %592 = getelementptr inbounds float, float* %55, i64 %583
  %593 = bitcast float* %592 to <4 x float>*
  store <4 x float> %590, <4 x float>* %593, align 4, !alias.scope !191, !noalias !193
  %594 = getelementptr inbounds float, float* %592, i64 4
  %595 = bitcast float* %594 to <4 x float>*
  store <4 x float> %591, <4 x float>* %595, align 4, !alias.scope !191, !noalias !193
  %596 = add i64 %569, 16
  %597 = add i64 %570, -2
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %568, !llvm.loop !194

599:                                              ; preds = %568, %555
  %600 = phi i64 [ 0, %555 ], [ %596, %568 ]
  %601 = icmp eq i64 %564, 0
  br i1 %601, label %615, label %602

602:                                              ; preds = %599
  %603 = getelementptr inbounds float, float* %54, i64 %600
  %604 = bitcast float* %603 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 4, !alias.scope !183, !noalias !186
  %606 = getelementptr inbounds float, float* %603, i64 4
  %607 = bitcast float* %606 to <4 x float>*
  %608 = load <4 x float>, <4 x float>* %607, align 4, !alias.scope !183, !noalias !186
  %609 = fmul <4 x float> %605, %558
  %610 = fmul <4 x float> %608, %560
  %611 = getelementptr inbounds float, float* %55, i64 %600
  %612 = bitcast float* %611 to <4 x float>*
  store <4 x float> %609, <4 x float>* %612, align 4, !alias.scope !191, !noalias !193
  %613 = getelementptr inbounds float, float* %611, i64 4
  %614 = bitcast float* %613 to <4 x float>*
  store <4 x float> %610, <4 x float>* %614, align 4, !alias.scope !191, !noalias !193
  br label %615

615:                                              ; preds = %599, %602
  %616 = icmp eq i64 %556, %547
  br i1 %616, label %659, label %617

617:                                              ; preds = %615, %549, %546
  %618 = phi i64 [ 0, %549 ], [ 0, %546 ], [ %556, %615 ]
  %619 = xor i64 %618, -1
  %620 = add nsw i64 %619, %547
  %621 = and i64 %547, 3
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %633, label %623

623:                                              ; preds = %617, %623
  %624 = phi i64 [ %630, %623 ], [ %618, %617 ]
  %625 = phi i64 [ %631, %623 ], [ %621, %617 ]
  %626 = getelementptr inbounds float, float* %54, i64 %624
  %627 = load float, float* %626, align 4, !noalias !186
  %628 = fmul float %627, %4
  %629 = getelementptr inbounds float, float* %55, i64 %624
  store float %628, float* %629, align 4, !noalias !186
  %630 = add nuw nsw i64 %624, 1
  %631 = add i64 %625, -1
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %633, label %623, !llvm.loop !195

633:                                              ; preds = %623, %617
  %634 = phi i64 [ %618, %617 ], [ %630, %623 ]
  %635 = icmp ult i64 %620, 3
  br i1 %635, label %659, label %636

636:                                              ; preds = %633, %636
  %637 = phi i64 [ %657, %636 ], [ %634, %633 ]
  %638 = getelementptr inbounds float, float* %54, i64 %637
  %639 = load float, float* %638, align 4, !noalias !186
  %640 = fmul float %639, %4
  %641 = getelementptr inbounds float, float* %55, i64 %637
  store float %640, float* %641, align 4, !noalias !186
  %642 = add nuw nsw i64 %637, 1
  %643 = getelementptr inbounds float, float* %54, i64 %642
  %644 = load float, float* %643, align 4, !noalias !186
  %645 = fmul float %644, %4
  %646 = getelementptr inbounds float, float* %55, i64 %642
  store float %645, float* %646, align 4, !noalias !186
  %647 = add nuw nsw i64 %637, 2
  %648 = getelementptr inbounds float, float* %54, i64 %647
  %649 = load float, float* %648, align 4, !noalias !186
  %650 = fmul float %649, %4
  %651 = getelementptr inbounds float, float* %55, i64 %647
  store float %650, float* %651, align 4, !noalias !186
  %652 = add nuw nsw i64 %637, 3
  %653 = getelementptr inbounds float, float* %54, i64 %652
  %654 = load float, float* %653, align 4, !noalias !186
  %655 = fmul float %654, %4
  %656 = getelementptr inbounds float, float* %55, i64 %652
  store float %655, float* %656, align 4, !noalias !186
  %657 = add nuw nsw i64 %637, 4
  %658 = icmp eq i64 %657, %547
  br i1 %658, label %659, label %636, !llvm.loop !196

659:                                              ; preds = %633, %636, %615
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %3, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %393, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %660 = icmp ult i32 %44, 8
  br i1 %660, label %729, label %661

661:                                              ; preds = %659
  %662 = getelementptr float, float* %55, i64 %547
  %663 = getelementptr float, float* %54, i64 %547
  %664 = icmp ugt float* %663, %55
  %665 = icmp ugt float* %662, %54
  %666 = and i1 %664, %665
  br i1 %666, label %729, label %667

667:                                              ; preds = %661
  %668 = and i64 %547, 4294967288
  %669 = insertelement <4 x float> undef, float %6, i32 0
  %670 = shufflevector <4 x float> %669, <4 x float> undef, <4 x i32> zeroinitializer
  %671 = insertelement <4 x float> undef, float %6, i32 0
  %672 = shufflevector <4 x float> %671, <4 x float> undef, <4 x i32> zeroinitializer
  %673 = add nsw i64 %668, -8
  %674 = lshr exact i64 %673, 3
  %675 = add nuw nsw i64 %674, 1
  %676 = and i64 %675, 1
  %677 = icmp eq i64 %673, 0
  br i1 %677, label %711, label %678

678:                                              ; preds = %667
  %679 = sub nuw nsw i64 %675, %676
  br label %680

680:                                              ; preds = %680, %678
  %681 = phi i64 [ 0, %678 ], [ %708, %680 ]
  %682 = phi i64 [ %679, %678 ], [ %709, %680 ]
  %683 = getelementptr inbounds float, float* %54, i64 %681
  %684 = bitcast float* %683 to <4 x float>*
  %685 = load <4 x float>, <4 x float>* %684, align 4, !alias.scope !197, !noalias !200
  %686 = getelementptr inbounds float, float* %683, i64 4
  %687 = bitcast float* %686 to <4 x float>*
  %688 = load <4 x float>, <4 x float>* %687, align 4, !alias.scope !197, !noalias !200
  %689 = fmul <4 x float> %685, %670
  %690 = fmul <4 x float> %688, %672
  %691 = getelementptr inbounds float, float* %55, i64 %681
  %692 = bitcast float* %691 to <4 x float>*
  store <4 x float> %689, <4 x float>* %692, align 4, !alias.scope !205, !noalias !207
  %693 = getelementptr inbounds float, float* %691, i64 4
  %694 = bitcast float* %693 to <4 x float>*
  store <4 x float> %690, <4 x float>* %694, align 4, !alias.scope !205, !noalias !207
  %695 = or i64 %681, 8
  %696 = getelementptr inbounds float, float* %54, i64 %695
  %697 = bitcast float* %696 to <4 x float>*
  %698 = load <4 x float>, <4 x float>* %697, align 4, !alias.scope !197, !noalias !200
  %699 = getelementptr inbounds float, float* %696, i64 4
  %700 = bitcast float* %699 to <4 x float>*
  %701 = load <4 x float>, <4 x float>* %700, align 4, !alias.scope !197, !noalias !200
  %702 = fmul <4 x float> %698, %670
  %703 = fmul <4 x float> %701, %672
  %704 = getelementptr inbounds float, float* %55, i64 %695
  %705 = bitcast float* %704 to <4 x float>*
  store <4 x float> %702, <4 x float>* %705, align 4, !alias.scope !205, !noalias !207
  %706 = getelementptr inbounds float, float* %704, i64 4
  %707 = bitcast float* %706 to <4 x float>*
  store <4 x float> %703, <4 x float>* %707, align 4, !alias.scope !205, !noalias !207
  %708 = add i64 %681, 16
  %709 = add i64 %682, -2
  %710 = icmp eq i64 %709, 0
  br i1 %710, label %711, label %680, !llvm.loop !208

711:                                              ; preds = %680, %667
  %712 = phi i64 [ 0, %667 ], [ %708, %680 ]
  %713 = icmp eq i64 %676, 0
  br i1 %713, label %727, label %714

714:                                              ; preds = %711
  %715 = getelementptr inbounds float, float* %54, i64 %712
  %716 = bitcast float* %715 to <4 x float>*
  %717 = load <4 x float>, <4 x float>* %716, align 4, !alias.scope !197, !noalias !200
  %718 = getelementptr inbounds float, float* %715, i64 4
  %719 = bitcast float* %718 to <4 x float>*
  %720 = load <4 x float>, <4 x float>* %719, align 4, !alias.scope !197, !noalias !200
  %721 = fmul <4 x float> %717, %670
  %722 = fmul <4 x float> %720, %672
  %723 = getelementptr inbounds float, float* %55, i64 %712
  %724 = bitcast float* %723 to <4 x float>*
  store <4 x float> %721, <4 x float>* %724, align 4, !alias.scope !205, !noalias !207
  %725 = getelementptr inbounds float, float* %723, i64 4
  %726 = bitcast float* %725 to <4 x float>*
  store <4 x float> %722, <4 x float>* %726, align 4, !alias.scope !205, !noalias !207
  br label %727

727:                                              ; preds = %711, %714
  %728 = icmp eq i64 %668, %547
  br i1 %728, label %772, label %729

729:                                              ; preds = %727, %661, %659
  %730 = phi i64 [ 0, %661 ], [ 0, %659 ], [ %668, %727 ]
  %731 = xor i64 %730, -1
  %732 = add nsw i64 %731, %547
  %733 = and i64 %547, 3
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %745, label %735

735:                                              ; preds = %729, %735
  %736 = phi i64 [ %742, %735 ], [ %730, %729 ]
  %737 = phi i64 [ %743, %735 ], [ %733, %729 ]
  %738 = getelementptr inbounds float, float* %54, i64 %736
  %739 = load float, float* %738, align 4, !noalias !200
  %740 = fmul float %739, %6
  %741 = getelementptr inbounds float, float* %55, i64 %736
  store float %740, float* %741, align 4, !noalias !200
  %742 = add nuw nsw i64 %736, 1
  %743 = add i64 %737, -1
  %744 = icmp eq i64 %743, 0
  br i1 %744, label %745, label %735, !llvm.loop !209

745:                                              ; preds = %735, %729
  %746 = phi i64 [ %730, %729 ], [ %742, %735 ]
  %747 = icmp ult i64 %732, 3
  br i1 %747, label %772, label %748

748:                                              ; preds = %745, %748
  %749 = phi i64 [ %769, %748 ], [ %746, %745 ]
  %750 = getelementptr inbounds float, float* %54, i64 %749
  %751 = load float, float* %750, align 4, !noalias !200
  %752 = fmul float %751, %6
  %753 = getelementptr inbounds float, float* %55, i64 %749
  store float %752, float* %753, align 4, !noalias !200
  %754 = add nuw nsw i64 %749, 1
  %755 = getelementptr inbounds float, float* %54, i64 %754
  %756 = load float, float* %755, align 4, !noalias !200
  %757 = fmul float %756, %6
  %758 = getelementptr inbounds float, float* %55, i64 %754
  store float %757, float* %758, align 4, !noalias !200
  %759 = add nuw nsw i64 %749, 2
  %760 = getelementptr inbounds float, float* %54, i64 %759
  %761 = load float, float* %760, align 4, !noalias !200
  %762 = fmul float %761, %6
  %763 = getelementptr inbounds float, float* %55, i64 %759
  store float %762, float* %763, align 4, !noalias !200
  %764 = add nuw nsw i64 %749, 3
  %765 = getelementptr inbounds float, float* %54, i64 %764
  %766 = load float, float* %765, align 4, !noalias !200
  %767 = fmul float %766, %6
  %768 = getelementptr inbounds float, float* %55, i64 %764
  store float %767, float* %768, align 4, !noalias !200
  %769 = add nuw nsw i64 %749, 4
  %770 = icmp eq i64 %769, %547
  br i1 %770, label %772, label %748, !llvm.loop !210

771:                                              ; preds = %545
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %3, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %393, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %5, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %394, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %884

772:                                              ; preds = %745, %748, %727
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %5, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %394, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %773 = icmp ult i32 %44, 8
  br i1 %773, label %842, label %774

774:                                              ; preds = %772
  %775 = getelementptr float, float* %55, i64 %547
  %776 = getelementptr float, float* %54, i64 %547
  %777 = icmp ugt float* %776, %55
  %778 = icmp ugt float* %775, %54
  %779 = and i1 %777, %778
  br i1 %779, label %842, label %780

780:                                              ; preds = %774
  %781 = and i64 %547, 4294967288
  %782 = insertelement <4 x float> undef, float %8, i32 0
  %783 = shufflevector <4 x float> %782, <4 x float> undef, <4 x i32> zeroinitializer
  %784 = insertelement <4 x float> undef, float %8, i32 0
  %785 = shufflevector <4 x float> %784, <4 x float> undef, <4 x i32> zeroinitializer
  %786 = add nsw i64 %781, -8
  %787 = lshr exact i64 %786, 3
  %788 = add nuw nsw i64 %787, 1
  %789 = and i64 %788, 1
  %790 = icmp eq i64 %786, 0
  br i1 %790, label %824, label %791

791:                                              ; preds = %780
  %792 = sub nuw nsw i64 %788, %789
  br label %793

793:                                              ; preds = %793, %791
  %794 = phi i64 [ 0, %791 ], [ %821, %793 ]
  %795 = phi i64 [ %792, %791 ], [ %822, %793 ]
  %796 = getelementptr inbounds float, float* %54, i64 %794
  %797 = bitcast float* %796 to <4 x float>*
  %798 = load <4 x float>, <4 x float>* %797, align 4, !alias.scope !211, !noalias !214
  %799 = getelementptr inbounds float, float* %796, i64 4
  %800 = bitcast float* %799 to <4 x float>*
  %801 = load <4 x float>, <4 x float>* %800, align 4, !alias.scope !211, !noalias !214
  %802 = fmul <4 x float> %798, %783
  %803 = fmul <4 x float> %801, %785
  %804 = getelementptr inbounds float, float* %55, i64 %794
  %805 = bitcast float* %804 to <4 x float>*
  store <4 x float> %802, <4 x float>* %805, align 4, !alias.scope !219, !noalias !221
  %806 = getelementptr inbounds float, float* %804, i64 4
  %807 = bitcast float* %806 to <4 x float>*
  store <4 x float> %803, <4 x float>* %807, align 4, !alias.scope !219, !noalias !221
  %808 = or i64 %794, 8
  %809 = getelementptr inbounds float, float* %54, i64 %808
  %810 = bitcast float* %809 to <4 x float>*
  %811 = load <4 x float>, <4 x float>* %810, align 4, !alias.scope !211, !noalias !214
  %812 = getelementptr inbounds float, float* %809, i64 4
  %813 = bitcast float* %812 to <4 x float>*
  %814 = load <4 x float>, <4 x float>* %813, align 4, !alias.scope !211, !noalias !214
  %815 = fmul <4 x float> %811, %783
  %816 = fmul <4 x float> %814, %785
  %817 = getelementptr inbounds float, float* %55, i64 %808
  %818 = bitcast float* %817 to <4 x float>*
  store <4 x float> %815, <4 x float>* %818, align 4, !alias.scope !219, !noalias !221
  %819 = getelementptr inbounds float, float* %817, i64 4
  %820 = bitcast float* %819 to <4 x float>*
  store <4 x float> %816, <4 x float>* %820, align 4, !alias.scope !219, !noalias !221
  %821 = add i64 %794, 16
  %822 = add i64 %795, -2
  %823 = icmp eq i64 %822, 0
  br i1 %823, label %824, label %793, !llvm.loop !222

824:                                              ; preds = %793, %780
  %825 = phi i64 [ 0, %780 ], [ %821, %793 ]
  %826 = icmp eq i64 %789, 0
  br i1 %826, label %840, label %827

827:                                              ; preds = %824
  %828 = getelementptr inbounds float, float* %54, i64 %825
  %829 = bitcast float* %828 to <4 x float>*
  %830 = load <4 x float>, <4 x float>* %829, align 4, !alias.scope !211, !noalias !214
  %831 = getelementptr inbounds float, float* %828, i64 4
  %832 = bitcast float* %831 to <4 x float>*
  %833 = load <4 x float>, <4 x float>* %832, align 4, !alias.scope !211, !noalias !214
  %834 = fmul <4 x float> %830, %783
  %835 = fmul <4 x float> %833, %785
  %836 = getelementptr inbounds float, float* %55, i64 %825
  %837 = bitcast float* %836 to <4 x float>*
  store <4 x float> %834, <4 x float>* %837, align 4, !alias.scope !219, !noalias !221
  %838 = getelementptr inbounds float, float* %836, i64 4
  %839 = bitcast float* %838 to <4 x float>*
  store <4 x float> %835, <4 x float>* %839, align 4, !alias.scope !219, !noalias !221
  br label %840

840:                                              ; preds = %824, %827
  %841 = icmp eq i64 %781, %547
  br i1 %841, label %884, label %842

842:                                              ; preds = %840, %774, %772
  %843 = phi i64 [ 0, %774 ], [ 0, %772 ], [ %781, %840 ]
  %844 = xor i64 %843, -1
  %845 = add nsw i64 %844, %547
  %846 = and i64 %547, 3
  %847 = icmp eq i64 %846, 0
  br i1 %847, label %858, label %848

848:                                              ; preds = %842, %848
  %849 = phi i64 [ %855, %848 ], [ %843, %842 ]
  %850 = phi i64 [ %856, %848 ], [ %846, %842 ]
  %851 = getelementptr inbounds float, float* %54, i64 %849
  %852 = load float, float* %851, align 4, !noalias !214
  %853 = fmul float %852, %8
  %854 = getelementptr inbounds float, float* %55, i64 %849
  store float %853, float* %854, align 4, !noalias !214
  %855 = add nuw nsw i64 %849, 1
  %856 = add i64 %850, -1
  %857 = icmp eq i64 %856, 0
  br i1 %857, label %858, label %848, !llvm.loop !223

858:                                              ; preds = %848, %842
  %859 = phi i64 [ %843, %842 ], [ %855, %848 ]
  %860 = icmp ult i64 %845, 3
  br i1 %860, label %884, label %861

861:                                              ; preds = %858, %861
  %862 = phi i64 [ %882, %861 ], [ %859, %858 ]
  %863 = getelementptr inbounds float, float* %54, i64 %862
  %864 = load float, float* %863, align 4, !noalias !214
  %865 = fmul float %864, %8
  %866 = getelementptr inbounds float, float* %55, i64 %862
  store float %865, float* %866, align 4, !noalias !214
  %867 = add nuw nsw i64 %862, 1
  %868 = getelementptr inbounds float, float* %54, i64 %867
  %869 = load float, float* %868, align 4, !noalias !214
  %870 = fmul float %869, %8
  %871 = getelementptr inbounds float, float* %55, i64 %867
  store float %870, float* %871, align 4, !noalias !214
  %872 = add nuw nsw i64 %862, 2
  %873 = getelementptr inbounds float, float* %54, i64 %872
  %874 = load float, float* %873, align 4, !noalias !214
  %875 = fmul float %874, %8
  %876 = getelementptr inbounds float, float* %55, i64 %872
  store float %875, float* %876, align 4, !noalias !214
  %877 = add nuw nsw i64 %862, 3
  %878 = getelementptr inbounds float, float* %54, i64 %877
  %879 = load float, float* %878, align 4, !noalias !214
  %880 = fmul float %879, %8
  %881 = getelementptr inbounds float, float* %55, i64 %877
  store float %880, float* %881, align 4, !noalias !214
  %882 = add nuw nsw i64 %862, 4
  %883 = icmp eq i64 %882, %547
  br i1 %883, label %884, label %861, !llvm.loop !224

884:                                              ; preds = %858, %861, %840, %771
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %7, i32 %45, i32 %46, i8* %57, float* %55, i32 %44, float* %53, float* null, i32* %65, i32* %63, i32* %395, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %885

885:                                              ; preds = %884, %391
  %886 = icmp eq float* %9, null
  br i1 %886, label %1368, label %887

887:                                              ; preds = %885
  %888 = mul nsw i32 %47, %44
  %889 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* nonnull %9, i32 %888) #15
  br i1 %889, label %1368, label %890

890:                                              ; preds = %887
  %891 = icmp sgt i32 %44, 0
  br i1 %891, label %892, label %912

892:                                              ; preds = %890
  %893 = bitcast float* %79 to i8*
  %894 = bitcast float* %80 to i8*
  %895 = sext i32 %47 to i64
  %896 = zext i32 %44 to i64
  br label %897

897:                                              ; preds = %909, %892
  %898 = phi i64 [ 0, %892 ], [ %910, %909 ]
  %899 = mul nsw i64 %898, %895
  br i1 %69, label %900, label %905

900:                                              ; preds = %897
  %901 = getelementptr inbounds float, float* %9, i64 %899
  %902 = getelementptr inbounds i8, i8* %58, i64 %899
  %903 = getelementptr inbounds float, float* %54, i64 %898
  %904 = getelementptr inbounds i32, i32* %65, i64 %898
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %901, i32 %47, i8* %902, float* %903, i32* %904) #15
  br label %909

905:                                              ; preds = %897
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %893) #15
  store float 0xFFFFFFFFE0000000, float* %79, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %894) #15
  store float 0xFFFFFFFFE0000000, float* %80, align 4
  %906 = getelementptr inbounds float, float* %9, i64 %899
  %907 = getelementptr inbounds i8, i8* %58, i64 %899
  %908 = getelementptr inbounds float, float* %54, i64 %898
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %906, i32 %47, i8* %907, float* nonnull %79, float* nonnull %80, float* %908) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %894) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %893) #15
  br label %909

909:                                              ; preds = %905, %900
  %910 = add nuw nsw i64 %898, 1
  %911 = icmp eq i64 %910, %896
  br i1 %911, label %912, label %897

912:                                              ; preds = %909, %890
  br i1 %94, label %1028, label %913

913:                                              ; preds = %912
  br i1 %891, label %914, label %1027

914:                                              ; preds = %913
  %915 = zext i32 %44 to i64
  %916 = icmp ult i32 %44, 8
  br i1 %916, label %985, label %917

917:                                              ; preds = %914
  %918 = getelementptr float, float* %55, i64 %915
  %919 = getelementptr float, float* %54, i64 %915
  %920 = icmp ugt float* %919, %55
  %921 = icmp ugt float* %918, %54
  %922 = and i1 %920, %921
  br i1 %922, label %985, label %923

923:                                              ; preds = %917
  %924 = and i64 %915, 4294967288
  %925 = insertelement <4 x float> undef, float %11, i32 0
  %926 = shufflevector <4 x float> %925, <4 x float> undef, <4 x i32> zeroinitializer
  %927 = insertelement <4 x float> undef, float %11, i32 0
  %928 = shufflevector <4 x float> %927, <4 x float> undef, <4 x i32> zeroinitializer
  %929 = add nsw i64 %924, -8
  %930 = lshr exact i64 %929, 3
  %931 = add nuw nsw i64 %930, 1
  %932 = and i64 %931, 1
  %933 = icmp eq i64 %929, 0
  br i1 %933, label %967, label %934

934:                                              ; preds = %923
  %935 = sub nuw nsw i64 %931, %932
  br label %936

936:                                              ; preds = %936, %934
  %937 = phi i64 [ 0, %934 ], [ %964, %936 ]
  %938 = phi i64 [ %935, %934 ], [ %965, %936 ]
  %939 = getelementptr inbounds float, float* %54, i64 %937
  %940 = bitcast float* %939 to <4 x float>*
  %941 = load <4 x float>, <4 x float>* %940, align 4, !alias.scope !225, !noalias !228
  %942 = getelementptr inbounds float, float* %939, i64 4
  %943 = bitcast float* %942 to <4 x float>*
  %944 = load <4 x float>, <4 x float>* %943, align 4, !alias.scope !225, !noalias !228
  %945 = fmul <4 x float> %941, %926
  %946 = fmul <4 x float> %944, %928
  %947 = getelementptr inbounds float, float* %55, i64 %937
  %948 = bitcast float* %947 to <4 x float>*
  store <4 x float> %945, <4 x float>* %948, align 4, !alias.scope !233, !noalias !235
  %949 = getelementptr inbounds float, float* %947, i64 4
  %950 = bitcast float* %949 to <4 x float>*
  store <4 x float> %946, <4 x float>* %950, align 4, !alias.scope !233, !noalias !235
  %951 = or i64 %937, 8
  %952 = getelementptr inbounds float, float* %54, i64 %951
  %953 = bitcast float* %952 to <4 x float>*
  %954 = load <4 x float>, <4 x float>* %953, align 4, !alias.scope !225, !noalias !228
  %955 = getelementptr inbounds float, float* %952, i64 4
  %956 = bitcast float* %955 to <4 x float>*
  %957 = load <4 x float>, <4 x float>* %956, align 4, !alias.scope !225, !noalias !228
  %958 = fmul <4 x float> %954, %926
  %959 = fmul <4 x float> %957, %928
  %960 = getelementptr inbounds float, float* %55, i64 %951
  %961 = bitcast float* %960 to <4 x float>*
  store <4 x float> %958, <4 x float>* %961, align 4, !alias.scope !233, !noalias !235
  %962 = getelementptr inbounds float, float* %960, i64 4
  %963 = bitcast float* %962 to <4 x float>*
  store <4 x float> %959, <4 x float>* %963, align 4, !alias.scope !233, !noalias !235
  %964 = add i64 %937, 16
  %965 = add i64 %938, -2
  %966 = icmp eq i64 %965, 0
  br i1 %966, label %967, label %936, !llvm.loop !236

967:                                              ; preds = %936, %923
  %968 = phi i64 [ 0, %923 ], [ %964, %936 ]
  %969 = icmp eq i64 %932, 0
  br i1 %969, label %983, label %970

970:                                              ; preds = %967
  %971 = getelementptr inbounds float, float* %54, i64 %968
  %972 = bitcast float* %971 to <4 x float>*
  %973 = load <4 x float>, <4 x float>* %972, align 4, !alias.scope !225, !noalias !228
  %974 = getelementptr inbounds float, float* %971, i64 4
  %975 = bitcast float* %974 to <4 x float>*
  %976 = load <4 x float>, <4 x float>* %975, align 4, !alias.scope !225, !noalias !228
  %977 = fmul <4 x float> %973, %926
  %978 = fmul <4 x float> %976, %928
  %979 = getelementptr inbounds float, float* %55, i64 %968
  %980 = bitcast float* %979 to <4 x float>*
  store <4 x float> %977, <4 x float>* %980, align 4, !alias.scope !233, !noalias !235
  %981 = getelementptr inbounds float, float* %979, i64 4
  %982 = bitcast float* %981 to <4 x float>*
  store <4 x float> %978, <4 x float>* %982, align 4, !alias.scope !233, !noalias !235
  br label %983

983:                                              ; preds = %967, %970
  %984 = icmp eq i64 %924, %915
  br i1 %984, label %1027, label %985

985:                                              ; preds = %983, %917, %914
  %986 = phi i64 [ 0, %917 ], [ 0, %914 ], [ %924, %983 ]
  %987 = xor i64 %986, -1
  %988 = add nsw i64 %987, %915
  %989 = and i64 %915, 3
  %990 = icmp eq i64 %989, 0
  br i1 %990, label %1001, label %991

991:                                              ; preds = %985, %991
  %992 = phi i64 [ %998, %991 ], [ %986, %985 ]
  %993 = phi i64 [ %999, %991 ], [ %989, %985 ]
  %994 = getelementptr inbounds float, float* %54, i64 %992
  %995 = load float, float* %994, align 4, !noalias !228
  %996 = fmul float %995, %11
  %997 = getelementptr inbounds float, float* %55, i64 %992
  store float %996, float* %997, align 4, !noalias !228
  %998 = add nuw nsw i64 %992, 1
  %999 = add i64 %993, -1
  %1000 = icmp eq i64 %999, 0
  br i1 %1000, label %1001, label %991, !llvm.loop !237

1001:                                             ; preds = %991, %985
  %1002 = phi i64 [ %986, %985 ], [ %998, %991 ]
  %1003 = icmp ult i64 %988, 3
  br i1 %1003, label %1027, label %1004

1004:                                             ; preds = %1001, %1004
  %1005 = phi i64 [ %1025, %1004 ], [ %1002, %1001 ]
  %1006 = getelementptr inbounds float, float* %54, i64 %1005
  %1007 = load float, float* %1006, align 4, !noalias !228
  %1008 = fmul float %1007, %11
  %1009 = getelementptr inbounds float, float* %55, i64 %1005
  store float %1008, float* %1009, align 4, !noalias !228
  %1010 = add nuw nsw i64 %1005, 1
  %1011 = getelementptr inbounds float, float* %54, i64 %1010
  %1012 = load float, float* %1011, align 4, !noalias !228
  %1013 = fmul float %1012, %11
  %1014 = getelementptr inbounds float, float* %55, i64 %1010
  store float %1013, float* %1014, align 4, !noalias !228
  %1015 = add nuw nsw i64 %1005, 2
  %1016 = getelementptr inbounds float, float* %54, i64 %1015
  %1017 = load float, float* %1016, align 4, !noalias !228
  %1018 = fmul float %1017, %11
  %1019 = getelementptr inbounds float, float* %55, i64 %1015
  store float %1018, float* %1019, align 4, !noalias !228
  %1020 = add nuw nsw i64 %1005, 3
  %1021 = getelementptr inbounds float, float* %54, i64 %1020
  %1022 = load float, float* %1021, align 4, !noalias !228
  %1023 = fmul float %1022, %11
  %1024 = getelementptr inbounds float, float* %55, i64 %1020
  store float %1023, float* %1024, align 4, !noalias !228
  %1025 = add nuw nsw i64 %1005, 4
  %1026 = icmp eq i64 %1025, %915
  br i1 %1026, label %1027, label %1004, !llvm.loop !238

1027:                                             ; preds = %1001, %1004, %983, %913
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %10, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %50, float* null, i32* %65, i32* %63, i32* %396, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1028

1028:                                             ; preds = %1027, %912
  br i1 %891, label %1029, label %1254

1029:                                             ; preds = %1028
  %1030 = zext i32 %44 to i64
  %1031 = icmp ult i32 %44, 8
  br i1 %1031, label %1100, label %1032

1032:                                             ; preds = %1029
  %1033 = getelementptr float, float* %55, i64 %1030
  %1034 = getelementptr float, float* %54, i64 %1030
  %1035 = icmp ugt float* %1034, %55
  %1036 = icmp ugt float* %1033, %54
  %1037 = and i1 %1035, %1036
  br i1 %1037, label %1100, label %1038

1038:                                             ; preds = %1032
  %1039 = and i64 %1030, 4294967288
  %1040 = insertelement <4 x float> undef, float %13, i32 0
  %1041 = shufflevector <4 x float> %1040, <4 x float> undef, <4 x i32> zeroinitializer
  %1042 = insertelement <4 x float> undef, float %13, i32 0
  %1043 = shufflevector <4 x float> %1042, <4 x float> undef, <4 x i32> zeroinitializer
  %1044 = add nsw i64 %1039, -8
  %1045 = lshr exact i64 %1044, 3
  %1046 = add nuw nsw i64 %1045, 1
  %1047 = and i64 %1046, 1
  %1048 = icmp eq i64 %1044, 0
  br i1 %1048, label %1082, label %1049

1049:                                             ; preds = %1038
  %1050 = sub nuw nsw i64 %1046, %1047
  br label %1051

1051:                                             ; preds = %1051, %1049
  %1052 = phi i64 [ 0, %1049 ], [ %1079, %1051 ]
  %1053 = phi i64 [ %1050, %1049 ], [ %1080, %1051 ]
  %1054 = getelementptr inbounds float, float* %54, i64 %1052
  %1055 = bitcast float* %1054 to <4 x float>*
  %1056 = load <4 x float>, <4 x float>* %1055, align 4, !alias.scope !239, !noalias !242
  %1057 = getelementptr inbounds float, float* %1054, i64 4
  %1058 = bitcast float* %1057 to <4 x float>*
  %1059 = load <4 x float>, <4 x float>* %1058, align 4, !alias.scope !239, !noalias !242
  %1060 = fmul <4 x float> %1056, %1041
  %1061 = fmul <4 x float> %1059, %1043
  %1062 = getelementptr inbounds float, float* %55, i64 %1052
  %1063 = bitcast float* %1062 to <4 x float>*
  store <4 x float> %1060, <4 x float>* %1063, align 4, !alias.scope !247, !noalias !249
  %1064 = getelementptr inbounds float, float* %1062, i64 4
  %1065 = bitcast float* %1064 to <4 x float>*
  store <4 x float> %1061, <4 x float>* %1065, align 4, !alias.scope !247, !noalias !249
  %1066 = or i64 %1052, 8
  %1067 = getelementptr inbounds float, float* %54, i64 %1066
  %1068 = bitcast float* %1067 to <4 x float>*
  %1069 = load <4 x float>, <4 x float>* %1068, align 4, !alias.scope !239, !noalias !242
  %1070 = getelementptr inbounds float, float* %1067, i64 4
  %1071 = bitcast float* %1070 to <4 x float>*
  %1072 = load <4 x float>, <4 x float>* %1071, align 4, !alias.scope !239, !noalias !242
  %1073 = fmul <4 x float> %1069, %1041
  %1074 = fmul <4 x float> %1072, %1043
  %1075 = getelementptr inbounds float, float* %55, i64 %1066
  %1076 = bitcast float* %1075 to <4 x float>*
  store <4 x float> %1073, <4 x float>* %1076, align 4, !alias.scope !247, !noalias !249
  %1077 = getelementptr inbounds float, float* %1075, i64 4
  %1078 = bitcast float* %1077 to <4 x float>*
  store <4 x float> %1074, <4 x float>* %1078, align 4, !alias.scope !247, !noalias !249
  %1079 = add i64 %1052, 16
  %1080 = add i64 %1053, -2
  %1081 = icmp eq i64 %1080, 0
  br i1 %1081, label %1082, label %1051, !llvm.loop !250

1082:                                             ; preds = %1051, %1038
  %1083 = phi i64 [ 0, %1038 ], [ %1079, %1051 ]
  %1084 = icmp eq i64 %1047, 0
  br i1 %1084, label %1098, label %1085

1085:                                             ; preds = %1082
  %1086 = getelementptr inbounds float, float* %54, i64 %1083
  %1087 = bitcast float* %1086 to <4 x float>*
  %1088 = load <4 x float>, <4 x float>* %1087, align 4, !alias.scope !239, !noalias !242
  %1089 = getelementptr inbounds float, float* %1086, i64 4
  %1090 = bitcast float* %1089 to <4 x float>*
  %1091 = load <4 x float>, <4 x float>* %1090, align 4, !alias.scope !239, !noalias !242
  %1092 = fmul <4 x float> %1088, %1041
  %1093 = fmul <4 x float> %1091, %1043
  %1094 = getelementptr inbounds float, float* %55, i64 %1083
  %1095 = bitcast float* %1094 to <4 x float>*
  store <4 x float> %1092, <4 x float>* %1095, align 4, !alias.scope !247, !noalias !249
  %1096 = getelementptr inbounds float, float* %1094, i64 4
  %1097 = bitcast float* %1096 to <4 x float>*
  store <4 x float> %1093, <4 x float>* %1097, align 4, !alias.scope !247, !noalias !249
  br label %1098

1098:                                             ; preds = %1082, %1085
  %1099 = icmp eq i64 %1039, %1030
  br i1 %1099, label %1142, label %1100

1100:                                             ; preds = %1098, %1032, %1029
  %1101 = phi i64 [ 0, %1032 ], [ 0, %1029 ], [ %1039, %1098 ]
  %1102 = xor i64 %1101, -1
  %1103 = add nsw i64 %1102, %1030
  %1104 = and i64 %1030, 3
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1116, label %1106

1106:                                             ; preds = %1100, %1106
  %1107 = phi i64 [ %1113, %1106 ], [ %1101, %1100 ]
  %1108 = phi i64 [ %1114, %1106 ], [ %1104, %1100 ]
  %1109 = getelementptr inbounds float, float* %54, i64 %1107
  %1110 = load float, float* %1109, align 4, !noalias !242
  %1111 = fmul float %1110, %13
  %1112 = getelementptr inbounds float, float* %55, i64 %1107
  store float %1111, float* %1112, align 4, !noalias !242
  %1113 = add nuw nsw i64 %1107, 1
  %1114 = add i64 %1108, -1
  %1115 = icmp eq i64 %1114, 0
  br i1 %1115, label %1116, label %1106, !llvm.loop !251

1116:                                             ; preds = %1106, %1100
  %1117 = phi i64 [ %1101, %1100 ], [ %1113, %1106 ]
  %1118 = icmp ult i64 %1103, 3
  br i1 %1118, label %1142, label %1119

1119:                                             ; preds = %1116, %1119
  %1120 = phi i64 [ %1140, %1119 ], [ %1117, %1116 ]
  %1121 = getelementptr inbounds float, float* %54, i64 %1120
  %1122 = load float, float* %1121, align 4, !noalias !242
  %1123 = fmul float %1122, %13
  %1124 = getelementptr inbounds float, float* %55, i64 %1120
  store float %1123, float* %1124, align 4, !noalias !242
  %1125 = add nuw nsw i64 %1120, 1
  %1126 = getelementptr inbounds float, float* %54, i64 %1125
  %1127 = load float, float* %1126, align 4, !noalias !242
  %1128 = fmul float %1127, %13
  %1129 = getelementptr inbounds float, float* %55, i64 %1125
  store float %1128, float* %1129, align 4, !noalias !242
  %1130 = add nuw nsw i64 %1120, 2
  %1131 = getelementptr inbounds float, float* %54, i64 %1130
  %1132 = load float, float* %1131, align 4, !noalias !242
  %1133 = fmul float %1132, %13
  %1134 = getelementptr inbounds float, float* %55, i64 %1130
  store float %1133, float* %1134, align 4, !noalias !242
  %1135 = add nuw nsw i64 %1120, 3
  %1136 = getelementptr inbounds float, float* %54, i64 %1135
  %1137 = load float, float* %1136, align 4, !noalias !242
  %1138 = fmul float %1137, %13
  %1139 = getelementptr inbounds float, float* %55, i64 %1135
  store float %1138, float* %1139, align 4, !noalias !242
  %1140 = add nuw nsw i64 %1120, 4
  %1141 = icmp eq i64 %1140, %1030
  br i1 %1141, label %1142, label %1119, !llvm.loop !252

1142:                                             ; preds = %1116, %1119, %1098
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %12, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %397, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %1143 = icmp ult i32 %44, 8
  br i1 %1143, label %1212, label %1144

1144:                                             ; preds = %1142
  %1145 = getelementptr float, float* %55, i64 %1030
  %1146 = getelementptr float, float* %54, i64 %1030
  %1147 = icmp ugt float* %1146, %55
  %1148 = icmp ugt float* %1145, %54
  %1149 = and i1 %1147, %1148
  br i1 %1149, label %1212, label %1150

1150:                                             ; preds = %1144
  %1151 = and i64 %1030, 4294967288
  %1152 = insertelement <4 x float> undef, float %15, i32 0
  %1153 = shufflevector <4 x float> %1152, <4 x float> undef, <4 x i32> zeroinitializer
  %1154 = insertelement <4 x float> undef, float %15, i32 0
  %1155 = shufflevector <4 x float> %1154, <4 x float> undef, <4 x i32> zeroinitializer
  %1156 = add nsw i64 %1151, -8
  %1157 = lshr exact i64 %1156, 3
  %1158 = add nuw nsw i64 %1157, 1
  %1159 = and i64 %1158, 1
  %1160 = icmp eq i64 %1156, 0
  br i1 %1160, label %1194, label %1161

1161:                                             ; preds = %1150
  %1162 = sub nuw nsw i64 %1158, %1159
  br label %1163

1163:                                             ; preds = %1163, %1161
  %1164 = phi i64 [ 0, %1161 ], [ %1191, %1163 ]
  %1165 = phi i64 [ %1162, %1161 ], [ %1192, %1163 ]
  %1166 = getelementptr inbounds float, float* %54, i64 %1164
  %1167 = bitcast float* %1166 to <4 x float>*
  %1168 = load <4 x float>, <4 x float>* %1167, align 4, !alias.scope !253, !noalias !256
  %1169 = getelementptr inbounds float, float* %1166, i64 4
  %1170 = bitcast float* %1169 to <4 x float>*
  %1171 = load <4 x float>, <4 x float>* %1170, align 4, !alias.scope !253, !noalias !256
  %1172 = fmul <4 x float> %1168, %1153
  %1173 = fmul <4 x float> %1171, %1155
  %1174 = getelementptr inbounds float, float* %55, i64 %1164
  %1175 = bitcast float* %1174 to <4 x float>*
  store <4 x float> %1172, <4 x float>* %1175, align 4, !alias.scope !261, !noalias !263
  %1176 = getelementptr inbounds float, float* %1174, i64 4
  %1177 = bitcast float* %1176 to <4 x float>*
  store <4 x float> %1173, <4 x float>* %1177, align 4, !alias.scope !261, !noalias !263
  %1178 = or i64 %1164, 8
  %1179 = getelementptr inbounds float, float* %54, i64 %1178
  %1180 = bitcast float* %1179 to <4 x float>*
  %1181 = load <4 x float>, <4 x float>* %1180, align 4, !alias.scope !253, !noalias !256
  %1182 = getelementptr inbounds float, float* %1179, i64 4
  %1183 = bitcast float* %1182 to <4 x float>*
  %1184 = load <4 x float>, <4 x float>* %1183, align 4, !alias.scope !253, !noalias !256
  %1185 = fmul <4 x float> %1181, %1153
  %1186 = fmul <4 x float> %1184, %1155
  %1187 = getelementptr inbounds float, float* %55, i64 %1178
  %1188 = bitcast float* %1187 to <4 x float>*
  store <4 x float> %1185, <4 x float>* %1188, align 4, !alias.scope !261, !noalias !263
  %1189 = getelementptr inbounds float, float* %1187, i64 4
  %1190 = bitcast float* %1189 to <4 x float>*
  store <4 x float> %1186, <4 x float>* %1190, align 4, !alias.scope !261, !noalias !263
  %1191 = add i64 %1164, 16
  %1192 = add i64 %1165, -2
  %1193 = icmp eq i64 %1192, 0
  br i1 %1193, label %1194, label %1163, !llvm.loop !264

1194:                                             ; preds = %1163, %1150
  %1195 = phi i64 [ 0, %1150 ], [ %1191, %1163 ]
  %1196 = icmp eq i64 %1159, 0
  br i1 %1196, label %1210, label %1197

1197:                                             ; preds = %1194
  %1198 = getelementptr inbounds float, float* %54, i64 %1195
  %1199 = bitcast float* %1198 to <4 x float>*
  %1200 = load <4 x float>, <4 x float>* %1199, align 4, !alias.scope !253, !noalias !256
  %1201 = getelementptr inbounds float, float* %1198, i64 4
  %1202 = bitcast float* %1201 to <4 x float>*
  %1203 = load <4 x float>, <4 x float>* %1202, align 4, !alias.scope !253, !noalias !256
  %1204 = fmul <4 x float> %1200, %1153
  %1205 = fmul <4 x float> %1203, %1155
  %1206 = getelementptr inbounds float, float* %55, i64 %1195
  %1207 = bitcast float* %1206 to <4 x float>*
  store <4 x float> %1204, <4 x float>* %1207, align 4, !alias.scope !261, !noalias !263
  %1208 = getelementptr inbounds float, float* %1206, i64 4
  %1209 = bitcast float* %1208 to <4 x float>*
  store <4 x float> %1205, <4 x float>* %1209, align 4, !alias.scope !261, !noalias !263
  br label %1210

1210:                                             ; preds = %1194, %1197
  %1211 = icmp eq i64 %1151, %1030
  br i1 %1211, label %1255, label %1212

1212:                                             ; preds = %1210, %1144, %1142
  %1213 = phi i64 [ 0, %1144 ], [ 0, %1142 ], [ %1151, %1210 ]
  %1214 = xor i64 %1213, -1
  %1215 = add nsw i64 %1214, %1030
  %1216 = and i64 %1030, 3
  %1217 = icmp eq i64 %1216, 0
  br i1 %1217, label %1228, label %1218

1218:                                             ; preds = %1212, %1218
  %1219 = phi i64 [ %1225, %1218 ], [ %1213, %1212 ]
  %1220 = phi i64 [ %1226, %1218 ], [ %1216, %1212 ]
  %1221 = getelementptr inbounds float, float* %54, i64 %1219
  %1222 = load float, float* %1221, align 4, !noalias !256
  %1223 = fmul float %1222, %15
  %1224 = getelementptr inbounds float, float* %55, i64 %1219
  store float %1223, float* %1224, align 4, !noalias !256
  %1225 = add nuw nsw i64 %1219, 1
  %1226 = add i64 %1220, -1
  %1227 = icmp eq i64 %1226, 0
  br i1 %1227, label %1228, label %1218, !llvm.loop !265

1228:                                             ; preds = %1218, %1212
  %1229 = phi i64 [ %1213, %1212 ], [ %1225, %1218 ]
  %1230 = icmp ult i64 %1215, 3
  br i1 %1230, label %1255, label %1231

1231:                                             ; preds = %1228, %1231
  %1232 = phi i64 [ %1252, %1231 ], [ %1229, %1228 ]
  %1233 = getelementptr inbounds float, float* %54, i64 %1232
  %1234 = load float, float* %1233, align 4, !noalias !256
  %1235 = fmul float %1234, %15
  %1236 = getelementptr inbounds float, float* %55, i64 %1232
  store float %1235, float* %1236, align 4, !noalias !256
  %1237 = add nuw nsw i64 %1232, 1
  %1238 = getelementptr inbounds float, float* %54, i64 %1237
  %1239 = load float, float* %1238, align 4, !noalias !256
  %1240 = fmul float %1239, %15
  %1241 = getelementptr inbounds float, float* %55, i64 %1237
  store float %1240, float* %1241, align 4, !noalias !256
  %1242 = add nuw nsw i64 %1232, 2
  %1243 = getelementptr inbounds float, float* %54, i64 %1242
  %1244 = load float, float* %1243, align 4, !noalias !256
  %1245 = fmul float %1244, %15
  %1246 = getelementptr inbounds float, float* %55, i64 %1242
  store float %1245, float* %1246, align 4, !noalias !256
  %1247 = add nuw nsw i64 %1232, 3
  %1248 = getelementptr inbounds float, float* %54, i64 %1247
  %1249 = load float, float* %1248, align 4, !noalias !256
  %1250 = fmul float %1249, %15
  %1251 = getelementptr inbounds float, float* %55, i64 %1247
  store float %1250, float* %1251, align 4, !noalias !256
  %1252 = add nuw nsw i64 %1232, 4
  %1253 = icmp eq i64 %1252, %1030
  br i1 %1253, label %1255, label %1231, !llvm.loop !266

1254:                                             ; preds = %1028
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %12, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %397, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %14, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %398, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1367

1255:                                             ; preds = %1228, %1231, %1210
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %14, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %398, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %1256 = icmp ult i32 %44, 8
  br i1 %1256, label %1325, label %1257

1257:                                             ; preds = %1255
  %1258 = getelementptr float, float* %55, i64 %1030
  %1259 = getelementptr float, float* %54, i64 %1030
  %1260 = icmp ugt float* %1259, %55
  %1261 = icmp ugt float* %1258, %54
  %1262 = and i1 %1260, %1261
  br i1 %1262, label %1325, label %1263

1263:                                             ; preds = %1257
  %1264 = and i64 %1030, 4294967288
  %1265 = insertelement <4 x float> undef, float %17, i32 0
  %1266 = shufflevector <4 x float> %1265, <4 x float> undef, <4 x i32> zeroinitializer
  %1267 = insertelement <4 x float> undef, float %17, i32 0
  %1268 = shufflevector <4 x float> %1267, <4 x float> undef, <4 x i32> zeroinitializer
  %1269 = add nsw i64 %1264, -8
  %1270 = lshr exact i64 %1269, 3
  %1271 = add nuw nsw i64 %1270, 1
  %1272 = and i64 %1271, 1
  %1273 = icmp eq i64 %1269, 0
  br i1 %1273, label %1307, label %1274

1274:                                             ; preds = %1263
  %1275 = sub nuw nsw i64 %1271, %1272
  br label %1276

1276:                                             ; preds = %1276, %1274
  %1277 = phi i64 [ 0, %1274 ], [ %1304, %1276 ]
  %1278 = phi i64 [ %1275, %1274 ], [ %1305, %1276 ]
  %1279 = getelementptr inbounds float, float* %54, i64 %1277
  %1280 = bitcast float* %1279 to <4 x float>*
  %1281 = load <4 x float>, <4 x float>* %1280, align 4, !alias.scope !267, !noalias !270
  %1282 = getelementptr inbounds float, float* %1279, i64 4
  %1283 = bitcast float* %1282 to <4 x float>*
  %1284 = load <4 x float>, <4 x float>* %1283, align 4, !alias.scope !267, !noalias !270
  %1285 = fmul <4 x float> %1281, %1266
  %1286 = fmul <4 x float> %1284, %1268
  %1287 = getelementptr inbounds float, float* %55, i64 %1277
  %1288 = bitcast float* %1287 to <4 x float>*
  store <4 x float> %1285, <4 x float>* %1288, align 4, !alias.scope !275, !noalias !277
  %1289 = getelementptr inbounds float, float* %1287, i64 4
  %1290 = bitcast float* %1289 to <4 x float>*
  store <4 x float> %1286, <4 x float>* %1290, align 4, !alias.scope !275, !noalias !277
  %1291 = or i64 %1277, 8
  %1292 = getelementptr inbounds float, float* %54, i64 %1291
  %1293 = bitcast float* %1292 to <4 x float>*
  %1294 = load <4 x float>, <4 x float>* %1293, align 4, !alias.scope !267, !noalias !270
  %1295 = getelementptr inbounds float, float* %1292, i64 4
  %1296 = bitcast float* %1295 to <4 x float>*
  %1297 = load <4 x float>, <4 x float>* %1296, align 4, !alias.scope !267, !noalias !270
  %1298 = fmul <4 x float> %1294, %1266
  %1299 = fmul <4 x float> %1297, %1268
  %1300 = getelementptr inbounds float, float* %55, i64 %1291
  %1301 = bitcast float* %1300 to <4 x float>*
  store <4 x float> %1298, <4 x float>* %1301, align 4, !alias.scope !275, !noalias !277
  %1302 = getelementptr inbounds float, float* %1300, i64 4
  %1303 = bitcast float* %1302 to <4 x float>*
  store <4 x float> %1299, <4 x float>* %1303, align 4, !alias.scope !275, !noalias !277
  %1304 = add i64 %1277, 16
  %1305 = add i64 %1278, -2
  %1306 = icmp eq i64 %1305, 0
  br i1 %1306, label %1307, label %1276, !llvm.loop !278

1307:                                             ; preds = %1276, %1263
  %1308 = phi i64 [ 0, %1263 ], [ %1304, %1276 ]
  %1309 = icmp eq i64 %1272, 0
  br i1 %1309, label %1323, label %1310

1310:                                             ; preds = %1307
  %1311 = getelementptr inbounds float, float* %54, i64 %1308
  %1312 = bitcast float* %1311 to <4 x float>*
  %1313 = load <4 x float>, <4 x float>* %1312, align 4, !alias.scope !267, !noalias !270
  %1314 = getelementptr inbounds float, float* %1311, i64 4
  %1315 = bitcast float* %1314 to <4 x float>*
  %1316 = load <4 x float>, <4 x float>* %1315, align 4, !alias.scope !267, !noalias !270
  %1317 = fmul <4 x float> %1313, %1266
  %1318 = fmul <4 x float> %1316, %1268
  %1319 = getelementptr inbounds float, float* %55, i64 %1308
  %1320 = bitcast float* %1319 to <4 x float>*
  store <4 x float> %1317, <4 x float>* %1320, align 4, !alias.scope !275, !noalias !277
  %1321 = getelementptr inbounds float, float* %1319, i64 4
  %1322 = bitcast float* %1321 to <4 x float>*
  store <4 x float> %1318, <4 x float>* %1322, align 4, !alias.scope !275, !noalias !277
  br label %1323

1323:                                             ; preds = %1307, %1310
  %1324 = icmp eq i64 %1264, %1030
  br i1 %1324, label %1367, label %1325

1325:                                             ; preds = %1323, %1257, %1255
  %1326 = phi i64 [ 0, %1257 ], [ 0, %1255 ], [ %1264, %1323 ]
  %1327 = xor i64 %1326, -1
  %1328 = add nsw i64 %1327, %1030
  %1329 = and i64 %1030, 3
  %1330 = icmp eq i64 %1329, 0
  br i1 %1330, label %1341, label %1331

1331:                                             ; preds = %1325, %1331
  %1332 = phi i64 [ %1338, %1331 ], [ %1326, %1325 ]
  %1333 = phi i64 [ %1339, %1331 ], [ %1329, %1325 ]
  %1334 = getelementptr inbounds float, float* %54, i64 %1332
  %1335 = load float, float* %1334, align 4, !noalias !270
  %1336 = fmul float %1335, %17
  %1337 = getelementptr inbounds float, float* %55, i64 %1332
  store float %1336, float* %1337, align 4, !noalias !270
  %1338 = add nuw nsw i64 %1332, 1
  %1339 = add i64 %1333, -1
  %1340 = icmp eq i64 %1339, 0
  br i1 %1340, label %1341, label %1331, !llvm.loop !279

1341:                                             ; preds = %1331, %1325
  %1342 = phi i64 [ %1326, %1325 ], [ %1338, %1331 ]
  %1343 = icmp ult i64 %1328, 3
  br i1 %1343, label %1367, label %1344

1344:                                             ; preds = %1341, %1344
  %1345 = phi i64 [ %1365, %1344 ], [ %1342, %1341 ]
  %1346 = getelementptr inbounds float, float* %54, i64 %1345
  %1347 = load float, float* %1346, align 4, !noalias !270
  %1348 = fmul float %1347, %17
  %1349 = getelementptr inbounds float, float* %55, i64 %1345
  store float %1348, float* %1349, align 4, !noalias !270
  %1350 = add nuw nsw i64 %1345, 1
  %1351 = getelementptr inbounds float, float* %54, i64 %1350
  %1352 = load float, float* %1351, align 4, !noalias !270
  %1353 = fmul float %1352, %17
  %1354 = getelementptr inbounds float, float* %55, i64 %1350
  store float %1353, float* %1354, align 4, !noalias !270
  %1355 = add nuw nsw i64 %1345, 2
  %1356 = getelementptr inbounds float, float* %54, i64 %1355
  %1357 = load float, float* %1356, align 4, !noalias !270
  %1358 = fmul float %1357, %17
  %1359 = getelementptr inbounds float, float* %55, i64 %1355
  store float %1358, float* %1359, align 4, !noalias !270
  %1360 = add nuw nsw i64 %1345, 3
  %1361 = getelementptr inbounds float, float* %54, i64 %1360
  %1362 = load float, float* %1361, align 4, !noalias !270
  %1363 = fmul float %1362, %17
  %1364 = getelementptr inbounds float, float* %55, i64 %1360
  store float %1363, float* %1364, align 4, !noalias !270
  %1365 = add nuw nsw i64 %1345, 4
  %1366 = icmp eq i64 %1365, %1030
  br i1 %1366, label %1367, label %1344, !llvm.loop !280

1367:                                             ; preds = %1341, %1344, %1323, %1254
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %16, i32 %45, i32 %47, i8* %58, float* %55, i32 %44, float* %53, float* null, i32* %65, i32* %63, i32* %399, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1368

1368:                                             ; preds = %885, %1367, %887
  %1369 = mul i32 %48, %44
  %1370 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %61, i32 %1369) #15
  br i1 %1370, label %1849, label %1371

1371:                                             ; preds = %1368
  %1372 = icmp sgt i32 %44, 0
  br i1 %1372, label %1373, label %1393

1373:                                             ; preds = %1371
  %1374 = bitcast float* %77 to i8*
  %1375 = bitcast float* %78 to i8*
  %1376 = sext i32 %48 to i64
  %1377 = zext i32 %44 to i64
  br label %1378

1378:                                             ; preds = %1390, %1373
  %1379 = phi i64 [ 0, %1373 ], [ %1391, %1390 ]
  %1380 = mul nsw i64 %1379, %1376
  br i1 %69, label %1381, label %1386

1381:                                             ; preds = %1378
  %1382 = getelementptr inbounds float, float* %61, i64 %1380
  %1383 = getelementptr inbounds i8, i8* %59, i64 %1380
  %1384 = getelementptr inbounds float, float* %54, i64 %1379
  %1385 = getelementptr inbounds i32, i32* %65, i64 %1379
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %1382, i32 %48, i8* %1383, float* %1384, i32* %1385) #15
  br label %1390

1386:                                             ; preds = %1378
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1374) #15
  store float 0xFFFFFFFFE0000000, float* %77, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1375) #15
  store float 0xFFFFFFFFE0000000, float* %78, align 4
  %1387 = getelementptr inbounds float, float* %61, i64 %1380
  %1388 = getelementptr inbounds i8, i8* %59, i64 %1380
  %1389 = getelementptr inbounds float, float* %54, i64 %1379
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %1387, i32 %48, i8* %1388, float* nonnull %77, float* nonnull %78, float* %1389) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1375) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1374) #15
  br label %1390

1390:                                             ; preds = %1386, %1381
  %1391 = add nuw nsw i64 %1379, 1
  %1392 = icmp eq i64 %1391, %1377
  br i1 %1392, label %1393, label %1378

1393:                                             ; preds = %1390, %1371
  br i1 %94, label %1509, label %1394

1394:                                             ; preds = %1393
  br i1 %1372, label %1395, label %1508

1395:                                             ; preds = %1394
  %1396 = zext i32 %44 to i64
  %1397 = icmp ult i32 %44, 8
  br i1 %1397, label %1466, label %1398

1398:                                             ; preds = %1395
  %1399 = getelementptr float, float* %55, i64 %1396
  %1400 = getelementptr float, float* %54, i64 %1396
  %1401 = icmp ugt float* %1400, %55
  %1402 = icmp ugt float* %1399, %54
  %1403 = and i1 %1401, %1402
  br i1 %1403, label %1466, label %1404

1404:                                             ; preds = %1398
  %1405 = and i64 %1396, 4294967288
  %1406 = insertelement <4 x float> undef, float %19, i32 0
  %1407 = shufflevector <4 x float> %1406, <4 x float> undef, <4 x i32> zeroinitializer
  %1408 = insertelement <4 x float> undef, float %19, i32 0
  %1409 = shufflevector <4 x float> %1408, <4 x float> undef, <4 x i32> zeroinitializer
  %1410 = add nsw i64 %1405, -8
  %1411 = lshr exact i64 %1410, 3
  %1412 = add nuw nsw i64 %1411, 1
  %1413 = and i64 %1412, 1
  %1414 = icmp eq i64 %1410, 0
  br i1 %1414, label %1448, label %1415

1415:                                             ; preds = %1404
  %1416 = sub nuw nsw i64 %1412, %1413
  br label %1417

1417:                                             ; preds = %1417, %1415
  %1418 = phi i64 [ 0, %1415 ], [ %1445, %1417 ]
  %1419 = phi i64 [ %1416, %1415 ], [ %1446, %1417 ]
  %1420 = getelementptr inbounds float, float* %54, i64 %1418
  %1421 = bitcast float* %1420 to <4 x float>*
  %1422 = load <4 x float>, <4 x float>* %1421, align 4, !alias.scope !281, !noalias !284
  %1423 = getelementptr inbounds float, float* %1420, i64 4
  %1424 = bitcast float* %1423 to <4 x float>*
  %1425 = load <4 x float>, <4 x float>* %1424, align 4, !alias.scope !281, !noalias !284
  %1426 = fmul <4 x float> %1422, %1407
  %1427 = fmul <4 x float> %1425, %1409
  %1428 = getelementptr inbounds float, float* %55, i64 %1418
  %1429 = bitcast float* %1428 to <4 x float>*
  store <4 x float> %1426, <4 x float>* %1429, align 4, !alias.scope !289, !noalias !291
  %1430 = getelementptr inbounds float, float* %1428, i64 4
  %1431 = bitcast float* %1430 to <4 x float>*
  store <4 x float> %1427, <4 x float>* %1431, align 4, !alias.scope !289, !noalias !291
  %1432 = or i64 %1418, 8
  %1433 = getelementptr inbounds float, float* %54, i64 %1432
  %1434 = bitcast float* %1433 to <4 x float>*
  %1435 = load <4 x float>, <4 x float>* %1434, align 4, !alias.scope !281, !noalias !284
  %1436 = getelementptr inbounds float, float* %1433, i64 4
  %1437 = bitcast float* %1436 to <4 x float>*
  %1438 = load <4 x float>, <4 x float>* %1437, align 4, !alias.scope !281, !noalias !284
  %1439 = fmul <4 x float> %1435, %1407
  %1440 = fmul <4 x float> %1438, %1409
  %1441 = getelementptr inbounds float, float* %55, i64 %1432
  %1442 = bitcast float* %1441 to <4 x float>*
  store <4 x float> %1439, <4 x float>* %1442, align 4, !alias.scope !289, !noalias !291
  %1443 = getelementptr inbounds float, float* %1441, i64 4
  %1444 = bitcast float* %1443 to <4 x float>*
  store <4 x float> %1440, <4 x float>* %1444, align 4, !alias.scope !289, !noalias !291
  %1445 = add i64 %1418, 16
  %1446 = add i64 %1419, -2
  %1447 = icmp eq i64 %1446, 0
  br i1 %1447, label %1448, label %1417, !llvm.loop !292

1448:                                             ; preds = %1417, %1404
  %1449 = phi i64 [ 0, %1404 ], [ %1445, %1417 ]
  %1450 = icmp eq i64 %1413, 0
  br i1 %1450, label %1464, label %1451

1451:                                             ; preds = %1448
  %1452 = getelementptr inbounds float, float* %54, i64 %1449
  %1453 = bitcast float* %1452 to <4 x float>*
  %1454 = load <4 x float>, <4 x float>* %1453, align 4, !alias.scope !281, !noalias !284
  %1455 = getelementptr inbounds float, float* %1452, i64 4
  %1456 = bitcast float* %1455 to <4 x float>*
  %1457 = load <4 x float>, <4 x float>* %1456, align 4, !alias.scope !281, !noalias !284
  %1458 = fmul <4 x float> %1454, %1407
  %1459 = fmul <4 x float> %1457, %1409
  %1460 = getelementptr inbounds float, float* %55, i64 %1449
  %1461 = bitcast float* %1460 to <4 x float>*
  store <4 x float> %1458, <4 x float>* %1461, align 4, !alias.scope !289, !noalias !291
  %1462 = getelementptr inbounds float, float* %1460, i64 4
  %1463 = bitcast float* %1462 to <4 x float>*
  store <4 x float> %1459, <4 x float>* %1463, align 4, !alias.scope !289, !noalias !291
  br label %1464

1464:                                             ; preds = %1448, %1451
  %1465 = icmp eq i64 %1405, %1396
  br i1 %1465, label %1508, label %1466

1466:                                             ; preds = %1464, %1398, %1395
  %1467 = phi i64 [ 0, %1398 ], [ 0, %1395 ], [ %1405, %1464 ]
  %1468 = xor i64 %1467, -1
  %1469 = add nsw i64 %1468, %1396
  %1470 = and i64 %1396, 3
  %1471 = icmp eq i64 %1470, 0
  br i1 %1471, label %1482, label %1472

1472:                                             ; preds = %1466, %1472
  %1473 = phi i64 [ %1479, %1472 ], [ %1467, %1466 ]
  %1474 = phi i64 [ %1480, %1472 ], [ %1470, %1466 ]
  %1475 = getelementptr inbounds float, float* %54, i64 %1473
  %1476 = load float, float* %1475, align 4, !noalias !284
  %1477 = fmul float %1476, %19
  %1478 = getelementptr inbounds float, float* %55, i64 %1473
  store float %1477, float* %1478, align 4, !noalias !284
  %1479 = add nuw nsw i64 %1473, 1
  %1480 = add i64 %1474, -1
  %1481 = icmp eq i64 %1480, 0
  br i1 %1481, label %1482, label %1472, !llvm.loop !293

1482:                                             ; preds = %1472, %1466
  %1483 = phi i64 [ %1467, %1466 ], [ %1479, %1472 ]
  %1484 = icmp ult i64 %1469, 3
  br i1 %1484, label %1508, label %1485

1485:                                             ; preds = %1482, %1485
  %1486 = phi i64 [ %1506, %1485 ], [ %1483, %1482 ]
  %1487 = getelementptr inbounds float, float* %54, i64 %1486
  %1488 = load float, float* %1487, align 4, !noalias !284
  %1489 = fmul float %1488, %19
  %1490 = getelementptr inbounds float, float* %55, i64 %1486
  store float %1489, float* %1490, align 4, !noalias !284
  %1491 = add nuw nsw i64 %1486, 1
  %1492 = getelementptr inbounds float, float* %54, i64 %1491
  %1493 = load float, float* %1492, align 4, !noalias !284
  %1494 = fmul float %1493, %19
  %1495 = getelementptr inbounds float, float* %55, i64 %1491
  store float %1494, float* %1495, align 4, !noalias !284
  %1496 = add nuw nsw i64 %1486, 2
  %1497 = getelementptr inbounds float, float* %54, i64 %1496
  %1498 = load float, float* %1497, align 4, !noalias !284
  %1499 = fmul float %1498, %19
  %1500 = getelementptr inbounds float, float* %55, i64 %1496
  store float %1499, float* %1500, align 4, !noalias !284
  %1501 = add nuw nsw i64 %1486, 3
  %1502 = getelementptr inbounds float, float* %54, i64 %1501
  %1503 = load float, float* %1502, align 4, !noalias !284
  %1504 = fmul float %1503, %19
  %1505 = getelementptr inbounds float, float* %55, i64 %1501
  store float %1504, float* %1505, align 4, !noalias !284
  %1506 = add nuw nsw i64 %1486, 4
  %1507 = icmp eq i64 %1506, %1396
  br i1 %1507, label %1508, label %1485, !llvm.loop !294

1508:                                             ; preds = %1482, %1485, %1464, %1394
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %18, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %50, float* null, i32* %65, i32* %63, i32* %400, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1509

1509:                                             ; preds = %1508, %1393
  br i1 %1372, label %1510, label %1735

1510:                                             ; preds = %1509
  %1511 = zext i32 %44 to i64
  %1512 = icmp ult i32 %44, 8
  br i1 %1512, label %1581, label %1513

1513:                                             ; preds = %1510
  %1514 = getelementptr float, float* %55, i64 %1511
  %1515 = getelementptr float, float* %54, i64 %1511
  %1516 = icmp ugt float* %1515, %55
  %1517 = icmp ugt float* %1514, %54
  %1518 = and i1 %1516, %1517
  br i1 %1518, label %1581, label %1519

1519:                                             ; preds = %1513
  %1520 = and i64 %1511, 4294967288
  %1521 = insertelement <4 x float> undef, float %21, i32 0
  %1522 = shufflevector <4 x float> %1521, <4 x float> undef, <4 x i32> zeroinitializer
  %1523 = insertelement <4 x float> undef, float %21, i32 0
  %1524 = shufflevector <4 x float> %1523, <4 x float> undef, <4 x i32> zeroinitializer
  %1525 = add nsw i64 %1520, -8
  %1526 = lshr exact i64 %1525, 3
  %1527 = add nuw nsw i64 %1526, 1
  %1528 = and i64 %1527, 1
  %1529 = icmp eq i64 %1525, 0
  br i1 %1529, label %1563, label %1530

1530:                                             ; preds = %1519
  %1531 = sub nuw nsw i64 %1527, %1528
  br label %1532

1532:                                             ; preds = %1532, %1530
  %1533 = phi i64 [ 0, %1530 ], [ %1560, %1532 ]
  %1534 = phi i64 [ %1531, %1530 ], [ %1561, %1532 ]
  %1535 = getelementptr inbounds float, float* %54, i64 %1533
  %1536 = bitcast float* %1535 to <4 x float>*
  %1537 = load <4 x float>, <4 x float>* %1536, align 4, !alias.scope !295, !noalias !298
  %1538 = getelementptr inbounds float, float* %1535, i64 4
  %1539 = bitcast float* %1538 to <4 x float>*
  %1540 = load <4 x float>, <4 x float>* %1539, align 4, !alias.scope !295, !noalias !298
  %1541 = fmul <4 x float> %1537, %1522
  %1542 = fmul <4 x float> %1540, %1524
  %1543 = getelementptr inbounds float, float* %55, i64 %1533
  %1544 = bitcast float* %1543 to <4 x float>*
  store <4 x float> %1541, <4 x float>* %1544, align 4, !alias.scope !303, !noalias !305
  %1545 = getelementptr inbounds float, float* %1543, i64 4
  %1546 = bitcast float* %1545 to <4 x float>*
  store <4 x float> %1542, <4 x float>* %1546, align 4, !alias.scope !303, !noalias !305
  %1547 = or i64 %1533, 8
  %1548 = getelementptr inbounds float, float* %54, i64 %1547
  %1549 = bitcast float* %1548 to <4 x float>*
  %1550 = load <4 x float>, <4 x float>* %1549, align 4, !alias.scope !295, !noalias !298
  %1551 = getelementptr inbounds float, float* %1548, i64 4
  %1552 = bitcast float* %1551 to <4 x float>*
  %1553 = load <4 x float>, <4 x float>* %1552, align 4, !alias.scope !295, !noalias !298
  %1554 = fmul <4 x float> %1550, %1522
  %1555 = fmul <4 x float> %1553, %1524
  %1556 = getelementptr inbounds float, float* %55, i64 %1547
  %1557 = bitcast float* %1556 to <4 x float>*
  store <4 x float> %1554, <4 x float>* %1557, align 4, !alias.scope !303, !noalias !305
  %1558 = getelementptr inbounds float, float* %1556, i64 4
  %1559 = bitcast float* %1558 to <4 x float>*
  store <4 x float> %1555, <4 x float>* %1559, align 4, !alias.scope !303, !noalias !305
  %1560 = add i64 %1533, 16
  %1561 = add i64 %1534, -2
  %1562 = icmp eq i64 %1561, 0
  br i1 %1562, label %1563, label %1532, !llvm.loop !306

1563:                                             ; preds = %1532, %1519
  %1564 = phi i64 [ 0, %1519 ], [ %1560, %1532 ]
  %1565 = icmp eq i64 %1528, 0
  br i1 %1565, label %1579, label %1566

1566:                                             ; preds = %1563
  %1567 = getelementptr inbounds float, float* %54, i64 %1564
  %1568 = bitcast float* %1567 to <4 x float>*
  %1569 = load <4 x float>, <4 x float>* %1568, align 4, !alias.scope !295, !noalias !298
  %1570 = getelementptr inbounds float, float* %1567, i64 4
  %1571 = bitcast float* %1570 to <4 x float>*
  %1572 = load <4 x float>, <4 x float>* %1571, align 4, !alias.scope !295, !noalias !298
  %1573 = fmul <4 x float> %1569, %1522
  %1574 = fmul <4 x float> %1572, %1524
  %1575 = getelementptr inbounds float, float* %55, i64 %1564
  %1576 = bitcast float* %1575 to <4 x float>*
  store <4 x float> %1573, <4 x float>* %1576, align 4, !alias.scope !303, !noalias !305
  %1577 = getelementptr inbounds float, float* %1575, i64 4
  %1578 = bitcast float* %1577 to <4 x float>*
  store <4 x float> %1574, <4 x float>* %1578, align 4, !alias.scope !303, !noalias !305
  br label %1579

1579:                                             ; preds = %1563, %1566
  %1580 = icmp eq i64 %1520, %1511
  br i1 %1580, label %1623, label %1581

1581:                                             ; preds = %1579, %1513, %1510
  %1582 = phi i64 [ 0, %1513 ], [ 0, %1510 ], [ %1520, %1579 ]
  %1583 = xor i64 %1582, -1
  %1584 = add nsw i64 %1583, %1511
  %1585 = and i64 %1511, 3
  %1586 = icmp eq i64 %1585, 0
  br i1 %1586, label %1597, label %1587

1587:                                             ; preds = %1581, %1587
  %1588 = phi i64 [ %1594, %1587 ], [ %1582, %1581 ]
  %1589 = phi i64 [ %1595, %1587 ], [ %1585, %1581 ]
  %1590 = getelementptr inbounds float, float* %54, i64 %1588
  %1591 = load float, float* %1590, align 4, !noalias !298
  %1592 = fmul float %1591, %21
  %1593 = getelementptr inbounds float, float* %55, i64 %1588
  store float %1592, float* %1593, align 4, !noalias !298
  %1594 = add nuw nsw i64 %1588, 1
  %1595 = add i64 %1589, -1
  %1596 = icmp eq i64 %1595, 0
  br i1 %1596, label %1597, label %1587, !llvm.loop !307

1597:                                             ; preds = %1587, %1581
  %1598 = phi i64 [ %1582, %1581 ], [ %1594, %1587 ]
  %1599 = icmp ult i64 %1584, 3
  br i1 %1599, label %1623, label %1600

1600:                                             ; preds = %1597, %1600
  %1601 = phi i64 [ %1621, %1600 ], [ %1598, %1597 ]
  %1602 = getelementptr inbounds float, float* %54, i64 %1601
  %1603 = load float, float* %1602, align 4, !noalias !298
  %1604 = fmul float %1603, %21
  %1605 = getelementptr inbounds float, float* %55, i64 %1601
  store float %1604, float* %1605, align 4, !noalias !298
  %1606 = add nuw nsw i64 %1601, 1
  %1607 = getelementptr inbounds float, float* %54, i64 %1606
  %1608 = load float, float* %1607, align 4, !noalias !298
  %1609 = fmul float %1608, %21
  %1610 = getelementptr inbounds float, float* %55, i64 %1606
  store float %1609, float* %1610, align 4, !noalias !298
  %1611 = add nuw nsw i64 %1601, 2
  %1612 = getelementptr inbounds float, float* %54, i64 %1611
  %1613 = load float, float* %1612, align 4, !noalias !298
  %1614 = fmul float %1613, %21
  %1615 = getelementptr inbounds float, float* %55, i64 %1611
  store float %1614, float* %1615, align 4, !noalias !298
  %1616 = add nuw nsw i64 %1601, 3
  %1617 = getelementptr inbounds float, float* %54, i64 %1616
  %1618 = load float, float* %1617, align 4, !noalias !298
  %1619 = fmul float %1618, %21
  %1620 = getelementptr inbounds float, float* %55, i64 %1616
  store float %1619, float* %1620, align 4, !noalias !298
  %1621 = add nuw nsw i64 %1601, 4
  %1622 = icmp eq i64 %1621, %1511
  br i1 %1622, label %1623, label %1600, !llvm.loop !308

1623:                                             ; preds = %1597, %1600, %1579
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %20, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %401, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %1624 = icmp ult i32 %44, 8
  br i1 %1624, label %1693, label %1625

1625:                                             ; preds = %1623
  %1626 = getelementptr float, float* %55, i64 %1511
  %1627 = getelementptr float, float* %54, i64 %1511
  %1628 = icmp ugt float* %1627, %55
  %1629 = icmp ugt float* %1626, %54
  %1630 = and i1 %1628, %1629
  br i1 %1630, label %1693, label %1631

1631:                                             ; preds = %1625
  %1632 = and i64 %1511, 4294967288
  %1633 = insertelement <4 x float> undef, float %23, i32 0
  %1634 = shufflevector <4 x float> %1633, <4 x float> undef, <4 x i32> zeroinitializer
  %1635 = insertelement <4 x float> undef, float %23, i32 0
  %1636 = shufflevector <4 x float> %1635, <4 x float> undef, <4 x i32> zeroinitializer
  %1637 = add nsw i64 %1632, -8
  %1638 = lshr exact i64 %1637, 3
  %1639 = add nuw nsw i64 %1638, 1
  %1640 = and i64 %1639, 1
  %1641 = icmp eq i64 %1637, 0
  br i1 %1641, label %1675, label %1642

1642:                                             ; preds = %1631
  %1643 = sub nuw nsw i64 %1639, %1640
  br label %1644

1644:                                             ; preds = %1644, %1642
  %1645 = phi i64 [ 0, %1642 ], [ %1672, %1644 ]
  %1646 = phi i64 [ %1643, %1642 ], [ %1673, %1644 ]
  %1647 = getelementptr inbounds float, float* %54, i64 %1645
  %1648 = bitcast float* %1647 to <4 x float>*
  %1649 = load <4 x float>, <4 x float>* %1648, align 4, !alias.scope !309, !noalias !312
  %1650 = getelementptr inbounds float, float* %1647, i64 4
  %1651 = bitcast float* %1650 to <4 x float>*
  %1652 = load <4 x float>, <4 x float>* %1651, align 4, !alias.scope !309, !noalias !312
  %1653 = fmul <4 x float> %1649, %1634
  %1654 = fmul <4 x float> %1652, %1636
  %1655 = getelementptr inbounds float, float* %55, i64 %1645
  %1656 = bitcast float* %1655 to <4 x float>*
  store <4 x float> %1653, <4 x float>* %1656, align 4, !alias.scope !317, !noalias !319
  %1657 = getelementptr inbounds float, float* %1655, i64 4
  %1658 = bitcast float* %1657 to <4 x float>*
  store <4 x float> %1654, <4 x float>* %1658, align 4, !alias.scope !317, !noalias !319
  %1659 = or i64 %1645, 8
  %1660 = getelementptr inbounds float, float* %54, i64 %1659
  %1661 = bitcast float* %1660 to <4 x float>*
  %1662 = load <4 x float>, <4 x float>* %1661, align 4, !alias.scope !309, !noalias !312
  %1663 = getelementptr inbounds float, float* %1660, i64 4
  %1664 = bitcast float* %1663 to <4 x float>*
  %1665 = load <4 x float>, <4 x float>* %1664, align 4, !alias.scope !309, !noalias !312
  %1666 = fmul <4 x float> %1662, %1634
  %1667 = fmul <4 x float> %1665, %1636
  %1668 = getelementptr inbounds float, float* %55, i64 %1659
  %1669 = bitcast float* %1668 to <4 x float>*
  store <4 x float> %1666, <4 x float>* %1669, align 4, !alias.scope !317, !noalias !319
  %1670 = getelementptr inbounds float, float* %1668, i64 4
  %1671 = bitcast float* %1670 to <4 x float>*
  store <4 x float> %1667, <4 x float>* %1671, align 4, !alias.scope !317, !noalias !319
  %1672 = add i64 %1645, 16
  %1673 = add i64 %1646, -2
  %1674 = icmp eq i64 %1673, 0
  br i1 %1674, label %1675, label %1644, !llvm.loop !320

1675:                                             ; preds = %1644, %1631
  %1676 = phi i64 [ 0, %1631 ], [ %1672, %1644 ]
  %1677 = icmp eq i64 %1640, 0
  br i1 %1677, label %1691, label %1678

1678:                                             ; preds = %1675
  %1679 = getelementptr inbounds float, float* %54, i64 %1676
  %1680 = bitcast float* %1679 to <4 x float>*
  %1681 = load <4 x float>, <4 x float>* %1680, align 4, !alias.scope !309, !noalias !312
  %1682 = getelementptr inbounds float, float* %1679, i64 4
  %1683 = bitcast float* %1682 to <4 x float>*
  %1684 = load <4 x float>, <4 x float>* %1683, align 4, !alias.scope !309, !noalias !312
  %1685 = fmul <4 x float> %1681, %1634
  %1686 = fmul <4 x float> %1684, %1636
  %1687 = getelementptr inbounds float, float* %55, i64 %1676
  %1688 = bitcast float* %1687 to <4 x float>*
  store <4 x float> %1685, <4 x float>* %1688, align 4, !alias.scope !317, !noalias !319
  %1689 = getelementptr inbounds float, float* %1687, i64 4
  %1690 = bitcast float* %1689 to <4 x float>*
  store <4 x float> %1686, <4 x float>* %1690, align 4, !alias.scope !317, !noalias !319
  br label %1691

1691:                                             ; preds = %1675, %1678
  %1692 = icmp eq i64 %1632, %1511
  br i1 %1692, label %1736, label %1693

1693:                                             ; preds = %1691, %1625, %1623
  %1694 = phi i64 [ 0, %1625 ], [ 0, %1623 ], [ %1632, %1691 ]
  %1695 = xor i64 %1694, -1
  %1696 = add nsw i64 %1695, %1511
  %1697 = and i64 %1511, 3
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1709, label %1699

1699:                                             ; preds = %1693, %1699
  %1700 = phi i64 [ %1706, %1699 ], [ %1694, %1693 ]
  %1701 = phi i64 [ %1707, %1699 ], [ %1697, %1693 ]
  %1702 = getelementptr inbounds float, float* %54, i64 %1700
  %1703 = load float, float* %1702, align 4, !noalias !312
  %1704 = fmul float %1703, %23
  %1705 = getelementptr inbounds float, float* %55, i64 %1700
  store float %1704, float* %1705, align 4, !noalias !312
  %1706 = add nuw nsw i64 %1700, 1
  %1707 = add i64 %1701, -1
  %1708 = icmp eq i64 %1707, 0
  br i1 %1708, label %1709, label %1699, !llvm.loop !321

1709:                                             ; preds = %1699, %1693
  %1710 = phi i64 [ %1694, %1693 ], [ %1706, %1699 ]
  %1711 = icmp ult i64 %1696, 3
  br i1 %1711, label %1736, label %1712

1712:                                             ; preds = %1709, %1712
  %1713 = phi i64 [ %1733, %1712 ], [ %1710, %1709 ]
  %1714 = getelementptr inbounds float, float* %54, i64 %1713
  %1715 = load float, float* %1714, align 4, !noalias !312
  %1716 = fmul float %1715, %23
  %1717 = getelementptr inbounds float, float* %55, i64 %1713
  store float %1716, float* %1717, align 4, !noalias !312
  %1718 = add nuw nsw i64 %1713, 1
  %1719 = getelementptr inbounds float, float* %54, i64 %1718
  %1720 = load float, float* %1719, align 4, !noalias !312
  %1721 = fmul float %1720, %23
  %1722 = getelementptr inbounds float, float* %55, i64 %1718
  store float %1721, float* %1722, align 4, !noalias !312
  %1723 = add nuw nsw i64 %1713, 2
  %1724 = getelementptr inbounds float, float* %54, i64 %1723
  %1725 = load float, float* %1724, align 4, !noalias !312
  %1726 = fmul float %1725, %23
  %1727 = getelementptr inbounds float, float* %55, i64 %1723
  store float %1726, float* %1727, align 4, !noalias !312
  %1728 = add nuw nsw i64 %1713, 3
  %1729 = getelementptr inbounds float, float* %54, i64 %1728
  %1730 = load float, float* %1729, align 4, !noalias !312
  %1731 = fmul float %1730, %23
  %1732 = getelementptr inbounds float, float* %55, i64 %1728
  store float %1731, float* %1732, align 4, !noalias !312
  %1733 = add nuw nsw i64 %1713, 4
  %1734 = icmp eq i64 %1733, %1511
  br i1 %1734, label %1736, label %1712, !llvm.loop !322

1735:                                             ; preds = %1509
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %20, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %51, float* null, i32* %65, i32* %63, i32* %401, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %22, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %402, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1848

1736:                                             ; preds = %1709, %1712, %1691
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %22, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %52, float* null, i32* %65, i32* %63, i32* %402, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  %1737 = icmp ult i32 %44, 8
  br i1 %1737, label %1806, label %1738

1738:                                             ; preds = %1736
  %1739 = getelementptr float, float* %55, i64 %1511
  %1740 = getelementptr float, float* %54, i64 %1511
  %1741 = icmp ugt float* %1740, %55
  %1742 = icmp ugt float* %1739, %54
  %1743 = and i1 %1741, %1742
  br i1 %1743, label %1806, label %1744

1744:                                             ; preds = %1738
  %1745 = and i64 %1511, 4294967288
  %1746 = insertelement <4 x float> undef, float %25, i32 0
  %1747 = shufflevector <4 x float> %1746, <4 x float> undef, <4 x i32> zeroinitializer
  %1748 = insertelement <4 x float> undef, float %25, i32 0
  %1749 = shufflevector <4 x float> %1748, <4 x float> undef, <4 x i32> zeroinitializer
  %1750 = add nsw i64 %1745, -8
  %1751 = lshr exact i64 %1750, 3
  %1752 = add nuw nsw i64 %1751, 1
  %1753 = and i64 %1752, 1
  %1754 = icmp eq i64 %1750, 0
  br i1 %1754, label %1788, label %1755

1755:                                             ; preds = %1744
  %1756 = sub nuw nsw i64 %1752, %1753
  br label %1757

1757:                                             ; preds = %1757, %1755
  %1758 = phi i64 [ 0, %1755 ], [ %1785, %1757 ]
  %1759 = phi i64 [ %1756, %1755 ], [ %1786, %1757 ]
  %1760 = getelementptr inbounds float, float* %54, i64 %1758
  %1761 = bitcast float* %1760 to <4 x float>*
  %1762 = load <4 x float>, <4 x float>* %1761, align 4, !alias.scope !323, !noalias !326
  %1763 = getelementptr inbounds float, float* %1760, i64 4
  %1764 = bitcast float* %1763 to <4 x float>*
  %1765 = load <4 x float>, <4 x float>* %1764, align 4, !alias.scope !323, !noalias !326
  %1766 = fmul <4 x float> %1762, %1747
  %1767 = fmul <4 x float> %1765, %1749
  %1768 = getelementptr inbounds float, float* %55, i64 %1758
  %1769 = bitcast float* %1768 to <4 x float>*
  store <4 x float> %1766, <4 x float>* %1769, align 4, !alias.scope !331, !noalias !333
  %1770 = getelementptr inbounds float, float* %1768, i64 4
  %1771 = bitcast float* %1770 to <4 x float>*
  store <4 x float> %1767, <4 x float>* %1771, align 4, !alias.scope !331, !noalias !333
  %1772 = or i64 %1758, 8
  %1773 = getelementptr inbounds float, float* %54, i64 %1772
  %1774 = bitcast float* %1773 to <4 x float>*
  %1775 = load <4 x float>, <4 x float>* %1774, align 4, !alias.scope !323, !noalias !326
  %1776 = getelementptr inbounds float, float* %1773, i64 4
  %1777 = bitcast float* %1776 to <4 x float>*
  %1778 = load <4 x float>, <4 x float>* %1777, align 4, !alias.scope !323, !noalias !326
  %1779 = fmul <4 x float> %1775, %1747
  %1780 = fmul <4 x float> %1778, %1749
  %1781 = getelementptr inbounds float, float* %55, i64 %1772
  %1782 = bitcast float* %1781 to <4 x float>*
  store <4 x float> %1779, <4 x float>* %1782, align 4, !alias.scope !331, !noalias !333
  %1783 = getelementptr inbounds float, float* %1781, i64 4
  %1784 = bitcast float* %1783 to <4 x float>*
  store <4 x float> %1780, <4 x float>* %1784, align 4, !alias.scope !331, !noalias !333
  %1785 = add i64 %1758, 16
  %1786 = add i64 %1759, -2
  %1787 = icmp eq i64 %1786, 0
  br i1 %1787, label %1788, label %1757, !llvm.loop !334

1788:                                             ; preds = %1757, %1744
  %1789 = phi i64 [ 0, %1744 ], [ %1785, %1757 ]
  %1790 = icmp eq i64 %1753, 0
  br i1 %1790, label %1804, label %1791

1791:                                             ; preds = %1788
  %1792 = getelementptr inbounds float, float* %54, i64 %1789
  %1793 = bitcast float* %1792 to <4 x float>*
  %1794 = load <4 x float>, <4 x float>* %1793, align 4, !alias.scope !323, !noalias !326
  %1795 = getelementptr inbounds float, float* %1792, i64 4
  %1796 = bitcast float* %1795 to <4 x float>*
  %1797 = load <4 x float>, <4 x float>* %1796, align 4, !alias.scope !323, !noalias !326
  %1798 = fmul <4 x float> %1794, %1747
  %1799 = fmul <4 x float> %1797, %1749
  %1800 = getelementptr inbounds float, float* %55, i64 %1789
  %1801 = bitcast float* %1800 to <4 x float>*
  store <4 x float> %1798, <4 x float>* %1801, align 4, !alias.scope !331, !noalias !333
  %1802 = getelementptr inbounds float, float* %1800, i64 4
  %1803 = bitcast float* %1802 to <4 x float>*
  store <4 x float> %1799, <4 x float>* %1803, align 4, !alias.scope !331, !noalias !333
  br label %1804

1804:                                             ; preds = %1788, %1791
  %1805 = icmp eq i64 %1745, %1511
  br i1 %1805, label %1848, label %1806

1806:                                             ; preds = %1804, %1738, %1736
  %1807 = phi i64 [ 0, %1738 ], [ 0, %1736 ], [ %1745, %1804 ]
  %1808 = xor i64 %1807, -1
  %1809 = add nsw i64 %1808, %1511
  %1810 = and i64 %1511, 3
  %1811 = icmp eq i64 %1810, 0
  br i1 %1811, label %1822, label %1812

1812:                                             ; preds = %1806, %1812
  %1813 = phi i64 [ %1819, %1812 ], [ %1807, %1806 ]
  %1814 = phi i64 [ %1820, %1812 ], [ %1810, %1806 ]
  %1815 = getelementptr inbounds float, float* %54, i64 %1813
  %1816 = load float, float* %1815, align 4, !noalias !326
  %1817 = fmul float %1816, %25
  %1818 = getelementptr inbounds float, float* %55, i64 %1813
  store float %1817, float* %1818, align 4, !noalias !326
  %1819 = add nuw nsw i64 %1813, 1
  %1820 = add i64 %1814, -1
  %1821 = icmp eq i64 %1820, 0
  br i1 %1821, label %1822, label %1812, !llvm.loop !335

1822:                                             ; preds = %1812, %1806
  %1823 = phi i64 [ %1807, %1806 ], [ %1819, %1812 ]
  %1824 = icmp ult i64 %1809, 3
  br i1 %1824, label %1848, label %1825

1825:                                             ; preds = %1822, %1825
  %1826 = phi i64 [ %1846, %1825 ], [ %1823, %1822 ]
  %1827 = getelementptr inbounds float, float* %54, i64 %1826
  %1828 = load float, float* %1827, align 4, !noalias !326
  %1829 = fmul float %1828, %25
  %1830 = getelementptr inbounds float, float* %55, i64 %1826
  store float %1829, float* %1830, align 4, !noalias !326
  %1831 = add nuw nsw i64 %1826, 1
  %1832 = getelementptr inbounds float, float* %54, i64 %1831
  %1833 = load float, float* %1832, align 4, !noalias !326
  %1834 = fmul float %1833, %25
  %1835 = getelementptr inbounds float, float* %55, i64 %1831
  store float %1834, float* %1835, align 4, !noalias !326
  %1836 = add nuw nsw i64 %1826, 2
  %1837 = getelementptr inbounds float, float* %54, i64 %1836
  %1838 = load float, float* %1837, align 4, !noalias !326
  %1839 = fmul float %1838, %25
  %1840 = getelementptr inbounds float, float* %55, i64 %1836
  store float %1839, float* %1840, align 4, !noalias !326
  %1841 = add nuw nsw i64 %1826, 3
  %1842 = getelementptr inbounds float, float* %54, i64 %1841
  %1843 = load float, float* %1842, align 4, !noalias !326
  %1844 = fmul float %1843, %25
  %1845 = getelementptr inbounds float, float* %55, i64 %1841
  store float %1844, float* %1845, align 4, !noalias !326
  %1846 = add nuw nsw i64 %1826, 4
  %1847 = icmp eq i64 %1846, %1511
  br i1 %1847, label %1848, label %1825, !llvm.loop !336

1848:                                             ; preds = %1822, %1825, %1804, %1735
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %24, i32 %45, i32 %48, i8* %59, float* %55, i32 %44, float* %53, float* null, i32* %65, i32* %63, i32* %403, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %1849

1849:                                             ; preds = %1848, %1368
  br i1 %94, label %2105, label %1850

1850:                                             ; preds = %1849
  br i1 %95, label %1851, label %1988

1851:                                             ; preds = %1850
  call void @_ZN6tflite12tensor_utils20VectorScalarMultiplyEPKaifPf(i8* %26, i32 %45, float %27, float* %56) #15
  %1852 = icmp sgt i32 %44, 0
  br i1 %1852, label %1853, label %1988

1853:                                             ; preds = %1851
  %1854 = icmp sgt i32 %45, 0
  %1855 = sext i32 %45 to i64
  %1856 = add i32 %45, -1
  %1857 = zext i32 %1856 to i64
  %1858 = add nuw nsw i64 %1857, 1
  %1859 = and i64 %1858, 8589934584
  %1860 = add nsw i64 %1859, -8
  %1861 = lshr exact i64 %1860, 3
  %1862 = add nuw nsw i64 %1861, 1
  %1863 = icmp ult i64 %1858, 8
  %1864 = and i64 %1858, 8589934584
  %1865 = trunc i64 %1864 to i32
  %1866 = getelementptr float, float* %56, i64 %1864
  %1867 = and i64 %1862, 1
  %1868 = icmp eq i64 %1860, 0
  %1869 = sub nuw nsw i64 %1862, %1867
  %1870 = icmp eq i64 %1867, 0
  %1871 = icmp eq i64 %1858, %1864
  br label %1872

1872:                                             ; preds = %1983, %1853
  %1873 = phi i32 [ 0, %1853 ], [ %1986, %1983 ]
  %1874 = phi float* [ %50, %1853 ], [ %1984, %1983 ]
  %1875 = phi float* [ %62, %1853 ], [ %1985, %1983 ]
  br i1 %1854, label %1876, label %1983

1876:                                             ; preds = %1872
  br i1 %1863, label %1963, label %1877

1877:                                             ; preds = %1876
  %1878 = getelementptr float, float* %1874, i64 %1864
  %1879 = getelementptr float, float* %1875, i64 %1864
  br i1 %1868, label %1935, label %1880

1880:                                             ; preds = %1877, %1880
  %1881 = phi i64 [ %1932, %1880 ], [ 0, %1877 ]
  %1882 = phi i64 [ %1933, %1880 ], [ %1869, %1877 ]
  %1883 = getelementptr float, float* %1874, i64 %1881
  %1884 = getelementptr float, float* %56, i64 %1881
  %1885 = getelementptr float, float* %1875, i64 %1881
  %1886 = bitcast float* %1884 to <4 x float>*
  %1887 = load <4 x float>, <4 x float>* %1886, align 4, !alias.scope !337, !noalias !340
  %1888 = getelementptr float, float* %1884, i64 4
  %1889 = bitcast float* %1888 to <4 x float>*
  %1890 = load <4 x float>, <4 x float>* %1889, align 4, !alias.scope !337, !noalias !340
  %1891 = bitcast float* %1885 to <4 x float>*
  %1892 = load <4 x float>, <4 x float>* %1891, align 4, !alias.scope !343, !noalias !344
  %1893 = getelementptr float, float* %1885, i64 4
  %1894 = bitcast float* %1893 to <4 x float>*
  %1895 = load <4 x float>, <4 x float>* %1894, align 4, !alias.scope !343, !noalias !344
  %1896 = fmul <4 x float> %1887, %1892
  %1897 = fmul <4 x float> %1890, %1895
  %1898 = bitcast float* %1883 to <4 x float>*
  %1899 = load <4 x float>, <4 x float>* %1898, align 4, !alias.scope !345, !noalias !346
  %1900 = getelementptr float, float* %1883, i64 4
  %1901 = bitcast float* %1900 to <4 x float>*
  %1902 = load <4 x float>, <4 x float>* %1901, align 4, !alias.scope !345, !noalias !346
  %1903 = fadd <4 x float> %1899, %1896
  %1904 = fadd <4 x float> %1902, %1897
  %1905 = bitcast float* %1883 to <4 x float>*
  store <4 x float> %1903, <4 x float>* %1905, align 4, !alias.scope !345, !noalias !346
  %1906 = bitcast float* %1900 to <4 x float>*
  store <4 x float> %1904, <4 x float>* %1906, align 4, !alias.scope !345, !noalias !346
  %1907 = or i64 %1881, 8
  %1908 = getelementptr float, float* %1874, i64 %1907
  %1909 = getelementptr float, float* %56, i64 %1907
  %1910 = getelementptr float, float* %1875, i64 %1907
  %1911 = bitcast float* %1909 to <4 x float>*
  %1912 = load <4 x float>, <4 x float>* %1911, align 4, !alias.scope !337, !noalias !340
  %1913 = getelementptr float, float* %1909, i64 4
  %1914 = bitcast float* %1913 to <4 x float>*
  %1915 = load <4 x float>, <4 x float>* %1914, align 4, !alias.scope !337, !noalias !340
  %1916 = bitcast float* %1910 to <4 x float>*
  %1917 = load <4 x float>, <4 x float>* %1916, align 4, !alias.scope !343, !noalias !344
  %1918 = getelementptr float, float* %1910, i64 4
  %1919 = bitcast float* %1918 to <4 x float>*
  %1920 = load <4 x float>, <4 x float>* %1919, align 4, !alias.scope !343, !noalias !344
  %1921 = fmul <4 x float> %1912, %1917
  %1922 = fmul <4 x float> %1915, %1920
  %1923 = bitcast float* %1908 to <4 x float>*
  %1924 = load <4 x float>, <4 x float>* %1923, align 4, !alias.scope !345, !noalias !346
  %1925 = getelementptr float, float* %1908, i64 4
  %1926 = bitcast float* %1925 to <4 x float>*
  %1927 = load <4 x float>, <4 x float>* %1926, align 4, !alias.scope !345, !noalias !346
  %1928 = fadd <4 x float> %1924, %1921
  %1929 = fadd <4 x float> %1927, %1922
  %1930 = bitcast float* %1908 to <4 x float>*
  store <4 x float> %1928, <4 x float>* %1930, align 4, !alias.scope !345, !noalias !346
  %1931 = bitcast float* %1925 to <4 x float>*
  store <4 x float> %1929, <4 x float>* %1931, align 4, !alias.scope !345, !noalias !346
  %1932 = add i64 %1881, 16
  %1933 = add i64 %1882, -2
  %1934 = icmp eq i64 %1933, 0
  br i1 %1934, label %1935, label %1880, !llvm.loop !347

1935:                                             ; preds = %1880, %1877
  %1936 = phi i64 [ 0, %1877 ], [ %1932, %1880 ]
  br i1 %1870, label %1962, label %1937

1937:                                             ; preds = %1935
  %1938 = getelementptr float, float* %1874, i64 %1936
  %1939 = getelementptr float, float* %56, i64 %1936
  %1940 = getelementptr float, float* %1875, i64 %1936
  %1941 = bitcast float* %1939 to <4 x float>*
  %1942 = load <4 x float>, <4 x float>* %1941, align 4, !alias.scope !337, !noalias !340
  %1943 = getelementptr float, float* %1939, i64 4
  %1944 = bitcast float* %1943 to <4 x float>*
  %1945 = load <4 x float>, <4 x float>* %1944, align 4, !alias.scope !337, !noalias !340
  %1946 = bitcast float* %1940 to <4 x float>*
  %1947 = load <4 x float>, <4 x float>* %1946, align 4, !alias.scope !343, !noalias !344
  %1948 = getelementptr float, float* %1940, i64 4
  %1949 = bitcast float* %1948 to <4 x float>*
  %1950 = load <4 x float>, <4 x float>* %1949, align 4, !alias.scope !343, !noalias !344
  %1951 = fmul <4 x float> %1942, %1947
  %1952 = fmul <4 x float> %1945, %1950
  %1953 = bitcast float* %1938 to <4 x float>*
  %1954 = load <4 x float>, <4 x float>* %1953, align 4, !alias.scope !345, !noalias !346
  %1955 = getelementptr float, float* %1938, i64 4
  %1956 = bitcast float* %1955 to <4 x float>*
  %1957 = load <4 x float>, <4 x float>* %1956, align 4, !alias.scope !345, !noalias !346
  %1958 = fadd <4 x float> %1954, %1951
  %1959 = fadd <4 x float> %1957, %1952
  %1960 = bitcast float* %1938 to <4 x float>*
  store <4 x float> %1958, <4 x float>* %1960, align 4, !alias.scope !345, !noalias !346
  %1961 = bitcast float* %1955 to <4 x float>*
  store <4 x float> %1959, <4 x float>* %1961, align 4, !alias.scope !345, !noalias !346
  br label %1962

1962:                                             ; preds = %1935, %1937
  br i1 %1871, label %1983, label %1963

1963:                                             ; preds = %1962, %1876
  %1964 = phi i32 [ 0, %1876 ], [ %1865, %1962 ]
  %1965 = phi float* [ %1874, %1876 ], [ %1878, %1962 ]
  %1966 = phi float* [ %56, %1876 ], [ %1866, %1962 ]
  %1967 = phi float* [ %1875, %1876 ], [ %1879, %1962 ]
  br label %1968

1968:                                             ; preds = %1963, %1968
  %1969 = phi i32 [ %1981, %1968 ], [ %1964, %1963 ]
  %1970 = phi float* [ %1978, %1968 ], [ %1965, %1963 ]
  %1971 = phi float* [ %1973, %1968 ], [ %1966, %1963 ]
  %1972 = phi float* [ %1975, %1968 ], [ %1967, %1963 ]
  %1973 = getelementptr inbounds float, float* %1971, i64 1
  %1974 = load float, float* %1971, align 4, !alias.scope !337, !noalias !340
  %1975 = getelementptr inbounds float, float* %1972, i64 1
  %1976 = load float, float* %1972, align 4, !alias.scope !343, !noalias !344
  %1977 = fmul float %1974, %1976
  %1978 = getelementptr inbounds float, float* %1970, i64 1
  %1979 = load float, float* %1970, align 4, !alias.scope !345, !noalias !346
  %1980 = fadd float %1979, %1977
  store float %1980, float* %1970, align 4, !alias.scope !345, !noalias !346
  %1981 = add nuw nsw i32 %1969, 1
  %1982 = icmp eq i32 %1981, %45
  br i1 %1982, label %1983, label %1968, !llvm.loop !348

1983:                                             ; preds = %1968, %1962, %1872
  %1984 = getelementptr inbounds float, float* %1874, i64 %1855
  %1985 = getelementptr inbounds float, float* %1875, i64 %1855
  %1986 = add nuw nsw i32 %1873, 1
  %1987 = icmp eq i32 %1986, %44
  br i1 %1987, label %1988, label %1872

1988:                                             ; preds = %1983, %1851, %1850
  br i1 %96, label %1989, label %2095

1989:                                             ; preds = %1988
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %50, float* %50, i32 %45, i32 %44) #15
  %1990 = icmp sgt i32 %44, 0
  br i1 %1990, label %1991, label %2094

1991:                                             ; preds = %1989
  %1992 = icmp sgt i32 %45, 0
  %1993 = sext i32 %45 to i64
  %1994 = add i32 %45, -1
  %1995 = zext i32 %1994 to i64
  %1996 = add nuw nsw i64 %1995, 1
  %1997 = and i64 %1996, 8589934584
  %1998 = add nsw i64 %1997, -8
  %1999 = lshr exact i64 %1998, 3
  %2000 = add nuw nsw i64 %1999, 1
  %2001 = icmp ult i64 %1996, 8
  %2002 = and i64 %1996, 8589934584
  %2003 = trunc i64 %2002 to i32
  %2004 = getelementptr float, float* %32, i64 %2002
  %2005 = and i64 %2000, 1
  %2006 = icmp eq i64 %1998, 0
  %2007 = sub nuw nsw i64 %2000, %2005
  %2008 = icmp eq i64 %2005, 0
  %2009 = icmp eq i64 %1996, %2002
  br label %2010

2010:                                             ; preds = %2090, %1991
  %2011 = phi i32 [ 0, %1991 ], [ %2092, %2090 ]
  %2012 = phi float* [ %50, %1991 ], [ %2091, %2090 ]
  br i1 %1992, label %2013, label %2090

2013:                                             ; preds = %2010
  br i1 %2001, label %2075, label %2014

2014:                                             ; preds = %2013
  %2015 = getelementptr float, float* %2012, i64 %2002
  br i1 %2006, label %2055, label %2016

2016:                                             ; preds = %2014, %2016
  %2017 = phi i64 [ %2052, %2016 ], [ 0, %2014 ]
  %2018 = phi i64 [ %2053, %2016 ], [ %2007, %2014 ]
  %2019 = getelementptr float, float* %2012, i64 %2017
  %2020 = getelementptr float, float* %32, i64 %2017
  %2021 = bitcast float* %2020 to <4 x float>*
  %2022 = load <4 x float>, <4 x float>* %2021, align 4, !alias.scope !349, !noalias !352
  %2023 = getelementptr float, float* %2020, i64 4
  %2024 = bitcast float* %2023 to <4 x float>*
  %2025 = load <4 x float>, <4 x float>* %2024, align 4, !alias.scope !349, !noalias !352
  %2026 = bitcast float* %2019 to <4 x float>*
  %2027 = load <4 x float>, <4 x float>* %2026, align 4, !alias.scope !355, !noalias !356
  %2028 = getelementptr float, float* %2019, i64 4
  %2029 = bitcast float* %2028 to <4 x float>*
  %2030 = load <4 x float>, <4 x float>* %2029, align 4, !alias.scope !355, !noalias !356
  %2031 = fmul <4 x float> %2022, %2027
  %2032 = fmul <4 x float> %2025, %2030
  %2033 = bitcast float* %2019 to <4 x float>*
  store <4 x float> %2031, <4 x float>* %2033, align 4, !alias.scope !357, !noalias !358
  %2034 = bitcast float* %2028 to <4 x float>*
  store <4 x float> %2032, <4 x float>* %2034, align 4, !alias.scope !357, !noalias !358
  %2035 = or i64 %2017, 8
  %2036 = getelementptr float, float* %2012, i64 %2035
  %2037 = getelementptr float, float* %32, i64 %2035
  %2038 = bitcast float* %2037 to <4 x float>*
  %2039 = load <4 x float>, <4 x float>* %2038, align 4, !alias.scope !349, !noalias !352
  %2040 = getelementptr float, float* %2037, i64 4
  %2041 = bitcast float* %2040 to <4 x float>*
  %2042 = load <4 x float>, <4 x float>* %2041, align 4, !alias.scope !349, !noalias !352
  %2043 = bitcast float* %2036 to <4 x float>*
  %2044 = load <4 x float>, <4 x float>* %2043, align 4, !alias.scope !355, !noalias !356
  %2045 = getelementptr float, float* %2036, i64 4
  %2046 = bitcast float* %2045 to <4 x float>*
  %2047 = load <4 x float>, <4 x float>* %2046, align 4, !alias.scope !355, !noalias !356
  %2048 = fmul <4 x float> %2039, %2044
  %2049 = fmul <4 x float> %2042, %2047
  %2050 = bitcast float* %2036 to <4 x float>*
  store <4 x float> %2048, <4 x float>* %2050, align 4, !alias.scope !357, !noalias !358
  %2051 = bitcast float* %2045 to <4 x float>*
  store <4 x float> %2049, <4 x float>* %2051, align 4, !alias.scope !357, !noalias !358
  %2052 = add i64 %2017, 16
  %2053 = add i64 %2018, -2
  %2054 = icmp eq i64 %2053, 0
  br i1 %2054, label %2055, label %2016, !llvm.loop !359

2055:                                             ; preds = %2016, %2014
  %2056 = phi i64 [ 0, %2014 ], [ %2052, %2016 ]
  br i1 %2008, label %2074, label %2057

2057:                                             ; preds = %2055
  %2058 = getelementptr float, float* %2012, i64 %2056
  %2059 = getelementptr float, float* %32, i64 %2056
  %2060 = bitcast float* %2059 to <4 x float>*
  %2061 = load <4 x float>, <4 x float>* %2060, align 4, !alias.scope !349, !noalias !352
  %2062 = getelementptr float, float* %2059, i64 4
  %2063 = bitcast float* %2062 to <4 x float>*
  %2064 = load <4 x float>, <4 x float>* %2063, align 4, !alias.scope !349, !noalias !352
  %2065 = bitcast float* %2058 to <4 x float>*
  %2066 = load <4 x float>, <4 x float>* %2065, align 4, !alias.scope !355, !noalias !356
  %2067 = getelementptr float, float* %2058, i64 4
  %2068 = bitcast float* %2067 to <4 x float>*
  %2069 = load <4 x float>, <4 x float>* %2068, align 4, !alias.scope !355, !noalias !356
  %2070 = fmul <4 x float> %2061, %2066
  %2071 = fmul <4 x float> %2064, %2069
  %2072 = bitcast float* %2058 to <4 x float>*
  store <4 x float> %2070, <4 x float>* %2072, align 4, !alias.scope !357, !noalias !358
  %2073 = bitcast float* %2067 to <4 x float>*
  store <4 x float> %2071, <4 x float>* %2073, align 4, !alias.scope !357, !noalias !358
  br label %2074

2074:                                             ; preds = %2055, %2057
  br i1 %2009, label %2090, label %2075

2075:                                             ; preds = %2074, %2013
  %2076 = phi i32 [ 0, %2013 ], [ %2003, %2074 ]
  %2077 = phi float* [ %2012, %2013 ], [ %2015, %2074 ]
  %2078 = phi float* [ %32, %2013 ], [ %2004, %2074 ]
  br label %2079

2079:                                             ; preds = %2075, %2079
  %2080 = phi i32 [ %2088, %2079 ], [ %2076, %2075 ]
  %2081 = phi float* [ %2085, %2079 ], [ %2077, %2075 ]
  %2082 = phi float* [ %2083, %2079 ], [ %2078, %2075 ]
  %2083 = getelementptr inbounds float, float* %2082, i64 1
  %2084 = load float, float* %2082, align 4, !alias.scope !349, !noalias !352
  %2085 = getelementptr inbounds float, float* %2081, i64 1
  %2086 = load float, float* %2081, align 4, !alias.scope !355, !noalias !356
  %2087 = fmul float %2084, %2086
  store float %2087, float* %2081, align 4, !alias.scope !357, !noalias !358
  %2088 = add nuw nsw i32 %2080, 1
  %2089 = icmp eq i32 %2088, %45
  br i1 %2089, label %2090, label %2079, !llvm.loop !360

2090:                                             ; preds = %2079, %2074, %2010
  %2091 = getelementptr inbounds float, float* %2012, i64 %1993
  %2092 = add nuw nsw i32 %2011, 1
  %2093 = icmp eq i32 %2092, %44
  br i1 %2093, label %2094, label %2010

2094:                                             ; preds = %2090, %1989
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %36, i32 %45, i32 %44, float* %50) #15
  br label %2095

2095:                                             ; preds = %2094, %1988
  %2096 = mul nsw i32 %45, %44
  %2097 = sext i32 %2096 to i64
  %2098 = bitcast %"class.Eigen::CwiseUnaryOp"* %84 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2098) #15, !noalias !361
  %2099 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %84, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %50, float** %2099, align 8, !noalias !361
  %2100 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %84, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2097, i64* %2100, align 8, !noalias !361
  %2101 = bitcast %"class.Eigen::ArrayWrapper"* %85 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2101) #15, !noalias !361
  %2102 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %85, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %50, float** %2102, align 8, !noalias !361
  %2103 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %85, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2097, i64* %2103, align 8, !noalias !361
  %2104 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %83, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2104) #15, !noalias !361
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %85, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %84, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %83) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2104) #15, !noalias !361
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2101) #15, !noalias !361
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2098) #15, !noalias !361
  br label %2105

2105:                                             ; preds = %2095, %1849
  br i1 %95, label %2106, label %2243

2106:                                             ; preds = %2105
  call void @_ZN6tflite12tensor_utils20VectorScalarMultiplyEPKaifPf(i8* %28, i32 %45, float %29, float* %56) #15
  %2107 = icmp sgt i32 %44, 0
  br i1 %2107, label %2108, label %2243

2108:                                             ; preds = %2106
  %2109 = icmp sgt i32 %45, 0
  %2110 = sext i32 %45 to i64
  %2111 = add i32 %45, -1
  %2112 = zext i32 %2111 to i64
  %2113 = add nuw nsw i64 %2112, 1
  %2114 = and i64 %2113, 8589934584
  %2115 = add nsw i64 %2114, -8
  %2116 = lshr exact i64 %2115, 3
  %2117 = add nuw nsw i64 %2116, 1
  %2118 = icmp ult i64 %2113, 8
  %2119 = and i64 %2113, 8589934584
  %2120 = trunc i64 %2119 to i32
  %2121 = getelementptr float, float* %56, i64 %2119
  %2122 = and i64 %2117, 1
  %2123 = icmp eq i64 %2115, 0
  %2124 = sub nuw nsw i64 %2117, %2122
  %2125 = icmp eq i64 %2122, 0
  %2126 = icmp eq i64 %2113, %2119
  br label %2127

2127:                                             ; preds = %2238, %2108
  %2128 = phi i32 [ 0, %2108 ], [ %2241, %2238 ]
  %2129 = phi float* [ %51, %2108 ], [ %2239, %2238 ]
  %2130 = phi float* [ %62, %2108 ], [ %2240, %2238 ]
  br i1 %2109, label %2131, label %2238

2131:                                             ; preds = %2127
  br i1 %2118, label %2218, label %2132

2132:                                             ; preds = %2131
  %2133 = getelementptr float, float* %2129, i64 %2119
  %2134 = getelementptr float, float* %2130, i64 %2119
  br i1 %2123, label %2190, label %2135

2135:                                             ; preds = %2132, %2135
  %2136 = phi i64 [ %2187, %2135 ], [ 0, %2132 ]
  %2137 = phi i64 [ %2188, %2135 ], [ %2124, %2132 ]
  %2138 = getelementptr float, float* %2129, i64 %2136
  %2139 = getelementptr float, float* %56, i64 %2136
  %2140 = getelementptr float, float* %2130, i64 %2136
  %2141 = bitcast float* %2139 to <4 x float>*
  %2142 = load <4 x float>, <4 x float>* %2141, align 4, !alias.scope !365, !noalias !368
  %2143 = getelementptr float, float* %2139, i64 4
  %2144 = bitcast float* %2143 to <4 x float>*
  %2145 = load <4 x float>, <4 x float>* %2144, align 4, !alias.scope !365, !noalias !368
  %2146 = bitcast float* %2140 to <4 x float>*
  %2147 = load <4 x float>, <4 x float>* %2146, align 4, !alias.scope !371, !noalias !372
  %2148 = getelementptr float, float* %2140, i64 4
  %2149 = bitcast float* %2148 to <4 x float>*
  %2150 = load <4 x float>, <4 x float>* %2149, align 4, !alias.scope !371, !noalias !372
  %2151 = fmul <4 x float> %2142, %2147
  %2152 = fmul <4 x float> %2145, %2150
  %2153 = bitcast float* %2138 to <4 x float>*
  %2154 = load <4 x float>, <4 x float>* %2153, align 4, !alias.scope !373, !noalias !374
  %2155 = getelementptr float, float* %2138, i64 4
  %2156 = bitcast float* %2155 to <4 x float>*
  %2157 = load <4 x float>, <4 x float>* %2156, align 4, !alias.scope !373, !noalias !374
  %2158 = fadd <4 x float> %2154, %2151
  %2159 = fadd <4 x float> %2157, %2152
  %2160 = bitcast float* %2138 to <4 x float>*
  store <4 x float> %2158, <4 x float>* %2160, align 4, !alias.scope !373, !noalias !374
  %2161 = bitcast float* %2155 to <4 x float>*
  store <4 x float> %2159, <4 x float>* %2161, align 4, !alias.scope !373, !noalias !374
  %2162 = or i64 %2136, 8
  %2163 = getelementptr float, float* %2129, i64 %2162
  %2164 = getelementptr float, float* %56, i64 %2162
  %2165 = getelementptr float, float* %2130, i64 %2162
  %2166 = bitcast float* %2164 to <4 x float>*
  %2167 = load <4 x float>, <4 x float>* %2166, align 4, !alias.scope !365, !noalias !368
  %2168 = getelementptr float, float* %2164, i64 4
  %2169 = bitcast float* %2168 to <4 x float>*
  %2170 = load <4 x float>, <4 x float>* %2169, align 4, !alias.scope !365, !noalias !368
  %2171 = bitcast float* %2165 to <4 x float>*
  %2172 = load <4 x float>, <4 x float>* %2171, align 4, !alias.scope !371, !noalias !372
  %2173 = getelementptr float, float* %2165, i64 4
  %2174 = bitcast float* %2173 to <4 x float>*
  %2175 = load <4 x float>, <4 x float>* %2174, align 4, !alias.scope !371, !noalias !372
  %2176 = fmul <4 x float> %2167, %2172
  %2177 = fmul <4 x float> %2170, %2175
  %2178 = bitcast float* %2163 to <4 x float>*
  %2179 = load <4 x float>, <4 x float>* %2178, align 4, !alias.scope !373, !noalias !374
  %2180 = getelementptr float, float* %2163, i64 4
  %2181 = bitcast float* %2180 to <4 x float>*
  %2182 = load <4 x float>, <4 x float>* %2181, align 4, !alias.scope !373, !noalias !374
  %2183 = fadd <4 x float> %2179, %2176
  %2184 = fadd <4 x float> %2182, %2177
  %2185 = bitcast float* %2163 to <4 x float>*
  store <4 x float> %2183, <4 x float>* %2185, align 4, !alias.scope !373, !noalias !374
  %2186 = bitcast float* %2180 to <4 x float>*
  store <4 x float> %2184, <4 x float>* %2186, align 4, !alias.scope !373, !noalias !374
  %2187 = add i64 %2136, 16
  %2188 = add i64 %2137, -2
  %2189 = icmp eq i64 %2188, 0
  br i1 %2189, label %2190, label %2135, !llvm.loop !375

2190:                                             ; preds = %2135, %2132
  %2191 = phi i64 [ 0, %2132 ], [ %2187, %2135 ]
  br i1 %2125, label %2217, label %2192

2192:                                             ; preds = %2190
  %2193 = getelementptr float, float* %2129, i64 %2191
  %2194 = getelementptr float, float* %56, i64 %2191
  %2195 = getelementptr float, float* %2130, i64 %2191
  %2196 = bitcast float* %2194 to <4 x float>*
  %2197 = load <4 x float>, <4 x float>* %2196, align 4, !alias.scope !365, !noalias !368
  %2198 = getelementptr float, float* %2194, i64 4
  %2199 = bitcast float* %2198 to <4 x float>*
  %2200 = load <4 x float>, <4 x float>* %2199, align 4, !alias.scope !365, !noalias !368
  %2201 = bitcast float* %2195 to <4 x float>*
  %2202 = load <4 x float>, <4 x float>* %2201, align 4, !alias.scope !371, !noalias !372
  %2203 = getelementptr float, float* %2195, i64 4
  %2204 = bitcast float* %2203 to <4 x float>*
  %2205 = load <4 x float>, <4 x float>* %2204, align 4, !alias.scope !371, !noalias !372
  %2206 = fmul <4 x float> %2197, %2202
  %2207 = fmul <4 x float> %2200, %2205
  %2208 = bitcast float* %2193 to <4 x float>*
  %2209 = load <4 x float>, <4 x float>* %2208, align 4, !alias.scope !373, !noalias !374
  %2210 = getelementptr float, float* %2193, i64 4
  %2211 = bitcast float* %2210 to <4 x float>*
  %2212 = load <4 x float>, <4 x float>* %2211, align 4, !alias.scope !373, !noalias !374
  %2213 = fadd <4 x float> %2209, %2206
  %2214 = fadd <4 x float> %2212, %2207
  %2215 = bitcast float* %2193 to <4 x float>*
  store <4 x float> %2213, <4 x float>* %2215, align 4, !alias.scope !373, !noalias !374
  %2216 = bitcast float* %2210 to <4 x float>*
  store <4 x float> %2214, <4 x float>* %2216, align 4, !alias.scope !373, !noalias !374
  br label %2217

2217:                                             ; preds = %2190, %2192
  br i1 %2126, label %2238, label %2218

2218:                                             ; preds = %2217, %2131
  %2219 = phi i32 [ 0, %2131 ], [ %2120, %2217 ]
  %2220 = phi float* [ %2129, %2131 ], [ %2133, %2217 ]
  %2221 = phi float* [ %56, %2131 ], [ %2121, %2217 ]
  %2222 = phi float* [ %2130, %2131 ], [ %2134, %2217 ]
  br label %2223

2223:                                             ; preds = %2218, %2223
  %2224 = phi i32 [ %2236, %2223 ], [ %2219, %2218 ]
  %2225 = phi float* [ %2233, %2223 ], [ %2220, %2218 ]
  %2226 = phi float* [ %2228, %2223 ], [ %2221, %2218 ]
  %2227 = phi float* [ %2230, %2223 ], [ %2222, %2218 ]
  %2228 = getelementptr inbounds float, float* %2226, i64 1
  %2229 = load float, float* %2226, align 4, !alias.scope !365, !noalias !368
  %2230 = getelementptr inbounds float, float* %2227, i64 1
  %2231 = load float, float* %2227, align 4, !alias.scope !371, !noalias !372
  %2232 = fmul float %2229, %2231
  %2233 = getelementptr inbounds float, float* %2225, i64 1
  %2234 = load float, float* %2225, align 4, !alias.scope !373, !noalias !374
  %2235 = fadd float %2234, %2232
  store float %2235, float* %2225, align 4, !alias.scope !373, !noalias !374
  %2236 = add nuw nsw i32 %2224, 1
  %2237 = icmp eq i32 %2236, %45
  br i1 %2237, label %2238, label %2223, !llvm.loop !376

2238:                                             ; preds = %2223, %2217, %2127
  %2239 = getelementptr inbounds float, float* %2129, i64 %2110
  %2240 = getelementptr inbounds float, float* %2130, i64 %2110
  %2241 = add nuw nsw i32 %2128, 1
  %2242 = icmp eq i32 %2241, %44
  br i1 %2242, label %2243, label %2127

2243:                                             ; preds = %2238, %2106, %2105
  br i1 %96, label %2244, label %2350

2244:                                             ; preds = %2243
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %51, float* %51, i32 %45, i32 %44) #15
  %2245 = icmp sgt i32 %44, 0
  br i1 %2245, label %2246, label %2349

2246:                                             ; preds = %2244
  %2247 = icmp sgt i32 %45, 0
  %2248 = sext i32 %45 to i64
  %2249 = add i32 %45, -1
  %2250 = zext i32 %2249 to i64
  %2251 = add nuw nsw i64 %2250, 1
  %2252 = and i64 %2251, 8589934584
  %2253 = add nsw i64 %2252, -8
  %2254 = lshr exact i64 %2253, 3
  %2255 = add nuw nsw i64 %2254, 1
  %2256 = icmp ult i64 %2251, 8
  %2257 = and i64 %2251, 8589934584
  %2258 = trunc i64 %2257 to i32
  %2259 = getelementptr float, float* %33, i64 %2257
  %2260 = and i64 %2255, 1
  %2261 = icmp eq i64 %2253, 0
  %2262 = sub nuw nsw i64 %2255, %2260
  %2263 = icmp eq i64 %2260, 0
  %2264 = icmp eq i64 %2251, %2257
  br label %2265

2265:                                             ; preds = %2345, %2246
  %2266 = phi i32 [ 0, %2246 ], [ %2347, %2345 ]
  %2267 = phi float* [ %51, %2246 ], [ %2346, %2345 ]
  br i1 %2247, label %2268, label %2345

2268:                                             ; preds = %2265
  br i1 %2256, label %2330, label %2269

2269:                                             ; preds = %2268
  %2270 = getelementptr float, float* %2267, i64 %2257
  br i1 %2261, label %2310, label %2271

2271:                                             ; preds = %2269, %2271
  %2272 = phi i64 [ %2307, %2271 ], [ 0, %2269 ]
  %2273 = phi i64 [ %2308, %2271 ], [ %2262, %2269 ]
  %2274 = getelementptr float, float* %2267, i64 %2272
  %2275 = getelementptr float, float* %33, i64 %2272
  %2276 = bitcast float* %2275 to <4 x float>*
  %2277 = load <4 x float>, <4 x float>* %2276, align 4, !alias.scope !377, !noalias !380
  %2278 = getelementptr float, float* %2275, i64 4
  %2279 = bitcast float* %2278 to <4 x float>*
  %2280 = load <4 x float>, <4 x float>* %2279, align 4, !alias.scope !377, !noalias !380
  %2281 = bitcast float* %2274 to <4 x float>*
  %2282 = load <4 x float>, <4 x float>* %2281, align 4, !alias.scope !383, !noalias !384
  %2283 = getelementptr float, float* %2274, i64 4
  %2284 = bitcast float* %2283 to <4 x float>*
  %2285 = load <4 x float>, <4 x float>* %2284, align 4, !alias.scope !383, !noalias !384
  %2286 = fmul <4 x float> %2277, %2282
  %2287 = fmul <4 x float> %2280, %2285
  %2288 = bitcast float* %2274 to <4 x float>*
  store <4 x float> %2286, <4 x float>* %2288, align 4, !alias.scope !385, !noalias !386
  %2289 = bitcast float* %2283 to <4 x float>*
  store <4 x float> %2287, <4 x float>* %2289, align 4, !alias.scope !385, !noalias !386
  %2290 = or i64 %2272, 8
  %2291 = getelementptr float, float* %2267, i64 %2290
  %2292 = getelementptr float, float* %33, i64 %2290
  %2293 = bitcast float* %2292 to <4 x float>*
  %2294 = load <4 x float>, <4 x float>* %2293, align 4, !alias.scope !377, !noalias !380
  %2295 = getelementptr float, float* %2292, i64 4
  %2296 = bitcast float* %2295 to <4 x float>*
  %2297 = load <4 x float>, <4 x float>* %2296, align 4, !alias.scope !377, !noalias !380
  %2298 = bitcast float* %2291 to <4 x float>*
  %2299 = load <4 x float>, <4 x float>* %2298, align 4, !alias.scope !383, !noalias !384
  %2300 = getelementptr float, float* %2291, i64 4
  %2301 = bitcast float* %2300 to <4 x float>*
  %2302 = load <4 x float>, <4 x float>* %2301, align 4, !alias.scope !383, !noalias !384
  %2303 = fmul <4 x float> %2294, %2299
  %2304 = fmul <4 x float> %2297, %2302
  %2305 = bitcast float* %2291 to <4 x float>*
  store <4 x float> %2303, <4 x float>* %2305, align 4, !alias.scope !385, !noalias !386
  %2306 = bitcast float* %2300 to <4 x float>*
  store <4 x float> %2304, <4 x float>* %2306, align 4, !alias.scope !385, !noalias !386
  %2307 = add i64 %2272, 16
  %2308 = add i64 %2273, -2
  %2309 = icmp eq i64 %2308, 0
  br i1 %2309, label %2310, label %2271, !llvm.loop !387

2310:                                             ; preds = %2271, %2269
  %2311 = phi i64 [ 0, %2269 ], [ %2307, %2271 ]
  br i1 %2263, label %2329, label %2312

2312:                                             ; preds = %2310
  %2313 = getelementptr float, float* %2267, i64 %2311
  %2314 = getelementptr float, float* %33, i64 %2311
  %2315 = bitcast float* %2314 to <4 x float>*
  %2316 = load <4 x float>, <4 x float>* %2315, align 4, !alias.scope !377, !noalias !380
  %2317 = getelementptr float, float* %2314, i64 4
  %2318 = bitcast float* %2317 to <4 x float>*
  %2319 = load <4 x float>, <4 x float>* %2318, align 4, !alias.scope !377, !noalias !380
  %2320 = bitcast float* %2313 to <4 x float>*
  %2321 = load <4 x float>, <4 x float>* %2320, align 4, !alias.scope !383, !noalias !384
  %2322 = getelementptr float, float* %2313, i64 4
  %2323 = bitcast float* %2322 to <4 x float>*
  %2324 = load <4 x float>, <4 x float>* %2323, align 4, !alias.scope !383, !noalias !384
  %2325 = fmul <4 x float> %2316, %2321
  %2326 = fmul <4 x float> %2319, %2324
  %2327 = bitcast float* %2313 to <4 x float>*
  store <4 x float> %2325, <4 x float>* %2327, align 4, !alias.scope !385, !noalias !386
  %2328 = bitcast float* %2322 to <4 x float>*
  store <4 x float> %2326, <4 x float>* %2328, align 4, !alias.scope !385, !noalias !386
  br label %2329

2329:                                             ; preds = %2310, %2312
  br i1 %2264, label %2345, label %2330

2330:                                             ; preds = %2329, %2268
  %2331 = phi i32 [ 0, %2268 ], [ %2258, %2329 ]
  %2332 = phi float* [ %2267, %2268 ], [ %2270, %2329 ]
  %2333 = phi float* [ %33, %2268 ], [ %2259, %2329 ]
  br label %2334

2334:                                             ; preds = %2330, %2334
  %2335 = phi i32 [ %2343, %2334 ], [ %2331, %2330 ]
  %2336 = phi float* [ %2340, %2334 ], [ %2332, %2330 ]
  %2337 = phi float* [ %2338, %2334 ], [ %2333, %2330 ]
  %2338 = getelementptr inbounds float, float* %2337, i64 1
  %2339 = load float, float* %2337, align 4, !alias.scope !377, !noalias !380
  %2340 = getelementptr inbounds float, float* %2336, i64 1
  %2341 = load float, float* %2336, align 4, !alias.scope !383, !noalias !384
  %2342 = fmul float %2339, %2341
  store float %2342, float* %2336, align 4, !alias.scope !385, !noalias !386
  %2343 = add nuw nsw i32 %2335, 1
  %2344 = icmp eq i32 %2343, %45
  br i1 %2344, label %2345, label %2334, !llvm.loop !388

2345:                                             ; preds = %2334, %2329, %2265
  %2346 = getelementptr inbounds float, float* %2267, i64 %2248
  %2347 = add nuw nsw i32 %2266, 1
  %2348 = icmp eq i32 %2347, %44
  br i1 %2348, label %2349, label %2265

2349:                                             ; preds = %2345, %2244
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %37, i32 %45, i32 %44, float* %51) #15
  br label %2350

2350:                                             ; preds = %2349, %2243
  %2351 = mul nsw i32 %45, %44
  %2352 = sext i32 %2351 to i64
  %2353 = bitcast %"class.Eigen::CwiseUnaryOp"* %87 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2353) #15, !noalias !389
  %2354 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %51, float** %2354, align 8, !noalias !389
  %2355 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2352, i64* %2355, align 8, !noalias !389
  %2356 = bitcast %"class.Eigen::ArrayWrapper"* %88 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2356) #15, !noalias !389
  %2357 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %88, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %51, float** %2357, align 8, !noalias !389
  %2358 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %88, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2352, i64* %2358, align 8, !noalias !389
  %2359 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %86, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2359) #15, !noalias !389
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %88, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %87, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %86) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2359) #15, !noalias !389
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2356) #15, !noalias !389
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2353) #15, !noalias !389
  %2360 = icmp sgt i32 %2351, 0
  br i1 %2360, label %2361, label %2455

2361:                                             ; preds = %2350
  %2362 = mul i32 %45, %44
  %2363 = add i32 %2362, -1
  %2364 = zext i32 %2363 to i64
  %2365 = add nuw nsw i64 %2364, 1
  %2366 = icmp ult i64 %2365, 8
  br i1 %2366, label %2440, label %2367

2367:                                             ; preds = %2361
  %2368 = and i64 %2365, 8589934584
  %2369 = trunc i64 %2368 to i32
  %2370 = getelementptr float, float* %62, i64 %2368
  %2371 = getelementptr float, float* %51, i64 %2368
  %2372 = add nsw i64 %2368, -8
  %2373 = lshr exact i64 %2372, 3
  %2374 = add nuw nsw i64 %2373, 1
  %2375 = and i64 %2374, 1
  %2376 = icmp eq i64 %2372, 0
  br i1 %2376, label %2418, label %2377

2377:                                             ; preds = %2367
  %2378 = sub nuw nsw i64 %2374, %2375
  br label %2379

2379:                                             ; preds = %2379, %2377
  %2380 = phi i64 [ 0, %2377 ], [ %2415, %2379 ]
  %2381 = phi i64 [ %2378, %2377 ], [ %2416, %2379 ]
  %2382 = getelementptr float, float* %62, i64 %2380
  %2383 = getelementptr float, float* %51, i64 %2380
  %2384 = bitcast float* %2383 to <4 x float>*
  %2385 = load <4 x float>, <4 x float>* %2384, align 4, !alias.scope !393, !noalias !396
  %2386 = getelementptr float, float* %2383, i64 4
  %2387 = bitcast float* %2386 to <4 x float>*
  %2388 = load <4 x float>, <4 x float>* %2387, align 4, !alias.scope !393, !noalias !396
  %2389 = bitcast float* %2382 to <4 x float>*
  %2390 = load <4 x float>, <4 x float>* %2389, align 4, !alias.scope !399, !noalias !400
  %2391 = getelementptr float, float* %2382, i64 4
  %2392 = bitcast float* %2391 to <4 x float>*
  %2393 = load <4 x float>, <4 x float>* %2392, align 4, !alias.scope !399, !noalias !400
  %2394 = fmul <4 x float> %2385, %2390
  %2395 = fmul <4 x float> %2388, %2393
  %2396 = bitcast float* %2382 to <4 x float>*
  store <4 x float> %2394, <4 x float>* %2396, align 4, !alias.scope !401, !noalias !402
  %2397 = bitcast float* %2391 to <4 x float>*
  store <4 x float> %2395, <4 x float>* %2397, align 4, !alias.scope !401, !noalias !402
  %2398 = or i64 %2380, 8
  %2399 = getelementptr float, float* %62, i64 %2398
  %2400 = getelementptr float, float* %51, i64 %2398
  %2401 = bitcast float* %2400 to <4 x float>*
  %2402 = load <4 x float>, <4 x float>* %2401, align 4, !alias.scope !393, !noalias !396
  %2403 = getelementptr float, float* %2400, i64 4
  %2404 = bitcast float* %2403 to <4 x float>*
  %2405 = load <4 x float>, <4 x float>* %2404, align 4, !alias.scope !393, !noalias !396
  %2406 = bitcast float* %2399 to <4 x float>*
  %2407 = load <4 x float>, <4 x float>* %2406, align 4, !alias.scope !399, !noalias !400
  %2408 = getelementptr float, float* %2399, i64 4
  %2409 = bitcast float* %2408 to <4 x float>*
  %2410 = load <4 x float>, <4 x float>* %2409, align 4, !alias.scope !399, !noalias !400
  %2411 = fmul <4 x float> %2402, %2407
  %2412 = fmul <4 x float> %2405, %2410
  %2413 = bitcast float* %2399 to <4 x float>*
  store <4 x float> %2411, <4 x float>* %2413, align 4, !alias.scope !401, !noalias !402
  %2414 = bitcast float* %2408 to <4 x float>*
  store <4 x float> %2412, <4 x float>* %2414, align 4, !alias.scope !401, !noalias !402
  %2415 = add i64 %2380, 16
  %2416 = add i64 %2381, -2
  %2417 = icmp eq i64 %2416, 0
  br i1 %2417, label %2418, label %2379, !llvm.loop !403

2418:                                             ; preds = %2379, %2367
  %2419 = phi i64 [ 0, %2367 ], [ %2415, %2379 ]
  %2420 = icmp eq i64 %2375, 0
  br i1 %2420, label %2438, label %2421

2421:                                             ; preds = %2418
  %2422 = getelementptr float, float* %62, i64 %2419
  %2423 = getelementptr float, float* %51, i64 %2419
  %2424 = bitcast float* %2423 to <4 x float>*
  %2425 = load <4 x float>, <4 x float>* %2424, align 4, !alias.scope !393, !noalias !396
  %2426 = getelementptr float, float* %2423, i64 4
  %2427 = bitcast float* %2426 to <4 x float>*
  %2428 = load <4 x float>, <4 x float>* %2427, align 4, !alias.scope !393, !noalias !396
  %2429 = bitcast float* %2422 to <4 x float>*
  %2430 = load <4 x float>, <4 x float>* %2429, align 4, !alias.scope !399, !noalias !400
  %2431 = getelementptr float, float* %2422, i64 4
  %2432 = bitcast float* %2431 to <4 x float>*
  %2433 = load <4 x float>, <4 x float>* %2432, align 4, !alias.scope !399, !noalias !400
  %2434 = fmul <4 x float> %2425, %2430
  %2435 = fmul <4 x float> %2428, %2433
  %2436 = bitcast float* %2422 to <4 x float>*
  store <4 x float> %2434, <4 x float>* %2436, align 4, !alias.scope !401, !noalias !402
  %2437 = bitcast float* %2431 to <4 x float>*
  store <4 x float> %2435, <4 x float>* %2437, align 4, !alias.scope !401, !noalias !402
  br label %2438

2438:                                             ; preds = %2418, %2421
  %2439 = icmp eq i64 %2365, %2368
  br i1 %2439, label %2455, label %2440

2440:                                             ; preds = %2438, %2361
  %2441 = phi i32 [ 0, %2361 ], [ %2369, %2438 ]
  %2442 = phi float* [ %62, %2361 ], [ %2370, %2438 ]
  %2443 = phi float* [ %51, %2361 ], [ %2371, %2438 ]
  br label %2444

2444:                                             ; preds = %2440, %2444
  %2445 = phi i32 [ %2453, %2444 ], [ %2441, %2440 ]
  %2446 = phi float* [ %2450, %2444 ], [ %2442, %2440 ]
  %2447 = phi float* [ %2448, %2444 ], [ %2443, %2440 ]
  %2448 = getelementptr inbounds float, float* %2447, i64 1
  %2449 = load float, float* %2447, align 4, !alias.scope !393, !noalias !396
  %2450 = getelementptr inbounds float, float* %2446, i64 1
  %2451 = load float, float* %2446, align 4, !alias.scope !399, !noalias !400
  %2452 = fmul float %2449, %2451
  store float %2452, float* %2446, align 4, !alias.scope !401, !noalias !402
  %2453 = add nuw nsw i32 %2445, 1
  %2454 = icmp eq i32 %2453, %2351
  br i1 %2454, label %2455, label %2444, !llvm.loop !404

2455:                                             ; preds = %2444, %2438, %2350
  br i1 %96, label %2456, label %2562

2456:                                             ; preds = %2455
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %52, float* %52, i32 %45, i32 %44) #15
  %2457 = icmp sgt i32 %44, 0
  br i1 %2457, label %2458, label %2561

2458:                                             ; preds = %2456
  %2459 = icmp sgt i32 %45, 0
  %2460 = sext i32 %45 to i64
  %2461 = add i32 %45, -1
  %2462 = zext i32 %2461 to i64
  %2463 = add nuw nsw i64 %2462, 1
  %2464 = and i64 %2463, 8589934584
  %2465 = add nsw i64 %2464, -8
  %2466 = lshr exact i64 %2465, 3
  %2467 = add nuw nsw i64 %2466, 1
  %2468 = icmp ult i64 %2463, 8
  %2469 = and i64 %2463, 8589934584
  %2470 = trunc i64 %2469 to i32
  %2471 = getelementptr float, float* %34, i64 %2469
  %2472 = and i64 %2467, 1
  %2473 = icmp eq i64 %2465, 0
  %2474 = sub nuw nsw i64 %2467, %2472
  %2475 = icmp eq i64 %2472, 0
  %2476 = icmp eq i64 %2463, %2469
  br label %2477

2477:                                             ; preds = %2557, %2458
  %2478 = phi i32 [ 0, %2458 ], [ %2559, %2557 ]
  %2479 = phi float* [ %52, %2458 ], [ %2558, %2557 ]
  br i1 %2459, label %2480, label %2557

2480:                                             ; preds = %2477
  br i1 %2468, label %2542, label %2481

2481:                                             ; preds = %2480
  %2482 = getelementptr float, float* %2479, i64 %2469
  br i1 %2473, label %2522, label %2483

2483:                                             ; preds = %2481, %2483
  %2484 = phi i64 [ %2519, %2483 ], [ 0, %2481 ]
  %2485 = phi i64 [ %2520, %2483 ], [ %2474, %2481 ]
  %2486 = getelementptr float, float* %2479, i64 %2484
  %2487 = getelementptr float, float* %34, i64 %2484
  %2488 = bitcast float* %2487 to <4 x float>*
  %2489 = load <4 x float>, <4 x float>* %2488, align 4, !alias.scope !405, !noalias !408
  %2490 = getelementptr float, float* %2487, i64 4
  %2491 = bitcast float* %2490 to <4 x float>*
  %2492 = load <4 x float>, <4 x float>* %2491, align 4, !alias.scope !405, !noalias !408
  %2493 = bitcast float* %2486 to <4 x float>*
  %2494 = load <4 x float>, <4 x float>* %2493, align 4, !alias.scope !411, !noalias !412
  %2495 = getelementptr float, float* %2486, i64 4
  %2496 = bitcast float* %2495 to <4 x float>*
  %2497 = load <4 x float>, <4 x float>* %2496, align 4, !alias.scope !411, !noalias !412
  %2498 = fmul <4 x float> %2489, %2494
  %2499 = fmul <4 x float> %2492, %2497
  %2500 = bitcast float* %2486 to <4 x float>*
  store <4 x float> %2498, <4 x float>* %2500, align 4, !alias.scope !413, !noalias !414
  %2501 = bitcast float* %2495 to <4 x float>*
  store <4 x float> %2499, <4 x float>* %2501, align 4, !alias.scope !413, !noalias !414
  %2502 = or i64 %2484, 8
  %2503 = getelementptr float, float* %2479, i64 %2502
  %2504 = getelementptr float, float* %34, i64 %2502
  %2505 = bitcast float* %2504 to <4 x float>*
  %2506 = load <4 x float>, <4 x float>* %2505, align 4, !alias.scope !405, !noalias !408
  %2507 = getelementptr float, float* %2504, i64 4
  %2508 = bitcast float* %2507 to <4 x float>*
  %2509 = load <4 x float>, <4 x float>* %2508, align 4, !alias.scope !405, !noalias !408
  %2510 = bitcast float* %2503 to <4 x float>*
  %2511 = load <4 x float>, <4 x float>* %2510, align 4, !alias.scope !411, !noalias !412
  %2512 = getelementptr float, float* %2503, i64 4
  %2513 = bitcast float* %2512 to <4 x float>*
  %2514 = load <4 x float>, <4 x float>* %2513, align 4, !alias.scope !411, !noalias !412
  %2515 = fmul <4 x float> %2506, %2511
  %2516 = fmul <4 x float> %2509, %2514
  %2517 = bitcast float* %2503 to <4 x float>*
  store <4 x float> %2515, <4 x float>* %2517, align 4, !alias.scope !413, !noalias !414
  %2518 = bitcast float* %2512 to <4 x float>*
  store <4 x float> %2516, <4 x float>* %2518, align 4, !alias.scope !413, !noalias !414
  %2519 = add i64 %2484, 16
  %2520 = add i64 %2485, -2
  %2521 = icmp eq i64 %2520, 0
  br i1 %2521, label %2522, label %2483, !llvm.loop !415

2522:                                             ; preds = %2483, %2481
  %2523 = phi i64 [ 0, %2481 ], [ %2519, %2483 ]
  br i1 %2475, label %2541, label %2524

2524:                                             ; preds = %2522
  %2525 = getelementptr float, float* %2479, i64 %2523
  %2526 = getelementptr float, float* %34, i64 %2523
  %2527 = bitcast float* %2526 to <4 x float>*
  %2528 = load <4 x float>, <4 x float>* %2527, align 4, !alias.scope !405, !noalias !408
  %2529 = getelementptr float, float* %2526, i64 4
  %2530 = bitcast float* %2529 to <4 x float>*
  %2531 = load <4 x float>, <4 x float>* %2530, align 4, !alias.scope !405, !noalias !408
  %2532 = bitcast float* %2525 to <4 x float>*
  %2533 = load <4 x float>, <4 x float>* %2532, align 4, !alias.scope !411, !noalias !412
  %2534 = getelementptr float, float* %2525, i64 4
  %2535 = bitcast float* %2534 to <4 x float>*
  %2536 = load <4 x float>, <4 x float>* %2535, align 4, !alias.scope !411, !noalias !412
  %2537 = fmul <4 x float> %2528, %2533
  %2538 = fmul <4 x float> %2531, %2536
  %2539 = bitcast float* %2525 to <4 x float>*
  store <4 x float> %2537, <4 x float>* %2539, align 4, !alias.scope !413, !noalias !414
  %2540 = bitcast float* %2534 to <4 x float>*
  store <4 x float> %2538, <4 x float>* %2540, align 4, !alias.scope !413, !noalias !414
  br label %2541

2541:                                             ; preds = %2522, %2524
  br i1 %2476, label %2557, label %2542

2542:                                             ; preds = %2541, %2480
  %2543 = phi i32 [ 0, %2480 ], [ %2470, %2541 ]
  %2544 = phi float* [ %2479, %2480 ], [ %2482, %2541 ]
  %2545 = phi float* [ %34, %2480 ], [ %2471, %2541 ]
  br label %2546

2546:                                             ; preds = %2542, %2546
  %2547 = phi i32 [ %2555, %2546 ], [ %2543, %2542 ]
  %2548 = phi float* [ %2552, %2546 ], [ %2544, %2542 ]
  %2549 = phi float* [ %2550, %2546 ], [ %2545, %2542 ]
  %2550 = getelementptr inbounds float, float* %2549, i64 1
  %2551 = load float, float* %2549, align 4, !alias.scope !405, !noalias !408
  %2552 = getelementptr inbounds float, float* %2548, i64 1
  %2553 = load float, float* %2548, align 4, !alias.scope !411, !noalias !412
  %2554 = fmul float %2551, %2553
  store float %2554, float* %2548, align 4, !alias.scope !413, !noalias !414
  %2555 = add nuw nsw i32 %2547, 1
  %2556 = icmp eq i32 %2555, %45
  br i1 %2556, label %2557, label %2546, !llvm.loop !416

2557:                                             ; preds = %2546, %2541, %2477
  %2558 = getelementptr inbounds float, float* %2479, i64 %2460
  %2559 = add nuw nsw i32 %2478, 1
  %2560 = icmp eq i32 %2559, %44
  br i1 %2560, label %2561, label %2477

2561:                                             ; preds = %2557, %2456
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %38, i32 %45, i32 %44, float* %52) #15
  br label %2562

2562:                                             ; preds = %2561, %2455
  %2563 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %43, i64 0, i32 0
  %2564 = load i32, i32* %2563, align 4
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %52, i32 %2351, i32 %2564, float* %52)
  br i1 %94, label %2565, label %2690

2565:                                             ; preds = %2562
  call void @_ZN6tflite12tensor_utils10Sub1VectorEPKfiPf(float* %51, i32 %2351, float* %51) #15
  br i1 %2360, label %2566, label %2815

2566:                                             ; preds = %2565
  %2567 = mul i32 %45, %44
  %2568 = add i32 %2567, -1
  %2569 = zext i32 %2568 to i64
  %2570 = add nuw nsw i64 %2569, 1
  %2571 = icmp ult i64 %2570, 8
  br i1 %2571, label %2670, label %2572

2572:                                             ; preds = %2566
  %2573 = and i64 %2570, 8589934584
  %2574 = trunc i64 %2573 to i32
  %2575 = getelementptr float, float* %62, i64 %2573
  %2576 = getelementptr float, float* %52, i64 %2573
  %2577 = getelementptr float, float* %51, i64 %2573
  %2578 = add nsw i64 %2573, -8
  %2579 = lshr exact i64 %2578, 3
  %2580 = add nuw nsw i64 %2579, 1
  %2581 = and i64 %2580, 1
  %2582 = icmp eq i64 %2578, 0
  br i1 %2582, label %2640, label %2583

2583:                                             ; preds = %2572
  %2584 = sub nuw nsw i64 %2580, %2581
  br label %2585

2585:                                             ; preds = %2585, %2583
  %2586 = phi i64 [ 0, %2583 ], [ %2637, %2585 ]
  %2587 = phi i64 [ %2584, %2583 ], [ %2638, %2585 ]
  %2588 = getelementptr float, float* %62, i64 %2586
  %2589 = getelementptr float, float* %52, i64 %2586
  %2590 = getelementptr float, float* %51, i64 %2586
  %2591 = bitcast float* %2589 to <4 x float>*
  %2592 = load <4 x float>, <4 x float>* %2591, align 4, !alias.scope !417, !noalias !420
  %2593 = getelementptr float, float* %2589, i64 4
  %2594 = bitcast float* %2593 to <4 x float>*
  %2595 = load <4 x float>, <4 x float>* %2594, align 4, !alias.scope !417, !noalias !420
  %2596 = bitcast float* %2590 to <4 x float>*
  %2597 = load <4 x float>, <4 x float>* %2596, align 4, !alias.scope !423, !noalias !424
  %2598 = getelementptr float, float* %2590, i64 4
  %2599 = bitcast float* %2598 to <4 x float>*
  %2600 = load <4 x float>, <4 x float>* %2599, align 4, !alias.scope !423, !noalias !424
  %2601 = fmul <4 x float> %2592, %2597
  %2602 = fmul <4 x float> %2595, %2600
  %2603 = bitcast float* %2588 to <4 x float>*
  %2604 = load <4 x float>, <4 x float>* %2603, align 4, !alias.scope !425, !noalias !426
  %2605 = getelementptr float, float* %2588, i64 4
  %2606 = bitcast float* %2605 to <4 x float>*
  %2607 = load <4 x float>, <4 x float>* %2606, align 4, !alias.scope !425, !noalias !426
  %2608 = fadd <4 x float> %2604, %2601
  %2609 = fadd <4 x float> %2607, %2602
  %2610 = bitcast float* %2588 to <4 x float>*
  store <4 x float> %2608, <4 x float>* %2610, align 4, !alias.scope !425, !noalias !426
  %2611 = bitcast float* %2605 to <4 x float>*
  store <4 x float> %2609, <4 x float>* %2611, align 4, !alias.scope !425, !noalias !426
  %2612 = or i64 %2586, 8
  %2613 = getelementptr float, float* %62, i64 %2612
  %2614 = getelementptr float, float* %52, i64 %2612
  %2615 = getelementptr float, float* %51, i64 %2612
  %2616 = bitcast float* %2614 to <4 x float>*
  %2617 = load <4 x float>, <4 x float>* %2616, align 4, !alias.scope !417, !noalias !420
  %2618 = getelementptr float, float* %2614, i64 4
  %2619 = bitcast float* %2618 to <4 x float>*
  %2620 = load <4 x float>, <4 x float>* %2619, align 4, !alias.scope !417, !noalias !420
  %2621 = bitcast float* %2615 to <4 x float>*
  %2622 = load <4 x float>, <4 x float>* %2621, align 4, !alias.scope !423, !noalias !424
  %2623 = getelementptr float, float* %2615, i64 4
  %2624 = bitcast float* %2623 to <4 x float>*
  %2625 = load <4 x float>, <4 x float>* %2624, align 4, !alias.scope !423, !noalias !424
  %2626 = fmul <4 x float> %2617, %2622
  %2627 = fmul <4 x float> %2620, %2625
  %2628 = bitcast float* %2613 to <4 x float>*
  %2629 = load <4 x float>, <4 x float>* %2628, align 4, !alias.scope !425, !noalias !426
  %2630 = getelementptr float, float* %2613, i64 4
  %2631 = bitcast float* %2630 to <4 x float>*
  %2632 = load <4 x float>, <4 x float>* %2631, align 4, !alias.scope !425, !noalias !426
  %2633 = fadd <4 x float> %2629, %2626
  %2634 = fadd <4 x float> %2632, %2627
  %2635 = bitcast float* %2613 to <4 x float>*
  store <4 x float> %2633, <4 x float>* %2635, align 4, !alias.scope !425, !noalias !426
  %2636 = bitcast float* %2630 to <4 x float>*
  store <4 x float> %2634, <4 x float>* %2636, align 4, !alias.scope !425, !noalias !426
  %2637 = add i64 %2586, 16
  %2638 = add i64 %2587, -2
  %2639 = icmp eq i64 %2638, 0
  br i1 %2639, label %2640, label %2585, !llvm.loop !427

2640:                                             ; preds = %2585, %2572
  %2641 = phi i64 [ 0, %2572 ], [ %2637, %2585 ]
  %2642 = icmp eq i64 %2581, 0
  br i1 %2642, label %2668, label %2643

2643:                                             ; preds = %2640
  %2644 = getelementptr float, float* %62, i64 %2641
  %2645 = getelementptr float, float* %52, i64 %2641
  %2646 = getelementptr float, float* %51, i64 %2641
  %2647 = bitcast float* %2645 to <4 x float>*
  %2648 = load <4 x float>, <4 x float>* %2647, align 4, !alias.scope !417, !noalias !420
  %2649 = getelementptr float, float* %2645, i64 4
  %2650 = bitcast float* %2649 to <4 x float>*
  %2651 = load <4 x float>, <4 x float>* %2650, align 4, !alias.scope !417, !noalias !420
  %2652 = bitcast float* %2646 to <4 x float>*
  %2653 = load <4 x float>, <4 x float>* %2652, align 4, !alias.scope !423, !noalias !424
  %2654 = getelementptr float, float* %2646, i64 4
  %2655 = bitcast float* %2654 to <4 x float>*
  %2656 = load <4 x float>, <4 x float>* %2655, align 4, !alias.scope !423, !noalias !424
  %2657 = fmul <4 x float> %2648, %2653
  %2658 = fmul <4 x float> %2651, %2656
  %2659 = bitcast float* %2644 to <4 x float>*
  %2660 = load <4 x float>, <4 x float>* %2659, align 4, !alias.scope !425, !noalias !426
  %2661 = getelementptr float, float* %2644, i64 4
  %2662 = bitcast float* %2661 to <4 x float>*
  %2663 = load <4 x float>, <4 x float>* %2662, align 4, !alias.scope !425, !noalias !426
  %2664 = fadd <4 x float> %2660, %2657
  %2665 = fadd <4 x float> %2663, %2658
  %2666 = bitcast float* %2644 to <4 x float>*
  store <4 x float> %2664, <4 x float>* %2666, align 4, !alias.scope !425, !noalias !426
  %2667 = bitcast float* %2661 to <4 x float>*
  store <4 x float> %2665, <4 x float>* %2667, align 4, !alias.scope !425, !noalias !426
  br label %2668

2668:                                             ; preds = %2640, %2643
  %2669 = icmp eq i64 %2570, %2573
  br i1 %2669, label %2815, label %2670

2670:                                             ; preds = %2668, %2566
  %2671 = phi i32 [ 0, %2566 ], [ %2574, %2668 ]
  %2672 = phi float* [ %62, %2566 ], [ %2575, %2668 ]
  %2673 = phi float* [ %52, %2566 ], [ %2576, %2668 ]
  %2674 = phi float* [ %51, %2566 ], [ %2577, %2668 ]
  br label %2675

2675:                                             ; preds = %2670, %2675
  %2676 = phi i32 [ %2688, %2675 ], [ %2671, %2670 ]
  %2677 = phi float* [ %2685, %2675 ], [ %2672, %2670 ]
  %2678 = phi float* [ %2680, %2675 ], [ %2673, %2670 ]
  %2679 = phi float* [ %2682, %2675 ], [ %2674, %2670 ]
  %2680 = getelementptr inbounds float, float* %2678, i64 1
  %2681 = load float, float* %2678, align 4, !alias.scope !417, !noalias !420
  %2682 = getelementptr inbounds float, float* %2679, i64 1
  %2683 = load float, float* %2679, align 4, !alias.scope !423, !noalias !424
  %2684 = fmul float %2681, %2683
  %2685 = getelementptr inbounds float, float* %2677, i64 1
  %2686 = load float, float* %2677, align 4, !alias.scope !425, !noalias !426
  %2687 = fadd float %2686, %2684
  store float %2687, float* %2677, align 4, !alias.scope !425, !noalias !426
  %2688 = add nuw nsw i32 %2676, 1
  %2689 = icmp eq i32 %2688, %2351
  br i1 %2689, label %2815, label %2675, !llvm.loop !428

2690:                                             ; preds = %2562
  br i1 %2360, label %2691, label %2815

2691:                                             ; preds = %2690
  %2692 = mul i32 %45, %44
  %2693 = add i32 %2692, -1
  %2694 = zext i32 %2693 to i64
  %2695 = add nuw nsw i64 %2694, 1
  %2696 = icmp ult i64 %2695, 8
  br i1 %2696, label %2795, label %2697

2697:                                             ; preds = %2691
  %2698 = and i64 %2695, 8589934584
  %2699 = trunc i64 %2698 to i32
  %2700 = getelementptr float, float* %62, i64 %2698
  %2701 = getelementptr float, float* %52, i64 %2698
  %2702 = getelementptr float, float* %50, i64 %2698
  %2703 = add nsw i64 %2698, -8
  %2704 = lshr exact i64 %2703, 3
  %2705 = add nuw nsw i64 %2704, 1
  %2706 = and i64 %2705, 1
  %2707 = icmp eq i64 %2703, 0
  br i1 %2707, label %2765, label %2708

2708:                                             ; preds = %2697
  %2709 = sub nuw nsw i64 %2705, %2706
  br label %2710

2710:                                             ; preds = %2710, %2708
  %2711 = phi i64 [ 0, %2708 ], [ %2762, %2710 ]
  %2712 = phi i64 [ %2709, %2708 ], [ %2763, %2710 ]
  %2713 = getelementptr float, float* %62, i64 %2711
  %2714 = getelementptr float, float* %52, i64 %2711
  %2715 = getelementptr float, float* %50, i64 %2711
  %2716 = bitcast float* %2714 to <4 x float>*
  %2717 = load <4 x float>, <4 x float>* %2716, align 4, !alias.scope !429, !noalias !432
  %2718 = getelementptr float, float* %2714, i64 4
  %2719 = bitcast float* %2718 to <4 x float>*
  %2720 = load <4 x float>, <4 x float>* %2719, align 4, !alias.scope !429, !noalias !432
  %2721 = bitcast float* %2715 to <4 x float>*
  %2722 = load <4 x float>, <4 x float>* %2721, align 4, !alias.scope !435, !noalias !436
  %2723 = getelementptr float, float* %2715, i64 4
  %2724 = bitcast float* %2723 to <4 x float>*
  %2725 = load <4 x float>, <4 x float>* %2724, align 4, !alias.scope !435, !noalias !436
  %2726 = fmul <4 x float> %2717, %2722
  %2727 = fmul <4 x float> %2720, %2725
  %2728 = bitcast float* %2713 to <4 x float>*
  %2729 = load <4 x float>, <4 x float>* %2728, align 4, !alias.scope !437, !noalias !438
  %2730 = getelementptr float, float* %2713, i64 4
  %2731 = bitcast float* %2730 to <4 x float>*
  %2732 = load <4 x float>, <4 x float>* %2731, align 4, !alias.scope !437, !noalias !438
  %2733 = fadd <4 x float> %2729, %2726
  %2734 = fadd <4 x float> %2732, %2727
  %2735 = bitcast float* %2713 to <4 x float>*
  store <4 x float> %2733, <4 x float>* %2735, align 4, !alias.scope !437, !noalias !438
  %2736 = bitcast float* %2730 to <4 x float>*
  store <4 x float> %2734, <4 x float>* %2736, align 4, !alias.scope !437, !noalias !438
  %2737 = or i64 %2711, 8
  %2738 = getelementptr float, float* %62, i64 %2737
  %2739 = getelementptr float, float* %52, i64 %2737
  %2740 = getelementptr float, float* %50, i64 %2737
  %2741 = bitcast float* %2739 to <4 x float>*
  %2742 = load <4 x float>, <4 x float>* %2741, align 4, !alias.scope !429, !noalias !432
  %2743 = getelementptr float, float* %2739, i64 4
  %2744 = bitcast float* %2743 to <4 x float>*
  %2745 = load <4 x float>, <4 x float>* %2744, align 4, !alias.scope !429, !noalias !432
  %2746 = bitcast float* %2740 to <4 x float>*
  %2747 = load <4 x float>, <4 x float>* %2746, align 4, !alias.scope !435, !noalias !436
  %2748 = getelementptr float, float* %2740, i64 4
  %2749 = bitcast float* %2748 to <4 x float>*
  %2750 = load <4 x float>, <4 x float>* %2749, align 4, !alias.scope !435, !noalias !436
  %2751 = fmul <4 x float> %2742, %2747
  %2752 = fmul <4 x float> %2745, %2750
  %2753 = bitcast float* %2738 to <4 x float>*
  %2754 = load <4 x float>, <4 x float>* %2753, align 4, !alias.scope !437, !noalias !438
  %2755 = getelementptr float, float* %2738, i64 4
  %2756 = bitcast float* %2755 to <4 x float>*
  %2757 = load <4 x float>, <4 x float>* %2756, align 4, !alias.scope !437, !noalias !438
  %2758 = fadd <4 x float> %2754, %2751
  %2759 = fadd <4 x float> %2757, %2752
  %2760 = bitcast float* %2738 to <4 x float>*
  store <4 x float> %2758, <4 x float>* %2760, align 4, !alias.scope !437, !noalias !438
  %2761 = bitcast float* %2755 to <4 x float>*
  store <4 x float> %2759, <4 x float>* %2761, align 4, !alias.scope !437, !noalias !438
  %2762 = add i64 %2711, 16
  %2763 = add i64 %2712, -2
  %2764 = icmp eq i64 %2763, 0
  br i1 %2764, label %2765, label %2710, !llvm.loop !439

2765:                                             ; preds = %2710, %2697
  %2766 = phi i64 [ 0, %2697 ], [ %2762, %2710 ]
  %2767 = icmp eq i64 %2706, 0
  br i1 %2767, label %2793, label %2768

2768:                                             ; preds = %2765
  %2769 = getelementptr float, float* %62, i64 %2766
  %2770 = getelementptr float, float* %52, i64 %2766
  %2771 = getelementptr float, float* %50, i64 %2766
  %2772 = bitcast float* %2770 to <4 x float>*
  %2773 = load <4 x float>, <4 x float>* %2772, align 4, !alias.scope !429, !noalias !432
  %2774 = getelementptr float, float* %2770, i64 4
  %2775 = bitcast float* %2774 to <4 x float>*
  %2776 = load <4 x float>, <4 x float>* %2775, align 4, !alias.scope !429, !noalias !432
  %2777 = bitcast float* %2771 to <4 x float>*
  %2778 = load <4 x float>, <4 x float>* %2777, align 4, !alias.scope !435, !noalias !436
  %2779 = getelementptr float, float* %2771, i64 4
  %2780 = bitcast float* %2779 to <4 x float>*
  %2781 = load <4 x float>, <4 x float>* %2780, align 4, !alias.scope !435, !noalias !436
  %2782 = fmul <4 x float> %2773, %2778
  %2783 = fmul <4 x float> %2776, %2781
  %2784 = bitcast float* %2769 to <4 x float>*
  %2785 = load <4 x float>, <4 x float>* %2784, align 4, !alias.scope !437, !noalias !438
  %2786 = getelementptr float, float* %2769, i64 4
  %2787 = bitcast float* %2786 to <4 x float>*
  %2788 = load <4 x float>, <4 x float>* %2787, align 4, !alias.scope !437, !noalias !438
  %2789 = fadd <4 x float> %2785, %2782
  %2790 = fadd <4 x float> %2788, %2783
  %2791 = bitcast float* %2769 to <4 x float>*
  store <4 x float> %2789, <4 x float>* %2791, align 4, !alias.scope !437, !noalias !438
  %2792 = bitcast float* %2786 to <4 x float>*
  store <4 x float> %2790, <4 x float>* %2792, align 4, !alias.scope !437, !noalias !438
  br label %2793

2793:                                             ; preds = %2765, %2768
  %2794 = icmp eq i64 %2695, %2698
  br i1 %2794, label %2815, label %2795

2795:                                             ; preds = %2793, %2691
  %2796 = phi i32 [ 0, %2691 ], [ %2699, %2793 ]
  %2797 = phi float* [ %62, %2691 ], [ %2700, %2793 ]
  %2798 = phi float* [ %52, %2691 ], [ %2701, %2793 ]
  %2799 = phi float* [ %50, %2691 ], [ %2702, %2793 ]
  br label %2800

2800:                                             ; preds = %2795, %2800
  %2801 = phi i32 [ %2813, %2800 ], [ %2796, %2795 ]
  %2802 = phi float* [ %2810, %2800 ], [ %2797, %2795 ]
  %2803 = phi float* [ %2805, %2800 ], [ %2798, %2795 ]
  %2804 = phi float* [ %2807, %2800 ], [ %2799, %2795 ]
  %2805 = getelementptr inbounds float, float* %2803, i64 1
  %2806 = load float, float* %2803, align 4, !alias.scope !429, !noalias !432
  %2807 = getelementptr inbounds float, float* %2804, i64 1
  %2808 = load float, float* %2804, align 4, !alias.scope !435, !noalias !436
  %2809 = fmul float %2806, %2808
  %2810 = getelementptr inbounds float, float* %2802, i64 1
  %2811 = load float, float* %2802, align 4, !alias.scope !437, !noalias !438
  %2812 = fadd float %2811, %2809
  store float %2812, float* %2802, align 4, !alias.scope !437, !noalias !438
  %2813 = add nuw nsw i32 %2801, 1
  %2814 = icmp eq i32 %2813, %2351
  br i1 %2814, label %2815, label %2800, !llvm.loop !440

2815:                                             ; preds = %2800, %2675, %2793, %2668, %2690, %2565
  %2816 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %43, i64 0, i32 1
  %2817 = load float, float* %2816, align 4
  %2818 = fcmp ogt float %2817, 0.000000e+00
  br i1 %2818, label %2819, label %2820

2819:                                             ; preds = %2815
  call void @_ZN6tflite12tensor_utils10ClipVectorEPKfifPf(float* %62, i32 %2351, float %2817, float* %62) #15
  br label %2820

2820:                                             ; preds = %2819, %2815
  br i1 %95, label %2821, label %2958

2821:                                             ; preds = %2820
  call void @_ZN6tflite12tensor_utils20VectorScalarMultiplyEPKaifPf(i8* nonnull %30, i32 %45, float %31, float* %56) #15
  %2822 = icmp sgt i32 %44, 0
  br i1 %2822, label %2823, label %2958

2823:                                             ; preds = %2821
  %2824 = icmp sgt i32 %45, 0
  %2825 = sext i32 %45 to i64
  %2826 = add i32 %45, -1
  %2827 = zext i32 %2826 to i64
  %2828 = add nuw nsw i64 %2827, 1
  %2829 = and i64 %2828, 8589934584
  %2830 = add nsw i64 %2829, -8
  %2831 = lshr exact i64 %2830, 3
  %2832 = add nuw nsw i64 %2831, 1
  %2833 = icmp ult i64 %2828, 8
  %2834 = and i64 %2828, 8589934584
  %2835 = trunc i64 %2834 to i32
  %2836 = getelementptr float, float* %56, i64 %2834
  %2837 = and i64 %2832, 1
  %2838 = icmp eq i64 %2830, 0
  %2839 = sub nuw nsw i64 %2832, %2837
  %2840 = icmp eq i64 %2837, 0
  %2841 = icmp eq i64 %2828, %2834
  br label %2842

2842:                                             ; preds = %2953, %2823
  %2843 = phi i32 [ 0, %2823 ], [ %2956, %2953 ]
  %2844 = phi float* [ %53, %2823 ], [ %2954, %2953 ]
  %2845 = phi float* [ %62, %2823 ], [ %2955, %2953 ]
  br i1 %2824, label %2846, label %2953

2846:                                             ; preds = %2842
  br i1 %2833, label %2933, label %2847

2847:                                             ; preds = %2846
  %2848 = getelementptr float, float* %2844, i64 %2834
  %2849 = getelementptr float, float* %2845, i64 %2834
  br i1 %2838, label %2905, label %2850

2850:                                             ; preds = %2847, %2850
  %2851 = phi i64 [ %2902, %2850 ], [ 0, %2847 ]
  %2852 = phi i64 [ %2903, %2850 ], [ %2839, %2847 ]
  %2853 = getelementptr float, float* %2844, i64 %2851
  %2854 = getelementptr float, float* %56, i64 %2851
  %2855 = getelementptr float, float* %2845, i64 %2851
  %2856 = bitcast float* %2854 to <4 x float>*
  %2857 = load <4 x float>, <4 x float>* %2856, align 4, !alias.scope !441, !noalias !444
  %2858 = getelementptr float, float* %2854, i64 4
  %2859 = bitcast float* %2858 to <4 x float>*
  %2860 = load <4 x float>, <4 x float>* %2859, align 4, !alias.scope !441, !noalias !444
  %2861 = bitcast float* %2855 to <4 x float>*
  %2862 = load <4 x float>, <4 x float>* %2861, align 4, !alias.scope !447, !noalias !448
  %2863 = getelementptr float, float* %2855, i64 4
  %2864 = bitcast float* %2863 to <4 x float>*
  %2865 = load <4 x float>, <4 x float>* %2864, align 4, !alias.scope !447, !noalias !448
  %2866 = fmul <4 x float> %2857, %2862
  %2867 = fmul <4 x float> %2860, %2865
  %2868 = bitcast float* %2853 to <4 x float>*
  %2869 = load <4 x float>, <4 x float>* %2868, align 4, !alias.scope !449, !noalias !450
  %2870 = getelementptr float, float* %2853, i64 4
  %2871 = bitcast float* %2870 to <4 x float>*
  %2872 = load <4 x float>, <4 x float>* %2871, align 4, !alias.scope !449, !noalias !450
  %2873 = fadd <4 x float> %2869, %2866
  %2874 = fadd <4 x float> %2872, %2867
  %2875 = bitcast float* %2853 to <4 x float>*
  store <4 x float> %2873, <4 x float>* %2875, align 4, !alias.scope !449, !noalias !450
  %2876 = bitcast float* %2870 to <4 x float>*
  store <4 x float> %2874, <4 x float>* %2876, align 4, !alias.scope !449, !noalias !450
  %2877 = or i64 %2851, 8
  %2878 = getelementptr float, float* %2844, i64 %2877
  %2879 = getelementptr float, float* %56, i64 %2877
  %2880 = getelementptr float, float* %2845, i64 %2877
  %2881 = bitcast float* %2879 to <4 x float>*
  %2882 = load <4 x float>, <4 x float>* %2881, align 4, !alias.scope !441, !noalias !444
  %2883 = getelementptr float, float* %2879, i64 4
  %2884 = bitcast float* %2883 to <4 x float>*
  %2885 = load <4 x float>, <4 x float>* %2884, align 4, !alias.scope !441, !noalias !444
  %2886 = bitcast float* %2880 to <4 x float>*
  %2887 = load <4 x float>, <4 x float>* %2886, align 4, !alias.scope !447, !noalias !448
  %2888 = getelementptr float, float* %2880, i64 4
  %2889 = bitcast float* %2888 to <4 x float>*
  %2890 = load <4 x float>, <4 x float>* %2889, align 4, !alias.scope !447, !noalias !448
  %2891 = fmul <4 x float> %2882, %2887
  %2892 = fmul <4 x float> %2885, %2890
  %2893 = bitcast float* %2878 to <4 x float>*
  %2894 = load <4 x float>, <4 x float>* %2893, align 4, !alias.scope !449, !noalias !450
  %2895 = getelementptr float, float* %2878, i64 4
  %2896 = bitcast float* %2895 to <4 x float>*
  %2897 = load <4 x float>, <4 x float>* %2896, align 4, !alias.scope !449, !noalias !450
  %2898 = fadd <4 x float> %2894, %2891
  %2899 = fadd <4 x float> %2897, %2892
  %2900 = bitcast float* %2878 to <4 x float>*
  store <4 x float> %2898, <4 x float>* %2900, align 4, !alias.scope !449, !noalias !450
  %2901 = bitcast float* %2895 to <4 x float>*
  store <4 x float> %2899, <4 x float>* %2901, align 4, !alias.scope !449, !noalias !450
  %2902 = add i64 %2851, 16
  %2903 = add i64 %2852, -2
  %2904 = icmp eq i64 %2903, 0
  br i1 %2904, label %2905, label %2850, !llvm.loop !451

2905:                                             ; preds = %2850, %2847
  %2906 = phi i64 [ 0, %2847 ], [ %2902, %2850 ]
  br i1 %2840, label %2932, label %2907

2907:                                             ; preds = %2905
  %2908 = getelementptr float, float* %2844, i64 %2906
  %2909 = getelementptr float, float* %56, i64 %2906
  %2910 = getelementptr float, float* %2845, i64 %2906
  %2911 = bitcast float* %2909 to <4 x float>*
  %2912 = load <4 x float>, <4 x float>* %2911, align 4, !alias.scope !441, !noalias !444
  %2913 = getelementptr float, float* %2909, i64 4
  %2914 = bitcast float* %2913 to <4 x float>*
  %2915 = load <4 x float>, <4 x float>* %2914, align 4, !alias.scope !441, !noalias !444
  %2916 = bitcast float* %2910 to <4 x float>*
  %2917 = load <4 x float>, <4 x float>* %2916, align 4, !alias.scope !447, !noalias !448
  %2918 = getelementptr float, float* %2910, i64 4
  %2919 = bitcast float* %2918 to <4 x float>*
  %2920 = load <4 x float>, <4 x float>* %2919, align 4, !alias.scope !447, !noalias !448
  %2921 = fmul <4 x float> %2912, %2917
  %2922 = fmul <4 x float> %2915, %2920
  %2923 = bitcast float* %2908 to <4 x float>*
  %2924 = load <4 x float>, <4 x float>* %2923, align 4, !alias.scope !449, !noalias !450
  %2925 = getelementptr float, float* %2908, i64 4
  %2926 = bitcast float* %2925 to <4 x float>*
  %2927 = load <4 x float>, <4 x float>* %2926, align 4, !alias.scope !449, !noalias !450
  %2928 = fadd <4 x float> %2924, %2921
  %2929 = fadd <4 x float> %2927, %2922
  %2930 = bitcast float* %2908 to <4 x float>*
  store <4 x float> %2928, <4 x float>* %2930, align 4, !alias.scope !449, !noalias !450
  %2931 = bitcast float* %2925 to <4 x float>*
  store <4 x float> %2929, <4 x float>* %2931, align 4, !alias.scope !449, !noalias !450
  br label %2932

2932:                                             ; preds = %2905, %2907
  br i1 %2841, label %2953, label %2933

2933:                                             ; preds = %2932, %2846
  %2934 = phi i32 [ 0, %2846 ], [ %2835, %2932 ]
  %2935 = phi float* [ %2844, %2846 ], [ %2848, %2932 ]
  %2936 = phi float* [ %56, %2846 ], [ %2836, %2932 ]
  %2937 = phi float* [ %2845, %2846 ], [ %2849, %2932 ]
  br label %2938

2938:                                             ; preds = %2933, %2938
  %2939 = phi i32 [ %2951, %2938 ], [ %2934, %2933 ]
  %2940 = phi float* [ %2948, %2938 ], [ %2935, %2933 ]
  %2941 = phi float* [ %2943, %2938 ], [ %2936, %2933 ]
  %2942 = phi float* [ %2945, %2938 ], [ %2937, %2933 ]
  %2943 = getelementptr inbounds float, float* %2941, i64 1
  %2944 = load float, float* %2941, align 4, !alias.scope !441, !noalias !444
  %2945 = getelementptr inbounds float, float* %2942, i64 1
  %2946 = load float, float* %2942, align 4, !alias.scope !447, !noalias !448
  %2947 = fmul float %2944, %2946
  %2948 = getelementptr inbounds float, float* %2940, i64 1
  %2949 = load float, float* %2940, align 4, !alias.scope !449, !noalias !450
  %2950 = fadd float %2949, %2947
  store float %2950, float* %2940, align 4, !alias.scope !449, !noalias !450
  %2951 = add nuw nsw i32 %2939, 1
  %2952 = icmp eq i32 %2951, %45
  br i1 %2952, label %2953, label %2938, !llvm.loop !452

2953:                                             ; preds = %2938, %2932, %2842
  %2954 = getelementptr inbounds float, float* %2844, i64 %2825
  %2955 = getelementptr inbounds float, float* %2845, i64 %2825
  %2956 = add nuw nsw i32 %2843, 1
  %2957 = icmp eq i32 %2956, %44
  br i1 %2957, label %2958, label %2842

2958:                                             ; preds = %2953, %2821, %2820
  br i1 %96, label %2959, label %3065

2959:                                             ; preds = %2958
  call void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float* %53, float* %53, i32 %45, i32 %44) #15
  %2960 = icmp sgt i32 %44, 0
  br i1 %2960, label %2961, label %3064

2961:                                             ; preds = %2959
  %2962 = icmp sgt i32 %45, 0
  %2963 = sext i32 %45 to i64
  %2964 = add i32 %45, -1
  %2965 = zext i32 %2964 to i64
  %2966 = add nuw nsw i64 %2965, 1
  %2967 = and i64 %2966, 8589934584
  %2968 = add nsw i64 %2967, -8
  %2969 = lshr exact i64 %2968, 3
  %2970 = add nuw nsw i64 %2969, 1
  %2971 = icmp ult i64 %2966, 8
  %2972 = and i64 %2966, 8589934584
  %2973 = trunc i64 %2972 to i32
  %2974 = getelementptr float, float* %35, i64 %2972
  %2975 = and i64 %2970, 1
  %2976 = icmp eq i64 %2968, 0
  %2977 = sub nuw nsw i64 %2970, %2975
  %2978 = icmp eq i64 %2975, 0
  %2979 = icmp eq i64 %2966, %2972
  br label %2980

2980:                                             ; preds = %3060, %2961
  %2981 = phi i32 [ 0, %2961 ], [ %3062, %3060 ]
  %2982 = phi float* [ %53, %2961 ], [ %3061, %3060 ]
  br i1 %2962, label %2983, label %3060

2983:                                             ; preds = %2980
  br i1 %2971, label %3045, label %2984

2984:                                             ; preds = %2983
  %2985 = getelementptr float, float* %2982, i64 %2972
  br i1 %2976, label %3025, label %2986

2986:                                             ; preds = %2984, %2986
  %2987 = phi i64 [ %3022, %2986 ], [ 0, %2984 ]
  %2988 = phi i64 [ %3023, %2986 ], [ %2977, %2984 ]
  %2989 = getelementptr float, float* %2982, i64 %2987
  %2990 = getelementptr float, float* %35, i64 %2987
  %2991 = bitcast float* %2990 to <4 x float>*
  %2992 = load <4 x float>, <4 x float>* %2991, align 4, !alias.scope !453, !noalias !456
  %2993 = getelementptr float, float* %2990, i64 4
  %2994 = bitcast float* %2993 to <4 x float>*
  %2995 = load <4 x float>, <4 x float>* %2994, align 4, !alias.scope !453, !noalias !456
  %2996 = bitcast float* %2989 to <4 x float>*
  %2997 = load <4 x float>, <4 x float>* %2996, align 4, !alias.scope !459, !noalias !460
  %2998 = getelementptr float, float* %2989, i64 4
  %2999 = bitcast float* %2998 to <4 x float>*
  %3000 = load <4 x float>, <4 x float>* %2999, align 4, !alias.scope !459, !noalias !460
  %3001 = fmul <4 x float> %2992, %2997
  %3002 = fmul <4 x float> %2995, %3000
  %3003 = bitcast float* %2989 to <4 x float>*
  store <4 x float> %3001, <4 x float>* %3003, align 4, !alias.scope !461, !noalias !462
  %3004 = bitcast float* %2998 to <4 x float>*
  store <4 x float> %3002, <4 x float>* %3004, align 4, !alias.scope !461, !noalias !462
  %3005 = or i64 %2987, 8
  %3006 = getelementptr float, float* %2982, i64 %3005
  %3007 = getelementptr float, float* %35, i64 %3005
  %3008 = bitcast float* %3007 to <4 x float>*
  %3009 = load <4 x float>, <4 x float>* %3008, align 4, !alias.scope !453, !noalias !456
  %3010 = getelementptr float, float* %3007, i64 4
  %3011 = bitcast float* %3010 to <4 x float>*
  %3012 = load <4 x float>, <4 x float>* %3011, align 4, !alias.scope !453, !noalias !456
  %3013 = bitcast float* %3006 to <4 x float>*
  %3014 = load <4 x float>, <4 x float>* %3013, align 4, !alias.scope !459, !noalias !460
  %3015 = getelementptr float, float* %3006, i64 4
  %3016 = bitcast float* %3015 to <4 x float>*
  %3017 = load <4 x float>, <4 x float>* %3016, align 4, !alias.scope !459, !noalias !460
  %3018 = fmul <4 x float> %3009, %3014
  %3019 = fmul <4 x float> %3012, %3017
  %3020 = bitcast float* %3006 to <4 x float>*
  store <4 x float> %3018, <4 x float>* %3020, align 4, !alias.scope !461, !noalias !462
  %3021 = bitcast float* %3015 to <4 x float>*
  store <4 x float> %3019, <4 x float>* %3021, align 4, !alias.scope !461, !noalias !462
  %3022 = add i64 %2987, 16
  %3023 = add i64 %2988, -2
  %3024 = icmp eq i64 %3023, 0
  br i1 %3024, label %3025, label %2986, !llvm.loop !463

3025:                                             ; preds = %2986, %2984
  %3026 = phi i64 [ 0, %2984 ], [ %3022, %2986 ]
  br i1 %2978, label %3044, label %3027

3027:                                             ; preds = %3025
  %3028 = getelementptr float, float* %2982, i64 %3026
  %3029 = getelementptr float, float* %35, i64 %3026
  %3030 = bitcast float* %3029 to <4 x float>*
  %3031 = load <4 x float>, <4 x float>* %3030, align 4, !alias.scope !453, !noalias !456
  %3032 = getelementptr float, float* %3029, i64 4
  %3033 = bitcast float* %3032 to <4 x float>*
  %3034 = load <4 x float>, <4 x float>* %3033, align 4, !alias.scope !453, !noalias !456
  %3035 = bitcast float* %3028 to <4 x float>*
  %3036 = load <4 x float>, <4 x float>* %3035, align 4, !alias.scope !459, !noalias !460
  %3037 = getelementptr float, float* %3028, i64 4
  %3038 = bitcast float* %3037 to <4 x float>*
  %3039 = load <4 x float>, <4 x float>* %3038, align 4, !alias.scope !459, !noalias !460
  %3040 = fmul <4 x float> %3031, %3036
  %3041 = fmul <4 x float> %3034, %3039
  %3042 = bitcast float* %3028 to <4 x float>*
  store <4 x float> %3040, <4 x float>* %3042, align 4, !alias.scope !461, !noalias !462
  %3043 = bitcast float* %3037 to <4 x float>*
  store <4 x float> %3041, <4 x float>* %3043, align 4, !alias.scope !461, !noalias !462
  br label %3044

3044:                                             ; preds = %3025, %3027
  br i1 %2979, label %3060, label %3045

3045:                                             ; preds = %3044, %2983
  %3046 = phi i32 [ 0, %2983 ], [ %2973, %3044 ]
  %3047 = phi float* [ %2982, %2983 ], [ %2985, %3044 ]
  %3048 = phi float* [ %35, %2983 ], [ %2974, %3044 ]
  br label %3049

3049:                                             ; preds = %3045, %3049
  %3050 = phi i32 [ %3058, %3049 ], [ %3046, %3045 ]
  %3051 = phi float* [ %3055, %3049 ], [ %3047, %3045 ]
  %3052 = phi float* [ %3053, %3049 ], [ %3048, %3045 ]
  %3053 = getelementptr inbounds float, float* %3052, i64 1
  %3054 = load float, float* %3052, align 4, !alias.scope !453, !noalias !456
  %3055 = getelementptr inbounds float, float* %3051, i64 1
  %3056 = load float, float* %3051, align 4, !alias.scope !459, !noalias !460
  %3057 = fmul float %3054, %3056
  store float %3057, float* %3051, align 4, !alias.scope !461, !noalias !462
  %3058 = add nuw nsw i32 %3050, 1
  %3059 = icmp eq i32 %3058, %45
  br i1 %3059, label %3060, label %3049, !llvm.loop !464

3060:                                             ; preds = %3049, %3044, %2980
  %3061 = getelementptr inbounds float, float* %2982, i64 %2963
  %3062 = add nuw nsw i32 %2981, 1
  %3063 = icmp eq i32 %3062, %44
  br i1 %3063, label %3064, label %2980

3064:                                             ; preds = %3060, %2959
  call void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float* %39, i32 %45, i32 %44, float* %53) #15
  br label %3065

3065:                                             ; preds = %3064, %2958
  %3066 = bitcast %"class.Eigen::CwiseUnaryOp"* %90 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3066) #15, !noalias !465
  %3067 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %53, float** %3067, align 8, !noalias !465
  %3068 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2352, i64* %3068, align 8, !noalias !465
  %3069 = bitcast %"class.Eigen::ArrayWrapper"* %91 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3069) #15, !noalias !465
  %3070 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %91, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %53, float** %3070, align 8, !noalias !465
  %3071 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2352, i64* %3071, align 8, !noalias !465
  %3072 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %89, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3072) #15, !noalias !465
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %91, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %90, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %89) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3072) #15, !noalias !465
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3069) #15, !noalias !465
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3066) #15, !noalias !465
  %3073 = load i32, i32* %2563, align 4
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %62, i32 %2351, i32 %3073, float* %52)
  br i1 %2360, label %3074, label %3216

3074:                                             ; preds = %3065
  %3075 = mul i32 %45, %44
  %3076 = add i32 %3075, -1
  %3077 = zext i32 %3076 to i64
  %3078 = add nuw nsw i64 %3077, 1
  %3079 = icmp ult i64 %3078, 8
  br i1 %3079, label %3163, label %3080

3080:                                             ; preds = %3074
  %3081 = mul i32 %45, %44
  %3082 = add i32 %3081, -1
  %3083 = zext i32 %3082 to i64
  %3084 = add nuw nsw i64 %3083, 1
  %3085 = getelementptr float, float* %53, i64 %3084
  %3086 = getelementptr float, float* %52, i64 %3084
  %3087 = icmp ugt float* %3086, %53
  %3088 = icmp ugt float* %3085, %52
  %3089 = and i1 %3087, %3088
  br i1 %3089, label %3163, label %3090

3090:                                             ; preds = %3080
  %3091 = and i64 %3078, 8589934584
  %3092 = trunc i64 %3091 to i32
  %3093 = getelementptr float, float* %53, i64 %3091
  %3094 = getelementptr float, float* %52, i64 %3091
  %3095 = add nsw i64 %3091, -8
  %3096 = lshr exact i64 %3095, 3
  %3097 = add nuw nsw i64 %3096, 1
  %3098 = and i64 %3097, 1
  %3099 = icmp eq i64 %3095, 0
  br i1 %3099, label %3141, label %3100

3100:                                             ; preds = %3090
  %3101 = sub nuw nsw i64 %3097, %3098
  br label %3102

3102:                                             ; preds = %3102, %3100
  %3103 = phi i64 [ 0, %3100 ], [ %3138, %3102 ]
  %3104 = phi i64 [ %3101, %3100 ], [ %3139, %3102 ]
  %3105 = getelementptr float, float* %53, i64 %3103
  %3106 = getelementptr float, float* %52, i64 %3103
  %3107 = bitcast float* %3105 to <4 x float>*
  %3108 = load <4 x float>, <4 x float>* %3107, align 4, !alias.scope !469, !noalias !474
  %3109 = getelementptr float, float* %3105, i64 4
  %3110 = bitcast float* %3109 to <4 x float>*
  %3111 = load <4 x float>, <4 x float>* %3110, align 4, !alias.scope !469, !noalias !474
  %3112 = bitcast float* %3106 to <4 x float>*
  %3113 = load <4 x float>, <4 x float>* %3112, align 4, !alias.scope !478, !noalias !479
  %3114 = getelementptr float, float* %3106, i64 4
  %3115 = bitcast float* %3114 to <4 x float>*
  %3116 = load <4 x float>, <4 x float>* %3115, align 4, !alias.scope !478, !noalias !479
  %3117 = fmul <4 x float> %3108, %3113
  %3118 = fmul <4 x float> %3111, %3116
  %3119 = bitcast float* %3105 to <4 x float>*
  store <4 x float> %3117, <4 x float>* %3119, align 4, !alias.scope !480, !noalias !481
  %3120 = bitcast float* %3109 to <4 x float>*
  store <4 x float> %3118, <4 x float>* %3120, align 4, !alias.scope !480, !noalias !481
  %3121 = or i64 %3103, 8
  %3122 = getelementptr float, float* %53, i64 %3121
  %3123 = getelementptr float, float* %52, i64 %3121
  %3124 = bitcast float* %3122 to <4 x float>*
  %3125 = load <4 x float>, <4 x float>* %3124, align 4, !alias.scope !469, !noalias !474
  %3126 = getelementptr float, float* %3122, i64 4
  %3127 = bitcast float* %3126 to <4 x float>*
  %3128 = load <4 x float>, <4 x float>* %3127, align 4, !alias.scope !469, !noalias !474
  %3129 = bitcast float* %3123 to <4 x float>*
  %3130 = load <4 x float>, <4 x float>* %3129, align 4, !alias.scope !478, !noalias !479
  %3131 = getelementptr float, float* %3123, i64 4
  %3132 = bitcast float* %3131 to <4 x float>*
  %3133 = load <4 x float>, <4 x float>* %3132, align 4, !alias.scope !478, !noalias !479
  %3134 = fmul <4 x float> %3125, %3130
  %3135 = fmul <4 x float> %3128, %3133
  %3136 = bitcast float* %3122 to <4 x float>*
  store <4 x float> %3134, <4 x float>* %3136, align 4, !alias.scope !480, !noalias !481
  %3137 = bitcast float* %3126 to <4 x float>*
  store <4 x float> %3135, <4 x float>* %3137, align 4, !alias.scope !480, !noalias !481
  %3138 = add i64 %3103, 16
  %3139 = add i64 %3104, -2
  %3140 = icmp eq i64 %3139, 0
  br i1 %3140, label %3141, label %3102, !llvm.loop !482

3141:                                             ; preds = %3102, %3090
  %3142 = phi i64 [ 0, %3090 ], [ %3138, %3102 ]
  %3143 = icmp eq i64 %3098, 0
  br i1 %3143, label %3161, label %3144

3144:                                             ; preds = %3141
  %3145 = getelementptr float, float* %53, i64 %3142
  %3146 = getelementptr float, float* %52, i64 %3142
  %3147 = bitcast float* %3145 to <4 x float>*
  %3148 = load <4 x float>, <4 x float>* %3147, align 4, !alias.scope !469, !noalias !474
  %3149 = getelementptr float, float* %3145, i64 4
  %3150 = bitcast float* %3149 to <4 x float>*
  %3151 = load <4 x float>, <4 x float>* %3150, align 4, !alias.scope !469, !noalias !474
  %3152 = bitcast float* %3146 to <4 x float>*
  %3153 = load <4 x float>, <4 x float>* %3152, align 4, !alias.scope !478, !noalias !479
  %3154 = getelementptr float, float* %3146, i64 4
  %3155 = bitcast float* %3154 to <4 x float>*
  %3156 = load <4 x float>, <4 x float>* %3155, align 4, !alias.scope !478, !noalias !479
  %3157 = fmul <4 x float> %3148, %3153
  %3158 = fmul <4 x float> %3151, %3156
  %3159 = bitcast float* %3145 to <4 x float>*
  store <4 x float> %3157, <4 x float>* %3159, align 4, !alias.scope !480, !noalias !481
  %3160 = bitcast float* %3149 to <4 x float>*
  store <4 x float> %3158, <4 x float>* %3160, align 4, !alias.scope !480, !noalias !481
  br label %3161

3161:                                             ; preds = %3141, %3144
  %3162 = icmp eq i64 %3078, %3091
  br i1 %3162, label %3216, label %3163

3163:                                             ; preds = %3161, %3080, %3074
  %3164 = phi i32 [ 0, %3080 ], [ 0, %3074 ], [ %3092, %3161 ]
  %3165 = phi float* [ %53, %3080 ], [ %53, %3074 ], [ %3093, %3161 ]
  %3166 = phi float* [ %52, %3080 ], [ %52, %3074 ], [ %3094, %3161 ]
  %3167 = sub i32 %3075, %3164
  %3168 = xor i32 %3164, -1
  %3169 = add i32 %3075, %3168
  %3170 = and i32 %3167, 3
  %3171 = icmp eq i32 %3170, 0
  br i1 %3171, label %3185, label %3172

3172:                                             ; preds = %3163, %3172
  %3173 = phi i32 [ %3182, %3172 ], [ %3164, %3163 ]
  %3174 = phi float* [ %3177, %3172 ], [ %3165, %3163 ]
  %3175 = phi float* [ %3179, %3172 ], [ %3166, %3163 ]
  %3176 = phi i32 [ %3183, %3172 ], [ %3170, %3163 ]
  %3177 = getelementptr inbounds float, float* %3174, i64 1
  %3178 = load float, float* %3174, align 4, !alias.scope !483, !noalias !484
  %3179 = getelementptr inbounds float, float* %3175, i64 1
  %3180 = load float, float* %3175, align 4, !alias.scope !485, !noalias !479
  %3181 = fmul float %3178, %3180
  store float %3181, float* %3174, align 4, !alias.scope !486, !noalias !487
  %3182 = add nuw nsw i32 %3173, 1
  %3183 = add i32 %3176, -1
  %3184 = icmp eq i32 %3183, 0
  br i1 %3184, label %3185, label %3172, !llvm.loop !488

3185:                                             ; preds = %3172, %3163
  %3186 = phi i32 [ %3164, %3163 ], [ %3182, %3172 ]
  %3187 = phi float* [ %3165, %3163 ], [ %3177, %3172 ]
  %3188 = phi float* [ %3166, %3163 ], [ %3179, %3172 ]
  %3189 = icmp ult i32 %3169, 3
  br i1 %3189, label %3216, label %3190

3190:                                             ; preds = %3185, %3190
  %3191 = phi i32 [ %3214, %3190 ], [ %3186, %3185 ]
  %3192 = phi float* [ %3209, %3190 ], [ %3187, %3185 ]
  %3193 = phi float* [ %3211, %3190 ], [ %3188, %3185 ]
  %3194 = getelementptr inbounds float, float* %3192, i64 1
  %3195 = load float, float* %3192, align 4, !alias.scope !483, !noalias !484
  %3196 = getelementptr inbounds float, float* %3193, i64 1
  %3197 = load float, float* %3193, align 4, !alias.scope !485, !noalias !479
  %3198 = fmul float %3195, %3197
  store float %3198, float* %3192, align 4, !alias.scope !486, !noalias !487
  %3199 = getelementptr inbounds float, float* %3192, i64 2
  %3200 = load float, float* %3194, align 4, !alias.scope !483, !noalias !484
  %3201 = getelementptr inbounds float, float* %3193, i64 2
  %3202 = load float, float* %3196, align 4, !alias.scope !485, !noalias !479
  %3203 = fmul float %3200, %3202
  store float %3203, float* %3194, align 4, !alias.scope !486, !noalias !487
  %3204 = getelementptr inbounds float, float* %3192, i64 3
  %3205 = load float, float* %3199, align 4, !alias.scope !483, !noalias !484
  %3206 = getelementptr inbounds float, float* %3193, i64 3
  %3207 = load float, float* %3201, align 4, !alias.scope !485, !noalias !479
  %3208 = fmul float %3205, %3207
  store float %3208, float* %3199, align 4, !alias.scope !486, !noalias !487
  %3209 = getelementptr inbounds float, float* %3192, i64 4
  %3210 = load float, float* %3204, align 4, !alias.scope !483, !noalias !484
  %3211 = getelementptr inbounds float, float* %3193, i64 4
  %3212 = load float, float* %3206, align 4, !alias.scope !485, !noalias !479
  %3213 = fmul float %3210, %3212
  store float %3213, float* %3204, align 4, !alias.scope !486, !noalias !487
  %3214 = add nuw nsw i32 %3191, 4
  %3215 = icmp eq i32 %3214, %2351
  br i1 %3215, label %3216, label %3190, !llvm.loop !489

3216:                                             ; preds = %3185, %3190, %3161, %3065
  %3217 = icmp eq i8* %40, null
  br i1 %3217, label %3417, label %3218

3218:                                             ; preds = %3216
  %3219 = icmp eq float* %42, null
  br i1 %3219, label %3252, label %3220

3220:                                             ; preds = %3218
  %3221 = icmp sgt i32 %44, 0
  br i1 %3221, label %3222, label %3271

3222:                                             ; preds = %3220
  %3223 = icmp eq i32 %48, 0
  %3224 = sext i32 %48 to i64
  %3225 = shl nuw nsw i64 %3224, 2
  %3226 = bitcast float* %42 to i8*
  %3227 = zext i32 %44 to i64
  %3228 = add nsw i64 %3227, -1
  %3229 = and i64 %3227, 3
  %3230 = icmp ult i64 %3228, 3
  br i1 %3230, label %3257, label %3231

3231:                                             ; preds = %3222
  %3232 = sub nsw i64 %3227, %3229
  br label %3233

3233:                                             ; preds = %3494, %3231
  %3234 = phi i64 [ 0, %3231 ], [ %3495, %3494 ]
  %3235 = phi i64 [ %3232, %3231 ], [ %3496, %3494 ]
  br i1 %3223, label %3494, label %3236

3236:                                             ; preds = %3233
  %3237 = mul nsw i64 %3234, %3224
  %3238 = getelementptr inbounds float, float* %61, i64 %3237
  %3239 = bitcast float* %3238 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3239, i8* nonnull align 4 %3226, i64 %3225, i1 false) #15
  %3240 = or i64 %3234, 1
  %3241 = mul nsw i64 %3240, %3224
  %3242 = getelementptr inbounds float, float* %61, i64 %3241
  %3243 = bitcast float* %3242 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3243, i8* nonnull align 4 %3226, i64 %3225, i1 false) #15
  %3244 = or i64 %3234, 2
  %3245 = mul nsw i64 %3244, %3224
  %3246 = getelementptr inbounds float, float* %61, i64 %3245
  %3247 = bitcast float* %3246 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3247, i8* nonnull align 4 %3226, i64 %3225, i1 false) #15
  %3248 = or i64 %3234, 3
  %3249 = mul nsw i64 %3248, %3224
  %3250 = getelementptr inbounds float, float* %61, i64 %3249
  %3251 = bitcast float* %3250 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3251, i8* nonnull align 4 %3226, i64 %3225, i1 false) #15
  br label %3494

3252:                                             ; preds = %3218
  %3253 = icmp sgt i32 %1369, 0
  br i1 %3253, label %3254, label %3271

3254:                                             ; preds = %3252
  %3255 = zext i32 %1369 to i64
  %3256 = shl nuw nsw i64 %3255, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 %3256, i1 false)
  br label %3271

3257:                                             ; preds = %3494, %3222
  %3258 = phi i64 [ 0, %3222 ], [ %3495, %3494 ]
  %3259 = icmp eq i64 %3229, 0
  br i1 %3259, label %3271, label %3260

3260:                                             ; preds = %3257, %3267
  %3261 = phi i64 [ %3268, %3267 ], [ %3258, %3257 ]
  %3262 = phi i64 [ %3269, %3267 ], [ %3229, %3257 ]
  br i1 %3223, label %3267, label %3263

3263:                                             ; preds = %3260
  %3264 = mul nsw i64 %3261, %3224
  %3265 = getelementptr inbounds float, float* %61, i64 %3264
  %3266 = bitcast float* %3265 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3266, i8* nonnull align 4 %3226, i64 %3225, i1 false) #15
  br label %3267

3267:                                             ; preds = %3263, %3260
  %3268 = add nuw nsw i64 %3261, 1
  %3269 = add i64 %3262, -1
  %3270 = icmp eq i64 %3269, 0
  br i1 %3270, label %3271, label %3260, !llvm.loop !490

3271:                                             ; preds = %3257, %3267, %3254, %3252, %3220
  %3272 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %53, i32 %2351) #15
  br i1 %3272, label %3412, label %3273

3273:                                             ; preds = %3271
  %3274 = icmp sgt i32 %44, 0
  br i1 %3274, label %3277, label %3275

3275:                                             ; preds = %3273
  %3276 = select i1 %69, i32* %65, i32* null
  br label %3410

3277:                                             ; preds = %3273
  %3278 = bitcast float* %92 to i8*
  %3279 = bitcast float* %93 to i8*
  %3280 = sext i32 %45 to i64
  %3281 = zext i32 %44 to i64
  br label %3282

3282:                                             ; preds = %3294, %3277
  %3283 = phi i64 [ 0, %3277 ], [ %3295, %3294 ]
  %3284 = mul nsw i64 %3283, %3280
  br i1 %69, label %3285, label %3290

3285:                                             ; preds = %3282
  %3286 = getelementptr inbounds float, float* %53, i64 %3284
  %3287 = getelementptr inbounds i8, i8* %60, i64 %3284
  %3288 = getelementptr inbounds float, float* %54, i64 %3283
  %3289 = getelementptr inbounds i32, i32* %65, i64 %3283
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %3286, i32 %45, i8* %3287, float* %3288, i32* %3289) #15
  br label %3294

3290:                                             ; preds = %3282
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3278) #15
  store float 0xFFFFFFFFE0000000, float* %92, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3279) #15
  store float 0xFFFFFFFFE0000000, float* %93, align 4
  %3291 = getelementptr inbounds float, float* %53, i64 %3284
  %3292 = getelementptr inbounds i8, i8* %60, i64 %3284
  %3293 = getelementptr inbounds float, float* %54, i64 %3283
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %3291, i32 %45, i8* %3292, float* nonnull %92, float* nonnull %93, float* %3293) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3279) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3278) #15
  br label %3294

3294:                                             ; preds = %3290, %3285
  %3295 = add nuw nsw i64 %3283, 1
  %3296 = icmp eq i64 %3295, %3281
  br i1 %3296, label %3297, label %3282

3297:                                             ; preds = %3294
  %3298 = select i1 %69, i32* %65, i32* null
  %3299 = icmp ult i32 %44, 8
  br i1 %3299, label %3368, label %3300

3300:                                             ; preds = %3297
  %3301 = getelementptr float, float* %55, i64 %3281
  %3302 = getelementptr float, float* %54, i64 %3281
  %3303 = icmp ugt float* %3302, %55
  %3304 = icmp ugt float* %3301, %54
  %3305 = and i1 %3303, %3304
  br i1 %3305, label %3368, label %3306

3306:                                             ; preds = %3300
  %3307 = and i64 %3281, 4294967288
  %3308 = insertelement <4 x float> undef, float %41, i32 0
  %3309 = shufflevector <4 x float> %3308, <4 x float> undef, <4 x i32> zeroinitializer
  %3310 = insertelement <4 x float> undef, float %41, i32 0
  %3311 = shufflevector <4 x float> %3310, <4 x float> undef, <4 x i32> zeroinitializer
  %3312 = add nsw i64 %3307, -8
  %3313 = lshr exact i64 %3312, 3
  %3314 = add nuw nsw i64 %3313, 1
  %3315 = and i64 %3314, 1
  %3316 = icmp eq i64 %3312, 0
  br i1 %3316, label %3350, label %3317

3317:                                             ; preds = %3306
  %3318 = sub nuw nsw i64 %3314, %3315
  br label %3319

3319:                                             ; preds = %3319, %3317
  %3320 = phi i64 [ 0, %3317 ], [ %3347, %3319 ]
  %3321 = phi i64 [ %3318, %3317 ], [ %3348, %3319 ]
  %3322 = getelementptr inbounds float, float* %54, i64 %3320
  %3323 = bitcast float* %3322 to <4 x float>*
  %3324 = load <4 x float>, <4 x float>* %3323, align 4, !alias.scope !491, !noalias !494
  %3325 = getelementptr inbounds float, float* %3322, i64 4
  %3326 = bitcast float* %3325 to <4 x float>*
  %3327 = load <4 x float>, <4 x float>* %3326, align 4, !alias.scope !491, !noalias !494
  %3328 = fmul <4 x float> %3324, %3309
  %3329 = fmul <4 x float> %3327, %3311
  %3330 = getelementptr inbounds float, float* %55, i64 %3320
  %3331 = bitcast float* %3330 to <4 x float>*
  store <4 x float> %3328, <4 x float>* %3331, align 4, !alias.scope !499, !noalias !501
  %3332 = getelementptr inbounds float, float* %3330, i64 4
  %3333 = bitcast float* %3332 to <4 x float>*
  store <4 x float> %3329, <4 x float>* %3333, align 4, !alias.scope !499, !noalias !501
  %3334 = or i64 %3320, 8
  %3335 = getelementptr inbounds float, float* %54, i64 %3334
  %3336 = bitcast float* %3335 to <4 x float>*
  %3337 = load <4 x float>, <4 x float>* %3336, align 4, !alias.scope !491, !noalias !494
  %3338 = getelementptr inbounds float, float* %3335, i64 4
  %3339 = bitcast float* %3338 to <4 x float>*
  %3340 = load <4 x float>, <4 x float>* %3339, align 4, !alias.scope !491, !noalias !494
  %3341 = fmul <4 x float> %3337, %3309
  %3342 = fmul <4 x float> %3340, %3311
  %3343 = getelementptr inbounds float, float* %55, i64 %3334
  %3344 = bitcast float* %3343 to <4 x float>*
  store <4 x float> %3341, <4 x float>* %3344, align 4, !alias.scope !499, !noalias !501
  %3345 = getelementptr inbounds float, float* %3343, i64 4
  %3346 = bitcast float* %3345 to <4 x float>*
  store <4 x float> %3342, <4 x float>* %3346, align 4, !alias.scope !499, !noalias !501
  %3347 = add i64 %3320, 16
  %3348 = add i64 %3321, -2
  %3349 = icmp eq i64 %3348, 0
  br i1 %3349, label %3350, label %3319, !llvm.loop !502

3350:                                             ; preds = %3319, %3306
  %3351 = phi i64 [ 0, %3306 ], [ %3347, %3319 ]
  %3352 = icmp eq i64 %3315, 0
  br i1 %3352, label %3366, label %3353

3353:                                             ; preds = %3350
  %3354 = getelementptr inbounds float, float* %54, i64 %3351
  %3355 = bitcast float* %3354 to <4 x float>*
  %3356 = load <4 x float>, <4 x float>* %3355, align 4, !alias.scope !491, !noalias !494
  %3357 = getelementptr inbounds float, float* %3354, i64 4
  %3358 = bitcast float* %3357 to <4 x float>*
  %3359 = load <4 x float>, <4 x float>* %3358, align 4, !alias.scope !491, !noalias !494
  %3360 = fmul <4 x float> %3356, %3309
  %3361 = fmul <4 x float> %3359, %3311
  %3362 = getelementptr inbounds float, float* %55, i64 %3351
  %3363 = bitcast float* %3362 to <4 x float>*
  store <4 x float> %3360, <4 x float>* %3363, align 4, !alias.scope !499, !noalias !501
  %3364 = getelementptr inbounds float, float* %3362, i64 4
  %3365 = bitcast float* %3364 to <4 x float>*
  store <4 x float> %3361, <4 x float>* %3365, align 4, !alias.scope !499, !noalias !501
  br label %3366

3366:                                             ; preds = %3350, %3353
  %3367 = icmp eq i64 %3307, %3281
  br i1 %3367, label %3410, label %3368

3368:                                             ; preds = %3366, %3300, %3297
  %3369 = phi i64 [ 0, %3300 ], [ 0, %3297 ], [ %3307, %3366 ]
  %3370 = xor i64 %3369, -1
  %3371 = add nsw i64 %3370, %3281
  %3372 = and i64 %3281, 3
  %3373 = icmp eq i64 %3372, 0
  br i1 %3373, label %3384, label %3374

3374:                                             ; preds = %3368, %3374
  %3375 = phi i64 [ %3381, %3374 ], [ %3369, %3368 ]
  %3376 = phi i64 [ %3382, %3374 ], [ %3372, %3368 ]
  %3377 = getelementptr inbounds float, float* %54, i64 %3375
  %3378 = load float, float* %3377, align 4, !noalias !494
  %3379 = fmul float %3378, %41
  %3380 = getelementptr inbounds float, float* %55, i64 %3375
  store float %3379, float* %3380, align 4, !noalias !494
  %3381 = add nuw nsw i64 %3375, 1
  %3382 = add i64 %3376, -1
  %3383 = icmp eq i64 %3382, 0
  br i1 %3383, label %3384, label %3374, !llvm.loop !503

3384:                                             ; preds = %3374, %3368
  %3385 = phi i64 [ %3369, %3368 ], [ %3381, %3374 ]
  %3386 = icmp ult i64 %3371, 3
  br i1 %3386, label %3410, label %3387

3387:                                             ; preds = %3384, %3387
  %3388 = phi i64 [ %3408, %3387 ], [ %3385, %3384 ]
  %3389 = getelementptr inbounds float, float* %54, i64 %3388
  %3390 = load float, float* %3389, align 4, !noalias !494
  %3391 = fmul float %3390, %41
  %3392 = getelementptr inbounds float, float* %55, i64 %3388
  store float %3391, float* %3392, align 4, !noalias !494
  %3393 = add nuw nsw i64 %3388, 1
  %3394 = getelementptr inbounds float, float* %54, i64 %3393
  %3395 = load float, float* %3394, align 4, !noalias !494
  %3396 = fmul float %3395, %41
  %3397 = getelementptr inbounds float, float* %55, i64 %3393
  store float %3396, float* %3397, align 4, !noalias !494
  %3398 = add nuw nsw i64 %3388, 2
  %3399 = getelementptr inbounds float, float* %54, i64 %3398
  %3400 = load float, float* %3399, align 4, !noalias !494
  %3401 = fmul float %3400, %41
  %3402 = getelementptr inbounds float, float* %55, i64 %3398
  store float %3401, float* %3402, align 4, !noalias !494
  %3403 = add nuw nsw i64 %3388, 3
  %3404 = getelementptr inbounds float, float* %54, i64 %3403
  %3405 = load float, float* %3404, align 4, !noalias !494
  %3406 = fmul float %3405, %41
  %3407 = getelementptr inbounds float, float* %55, i64 %3403
  store float %3406, float* %3407, align 4, !noalias !494
  %3408 = add nuw nsw i64 %3388, 4
  %3409 = icmp eq i64 %3408, %3281
  br i1 %3409, label %3410, label %3387, !llvm.loop !504

3410:                                             ; preds = %3384, %3387, %3366, %3275
  %3411 = phi i32* [ %3276, %3275 ], [ %3298, %3366 ], [ %3298, %3387 ], [ %3298, %3384 ]
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* nonnull %40, i32 %48, i32 %45, i8* %60, float* %55, i32 %44, float* %61, float* null, i32* %3411, i32* %63, i32* %404, i8* %68, %"class.tflite::CpuBackendContext"* %70) #15
  br label %3412

3412:                                             ; preds = %3410, %3271
  %3413 = getelementptr inbounds %struct.TfLiteLSTMParams, %struct.TfLiteLSTMParams* %43, i64 0, i32 2
  %3414 = load float, float* %3413, align 4
  %3415 = fcmp ogt float %3414, 0.000000e+00
  br i1 %3415, label %3416, label %3422

3416:                                             ; preds = %3412
  call void @_ZN6tflite12tensor_utils10ClipVectorEPKfifPf(float* %61, i32 %1369, float %3414, float* %61) #15
  br label %3422

3417:                                             ; preds = %3216
  %3418 = icmp eq i32 %1369, 0
  br i1 %3418, label %3422, label %3419

3419:                                             ; preds = %3417
  %3420 = sext i32 %1369 to i64
  %3421 = shl nuw nsw i64 %3420, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73, i64 %3421, i1 false) #15
  br label %3422

3422:                                             ; preds = %3419, %3417, %3412, %3416
  %3423 = icmp sgt i32 %44, 0
  br i1 %3423, label %3424, label %3452

3424:                                             ; preds = %3422
  %3425 = icmp eq i32 %48, 0
  %3426 = sext i32 %48 to i64
  %3427 = shl nuw nsw i64 %3426, 2
  %3428 = sext i32 %49 to i64
  %3429 = zext i32 %44 to i64
  %3430 = add nsw i64 %3429, -1
  %3431 = and i64 %3429, 3
  %3432 = icmp ult i64 %3430, 3
  br i1 %3432, label %3435, label %3433

3433:                                             ; preds = %3424
  %3434 = sub nsw i64 %3429, %3431
  br label %3453

3435:                                             ; preds = %3490, %3424
  %3436 = phi i64 [ 0, %3424 ], [ %3491, %3490 ]
  %3437 = icmp eq i64 %3431, 0
  br i1 %3437, label %3452, label %3438

3438:                                             ; preds = %3435, %3448
  %3439 = phi i64 [ %3449, %3448 ], [ %3436, %3435 ]
  %3440 = phi i64 [ %3450, %3448 ], [ %3431, %3435 ]
  br i1 %3425, label %3448, label %3441

3441:                                             ; preds = %3438
  %3442 = mul nsw i64 %3439, %3428
  %3443 = getelementptr inbounds float, float* %64, i64 %3442
  %3444 = mul nsw i64 %3439, %3426
  %3445 = getelementptr inbounds float, float* %61, i64 %3444
  %3446 = bitcast float* %3443 to i8*
  %3447 = bitcast float* %3445 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3446, i8* align 4 %3447, i64 %3427, i1 false) #15
  br label %3448

3448:                                             ; preds = %3441, %3438
  %3449 = add nuw nsw i64 %3439, 1
  %3450 = add i64 %3440, -1
  %3451 = icmp eq i64 %3450, 0
  br i1 %3451, label %3452, label %3438, !llvm.loop !505

3452:                                             ; preds = %3435, %3448, %3422
  ret void

3453:                                             ; preds = %3490, %3433
  %3454 = phi i64 [ 0, %3433 ], [ %3491, %3490 ]
  %3455 = phi i64 [ %3434, %3433 ], [ %3492, %3490 ]
  br i1 %3425, label %3463, label %3456

3456:                                             ; preds = %3453
  %3457 = mul nsw i64 %3454, %3428
  %3458 = getelementptr inbounds float, float* %64, i64 %3457
  %3459 = mul nsw i64 %3454, %3426
  %3460 = getelementptr inbounds float, float* %61, i64 %3459
  %3461 = bitcast float* %3458 to i8*
  %3462 = bitcast float* %3460 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3461, i8* align 4 %3462, i64 %3427, i1 false) #15
  br label %3463

3463:                                             ; preds = %3453, %3456
  %3464 = or i64 %3454, 1
  br i1 %3425, label %3472, label %3465

3465:                                             ; preds = %3463
  %3466 = mul nsw i64 %3464, %3428
  %3467 = getelementptr inbounds float, float* %64, i64 %3466
  %3468 = mul nsw i64 %3464, %3426
  %3469 = getelementptr inbounds float, float* %61, i64 %3468
  %3470 = bitcast float* %3467 to i8*
  %3471 = bitcast float* %3469 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3470, i8* align 4 %3471, i64 %3427, i1 false) #15
  br label %3472

3472:                                             ; preds = %3465, %3463
  %3473 = or i64 %3454, 2
  br i1 %3425, label %3481, label %3474

3474:                                             ; preds = %3472
  %3475 = mul nsw i64 %3473, %3428
  %3476 = getelementptr inbounds float, float* %64, i64 %3475
  %3477 = mul nsw i64 %3473, %3426
  %3478 = getelementptr inbounds float, float* %61, i64 %3477
  %3479 = bitcast float* %3476 to i8*
  %3480 = bitcast float* %3478 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3479, i8* align 4 %3480, i64 %3427, i1 false) #15
  br label %3481

3481:                                             ; preds = %3474, %3472
  %3482 = or i64 %3454, 3
  br i1 %3425, label %3490, label %3483

3483:                                             ; preds = %3481
  %3484 = mul nsw i64 %3482, %3428
  %3485 = getelementptr inbounds float, float* %64, i64 %3484
  %3486 = mul nsw i64 %3482, %3426
  %3487 = getelementptr inbounds float, float* %61, i64 %3486
  %3488 = bitcast float* %3485 to i8*
  %3489 = bitcast float* %3487 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3488, i8* align 4 %3489, i64 %3427, i1 false) #15
  br label %3490

3490:                                             ; preds = %3483, %3481
  %3491 = add nuw nsw i64 %3454, 4
  %3492 = add i64 %3455, -4
  %3493 = icmp eq i64 %3492, 0
  br i1 %3493, label %3435, label %3453

3494:                                             ; preds = %3233, %3236
  %3495 = add nuw nsw i64 %3234, 4
  %3496 = add i64 %3235, -4
  %3497 = icmp eq i64 %3496, 0
  br i1 %3497, label %3257, label %3233

3498:                                             ; preds = %248, %251
  %3499 = add nuw nsw i64 %249, 4
  %3500 = add i64 %250, -4
  %3501 = icmp eq i64 %3500, 0
  br i1 %3501, label %267, label %248

3502:                                             ; preds = %208, %211
  %3503 = add nuw nsw i64 %209, 4
  %3504 = add i64 %210, -4
  %3505 = icmp eq i64 %3504, 0
  br i1 %3505, label %227, label %208

3506:                                             ; preds = %168, %171
  %3507 = add nuw nsw i64 %169, 4
  %3508 = add i64 %170, -4
  %3509 = icmp eq i64 %3508, 0
  br i1 %3509, label %187, label %168

3510:                                             ; preds = %122, %125
  %3511 = add nuw nsw i64 %123, 4
  %3512 = add i64 %124, -4
  %3513 = icmp eq i64 %3512, 0
  br i1 %3513, label %141, label %122
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin9lstm_eval17EvalInteger8x8_16EPK12TfLiteTensorS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsPKNS2_20IntegerLstmParameterEPS3_SC_SC_SC_SC_SC_SC_SC_SC_PNS_17CpuBackendContextE(%struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* nocapture readnone, %struct.TfLiteLSTMParams* nocapture readnone, %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #0 {
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %36 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %35, align 8
  %37 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %36, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, -2
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %46, label %41

41:                                               ; preds = %34
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %43 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %42) #13
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %44) #13
  tail call void @abort() #14
  unreachable

46:                                               ; preds = %34
  %47 = add nsw i32 %38, -1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %36, i64 0, i32 1, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %38, 2
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %36, i64 0, i32 1, i64 0
  br i1 %51, label %56, label %53

53:                                               ; preds = %46
  %54 = load i32, i32* %52, align 4
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %36, i64 0, i32 1, i64 1
  br label %56

56:                                               ; preds = %46, %53
  %57 = phi i32* [ %55, %53 ], [ %52, %46 ]
  %58 = phi i32 [ %54, %53 ], [ 1, %46 ]
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %61 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %60, align 8
  %62 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %61, i64 0, i32 1, i64 0
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 2
  %65 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %64, align 8
  %66 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %65, i64 0, i32 1, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 3, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 2
  %71 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %70, align 8
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %71, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, -1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %71, i64 0, i32 1, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = icmp sgt i32 %58, 0
  br i1 %78, label %79, label %226

79:                                               ; preds = %56
  %80 = icmp eq %struct.TfLiteTensor* %26, null
  %81 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %82 = bitcast %union.TfLitePtrUnion* %81 to i8**
  %83 = icmp eq %struct.TfLiteTensor* %0, null
  %84 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %85 = bitcast %union.TfLitePtrUnion* %84 to i8**
  %86 = icmp eq %struct.TfLiteTensor* %1, null
  %87 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %88 = bitcast %union.TfLitePtrUnion* %87 to i8**
  %89 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 0
  %90 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 1
  %91 = icmp eq %struct.TfLiteTensor* %2, null
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %93 = bitcast %union.TfLitePtrUnion* %92 to i8**
  %94 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 6
  %95 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 7
  %96 = icmp eq %struct.TfLiteTensor* %3, null
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %98 = bitcast %union.TfLitePtrUnion* %97 to i8**
  %99 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 12
  %100 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 13
  %101 = icmp eq %struct.TfLiteTensor* %4, null
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %103 = bitcast %union.TfLitePtrUnion* %102 to i8**
  %104 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 16
  %105 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 17
  %106 = icmp eq %struct.TfLiteTensor* %5, null
  %107 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %108 = bitcast %union.TfLitePtrUnion* %107 to i8**
  %109 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 2
  %110 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 3
  %111 = icmp eq %struct.TfLiteTensor* %6, null
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %113 = bitcast %union.TfLitePtrUnion* %112 to i8**
  %114 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 8
  %115 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 9
  %116 = icmp eq %struct.TfLiteTensor* %7, null
  %117 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %118 = bitcast %union.TfLitePtrUnion* %117 to i8**
  %119 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 14
  %120 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 15
  %121 = icmp eq %struct.TfLiteTensor* %8, null
  %122 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %123 = bitcast %union.TfLitePtrUnion* %122 to i8**
  %124 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 18
  %125 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 19
  %126 = icmp eq %struct.TfLiteTensor* %9, null
  %127 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %9, i64 0, i32 1
  %128 = bitcast %union.TfLitePtrUnion* %127 to i16**
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 4
  %130 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 5
  %131 = icmp eq %struct.TfLiteTensor* %10, null
  %132 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 0, i32 1
  %133 = bitcast %union.TfLitePtrUnion* %132 to i16**
  %134 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 10
  %135 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 11
  %136 = icmp eq %struct.TfLiteTensor* %11, null
  %137 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 0, i32 1
  %138 = bitcast %union.TfLitePtrUnion* %137 to i16**
  %139 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 20
  %140 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 21
  %141 = icmp eq %struct.TfLiteTensor* %20, null
  %142 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %143 = bitcast %union.TfLitePtrUnion* %142 to i8**
  %144 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 22
  %145 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 23
  %146 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 36
  %147 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 24
  %148 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 25
  %149 = icmp eq %struct.TfLiteTensor* %12, null
  %150 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 0, i32 1
  %151 = bitcast %union.TfLitePtrUnion* %150 to i16**
  %152 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 26
  %153 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 27
  %154 = icmp eq %struct.TfLiteTensor* %13, null
  %155 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %156 = bitcast %union.TfLitePtrUnion* %155 to i16**
  %157 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 28
  %158 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 29
  %159 = icmp eq %struct.TfLiteTensor* %14, null
  %160 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %161 = bitcast %union.TfLitePtrUnion* %160 to i16**
  %162 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 30
  %163 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 31
  %164 = icmp eq %struct.TfLiteTensor* %15, null
  %165 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %166 = bitcast %union.TfLitePtrUnion* %165 to i16**
  %167 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 32
  %168 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 33
  %169 = icmp eq %struct.TfLiteTensor* %16, null
  %170 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1, i32 0
  %171 = icmp eq %struct.TfLiteTensor* %17, null
  %172 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1, i32 0
  %173 = icmp eq %struct.TfLiteTensor* %18, null
  %174 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1, i32 0
  %175 = icmp eq %struct.TfLiteTensor* %19, null
  %176 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1, i32 0
  %177 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 34
  %178 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 35
  %179 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 37
  %180 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 38
  %181 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 39
  %182 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 40
  %183 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 41
  %184 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 42, i32 0, i32 0, i32 0
  %185 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 43, i32 0, i32 0, i32 0
  %186 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 44, i32 0, i32 0, i32 0
  %187 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 45, i32 0, i32 0, i32 0
  %188 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 46, i32 0, i32 0, i32 0
  %189 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 47, i32 0, i32 0, i32 0
  %190 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 48, i32 0, i32 0, i32 0
  %191 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 49, i32 0, i32 0, i32 0
  %192 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %23, i64 0, i32 50, i32 0, i32 0, i32 0
  %193 = icmp eq %struct.TfLiteTensor* %24, null
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %195 = bitcast %union.TfLitePtrUnion* %194 to i8**
  %196 = icmp eq %struct.TfLiteTensor* %25, null
  %197 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %198 = bitcast %union.TfLitePtrUnion* %197 to i16**
  %199 = icmp eq %struct.TfLiteTensor* %27, null
  %200 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 0, i32 1
  %201 = bitcast %union.TfLitePtrUnion* %200 to i16**
  %202 = icmp eq %struct.TfLiteTensor* %28, null
  %203 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %204 = bitcast %union.TfLitePtrUnion* %203 to i16**
  %205 = icmp eq %struct.TfLiteTensor* %29, null
  %206 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 0, i32 1
  %207 = bitcast %union.TfLitePtrUnion* %206 to i16**
  %208 = icmp eq %struct.TfLiteTensor* %30, null
  %209 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %210 = bitcast %union.TfLitePtrUnion* %209 to i16**
  %211 = icmp eq %struct.TfLiteTensor* %31, null
  %212 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %213 = bitcast %union.TfLitePtrUnion* %212 to i8**
  %214 = icmp eq %struct.TfLiteTensor* %32, null
  %215 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1, i32 0
  %216 = mul i32 %63, %59
  %217 = icmp sgt i32 %216, 0
  %218 = zext i32 %216 to i64
  %219 = shl nuw nsw i64 %218, 1
  %220 = mul i32 %67, %59
  %221 = icmp sgt i32 %220, 0
  %222 = zext i32 %220 to i64
  %223 = icmp eq i32 %220, 0
  %224 = sext i32 %220 to i64
  %225 = zext i32 %58 to i64
  br label %227

226:                                              ; preds = %455, %56
  ret i32 0

227:                                              ; preds = %455, %79
  %228 = phi i64 [ 0, %79 ], [ %456, %455 ]
  br i1 %80, label %231, label %229

229:                                              ; preds = %227
  %230 = load i8*, i8** %82, align 8
  br label %231

231:                                              ; preds = %227, %229
  %232 = phi i8* [ %230, %229 ], [ null, %227 ]
  %233 = trunc i64 %228 to i32
  %234 = mul i32 %59, %233
  %235 = mul i32 %234, %77
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %232, i64 %236
  br i1 %83, label %240, label %238

238:                                              ; preds = %231
  %239 = load i8*, i8** %85, align 8
  br label %240

240:                                              ; preds = %231, %238
  %241 = phi i8* [ %239, %238 ], [ null, %231 ]
  %242 = mul i32 %234, %50
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %241, i64 %243
  br i1 %86, label %247, label %245

245:                                              ; preds = %240
  %246 = load i8*, i8** %88, align 8
  br label %247

247:                                              ; preds = %240, %245
  %248 = phi i8* [ %246, %245 ], [ null, %240 ]
  %249 = load i32, i32* %89, align 8
  %250 = load i32, i32* %90, align 4
  br i1 %91, label %253, label %251

251:                                              ; preds = %247
  %252 = load i8*, i8** %93, align 8
  br label %253

253:                                              ; preds = %247, %251
  %254 = phi i8* [ %252, %251 ], [ null, %247 ]
  %255 = load i32, i32* %94, align 8
  %256 = load i32, i32* %95, align 4
  br i1 %96, label %259, label %257

257:                                              ; preds = %253
  %258 = load i8*, i8** %98, align 8
  br label %259

259:                                              ; preds = %253, %257
  %260 = phi i8* [ %258, %257 ], [ null, %253 ]
  %261 = load i32, i32* %99, align 8
  %262 = load i32, i32* %100, align 4
  br i1 %101, label %265, label %263

263:                                              ; preds = %259
  %264 = load i8*, i8** %103, align 8
  br label %265

265:                                              ; preds = %259, %263
  %266 = phi i8* [ %264, %263 ], [ null, %259 ]
  %267 = load i32, i32* %104, align 8
  %268 = load i32, i32* %105, align 4
  br i1 %106, label %271, label %269

269:                                              ; preds = %265
  %270 = load i8*, i8** %108, align 8
  br label %271

271:                                              ; preds = %265, %269
  %272 = phi i8* [ %270, %269 ], [ null, %265 ]
  %273 = load i32, i32* %109, align 8
  %274 = load i32, i32* %110, align 4
  br i1 %111, label %277, label %275

275:                                              ; preds = %271
  %276 = load i8*, i8** %113, align 8
  br label %277

277:                                              ; preds = %271, %275
  %278 = phi i8* [ %276, %275 ], [ null, %271 ]
  %279 = load i32, i32* %114, align 8
  %280 = load i32, i32* %115, align 4
  br i1 %116, label %283, label %281

281:                                              ; preds = %277
  %282 = load i8*, i8** %118, align 8
  br label %283

283:                                              ; preds = %277, %281
  %284 = phi i8* [ %282, %281 ], [ null, %277 ]
  %285 = load i32, i32* %119, align 8
  %286 = load i32, i32* %120, align 4
  br i1 %121, label %289, label %287

287:                                              ; preds = %283
  %288 = load i8*, i8** %123, align 8
  br label %289

289:                                              ; preds = %283, %287
  %290 = phi i8* [ %288, %287 ], [ null, %283 ]
  %291 = load i32, i32* %124, align 8
  %292 = load i32, i32* %125, align 4
  br i1 %126, label %295, label %293

293:                                              ; preds = %289
  %294 = load i16*, i16** %128, align 8
  br label %295

295:                                              ; preds = %289, %293
  %296 = phi i16* [ %294, %293 ], [ null, %289 ]
  %297 = load i32, i32* %129, align 8
  %298 = load i32, i32* %130, align 4
  br i1 %131, label %301, label %299

299:                                              ; preds = %295
  %300 = load i16*, i16** %133, align 8
  br label %301

301:                                              ; preds = %295, %299
  %302 = phi i16* [ %300, %299 ], [ null, %295 ]
  %303 = load i32, i32* %134, align 8
  %304 = load i32, i32* %135, align 4
  br i1 %136, label %307, label %305

305:                                              ; preds = %301
  %306 = load i16*, i16** %138, align 8
  br label %307

307:                                              ; preds = %301, %305
  %308 = phi i16* [ %306, %305 ], [ null, %301 ]
  %309 = load i32, i32* %139, align 8
  %310 = load i32, i32* %140, align 4
  br i1 %141, label %313, label %311

311:                                              ; preds = %307
  %312 = load i8*, i8** %143, align 8
  br label %313

313:                                              ; preds = %307, %311
  %314 = phi i8* [ %312, %311 ], [ null, %307 ]
  %315 = load i32, i32* %144, align 8
  %316 = load i32, i32* %145, align 4
  %317 = load i32, i32* %146, align 4
  %318 = load i32, i32* %147, align 8
  %319 = load i32, i32* %148, align 4
  br i1 %149, label %322, label %320

320:                                              ; preds = %313
  %321 = load i16*, i16** %151, align 8
  br label %322

322:                                              ; preds = %313, %320
  %323 = phi i16* [ %321, %320 ], [ null, %313 ]
  %324 = load i32, i32* %152, align 8
  %325 = load i32, i32* %153, align 4
  br i1 %154, label %328, label %326

326:                                              ; preds = %322
  %327 = load i16*, i16** %156, align 8
  br label %328

328:                                              ; preds = %322, %326
  %329 = phi i16* [ %327, %326 ], [ null, %322 ]
  %330 = load i32, i32* %157, align 8
  %331 = load i32, i32* %158, align 4
  br i1 %159, label %334, label %332

332:                                              ; preds = %328
  %333 = load i16*, i16** %161, align 8
  br label %334

334:                                              ; preds = %328, %332
  %335 = phi i16* [ %333, %332 ], [ null, %328 ]
  %336 = load i32, i32* %162, align 8
  %337 = load i32, i32* %163, align 4
  br i1 %164, label %340, label %338

338:                                              ; preds = %334
  %339 = load i16*, i16** %166, align 8
  br label %340

340:                                              ; preds = %334, %338
  %341 = phi i16* [ %339, %338 ], [ null, %334 ]
  %342 = load i32, i32* %167, align 8
  %343 = load i32, i32* %168, align 4
  br i1 %169, label %346, label %344

344:                                              ; preds = %340
  %345 = load i32*, i32** %170, align 8
  br label %346

346:                                              ; preds = %340, %344
  %347 = phi i32* [ %345, %344 ], [ null, %340 ]
  br i1 %171, label %350, label %348

348:                                              ; preds = %346
  %349 = load i32*, i32** %172, align 8
  br label %350

350:                                              ; preds = %346, %348
  %351 = phi i32* [ %349, %348 ], [ null, %346 ]
  br i1 %173, label %354, label %352

352:                                              ; preds = %350
  %353 = load i32*, i32** %174, align 8
  br label %354

354:                                              ; preds = %350, %352
  %355 = phi i32* [ %353, %352 ], [ null, %350 ]
  br i1 %175, label %358, label %356

356:                                              ; preds = %354
  %357 = load i32*, i32** %176, align 8
  br label %358

358:                                              ; preds = %354, %356
  %359 = phi i32* [ %357, %356 ], [ null, %354 ]
  %360 = load i16, i16* %177, align 8
  %361 = load i8, i8* %178, align 2
  %362 = load i32, i32* %179, align 8
  %363 = load i32, i32* %180, align 4
  %364 = load i32, i32* %181, align 8
  %365 = load i32, i32* %182, align 4
  %366 = load i32, i32* %183, align 8
  %367 = load i32*, i32** %184, align 8
  %368 = load i32*, i32** %185, align 8
  %369 = load i32*, i32** %186, align 8
  %370 = load i32*, i32** %187, align 8
  %371 = load i32*, i32** %188, align 8
  %372 = load i32*, i32** %189, align 8
  %373 = load i32*, i32** %190, align 8
  %374 = load i32*, i32** %191, align 8
  %375 = load i32*, i32** %192, align 8
  br i1 %193, label %378, label %376

376:                                              ; preds = %358
  %377 = load i8*, i8** %195, align 8
  br label %378

378:                                              ; preds = %358, %376
  %379 = phi i8* [ %377, %376 ], [ null, %358 ]
  br i1 %196, label %382, label %380

380:                                              ; preds = %378
  %381 = load i16*, i16** %198, align 8
  br label %382

382:                                              ; preds = %378, %380
  %383 = phi i16* [ %381, %380 ], [ null, %378 ]
  br i1 %199, label %387, label %384

384:                                              ; preds = %382
  %385 = load i16*, i16** %201, align 8
  %386 = bitcast i16* %385 to i8*
  br label %387

387:                                              ; preds = %382, %384
  %388 = phi i8* [ %386, %384 ], [ null, %382 ]
  %389 = phi i16* [ %385, %384 ], [ null, %382 ]
  br i1 %202, label %393, label %390

390:                                              ; preds = %387
  %391 = load i16*, i16** %204, align 8
  %392 = bitcast i16* %391 to i8*
  br label %393

393:                                              ; preds = %387, %390
  %394 = phi i8* [ %392, %390 ], [ null, %387 ]
  %395 = phi i16* [ %391, %390 ], [ null, %387 ]
  br i1 %205, label %399, label %396

396:                                              ; preds = %393
  %397 = load i16*, i16** %207, align 8
  %398 = bitcast i16* %397 to i8*
  br label %399

399:                                              ; preds = %393, %396
  %400 = phi i8* [ %398, %396 ], [ null, %393 ]
  %401 = phi i16* [ %397, %396 ], [ null, %393 ]
  br i1 %208, label %405, label %402

402:                                              ; preds = %399
  %403 = load i16*, i16** %210, align 8
  %404 = bitcast i16* %403 to i8*
  br label %405

405:                                              ; preds = %399, %402
  %406 = phi i8* [ %404, %402 ], [ null, %399 ]
  %407 = phi i16* [ %403, %402 ], [ null, %399 ]
  br i1 %211, label %410, label %408

408:                                              ; preds = %405
  %409 = load i8*, i8** %213, align 8
  br label %410

410:                                              ; preds = %405, %408
  %411 = phi i8* [ %409, %408 ], [ null, %405 ]
  br i1 %214, label %414, label %412

412:                                              ; preds = %410
  %413 = load i32*, i32** %215, align 8
  br label %414

414:                                              ; preds = %410, %412
  %415 = phi i32* [ %413, %412 ], [ null, %410 ]
  %416 = icmp eq i8* %248, null
  %417 = icmp ne i16* %308, null
  %418 = icmp ne i16* %329, null
  %419 = icmp eq i8* %314, null
  br i1 %416, label %422, label %420

420:                                              ; preds = %414
  br i1 %217, label %421, label %424

421:                                              ; preds = %420
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %388, i8 0, i64 %219, i1 false) #15
  br label %423

422:                                              ; preds = %414
  br i1 %217, label %423, label %424

423:                                              ; preds = %422, %421
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %394, i8 0, i64 %219, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %400, i8 0, i64 %219, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %406, i8 0, i64 %219, i1 false) #15
  br label %424

424:                                              ; preds = %423, %422, %420
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %244, i32* %367, i8* %254, i32 %255, i32 %256, i32 %59, i32 %50, i32 %63, i32 0, i32* %415, i16* %395, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %379, i32* %368, i8* %278, i32 %279, i32 %280, i32 %59, i32 %67, i32 %63, i32 0, i32* %415, i16* %395, %"class.tflite::CpuBackendContext"* %33) #15
  br i1 %417, label %425, label %426

425:                                              ; preds = %424
  tail call void @_ZN6tflite12tensor_utils39VectorBatchVectorCwiseProductAccumulateEPKsiS2_iiiPs(i16* %302, i32 %67, i16* %383, i32 %59, i32 %303, i32 %304, i16* %395) #15
  br label %426

426:                                              ; preds = %425, %424
  br i1 %418, label %427, label %428

427:                                              ; preds = %426
  tail call void @_ZN6tflite12tensor_utils14ApplyLayerNormEPKsS2_PKiiiiiiPs(i16* %395, i16* nonnull %329, i32* %351, i32 %330, i32 %331, i32 %364, i32 %59, i32 %63, i16* %395) #15
  tail call void @_ZN6tflite12tensor_utils12ApplySigmoidEPKsiiPs(i16* %395, i32 %59, i32 %63, i16* %395) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %244, i32* %369, i8* %260, i32 %261, i32 %262, i32 %59, i32 %50, i32 %63, i32 0, i32* %415, i16* %401, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %379, i32* %370, i8* %284, i32 %285, i32 %286, i32 %59, i32 %67, i32 %63, i32 0, i32* %415, i16* %401, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils14ApplyLayerNormEPKsS2_PKiiiiiiPs(i16* %401, i16* %335, i32* %355, i32 %336, i32 %337, i32 %365, i32 %59, i32 %63, i16* %401) #15
  br label %429

428:                                              ; preds = %426
  tail call void @_ZN6tflite12tensor_utils12ApplySigmoidEPKsiiPs(i16* %395, i32 %59, i32 %63, i16* %395) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %244, i32* %369, i8* %260, i32 %261, i32 %262, i32 %59, i32 %50, i32 %63, i32 0, i32* %415, i16* %401, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %379, i32* %370, i8* %284, i32 %285, i32 %286, i32 %59, i32 %67, i32 %63, i32 0, i32* %415, i16* %401, %"class.tflite::CpuBackendContext"* %33) #15
  br label %429

429:                                              ; preds = %428, %427
  tail call void @_ZN6tflite12tensor_utils9ApplyTanhEiPKsiiPs(i32 3, i16* %401, i32 %59, i32 %63, i16* %401) #15
  br i1 %416, label %430, label %431

430:                                              ; preds = %429
  tail call void @_ZN6tflite12tensor_utils10Sub1VectorEPKsiPs(i16* %395, i32 %216, i16* %389) #15
  br label %436

431:                                              ; preds = %429
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %244, i32* %373, i8* nonnull %248, i32 %249, i32 %250, i32 %59, i32 %50, i32 %63, i32 0, i32* %415, i16* %389, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %379, i32* %374, i8* %272, i32 %273, i32 %274, i32 %59, i32 %67, i32 %63, i32 0, i32* %415, i16* %389, %"class.tflite::CpuBackendContext"* %33) #15
  br i1 %417, label %432, label %433

432:                                              ; preds = %431
  tail call void @_ZN6tflite12tensor_utils39VectorBatchVectorCwiseProductAccumulateEPKsiS2_iiiPs(i16* %296, i32 %67, i16* %383, i32 %59, i32 %297, i32 %298, i16* %389) #15
  br label %433

433:                                              ; preds = %432, %431
  br i1 %418, label %434, label %435

434:                                              ; preds = %433
  tail call void @_ZN6tflite12tensor_utils14ApplyLayerNormEPKsS2_PKiiiiiiPs(i16* %389, i16* %323, i32* %347, i32 %324, i32 %325, i32 %363, i32 %59, i32 %63, i16* %389) #15
  br label %435

435:                                              ; preds = %434, %433
  tail call void @_ZN6tflite12tensor_utils12ApplySigmoidEPKsiiPs(i16* %389, i32 %59, i32 %63, i16* %389) #15
  br label %436

436:                                              ; preds = %435, %430
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16* %395, i16* %383, i32 %59, i32 %63, i32 15, i16* %395) #15
  %437 = add nsw i32 %362, 30
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16* %389, i16* %401, i32 %59, i32 %63, i32 %437, i16* %401) #15
  tail call void @_ZN6tflite12tensor_utils8CwiseAddEPKsS2_iiPs(i16* %395, i16* %401, i32 %59, i32 %63, i16* %383) #15
  %438 = icmp sgt i16 %360, 0
  br i1 %438, label %439, label %440

439:                                              ; preds = %436
  tail call void @_ZN6tflite12tensor_utils13CwiseClippingEPssii(i16* %383, i16 signext %360, i32 %59, i32 %63) #15
  br label %440

440:                                              ; preds = %439, %436
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %244, i32* %371, i8* %266, i32 %267, i32 %268, i32 %59, i32 %50, i32 %63, i32 0, i32* %415, i16* %407, %"class.tflite::CpuBackendContext"* %33) #15
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8* %379, i32* %372, i8* %290, i32 %291, i32 %292, i32 %59, i32 %67, i32 %63, i32 0, i32* %415, i16* %407, %"class.tflite::CpuBackendContext"* %33) #15
  br i1 %417, label %441, label %442

441:                                              ; preds = %440
  tail call void @_ZN6tflite12tensor_utils39VectorBatchVectorCwiseProductAccumulateEPKsiS2_iiiPs(i16* nonnull %308, i32 %67, i16* %383, i32 %59, i32 %309, i32 %310, i16* %407) #15
  br label %442

442:                                              ; preds = %441, %440
  br i1 %418, label %443, label %444

443:                                              ; preds = %442
  tail call void @_ZN6tflite12tensor_utils14ApplyLayerNormEPKsS2_PKiiiiiiPs(i16* %407, i16* %341, i32* %359, i32 %342, i32 %343, i32 %366, i32 %59, i32 %63, i16* %407) #15
  br label %444

444:                                              ; preds = %443, %442
  tail call void @_ZN6tflite12tensor_utils12ApplySigmoidEPKsiiPs(i16* %407, i32 %59, i32 %63, i16* %407) #15
  %445 = add nsw i32 %362, 15
  tail call void @_ZN6tflite12tensor_utils9ApplyTanhEiPKsiiPs(i32 %445, i16* %383, i32 %59, i32 %63, i16* %389) #15
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiiiPa(i16* %407, i16* %389, i32 %318, i32 %319, i32 %59, i32 %63, i32 %317, i8* %411) #15
  br i1 %419, label %451, label %446

446:                                              ; preds = %444
  br i1 %221, label %447, label %448

447:                                              ; preds = %446
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %237, i8 0, i64 %222, i1 false) #15
  br label %448

448:                                              ; preds = %447, %446
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPaPNS_17CpuBackendContextE(i8* %411, i32* %375, i8* nonnull %314, i32 %315, i32 %316, i32 %59, i32 %63, i32 %67, i32 %69, i32* %415, i8* %237, %"class.tflite::CpuBackendContext"* %33) #15
  %449 = icmp sgt i8 %361, 0
  br i1 %449, label %450, label %453

450:                                              ; preds = %448
  tail call void @_ZN6tflite12tensor_utils13CwiseClippingEPaaii(i8* %237, i8 signext %361, i32 %59, i32 %67) #15
  br label %453

451:                                              ; preds = %444
  br i1 %223, label %455, label %452

452:                                              ; preds = %451
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %237, i8* align 1 %411, i64 %224, i1 false) #15
  br label %454

453:                                              ; preds = %450, %448
  br i1 %223, label %455, label %454

454:                                              ; preds = %453, %452
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %379, i8* align 1 %237, i64 %224, i1 false) #15
  br label %455

455:                                              ; preds = %451, %453, %454
  %456 = add nuw nsw i64 %228, 1
  %457 = icmp eq i64 %456, %225
  br i1 %457, label %226, label %227
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin9lstm_eval16EvalInteger8x8_8EPK12TfLiteTensorS5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_S5_PK16TfLiteLSTMParamsPS3_S9_S9_PKNS2_20IntegerLstmParameterES9_S9_S9_S9_S9_S9_S9_S9_(%struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteLSTMParams* nocapture readnone, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly) local_unnamed_addr #0 {
  %36 = alloca %"class.std::__1::vector.60", align 8
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, -2
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %48, label %43

43:                                               ; preds = %35
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %44) #13
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %47 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %46) #13
  tail call void @abort() #14
  unreachable

48:                                               ; preds = %35
  %49 = add nsw i32 %40, -1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %40, 2
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  br i1 %53, label %58, label %55

55:                                               ; preds = %48
  %56 = load i32, i32* %54, align 4
  %57 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 1
  br label %58

58:                                               ; preds = %48, %55
  %59 = phi i32* [ %57, %55 ], [ %54, %48 ]
  %60 = phi i32 [ %56, %55 ], [ 1, %48 ]
  %61 = load i32, i32* %59, align 4
  %62 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %63 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %62, align 8
  %64 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %63, i64 0, i32 1, i64 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 2
  %67 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 1
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 3, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 3, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %75 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %74, align 8
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, -1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 1, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = icmp sgt i32 %60, 0
  br i1 %82, label %83, label %215

83:                                               ; preds = %58
  %84 = icmp eq %struct.TfLiteTensor* %25, null
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to i8**
  %87 = icmp eq %struct.TfLiteTensor* %0, null
  %88 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %89 = bitcast %union.TfLitePtrUnion* %88 to i8**
  %90 = icmp eq %struct.TfLiteTensor* %2, null
  %91 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %92 = bitcast %union.TfLitePtrUnion* %91 to i8**
  %93 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 6
  %94 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 7
  %95 = icmp eq %struct.TfLiteTensor* %3, null
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %97 = bitcast %union.TfLitePtrUnion* %96 to i8**
  %98 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 12
  %99 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 13
  %100 = icmp eq %struct.TfLiteTensor* %4, null
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to i8**
  %103 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 16
  %104 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 17
  %105 = icmp eq %struct.TfLiteTensor* %6, null
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to i8**
  %108 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 8
  %109 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 9
  %110 = icmp eq %struct.TfLiteTensor* %7, null
  %111 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %7, i64 0, i32 1
  %112 = bitcast %union.TfLitePtrUnion* %111 to i8**
  %113 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 14
  %114 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 15
  %115 = icmp eq %struct.TfLiteTensor* %8, null
  %116 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %8, i64 0, i32 1
  %117 = bitcast %union.TfLitePtrUnion* %116 to i8**
  %118 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 18
  %119 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 19
  %120 = icmp eq %struct.TfLiteTensor* %20, null
  %121 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %122 = bitcast %union.TfLitePtrUnion* %121 to i8**
  %123 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 22
  %124 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 23
  %125 = icmp eq %struct.TfLiteTensor* %13, null
  %126 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %13, i64 0, i32 1
  %127 = bitcast %union.TfLitePtrUnion* %126 to i16**
  %128 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 28
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 29
  %130 = icmp eq %struct.TfLiteTensor* %14, null
  %131 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 1
  %132 = bitcast %union.TfLitePtrUnion* %131 to i16**
  %133 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 30
  %134 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 31
  %135 = icmp eq %struct.TfLiteTensor* %15, null
  %136 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %137 = bitcast %union.TfLitePtrUnion* %136 to i16**
  %138 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 32
  %139 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 33
  %140 = icmp eq %struct.TfLiteTensor* %17, null
  %141 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 0, i32 1, i32 0
  %142 = icmp eq %struct.TfLiteTensor* %18, null
  %143 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1, i32 0
  %144 = icmp eq %struct.TfLiteTensor* %19, null
  %145 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1, i32 0
  %146 = icmp eq %struct.TfLiteTensor* %21, null
  %147 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1, i32 0
  %148 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 34
  %149 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 35
  %150 = icmp eq %struct.TfLiteTensor* %23, null
  %151 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %152 = bitcast %union.TfLitePtrUnion* %151 to i8**
  %153 = icmp eq %struct.TfLiteTensor* %24, null
  %154 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 0, i32 1
  %155 = bitcast %union.TfLitePtrUnion* %154 to i16**
  %156 = icmp eq %struct.TfLiteTensor* %27, null
  %157 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 0, i32 1
  %158 = bitcast %union.TfLitePtrUnion* %157 to i8**
  %159 = icmp eq %struct.TfLiteTensor* %28, null
  %160 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %161 = bitcast %union.TfLitePtrUnion* %160 to i8**
  %162 = icmp eq %struct.TfLiteTensor* %29, null
  %163 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 0, i32 1
  %164 = bitcast %union.TfLitePtrUnion* %163 to i16**
  %165 = icmp eq %struct.TfLiteTensor* %30, null
  %166 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %167 = bitcast %union.TfLitePtrUnion* %166 to i16**
  %168 = icmp eq %struct.TfLiteTensor* %31, null
  %169 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %170 = bitcast %union.TfLitePtrUnion* %169 to i16**
  %171 = icmp eq %struct.TfLiteTensor* %32, null
  %172 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %173 = bitcast %union.TfLitePtrUnion* %172 to i16**
  %174 = icmp eq %struct.TfLiteTensor* %33, null
  %175 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %176 = bitcast %union.TfLitePtrUnion* %175 to i16**
  %177 = icmp eq %struct.TfLiteTensor* %34, null
  %178 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %179 = bitcast %union.TfLitePtrUnion* %178 to i16**
  %180 = mul i32 %65, %61
  %181 = icmp sgt i32 %180, 0
  %182 = zext i32 %180 to i64
  %183 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 4
  %184 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 5
  %185 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 2
  %186 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 2
  %187 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 3
  %188 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 3
  %189 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 7
  %190 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 8
  %191 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 4
  %192 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 4
  %193 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 5
  %194 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 5
  %195 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 10
  %196 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 53, i64 11
  %197 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 6
  %198 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 6
  %199 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 51, i64 7
  %200 = getelementptr inbounds %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter", %"struct.tflite::ops::builtin::lstm_eval::IntegerLstmParameter"* %26, i64 0, i32 52, i64 7
  %201 = bitcast %"class.std::__1::vector.60"* %36 to i8*
  %202 = getelementptr inbounds %"class.std::__1::vector.60", %"class.std::__1::vector.60"* %36, i64 0, i32 0, i32 1
  %203 = getelementptr inbounds %"class.std::__1::vector.60", %"class.std::__1::vector.60"* %36, i64 0, i32 0, i32 2, i32 0, i32 0
  %204 = sext i32 %180 to i64
  %205 = icmp eq i32 %180, 0
  %206 = icmp slt i32 %180, 0
  %207 = shl nsw i64 %204, 1
  %208 = bitcast %"class.std::__1::vector.60"* %36 to i8**
  %209 = bitcast i16** %202 to i64*
  %210 = add nsw i64 %204, -1
  %211 = mul nsw i32 %69, %61
  %212 = icmp eq i32 %211, 0
  %213 = sext i32 %211 to i64
  %214 = zext i32 %60 to i64
  br label %216

215:                                              ; preds = %422, %58
  ret i32 0

216:                                              ; preds = %422, %83
  %217 = phi i64 [ 0, %83 ], [ %423, %422 ]
  br i1 %84, label %220, label %218

218:                                              ; preds = %216
  %219 = load i8*, i8** %86, align 8
  br label %220

220:                                              ; preds = %216, %218
  %221 = phi i8* [ %219, %218 ], [ null, %216 ]
  %222 = trunc i64 %217 to i32
  %223 = mul i32 %61, %222
  %224 = mul i32 %223, %81
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %221, i64 %225
  br i1 %87, label %229, label %227

227:                                              ; preds = %220
  %228 = load i8*, i8** %89, align 8
  br label %229

229:                                              ; preds = %220, %227
  %230 = phi i8* [ %228, %227 ], [ null, %220 ]
  %231 = mul i32 %223, %52
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %230, i64 %232
  br i1 %90, label %236, label %234

234:                                              ; preds = %229
  %235 = load i8*, i8** %92, align 8
  br label %236

236:                                              ; preds = %229, %234
  %237 = phi i8* [ %235, %234 ], [ null, %229 ]
  %238 = load i32, i32* %93, align 8
  %239 = load i32, i32* %94, align 4
  br i1 %95, label %242, label %240

240:                                              ; preds = %236
  %241 = load i8*, i8** %97, align 8
  br label %242

242:                                              ; preds = %236, %240
  %243 = phi i8* [ %241, %240 ], [ null, %236 ]
  %244 = load i32, i32* %98, align 8
  %245 = load i32, i32* %99, align 4
  br i1 %100, label %248, label %246

246:                                              ; preds = %242
  %247 = load i8*, i8** %102, align 8
  br label %248

248:                                              ; preds = %242, %246
  %249 = phi i8* [ %247, %246 ], [ null, %242 ]
  %250 = load i32, i32* %103, align 8
  %251 = load i32, i32* %104, align 4
  br i1 %105, label %254, label %252

252:                                              ; preds = %248
  %253 = load i8*, i8** %107, align 8
  br label %254

254:                                              ; preds = %248, %252
  %255 = phi i8* [ %253, %252 ], [ null, %248 ]
  %256 = load i32, i32* %108, align 8
  %257 = load i32, i32* %109, align 4
  br i1 %110, label %260, label %258

258:                                              ; preds = %254
  %259 = load i8*, i8** %112, align 8
  br label %260

260:                                              ; preds = %254, %258
  %261 = phi i8* [ %259, %258 ], [ null, %254 ]
  %262 = load i32, i32* %113, align 8
  %263 = load i32, i32* %114, align 4
  br i1 %115, label %266, label %264

264:                                              ; preds = %260
  %265 = load i8*, i8** %117, align 8
  br label %266

266:                                              ; preds = %260, %264
  %267 = phi i8* [ %265, %264 ], [ null, %260 ]
  %268 = load i32, i32* %118, align 8
  %269 = load i32, i32* %119, align 4
  br i1 %120, label %272, label %270

270:                                              ; preds = %266
  %271 = load i8*, i8** %122, align 8
  br label %272

272:                                              ; preds = %266, %270
  %273 = phi i8* [ %271, %270 ], [ null, %266 ]
  %274 = load i32, i32* %123, align 8
  %275 = load i32, i32* %124, align 4
  br i1 %125, label %278, label %276

276:                                              ; preds = %272
  %277 = load i16*, i16** %127, align 8
  br label %278

278:                                              ; preds = %272, %276
  %279 = phi i16* [ %277, %276 ], [ null, %272 ]
  %280 = load i32, i32* %128, align 8
  %281 = load i32, i32* %129, align 4
  br i1 %130, label %284, label %282

282:                                              ; preds = %278
  %283 = load i16*, i16** %132, align 8
  br label %284

284:                                              ; preds = %278, %282
  %285 = phi i16* [ %283, %282 ], [ null, %278 ]
  %286 = load i32, i32* %133, align 8
  %287 = load i32, i32* %134, align 4
  br i1 %135, label %290, label %288

288:                                              ; preds = %284
  %289 = load i16*, i16** %137, align 8
  br label %290

290:                                              ; preds = %284, %288
  %291 = phi i16* [ %289, %288 ], [ null, %284 ]
  %292 = load i32, i32* %138, align 8
  %293 = load i32, i32* %139, align 4
  br i1 %140, label %296, label %294

294:                                              ; preds = %290
  %295 = load i32*, i32** %141, align 8
  br label %296

296:                                              ; preds = %290, %294
  %297 = phi i32* [ %295, %294 ], [ null, %290 ]
  br i1 %142, label %300, label %298

298:                                              ; preds = %296
  %299 = load i32*, i32** %143, align 8
  br label %300

300:                                              ; preds = %296, %298
  %301 = phi i32* [ %299, %298 ], [ null, %296 ]
  br i1 %144, label %304, label %302

302:                                              ; preds = %300
  %303 = load i32*, i32** %145, align 8
  br label %304

304:                                              ; preds = %300, %302
  %305 = phi i32* [ %303, %302 ], [ null, %300 ]
  br i1 %146, label %308, label %306

306:                                              ; preds = %304
  %307 = load i32*, i32** %147, align 8
  br label %308

308:                                              ; preds = %304, %306
  %309 = phi i32* [ %307, %306 ], [ null, %304 ]
  %310 = load i16, i16* %148, align 8
  %311 = load i8, i8* %149, align 2
  br i1 %150, label %314, label %312

312:                                              ; preds = %308
  %313 = load i8*, i8** %152, align 8
  br label %314

314:                                              ; preds = %308, %312
  %315 = phi i8* [ %313, %312 ], [ null, %308 ]
  br i1 %153, label %318, label %316

316:                                              ; preds = %314
  %317 = load i16*, i16** %155, align 8
  br label %318

318:                                              ; preds = %314, %316
  %319 = phi i16* [ %317, %316 ], [ null, %314 ]
  br i1 %156, label %322, label %320

320:                                              ; preds = %318
  %321 = load i8*, i8** %158, align 8
  br label %322

322:                                              ; preds = %318, %320
  %323 = phi i8* [ %321, %320 ], [ null, %318 ]
  br i1 %159, label %326, label %324

324:                                              ; preds = %322
  %325 = load i8*, i8** %161, align 8
  br label %326

326:                                              ; preds = %322, %324
  %327 = phi i8* [ %325, %324 ], [ null, %322 ]
  br i1 %162, label %330, label %328

328:                                              ; preds = %326
  %329 = load i16*, i16** %164, align 8
  br label %330

330:                                              ; preds = %326, %328
  %331 = phi i16* [ %329, %328 ], [ null, %326 ]
  br i1 %165, label %334, label %332

332:                                              ; preds = %330
  %333 = load i16*, i16** %167, align 8
  br label %334

334:                                              ; preds = %330, %332
  %335 = phi i16* [ %333, %332 ], [ null, %330 ]
  br i1 %168, label %338, label %336

336:                                              ; preds = %334
  %337 = load i16*, i16** %170, align 8
  br label %338

338:                                              ; preds = %334, %336
  %339 = phi i16* [ %337, %336 ], [ null, %334 ]
  br i1 %171, label %342, label %340

340:                                              ; preds = %338
  %341 = load i16*, i16** %173, align 8
  br label %342

342:                                              ; preds = %338, %340
  %343 = phi i16* [ %341, %340 ], [ null, %338 ]
  br i1 %174, label %346, label %344

344:                                              ; preds = %342
  %345 = load i16*, i16** %176, align 8
  br label %346

346:                                              ; preds = %342, %344
  %347 = phi i16* [ %345, %344 ], [ null, %342 ]
  br i1 %177, label %350, label %348

348:                                              ; preds = %346
  %349 = load i16*, i16** %179, align 8
  br label %350

350:                                              ; preds = %346, %348
  %351 = phi i16* [ %349, %348 ], [ null, %346 ]
  br i1 %181, label %352, label %353

352:                                              ; preds = %350
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %323, i8 0, i64 %182, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %327, i8 0, i64 %182, i1 false) #15
  br label %353

353:                                              ; preds = %352, %350
  %354 = load i32, i32* %183, align 4
  %355 = trunc i32 %354 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %233, i32 %71, i8* %237, i32 %238, i32 %239, i32 %61, i32 %52, i32 %65, i8* %323, i8 signext %355) #15
  %356 = load i32, i32* %184, align 4
  %357 = trunc i32 %356 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %315, i32 %73, i8* %255, i32 %256, i32 %257, i32 %61, i32 %69, i32 %65, i8* %327, i8 signext %357) #15
  %358 = load i32, i32* %183, align 4
  %359 = trunc i32 %358 to i8
  %360 = load i32, i32* %184, align 4
  %361 = trunc i32 %360 to i8
  %362 = load i32, i32* %185, align 4
  %363 = load i32, i32* %186, align 4
  %364 = load i32, i32* %187, align 4
  %365 = load i32, i32* %188, align 4
  tail call void @_ZN6tflite12tensor_utils21TwoGateSaturationgAddEPKaaS2_aiiiiiiPs(i8* %323, i8 signext %359, i8* %327, i8 signext %361, i32 %362, i32 %363, i32 %364, i32 %365, i32 %61, i32 %65, i16* %331) #15
  tail call void @_ZN6tflite12tensor_utils19ApplyLayerNormFloatEPKsS2_iiPKiiiPs(i16* %331, i16* %279, i32 %280, i32 %281, i32* %297, i32 %61, i32 %65, i16* %331) #15
  tail call void @_ZN6tflite12tensor_utils17ApplySigmoidFloatEPKsiiPs(i16* %331, i32 %61, i32 %65, i16* %331) #15
  br i1 %181, label %366, label %367

366:                                              ; preds = %353
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %323, i8 0, i64 %182, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %327, i8 0, i64 %182, i1 false) #15
  br label %367

367:                                              ; preds = %366, %353
  %368 = load i32, i32* %189, align 4
  %369 = trunc i32 %368 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %233, i32 %71, i8* %243, i32 %244, i32 %245, i32 %61, i32 %52, i32 %65, i8* %323, i8 signext %369) #15
  %370 = load i32, i32* %190, align 4
  %371 = trunc i32 %370 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %315, i32 %73, i8* %261, i32 %262, i32 %263, i32 %61, i32 %69, i32 %65, i8* %327, i8 signext %371) #15
  %372 = load i32, i32* %189, align 4
  %373 = trunc i32 %372 to i8
  %374 = load i32, i32* %190, align 4
  %375 = trunc i32 %374 to i8
  %376 = load i32, i32* %191, align 4
  %377 = load i32, i32* %192, align 4
  %378 = load i32, i32* %193, align 4
  %379 = load i32, i32* %194, align 4
  tail call void @_ZN6tflite12tensor_utils21TwoGateSaturationgAddEPKaaS2_aiiiiiiPs(i8* %323, i8 signext %373, i8* %327, i8 signext %375, i32 %376, i32 %377, i32 %378, i32 %379, i32 %61, i32 %65, i16* %335) #15
  tail call void @_ZN6tflite12tensor_utils19ApplyLayerNormFloatEPKsS2_iiPKiiiPs(i16* %335, i16* %285, i32 %286, i32 %287, i32* %301, i32 %61, i32 %65, i16* %335) #15
  tail call void @_ZN6tflite12tensor_utils14ApplyTanhFloatEPKsiiiPs(i16* %335, i32 %61, i32 %65, i32 -12, i16* %335) #15
  br i1 %181, label %380, label %381

380:                                              ; preds = %367
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %323, i8 0, i64 %182, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %327, i8 0, i64 %182, i1 false) #15
  br label %381

381:                                              ; preds = %380, %367
  %382 = load i32, i32* %195, align 4
  %383 = trunc i32 %382 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %233, i32 %71, i8* %249, i32 %250, i32 %251, i32 %61, i32 %52, i32 %65, i8* %323, i8 signext %383) #15
  %384 = load i32, i32* %196, align 4
  %385 = trunc i32 %384 to i8
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* %315, i32 %73, i8* %267, i32 %268, i32 %269, i32 %61, i32 %69, i32 %65, i8* %327, i8 signext %385) #15
  %386 = load i32, i32* %195, align 4
  %387 = trunc i32 %386 to i8
  %388 = load i32, i32* %196, align 4
  %389 = trunc i32 %388 to i8
  %390 = load i32, i32* %197, align 4
  %391 = load i32, i32* %198, align 4
  %392 = load i32, i32* %199, align 4
  %393 = load i32, i32* %200, align 4
  tail call void @_ZN6tflite12tensor_utils21TwoGateSaturationgAddEPKaaS2_aiiiiiiPs(i8* %323, i8 signext %387, i8* %327, i8 signext %389, i32 %390, i32 %391, i32 %392, i32 %393, i32 %61, i32 %65, i16* %339) #15
  tail call void @_ZN6tflite12tensor_utils19ApplyLayerNormFloatEPKsS2_iiPKiiiPs(i16* %339, i16* %291, i32 %292, i32 %293, i32* %305, i32 %61, i32 %65, i16* %339) #15
  tail call void @_ZN6tflite12tensor_utils17ApplySigmoidFloatEPKsiiPs(i16* %339, i32 %61, i32 %65, i16* %339) #15
  tail call void @_ZN6tflite12tensor_utils10Sub1VectorEPKsiPs(i16* %331, i32 %180, i16* %343) #15
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16* %331, i16* %319, i32 %61, i32 %65, i32 15, i16* %347) #15
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16* %343, i16* %335, i32 %61, i32 %65, i32 15, i16* %351) #15
  tail call void @_ZN6tflite12tensor_utils8CwiseAddEPKsS2_iiPs(i16* %347, i16* %351, i32 %61, i32 %65, i16* %319) #15
  %394 = icmp sgt i16 %310, 0
  br i1 %394, label %395, label %396

395:                                              ; preds = %381
  tail call void @_ZN6tflite12tensor_utils13CwiseClippingEPssii(i16* %319, i16 signext %310, i32 %61, i32 %65) #15
  br label %396

396:                                              ; preds = %395, %381
  tail call void @_ZN6tflite12tensor_utils14ApplyTanhFloatEPKsiiiPs(i16* %319, i32 %61, i32 %65, i32 -15, i16* %331) #15
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %201) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %201, i8 0, i64 24, i1 false) #15
  br i1 %205, label %411, label %397

397:                                              ; preds = %396
  br i1 %206, label %398, label %400

398:                                              ; preds = %397
  %399 = bitcast %"class.std::__1::vector.60"* %36 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %399) #14
  unreachable

400:                                              ; preds = %397
  %401 = tail call i8* @_Znwm(i64 %207) #16
  %402 = bitcast i8* %401 to i16*
  store i8* %401, i8** %208, align 8
  %403 = getelementptr inbounds i16, i16* %402, i64 %204
  store i16* %403, i16** %203, align 8
  %404 = ptrtoint i8* %401 to i64
  %405 = getelementptr i16, i16* %402, i64 %210
  %406 = ptrtoint i16* %405 to i64
  %407 = sub i64 2, %404
  %408 = add i64 %407, %406
  %409 = and i64 %408, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %401, i8 0, i64 %409, i1 false) #15
  %410 = ptrtoint i16* %403 to i64
  store i64 %410, i64* %209, align 8
  br label %411

411:                                              ; preds = %400, %396
  %412 = phi i8* [ null, %396 ], [ %401, %400 ]
  %413 = phi i16* [ null, %396 ], [ %402, %400 ]
  tail call void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16* %339, i16* %331, i32 %61, i32 %65, i32 15, i16* %335) #15
  tail call void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKsPKaiiPKiiiiiPa(i16* %335, i8* %273, i32 %274, i32 %275, i32* %309, i32 %61, i32 %65, i32 %69, i32 %73, i8* %226) #15
  %414 = icmp sgt i8 %311, 0
  br i1 %414, label %415, label %416

415:                                              ; preds = %411
  tail call void @_ZN6tflite12tensor_utils13CwiseClippingEPaaii(i8* %226, i8 signext %311, i32 %61, i32 %69) #15
  br label %416

416:                                              ; preds = %415, %411
  br i1 %212, label %418, label %417

417:                                              ; preds = %416
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %315, i8* align 1 %226, i64 %213, i1 false) #15
  br label %418

418:                                              ; preds = %417, %416
  %419 = icmp eq i16* %413, null
  br i1 %419, label %422, label %420

420:                                              ; preds = %418
  %421 = ptrtoint i16* %413 to i64
  store i64 %421, i64* %209, align 8
  tail call void @_ZdlPv(i8* %412) #16
  br label %422

422:                                              ; preds = %418, %420
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %201) #15
  %423 = add nuw nsw i64 %217, 1
  %424 = icmp eq i64 %423, %214
  br i1 %424, label %215, label %216
}

declare zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float*, i32) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float*, i32, i32, float*, i32, float*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils23MeanStddevNormalizationEPKfPfii(float*, float*, i32, i32) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils20VectorBatchVectorAddEPKfiiPf(float*, i32, i32, float*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* noalias, i32, i32, float* noalias) local_unnamed_addr #3 comdat {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca %"struct.Eigen::internal::evaluator.55", align 8
  %8 = alloca %"struct.Eigen::internal::evaluator.41", align 8
  %9 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.59", align 8
  %10 = alloca %"struct.Eigen::internal::assign_op", align 1
  %11 = alloca %"class.Eigen::ArrayWrapper", align 8
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca %"struct.Eigen::internal::assign_op", align 1
  %15 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %16 = alloca %"class.Eigen::ArrayWrapper", align 8
  %17 = alloca float, align 4
  switch i32 %2, label %283 [
    i32 6, label %232
    i32 1, label %18
    i32 2, label %50
    i32 3, label %89
    i32 4, label %128
    i32 5, label %151
  ]

18:                                               ; preds = %4
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %283

20:                                               ; preds = %18
  %21 = zext i32 %1 to i64
  %22 = bitcast float* %17 to i8*
  %23 = and i64 %21, 1
  %24 = icmp eq i32 %1, 1
  br i1 %24, label %241, label %25

25:                                               ; preds = %20
  %26 = sub nsw i64 %21, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %47, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %48, %27 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !506
  %30 = getelementptr inbounds float, float* %0, i64 %28
  %31 = load float, float* %30, align 4, !alias.scope !510, !noalias !511
  %32 = fcmp ogt float %31, 0.000000e+00
  %33 = select i1 %32, float* %30, float* %17
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4, !noalias !511
  %36 = getelementptr inbounds float, float* %3, i64 %28
  %37 = bitcast float* %36 to i32*
  store i32 %35, i32* %37, align 4, !alias.scope !511, !noalias !510
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  %38 = or i64 %28, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !506
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = load float, float* %39, align 4, !alias.scope !510, !noalias !511
  %41 = fcmp ogt float %40, 0.000000e+00
  %42 = select i1 %41, float* %39, float* %17
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4, !noalias !511
  %45 = getelementptr inbounds float, float* %3, i64 %38
  %46 = bitcast float* %45 to i32*
  store i32 %44, i32* %46, align 4, !alias.scope !511, !noalias !510
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  %47 = add nuw nsw i64 %28, 2
  %48 = add i64 %29, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %241, label %27

50:                                               ; preds = %4
  %51 = icmp sgt i32 %1, 0
  br i1 %51, label %52, label %283

52:                                               ; preds = %50
  %53 = zext i32 %1 to i64
  %54 = bitcast float* %12 to i8*
  %55 = bitcast float* %13 to i8*
  %56 = and i64 %53, 1
  %57 = icmp eq i32 %1, 1
  br i1 %57, label %253, label %58

58:                                               ; preds = %52
  %59 = sub nsw i64 %53, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %86, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %87, %60 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !512
  %63 = getelementptr inbounds float, float* %0, i64 %61
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !512
  %64 = load float, float* %63, align 4, !alias.scope !516, !noalias !517
  %65 = fcmp ogt float %64, 1.000000e+00
  %66 = select i1 %65, float* %13, float* %63
  %67 = load float, float* %66, align 4, !noalias !517
  %68 = fcmp ogt float %67, -1.000000e+00
  %69 = select i1 %68, float* %66, float* %12
  %70 = bitcast float* %69 to i32*
  %71 = load i32, i32* %70, align 4, !noalias !517
  %72 = getelementptr inbounds float, float* %3, i64 %61
  %73 = bitcast float* %72 to i32*
  store i32 %71, i32* %73, align 4, !alias.scope !517, !noalias !516
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  %74 = or i64 %61, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !512
  %75 = getelementptr inbounds float, float* %0, i64 %74
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !512
  %76 = load float, float* %75, align 4, !alias.scope !516, !noalias !517
  %77 = fcmp ogt float %76, 1.000000e+00
  %78 = select i1 %77, float* %13, float* %75
  %79 = load float, float* %78, align 4, !noalias !517
  %80 = fcmp ogt float %79, -1.000000e+00
  %81 = select i1 %80, float* %78, float* %12
  %82 = bitcast float* %81 to i32*
  %83 = load i32, i32* %82, align 4, !noalias !517
  %84 = getelementptr inbounds float, float* %3, i64 %74
  %85 = bitcast float* %84 to i32*
  store i32 %83, i32* %85, align 4, !alias.scope !517, !noalias !516
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  %86 = add nuw nsw i64 %61, 2
  %87 = add i64 %62, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %253, label %60

89:                                               ; preds = %4
  %90 = icmp sgt i32 %1, 0
  br i1 %90, label %91, label %283

91:                                               ; preds = %89
  %92 = zext i32 %1 to i64
  %93 = bitcast float* %5 to i8*
  %94 = bitcast float* %6 to i8*
  %95 = and i64 %92, 1
  %96 = icmp eq i32 %1, 1
  br i1 %96, label %268, label %97

97:                                               ; preds = %91
  %98 = sub nsw i64 %92, %95
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ 0, %97 ], [ %125, %99 ]
  %101 = phi i64 [ %98, %97 ], [ %126, %99 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !518
  %102 = getelementptr inbounds float, float* %0, i64 %100
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !518
  %103 = load float, float* %102, align 4, !alias.scope !522, !noalias !523
  %104 = fcmp ogt float %103, 6.000000e+00
  %105 = select i1 %104, float* %6, float* %102
  %106 = load float, float* %105, align 4, !noalias !523
  %107 = fcmp ogt float %106, 0.000000e+00
  %108 = select i1 %107, float* %105, float* %5
  %109 = bitcast float* %108 to i32*
  %110 = load i32, i32* %109, align 4, !noalias !523
  %111 = getelementptr inbounds float, float* %3, i64 %100
  %112 = bitcast float* %111 to i32*
  store i32 %110, i32* %112, align 4, !alias.scope !523, !noalias !522
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  %113 = or i64 %100, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !518
  %114 = getelementptr inbounds float, float* %0, i64 %113
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !518
  %115 = load float, float* %114, align 4, !alias.scope !522, !noalias !523
  %116 = fcmp ogt float %115, 6.000000e+00
  %117 = select i1 %116, float* %6, float* %114
  %118 = load float, float* %117, align 4, !noalias !523
  %119 = fcmp ogt float %118, 0.000000e+00
  %120 = select i1 %119, float* %117, float* %5
  %121 = bitcast float* %120 to i32*
  %122 = load i32, i32* %121, align 4, !noalias !523
  %123 = getelementptr inbounds float, float* %3, i64 %113
  %124 = bitcast float* %123 to i32*
  store i32 %122, i32* %124, align 4, !alias.scope !523, !noalias !522
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  %125 = add nuw nsw i64 %100, 2
  %126 = add i64 %101, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %268, label %99

128:                                              ; preds = %4
  %129 = sext i32 %1 to i64
  %130 = ptrtoint float* %0 to i64
  %131 = bitcast %"class.Eigen::ArrayWrapper"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #15, !noalias !524
  %132 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %3, float** %132, align 8, !noalias !524
  %133 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %129, i64* %133, align 8, !noalias !524
  %134 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %134) #15, !noalias !524
  %135 = bitcast %"struct.Eigen::internal::evaluator.55"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #15, !noalias !524
  %136 = getelementptr inbounds %"struct.Eigen::internal::evaluator.55", %"struct.Eigen::internal::evaluator.55"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %137 = bitcast i8* %136 to i64*
  store i64 -6148914691236517206, i64* %137, align 8, !noalias !524
  %138 = bitcast %"struct.Eigen::internal::evaluator.55"* %7 to i64*
  store i64 %130, i64* %138, align 8, !noalias !524
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator.55", %"struct.Eigen::internal::evaluator.55"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %129, i64* %139, align 8, !noalias !524
  %140 = bitcast %"struct.Eigen::internal::evaluator.41"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #15, !noalias !524
  %141 = getelementptr inbounds %"struct.Eigen::internal::evaluator.41", %"struct.Eigen::internal::evaluator.41"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %142 = bitcast i8* %141 to i64*
  store i64 -6148914691236517206, i64* %142, align 8, !noalias !524
  %143 = ptrtoint float* %3 to i64
  %144 = bitcast %"struct.Eigen::internal::evaluator.41"* %8 to i64*
  store i64 %143, i64* %144, align 8, !noalias !524
  %145 = getelementptr inbounds %"struct.Eigen::internal::evaluator.41", %"struct.Eigen::internal::evaluator.41"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %129, i64* %145, align 8, !noalias !524
  %146 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %146) #15, !noalias !524
  %147 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %9, i64 0, i32 0
  %148 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %9, i64 0, i32 1
  %149 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %9, i64 0, i32 2
  %150 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %9, i64 0, i32 3
  store %"struct.Eigen::internal::evaluator.41"* %8, %"struct.Eigen::internal::evaluator.41"** %147, align 8, !noalias !524
  store %"struct.Eigen::internal::evaluator.55"* %7, %"struct.Eigen::internal::evaluator.55"** %148, align 8, !noalias !524
  store %"struct.Eigen::internal::assign_op"* %10, %"struct.Eigen::internal::assign_op"** %149, align 8, !noalias !524
  store %"class.Eigen::ArrayWrapper"* %11, %"class.Eigen::ArrayWrapper"** %150, align 8, !noalias !524
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_(%"class.Eigen::internal::generic_dense_assignment_kernel.59"* nonnull dereferenceable(32) %9) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %146) #15, !noalias !524
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #15, !noalias !524
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #15, !noalias !524
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %134) #15, !noalias !524
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #15, !noalias !524
  br label %283

151:                                              ; preds = %4
  %152 = icmp sgt i32 %1, 0
  br i1 %152, label %153, label %283

153:                                              ; preds = %151
  %154 = zext i32 %1 to i64
  %155 = icmp ult i32 %1, 8
  br i1 %155, label %220, label %156

156:                                              ; preds = %153
  %157 = and i64 %154, 4294967288
  %158 = add nsw i64 %157, -8
  %159 = lshr exact i64 %158, 3
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %158, 0
  br i1 %162, label %200, label %163

163:                                              ; preds = %156
  %164 = sub nuw nsw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %197, %165 ]
  %167 = phi i64 [ %164, %163 ], [ %198, %165 ]
  %168 = getelementptr inbounds float, float* %0, i64 %166
  %169 = bitcast float* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !528, !noalias !531
  %171 = getelementptr inbounds float, float* %168, i64 4
  %172 = bitcast float* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4, !alias.scope !528, !noalias !531
  %174 = icmp slt <4 x i32> %170, zeroinitializer
  %175 = icmp slt <4 x i32> %173, zeroinitializer
  %176 = uitofp <4 x i1> %174 to <4 x float>
  %177 = uitofp <4 x i1> %175 to <4 x float>
  %178 = getelementptr inbounds float, float* %3, i64 %166
  %179 = bitcast float* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !alias.scope !531, !noalias !528
  %180 = getelementptr inbounds float, float* %178, i64 4
  %181 = bitcast float* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !alias.scope !531, !noalias !528
  %182 = or i64 %166, 8
  %183 = getelementptr inbounds float, float* %0, i64 %182
  %184 = bitcast float* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4, !alias.scope !528, !noalias !531
  %186 = getelementptr inbounds float, float* %183, i64 4
  %187 = bitcast float* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4, !alias.scope !528, !noalias !531
  %189 = icmp slt <4 x i32> %185, zeroinitializer
  %190 = icmp slt <4 x i32> %188, zeroinitializer
  %191 = uitofp <4 x i1> %189 to <4 x float>
  %192 = uitofp <4 x i1> %190 to <4 x float>
  %193 = getelementptr inbounds float, float* %3, i64 %182
  %194 = bitcast float* %193 to <4 x float>*
  store <4 x float> %191, <4 x float>* %194, align 4, !alias.scope !531, !noalias !528
  %195 = getelementptr inbounds float, float* %193, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  store <4 x float> %192, <4 x float>* %196, align 4, !alias.scope !531, !noalias !528
  %197 = add i64 %166, 16
  %198 = add i64 %167, -2
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %165, !llvm.loop !533

200:                                              ; preds = %165, %156
  %201 = phi i64 [ 0, %156 ], [ %197, %165 ]
  %202 = icmp eq i64 %161, 0
  br i1 %202, label %218, label %203

203:                                              ; preds = %200
  %204 = getelementptr inbounds float, float* %0, i64 %201
  %205 = bitcast float* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !528, !noalias !531
  %207 = getelementptr inbounds float, float* %204, i64 4
  %208 = bitcast float* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4, !alias.scope !528, !noalias !531
  %210 = icmp slt <4 x i32> %206, zeroinitializer
  %211 = icmp slt <4 x i32> %209, zeroinitializer
  %212 = uitofp <4 x i1> %210 to <4 x float>
  %213 = uitofp <4 x i1> %211 to <4 x float>
  %214 = getelementptr inbounds float, float* %3, i64 %201
  %215 = bitcast float* %214 to <4 x float>*
  store <4 x float> %212, <4 x float>* %215, align 4, !alias.scope !531, !noalias !528
  %216 = getelementptr inbounds float, float* %214, i64 4
  %217 = bitcast float* %216 to <4 x float>*
  store <4 x float> %213, <4 x float>* %217, align 4, !alias.scope !531, !noalias !528
  br label %218

218:                                              ; preds = %200, %203
  %219 = icmp eq i64 %157, %154
  br i1 %219, label %283, label %220

220:                                              ; preds = %218, %153
  %221 = phi i64 [ 0, %153 ], [ %157, %218 ]
  br label %222

222:                                              ; preds = %220, %222
  %223 = phi i64 [ %230, %222 ], [ %221, %220 ]
  %224 = getelementptr inbounds float, float* %0, i64 %223
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4, !alias.scope !528, !noalias !531
  %227 = icmp slt i32 %226, 0
  %228 = uitofp i1 %227 to float
  %229 = getelementptr inbounds float, float* %3, i64 %223
  store float %228, float* %229, align 4, !alias.scope !531, !noalias !528
  %230 = add nuw nsw i64 %223, 1
  %231 = icmp eq i64 %230, %154
  br i1 %231, label %283, label %222, !llvm.loop !534

232:                                              ; preds = %4
  %233 = sext i32 %1 to i64
  %234 = bitcast %"class.Eigen::CwiseUnaryOp"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %234) #15, !noalias !535
  %235 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %0, float** %235, align 8, !noalias !535
  %236 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %233, i64* %236, align 8, !noalias !535
  %237 = bitcast %"class.Eigen::ArrayWrapper"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %237) #15, !noalias !535
  %238 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %3, float** %238, align 8, !noalias !535
  %239 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %16, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %233, i64* %239, align 8, !noalias !535
  %240 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %240) #15, !noalias !535
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %16, %"class.Eigen::CwiseUnaryOp"* nonnull dereferenceable(32) %15, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %14) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %240) #15, !noalias !535
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %237) #15, !noalias !535
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %234) #15, !noalias !535
  br label %283

241:                                              ; preds = %27, %20
  %242 = phi i64 [ 0, %20 ], [ %47, %27 ]
  %243 = icmp eq i64 %23, 0
  br i1 %243, label %283, label %244

244:                                              ; preds = %241
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !506
  %245 = getelementptr inbounds float, float* %0, i64 %242
  %246 = load float, float* %245, align 4, !alias.scope !510, !noalias !511
  %247 = fcmp ogt float %246, 0.000000e+00
  %248 = select i1 %247, float* %245, float* %17
  %249 = bitcast float* %248 to i32*
  %250 = load i32, i32* %249, align 4, !noalias !511
  %251 = getelementptr inbounds float, float* %3, i64 %242
  %252 = bitcast float* %251 to i32*
  store i32 %250, i32* %252, align 4, !alias.scope !511, !noalias !510
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  br label %283

253:                                              ; preds = %60, %52
  %254 = phi i64 [ 0, %52 ], [ %86, %60 ]
  %255 = icmp eq i64 %56, 0
  br i1 %255, label %283, label %256

256:                                              ; preds = %253
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !512
  %257 = getelementptr inbounds float, float* %0, i64 %254
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !512
  %258 = load float, float* %257, align 4, !alias.scope !516, !noalias !517
  %259 = fcmp ogt float %258, 1.000000e+00
  %260 = select i1 %259, float* %13, float* %257
  %261 = load float, float* %260, align 4, !noalias !517
  %262 = fcmp ogt float %261, -1.000000e+00
  %263 = select i1 %262, float* %260, float* %12
  %264 = bitcast float* %263 to i32*
  %265 = load i32, i32* %264, align 4, !noalias !517
  %266 = getelementptr inbounds float, float* %3, i64 %254
  %267 = bitcast float* %266 to i32*
  store i32 %265, i32* %267, align 4, !alias.scope !517, !noalias !516
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  br label %283

268:                                              ; preds = %99, %91
  %269 = phi i64 [ 0, %91 ], [ %125, %99 ]
  %270 = icmp eq i64 %95, 0
  br i1 %270, label %283, label %271

271:                                              ; preds = %268
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !518
  %272 = getelementptr inbounds float, float* %0, i64 %269
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !518
  %273 = load float, float* %272, align 4, !alias.scope !522, !noalias !523
  %274 = fcmp ogt float %273, 6.000000e+00
  %275 = select i1 %274, float* %6, float* %272
  %276 = load float, float* %275, align 4, !noalias !523
  %277 = fcmp ogt float %276, 0.000000e+00
  %278 = select i1 %277, float* %275, float* %5
  %279 = bitcast float* %278 to i32*
  %280 = load i32, i32* %279, align 4, !noalias !523
  %281 = getelementptr inbounds float, float* %3, i64 %269
  %282 = bitcast float* %281 to i32*
  store i32 %280, i32* %282, align 4, !alias.scope !523, !noalias !522
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  br label %283

283:                                              ; preds = %222, %271, %268, %256, %253, %244, %241, %218, %151, %89, %50, %18, %128, %232, %4
  ret void
}

declare void @_ZN6tflite12tensor_utils10Sub1VectorEPKfiPf(float*, i32, float*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils10ClipVectorEPKfifPf(float*, i32, float, float*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* dereferenceable(24), %"class.Eigen::CwiseUnaryOp"* dereferenceable(32), %"struct.Eigen::internal::assign_op"* dereferenceable(1)) local_unnamed_addr #5 comdat {
  %4 = bitcast %"class.Eigen::CwiseUnaryOp"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.Eigen::ArrayWrapper"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %7, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = lshr i64 %7, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %9
  %17 = select i1 %16, i64 %15, i64 %9
  br label %18

18:                                               ; preds = %12, %3
  %19 = phi i64 [ %17, %12 ], [ %9, %3 ]
  %20 = sub nsw i64 %9, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %92

25:                                               ; preds = %18
  %26 = inttoptr i64 %7 to float*
  %27 = inttoptr i64 %5 to float*
  br label %28

28:                                               ; preds = %25, %88
  %29 = phi i64 [ %90, %88 ], [ 0, %25 ]
  %30 = getelementptr inbounds float, float* %26, i64 %29
  %31 = getelementptr inbounds float, float* %27, i64 %29
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %32, -9.000000e+00
  %34 = fcmp ogt float %32, 0x402F499C60000000
  %35 = select i1 %34, float 0x402F499C60000000, float %32
  %36 = fmul float %35, %35
  %37 = fmul float %36, 0x3DC806AA20000000
  %38 = fadd float %37, 0x3E7F09D960000000
  %39 = fmul float %36, %38
  %40 = fadd float %39, 0x3F0FE82760000000
  %41 = fmul float %36, %40
  %42 = fadd float %41, 0x3F816FAB00000000
  %43 = fmul float %36, %42
  %44 = fadd float %43, 0x3FCFC7E640000000
  %45 = fmul float %35, %44
  %46 = fmul float %36, 0x3D65789EA0000000
  %47 = fadd float %46, 0x3E38BE4F60000000
  %48 = fmul float %36, %47
  %49 = fadd float %48, 0x3EDA62FBA0000000
  %50 = fmul float %36, %49
  %51 = fadd float %50, 0x3F5BE2A7E0000000
  %52 = fmul float %36, %51
  %53 = fadd float %52, 0x3FBDE7C300000000
  %54 = fmul float %36, %53
  %55 = fadd float %54, 0x3FEFC7E680000000
  %56 = fdiv float %45, %55
  %57 = fadd float %56, 5.000000e-01
  br i1 %33, label %58, label %88, !prof !539

58:                                               ; preds = %28
  %59 = fcmp ogt float %32, 0x40561814C0000000
  %60 = select i1 %59, float 0x40561814C0000000, float %32
  %61 = fcmp olt float %60, 0xC0561814A0000000
  %62 = select i1 %61, float 0xC0561814A0000000, float %60
  %63 = fmul float %62, 0x3FF7154760000000
  %64 = fadd float %63, 5.000000e-01
  %65 = tail call float @llvm.floor.f32(float %64) #15
  %66 = fmul float %65, 0x3FE6300000000000
  %67 = fsub float %62, %66
  %68 = fmul float %65, 0x3F2BD01060000000
  %69 = fadd float %68, %67
  %70 = fmul float %69, %69
  %71 = fmul float %69, 0x3F2A0D2CE0000000
  %72 = fadd float %71, 0x3F56E879C0000000
  %73 = fmul float %69, %72
  %74 = fadd float %73, 0x3F81112100000000
  %75 = fmul float %69, %74
  %76 = fadd float %75, 0x3FA5553820000000
  %77 = fmul float %69, %76
  %78 = fadd float %77, 0x3FC5555540000000
  %79 = fmul float %69, %78
  %80 = fadd float %79, 5.000000e-01
  %81 = fmul float %70, %80
  %82 = fadd float %69, %81
  %83 = fadd float %82, 1.000000e+00
  %84 = fptosi float %65 to i32
  %85 = tail call float @ldexpf(float %83, i32 %84) #15
  %86 = fcmp olt float %85, %32
  %87 = select i1 %86, float %32, float %85
  br label %88

88:                                               ; preds = %58, %28
  %89 = phi float [ %87, %58 ], [ %57, %28 ]
  store float %89, float* %30, align 4
  %90 = add nuw i64 %29, 1
  %91 = icmp eq i64 %90, %19
  br i1 %91, label %92, label %28

92:                                               ; preds = %88, %18
  %93 = icmp sgt i64 %20, 3
  br i1 %93, label %94, label %169

94:                                               ; preds = %92
  %95 = inttoptr i64 %7 to float*
  %96 = inttoptr i64 %5 to float*
  br label %97

97:                                               ; preds = %94, %164
  %98 = phi i64 [ %167, %164 ], [ %19, %94 ]
  %99 = getelementptr inbounds float, float* %95, i64 %98
  %100 = getelementptr inbounds float, float* %96, i64 %98
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = fcmp olt <4 x float> %102, <float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00>
  %104 = bitcast <4 x i1> %103 to i4
  %105 = icmp eq i4 %104, 0
  %106 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000>) #8, !srcloc !540
  %107 = fmul <4 x float> %106, %106
  %108 = fmul <4 x float> %107, <float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000>
  %109 = fadd <4 x float> %108, <float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000>
  %110 = fmul <4 x float> %107, %109
  %111 = fadd <4 x float> %110, <float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000>
  %112 = fmul <4 x float> %107, %111
  %113 = fadd <4 x float> %112, <float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000>
  %114 = fmul <4 x float> %107, %113
  %115 = fadd <4 x float> %114, <float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000>
  %116 = fmul <4 x float> %106, %115
  %117 = fmul <4 x float> %107, <float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000>
  %118 = fadd <4 x float> %117, <float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000>
  %119 = fmul <4 x float> %107, %118
  %120 = fadd <4 x float> %119, <float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000>
  %121 = fmul <4 x float> %107, %120
  %122 = fadd <4 x float> %121, <float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000>
  %123 = fmul <4 x float> %107, %122
  %124 = fadd <4 x float> %123, <float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000>
  %125 = fmul <4 x float> %107, %124
  %126 = fadd <4 x float> %125, <float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000>
  %127 = fdiv <4 x float> %116, %126
  %128 = fadd <4 x float> %127, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  br i1 %105, label %164, label %129, !prof !541

129:                                              ; preds = %97
  %130 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000>) #8, !srcloc !540
  %131 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %130, <4 x float> <float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000>) #8, !srcloc !542
  %132 = fmul <4 x float> %131, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %133 = fadd <4 x float> %132, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %133) #15
  %135 = sitofp <4 x i32> %134 to <4 x float>
  %136 = fcmp olt <4 x float> %133, %135
  %137 = select <4 x i1> %136, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %138 = fsub <4 x float> %135, %137
  %139 = fmul <4 x float> %138, <float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000>
  %140 = fsub <4 x float> %131, %139
  %141 = fmul <4 x float> %138, <float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000>
  %142 = fsub <4 x float> %140, %141
  %143 = fmul <4 x float> %142, %142
  %144 = fmul <4 x float> %142, <float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000>
  %145 = fadd <4 x float> %144, <float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000>
  %146 = fmul <4 x float> %142, %145
  %147 = fadd <4 x float> %146, <float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000>
  %148 = fmul <4 x float> %142, %147
  %149 = fadd <4 x float> %148, <float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000>
  %150 = fmul <4 x float> %142, %149
  %151 = fadd <4 x float> %150, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %152 = fmul <4 x float> %142, %151
  %153 = fadd <4 x float> %152, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %154 = fmul <4 x float> %143, %153
  %155 = fadd <4 x float> %142, %154
  %156 = fadd <4 x float> %155, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %157 = fadd <4 x float> %138, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %158 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %157) #15
  %159 = shl <4 x i32> %158, <i32 23, i32 23, i32 23, i32 23>
  %160 = bitcast <4 x i32> %159 to <4 x float>
  %161 = fmul <4 x float> %156, %160
  %162 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %161, <4 x float> %102) #8, !srcloc !542
  %163 = select <4 x i1> %103, <4 x float> %162, <4 x float> %128
  br label %164

164:                                              ; preds = %97, %129
  %165 = phi <4 x float> [ %163, %129 ], [ %128, %97 ]
  %166 = bitcast float* %99 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 16
  %167 = add nsw i64 %98, 4
  %168 = icmp slt i64 %167, %23
  br i1 %168, label %97, label %169

169:                                              ; preds = %164, %92
  %170 = icmp slt i64 %23, %9
  br i1 %170, label %171, label %238

171:                                              ; preds = %169
  %172 = inttoptr i64 %7 to float*
  %173 = inttoptr i64 %5 to float*
  br label %174

174:                                              ; preds = %171, %234
  %175 = phi i64 [ %236, %234 ], [ %23, %171 ]
  %176 = getelementptr inbounds float, float* %172, i64 %175
  %177 = getelementptr inbounds float, float* %173, i64 %175
  %178 = load float, float* %177, align 4
  %179 = fcmp olt float %178, -9.000000e+00
  %180 = fcmp ogt float %178, 0x402F499C60000000
  %181 = select i1 %180, float 0x402F499C60000000, float %178
  %182 = fmul float %181, %181
  %183 = fmul float %182, 0x3DC806AA20000000
  %184 = fadd float %183, 0x3E7F09D960000000
  %185 = fmul float %182, %184
  %186 = fadd float %185, 0x3F0FE82760000000
  %187 = fmul float %182, %186
  %188 = fadd float %187, 0x3F816FAB00000000
  %189 = fmul float %182, %188
  %190 = fadd float %189, 0x3FCFC7E640000000
  %191 = fmul float %181, %190
  %192 = fmul float %182, 0x3D65789EA0000000
  %193 = fadd float %192, 0x3E38BE4F60000000
  %194 = fmul float %182, %193
  %195 = fadd float %194, 0x3EDA62FBA0000000
  %196 = fmul float %182, %195
  %197 = fadd float %196, 0x3F5BE2A7E0000000
  %198 = fmul float %182, %197
  %199 = fadd float %198, 0x3FBDE7C300000000
  %200 = fmul float %182, %199
  %201 = fadd float %200, 0x3FEFC7E680000000
  %202 = fdiv float %191, %201
  %203 = fadd float %202, 5.000000e-01
  br i1 %179, label %204, label %234, !prof !539

204:                                              ; preds = %174
  %205 = fcmp ogt float %178, 0x40561814C0000000
  %206 = select i1 %205, float 0x40561814C0000000, float %178
  %207 = fcmp olt float %206, 0xC0561814A0000000
  %208 = select i1 %207, float 0xC0561814A0000000, float %206
  %209 = fmul float %208, 0x3FF7154760000000
  %210 = fadd float %209, 5.000000e-01
  %211 = tail call float @llvm.floor.f32(float %210) #15
  %212 = fmul float %211, 0x3FE6300000000000
  %213 = fsub float %208, %212
  %214 = fmul float %211, 0x3F2BD01060000000
  %215 = fadd float %214, %213
  %216 = fmul float %215, %215
  %217 = fmul float %215, 0x3F2A0D2CE0000000
  %218 = fadd float %217, 0x3F56E879C0000000
  %219 = fmul float %215, %218
  %220 = fadd float %219, 0x3F81112100000000
  %221 = fmul float %215, %220
  %222 = fadd float %221, 0x3FA5553820000000
  %223 = fmul float %215, %222
  %224 = fadd float %223, 0x3FC5555540000000
  %225 = fmul float %215, %224
  %226 = fadd float %225, 5.000000e-01
  %227 = fmul float %216, %226
  %228 = fadd float %215, %227
  %229 = fadd float %228, 1.000000e+00
  %230 = fptosi float %211 to i32
  %231 = tail call float @ldexpf(float %229, i32 %230) #15
  %232 = fcmp olt float %231, %178
  %233 = select i1 %232, float %178, float %231
  br label %234

234:                                              ; preds = %204, %174
  %235 = phi float [ %233, %204 ], [ %203, %174 ]
  store float %235, float* %176, align 4
  %236 = add i64 %175, 1
  %237 = icmp eq i64 %236, %9
  br i1 %237, label %238, label %174

238:                                              ; preds = %234, %169
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nofree nounwind
declare float @ldexpf(float, i32) local_unnamed_addr #7

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_(%"class.Eigen::internal::generic_dense_assignment_kernel.59"* dereferenceable(32)) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::ArrayWrapper"** %2 to %"struct.Eigen::EigenBase.39"**
  %4 = load %"struct.Eigen::EigenBase.39"*, %"struct.Eigen::EigenBase.39"** %3, align 8
  %5 = getelementptr inbounds %"struct.Eigen::EigenBase.39", %"struct.Eigen::EigenBase.39"* %4, i64 8
  %6 = bitcast %"struct.Eigen::EigenBase.39"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"struct.Eigen::EigenBase.39"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %1
  %13 = lshr i64 %9, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %7
  %17 = select i1 %16, i64 %15, i64 %7
  br label %18

18:                                               ; preds = %1, %12
  %19 = phi i64 [ %17, %12 ], [ %7, %1 ]
  %20 = sub nsw i64 %7, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %72

25:                                               ; preds = %18
  %26 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %27 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0, i64 0, i32 1
  %28 = bitcast %"struct.Eigen::internal::evaluator.55"** %27 to %"struct.Eigen::internal::unary_evaluator.56"**
  br label %29

29:                                               ; preds = %29, %25
  %30 = phi i64 [ 0, %25 ], [ %70, %29 ]
  %31 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %26, align 8
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = getelementptr inbounds float, float* %33, i64 %30
  %35 = load %"struct.Eigen::internal::unary_evaluator.56"*, %"struct.Eigen::internal::unary_evaluator.56"** %28, align 8
  %36 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.56", %"struct.Eigen::internal::unary_evaluator.56"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load float*, float** %36, align 8
  %38 = getelementptr inbounds float, float* %37, i64 %30
  %39 = load float, float* %38, align 4
  %40 = fcmp ogt float %39, 0x401F9F09E0000000
  %41 = select i1 %40, float 0x401F9F09E0000000, float %39
  %42 = fcmp olt float %41, 0xC01F9F09E0000000
  %43 = select i1 %42, float 0xC01F9F09E0000000, float %41
  %44 = tail call float @llvm.fabs.f32(float %39) #15
  %45 = fcmp olt float %44, 0x3F3A36E2E0000000
  %46 = select i1 %45, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %47 = fmul float %43, %43
  %48 = fmul float %47, 0x3CB3E4B800000000
  %49 = fsub float 0x3D4C266FC0000000, %48
  %50 = fmul float %47, %49
  %51 = fadd float %50, 0xBDD7A6FFE0000000
  %52 = fmul float %47, %51
  %53 = fadd float %52, 0x3E6B800820000000
  %54 = fmul float %47, %53
  %55 = fadd float %54, 0x3EEF286940000000
  %56 = fmul float %47, %55
  %57 = fadd float %56, 0x3F44E1BDA0000000
  %58 = fmul float %47, %57
  %59 = fadd float %58, 0x3F740B3B80000000
  %60 = fmul float %43, %59
  %61 = fmul float %47, 0x3EB41A7B00000000
  %62 = fadd float %61, 0x3F1F12BAC0000000
  %63 = fmul float %47, %62
  %64 = fadd float %63, 0x3F629540A0000000
  %65 = fmul float %47, %64
  %66 = fadd float %65, 0x3F740B3BA0000000
  %67 = fdiv float %60, %66
  %68 = fcmp oeq float %46, 0.000000e+00
  %69 = select i1 %68, float %67, float %43
  store float %69, float* %34, align 4
  %70 = add nuw nsw i64 %30, 1
  %71 = icmp eq i64 %70, %19
  br i1 %71, label %72, label %29

72:                                               ; preds = %29, %18
  %73 = icmp sgt i64 %20, 3
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0, i64 0, i32 1
  %77 = bitcast %"struct.Eigen::internal::evaluator.55"** %76 to %"struct.Eigen::internal::unary_evaluator.56"**
  br label %128

78:                                               ; preds = %128, %72
  %79 = icmp slt i64 %23, %7
  br i1 %79, label %80, label %127

80:                                               ; preds = %78
  %81 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %82 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.59", %"class.Eigen::internal::generic_dense_assignment_kernel.59"* %0, i64 0, i32 1
  %83 = bitcast %"struct.Eigen::internal::evaluator.55"** %82 to %"struct.Eigen::internal::unary_evaluator.56"**
  br label %84

84:                                               ; preds = %84, %80
  %85 = phi i64 [ %23, %80 ], [ %125, %84 ]
  %86 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %81, align 8
  %87 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load float*, float** %87, align 8
  %89 = getelementptr inbounds float, float* %88, i64 %85
  %90 = load %"struct.Eigen::internal::unary_evaluator.56"*, %"struct.Eigen::internal::unary_evaluator.56"** %83, align 8
  %91 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.56", %"struct.Eigen::internal::unary_evaluator.56"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load float*, float** %91, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %85
  %94 = load float, float* %93, align 4
  %95 = fcmp ogt float %94, 0x401F9F09E0000000
  %96 = select i1 %95, float 0x401F9F09E0000000, float %94
  %97 = fcmp olt float %96, 0xC01F9F09E0000000
  %98 = select i1 %97, float 0xC01F9F09E0000000, float %96
  %99 = tail call float @llvm.fabs.f32(float %94) #15
  %100 = fcmp olt float %99, 0x3F3A36E2E0000000
  %101 = select i1 %100, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %102 = fmul float %98, %98
  %103 = fmul float %102, 0x3CB3E4B800000000
  %104 = fsub float 0x3D4C266FC0000000, %103
  %105 = fmul float %102, %104
  %106 = fadd float %105, 0xBDD7A6FFE0000000
  %107 = fmul float %102, %106
  %108 = fadd float %107, 0x3E6B800820000000
  %109 = fmul float %102, %108
  %110 = fadd float %109, 0x3EEF286940000000
  %111 = fmul float %102, %110
  %112 = fadd float %111, 0x3F44E1BDA0000000
  %113 = fmul float %102, %112
  %114 = fadd float %113, 0x3F740B3B80000000
  %115 = fmul float %98, %114
  %116 = fmul float %102, 0x3EB41A7B00000000
  %117 = fadd float %116, 0x3F1F12BAC0000000
  %118 = fmul float %102, %117
  %119 = fadd float %118, 0x3F629540A0000000
  %120 = fmul float %102, %119
  %121 = fadd float %120, 0x3F740B3BA0000000
  %122 = fdiv float %115, %121
  %123 = fcmp oeq float %101, 0.000000e+00
  %124 = select i1 %123, float %122, float %98
  store float %124, float* %89, align 4
  %125 = add nsw i64 %85, 1
  %126 = icmp eq i64 %125, %7
  br i1 %126, label %127, label %84

127:                                              ; preds = %84, %78
  ret void

128:                                              ; preds = %74, %128
  %129 = phi i64 [ %19, %74 ], [ %169, %128 ]
  %130 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %75, align 8
  %131 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load float*, float** %131, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %129
  %134 = load %"struct.Eigen::internal::unary_evaluator.56"*, %"struct.Eigen::internal::unary_evaluator.56"** %77, align 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.56", %"struct.Eigen::internal::unary_evaluator.56"* %134, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load float*, float** %135, align 8
  %137 = getelementptr inbounds float, float* %136, i64 %129
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 1
  %140 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %139, <4 x float> <float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000>) #8, !srcloc !540
  %141 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %140, <4 x float> <float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000>) #8, !srcloc !542
  %142 = bitcast <4 x float> %139 to <4 x i32>
  %143 = and <4 x i32> %142, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fcmp uge <4 x float> %144, <float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000>
  %146 = fmul <4 x float> %141, %141
  %147 = fmul <4 x float> %146, <float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000>
  %148 = fadd <4 x float> %147, <float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000>
  %149 = fmul <4 x float> %146, %148
  %150 = fadd <4 x float> %149, <float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000>
  %151 = fmul <4 x float> %146, %150
  %152 = fadd <4 x float> %151, <float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000>
  %153 = fmul <4 x float> %146, %152
  %154 = fadd <4 x float> %153, <float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000>
  %155 = fmul <4 x float> %146, %154
  %156 = fadd <4 x float> %155, <float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000>
  %157 = fmul <4 x float> %146, %156
  %158 = fadd <4 x float> %157, <float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000>
  %159 = fmul <4 x float> %141, %158
  %160 = fmul <4 x float> %146, <float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000>
  %161 = fadd <4 x float> %160, <float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000>
  %162 = fmul <4 x float> %146, %161
  %163 = fadd <4 x float> %162, <float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000>
  %164 = fmul <4 x float> %146, %163
  %165 = fadd <4 x float> %164, <float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000>
  %166 = fdiv <4 x float> %159, %165
  %167 = select <4 x i1> %145, <4 x float> %166, <4 x float> %141
  %168 = bitcast float* %133 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 16
  %169 = add nsw i64 %129, 4
  %170 = icmp slt i64 %169, %23
  br i1 %170, label %128, label %78
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare void @_ZN6tflite12tensor_utils20VectorScalarMultiplyEPKaifPf(i8*, i32, float, float*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

declare void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8*, i32*, i32, i32) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float*, i32, i8*, float*, i32*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float*, i32, i8*, float*, float*, float*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8*, i32, i32, i8*, float*, i32, float*, float*, i32*, i32*, i32*, i8*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i32*, i16*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils39VectorBatchVectorCwiseProductAccumulateEPKsiS2_iiiPs(i16*, i32, i16*, i32, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils14ApplyLayerNormEPKsS2_PKiiiiiiPs(i16*, i16*, i32*, i32, i32, i32, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils12ApplySigmoidEPKsiiPs(i16*, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils9ApplyTanhEiPKsiiPs(i32, i16*, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils10Sub1VectorEPKsiPs(i16*, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiPs(i16*, i16*, i32, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils8CwiseAddEPKsS2_iiPs(i16*, i16*, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils13CwiseClippingEPssii(i16*, i16 signext, i32, i32) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils8CwiseMulEPKsS2_iiiiiPa(i16*, i16*, i32, i32, i32, i32, i32, i8*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPaPNS_17CpuBackendContextE(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i32*, i8*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils13CwiseClippingEPaaii(i8*, i8 signext, i32, i32) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8*, i32, i8*, i32, i32, i32, i32, i32, i8*, i8 signext) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils21TwoGateSaturationgAddEPKaaS2_aiiiiiiPs(i8*, i8 signext, i8*, i8 signext, i32, i32, i32, i32, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils19ApplyLayerNormFloatEPKsS2_iiPKiiiPs(i16*, i16*, i32, i32, i32*, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils17ApplySigmoidFloatEPKsiiPs(i16*, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils14ApplyTanhFloatEPKsiiiPs(i16*, i32, i32, i32, i16*) local_unnamed_addr #4

declare void @_ZN6tflite12tensor_utils25MatrixBatchVectorMultiplyEPKsPKaiiPKiiiiiPa(i16*, i8*, i32, i32, i32*, i32, i32, i32, i32, i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #12

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { cold }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!9 = distinct !{!9, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!10 = !{!11, !12}
!11 = distinct !{!11, !9, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!12 = distinct !{!12, !9, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!13 = !{!11}
!14 = !{!8, !12}
!15 = !{!12}
!16 = !{!8, !11}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !20, !18}
!20 = !{!"llvm.loop.unroll.runtime.disable"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!23 = distinct !{!23, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!24 = !{!25, !26}
!25 = distinct !{!25, !23, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!26 = distinct !{!26, !23, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!27 = !{!25}
!28 = !{!22, !26}
!29 = !{!26}
!30 = !{!22, !25}
!31 = distinct !{!31, !18}
!32 = distinct !{!32, !20, !18}
!33 = !{!34, !36}
!34 = distinct !{!34, !35, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!35 = distinct !{!35, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!36 = distinct !{!36, !35, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!39 = distinct !{!39, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!40 = !{!41, !42}
!41 = distinct !{!41, !39, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!42 = distinct !{!42, !39, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!43 = !{!41}
!44 = !{!38, !42}
!45 = !{!42}
!46 = !{!38, !41}
!47 = distinct !{!47, !18}
!48 = distinct !{!48, !20, !18}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!51 = distinct !{!51, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!52 = !{!53, !54}
!53 = distinct !{!53, !51, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!54 = distinct !{!54, !51, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!55 = !{!53}
!56 = !{!50, !54}
!57 = !{!54}
!58 = !{!50, !53}
!59 = distinct !{!59, !18}
!60 = distinct !{!60, !20, !18}
!61 = !{!62, !64}
!62 = distinct !{!62, !63, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!63 = distinct !{!63, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!64 = distinct !{!64, !63, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!67 = distinct !{!67, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!68 = !{!69, !70}
!69 = distinct !{!69, !67, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!70 = distinct !{!70, !67, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!71 = !{!69}
!72 = !{!66, !70}
!73 = !{!70}
!74 = !{!66, !69}
!75 = distinct !{!75, !18}
!76 = distinct !{!76, !20, !18}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!79 = distinct !{!79, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!80 = !{!81, !82}
!81 = distinct !{!81, !79, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!82 = distinct !{!82, !79, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!83 = !{!81}
!84 = !{!78, !82}
!85 = !{!82}
!86 = !{!78, !81}
!87 = distinct !{!87, !18}
!88 = distinct !{!88, !20, !18}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!91 = distinct !{!91, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!92 = !{!93, !94}
!93 = distinct !{!93, !91, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!94 = distinct !{!94, !91, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!95 = !{!93}
!96 = !{!90, !94}
!97 = !{!94}
!98 = !{!90, !93}
!99 = distinct !{!99, !18}
!100 = distinct !{!100, !20, !18}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!103 = distinct !{!103, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!104 = !{!105, !106}
!105 = distinct !{!105, !103, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!106 = distinct !{!106, !103, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!107 = !{!105}
!108 = !{!102, !106}
!109 = !{!106}
!110 = !{!102, !105}
!111 = distinct !{!111, !18}
!112 = distinct !{!112, !20, !18}
!113 = !{!114}
!114 = distinct !{!114, !115, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!115 = distinct !{!115, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!116 = !{!117, !118}
!117 = distinct !{!117, !115, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!118 = distinct !{!118, !115, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!119 = !{!117}
!120 = !{!114, !118}
!121 = !{!118}
!122 = !{!114, !117}
!123 = distinct !{!123, !18}
!124 = distinct !{!124, !20, !18}
!125 = !{!126}
!126 = distinct !{!126, !127, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!127 = distinct !{!127, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!128 = !{!129, !130}
!129 = distinct !{!129, !127, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!130 = distinct !{!130, !127, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!131 = !{!129}
!132 = !{!126, !130}
!133 = !{!130}
!134 = !{!126, !129}
!135 = distinct !{!135, !18}
!136 = distinct !{!136, !20, !18}
!137 = !{!138, !140}
!138 = distinct !{!138, !139, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!139 = distinct !{!139, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!140 = distinct !{!140, !139, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!141 = !{!142, !144}
!142 = distinct !{!142, !143, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!143 = distinct !{!143, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!144 = distinct !{!144, !145}
!145 = distinct !{!145, !"LVerDomain"}
!146 = !{!147, !148, !149}
!147 = distinct !{!147, !143, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!148 = distinct !{!148, !143, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!149 = distinct !{!149, !145}
!150 = !{!147, !149}
!151 = !{!142, !148}
!152 = !{!148, !144}
!153 = !{!142, !147, !149}
!154 = distinct !{!154, !18}
!155 = !{!142}
!156 = !{!147, !148}
!157 = !{!147}
!158 = !{!148}
!159 = !{!142, !147}
!160 = distinct !{!160, !3}
!161 = distinct !{!161, !18}
!162 = distinct !{!162, !3}
!163 = distinct !{!163, !3}
!164 = !{i8 0, i8 2}
!165 = distinct !{!165, !3}
!166 = distinct !{!166, !3}
!167 = distinct !{!167, !3}
!168 = distinct !{!168, !3}
!169 = !{!170}
!170 = distinct !{!170, !171}
!171 = distinct !{!171, !"LVerDomain"}
!172 = !{!173, !175, !176}
!173 = distinct !{!173, !174, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!174 = distinct !{!174, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!175 = distinct !{!175, !174, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!176 = distinct !{!176, !174, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!177 = !{!178}
!178 = distinct !{!178, !171}
!179 = !{!173, !175, !176, !170}
!180 = distinct !{!180, !18}
!181 = distinct !{!181, !3}
!182 = distinct !{!182, !18}
!183 = !{!184}
!184 = distinct !{!184, !185}
!185 = distinct !{!185, !"LVerDomain"}
!186 = !{!187, !189, !190}
!187 = distinct !{!187, !188, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!188 = distinct !{!188, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!189 = distinct !{!189, !188, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!190 = distinct !{!190, !188, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!191 = !{!192}
!192 = distinct !{!192, !185}
!193 = !{!187, !189, !190, !184}
!194 = distinct !{!194, !18}
!195 = distinct !{!195, !3}
!196 = distinct !{!196, !18}
!197 = !{!198}
!198 = distinct !{!198, !199}
!199 = distinct !{!199, !"LVerDomain"}
!200 = !{!201, !203, !204}
!201 = distinct !{!201, !202, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!202 = distinct !{!202, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!203 = distinct !{!203, !202, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!204 = distinct !{!204, !202, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!205 = !{!206}
!206 = distinct !{!206, !199}
!207 = !{!201, !203, !204, !198}
!208 = distinct !{!208, !18}
!209 = distinct !{!209, !3}
!210 = distinct !{!210, !18}
!211 = !{!212}
!212 = distinct !{!212, !213}
!213 = distinct !{!213, !"LVerDomain"}
!214 = !{!215, !217, !218}
!215 = distinct !{!215, !216, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!216 = distinct !{!216, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!217 = distinct !{!217, !216, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!218 = distinct !{!218, !216, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!219 = !{!220}
!220 = distinct !{!220, !213}
!221 = !{!215, !217, !218, !212}
!222 = distinct !{!222, !18}
!223 = distinct !{!223, !3}
!224 = distinct !{!224, !18}
!225 = !{!226}
!226 = distinct !{!226, !227}
!227 = distinct !{!227, !"LVerDomain"}
!228 = !{!229, !231, !232}
!229 = distinct !{!229, !230, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!230 = distinct !{!230, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!231 = distinct !{!231, !230, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!232 = distinct !{!232, !230, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!233 = !{!234}
!234 = distinct !{!234, !227}
!235 = !{!229, !231, !232, !226}
!236 = distinct !{!236, !18}
!237 = distinct !{!237, !3}
!238 = distinct !{!238, !18}
!239 = !{!240}
!240 = distinct !{!240, !241}
!241 = distinct !{!241, !"LVerDomain"}
!242 = !{!243, !245, !246}
!243 = distinct !{!243, !244, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!244 = distinct !{!244, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!245 = distinct !{!245, !244, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!246 = distinct !{!246, !244, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!247 = !{!248}
!248 = distinct !{!248, !241}
!249 = !{!243, !245, !246, !240}
!250 = distinct !{!250, !18}
!251 = distinct !{!251, !3}
!252 = distinct !{!252, !18}
!253 = !{!254}
!254 = distinct !{!254, !255}
!255 = distinct !{!255, !"LVerDomain"}
!256 = !{!257, !259, !260}
!257 = distinct !{!257, !258, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!258 = distinct !{!258, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!259 = distinct !{!259, !258, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!260 = distinct !{!260, !258, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!261 = !{!262}
!262 = distinct !{!262, !255}
!263 = !{!257, !259, !260, !254}
!264 = distinct !{!264, !18}
!265 = distinct !{!265, !3}
!266 = distinct !{!266, !18}
!267 = !{!268}
!268 = distinct !{!268, !269}
!269 = distinct !{!269, !"LVerDomain"}
!270 = !{!271, !273, !274}
!271 = distinct !{!271, !272, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!272 = distinct !{!272, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!273 = distinct !{!273, !272, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!274 = distinct !{!274, !272, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!275 = !{!276}
!276 = distinct !{!276, !269}
!277 = !{!271, !273, !274, !268}
!278 = distinct !{!278, !18}
!279 = distinct !{!279, !3}
!280 = distinct !{!280, !18}
!281 = !{!282}
!282 = distinct !{!282, !283}
!283 = distinct !{!283, !"LVerDomain"}
!284 = !{!285, !287, !288}
!285 = distinct !{!285, !286, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!286 = distinct !{!286, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!287 = distinct !{!287, !286, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!288 = distinct !{!288, !286, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!289 = !{!290}
!290 = distinct !{!290, !283}
!291 = !{!285, !287, !288, !282}
!292 = distinct !{!292, !18}
!293 = distinct !{!293, !3}
!294 = distinct !{!294, !18}
!295 = !{!296}
!296 = distinct !{!296, !297}
!297 = distinct !{!297, !"LVerDomain"}
!298 = !{!299, !301, !302}
!299 = distinct !{!299, !300, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!300 = distinct !{!300, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!301 = distinct !{!301, !300, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!302 = distinct !{!302, !300, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!303 = !{!304}
!304 = distinct !{!304, !297}
!305 = !{!299, !301, !302, !296}
!306 = distinct !{!306, !18}
!307 = distinct !{!307, !3}
!308 = distinct !{!308, !18}
!309 = !{!310}
!310 = distinct !{!310, !311}
!311 = distinct !{!311, !"LVerDomain"}
!312 = !{!313, !315, !316}
!313 = distinct !{!313, !314, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!314 = distinct !{!314, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!315 = distinct !{!315, !314, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!316 = distinct !{!316, !314, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!317 = !{!318}
!318 = distinct !{!318, !311}
!319 = !{!313, !315, !316, !310}
!320 = distinct !{!320, !18}
!321 = distinct !{!321, !3}
!322 = distinct !{!322, !18}
!323 = !{!324}
!324 = distinct !{!324, !325}
!325 = distinct !{!325, !"LVerDomain"}
!326 = !{!327, !329, !330}
!327 = distinct !{!327, !328, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!328 = distinct !{!328, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!329 = distinct !{!329, !328, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!330 = distinct !{!330, !328, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!331 = !{!332}
!332 = distinct !{!332, !325}
!333 = !{!327, !329, !330, !324}
!334 = distinct !{!334, !18}
!335 = distinct !{!335, !3}
!336 = distinct !{!336, !18}
!337 = !{!338}
!338 = distinct !{!338, !339, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!339 = distinct !{!339, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!340 = !{!341, !342}
!341 = distinct !{!341, !339, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!342 = distinct !{!342, !339, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!343 = !{!341}
!344 = !{!338, !342}
!345 = !{!342}
!346 = !{!338, !341}
!347 = distinct !{!347, !18}
!348 = distinct !{!348, !20, !18}
!349 = !{!350}
!350 = distinct !{!350, !351, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!351 = distinct !{!351, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!352 = !{!353, !354}
!353 = distinct !{!353, !351, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!354 = distinct !{!354, !351, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!355 = !{!353}
!356 = !{!350, !354}
!357 = !{!354}
!358 = !{!350, !353}
!359 = distinct !{!359, !18}
!360 = distinct !{!360, !20, !18}
!361 = !{!362, !364}
!362 = distinct !{!362, !363, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!363 = distinct !{!363, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!364 = distinct !{!364, !363, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!365 = !{!366}
!366 = distinct !{!366, !367, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!367 = distinct !{!367, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!368 = !{!369, !370}
!369 = distinct !{!369, !367, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!370 = distinct !{!370, !367, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!371 = !{!369}
!372 = !{!366, !370}
!373 = !{!370}
!374 = !{!366, !369}
!375 = distinct !{!375, !18}
!376 = distinct !{!376, !20, !18}
!377 = !{!378}
!378 = distinct !{!378, !379, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!379 = distinct !{!379, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!380 = !{!381, !382}
!381 = distinct !{!381, !379, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!382 = distinct !{!382, !379, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!383 = !{!381}
!384 = !{!378, !382}
!385 = !{!382}
!386 = !{!378, !381}
!387 = distinct !{!387, !18}
!388 = distinct !{!388, !20, !18}
!389 = !{!390, !392}
!390 = distinct !{!390, !391, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!391 = distinct !{!391, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!392 = distinct !{!392, !391, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!393 = !{!394}
!394 = distinct !{!394, !395, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!395 = distinct !{!395, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!396 = !{!397, !398}
!397 = distinct !{!397, !395, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!398 = distinct !{!398, !395, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!399 = !{!397}
!400 = !{!394, !398}
!401 = !{!398}
!402 = !{!394, !397}
!403 = distinct !{!403, !18}
!404 = distinct !{!404, !20, !18}
!405 = !{!406}
!406 = distinct !{!406, !407, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!407 = distinct !{!407, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!408 = !{!409, !410}
!409 = distinct !{!409, !407, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!410 = distinct !{!410, !407, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!411 = !{!409}
!412 = !{!406, !410}
!413 = !{!410}
!414 = !{!406, !409}
!415 = distinct !{!415, !18}
!416 = distinct !{!416, !20, !18}
!417 = !{!418}
!418 = distinct !{!418, !419, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!419 = distinct !{!419, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!420 = !{!421, !422}
!421 = distinct !{!421, !419, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!422 = distinct !{!422, !419, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!423 = !{!421}
!424 = !{!418, !422}
!425 = !{!422}
!426 = !{!418, !421}
!427 = distinct !{!427, !18}
!428 = distinct !{!428, !20, !18}
!429 = !{!430}
!430 = distinct !{!430, !431, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!431 = distinct !{!431, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!432 = !{!433, !434}
!433 = distinct !{!433, !431, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!434 = distinct !{!434, !431, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!435 = !{!433}
!436 = !{!430, !434}
!437 = !{!434}
!438 = !{!430, !433}
!439 = distinct !{!439, !18}
!440 = distinct !{!440, !20, !18}
!441 = !{!442}
!442 = distinct !{!442, !443, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 0"}
!443 = distinct !{!443, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_"}
!444 = !{!445, !446}
!445 = distinct !{!445, !443, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 1"}
!446 = distinct !{!446, !443, !"_ZN6tflite12tensor_utils34VectorVectorCwiseProductAccumulateIfEEvPKT_S4_iPS2_: argument 2"}
!447 = !{!445}
!448 = !{!442, !446}
!449 = !{!446}
!450 = !{!442, !445}
!451 = distinct !{!451, !18}
!452 = distinct !{!452, !20, !18}
!453 = !{!454}
!454 = distinct !{!454, !455, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!455 = distinct !{!455, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!456 = !{!457, !458}
!457 = distinct !{!457, !455, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!458 = distinct !{!458, !455, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!459 = !{!457}
!460 = !{!454, !458}
!461 = !{!458}
!462 = !{!454, !457}
!463 = distinct !{!463, !18}
!464 = distinct !{!464, !20, !18}
!465 = !{!466, !468}
!466 = distinct !{!466, !467, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!467 = distinct !{!467, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!468 = distinct !{!468, !467, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!469 = !{!470, !472}
!470 = distinct !{!470, !471, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 0"}
!471 = distinct !{!471, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_"}
!472 = distinct !{!472, !473}
!473 = distinct !{!473, !"LVerDomain"}
!474 = !{!475, !476, !477}
!475 = distinct !{!475, !471, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 1"}
!476 = distinct !{!476, !471, !"_ZN6tflite12tensor_utils24VectorVectorCwiseProductIfEEvPKT_S4_iPS2_: argument 2"}
!477 = distinct !{!477, !473}
!478 = !{!475, !477}
!479 = !{!470, !476}
!480 = !{!476, !472}
!481 = !{!470, !475, !477}
!482 = distinct !{!482, !18}
!483 = !{!470}
!484 = !{!475, !476}
!485 = !{!475}
!486 = !{!476}
!487 = !{!470, !475}
!488 = distinct !{!488, !3}
!489 = distinct !{!489, !18}
!490 = distinct !{!490, !3}
!491 = !{!492}
!492 = distinct !{!492, !493}
!493 = distinct !{!493, !"LVerDomain"}
!494 = !{!495, !497, !498}
!495 = distinct !{!495, !496, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 0"}
!496 = distinct !{!496, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE"}
!497 = distinct !{!497, !496, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 1"}
!498 = distinct !{!498, !496, !"_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_fPKfiPfS4_PKiPiS8_PbS5_PNS_17CpuBackendContextE: argument 2"}
!499 = !{!500}
!500 = distinct !{!500, !493}
!501 = !{!495, !497, !498, !492}
!502 = distinct !{!502, !18}
!503 = distinct !{!503, !3}
!504 = distinct !{!504, !18}
!505 = distinct !{!505, !3}
!506 = !{!507, !509}
!507 = distinct !{!507, !508, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf: argument 0"}
!508 = distinct !{!508, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf"}
!509 = distinct !{!509, !508, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf: argument 1"}
!510 = !{!507}
!511 = !{!509}
!512 = !{!513, !515}
!513 = distinct !{!513, !514, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf: argument 0"}
!514 = distinct !{!514, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf"}
!515 = distinct !{!515, !514, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf: argument 1"}
!516 = !{!513}
!517 = !{!515}
!518 = !{!519, !521}
!519 = distinct !{!519, !520, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf: argument 0"}
!520 = distinct !{!520, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf"}
!521 = distinct !{!521, !520, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf: argument 1"}
!522 = !{!519}
!523 = !{!521}
!524 = !{!525, !527}
!525 = distinct !{!525, !526, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf: argument 0"}
!526 = distinct !{!526, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf"}
!527 = distinct !{!527, !526, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf: argument 1"}
!528 = !{!529}
!529 = distinct !{!529, !530, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf: argument 0"}
!530 = distinct !{!530, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf"}
!531 = !{!532}
!532 = distinct !{!532, !530, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf: argument 1"}
!533 = distinct !{!533, !18}
!534 = distinct !{!534, !20, !18}
!535 = !{!536, !538}
!536 = distinct !{!536, !537, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!537 = distinct !{!537, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!538 = distinct !{!538, !537, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!539 = !{!"branch_weights", i32 1, i32 2000}
!540 = !{i32 6257620}
!541 = !{!"branch_weights", i32 2000, i32 1}
!542 = !{i32 6259513}
