; ModuleID = '../../third_party/libzip/src/lib/zip_set_name.c'
source_filename = "../../third_party/libzip/src/lib/zip_set_name.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_set_name(%struct.zip*, i64, i8*, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, %1
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %9, i32 18, i32 0) #3
  br label %154

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %16, i32 25, i32 0) #3
  br label %154

17:                                               ; preds = %10
  %18 = icmp eq i8* %2, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %17
  %20 = load i8, i8* %2, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %19
  %23 = tail call i64 @strlen(i8* nonnull %2) #4
  %24 = trunc i64 %23 to i16
  %25 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %26 = tail call %struct.zip_string* @_zip_string_new(i8* nonnull %2, i16 zeroext %24, i32 %3, %struct.zip_error* %25) #3
  %27 = icmp eq %struct.zip_string* %26, null
  br i1 %27, label %154, label %28

28:                                               ; preds = %22
  %29 = and i32 %3, 6144
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = tail call i32 @_zip_guess_encoding(%struct.zip_string* nonnull %26, i32 0) #3
  %33 = icmp eq i32 %32, 3
  br i1 %33, label %34, label %36

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %26, i64 0, i32 2
  store i32 2, i32* %35, align 4
  br label %36

36:                                               ; preds = %17, %19, %28, %31, %34
  %37 = phi %struct.zip_string* [ %26, %34 ], [ %26, %31 ], [ %26, %28 ], [ null, %19 ], [ null, %17 ]
  %38 = tail call i64 @_zip_name_locate(%struct.zip* %0, i8* %2, i32 0, %struct.zip_error* null) #3
  %39 = icmp sgt i64 %38, -1
  %40 = xor i1 %39, true
  %41 = icmp eq i64 %38, %1
  %42 = or i1 %41, %40
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  %44 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %44, i32 10, i32 0) #3
  br label %154

45:                                               ; preds = %36
  %46 = and i1 %39, %41
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %50 = load %struct.zip_entry*, %struct.zip_entry** %49, align 8
  %51 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %50, i64 %1, i32 0
  %52 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %53 = icmp eq %struct.zip_dirent* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %52, i64 0, i32 12
  %56 = load %struct.zip_string*, %struct.zip_string** %55, align 8
  %57 = tail call i32 @_zip_string_equal(%struct.zip_string* %56, %struct.zip_string* %37) #3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %69

59:                                               ; preds = %54, %48
  %60 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %50, i64 %1, i32 1
  %61 = load %struct.zip_dirent*, %struct.zip_dirent** %60, align 8
  %62 = icmp eq %struct.zip_dirent* %61, null
  br i1 %62, label %63, label %73

63:                                               ; preds = %59
  %64 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %65 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %64) #3
  store %struct.zip_dirent* %65, %struct.zip_dirent** %60, align 8
  %66 = icmp eq %struct.zip_dirent* %65, null
  br i1 %66, label %67, label %73

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %68, i32 14, i32 0) #3
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

69:                                               ; preds = %54
  %70 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %71 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %70, i64 0, i32 12
  %72 = load %struct.zip_string*, %struct.zip_string** %71, align 8
  br label %73

73:                                               ; preds = %59, %63, %69
  %74 = phi i1 [ true, %69 ], [ false, %63 ], [ false, %59 ]
  %75 = phi %struct.zip_string* [ %72, %69 ], [ %37, %63 ], [ %37, %59 ]
  %76 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %77 = tail call i8* @_zip_string_get(%struct.zip_string* %75, i32* null, i32 0, %struct.zip_error* %76) #3
  %78 = icmp eq i8* %77, null
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %50, i64 %1, i32 1
  %82 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  %83 = icmp eq %struct.zip_dirent* %82, null
  br i1 %83, label %84, label %87

84:                                               ; preds = %80
  %85 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %86 = icmp eq %struct.zip_dirent* %85, null
  br i1 %86, label %96, label %87

87:                                               ; preds = %84, %80
  %88 = phi %struct.zip_dirent* [ %82, %80 ], [ %85, %84 ]
  %89 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %88, i64 0, i32 12
  %90 = load %struct.zip_string*, %struct.zip_string** %89, align 8
  %91 = icmp eq %struct.zip_string* %90, null
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  %93 = tail call i8* @_zip_string_get(%struct.zip_string* nonnull %90, i32* null, i32 0, %struct.zip_error* %76) #3
  %94 = icmp eq i8* %93, null
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

96:                                               ; preds = %84, %87, %92
  %97 = phi i8* [ %93, %92 ], [ null, %87 ], [ null, %84 ]
  %98 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %99 = load %struct.zip_hash*, %struct.zip_hash** %98, align 8
  %100 = tail call zeroext i1 @_zip_hash_add(%struct.zip_hash* %99, i8* nonnull %77, i64 %1, i32 0, %struct.zip_error* %76) #3
  br i1 %100, label %102, label %101

101:                                              ; preds = %96
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

102:                                              ; preds = %96
  %103 = icmp eq i8* %97, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %102
  %105 = load %struct.zip_hash*, %struct.zip_hash** %98, align 8
  %106 = tail call zeroext i1 @_zip_hash_delete(%struct.zip_hash* %105, i8* nonnull %97, %struct.zip_error* null) #3
  br label %107

107:                                              ; preds = %102, %104
  %108 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  br i1 %74, label %109, label %136

109:                                              ; preds = %107
  %110 = icmp eq %struct.zip_dirent* %108, null
  br i1 %110, label %135, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %108, i64 0, i32 0
  %113 = load i32, i32* %112, align 8
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %135, label %116

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %108, i64 0, i32 12
  %118 = load %struct.zip_string*, %struct.zip_string** %117, align 8
  tail call void @_zip_string_free(%struct.zip_string* %118) #3
  %119 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  %120 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %119, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = and i32 %121, -3
  store i32 %122, i32* %120, align 8
  %123 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  %124 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %123, i64 0, i32 0
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %116
  tail call void @_zip_dirent_free(%struct.zip_dirent* %123) #3
  store %struct.zip_dirent* null, %struct.zip_dirent** %81, align 8
  br label %135

128:                                              ; preds = %116
  %129 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %130 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %129, i64 0, i32 12
  %131 = bitcast %struct.zip_string** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %123, i64 0, i32 12
  %134 = bitcast %struct.zip_string** %133 to i64*
  store i64 %132, i64* %134, align 8
  br label %135

135:                                              ; preds = %111, %109, %128, %127
  tail call void @_zip_string_free(%struct.zip_string* %37) #3
  br label %154

136:                                              ; preds = %107
  %137 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %108, i64 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %147, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %108, i64 0, i32 12
  %143 = load %struct.zip_string*, %struct.zip_string** %142, align 8
  tail call void @_zip_string_free(%struct.zip_string* %143) #3
  %144 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  %145 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %144, i64 0, i32 0
  %146 = load i32, i32* %145, align 8
  br label %147

147:                                              ; preds = %136, %141
  %148 = phi i32 [ %138, %136 ], [ %146, %141 ]
  %149 = phi %struct.zip_dirent* [ %108, %136 ], [ %144, %141 ]
  %150 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %149, i64 0, i32 0
  %151 = or i32 %148, 2
  store i32 %151, i32* %150, align 8
  %152 = load %struct.zip_dirent*, %struct.zip_dirent** %81, align 8
  %153 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %152, i64 0, i32 12
  store %struct.zip_string* %37, %struct.zip_string** %153, align 8
  br label %154

154:                                              ; preds = %135, %147, %22, %101, %95, %79, %67, %47, %43, %15, %8
  %155 = phi i32 [ -1, %8 ], [ -1, %15 ], [ -1, %43 ], [ 0, %47 ], [ -1, %79 ], [ -1, %95 ], [ -1, %101 ], [ -1, %67 ], [ -1, %22 ], [ 0, %147 ], [ 0, %135 ]
  ret i32 %155
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_string* @_zip_string_new(i8*, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

declare i32 @_zip_guess_encoding(%struct.zip_string*, i32) local_unnamed_addr #1

declare i64 @_zip_name_locate(%struct.zip*, i8*, i32, %struct.zip_error*) local_unnamed_addr #1

declare void @_zip_string_free(%struct.zip_string*) local_unnamed_addr #1

declare i32 @_zip_string_equal(%struct.zip_string*, %struct.zip_string*) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

declare i8* @_zip_string_get(%struct.zip_string*, i32*, i32, %struct.zip_error*) local_unnamed_addr #1

declare zeroext i1 @_zip_hash_add(%struct.zip_hash*, i8*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare zeroext i1 @_zip_hash_delete(%struct.zip_hash*, i8*, %struct.zip_error*) local_unnamed_addr #1

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
